// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDBasicInfo.proto

#include "MDBasicInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDBasicInfo_ConstantParam::MDBasicInfo_ConstantParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paramname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paramvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDBasicInfo_ConstantParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDBasicInfo_ConstantParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDBasicInfo_ConstantParamDefaultTypeInternal() {}
  union {
    MDBasicInfo_ConstantParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDBasicInfo_ConstantParamDefaultTypeInternal _MDBasicInfo_ConstantParam_default_instance_;
PROTOBUF_CONSTEXPR MDBasicInfo::MDBasicInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.constantparams_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chispelling_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.englishname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securitysubtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchangedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchangesymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hkspreadtablecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optioncontractid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optioncontractsymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionunderlyingsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionunderlyingsymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionunderlyingtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionoptiontype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optioncallorput_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionstartdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionenddate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionexercisedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optiondeliverydate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionexpiredate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionupdateversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionpricelimittype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionsecuritystatusflag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optioncarryinterestdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionearlyexpiredate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionstrategysecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fitradeproducttype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fisecurityproperty_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fisecuritystatus_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fipledgedsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fiopentime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ficlosetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fiissuemode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fiinteresttype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fiinterestfrequency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fiissuestartdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fiissueenddate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filistdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fiexpiredate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.finationaldebttype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fiissuemethod_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionlisttype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optiondeliverytype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optionmarketmakerflag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optioncombinationstrategy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deliveryyear_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deliverymonth_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrumentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrumentname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchangeinstid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.productid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expiredate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.startdelivdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enddelivdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.positiontype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.maxmarginsidealgorithm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.formersymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.delistdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.basecontractid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interestaccrualdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.outstandingshare_)*/int64_t{0}
  , /*decltype(_impl_.publicfloatsharequantity_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.maxpx_)*/int64_t{0}
  , /*decltype(_impl_.minpx_)*/int64_t{0}
  , /*decltype(_impl_.lotsize_)*/int64_t{0}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.loanmarginindicator_)*/0
  , /*decltype(_impl_.ticksize_)*/0
  , /*decltype(_impl_.pxaccuracy_)*/0
  , /*decltype(_impl_.ipoprofitable_)*/0
  , /*decltype(_impl_.presettlepx_)*/0
  , /*decltype(_impl_.diffrightsindicator_)*/0
  , /*decltype(_impl_.shhkconnect_)*/0
  , /*decltype(_impl_.preiopv_)*/0
  , /*decltype(_impl_.optioncontractmultiplierunit_)*/int64_t{0}
  , /*decltype(_impl_.optionexerciseprice_)*/0
  , /*decltype(_impl_.optiontotallongposition_)*/int64_t{0}
  , /*decltype(_impl_.optionsecurityclosepx_)*/0
  , /*decltype(_impl_.optionsettlprice_)*/0
  , /*decltype(_impl_.optionunderlyingclosepx_)*/0
  , /*decltype(_impl_.optiondailypriceuplimit_)*/0
  , /*decltype(_impl_.optiondailypricedownlimit_)*/0
  , /*decltype(_impl_.optionmarginunit_)*/0
  , /*decltype(_impl_.optionmarginratioparam1_)*/0
  , /*decltype(_impl_.szhkconnect_)*/0
  , /*decltype(_impl_.shortsellflag_)*/false
  , /*decltype(_impl_.ficrossmarket_)*/false
  , /*decltype(_impl_.fishortsellflag_)*/false
  , /*decltype(_impl_.optionmarginratioparam2_)*/0
  , /*decltype(_impl_.optionroundlot_)*/int64_t{0}
  , /*decltype(_impl_.optionlmtordminfloor_)*/int64_t{0}
  , /*decltype(_impl_.optionlmtordmaxfloor_)*/int64_t{0}
  , /*decltype(_impl_.optionmktordminfloor_)*/int64_t{0}
  , /*decltype(_impl_.optionmktordmaxfloor_)*/int64_t{0}
  , /*decltype(_impl_.optionticksize_)*/0
  , /*decltype(_impl_.fifaceamount_)*/0
  , /*decltype(_impl_.fiissueprice_)*/0
  , /*decltype(_impl_.figuaranteedinterestrate_)*/0
  , /*decltype(_impl_.fibaseinterestrate_)*/0
  , /*decltype(_impl_.fiquotedmargin_)*/0
  , /*decltype(_impl_.fitotalissuance_)*/0
  , /*decltype(_impl_.fitimelimit_)*/0
  , /*decltype(_impl_.optionadjusttimes_)*/0
  , /*decltype(_impl_.fitotalshortsellquota_)*/0
  , /*decltype(_impl_.fidealershortsellquota_)*/0
  , /*decltype(_impl_.fipreclosepx_)*/0
  , /*decltype(_impl_.fipreweightedpx_)*/0
  , /*decltype(_impl_.optioncontractposition_)*/int64_t{0}
  , /*decltype(_impl_.optionbuyqtyupperlimit_)*/int64_t{0}
  , /*decltype(_impl_.optionsellqtyupperlimit_)*/int64_t{0}
  , /*decltype(_impl_.optionmarketorderbuyqtyupperlimit_)*/int64_t{0}
  , /*decltype(_impl_.optionmarketordersellqtyupperlimit_)*/int64_t{0}
  , /*decltype(_impl_.optionquoteorderbuyqtyupperlimit_)*/int64_t{0}
  , /*decltype(_impl_.optionquoteordersellqtyupperlimit_)*/int64_t{0}
  , /*decltype(_impl_.optionbuyqtyunit_)*/int64_t{0}
  , /*decltype(_impl_.optionsellqtyunit_)*/int64_t{0}
  , /*decltype(_impl_.optionlastsellmargin_)*/0
  , /*decltype(_impl_.optionsellmargin_)*/0
  , /*decltype(_impl_.maxmarketordervolume_)*/int64_t{0}
  , /*decltype(_impl_.minmarketordervolume_)*/int64_t{0}
  , /*decltype(_impl_.maxlimitordervolume_)*/int64_t{0}
  , /*decltype(_impl_.minlimitordervolume_)*/int64_t{0}
  , /*decltype(_impl_.volumemultiple_)*/int64_t{0}
  , /*decltype(_impl_.longmarginratio_)*/0
  , /*decltype(_impl_.shortmarginratio_)*/0
  , /*decltype(_impl_.strikeprice_)*/0
  , /*decltype(_impl_.preopeninterest_)*/0
  , /*decltype(_impl_.buyqtyunit_)*/int64_t{0}
  , /*decltype(_impl_.sellqtyunit_)*/int64_t{0}
  , /*decltype(_impl_.buyqtyupperlimit_)*/int64_t{0}
  , /*decltype(_impl_.sellqtyupperlimit_)*/int64_t{0}
  , /*decltype(_impl_.buyqtylowerlimit_)*/int64_t{0}
  , /*decltype(_impl_.sellqtylowerlimit_)*/int64_t{0}
  , /*decltype(_impl_.vcmflag_)*/0
  , /*decltype(_impl_.casflag_)*/0
  , /*decltype(_impl_.posupperlimitpx_)*/0
  , /*decltype(_impl_.poslowerlimitpx_)*/0
  , /*decltype(_impl_.posflag_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDBasicInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDBasicInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDBasicInfoDefaultTypeInternal() {}
  union {
    MDBasicInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDBasicInfoDefaultTypeInternal _MDBasicInfo_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDBasicInfo_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDBasicInfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDBasicInfo_2eproto = nullptr;

const uint32_t TableStruct_MDBasicInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam, _impl_.paramname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam, _impl_.paramvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.securityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.chispelling_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.englishname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.securitysubtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.listdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.outstandingshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.publicfloatsharequantity_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.maxpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.minpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.lotsize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.shortsellflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.exchangesymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.ticksize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.loanmarginindicator_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.pxaccuracy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.ipoprofitable_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.diffrightsindicator_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.hkspreadtablecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.presettlepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.preiopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.shhkconnect_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.szhkconnect_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optioncontractid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optioncontractsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionunderlyingsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionunderlyingsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionunderlyingtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionoptiontype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optioncallorput_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optioncontractmultiplierunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionexerciseprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionstartdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionenddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionexercisedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optiondeliverydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionexpiredate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionupdateversion_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optiontotallongposition_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionsecurityclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionsettlprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionunderlyingclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionpricelimittype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optiondailypriceuplimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optiondailypricedownlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionmarginunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionmarginratioparam1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionmarginratioparam2_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionroundlot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionlmtordminfloor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionlmtordmaxfloor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionmktordminfloor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionmktordmaxfloor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionticksize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionsecuritystatusflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optioncarryinterestdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionearlyexpiredate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionstrategysecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fitradeproducttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fisecurityproperty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fisecuritystatus_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fipledgedsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiopentime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.ficlosetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiissuemode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fifaceamount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiissueprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiinteresttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiinterestfrequency_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.figuaranteedinterestrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fibaseinterestrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiquotedmargin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fitimelimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fitotalissuance_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiissuestartdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiissueenddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.filistdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiexpiredate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.finationaldebttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fiissuemethod_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.ficrossmarket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fishortsellflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fitotalshortsellquota_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fidealershortsellquota_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fipreclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.fipreweightedpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionlisttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optiondeliverytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionadjusttimes_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optioncontractposition_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionbuyqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionsellqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionmarketorderbuyqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionmarketordersellqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionquoteorderbuyqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionquoteordersellqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionbuyqtyunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionsellqtyunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionlastsellmargin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionsellmargin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optionmarketmakerflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.optioncombinationstrategy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.deliveryyear_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.deliverymonth_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.instrumentid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.instrumentname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.exchangeinstid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.productid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.maxmarketordervolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.minmarketordervolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.maxlimitordervolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.minlimitordervolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.volumemultiple_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.createdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.expiredate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.startdelivdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.enddelivdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.positiontype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.longmarginratio_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.shortmarginratio_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.maxmarginsidealgorithm_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.strikeprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.preopeninterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.formersymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.delistdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.buyqtyunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.sellqtyunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.buyqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.sellqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.buyqtylowerlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.sellqtylowerlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.vcmflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.casflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.posflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.posupperlimitpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.poslowerlimitpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.basecontractid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.constantparams_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _impl_.interestaccrualdate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam)},
  { 8, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDBasicInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDBasicInfo_ConstantParam_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDBasicInfo_default_instance_._instance,
};

const char descriptor_table_protodef_MDBasicInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021MDBasicInfo.proto\022\032com.htsc.mdc.insigh"
  "t.model\032\027ESecurityIDSource.proto\032\023ESecur"
  "ityType.proto\"\372\037\n\013MDBasicInfo\022\026\n\016HTSCSec"
  "urityID\030\001 \001(\t\022\022\n\nSecurityID\030\002 \001(\t\022\016\n\006Sym"
  "bol\030\003 \001(\t\022\023\n\013ChiSpelling\030\004 \001(\t\022\023\n\013Englis"
  "hName\030\005 \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%."
  "com.htsc.mdc.model.ESecurityIDSource\0227\n\014"
  "securityType\030\007 \001(\0162!.com.htsc.mdc.model."
  "ESecurityType\022\027\n\017SecuritySubType\030\010 \001(\t\022\020"
  "\n\010ListDate\030\t \001(\t\022\020\n\010Currency\030\n \001(\t\022\030\n\020Ou"
  "tstandingShare\030\013 \001(\003\022 \n\030PublicFloatShare"
  "Quantity\030\014 \001(\003\022\016\n\006MDDate\030\r \001(\005\022\030\n\020Tradin"
  "gPhaseCode\030\016 \001(\t\022\022\n\nPreClosePx\030\017 \001(\003\022\r\n\005"
  "MaxPx\030\020 \001(\003\022\r\n\005MinPx\030\021 \001(\003\022\017\n\007LotSize\030\022 "
  "\001(\003\022\025\n\rShortSellFlag\030\023 \001(\010\022\024\n\014ExchangeDa"
  "te\030\024 \001(\t\022\026\n\016ExchangeSymbol\030\025 \001(\t\022\020\n\010Tick"
  "Size\030\026 \001(\001\022\033\n\023LoanMarginIndicator\030\027 \001(\005\022"
  "\022\n\nPxAccuracy\030\030 \001(\005\022\025\n\rIPOProfitable\030\031 \001"
  "(\005\022\033\n\023DiffRightsIndicator\030\032 \001(\005\022\031\n\021HKSpr"
  "eadTableCode\030\033 \001(\t\022\023\n\013PreSettlePx\030\034 \001(\001\022"
  "\017\n\007PreIOPV\030\035 \001(\001\022\023\n\013ShHkConnect\030\036 \001(\005\022\023\n"
  "\013SzHkConnect\030\037 \001(\005\022\030\n\020OptionContractID\030("
  " \001(\t\022\034\n\024OptionContractSymbol\030) \001(\t\022\"\n\032Op"
  "tionUnderlyingSecurityID\030* \001(\t\022\036\n\026Option"
  "UnderlyingSymbol\030+ \001(\t\022\034\n\024OptionUnderlyi"
  "ngType\030, \001(\t\022\030\n\020OptionOptionType\030- \001(\t\022\027"
  "\n\017OptionCallOrPut\030. \001(\t\022$\n\034OptionContrac"
  "tMultiplierUnit\030/ \001(\003\022\033\n\023OptionExerciseP"
  "rice\0300 \001(\001\022\027\n\017OptionStartDate\0301 \001(\t\022\025\n\rO"
  "ptionEndDate\0302 \001(\t\022\032\n\022OptionExerciseDate"
  "\0303 \001(\t\022\032\n\022OptionDeliveryDate\0304 \001(\t\022\030\n\020Op"
  "tionExpireDate\0305 \001(\t\022\033\n\023OptionUpdateVers"
  "ion\0306 \001(\t\022\037\n\027OptionTotalLongPosition\0307 \001"
  "(\003\022\035\n\025OptionSecurityClosePx\0308 \001(\001\022\030\n\020Opt"
  "ionSettlPrice\0309 \001(\001\022\037\n\027OptionUnderlyingC"
  "losePx\030: \001(\001\022\034\n\024OptionPriceLimitType\030; \001"
  "(\t\022\037\n\027OptionDailyPriceUpLimit\030< \001(\001\022!\n\031O"
  "ptionDailyPriceDownLimit\030= \001(\001\022\030\n\020Option"
  "MarginUnit\030> \001(\001\022\037\n\027OptionMarginRatioPar"
  "am1\030\? \001(\001\022\037\n\027OptionMarginRatioParam2\030@ \001"
  "(\001\022\026\n\016OptionRoundLot\030A \001(\003\022\034\n\024OptionLmtO"
  "rdMinFloor\030B \001(\003\022\034\n\024OptionLmtOrdMaxFloor"
  "\030C \001(\003\022\034\n\024OptionMktOrdMinFloor\030D \001(\003\022\034\n\024"
  "OptionMktOrdMaxFloor\030E \001(\003\022\026\n\016OptionTick"
  "Size\030F \001(\001\022 \n\030OptionSecurityStatusFlag\030G"
  " \001(\t\022\037\n\027OptionCarryInterestDate\030H \001(\t\022\035\n"
  "\025OptionEarlyExpireDate\030I \001(\t\022 \n\030OptionSt"
  "rategySecurityID\030J \001(\t\022\032\n\022FITradeProduct"
  "Type\030P \001(\t\022\032\n\022FISecurityProperty\030Q \001(\t\022\030"
  "\n\020FISecurityStatus\030R \001(\t\022\033\n\023FIPledgedSec"
  "urityID\030S \001(\t\022\022\n\nFIOpenTime\030T \001(\t\022\023\n\013FIC"
  "loseTime\030U \001(\t\022\023\n\013FIIssueMode\030V \001(\t\022\024\n\014F"
  "IFaceAmount\030W \001(\001\022\024\n\014FIIssuePrice\030X \001(\001\022"
  "\026\n\016FIInterestType\030Y \001(\t\022\033\n\023FIInterestFre"
  "quency\030Z \001(\t\022 \n\030FIGuaranteedInterestRate"
  "\030[ \001(\001\022\032\n\022FIBaseInterestRate\030\\ \001(\001\022\026\n\016FI"
  "QuotedMargin\030] \001(\001\022\023\n\013FITimeLimit\030^ \001(\005\022"
  "\027\n\017FITotalIssuance\030_ \001(\001\022\030\n\020FIIssueStart"
  "Date\030` \001(\t\022\026\n\016FIIssueEndDate\030a \001(\t\022\022\n\nFI"
  "ListDate\030b \001(\t\022\024\n\014FIExpireDate\030c \001(\t\022\032\n\022"
  "FINationalDebtType\030d \001(\t\022\025\n\rFIIssueMetho"
  "d\030e \001(\t\022\025\n\rFICrossMarket\030f \001(\010\022\027\n\017FIShor"
  "tSellFlag\030g \001(\010\022\035\n\025FITotalShortSellQuota"
  "\030h \001(\001\022\036\n\026FIDealerShortSellQuota\030i \001(\001\022\024"
  "\n\014FIPreClosePx\030j \001(\001\022\027\n\017FIPreWeightedPx\030"
  "k \001(\001\022\026\n\016OptionListType\030n \001(\t\022\032\n\022OptionD"
  "eliveryType\030o \001(\t\022\031\n\021OptionAdjustTimes\030p"
  " \001(\005\022\036\n\026OptionContractPosition\030q \001(\003\022\036\n\026"
  "OptionBuyQtyUpperLimit\030r \001(\003\022\037\n\027OptionSe"
  "llQtyUpperLimit\030s \001(\003\022)\n!OptionMarketOrd"
  "erBuyQtyUpperLimit\030t \001(\003\022*\n\"OptionMarket"
  "OrderSellQtyUpperLimit\030u \001(\003\022(\n OptionQu"
  "oteOrderBuyQtyUpperLimit\030v \001(\003\022)\n!Option"
  "QuoteOrderSellQtyUpperLimit\030w \001(\003\022\030\n\020Opt"
  "ionBuyQtyUnit\030x \001(\003\022\031\n\021OptionSellQtyUnit"
  "\030y \001(\003\022\034\n\024OptionLastSellMargin\030z \001(\001\022\030\n\020"
  "OptionSellMargin\030{ \001(\001\022\035\n\025OptionMarketMa"
  "kerFlag\030| \001(\t\022!\n\031OptionCombinationStrate"
  "gy\030} \001(\t\022\024\n\014DeliveryYear\030~ \001(\t\022\025\n\rDelive"
  "ryMonth\030\177 \001(\t\022\025\n\014InstrumentID\030\200\001 \001(\t\022\027\n\016"
  "InstrumentName\030\201\001 \001(\t\022\027\n\016ExchangeInstID\030"
  "\202\001 \001(\t\022\022\n\tProductID\030\203\001 \001(\t\022\035\n\024MaxMarketO"
  "rderVolume\030\204\001 \001(\003\022\035\n\024MinMarketOrderVolum"
  "e\030\205\001 \001(\003\022\034\n\023MaxLimitOrderVolume\030\206\001 \001(\003\022\034"
  "\n\023MinLimitOrderVolume\030\207\001 \001(\003\022\027\n\016VolumeMu"
  "ltiple\030\210\001 \001(\003\022\023\n\nCreateDate\030\211\001 \001(\t\022\023\n\nEx"
  "pireDate\030\212\001 \001(\t\022\027\n\016StartDelivDate\030\213\001 \001(\t"
  "\022\025\n\014EndDelivDate\030\214\001 \001(\t\022\025\n\014PositionType\030"
  "\215\001 \001(\t\022\030\n\017LongMarginRatio\030\216\001 \001(\001\022\031\n\020Shor"
  "tMarginRatio\030\217\001 \001(\001\022\037\n\026MaxMarginSideAlgo"
  "rithm\030\220\001 \001(\t\022\024\n\013StrikePrice\030\221\001 \001(\001\022\030\n\017Pr"
  "eOpenInterest\030\222\001 \001(\001\022\025\n\014FormerSymbol\030\223\001 "
  "\001(\t\022\023\n\nDelistDate\030\224\001 \001(\t\022\023\n\nBuyQtyUnit\030\225"
  "\001 \001(\003\022\024\n\013SellQtyUnit\030\226\001 \001(\003\022\031\n\020BuyQtyUpp"
  "erLimit\030\241\001 \001(\003\022\032\n\021SellQtyUpperLimit\030\242\001 \001"
  "(\003\022\031\n\020BuyQtyLowerLimit\030\243\001 \001(\003\022\032\n\021SellQty"
  "LowerLimit\030\244\001 \001(\003\022\020\n\007VCMFlag\030\245\001 \001(\005\022\020\n\007C"
  "ASFlag\030\246\001 \001(\005\022\020\n\007POSFlag\030\247\001 \001(\005\022\030\n\017POSUp"
  "perLimitPx\030\250\001 \001(\001\022\030\n\017POSLowerLimitPx\030\251\001 "
  "\001(\001\022\027\n\016BaseContractID\030\252\001 \001(\t\022N\n\016constant"
  "Params\030\253\001 \003(\01325.com.htsc.mdc.insight.mod"
  "el.MDBasicInfo.ConstantParam\022\036\n\025DataMult"
  "iplePowerOf10\030\254\001 \001(\005\022\034\n\023InterestAccrualD"
  "ate\030\255\001 \001(\t\0326\n\rConstantParam\022\021\n\tParamName"
  "\030\001 \001(\t\022\022\n\nParamValue\030\002 \001(\tB4\n\032com.htsc.m"
  "dc.insight.modelB\021MDBasicInfoProtosH\001\240\001\001"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDBasicInfo_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDBasicInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDBasicInfo_2eproto = {
    false, false, 4248, descriptor_table_protodef_MDBasicInfo_2eproto,
    "MDBasicInfo.proto",
    &descriptor_table_MDBasicInfo_2eproto_once, descriptor_table_MDBasicInfo_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_MDBasicInfo_2eproto::offsets,
    file_level_metadata_MDBasicInfo_2eproto, file_level_enum_descriptors_MDBasicInfo_2eproto,
    file_level_service_descriptors_MDBasicInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDBasicInfo_2eproto_getter() {
  return &descriptor_table_MDBasicInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDBasicInfo_2eproto(&descriptor_table_MDBasicInfo_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDBasicInfo_ConstantParam::_Internal {
 public:
};

MDBasicInfo_ConstantParam::MDBasicInfo_ConstantParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
}
MDBasicInfo_ConstantParam::MDBasicInfo_ConstantParam(const MDBasicInfo_ConstantParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDBasicInfo_ConstantParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paramname_){}
    , decltype(_impl_.paramvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.paramname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paramname().empty()) {
    _this->_impl_.paramname_.Set(from._internal_paramname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paramvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paramvalue().empty()) {
    _this->_impl_.paramvalue_.Set(from._internal_paramvalue(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
}

inline void MDBasicInfo_ConstantParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paramname_){}
    , decltype(_impl_.paramvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.paramname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paramvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDBasicInfo_ConstantParam::~MDBasicInfo_ConstantParam() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDBasicInfo_ConstantParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paramname_.Destroy();
  _impl_.paramvalue_.Destroy();
}

void MDBasicInfo_ConstantParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDBasicInfo_ConstantParam::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paramname_.ClearToEmpty();
  _impl_.paramvalue_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDBasicInfo_ConstantParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ParamName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_paramname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName"));
        } else
          goto handle_unusual;
        continue;
      // string ParamValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_paramvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDBasicInfo_ConstantParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ParamName = 1;
  if (!this->_internal_paramname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paramname().data(), static_cast<int>(this->_internal_paramname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paramname(), target);
  }

  // string ParamValue = 2;
  if (!this->_internal_paramvalue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paramvalue().data(), static_cast<int>(this->_internal_paramvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_paramvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  return target;
}

size_t MDBasicInfo_ConstantParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ParamName = 1;
  if (!this->_internal_paramname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paramname());
  }

  // string ParamValue = 2;
  if (!this->_internal_paramvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paramvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDBasicInfo_ConstantParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDBasicInfo_ConstantParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDBasicInfo_ConstantParam::GetClassData() const { return &_class_data_; }


void MDBasicInfo_ConstantParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDBasicInfo_ConstantParam*>(&to_msg);
  auto& from = static_cast<const MDBasicInfo_ConstantParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_paramname().empty()) {
    _this->_internal_set_paramname(from._internal_paramname());
  }
  if (!from._internal_paramvalue().empty()) {
    _this->_internal_set_paramvalue(from._internal_paramvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDBasicInfo_ConstantParam::CopyFrom(const MDBasicInfo_ConstantParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDBasicInfo_ConstantParam::IsInitialized() const {
  return true;
}

void MDBasicInfo_ConstantParam::InternalSwap(MDBasicInfo_ConstantParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paramname_, lhs_arena,
      &other->_impl_.paramname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paramvalue_, lhs_arena,
      &other->_impl_.paramvalue_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MDBasicInfo_ConstantParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDBasicInfo_2eproto_getter, &descriptor_table_MDBasicInfo_2eproto_once,
      file_level_metadata_MDBasicInfo_2eproto[0]);
}

// ===================================================================

class MDBasicInfo::_Internal {
 public:
};

MDBasicInfo::MDBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDBasicInfo)
}
MDBasicInfo::MDBasicInfo(const MDBasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDBasicInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.constantparams_){from._impl_.constantparams_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securityid_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.chispelling_){}
    , decltype(_impl_.englishname_){}
    , decltype(_impl_.securitysubtype_){}
    , decltype(_impl_.listdate_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangesymbol_){}
    , decltype(_impl_.hkspreadtablecode_){}
    , decltype(_impl_.optioncontractid_){}
    , decltype(_impl_.optioncontractsymbol_){}
    , decltype(_impl_.optionunderlyingsecurityid_){}
    , decltype(_impl_.optionunderlyingsymbol_){}
    , decltype(_impl_.optionunderlyingtype_){}
    , decltype(_impl_.optionoptiontype_){}
    , decltype(_impl_.optioncallorput_){}
    , decltype(_impl_.optionstartdate_){}
    , decltype(_impl_.optionenddate_){}
    , decltype(_impl_.optionexercisedate_){}
    , decltype(_impl_.optiondeliverydate_){}
    , decltype(_impl_.optionexpiredate_){}
    , decltype(_impl_.optionupdateversion_){}
    , decltype(_impl_.optionpricelimittype_){}
    , decltype(_impl_.optionsecuritystatusflag_){}
    , decltype(_impl_.optioncarryinterestdate_){}
    , decltype(_impl_.optionearlyexpiredate_){}
    , decltype(_impl_.optionstrategysecurityid_){}
    , decltype(_impl_.fitradeproducttype_){}
    , decltype(_impl_.fisecurityproperty_){}
    , decltype(_impl_.fisecuritystatus_){}
    , decltype(_impl_.fipledgedsecurityid_){}
    , decltype(_impl_.fiopentime_){}
    , decltype(_impl_.ficlosetime_){}
    , decltype(_impl_.fiissuemode_){}
    , decltype(_impl_.fiinteresttype_){}
    , decltype(_impl_.fiinterestfrequency_){}
    , decltype(_impl_.fiissuestartdate_){}
    , decltype(_impl_.fiissueenddate_){}
    , decltype(_impl_.filistdate_){}
    , decltype(_impl_.fiexpiredate_){}
    , decltype(_impl_.finationaldebttype_){}
    , decltype(_impl_.fiissuemethod_){}
    , decltype(_impl_.optionlisttype_){}
    , decltype(_impl_.optiondeliverytype_){}
    , decltype(_impl_.optionmarketmakerflag_){}
    , decltype(_impl_.optioncombinationstrategy_){}
    , decltype(_impl_.deliveryyear_){}
    , decltype(_impl_.deliverymonth_){}
    , decltype(_impl_.instrumentid_){}
    , decltype(_impl_.instrumentname_){}
    , decltype(_impl_.exchangeinstid_){}
    , decltype(_impl_.productid_){}
    , decltype(_impl_.createdate_){}
    , decltype(_impl_.expiredate_){}
    , decltype(_impl_.startdelivdate_){}
    , decltype(_impl_.enddelivdate_){}
    , decltype(_impl_.positiontype_){}
    , decltype(_impl_.maxmarginsidealgorithm_){}
    , decltype(_impl_.formersymbol_){}
    , decltype(_impl_.delistdate_){}
    , decltype(_impl_.basecontractid_){}
    , decltype(_impl_.interestaccrualdate_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.outstandingshare_){}
    , decltype(_impl_.publicfloatsharequantity_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.maxpx_){}
    , decltype(_impl_.minpx_){}
    , decltype(_impl_.lotsize_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.loanmarginindicator_){}
    , decltype(_impl_.ticksize_){}
    , decltype(_impl_.pxaccuracy_){}
    , decltype(_impl_.ipoprofitable_){}
    , decltype(_impl_.presettlepx_){}
    , decltype(_impl_.diffrightsindicator_){}
    , decltype(_impl_.shhkconnect_){}
    , decltype(_impl_.preiopv_){}
    , decltype(_impl_.optioncontractmultiplierunit_){}
    , decltype(_impl_.optionexerciseprice_){}
    , decltype(_impl_.optiontotallongposition_){}
    , decltype(_impl_.optionsecurityclosepx_){}
    , decltype(_impl_.optionsettlprice_){}
    , decltype(_impl_.optionunderlyingclosepx_){}
    , decltype(_impl_.optiondailypriceuplimit_){}
    , decltype(_impl_.optiondailypricedownlimit_){}
    , decltype(_impl_.optionmarginunit_){}
    , decltype(_impl_.optionmarginratioparam1_){}
    , decltype(_impl_.szhkconnect_){}
    , decltype(_impl_.shortsellflag_){}
    , decltype(_impl_.ficrossmarket_){}
    , decltype(_impl_.fishortsellflag_){}
    , decltype(_impl_.optionmarginratioparam2_){}
    , decltype(_impl_.optionroundlot_){}
    , decltype(_impl_.optionlmtordminfloor_){}
    , decltype(_impl_.optionlmtordmaxfloor_){}
    , decltype(_impl_.optionmktordminfloor_){}
    , decltype(_impl_.optionmktordmaxfloor_){}
    , decltype(_impl_.optionticksize_){}
    , decltype(_impl_.fifaceamount_){}
    , decltype(_impl_.fiissueprice_){}
    , decltype(_impl_.figuaranteedinterestrate_){}
    , decltype(_impl_.fibaseinterestrate_){}
    , decltype(_impl_.fiquotedmargin_){}
    , decltype(_impl_.fitotalissuance_){}
    , decltype(_impl_.fitimelimit_){}
    , decltype(_impl_.optionadjusttimes_){}
    , decltype(_impl_.fitotalshortsellquota_){}
    , decltype(_impl_.fidealershortsellquota_){}
    , decltype(_impl_.fipreclosepx_){}
    , decltype(_impl_.fipreweightedpx_){}
    , decltype(_impl_.optioncontractposition_){}
    , decltype(_impl_.optionbuyqtyupperlimit_){}
    , decltype(_impl_.optionsellqtyupperlimit_){}
    , decltype(_impl_.optionmarketorderbuyqtyupperlimit_){}
    , decltype(_impl_.optionmarketordersellqtyupperlimit_){}
    , decltype(_impl_.optionquoteorderbuyqtyupperlimit_){}
    , decltype(_impl_.optionquoteordersellqtyupperlimit_){}
    , decltype(_impl_.optionbuyqtyunit_){}
    , decltype(_impl_.optionsellqtyunit_){}
    , decltype(_impl_.optionlastsellmargin_){}
    , decltype(_impl_.optionsellmargin_){}
    , decltype(_impl_.maxmarketordervolume_){}
    , decltype(_impl_.minmarketordervolume_){}
    , decltype(_impl_.maxlimitordervolume_){}
    , decltype(_impl_.minlimitordervolume_){}
    , decltype(_impl_.volumemultiple_){}
    , decltype(_impl_.longmarginratio_){}
    , decltype(_impl_.shortmarginratio_){}
    , decltype(_impl_.strikeprice_){}
    , decltype(_impl_.preopeninterest_){}
    , decltype(_impl_.buyqtyunit_){}
    , decltype(_impl_.sellqtyunit_){}
    , decltype(_impl_.buyqtyupperlimit_){}
    , decltype(_impl_.sellqtyupperlimit_){}
    , decltype(_impl_.buyqtylowerlimit_){}
    , decltype(_impl_.sellqtylowerlimit_){}
    , decltype(_impl_.vcmflag_){}
    , decltype(_impl_.casflag_){}
    , decltype(_impl_.posupperlimitpx_){}
    , decltype(_impl_.poslowerlimitpx_){}
    , decltype(_impl_.posflag_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_securityid().empty()) {
    _this->_impl_.securityid_.Set(from._internal_securityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chispelling_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chispelling_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chispelling().empty()) {
    _this->_impl_.chispelling_.Set(from._internal_chispelling(), 
      _this->GetArenaForAllocation());
  }
  _impl_.englishname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.englishname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_englishname().empty()) {
    _this->_impl_.englishname_.Set(from._internal_englishname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securitysubtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_securitysubtype().empty()) {
    _this->_impl_.securitysubtype_.Set(from._internal_securitysubtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.listdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_listdate().empty()) {
    _this->_impl_.listdate_.Set(from._internal_listdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchangedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchangedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchangedate().empty()) {
    _this->_impl_.exchangedate_.Set(from._internal_exchangedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchangesymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchangesymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchangesymbol().empty()) {
    _this->_impl_.exchangesymbol_.Set(from._internal_exchangesymbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hkspreadtablecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hkspreadtablecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hkspreadtablecode().empty()) {
    _this->_impl_.hkspreadtablecode_.Set(from._internal_hkspreadtablecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optioncontractid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncontractid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optioncontractid().empty()) {
    _this->_impl_.optioncontractid_.Set(from._internal_optioncontractid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optioncontractsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncontractsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optioncontractsymbol().empty()) {
    _this->_impl_.optioncontractsymbol_.Set(from._internal_optioncontractsymbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionunderlyingsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionunderlyingsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionunderlyingsecurityid().empty()) {
    _this->_impl_.optionunderlyingsecurityid_.Set(from._internal_optionunderlyingsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionunderlyingsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionunderlyingsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionunderlyingsymbol().empty()) {
    _this->_impl_.optionunderlyingsymbol_.Set(from._internal_optionunderlyingsymbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionunderlyingtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionunderlyingtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionunderlyingtype().empty()) {
    _this->_impl_.optionunderlyingtype_.Set(from._internal_optionunderlyingtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionoptiontype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionoptiontype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionoptiontype().empty()) {
    _this->_impl_.optionoptiontype_.Set(from._internal_optionoptiontype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optioncallorput_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncallorput_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optioncallorput().empty()) {
    _this->_impl_.optioncallorput_.Set(from._internal_optioncallorput(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionstartdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionstartdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionstartdate().empty()) {
    _this->_impl_.optionstartdate_.Set(from._internal_optionstartdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionenddate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionenddate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionenddate().empty()) {
    _this->_impl_.optionenddate_.Set(from._internal_optionenddate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionexercisedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionexercisedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionexercisedate().empty()) {
    _this->_impl_.optionexercisedate_.Set(from._internal_optionexercisedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optiondeliverydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optiondeliverydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optiondeliverydate().empty()) {
    _this->_impl_.optiondeliverydate_.Set(from._internal_optiondeliverydate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionexpiredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionexpiredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionexpiredate().empty()) {
    _this->_impl_.optionexpiredate_.Set(from._internal_optionexpiredate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionupdateversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionupdateversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionupdateversion().empty()) {
    _this->_impl_.optionupdateversion_.Set(from._internal_optionupdateversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionpricelimittype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionpricelimittype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionpricelimittype().empty()) {
    _this->_impl_.optionpricelimittype_.Set(from._internal_optionpricelimittype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionsecuritystatusflag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionsecuritystatusflag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionsecuritystatusflag().empty()) {
    _this->_impl_.optionsecuritystatusflag_.Set(from._internal_optionsecuritystatusflag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optioncarryinterestdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncarryinterestdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optioncarryinterestdate().empty()) {
    _this->_impl_.optioncarryinterestdate_.Set(from._internal_optioncarryinterestdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionearlyexpiredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionearlyexpiredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionearlyexpiredate().empty()) {
    _this->_impl_.optionearlyexpiredate_.Set(from._internal_optionearlyexpiredate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionstrategysecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionstrategysecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionstrategysecurityid().empty()) {
    _this->_impl_.optionstrategysecurityid_.Set(from._internal_optionstrategysecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fitradeproducttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fitradeproducttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fitradeproducttype().empty()) {
    _this->_impl_.fitradeproducttype_.Set(from._internal_fitradeproducttype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fisecurityproperty_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fisecurityproperty_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fisecurityproperty().empty()) {
    _this->_impl_.fisecurityproperty_.Set(from._internal_fisecurityproperty(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fisecuritystatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fisecuritystatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fisecuritystatus().empty()) {
    _this->_impl_.fisecuritystatus_.Set(from._internal_fisecuritystatus(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fipledgedsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fipledgedsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fipledgedsecurityid().empty()) {
    _this->_impl_.fipledgedsecurityid_.Set(from._internal_fipledgedsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fiopentime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiopentime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fiopentime().empty()) {
    _this->_impl_.fiopentime_.Set(from._internal_fiopentime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ficlosetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ficlosetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ficlosetime().empty()) {
    _this->_impl_.ficlosetime_.Set(from._internal_ficlosetime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fiissuemode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiissuemode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fiissuemode().empty()) {
    _this->_impl_.fiissuemode_.Set(from._internal_fiissuemode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fiinteresttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiinteresttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fiinteresttype().empty()) {
    _this->_impl_.fiinteresttype_.Set(from._internal_fiinteresttype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fiinterestfrequency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiinterestfrequency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fiinterestfrequency().empty()) {
    _this->_impl_.fiinterestfrequency_.Set(from._internal_fiinterestfrequency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fiissuestartdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiissuestartdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fiissuestartdate().empty()) {
    _this->_impl_.fiissuestartdate_.Set(from._internal_fiissuestartdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fiissueenddate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiissueenddate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fiissueenddate().empty()) {
    _this->_impl_.fiissueenddate_.Set(from._internal_fiissueenddate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filistdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filistdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filistdate().empty()) {
    _this->_impl_.filistdate_.Set(from._internal_filistdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fiexpiredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiexpiredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fiexpiredate().empty()) {
    _this->_impl_.fiexpiredate_.Set(from._internal_fiexpiredate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.finationaldebttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.finationaldebttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_finationaldebttype().empty()) {
    _this->_impl_.finationaldebttype_.Set(from._internal_finationaldebttype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fiissuemethod_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiissuemethod_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fiissuemethod().empty()) {
    _this->_impl_.fiissuemethod_.Set(from._internal_fiissuemethod(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionlisttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionlisttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionlisttype().empty()) {
    _this->_impl_.optionlisttype_.Set(from._internal_optionlisttype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optiondeliverytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optiondeliverytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optiondeliverytype().empty()) {
    _this->_impl_.optiondeliverytype_.Set(from._internal_optiondeliverytype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optionmarketmakerflag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionmarketmakerflag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optionmarketmakerflag().empty()) {
    _this->_impl_.optionmarketmakerflag_.Set(from._internal_optionmarketmakerflag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optioncombinationstrategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncombinationstrategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optioncombinationstrategy().empty()) {
    _this->_impl_.optioncombinationstrategy_.Set(from._internal_optioncombinationstrategy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deliveryyear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deliveryyear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deliveryyear().empty()) {
    _this->_impl_.deliveryyear_.Set(from._internal_deliveryyear(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deliverymonth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deliverymonth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deliverymonth().empty()) {
    _this->_impl_.deliverymonth_.Set(from._internal_deliverymonth(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrumentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrumentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrumentid().empty()) {
    _this->_impl_.instrumentid_.Set(from._internal_instrumentid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrumentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrumentname().empty()) {
    _this->_impl_.instrumentname_.Set(from._internal_instrumentname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchangeinstid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchangeinstid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchangeinstid().empty()) {
    _this->_impl_.exchangeinstid_.Set(from._internal_exchangeinstid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_productid().empty()) {
    _this->_impl_.productid_.Set(from._internal_productid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.createdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_createdate().empty()) {
    _this->_impl_.createdate_.Set(from._internal_createdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.expiredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expiredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expiredate().empty()) {
    _this->_impl_.expiredate_.Set(from._internal_expiredate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.startdelivdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.startdelivdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_startdelivdate().empty()) {
    _this->_impl_.startdelivdate_.Set(from._internal_startdelivdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enddelivdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enddelivdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enddelivdate().empty()) {
    _this->_impl_.enddelivdate_.Set(from._internal_enddelivdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.positiontype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.positiontype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_positiontype().empty()) {
    _this->_impl_.positiontype_.Set(from._internal_positiontype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.maxmarginsidealgorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maxmarginsidealgorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maxmarginsidealgorithm().empty()) {
    _this->_impl_.maxmarginsidealgorithm_.Set(from._internal_maxmarginsidealgorithm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.formersymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formersymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_formersymbol().empty()) {
    _this->_impl_.formersymbol_.Set(from._internal_formersymbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.delistdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delistdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delistdate().empty()) {
    _this->_impl_.delistdate_.Set(from._internal_delistdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.basecontractid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basecontractid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basecontractid().empty()) {
    _this->_impl_.basecontractid_.Set(from._internal_basecontractid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.interestaccrualdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interestaccrualdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interestaccrualdate().empty()) {
    _this->_impl_.interestaccrualdate_.Set(from._internal_interestaccrualdate(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.securityidsource_, &from._impl_.securityidsource_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.securityidsource_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDBasicInfo)
}

inline void MDBasicInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.constantparams_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securityid_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.chispelling_){}
    , decltype(_impl_.englishname_){}
    , decltype(_impl_.securitysubtype_){}
    , decltype(_impl_.listdate_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangesymbol_){}
    , decltype(_impl_.hkspreadtablecode_){}
    , decltype(_impl_.optioncontractid_){}
    , decltype(_impl_.optioncontractsymbol_){}
    , decltype(_impl_.optionunderlyingsecurityid_){}
    , decltype(_impl_.optionunderlyingsymbol_){}
    , decltype(_impl_.optionunderlyingtype_){}
    , decltype(_impl_.optionoptiontype_){}
    , decltype(_impl_.optioncallorput_){}
    , decltype(_impl_.optionstartdate_){}
    , decltype(_impl_.optionenddate_){}
    , decltype(_impl_.optionexercisedate_){}
    , decltype(_impl_.optiondeliverydate_){}
    , decltype(_impl_.optionexpiredate_){}
    , decltype(_impl_.optionupdateversion_){}
    , decltype(_impl_.optionpricelimittype_){}
    , decltype(_impl_.optionsecuritystatusflag_){}
    , decltype(_impl_.optioncarryinterestdate_){}
    , decltype(_impl_.optionearlyexpiredate_){}
    , decltype(_impl_.optionstrategysecurityid_){}
    , decltype(_impl_.fitradeproducttype_){}
    , decltype(_impl_.fisecurityproperty_){}
    , decltype(_impl_.fisecuritystatus_){}
    , decltype(_impl_.fipledgedsecurityid_){}
    , decltype(_impl_.fiopentime_){}
    , decltype(_impl_.ficlosetime_){}
    , decltype(_impl_.fiissuemode_){}
    , decltype(_impl_.fiinteresttype_){}
    , decltype(_impl_.fiinterestfrequency_){}
    , decltype(_impl_.fiissuestartdate_){}
    , decltype(_impl_.fiissueenddate_){}
    , decltype(_impl_.filistdate_){}
    , decltype(_impl_.fiexpiredate_){}
    , decltype(_impl_.finationaldebttype_){}
    , decltype(_impl_.fiissuemethod_){}
    , decltype(_impl_.optionlisttype_){}
    , decltype(_impl_.optiondeliverytype_){}
    , decltype(_impl_.optionmarketmakerflag_){}
    , decltype(_impl_.optioncombinationstrategy_){}
    , decltype(_impl_.deliveryyear_){}
    , decltype(_impl_.deliverymonth_){}
    , decltype(_impl_.instrumentid_){}
    , decltype(_impl_.instrumentname_){}
    , decltype(_impl_.exchangeinstid_){}
    , decltype(_impl_.productid_){}
    , decltype(_impl_.createdate_){}
    , decltype(_impl_.expiredate_){}
    , decltype(_impl_.startdelivdate_){}
    , decltype(_impl_.enddelivdate_){}
    , decltype(_impl_.positiontype_){}
    , decltype(_impl_.maxmarginsidealgorithm_){}
    , decltype(_impl_.formersymbol_){}
    , decltype(_impl_.delistdate_){}
    , decltype(_impl_.basecontractid_){}
    , decltype(_impl_.interestaccrualdate_){}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.outstandingshare_){int64_t{0}}
    , decltype(_impl_.publicfloatsharequantity_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.maxpx_){int64_t{0}}
    , decltype(_impl_.minpx_){int64_t{0}}
    , decltype(_impl_.lotsize_){int64_t{0}}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.loanmarginindicator_){0}
    , decltype(_impl_.ticksize_){0}
    , decltype(_impl_.pxaccuracy_){0}
    , decltype(_impl_.ipoprofitable_){0}
    , decltype(_impl_.presettlepx_){0}
    , decltype(_impl_.diffrightsindicator_){0}
    , decltype(_impl_.shhkconnect_){0}
    , decltype(_impl_.preiopv_){0}
    , decltype(_impl_.optioncontractmultiplierunit_){int64_t{0}}
    , decltype(_impl_.optionexerciseprice_){0}
    , decltype(_impl_.optiontotallongposition_){int64_t{0}}
    , decltype(_impl_.optionsecurityclosepx_){0}
    , decltype(_impl_.optionsettlprice_){0}
    , decltype(_impl_.optionunderlyingclosepx_){0}
    , decltype(_impl_.optiondailypriceuplimit_){0}
    , decltype(_impl_.optiondailypricedownlimit_){0}
    , decltype(_impl_.optionmarginunit_){0}
    , decltype(_impl_.optionmarginratioparam1_){0}
    , decltype(_impl_.szhkconnect_){0}
    , decltype(_impl_.shortsellflag_){false}
    , decltype(_impl_.ficrossmarket_){false}
    , decltype(_impl_.fishortsellflag_){false}
    , decltype(_impl_.optionmarginratioparam2_){0}
    , decltype(_impl_.optionroundlot_){int64_t{0}}
    , decltype(_impl_.optionlmtordminfloor_){int64_t{0}}
    , decltype(_impl_.optionlmtordmaxfloor_){int64_t{0}}
    , decltype(_impl_.optionmktordminfloor_){int64_t{0}}
    , decltype(_impl_.optionmktordmaxfloor_){int64_t{0}}
    , decltype(_impl_.optionticksize_){0}
    , decltype(_impl_.fifaceamount_){0}
    , decltype(_impl_.fiissueprice_){0}
    , decltype(_impl_.figuaranteedinterestrate_){0}
    , decltype(_impl_.fibaseinterestrate_){0}
    , decltype(_impl_.fiquotedmargin_){0}
    , decltype(_impl_.fitotalissuance_){0}
    , decltype(_impl_.fitimelimit_){0}
    , decltype(_impl_.optionadjusttimes_){0}
    , decltype(_impl_.fitotalshortsellquota_){0}
    , decltype(_impl_.fidealershortsellquota_){0}
    , decltype(_impl_.fipreclosepx_){0}
    , decltype(_impl_.fipreweightedpx_){0}
    , decltype(_impl_.optioncontractposition_){int64_t{0}}
    , decltype(_impl_.optionbuyqtyupperlimit_){int64_t{0}}
    , decltype(_impl_.optionsellqtyupperlimit_){int64_t{0}}
    , decltype(_impl_.optionmarketorderbuyqtyupperlimit_){int64_t{0}}
    , decltype(_impl_.optionmarketordersellqtyupperlimit_){int64_t{0}}
    , decltype(_impl_.optionquoteorderbuyqtyupperlimit_){int64_t{0}}
    , decltype(_impl_.optionquoteordersellqtyupperlimit_){int64_t{0}}
    , decltype(_impl_.optionbuyqtyunit_){int64_t{0}}
    , decltype(_impl_.optionsellqtyunit_){int64_t{0}}
    , decltype(_impl_.optionlastsellmargin_){0}
    , decltype(_impl_.optionsellmargin_){0}
    , decltype(_impl_.maxmarketordervolume_){int64_t{0}}
    , decltype(_impl_.minmarketordervolume_){int64_t{0}}
    , decltype(_impl_.maxlimitordervolume_){int64_t{0}}
    , decltype(_impl_.minlimitordervolume_){int64_t{0}}
    , decltype(_impl_.volumemultiple_){int64_t{0}}
    , decltype(_impl_.longmarginratio_){0}
    , decltype(_impl_.shortmarginratio_){0}
    , decltype(_impl_.strikeprice_){0}
    , decltype(_impl_.preopeninterest_){0}
    , decltype(_impl_.buyqtyunit_){int64_t{0}}
    , decltype(_impl_.sellqtyunit_){int64_t{0}}
    , decltype(_impl_.buyqtyupperlimit_){int64_t{0}}
    , decltype(_impl_.sellqtyupperlimit_){int64_t{0}}
    , decltype(_impl_.buyqtylowerlimit_){int64_t{0}}
    , decltype(_impl_.sellqtylowerlimit_){int64_t{0}}
    , decltype(_impl_.vcmflag_){0}
    , decltype(_impl_.casflag_){0}
    , decltype(_impl_.posupperlimitpx_){0}
    , decltype(_impl_.poslowerlimitpx_){0}
    , decltype(_impl_.posflag_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chispelling_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chispelling_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.englishname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.englishname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securitysubtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.listdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchangedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchangedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchangesymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchangesymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hkspreadtablecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hkspreadtablecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optioncontractid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncontractid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optioncontractsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncontractsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionunderlyingsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionunderlyingsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionunderlyingsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionunderlyingsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionunderlyingtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionunderlyingtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionoptiontype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionoptiontype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optioncallorput_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncallorput_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionstartdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionstartdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionenddate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionenddate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionexercisedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionexercisedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optiondeliverydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optiondeliverydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionexpiredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionexpiredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionupdateversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionupdateversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionpricelimittype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionpricelimittype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionsecuritystatusflag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionsecuritystatusflag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optioncarryinterestdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncarryinterestdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionearlyexpiredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionearlyexpiredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionstrategysecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionstrategysecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fitradeproducttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fitradeproducttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fisecurityproperty_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fisecurityproperty_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fisecuritystatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fisecuritystatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fipledgedsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fipledgedsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fiopentime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiopentime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ficlosetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ficlosetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fiissuemode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiissuemode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fiinteresttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiinteresttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fiinterestfrequency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiinterestfrequency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fiissuestartdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiissuestartdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fiissueenddate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiissueenddate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filistdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filistdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fiexpiredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiexpiredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.finationaldebttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.finationaldebttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fiissuemethod_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fiissuemethod_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionlisttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionlisttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optiondeliverytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optiondeliverytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optionmarketmakerflag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionmarketmakerflag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optioncombinationstrategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optioncombinationstrategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deliveryyear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deliveryyear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deliverymonth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deliverymonth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrumentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrumentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrumentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchangeinstid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchangeinstid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expiredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expiredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.startdelivdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.startdelivdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enddelivdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enddelivdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.positiontype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.positiontype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maxmarginsidealgorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maxmarginsidealgorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.formersymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formersymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.delistdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delistdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basecontractid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basecontractid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interestaccrualdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interestaccrualdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDBasicInfo::~MDBasicInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDBasicInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDBasicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.constantparams_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.securityid_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.chispelling_.Destroy();
  _impl_.englishname_.Destroy();
  _impl_.securitysubtype_.Destroy();
  _impl_.listdate_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.tradingphasecode_.Destroy();
  _impl_.exchangedate_.Destroy();
  _impl_.exchangesymbol_.Destroy();
  _impl_.hkspreadtablecode_.Destroy();
  _impl_.optioncontractid_.Destroy();
  _impl_.optioncontractsymbol_.Destroy();
  _impl_.optionunderlyingsecurityid_.Destroy();
  _impl_.optionunderlyingsymbol_.Destroy();
  _impl_.optionunderlyingtype_.Destroy();
  _impl_.optionoptiontype_.Destroy();
  _impl_.optioncallorput_.Destroy();
  _impl_.optionstartdate_.Destroy();
  _impl_.optionenddate_.Destroy();
  _impl_.optionexercisedate_.Destroy();
  _impl_.optiondeliverydate_.Destroy();
  _impl_.optionexpiredate_.Destroy();
  _impl_.optionupdateversion_.Destroy();
  _impl_.optionpricelimittype_.Destroy();
  _impl_.optionsecuritystatusflag_.Destroy();
  _impl_.optioncarryinterestdate_.Destroy();
  _impl_.optionearlyexpiredate_.Destroy();
  _impl_.optionstrategysecurityid_.Destroy();
  _impl_.fitradeproducttype_.Destroy();
  _impl_.fisecurityproperty_.Destroy();
  _impl_.fisecuritystatus_.Destroy();
  _impl_.fipledgedsecurityid_.Destroy();
  _impl_.fiopentime_.Destroy();
  _impl_.ficlosetime_.Destroy();
  _impl_.fiissuemode_.Destroy();
  _impl_.fiinteresttype_.Destroy();
  _impl_.fiinterestfrequency_.Destroy();
  _impl_.fiissuestartdate_.Destroy();
  _impl_.fiissueenddate_.Destroy();
  _impl_.filistdate_.Destroy();
  _impl_.fiexpiredate_.Destroy();
  _impl_.finationaldebttype_.Destroy();
  _impl_.fiissuemethod_.Destroy();
  _impl_.optionlisttype_.Destroy();
  _impl_.optiondeliverytype_.Destroy();
  _impl_.optionmarketmakerflag_.Destroy();
  _impl_.optioncombinationstrategy_.Destroy();
  _impl_.deliveryyear_.Destroy();
  _impl_.deliverymonth_.Destroy();
  _impl_.instrumentid_.Destroy();
  _impl_.instrumentname_.Destroy();
  _impl_.exchangeinstid_.Destroy();
  _impl_.productid_.Destroy();
  _impl_.createdate_.Destroy();
  _impl_.expiredate_.Destroy();
  _impl_.startdelivdate_.Destroy();
  _impl_.enddelivdate_.Destroy();
  _impl_.positiontype_.Destroy();
  _impl_.maxmarginsidealgorithm_.Destroy();
  _impl_.formersymbol_.Destroy();
  _impl_.delistdate_.Destroy();
  _impl_.basecontractid_.Destroy();
  _impl_.interestaccrualdate_.Destroy();
}

void MDBasicInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDBasicInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.constantparams_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.securityid_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.chispelling_.ClearToEmpty();
  _impl_.englishname_.ClearToEmpty();
  _impl_.securitysubtype_.ClearToEmpty();
  _impl_.listdate_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  _impl_.exchangedate_.ClearToEmpty();
  _impl_.exchangesymbol_.ClearToEmpty();
  _impl_.hkspreadtablecode_.ClearToEmpty();
  _impl_.optioncontractid_.ClearToEmpty();
  _impl_.optioncontractsymbol_.ClearToEmpty();
  _impl_.optionunderlyingsecurityid_.ClearToEmpty();
  _impl_.optionunderlyingsymbol_.ClearToEmpty();
  _impl_.optionunderlyingtype_.ClearToEmpty();
  _impl_.optionoptiontype_.ClearToEmpty();
  _impl_.optioncallorput_.ClearToEmpty();
  _impl_.optionstartdate_.ClearToEmpty();
  _impl_.optionenddate_.ClearToEmpty();
  _impl_.optionexercisedate_.ClearToEmpty();
  _impl_.optiondeliverydate_.ClearToEmpty();
  _impl_.optionexpiredate_.ClearToEmpty();
  _impl_.optionupdateversion_.ClearToEmpty();
  _impl_.optionpricelimittype_.ClearToEmpty();
  _impl_.optionsecuritystatusflag_.ClearToEmpty();
  _impl_.optioncarryinterestdate_.ClearToEmpty();
  _impl_.optionearlyexpiredate_.ClearToEmpty();
  _impl_.optionstrategysecurityid_.ClearToEmpty();
  _impl_.fitradeproducttype_.ClearToEmpty();
  _impl_.fisecurityproperty_.ClearToEmpty();
  _impl_.fisecuritystatus_.ClearToEmpty();
  _impl_.fipledgedsecurityid_.ClearToEmpty();
  _impl_.fiopentime_.ClearToEmpty();
  _impl_.ficlosetime_.ClearToEmpty();
  _impl_.fiissuemode_.ClearToEmpty();
  _impl_.fiinteresttype_.ClearToEmpty();
  _impl_.fiinterestfrequency_.ClearToEmpty();
  _impl_.fiissuestartdate_.ClearToEmpty();
  _impl_.fiissueenddate_.ClearToEmpty();
  _impl_.filistdate_.ClearToEmpty();
  _impl_.fiexpiredate_.ClearToEmpty();
  _impl_.finationaldebttype_.ClearToEmpty();
  _impl_.fiissuemethod_.ClearToEmpty();
  _impl_.optionlisttype_.ClearToEmpty();
  _impl_.optiondeliverytype_.ClearToEmpty();
  _impl_.optionmarketmakerflag_.ClearToEmpty();
  _impl_.optioncombinationstrategy_.ClearToEmpty();
  _impl_.deliveryyear_.ClearToEmpty();
  _impl_.deliverymonth_.ClearToEmpty();
  _impl_.instrumentid_.ClearToEmpty();
  _impl_.instrumentname_.ClearToEmpty();
  _impl_.exchangeinstid_.ClearToEmpty();
  _impl_.productid_.ClearToEmpty();
  _impl_.createdate_.ClearToEmpty();
  _impl_.expiredate_.ClearToEmpty();
  _impl_.startdelivdate_.ClearToEmpty();
  _impl_.enddelivdate_.ClearToEmpty();
  _impl_.positiontype_.ClearToEmpty();
  _impl_.maxmarginsidealgorithm_.ClearToEmpty();
  _impl_.formersymbol_.ClearToEmpty();
  _impl_.delistdate_.ClearToEmpty();
  _impl_.basecontractid_.ClearToEmpty();
  _impl_.interestaccrualdate_.ClearToEmpty();
  ::memset(&_impl_.securityidsource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.securityidsource_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDBasicInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string SecurityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_securityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.SecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string Symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.Symbol"));
        } else
          goto handle_unusual;
        continue;
      // string ChiSpelling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chispelling();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling"));
        } else
          goto handle_unusual;
        continue;
      // string EnglishName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_englishname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.EnglishName"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string SecuritySubType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_securitysubtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType"));
        } else
          goto handle_unusual;
        continue;
      // string ListDate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_listdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ListDate"));
        } else
          goto handle_unusual;
        continue;
      // string Currency = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.Currency"));
        } else
          goto handle_unusual;
        continue;
      // int64 OutstandingShare = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.outstandingshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PublicFloatShareQuantity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.publicfloatsharequantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MaxPx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.maxpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MinPx = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.minpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LotSize = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.lotsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShortSellFlag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.shortsellflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ExchangeDate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_exchangedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate"));
        } else
          goto handle_unusual;
        continue;
      // string ExchangeSymbol = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_exchangesymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol"));
        } else
          goto handle_unusual;
        continue;
      // double TickSize = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.ticksize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 LoanMarginIndicator = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.loanmarginindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PxAccuracy = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.pxaccuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IPOProfitable = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.ipoprofitable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DiffRightsIndicator = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.diffrightsindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string HKSpreadTableCode = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_hkspreadtablecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode"));
        } else
          goto handle_unusual;
        continue;
      // double PreSettlePx = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.presettlepx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double PreIOPV = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.preiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ShHkConnect = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.shhkconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SzHkConnect = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.szhkconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OptionContractID = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_optioncontractid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID"));
        } else
          goto handle_unusual;
        continue;
      // string OptionContractSymbol = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_optioncontractsymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol"));
        } else
          goto handle_unusual;
        continue;
      // string OptionUnderlyingSecurityID = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_optionunderlyingsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string OptionUnderlyingSymbol = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_optionunderlyingsymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol"));
        } else
          goto handle_unusual;
        continue;
      // string OptionUnderlyingType = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_optionunderlyingtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType"));
        } else
          goto handle_unusual;
        continue;
      // string OptionOptionType = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_optionoptiontype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType"));
        } else
          goto handle_unusual;
        continue;
      // string OptionCallOrPut = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_optioncallorput();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut"));
        } else
          goto handle_unusual;
        continue;
      // int64 OptionContractMultiplierUnit = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.optioncontractmultiplierunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double OptionExercisePrice = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.optionexerciseprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string OptionStartDate = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_optionstartdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate"));
        } else
          goto handle_unusual;
        continue;
      // string OptionEndDate = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_optionenddate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate"));
        } else
          goto handle_unusual;
        continue;
      // string OptionExerciseDate = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_optionexercisedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate"));
        } else
          goto handle_unusual;
        continue;
      // string OptionDeliveryDate = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_optiondeliverydate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate"));
        } else
          goto handle_unusual;
        continue;
      // string OptionExpireDate = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_optionexpiredate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate"));
        } else
          goto handle_unusual;
        continue;
      // string OptionUpdateVersion = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_optionupdateversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion"));
        } else
          goto handle_unusual;
        continue;
      // int64 OptionTotalLongPosition = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.optiontotallongposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double OptionSecurityClosePx = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.optionsecurityclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double OptionSettlPrice = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.optionsettlprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double OptionUnderlyingClosePx = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.optionunderlyingclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string OptionPriceLimitType = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_optionpricelimittype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType"));
        } else
          goto handle_unusual;
        continue;
      // double OptionDailyPriceUpLimit = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.optiondailypriceuplimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double OptionDailyPriceDownLimit = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.optiondailypricedownlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double OptionMarginUnit = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _impl_.optionmarginunit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double OptionMarginRatioParam1 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.optionmarginratioparam1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double OptionMarginRatioParam2 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.optionmarginratioparam2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionRoundLot = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.optionroundlot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionLmtOrdMinFloor = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.optionlmtordminfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionLmtOrdMaxFloor = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.optionlmtordmaxfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionMktOrdMinFloor = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.optionmktordminfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionMktOrdMaxFloor = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.optionmktordmaxfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double OptionTickSize = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.optionticksize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string OptionSecurityStatusFlag = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_optionsecuritystatusflag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag"));
        } else
          goto handle_unusual;
        continue;
      // string OptionCarryInterestDate = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_optioncarryinterestdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate"));
        } else
          goto handle_unusual;
        continue;
      // string OptionEarlyExpireDate = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_optionearlyexpiredate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate"));
        } else
          goto handle_unusual;
        continue;
      // string OptionStrategySecurityID = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_optionstrategysecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string FITradeProductType = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_fitradeproducttype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType"));
        } else
          goto handle_unusual;
        continue;
      // string FISecurityProperty = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_fisecurityproperty();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty"));
        } else
          goto handle_unusual;
        continue;
      // string FISecurityStatus = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_fisecuritystatus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus"));
        } else
          goto handle_unusual;
        continue;
      // string FIPledgedSecurityID = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_fipledgedsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string FIOpenTime = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_fiopentime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime"));
        } else
          goto handle_unusual;
        continue;
      // string FICloseTime = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_ficlosetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime"));
        } else
          goto handle_unusual;
        continue;
      // string FIIssueMode = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_fiissuemode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode"));
        } else
          goto handle_unusual;
        continue;
      // double FIFaceAmount = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.fifaceamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double FIIssuePrice = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.fiissueprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string FIInterestType = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_fiinteresttype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType"));
        } else
          goto handle_unusual;
        continue;
      // string FIInterestFrequency = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_fiinterestfrequency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency"));
        } else
          goto handle_unusual;
        continue;
      // double FIGuaranteedInterestRate = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.figuaranteedinterestrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double FIBaseInterestRate = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.fibaseinterestrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double FIQuotedMargin = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.fiquotedmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 FITimeLimit = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.fitimelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double FITotalIssuance = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.fitotalissuance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string FIIssueStartDate = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_fiissuestartdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate"));
        } else
          goto handle_unusual;
        continue;
      // string FIIssueEndDate = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fiissueenddate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate"));
        } else
          goto handle_unusual;
        continue;
      // string FIListDate = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filistdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIListDate"));
        } else
          goto handle_unusual;
        continue;
      // string FIExpireDate = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fiexpiredate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate"));
        } else
          goto handle_unusual;
        continue;
      // string FINationalDebtType = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_finationaldebttype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType"));
        } else
          goto handle_unusual;
        continue;
      // string FIIssueMethod = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fiissuemethod();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod"));
        } else
          goto handle_unusual;
        continue;
      // bool FICrossMarket = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ficrossmarket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool FIShortSellFlag = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.fishortsellflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double FITotalShortSellQuota = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.fitotalshortsellquota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double FIDealerShortSellQuota = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.fidealershortsellquota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double FIPreClosePx = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.fipreclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double FIPreWeightedPx = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.fipreweightedpx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string OptionListType = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_optionlisttype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionListType"));
        } else
          goto handle_unusual;
        continue;
      // string OptionDeliveryType = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_optiondeliverytype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType"));
        } else
          goto handle_unusual;
        continue;
      // int32 OptionAdjustTimes = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.optionadjusttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionContractPosition = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.optioncontractposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionBuyQtyUpperLimit = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.optionbuyqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionSellQtyUpperLimit = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.optionsellqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.optionmarketorderbuyqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionMarketOrderSellQtyUpperLimit = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.optionmarketordersellqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.optionquoteorderbuyqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.optionquoteordersellqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionBuyQtyUnit = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.optionbuyqtyunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OptionSellQtyUnit = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.optionsellqtyunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double OptionLastSellMargin = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.optionlastsellmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double OptionSellMargin = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.optionsellmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string OptionMarketMakerFlag = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_optionmarketmakerflag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag"));
        } else
          goto handle_unusual;
        continue;
      // string OptionCombinationStrategy = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_optioncombinationstrategy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy"));
        } else
          goto handle_unusual;
        continue;
      // string DeliveryYear = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_deliveryyear();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear"));
        } else
          goto handle_unusual;
        continue;
      // string DeliveryMonth = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_deliverymonth();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth"));
        } else
          goto handle_unusual;
        continue;
      // string InstrumentID = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_instrumentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID"));
        } else
          goto handle_unusual;
        continue;
      // string InstrumentName = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instrumentname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName"));
        } else
          goto handle_unusual;
        continue;
      // string ExchangeInstID = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_exchangeinstid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID"));
        } else
          goto handle_unusual;
        continue;
      // string ProductID = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_productid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ProductID"));
        } else
          goto handle_unusual;
        continue;
      // int64 MaxMarketOrderVolume = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.maxmarketordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MinMarketOrderVolume = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.minmarketordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MaxLimitOrderVolume = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.maxlimitordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MinLimitOrderVolume = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.minlimitordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 VolumeMultiple = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.volumemultiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string CreateDate = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_createdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.CreateDate"));
        } else
          goto handle_unusual;
        continue;
      // string ExpireDate = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_expiredate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate"));
        } else
          goto handle_unusual;
        continue;
      // string StartDelivDate = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_startdelivdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate"));
        } else
          goto handle_unusual;
        continue;
      // string EndDelivDate = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_enddelivdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate"));
        } else
          goto handle_unusual;
        continue;
      // string PositionType = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_positiontype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.PositionType"));
        } else
          goto handle_unusual;
        continue;
      // double LongMarginRatio = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.longmarginratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ShortMarginRatio = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.shortmarginratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string MaxMarginSideAlgorithm = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_maxmarginsidealgorithm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm"));
        } else
          goto handle_unusual;
        continue;
      // double StrikePrice = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.strikeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double PreOpenInterest = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.preopeninterest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string FormerSymbol = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_formersymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol"));
        } else
          goto handle_unusual;
        continue;
      // string DelistDate = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_delistdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.DelistDate"));
        } else
          goto handle_unusual;
        continue;
      // int64 BuyQtyUnit = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.buyqtyunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellQtyUnit = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.sellqtyunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BuyQtyUpperLimit = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.buyqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellQtyUpperLimit = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sellqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BuyQtyLowerLimit = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buyqtylowerlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellQtyLowerLimit = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sellqtylowerlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 VCMFlag = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.vcmflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CASFlag = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.casflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 POSFlag = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.posflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double POSUpperLimitPx = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.posupperlimitpx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double POSLowerLimitPx = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.poslowerlimitpx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string BaseContractID = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_basecontractid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_constantparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1370>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InterestAccrualDate = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_interestaccrualdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDBasicInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDBasicInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // string SecurityID = 2;
  if (!this->_internal_securityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.SecurityID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_securityid(), target);
  }

  // string Symbol = 3;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.Symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // string ChiSpelling = 4;
  if (!this->_internal_chispelling().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chispelling().data(), static_cast<int>(this->_internal_chispelling().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chispelling(), target);
  }

  // string EnglishName = 5;
  if (!this->_internal_englishname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_englishname().data(), static_cast<int>(this->_internal_englishname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.EnglishName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_englishname(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // string SecuritySubType = 8;
  if (!this->_internal_securitysubtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securitysubtype().data(), static_cast<int>(this->_internal_securitysubtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_securitysubtype(), target);
  }

  // string ListDate = 9;
  if (!this->_internal_listdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listdate().data(), static_cast<int>(this->_internal_listdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ListDate");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_listdate(), target);
  }

  // string Currency = 10;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.Currency");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_currency(), target);
  }

  // int64 OutstandingShare = 11;
  if (this->_internal_outstandingshare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_outstandingshare(), target);
  }

  // int64 PublicFloatShareQuantity = 12;
  if (this->_internal_publicfloatsharequantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_publicfloatsharequantity(), target);
  }

  // int32 MDDate = 13;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_mddate(), target);
  }

  // string TradingPhaseCode = 14;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_tradingphasecode(), target);
  }

  // int64 PreClosePx = 15;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_preclosepx(), target);
  }

  // int64 MaxPx = 16;
  if (this->_internal_maxpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_maxpx(), target);
  }

  // int64 MinPx = 17;
  if (this->_internal_minpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_minpx(), target);
  }

  // int64 LotSize = 18;
  if (this->_internal_lotsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_lotsize(), target);
  }

  // bool ShortSellFlag = 19;
  if (this->_internal_shortsellflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_shortsellflag(), target);
  }

  // string ExchangeDate = 20;
  if (!this->_internal_exchangedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchangedate().data(), static_cast<int>(this->_internal_exchangedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_exchangedate(), target);
  }

  // string ExchangeSymbol = 21;
  if (!this->_internal_exchangesymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchangesymbol().data(), static_cast<int>(this->_internal_exchangesymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_exchangesymbol(), target);
  }

  // double TickSize = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ticksize = this->_internal_ticksize();
  uint64_t raw_ticksize;
  memcpy(&raw_ticksize, &tmp_ticksize, sizeof(tmp_ticksize));
  if (raw_ticksize != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_ticksize(), target);
  }

  // int32 LoanMarginIndicator = 23;
  if (this->_internal_loanmarginindicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_loanmarginindicator(), target);
  }

  // int32 PxAccuracy = 24;
  if (this->_internal_pxaccuracy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_pxaccuracy(), target);
  }

  // int32 IPOProfitable = 25;
  if (this->_internal_ipoprofitable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_ipoprofitable(), target);
  }

  // int32 DiffRightsIndicator = 26;
  if (this->_internal_diffrightsindicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_diffrightsindicator(), target);
  }

  // string HKSpreadTableCode = 27;
  if (!this->_internal_hkspreadtablecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hkspreadtablecode().data(), static_cast<int>(this->_internal_hkspreadtablecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_hkspreadtablecode(), target);
  }

  // double PreSettlePx = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_presettlepx = this->_internal_presettlepx();
  uint64_t raw_presettlepx;
  memcpy(&raw_presettlepx, &tmp_presettlepx, sizeof(tmp_presettlepx));
  if (raw_presettlepx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_presettlepx(), target);
  }

  // double PreIOPV = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preiopv = this->_internal_preiopv();
  uint64_t raw_preiopv;
  memcpy(&raw_preiopv, &tmp_preiopv, sizeof(tmp_preiopv));
  if (raw_preiopv != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_preiopv(), target);
  }

  // int32 ShHkConnect = 30;
  if (this->_internal_shhkconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_shhkconnect(), target);
  }

  // int32 SzHkConnect = 31;
  if (this->_internal_szhkconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_szhkconnect(), target);
  }

  // string OptionContractID = 40;
  if (!this->_internal_optioncontractid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optioncontractid().data(), static_cast<int>(this->_internal_optioncontractid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_optioncontractid(), target);
  }

  // string OptionContractSymbol = 41;
  if (!this->_internal_optioncontractsymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optioncontractsymbol().data(), static_cast<int>(this->_internal_optioncontractsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_optioncontractsymbol(), target);
  }

  // string OptionUnderlyingSecurityID = 42;
  if (!this->_internal_optionunderlyingsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionunderlyingsecurityid().data(), static_cast<int>(this->_internal_optionunderlyingsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_optionunderlyingsecurityid(), target);
  }

  // string OptionUnderlyingSymbol = 43;
  if (!this->_internal_optionunderlyingsymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionunderlyingsymbol().data(), static_cast<int>(this->_internal_optionunderlyingsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_optionunderlyingsymbol(), target);
  }

  // string OptionUnderlyingType = 44;
  if (!this->_internal_optionunderlyingtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionunderlyingtype().data(), static_cast<int>(this->_internal_optionunderlyingtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_optionunderlyingtype(), target);
  }

  // string OptionOptionType = 45;
  if (!this->_internal_optionoptiontype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionoptiontype().data(), static_cast<int>(this->_internal_optionoptiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_optionoptiontype(), target);
  }

  // string OptionCallOrPut = 46;
  if (!this->_internal_optioncallorput().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optioncallorput().data(), static_cast<int>(this->_internal_optioncallorput().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_optioncallorput(), target);
  }

  // int64 OptionContractMultiplierUnit = 47;
  if (this->_internal_optioncontractmultiplierunit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(47, this->_internal_optioncontractmultiplierunit(), target);
  }

  // double OptionExercisePrice = 48;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionexerciseprice = this->_internal_optionexerciseprice();
  uint64_t raw_optionexerciseprice;
  memcpy(&raw_optionexerciseprice, &tmp_optionexerciseprice, sizeof(tmp_optionexerciseprice));
  if (raw_optionexerciseprice != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(48, this->_internal_optionexerciseprice(), target);
  }

  // string OptionStartDate = 49;
  if (!this->_internal_optionstartdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionstartdate().data(), static_cast<int>(this->_internal_optionstartdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_optionstartdate(), target);
  }

  // string OptionEndDate = 50;
  if (!this->_internal_optionenddate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionenddate().data(), static_cast<int>(this->_internal_optionenddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_optionenddate(), target);
  }

  // string OptionExerciseDate = 51;
  if (!this->_internal_optionexercisedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionexercisedate().data(), static_cast<int>(this->_internal_optionexercisedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_optionexercisedate(), target);
  }

  // string OptionDeliveryDate = 52;
  if (!this->_internal_optiondeliverydate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optiondeliverydate().data(), static_cast<int>(this->_internal_optiondeliverydate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_optiondeliverydate(), target);
  }

  // string OptionExpireDate = 53;
  if (!this->_internal_optionexpiredate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionexpiredate().data(), static_cast<int>(this->_internal_optionexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_optionexpiredate(), target);
  }

  // string OptionUpdateVersion = 54;
  if (!this->_internal_optionupdateversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionupdateversion().data(), static_cast<int>(this->_internal_optionupdateversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_optionupdateversion(), target);
  }

  // int64 OptionTotalLongPosition = 55;
  if (this->_internal_optiontotallongposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(55, this->_internal_optiontotallongposition(), target);
  }

  // double OptionSecurityClosePx = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsecurityclosepx = this->_internal_optionsecurityclosepx();
  uint64_t raw_optionsecurityclosepx;
  memcpy(&raw_optionsecurityclosepx, &tmp_optionsecurityclosepx, sizeof(tmp_optionsecurityclosepx));
  if (raw_optionsecurityclosepx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(56, this->_internal_optionsecurityclosepx(), target);
  }

  // double OptionSettlPrice = 57;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsettlprice = this->_internal_optionsettlprice();
  uint64_t raw_optionsettlprice;
  memcpy(&raw_optionsettlprice, &tmp_optionsettlprice, sizeof(tmp_optionsettlprice));
  if (raw_optionsettlprice != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(57, this->_internal_optionsettlprice(), target);
  }

  // double OptionUnderlyingClosePx = 58;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionunderlyingclosepx = this->_internal_optionunderlyingclosepx();
  uint64_t raw_optionunderlyingclosepx;
  memcpy(&raw_optionunderlyingclosepx, &tmp_optionunderlyingclosepx, sizeof(tmp_optionunderlyingclosepx));
  if (raw_optionunderlyingclosepx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(58, this->_internal_optionunderlyingclosepx(), target);
  }

  // string OptionPriceLimitType = 59;
  if (!this->_internal_optionpricelimittype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionpricelimittype().data(), static_cast<int>(this->_internal_optionpricelimittype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType");
    target = stream->WriteStringMaybeAliased(
        59, this->_internal_optionpricelimittype(), target);
  }

  // double OptionDailyPriceUpLimit = 60;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optiondailypriceuplimit = this->_internal_optiondailypriceuplimit();
  uint64_t raw_optiondailypriceuplimit;
  memcpy(&raw_optiondailypriceuplimit, &tmp_optiondailypriceuplimit, sizeof(tmp_optiondailypriceuplimit));
  if (raw_optiondailypriceuplimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(60, this->_internal_optiondailypriceuplimit(), target);
  }

  // double OptionDailyPriceDownLimit = 61;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optiondailypricedownlimit = this->_internal_optiondailypricedownlimit();
  uint64_t raw_optiondailypricedownlimit;
  memcpy(&raw_optiondailypricedownlimit, &tmp_optiondailypricedownlimit, sizeof(tmp_optiondailypricedownlimit));
  if (raw_optiondailypricedownlimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(61, this->_internal_optiondailypricedownlimit(), target);
  }

  // double OptionMarginUnit = 62;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginunit = this->_internal_optionmarginunit();
  uint64_t raw_optionmarginunit;
  memcpy(&raw_optionmarginunit, &tmp_optionmarginunit, sizeof(tmp_optionmarginunit));
  if (raw_optionmarginunit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(62, this->_internal_optionmarginunit(), target);
  }

  // double OptionMarginRatioParam1 = 63;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginratioparam1 = this->_internal_optionmarginratioparam1();
  uint64_t raw_optionmarginratioparam1;
  memcpy(&raw_optionmarginratioparam1, &tmp_optionmarginratioparam1, sizeof(tmp_optionmarginratioparam1));
  if (raw_optionmarginratioparam1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(63, this->_internal_optionmarginratioparam1(), target);
  }

  // double OptionMarginRatioParam2 = 64;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginratioparam2 = this->_internal_optionmarginratioparam2();
  uint64_t raw_optionmarginratioparam2;
  memcpy(&raw_optionmarginratioparam2, &tmp_optionmarginratioparam2, sizeof(tmp_optionmarginratioparam2));
  if (raw_optionmarginratioparam2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(64, this->_internal_optionmarginratioparam2(), target);
  }

  // int64 OptionRoundLot = 65;
  if (this->_internal_optionroundlot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(65, this->_internal_optionroundlot(), target);
  }

  // int64 OptionLmtOrdMinFloor = 66;
  if (this->_internal_optionlmtordminfloor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(66, this->_internal_optionlmtordminfloor(), target);
  }

  // int64 OptionLmtOrdMaxFloor = 67;
  if (this->_internal_optionlmtordmaxfloor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(67, this->_internal_optionlmtordmaxfloor(), target);
  }

  // int64 OptionMktOrdMinFloor = 68;
  if (this->_internal_optionmktordminfloor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(68, this->_internal_optionmktordminfloor(), target);
  }

  // int64 OptionMktOrdMaxFloor = 69;
  if (this->_internal_optionmktordmaxfloor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(69, this->_internal_optionmktordmaxfloor(), target);
  }

  // double OptionTickSize = 70;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionticksize = this->_internal_optionticksize();
  uint64_t raw_optionticksize;
  memcpy(&raw_optionticksize, &tmp_optionticksize, sizeof(tmp_optionticksize));
  if (raw_optionticksize != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(70, this->_internal_optionticksize(), target);
  }

  // string OptionSecurityStatusFlag = 71;
  if (!this->_internal_optionsecuritystatusflag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionsecuritystatusflag().data(), static_cast<int>(this->_internal_optionsecuritystatusflag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag");
    target = stream->WriteStringMaybeAliased(
        71, this->_internal_optionsecuritystatusflag(), target);
  }

  // string OptionCarryInterestDate = 72;
  if (!this->_internal_optioncarryinterestdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optioncarryinterestdate().data(), static_cast<int>(this->_internal_optioncarryinterestdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate");
    target = stream->WriteStringMaybeAliased(
        72, this->_internal_optioncarryinterestdate(), target);
  }

  // string OptionEarlyExpireDate = 73;
  if (!this->_internal_optionearlyexpiredate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionearlyexpiredate().data(), static_cast<int>(this->_internal_optionearlyexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate");
    target = stream->WriteStringMaybeAliased(
        73, this->_internal_optionearlyexpiredate(), target);
  }

  // string OptionStrategySecurityID = 74;
  if (!this->_internal_optionstrategysecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionstrategysecurityid().data(), static_cast<int>(this->_internal_optionstrategysecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID");
    target = stream->WriteStringMaybeAliased(
        74, this->_internal_optionstrategysecurityid(), target);
  }

  // string FITradeProductType = 80;
  if (!this->_internal_fitradeproducttype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fitradeproducttype().data(), static_cast<int>(this->_internal_fitradeproducttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType");
    target = stream->WriteStringMaybeAliased(
        80, this->_internal_fitradeproducttype(), target);
  }

  // string FISecurityProperty = 81;
  if (!this->_internal_fisecurityproperty().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fisecurityproperty().data(), static_cast<int>(this->_internal_fisecurityproperty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty");
    target = stream->WriteStringMaybeAliased(
        81, this->_internal_fisecurityproperty(), target);
  }

  // string FISecurityStatus = 82;
  if (!this->_internal_fisecuritystatus().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fisecuritystatus().data(), static_cast<int>(this->_internal_fisecuritystatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus");
    target = stream->WriteStringMaybeAliased(
        82, this->_internal_fisecuritystatus(), target);
  }

  // string FIPledgedSecurityID = 83;
  if (!this->_internal_fipledgedsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fipledgedsecurityid().data(), static_cast<int>(this->_internal_fipledgedsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID");
    target = stream->WriteStringMaybeAliased(
        83, this->_internal_fipledgedsecurityid(), target);
  }

  // string FIOpenTime = 84;
  if (!this->_internal_fiopentime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fiopentime().data(), static_cast<int>(this->_internal_fiopentime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime");
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_fiopentime(), target);
  }

  // string FICloseTime = 85;
  if (!this->_internal_ficlosetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ficlosetime().data(), static_cast<int>(this->_internal_ficlosetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime");
    target = stream->WriteStringMaybeAliased(
        85, this->_internal_ficlosetime(), target);
  }

  // string FIIssueMode = 86;
  if (!this->_internal_fiissuemode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fiissuemode().data(), static_cast<int>(this->_internal_fiissuemode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode");
    target = stream->WriteStringMaybeAliased(
        86, this->_internal_fiissuemode(), target);
  }

  // double FIFaceAmount = 87;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fifaceamount = this->_internal_fifaceamount();
  uint64_t raw_fifaceamount;
  memcpy(&raw_fifaceamount, &tmp_fifaceamount, sizeof(tmp_fifaceamount));
  if (raw_fifaceamount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(87, this->_internal_fifaceamount(), target);
  }

  // double FIIssuePrice = 88;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fiissueprice = this->_internal_fiissueprice();
  uint64_t raw_fiissueprice;
  memcpy(&raw_fiissueprice, &tmp_fiissueprice, sizeof(tmp_fiissueprice));
  if (raw_fiissueprice != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(88, this->_internal_fiissueprice(), target);
  }

  // string FIInterestType = 89;
  if (!this->_internal_fiinteresttype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fiinteresttype().data(), static_cast<int>(this->_internal_fiinteresttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType");
    target = stream->WriteStringMaybeAliased(
        89, this->_internal_fiinteresttype(), target);
  }

  // string FIInterestFrequency = 90;
  if (!this->_internal_fiinterestfrequency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fiinterestfrequency().data(), static_cast<int>(this->_internal_fiinterestfrequency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_fiinterestfrequency(), target);
  }

  // double FIGuaranteedInterestRate = 91;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_figuaranteedinterestrate = this->_internal_figuaranteedinterestrate();
  uint64_t raw_figuaranteedinterestrate;
  memcpy(&raw_figuaranteedinterestrate, &tmp_figuaranteedinterestrate, sizeof(tmp_figuaranteedinterestrate));
  if (raw_figuaranteedinterestrate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(91, this->_internal_figuaranteedinterestrate(), target);
  }

  // double FIBaseInterestRate = 92;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fibaseinterestrate = this->_internal_fibaseinterestrate();
  uint64_t raw_fibaseinterestrate;
  memcpy(&raw_fibaseinterestrate, &tmp_fibaseinterestrate, sizeof(tmp_fibaseinterestrate));
  if (raw_fibaseinterestrate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(92, this->_internal_fibaseinterestrate(), target);
  }

  // double FIQuotedMargin = 93;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fiquotedmargin = this->_internal_fiquotedmargin();
  uint64_t raw_fiquotedmargin;
  memcpy(&raw_fiquotedmargin, &tmp_fiquotedmargin, sizeof(tmp_fiquotedmargin));
  if (raw_fiquotedmargin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(93, this->_internal_fiquotedmargin(), target);
  }

  // int32 FITimeLimit = 94;
  if (this->_internal_fitimelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(94, this->_internal_fitimelimit(), target);
  }

  // double FITotalIssuance = 95;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fitotalissuance = this->_internal_fitotalissuance();
  uint64_t raw_fitotalissuance;
  memcpy(&raw_fitotalissuance, &tmp_fitotalissuance, sizeof(tmp_fitotalissuance));
  if (raw_fitotalissuance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(95, this->_internal_fitotalissuance(), target);
  }

  // string FIIssueStartDate = 96;
  if (!this->_internal_fiissuestartdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fiissuestartdate().data(), static_cast<int>(this->_internal_fiissuestartdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate");
    target = stream->WriteStringMaybeAliased(
        96, this->_internal_fiissuestartdate(), target);
  }

  // string FIIssueEndDate = 97;
  if (!this->_internal_fiissueenddate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fiissueenddate().data(), static_cast<int>(this->_internal_fiissueenddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate");
    target = stream->WriteStringMaybeAliased(
        97, this->_internal_fiissueenddate(), target);
  }

  // string FIListDate = 98;
  if (!this->_internal_filistdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filistdate().data(), static_cast<int>(this->_internal_filistdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIListDate");
    target = stream->WriteStringMaybeAliased(
        98, this->_internal_filistdate(), target);
  }

  // string FIExpireDate = 99;
  if (!this->_internal_fiexpiredate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fiexpiredate().data(), static_cast<int>(this->_internal_fiexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_fiexpiredate(), target);
  }

  // string FINationalDebtType = 100;
  if (!this->_internal_finationaldebttype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_finationaldebttype().data(), static_cast<int>(this->_internal_finationaldebttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType");
    target = stream->WriteStringMaybeAliased(
        100, this->_internal_finationaldebttype(), target);
  }

  // string FIIssueMethod = 101;
  if (!this->_internal_fiissuemethod().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fiissuemethod().data(), static_cast<int>(this->_internal_fiissuemethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod");
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_fiissuemethod(), target);
  }

  // bool FICrossMarket = 102;
  if (this->_internal_ficrossmarket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(102, this->_internal_ficrossmarket(), target);
  }

  // bool FIShortSellFlag = 103;
  if (this->_internal_fishortsellflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(103, this->_internal_fishortsellflag(), target);
  }

  // double FITotalShortSellQuota = 104;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fitotalshortsellquota = this->_internal_fitotalshortsellquota();
  uint64_t raw_fitotalshortsellquota;
  memcpy(&raw_fitotalshortsellquota, &tmp_fitotalshortsellquota, sizeof(tmp_fitotalshortsellquota));
  if (raw_fitotalshortsellquota != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(104, this->_internal_fitotalshortsellquota(), target);
  }

  // double FIDealerShortSellQuota = 105;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fidealershortsellquota = this->_internal_fidealershortsellquota();
  uint64_t raw_fidealershortsellquota;
  memcpy(&raw_fidealershortsellquota, &tmp_fidealershortsellquota, sizeof(tmp_fidealershortsellquota));
  if (raw_fidealershortsellquota != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(105, this->_internal_fidealershortsellquota(), target);
  }

  // double FIPreClosePx = 106;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fipreclosepx = this->_internal_fipreclosepx();
  uint64_t raw_fipreclosepx;
  memcpy(&raw_fipreclosepx, &tmp_fipreclosepx, sizeof(tmp_fipreclosepx));
  if (raw_fipreclosepx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(106, this->_internal_fipreclosepx(), target);
  }

  // double FIPreWeightedPx = 107;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fipreweightedpx = this->_internal_fipreweightedpx();
  uint64_t raw_fipreweightedpx;
  memcpy(&raw_fipreweightedpx, &tmp_fipreweightedpx, sizeof(tmp_fipreweightedpx));
  if (raw_fipreweightedpx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(107, this->_internal_fipreweightedpx(), target);
  }

  // string OptionListType = 110;
  if (!this->_internal_optionlisttype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionlisttype().data(), static_cast<int>(this->_internal_optionlisttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionListType");
    target = stream->WriteStringMaybeAliased(
        110, this->_internal_optionlisttype(), target);
  }

  // string OptionDeliveryType = 111;
  if (!this->_internal_optiondeliverytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optiondeliverytype().data(), static_cast<int>(this->_internal_optiondeliverytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType");
    target = stream->WriteStringMaybeAliased(
        111, this->_internal_optiondeliverytype(), target);
  }

  // int32 OptionAdjustTimes = 112;
  if (this->_internal_optionadjusttimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(112, this->_internal_optionadjusttimes(), target);
  }

  // int64 OptionContractPosition = 113;
  if (this->_internal_optioncontractposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(113, this->_internal_optioncontractposition(), target);
  }

  // int64 OptionBuyQtyUpperLimit = 114;
  if (this->_internal_optionbuyqtyupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(114, this->_internal_optionbuyqtyupperlimit(), target);
  }

  // int64 OptionSellQtyUpperLimit = 115;
  if (this->_internal_optionsellqtyupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(115, this->_internal_optionsellqtyupperlimit(), target);
  }

  // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
  if (this->_internal_optionmarketorderbuyqtyupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(116, this->_internal_optionmarketorderbuyqtyupperlimit(), target);
  }

  // int64 OptionMarketOrderSellQtyUpperLimit = 117;
  if (this->_internal_optionmarketordersellqtyupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(117, this->_internal_optionmarketordersellqtyupperlimit(), target);
  }

  // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
  if (this->_internal_optionquoteorderbuyqtyupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(118, this->_internal_optionquoteorderbuyqtyupperlimit(), target);
  }

  // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
  if (this->_internal_optionquoteordersellqtyupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(119, this->_internal_optionquoteordersellqtyupperlimit(), target);
  }

  // int64 OptionBuyQtyUnit = 120;
  if (this->_internal_optionbuyqtyunit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(120, this->_internal_optionbuyqtyunit(), target);
  }

  // int64 OptionSellQtyUnit = 121;
  if (this->_internal_optionsellqtyunit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(121, this->_internal_optionsellqtyunit(), target);
  }

  // double OptionLastSellMargin = 122;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionlastsellmargin = this->_internal_optionlastsellmargin();
  uint64_t raw_optionlastsellmargin;
  memcpy(&raw_optionlastsellmargin, &tmp_optionlastsellmargin, sizeof(tmp_optionlastsellmargin));
  if (raw_optionlastsellmargin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(122, this->_internal_optionlastsellmargin(), target);
  }

  // double OptionSellMargin = 123;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsellmargin = this->_internal_optionsellmargin();
  uint64_t raw_optionsellmargin;
  memcpy(&raw_optionsellmargin, &tmp_optionsellmargin, sizeof(tmp_optionsellmargin));
  if (raw_optionsellmargin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(123, this->_internal_optionsellmargin(), target);
  }

  // string OptionMarketMakerFlag = 124;
  if (!this->_internal_optionmarketmakerflag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optionmarketmakerflag().data(), static_cast<int>(this->_internal_optionmarketmakerflag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag");
    target = stream->WriteStringMaybeAliased(
        124, this->_internal_optionmarketmakerflag(), target);
  }

  // string OptionCombinationStrategy = 125;
  if (!this->_internal_optioncombinationstrategy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optioncombinationstrategy().data(), static_cast<int>(this->_internal_optioncombinationstrategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy");
    target = stream->WriteStringMaybeAliased(
        125, this->_internal_optioncombinationstrategy(), target);
  }

  // string DeliveryYear = 126;
  if (!this->_internal_deliveryyear().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deliveryyear().data(), static_cast<int>(this->_internal_deliveryyear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear");
    target = stream->WriteStringMaybeAliased(
        126, this->_internal_deliveryyear(), target);
  }

  // string DeliveryMonth = 127;
  if (!this->_internal_deliverymonth().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deliverymonth().data(), static_cast<int>(this->_internal_deliverymonth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth");
    target = stream->WriteStringMaybeAliased(
        127, this->_internal_deliverymonth(), target);
  }

  // string InstrumentID = 128;
  if (!this->_internal_instrumentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumentid().data(), static_cast<int>(this->_internal_instrumentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID");
    target = stream->WriteStringMaybeAliased(
        128, this->_internal_instrumentid(), target);
  }

  // string InstrumentName = 129;
  if (!this->_internal_instrumentname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumentname().data(), static_cast<int>(this->_internal_instrumentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName");
    target = stream->WriteStringMaybeAliased(
        129, this->_internal_instrumentname(), target);
  }

  // string ExchangeInstID = 130;
  if (!this->_internal_exchangeinstid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchangeinstid().data(), static_cast<int>(this->_internal_exchangeinstid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID");
    target = stream->WriteStringMaybeAliased(
        130, this->_internal_exchangeinstid(), target);
  }

  // string ProductID = 131;
  if (!this->_internal_productid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productid().data(), static_cast<int>(this->_internal_productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ProductID");
    target = stream->WriteStringMaybeAliased(
        131, this->_internal_productid(), target);
  }

  // int64 MaxMarketOrderVolume = 132;
  if (this->_internal_maxmarketordervolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(132, this->_internal_maxmarketordervolume(), target);
  }

  // int64 MinMarketOrderVolume = 133;
  if (this->_internal_minmarketordervolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(133, this->_internal_minmarketordervolume(), target);
  }

  // int64 MaxLimitOrderVolume = 134;
  if (this->_internal_maxlimitordervolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(134, this->_internal_maxlimitordervolume(), target);
  }

  // int64 MinLimitOrderVolume = 135;
  if (this->_internal_minlimitordervolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(135, this->_internal_minlimitordervolume(), target);
  }

  // int64 VolumeMultiple = 136;
  if (this->_internal_volumemultiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(136, this->_internal_volumemultiple(), target);
  }

  // string CreateDate = 137;
  if (!this->_internal_createdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdate().data(), static_cast<int>(this->_internal_createdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.CreateDate");
    target = stream->WriteStringMaybeAliased(
        137, this->_internal_createdate(), target);
  }

  // string ExpireDate = 138;
  if (!this->_internal_expiredate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expiredate().data(), static_cast<int>(this->_internal_expiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate");
    target = stream->WriteStringMaybeAliased(
        138, this->_internal_expiredate(), target);
  }

  // string StartDelivDate = 139;
  if (!this->_internal_startdelivdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_startdelivdate().data(), static_cast<int>(this->_internal_startdelivdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate");
    target = stream->WriteStringMaybeAliased(
        139, this->_internal_startdelivdate(), target);
  }

  // string EndDelivDate = 140;
  if (!this->_internal_enddelivdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enddelivdate().data(), static_cast<int>(this->_internal_enddelivdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate");
    target = stream->WriteStringMaybeAliased(
        140, this->_internal_enddelivdate(), target);
  }

  // string PositionType = 141;
  if (!this->_internal_positiontype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_positiontype().data(), static_cast<int>(this->_internal_positiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.PositionType");
    target = stream->WriteStringMaybeAliased(
        141, this->_internal_positiontype(), target);
  }

  // double LongMarginRatio = 142;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longmarginratio = this->_internal_longmarginratio();
  uint64_t raw_longmarginratio;
  memcpy(&raw_longmarginratio, &tmp_longmarginratio, sizeof(tmp_longmarginratio));
  if (raw_longmarginratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(142, this->_internal_longmarginratio(), target);
  }

  // double ShortMarginRatio = 143;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shortmarginratio = this->_internal_shortmarginratio();
  uint64_t raw_shortmarginratio;
  memcpy(&raw_shortmarginratio, &tmp_shortmarginratio, sizeof(tmp_shortmarginratio));
  if (raw_shortmarginratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(143, this->_internal_shortmarginratio(), target);
  }

  // string MaxMarginSideAlgorithm = 144;
  if (!this->_internal_maxmarginsidealgorithm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maxmarginsidealgorithm().data(), static_cast<int>(this->_internal_maxmarginsidealgorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm");
    target = stream->WriteStringMaybeAliased(
        144, this->_internal_maxmarginsidealgorithm(), target);
  }

  // double StrikePrice = 145;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_strikeprice = this->_internal_strikeprice();
  uint64_t raw_strikeprice;
  memcpy(&raw_strikeprice, &tmp_strikeprice, sizeof(tmp_strikeprice));
  if (raw_strikeprice != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(145, this->_internal_strikeprice(), target);
  }

  // double PreOpenInterest = 146;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preopeninterest = this->_internal_preopeninterest();
  uint64_t raw_preopeninterest;
  memcpy(&raw_preopeninterest, &tmp_preopeninterest, sizeof(tmp_preopeninterest));
  if (raw_preopeninterest != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(146, this->_internal_preopeninterest(), target);
  }

  // string FormerSymbol = 147;
  if (!this->_internal_formersymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formersymbol().data(), static_cast<int>(this->_internal_formersymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol");
    target = stream->WriteStringMaybeAliased(
        147, this->_internal_formersymbol(), target);
  }

  // string DelistDate = 148;
  if (!this->_internal_delistdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delistdate().data(), static_cast<int>(this->_internal_delistdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DelistDate");
    target = stream->WriteStringMaybeAliased(
        148, this->_internal_delistdate(), target);
  }

  // int64 BuyQtyUnit = 149;
  if (this->_internal_buyqtyunit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(149, this->_internal_buyqtyunit(), target);
  }

  // int64 SellQtyUnit = 150;
  if (this->_internal_sellqtyunit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(150, this->_internal_sellqtyunit(), target);
  }

  // int64 BuyQtyUpperLimit = 161;
  if (this->_internal_buyqtyupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(161, this->_internal_buyqtyupperlimit(), target);
  }

  // int64 SellQtyUpperLimit = 162;
  if (this->_internal_sellqtyupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(162, this->_internal_sellqtyupperlimit(), target);
  }

  // int64 BuyQtyLowerLimit = 163;
  if (this->_internal_buyqtylowerlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(163, this->_internal_buyqtylowerlimit(), target);
  }

  // int64 SellQtyLowerLimit = 164;
  if (this->_internal_sellqtylowerlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(164, this->_internal_sellqtylowerlimit(), target);
  }

  // int32 VCMFlag = 165;
  if (this->_internal_vcmflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(165, this->_internal_vcmflag(), target);
  }

  // int32 CASFlag = 166;
  if (this->_internal_casflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(166, this->_internal_casflag(), target);
  }

  // int32 POSFlag = 167;
  if (this->_internal_posflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(167, this->_internal_posflag(), target);
  }

  // double POSUpperLimitPx = 168;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posupperlimitpx = this->_internal_posupperlimitpx();
  uint64_t raw_posupperlimitpx;
  memcpy(&raw_posupperlimitpx, &tmp_posupperlimitpx, sizeof(tmp_posupperlimitpx));
  if (raw_posupperlimitpx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(168, this->_internal_posupperlimitpx(), target);
  }

  // double POSLowerLimitPx = 169;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_poslowerlimitpx = this->_internal_poslowerlimitpx();
  uint64_t raw_poslowerlimitpx;
  memcpy(&raw_poslowerlimitpx, &tmp_poslowerlimitpx, sizeof(tmp_poslowerlimitpx));
  if (raw_poslowerlimitpx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(169, this->_internal_poslowerlimitpx(), target);
  }

  // string BaseContractID = 170;
  if (!this->_internal_basecontractid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basecontractid().data(), static_cast<int>(this->_internal_basecontractid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID");
    target = stream->WriteStringMaybeAliased(
        170, this->_internal_basecontractid(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_constantparams_size()); i < n; i++) {
    const auto& repfield = this->_internal_constantparams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(171, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 172;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(172, this->_internal_datamultiplepowerof10(), target);
  }

  // string InterestAccrualDate = 173;
  if (!this->_internal_interestaccrualdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interestaccrualdate().data(), static_cast<int>(this->_internal_interestaccrualdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate");
    target = stream->WriteStringMaybeAliased(
        173, this->_internal_interestaccrualdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDBasicInfo)
  return target;
}

size_t MDBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDBasicInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
  total_size += 2UL * this->_internal_constantparams_size();
  for (const auto& msg : this->_impl_.constantparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string SecurityID = 2;
  if (!this->_internal_securityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  // string Symbol = 3;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string ChiSpelling = 4;
  if (!this->_internal_chispelling().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chispelling());
  }

  // string EnglishName = 5;
  if (!this->_internal_englishname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_englishname());
  }

  // string SecuritySubType = 8;
  if (!this->_internal_securitysubtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securitysubtype());
  }

  // string ListDate = 9;
  if (!this->_internal_listdate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listdate());
  }

  // string Currency = 10;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string TradingPhaseCode = 14;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // string ExchangeDate = 20;
  if (!this->_internal_exchangedate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchangedate());
  }

  // string ExchangeSymbol = 21;
  if (!this->_internal_exchangesymbol().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchangesymbol());
  }

  // string HKSpreadTableCode = 27;
  if (!this->_internal_hkspreadtablecode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hkspreadtablecode());
  }

  // string OptionContractID = 40;
  if (!this->_internal_optioncontractid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optioncontractid());
  }

  // string OptionContractSymbol = 41;
  if (!this->_internal_optioncontractsymbol().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optioncontractsymbol());
  }

  // string OptionUnderlyingSecurityID = 42;
  if (!this->_internal_optionunderlyingsecurityid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionunderlyingsecurityid());
  }

  // string OptionUnderlyingSymbol = 43;
  if (!this->_internal_optionunderlyingsymbol().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionunderlyingsymbol());
  }

  // string OptionUnderlyingType = 44;
  if (!this->_internal_optionunderlyingtype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionunderlyingtype());
  }

  // string OptionOptionType = 45;
  if (!this->_internal_optionoptiontype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionoptiontype());
  }

  // string OptionCallOrPut = 46;
  if (!this->_internal_optioncallorput().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optioncallorput());
  }

  // string OptionStartDate = 49;
  if (!this->_internal_optionstartdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionstartdate());
  }

  // string OptionEndDate = 50;
  if (!this->_internal_optionenddate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionenddate());
  }

  // string OptionExerciseDate = 51;
  if (!this->_internal_optionexercisedate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionexercisedate());
  }

  // string OptionDeliveryDate = 52;
  if (!this->_internal_optiondeliverydate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optiondeliverydate());
  }

  // string OptionExpireDate = 53;
  if (!this->_internal_optionexpiredate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionexpiredate());
  }

  // string OptionUpdateVersion = 54;
  if (!this->_internal_optionupdateversion().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionupdateversion());
  }

  // string OptionPriceLimitType = 59;
  if (!this->_internal_optionpricelimittype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionpricelimittype());
  }

  // string OptionSecurityStatusFlag = 71;
  if (!this->_internal_optionsecuritystatusflag().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionsecuritystatusflag());
  }

  // string OptionCarryInterestDate = 72;
  if (!this->_internal_optioncarryinterestdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optioncarryinterestdate());
  }

  // string OptionEarlyExpireDate = 73;
  if (!this->_internal_optionearlyexpiredate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionearlyexpiredate());
  }

  // string OptionStrategySecurityID = 74;
  if (!this->_internal_optionstrategysecurityid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionstrategysecurityid());
  }

  // string FITradeProductType = 80;
  if (!this->_internal_fitradeproducttype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fitradeproducttype());
  }

  // string FISecurityProperty = 81;
  if (!this->_internal_fisecurityproperty().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fisecurityproperty());
  }

  // string FISecurityStatus = 82;
  if (!this->_internal_fisecuritystatus().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fisecuritystatus());
  }

  // string FIPledgedSecurityID = 83;
  if (!this->_internal_fipledgedsecurityid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fipledgedsecurityid());
  }

  // string FIOpenTime = 84;
  if (!this->_internal_fiopentime().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fiopentime());
  }

  // string FICloseTime = 85;
  if (!this->_internal_ficlosetime().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ficlosetime());
  }

  // string FIIssueMode = 86;
  if (!this->_internal_fiissuemode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fiissuemode());
  }

  // string FIInterestType = 89;
  if (!this->_internal_fiinteresttype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fiinteresttype());
  }

  // string FIInterestFrequency = 90;
  if (!this->_internal_fiinterestfrequency().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fiinterestfrequency());
  }

  // string FIIssueStartDate = 96;
  if (!this->_internal_fiissuestartdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fiissuestartdate());
  }

  // string FIIssueEndDate = 97;
  if (!this->_internal_fiissueenddate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fiissueenddate());
  }

  // string FIListDate = 98;
  if (!this->_internal_filistdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filistdate());
  }

  // string FIExpireDate = 99;
  if (!this->_internal_fiexpiredate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fiexpiredate());
  }

  // string FINationalDebtType = 100;
  if (!this->_internal_finationaldebttype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_finationaldebttype());
  }

  // string FIIssueMethod = 101;
  if (!this->_internal_fiissuemethod().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fiissuemethod());
  }

  // string OptionListType = 110;
  if (!this->_internal_optionlisttype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionlisttype());
  }

  // string OptionDeliveryType = 111;
  if (!this->_internal_optiondeliverytype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optiondeliverytype());
  }

  // string OptionMarketMakerFlag = 124;
  if (!this->_internal_optionmarketmakerflag().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionmarketmakerflag());
  }

  // string OptionCombinationStrategy = 125;
  if (!this->_internal_optioncombinationstrategy().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optioncombinationstrategy());
  }

  // string DeliveryYear = 126;
  if (!this->_internal_deliveryyear().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deliveryyear());
  }

  // string DeliveryMonth = 127;
  if (!this->_internal_deliverymonth().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deliverymonth());
  }

  // string InstrumentID = 128;
  if (!this->_internal_instrumentid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumentid());
  }

  // string InstrumentName = 129;
  if (!this->_internal_instrumentname().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumentname());
  }

  // string ExchangeInstID = 130;
  if (!this->_internal_exchangeinstid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchangeinstid());
  }

  // string ProductID = 131;
  if (!this->_internal_productid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productid());
  }

  // string CreateDate = 137;
  if (!this->_internal_createdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdate());
  }

  // string ExpireDate = 138;
  if (!this->_internal_expiredate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expiredate());
  }

  // string StartDelivDate = 139;
  if (!this->_internal_startdelivdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_startdelivdate());
  }

  // string EndDelivDate = 140;
  if (!this->_internal_enddelivdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enddelivdate());
  }

  // string PositionType = 141;
  if (!this->_internal_positiontype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_positiontype());
  }

  // string MaxMarginSideAlgorithm = 144;
  if (!this->_internal_maxmarginsidealgorithm().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maxmarginsidealgorithm());
  }

  // string FormerSymbol = 147;
  if (!this->_internal_formersymbol().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formersymbol());
  }

  // string DelistDate = 148;
  if (!this->_internal_delistdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delistdate());
  }

  // string BaseContractID = 170;
  if (!this->_internal_basecontractid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basecontractid());
  }

  // string InterestAccrualDate = 173;
  if (!this->_internal_interestaccrualdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interestaccrualdate());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 OutstandingShare = 11;
  if (this->_internal_outstandingshare() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_outstandingshare());
  }

  // int64 PublicFloatShareQuantity = 12;
  if (this->_internal_publicfloatsharequantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_publicfloatsharequantity());
  }

  // int64 PreClosePx = 15;
  if (this->_internal_preclosepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preclosepx());
  }

  // int64 MaxPx = 16;
  if (this->_internal_maxpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_maxpx());
  }

  // int64 MinPx = 17;
  if (this->_internal_minpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_minpx());
  }

  // int64 LotSize = 18;
  if (this->_internal_lotsize() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lotsize());
  }

  // int32 MDDate = 13;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 LoanMarginIndicator = 23;
  if (this->_internal_loanmarginindicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_loanmarginindicator());
  }

  // double TickSize = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ticksize = this->_internal_ticksize();
  uint64_t raw_ticksize;
  memcpy(&raw_ticksize, &tmp_ticksize, sizeof(tmp_ticksize));
  if (raw_ticksize != 0) {
    total_size += 2 + 8;
  }

  // int32 PxAccuracy = 24;
  if (this->_internal_pxaccuracy() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pxaccuracy());
  }

  // int32 IPOProfitable = 25;
  if (this->_internal_ipoprofitable() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ipoprofitable());
  }

  // double PreSettlePx = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_presettlepx = this->_internal_presettlepx();
  uint64_t raw_presettlepx;
  memcpy(&raw_presettlepx, &tmp_presettlepx, sizeof(tmp_presettlepx));
  if (raw_presettlepx != 0) {
    total_size += 2 + 8;
  }

  // int32 DiffRightsIndicator = 26;
  if (this->_internal_diffrightsindicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_diffrightsindicator());
  }

  // int32 ShHkConnect = 30;
  if (this->_internal_shhkconnect() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_shhkconnect());
  }

  // double PreIOPV = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preiopv = this->_internal_preiopv();
  uint64_t raw_preiopv;
  memcpy(&raw_preiopv, &tmp_preiopv, sizeof(tmp_preiopv));
  if (raw_preiopv != 0) {
    total_size += 2 + 8;
  }

  // int64 OptionContractMultiplierUnit = 47;
  if (this->_internal_optioncontractmultiplierunit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optioncontractmultiplierunit());
  }

  // double OptionExercisePrice = 48;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionexerciseprice = this->_internal_optionexerciseprice();
  uint64_t raw_optionexerciseprice;
  memcpy(&raw_optionexerciseprice, &tmp_optionexerciseprice, sizeof(tmp_optionexerciseprice));
  if (raw_optionexerciseprice != 0) {
    total_size += 2 + 8;
  }

  // int64 OptionTotalLongPosition = 55;
  if (this->_internal_optiontotallongposition() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optiontotallongposition());
  }

  // double OptionSecurityClosePx = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsecurityclosepx = this->_internal_optionsecurityclosepx();
  uint64_t raw_optionsecurityclosepx;
  memcpy(&raw_optionsecurityclosepx, &tmp_optionsecurityclosepx, sizeof(tmp_optionsecurityclosepx));
  if (raw_optionsecurityclosepx != 0) {
    total_size += 2 + 8;
  }

  // double OptionSettlPrice = 57;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsettlprice = this->_internal_optionsettlprice();
  uint64_t raw_optionsettlprice;
  memcpy(&raw_optionsettlprice, &tmp_optionsettlprice, sizeof(tmp_optionsettlprice));
  if (raw_optionsettlprice != 0) {
    total_size += 2 + 8;
  }

  // double OptionUnderlyingClosePx = 58;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionunderlyingclosepx = this->_internal_optionunderlyingclosepx();
  uint64_t raw_optionunderlyingclosepx;
  memcpy(&raw_optionunderlyingclosepx, &tmp_optionunderlyingclosepx, sizeof(tmp_optionunderlyingclosepx));
  if (raw_optionunderlyingclosepx != 0) {
    total_size += 2 + 8;
  }

  // double OptionDailyPriceUpLimit = 60;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optiondailypriceuplimit = this->_internal_optiondailypriceuplimit();
  uint64_t raw_optiondailypriceuplimit;
  memcpy(&raw_optiondailypriceuplimit, &tmp_optiondailypriceuplimit, sizeof(tmp_optiondailypriceuplimit));
  if (raw_optiondailypriceuplimit != 0) {
    total_size += 2 + 8;
  }

  // double OptionDailyPriceDownLimit = 61;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optiondailypricedownlimit = this->_internal_optiondailypricedownlimit();
  uint64_t raw_optiondailypricedownlimit;
  memcpy(&raw_optiondailypricedownlimit, &tmp_optiondailypricedownlimit, sizeof(tmp_optiondailypricedownlimit));
  if (raw_optiondailypricedownlimit != 0) {
    total_size += 2 + 8;
  }

  // double OptionMarginUnit = 62;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginunit = this->_internal_optionmarginunit();
  uint64_t raw_optionmarginunit;
  memcpy(&raw_optionmarginunit, &tmp_optionmarginunit, sizeof(tmp_optionmarginunit));
  if (raw_optionmarginunit != 0) {
    total_size += 2 + 8;
  }

  // double OptionMarginRatioParam1 = 63;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginratioparam1 = this->_internal_optionmarginratioparam1();
  uint64_t raw_optionmarginratioparam1;
  memcpy(&raw_optionmarginratioparam1, &tmp_optionmarginratioparam1, sizeof(tmp_optionmarginratioparam1));
  if (raw_optionmarginratioparam1 != 0) {
    total_size += 2 + 8;
  }

  // int32 SzHkConnect = 31;
  if (this->_internal_szhkconnect() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_szhkconnect());
  }

  // bool ShortSellFlag = 19;
  if (this->_internal_shortsellflag() != 0) {
    total_size += 2 + 1;
  }

  // bool FICrossMarket = 102;
  if (this->_internal_ficrossmarket() != 0) {
    total_size += 2 + 1;
  }

  // bool FIShortSellFlag = 103;
  if (this->_internal_fishortsellflag() != 0) {
    total_size += 2 + 1;
  }

  // double OptionMarginRatioParam2 = 64;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginratioparam2 = this->_internal_optionmarginratioparam2();
  uint64_t raw_optionmarginratioparam2;
  memcpy(&raw_optionmarginratioparam2, &tmp_optionmarginratioparam2, sizeof(tmp_optionmarginratioparam2));
  if (raw_optionmarginratioparam2 != 0) {
    total_size += 2 + 8;
  }

  // int64 OptionRoundLot = 65;
  if (this->_internal_optionroundlot() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionroundlot());
  }

  // int64 OptionLmtOrdMinFloor = 66;
  if (this->_internal_optionlmtordminfloor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionlmtordminfloor());
  }

  // int64 OptionLmtOrdMaxFloor = 67;
  if (this->_internal_optionlmtordmaxfloor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionlmtordmaxfloor());
  }

  // int64 OptionMktOrdMinFloor = 68;
  if (this->_internal_optionmktordminfloor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionmktordminfloor());
  }

  // int64 OptionMktOrdMaxFloor = 69;
  if (this->_internal_optionmktordmaxfloor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionmktordmaxfloor());
  }

  // double OptionTickSize = 70;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionticksize = this->_internal_optionticksize();
  uint64_t raw_optionticksize;
  memcpy(&raw_optionticksize, &tmp_optionticksize, sizeof(tmp_optionticksize));
  if (raw_optionticksize != 0) {
    total_size += 2 + 8;
  }

  // double FIFaceAmount = 87;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fifaceamount = this->_internal_fifaceamount();
  uint64_t raw_fifaceamount;
  memcpy(&raw_fifaceamount, &tmp_fifaceamount, sizeof(tmp_fifaceamount));
  if (raw_fifaceamount != 0) {
    total_size += 2 + 8;
  }

  // double FIIssuePrice = 88;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fiissueprice = this->_internal_fiissueprice();
  uint64_t raw_fiissueprice;
  memcpy(&raw_fiissueprice, &tmp_fiissueprice, sizeof(tmp_fiissueprice));
  if (raw_fiissueprice != 0) {
    total_size += 2 + 8;
  }

  // double FIGuaranteedInterestRate = 91;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_figuaranteedinterestrate = this->_internal_figuaranteedinterestrate();
  uint64_t raw_figuaranteedinterestrate;
  memcpy(&raw_figuaranteedinterestrate, &tmp_figuaranteedinterestrate, sizeof(tmp_figuaranteedinterestrate));
  if (raw_figuaranteedinterestrate != 0) {
    total_size += 2 + 8;
  }

  // double FIBaseInterestRate = 92;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fibaseinterestrate = this->_internal_fibaseinterestrate();
  uint64_t raw_fibaseinterestrate;
  memcpy(&raw_fibaseinterestrate, &tmp_fibaseinterestrate, sizeof(tmp_fibaseinterestrate));
  if (raw_fibaseinterestrate != 0) {
    total_size += 2 + 8;
  }

  // double FIQuotedMargin = 93;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fiquotedmargin = this->_internal_fiquotedmargin();
  uint64_t raw_fiquotedmargin;
  memcpy(&raw_fiquotedmargin, &tmp_fiquotedmargin, sizeof(tmp_fiquotedmargin));
  if (raw_fiquotedmargin != 0) {
    total_size += 2 + 8;
  }

  // double FITotalIssuance = 95;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fitotalissuance = this->_internal_fitotalissuance();
  uint64_t raw_fitotalissuance;
  memcpy(&raw_fitotalissuance, &tmp_fitotalissuance, sizeof(tmp_fitotalissuance));
  if (raw_fitotalissuance != 0) {
    total_size += 2 + 8;
  }

  // int32 FITimeLimit = 94;
  if (this->_internal_fitimelimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fitimelimit());
  }

  // int32 OptionAdjustTimes = 112;
  if (this->_internal_optionadjusttimes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_optionadjusttimes());
  }

  // double FITotalShortSellQuota = 104;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fitotalshortsellquota = this->_internal_fitotalshortsellquota();
  uint64_t raw_fitotalshortsellquota;
  memcpy(&raw_fitotalshortsellquota, &tmp_fitotalshortsellquota, sizeof(tmp_fitotalshortsellquota));
  if (raw_fitotalshortsellquota != 0) {
    total_size += 2 + 8;
  }

  // double FIDealerShortSellQuota = 105;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fidealershortsellquota = this->_internal_fidealershortsellquota();
  uint64_t raw_fidealershortsellquota;
  memcpy(&raw_fidealershortsellquota, &tmp_fidealershortsellquota, sizeof(tmp_fidealershortsellquota));
  if (raw_fidealershortsellquota != 0) {
    total_size += 2 + 8;
  }

  // double FIPreClosePx = 106;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fipreclosepx = this->_internal_fipreclosepx();
  uint64_t raw_fipreclosepx;
  memcpy(&raw_fipreclosepx, &tmp_fipreclosepx, sizeof(tmp_fipreclosepx));
  if (raw_fipreclosepx != 0) {
    total_size += 2 + 8;
  }

  // double FIPreWeightedPx = 107;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fipreweightedpx = this->_internal_fipreweightedpx();
  uint64_t raw_fipreweightedpx;
  memcpy(&raw_fipreweightedpx, &tmp_fipreweightedpx, sizeof(tmp_fipreweightedpx));
  if (raw_fipreweightedpx != 0) {
    total_size += 2 + 8;
  }

  // int64 OptionContractPosition = 113;
  if (this->_internal_optioncontractposition() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optioncontractposition());
  }

  // int64 OptionBuyQtyUpperLimit = 114;
  if (this->_internal_optionbuyqtyupperlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionbuyqtyupperlimit());
  }

  // int64 OptionSellQtyUpperLimit = 115;
  if (this->_internal_optionsellqtyupperlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionsellqtyupperlimit());
  }

  // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
  if (this->_internal_optionmarketorderbuyqtyupperlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionmarketorderbuyqtyupperlimit());
  }

  // int64 OptionMarketOrderSellQtyUpperLimit = 117;
  if (this->_internal_optionmarketordersellqtyupperlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionmarketordersellqtyupperlimit());
  }

  // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
  if (this->_internal_optionquoteorderbuyqtyupperlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionquoteorderbuyqtyupperlimit());
  }

  // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
  if (this->_internal_optionquoteordersellqtyupperlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionquoteordersellqtyupperlimit());
  }

  // int64 OptionBuyQtyUnit = 120;
  if (this->_internal_optionbuyqtyunit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionbuyqtyunit());
  }

  // int64 OptionSellQtyUnit = 121;
  if (this->_internal_optionsellqtyunit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_optionsellqtyunit());
  }

  // double OptionLastSellMargin = 122;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionlastsellmargin = this->_internal_optionlastsellmargin();
  uint64_t raw_optionlastsellmargin;
  memcpy(&raw_optionlastsellmargin, &tmp_optionlastsellmargin, sizeof(tmp_optionlastsellmargin));
  if (raw_optionlastsellmargin != 0) {
    total_size += 2 + 8;
  }

  // double OptionSellMargin = 123;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsellmargin = this->_internal_optionsellmargin();
  uint64_t raw_optionsellmargin;
  memcpy(&raw_optionsellmargin, &tmp_optionsellmargin, sizeof(tmp_optionsellmargin));
  if (raw_optionsellmargin != 0) {
    total_size += 2 + 8;
  }

  // int64 MaxMarketOrderVolume = 132;
  if (this->_internal_maxmarketordervolume() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_maxmarketordervolume());
  }

  // int64 MinMarketOrderVolume = 133;
  if (this->_internal_minmarketordervolume() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_minmarketordervolume());
  }

  // int64 MaxLimitOrderVolume = 134;
  if (this->_internal_maxlimitordervolume() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_maxlimitordervolume());
  }

  // int64 MinLimitOrderVolume = 135;
  if (this->_internal_minlimitordervolume() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_minlimitordervolume());
  }

  // int64 VolumeMultiple = 136;
  if (this->_internal_volumemultiple() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_volumemultiple());
  }

  // double LongMarginRatio = 142;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longmarginratio = this->_internal_longmarginratio();
  uint64_t raw_longmarginratio;
  memcpy(&raw_longmarginratio, &tmp_longmarginratio, sizeof(tmp_longmarginratio));
  if (raw_longmarginratio != 0) {
    total_size += 2 + 8;
  }

  // double ShortMarginRatio = 143;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shortmarginratio = this->_internal_shortmarginratio();
  uint64_t raw_shortmarginratio;
  memcpy(&raw_shortmarginratio, &tmp_shortmarginratio, sizeof(tmp_shortmarginratio));
  if (raw_shortmarginratio != 0) {
    total_size += 2 + 8;
  }

  // double StrikePrice = 145;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_strikeprice = this->_internal_strikeprice();
  uint64_t raw_strikeprice;
  memcpy(&raw_strikeprice, &tmp_strikeprice, sizeof(tmp_strikeprice));
  if (raw_strikeprice != 0) {
    total_size += 2 + 8;
  }

  // double PreOpenInterest = 146;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preopeninterest = this->_internal_preopeninterest();
  uint64_t raw_preopeninterest;
  memcpy(&raw_preopeninterest, &tmp_preopeninterest, sizeof(tmp_preopeninterest));
  if (raw_preopeninterest != 0) {
    total_size += 2 + 8;
  }

  // int64 BuyQtyUnit = 149;
  if (this->_internal_buyqtyunit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_buyqtyunit());
  }

  // int64 SellQtyUnit = 150;
  if (this->_internal_sellqtyunit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sellqtyunit());
  }

  // int64 BuyQtyUpperLimit = 161;
  if (this->_internal_buyqtyupperlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_buyqtyupperlimit());
  }

  // int64 SellQtyUpperLimit = 162;
  if (this->_internal_sellqtyupperlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sellqtyupperlimit());
  }

  // int64 BuyQtyLowerLimit = 163;
  if (this->_internal_buyqtylowerlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_buyqtylowerlimit());
  }

  // int64 SellQtyLowerLimit = 164;
  if (this->_internal_sellqtylowerlimit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sellqtylowerlimit());
  }

  // int32 VCMFlag = 165;
  if (this->_internal_vcmflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_vcmflag());
  }

  // int32 CASFlag = 166;
  if (this->_internal_casflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_casflag());
  }

  // double POSUpperLimitPx = 168;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posupperlimitpx = this->_internal_posupperlimitpx();
  uint64_t raw_posupperlimitpx;
  memcpy(&raw_posupperlimitpx, &tmp_posupperlimitpx, sizeof(tmp_posupperlimitpx));
  if (raw_posupperlimitpx != 0) {
    total_size += 2 + 8;
  }

  // double POSLowerLimitPx = 169;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_poslowerlimitpx = this->_internal_poslowerlimitpx();
  uint64_t raw_poslowerlimitpx;
  memcpy(&raw_poslowerlimitpx, &tmp_poslowerlimitpx, sizeof(tmp_poslowerlimitpx));
  if (raw_poslowerlimitpx != 0) {
    total_size += 2 + 8;
  }

  // int32 POSFlag = 167;
  if (this->_internal_posflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_posflag());
  }

  // int32 DataMultiplePowerOf10 = 172;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDBasicInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDBasicInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDBasicInfo::GetClassData() const { return &_class_data_; }


void MDBasicInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDBasicInfo*>(&to_msg);
  auto& from = static_cast<const MDBasicInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDBasicInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.constantparams_.MergeFrom(from._impl_.constantparams_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_securityid().empty()) {
    _this->_internal_set_securityid(from._internal_securityid());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_chispelling().empty()) {
    _this->_internal_set_chispelling(from._internal_chispelling());
  }
  if (!from._internal_englishname().empty()) {
    _this->_internal_set_englishname(from._internal_englishname());
  }
  if (!from._internal_securitysubtype().empty()) {
    _this->_internal_set_securitysubtype(from._internal_securitysubtype());
  }
  if (!from._internal_listdate().empty()) {
    _this->_internal_set_listdate(from._internal_listdate());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (!from._internal_exchangedate().empty()) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (!from._internal_exchangesymbol().empty()) {
    _this->_internal_set_exchangesymbol(from._internal_exchangesymbol());
  }
  if (!from._internal_hkspreadtablecode().empty()) {
    _this->_internal_set_hkspreadtablecode(from._internal_hkspreadtablecode());
  }
  if (!from._internal_optioncontractid().empty()) {
    _this->_internal_set_optioncontractid(from._internal_optioncontractid());
  }
  if (!from._internal_optioncontractsymbol().empty()) {
    _this->_internal_set_optioncontractsymbol(from._internal_optioncontractsymbol());
  }
  if (!from._internal_optionunderlyingsecurityid().empty()) {
    _this->_internal_set_optionunderlyingsecurityid(from._internal_optionunderlyingsecurityid());
  }
  if (!from._internal_optionunderlyingsymbol().empty()) {
    _this->_internal_set_optionunderlyingsymbol(from._internal_optionunderlyingsymbol());
  }
  if (!from._internal_optionunderlyingtype().empty()) {
    _this->_internal_set_optionunderlyingtype(from._internal_optionunderlyingtype());
  }
  if (!from._internal_optionoptiontype().empty()) {
    _this->_internal_set_optionoptiontype(from._internal_optionoptiontype());
  }
  if (!from._internal_optioncallorput().empty()) {
    _this->_internal_set_optioncallorput(from._internal_optioncallorput());
  }
  if (!from._internal_optionstartdate().empty()) {
    _this->_internal_set_optionstartdate(from._internal_optionstartdate());
  }
  if (!from._internal_optionenddate().empty()) {
    _this->_internal_set_optionenddate(from._internal_optionenddate());
  }
  if (!from._internal_optionexercisedate().empty()) {
    _this->_internal_set_optionexercisedate(from._internal_optionexercisedate());
  }
  if (!from._internal_optiondeliverydate().empty()) {
    _this->_internal_set_optiondeliverydate(from._internal_optiondeliverydate());
  }
  if (!from._internal_optionexpiredate().empty()) {
    _this->_internal_set_optionexpiredate(from._internal_optionexpiredate());
  }
  if (!from._internal_optionupdateversion().empty()) {
    _this->_internal_set_optionupdateversion(from._internal_optionupdateversion());
  }
  if (!from._internal_optionpricelimittype().empty()) {
    _this->_internal_set_optionpricelimittype(from._internal_optionpricelimittype());
  }
  if (!from._internal_optionsecuritystatusflag().empty()) {
    _this->_internal_set_optionsecuritystatusflag(from._internal_optionsecuritystatusflag());
  }
  if (!from._internal_optioncarryinterestdate().empty()) {
    _this->_internal_set_optioncarryinterestdate(from._internal_optioncarryinterestdate());
  }
  if (!from._internal_optionearlyexpiredate().empty()) {
    _this->_internal_set_optionearlyexpiredate(from._internal_optionearlyexpiredate());
  }
  if (!from._internal_optionstrategysecurityid().empty()) {
    _this->_internal_set_optionstrategysecurityid(from._internal_optionstrategysecurityid());
  }
  if (!from._internal_fitradeproducttype().empty()) {
    _this->_internal_set_fitradeproducttype(from._internal_fitradeproducttype());
  }
  if (!from._internal_fisecurityproperty().empty()) {
    _this->_internal_set_fisecurityproperty(from._internal_fisecurityproperty());
  }
  if (!from._internal_fisecuritystatus().empty()) {
    _this->_internal_set_fisecuritystatus(from._internal_fisecuritystatus());
  }
  if (!from._internal_fipledgedsecurityid().empty()) {
    _this->_internal_set_fipledgedsecurityid(from._internal_fipledgedsecurityid());
  }
  if (!from._internal_fiopentime().empty()) {
    _this->_internal_set_fiopentime(from._internal_fiopentime());
  }
  if (!from._internal_ficlosetime().empty()) {
    _this->_internal_set_ficlosetime(from._internal_ficlosetime());
  }
  if (!from._internal_fiissuemode().empty()) {
    _this->_internal_set_fiissuemode(from._internal_fiissuemode());
  }
  if (!from._internal_fiinteresttype().empty()) {
    _this->_internal_set_fiinteresttype(from._internal_fiinteresttype());
  }
  if (!from._internal_fiinterestfrequency().empty()) {
    _this->_internal_set_fiinterestfrequency(from._internal_fiinterestfrequency());
  }
  if (!from._internal_fiissuestartdate().empty()) {
    _this->_internal_set_fiissuestartdate(from._internal_fiissuestartdate());
  }
  if (!from._internal_fiissueenddate().empty()) {
    _this->_internal_set_fiissueenddate(from._internal_fiissueenddate());
  }
  if (!from._internal_filistdate().empty()) {
    _this->_internal_set_filistdate(from._internal_filistdate());
  }
  if (!from._internal_fiexpiredate().empty()) {
    _this->_internal_set_fiexpiredate(from._internal_fiexpiredate());
  }
  if (!from._internal_finationaldebttype().empty()) {
    _this->_internal_set_finationaldebttype(from._internal_finationaldebttype());
  }
  if (!from._internal_fiissuemethod().empty()) {
    _this->_internal_set_fiissuemethod(from._internal_fiissuemethod());
  }
  if (!from._internal_optionlisttype().empty()) {
    _this->_internal_set_optionlisttype(from._internal_optionlisttype());
  }
  if (!from._internal_optiondeliverytype().empty()) {
    _this->_internal_set_optiondeliverytype(from._internal_optiondeliverytype());
  }
  if (!from._internal_optionmarketmakerflag().empty()) {
    _this->_internal_set_optionmarketmakerflag(from._internal_optionmarketmakerflag());
  }
  if (!from._internal_optioncombinationstrategy().empty()) {
    _this->_internal_set_optioncombinationstrategy(from._internal_optioncombinationstrategy());
  }
  if (!from._internal_deliveryyear().empty()) {
    _this->_internal_set_deliveryyear(from._internal_deliveryyear());
  }
  if (!from._internal_deliverymonth().empty()) {
    _this->_internal_set_deliverymonth(from._internal_deliverymonth());
  }
  if (!from._internal_instrumentid().empty()) {
    _this->_internal_set_instrumentid(from._internal_instrumentid());
  }
  if (!from._internal_instrumentname().empty()) {
    _this->_internal_set_instrumentname(from._internal_instrumentname());
  }
  if (!from._internal_exchangeinstid().empty()) {
    _this->_internal_set_exchangeinstid(from._internal_exchangeinstid());
  }
  if (!from._internal_productid().empty()) {
    _this->_internal_set_productid(from._internal_productid());
  }
  if (!from._internal_createdate().empty()) {
    _this->_internal_set_createdate(from._internal_createdate());
  }
  if (!from._internal_expiredate().empty()) {
    _this->_internal_set_expiredate(from._internal_expiredate());
  }
  if (!from._internal_startdelivdate().empty()) {
    _this->_internal_set_startdelivdate(from._internal_startdelivdate());
  }
  if (!from._internal_enddelivdate().empty()) {
    _this->_internal_set_enddelivdate(from._internal_enddelivdate());
  }
  if (!from._internal_positiontype().empty()) {
    _this->_internal_set_positiontype(from._internal_positiontype());
  }
  if (!from._internal_maxmarginsidealgorithm().empty()) {
    _this->_internal_set_maxmarginsidealgorithm(from._internal_maxmarginsidealgorithm());
  }
  if (!from._internal_formersymbol().empty()) {
    _this->_internal_set_formersymbol(from._internal_formersymbol());
  }
  if (!from._internal_delistdate().empty()) {
    _this->_internal_set_delistdate(from._internal_delistdate());
  }
  if (!from._internal_basecontractid().empty()) {
    _this->_internal_set_basecontractid(from._internal_basecontractid());
  }
  if (!from._internal_interestaccrualdate().empty()) {
    _this->_internal_set_interestaccrualdate(from._internal_interestaccrualdate());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_outstandingshare() != 0) {
    _this->_internal_set_outstandingshare(from._internal_outstandingshare());
  }
  if (from._internal_publicfloatsharequantity() != 0) {
    _this->_internal_set_publicfloatsharequantity(from._internal_publicfloatsharequantity());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_maxpx() != 0) {
    _this->_internal_set_maxpx(from._internal_maxpx());
  }
  if (from._internal_minpx() != 0) {
    _this->_internal_set_minpx(from._internal_minpx());
  }
  if (from._internal_lotsize() != 0) {
    _this->_internal_set_lotsize(from._internal_lotsize());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_loanmarginindicator() != 0) {
    _this->_internal_set_loanmarginindicator(from._internal_loanmarginindicator());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ticksize = from._internal_ticksize();
  uint64_t raw_ticksize;
  memcpy(&raw_ticksize, &tmp_ticksize, sizeof(tmp_ticksize));
  if (raw_ticksize != 0) {
    _this->_internal_set_ticksize(from._internal_ticksize());
  }
  if (from._internal_pxaccuracy() != 0) {
    _this->_internal_set_pxaccuracy(from._internal_pxaccuracy());
  }
  if (from._internal_ipoprofitable() != 0) {
    _this->_internal_set_ipoprofitable(from._internal_ipoprofitable());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_presettlepx = from._internal_presettlepx();
  uint64_t raw_presettlepx;
  memcpy(&raw_presettlepx, &tmp_presettlepx, sizeof(tmp_presettlepx));
  if (raw_presettlepx != 0) {
    _this->_internal_set_presettlepx(from._internal_presettlepx());
  }
  if (from._internal_diffrightsindicator() != 0) {
    _this->_internal_set_diffrightsindicator(from._internal_diffrightsindicator());
  }
  if (from._internal_shhkconnect() != 0) {
    _this->_internal_set_shhkconnect(from._internal_shhkconnect());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preiopv = from._internal_preiopv();
  uint64_t raw_preiopv;
  memcpy(&raw_preiopv, &tmp_preiopv, sizeof(tmp_preiopv));
  if (raw_preiopv != 0) {
    _this->_internal_set_preiopv(from._internal_preiopv());
  }
  if (from._internal_optioncontractmultiplierunit() != 0) {
    _this->_internal_set_optioncontractmultiplierunit(from._internal_optioncontractmultiplierunit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionexerciseprice = from._internal_optionexerciseprice();
  uint64_t raw_optionexerciseprice;
  memcpy(&raw_optionexerciseprice, &tmp_optionexerciseprice, sizeof(tmp_optionexerciseprice));
  if (raw_optionexerciseprice != 0) {
    _this->_internal_set_optionexerciseprice(from._internal_optionexerciseprice());
  }
  if (from._internal_optiontotallongposition() != 0) {
    _this->_internal_set_optiontotallongposition(from._internal_optiontotallongposition());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsecurityclosepx = from._internal_optionsecurityclosepx();
  uint64_t raw_optionsecurityclosepx;
  memcpy(&raw_optionsecurityclosepx, &tmp_optionsecurityclosepx, sizeof(tmp_optionsecurityclosepx));
  if (raw_optionsecurityclosepx != 0) {
    _this->_internal_set_optionsecurityclosepx(from._internal_optionsecurityclosepx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsettlprice = from._internal_optionsettlprice();
  uint64_t raw_optionsettlprice;
  memcpy(&raw_optionsettlprice, &tmp_optionsettlprice, sizeof(tmp_optionsettlprice));
  if (raw_optionsettlprice != 0) {
    _this->_internal_set_optionsettlprice(from._internal_optionsettlprice());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionunderlyingclosepx = from._internal_optionunderlyingclosepx();
  uint64_t raw_optionunderlyingclosepx;
  memcpy(&raw_optionunderlyingclosepx, &tmp_optionunderlyingclosepx, sizeof(tmp_optionunderlyingclosepx));
  if (raw_optionunderlyingclosepx != 0) {
    _this->_internal_set_optionunderlyingclosepx(from._internal_optionunderlyingclosepx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optiondailypriceuplimit = from._internal_optiondailypriceuplimit();
  uint64_t raw_optiondailypriceuplimit;
  memcpy(&raw_optiondailypriceuplimit, &tmp_optiondailypriceuplimit, sizeof(tmp_optiondailypriceuplimit));
  if (raw_optiondailypriceuplimit != 0) {
    _this->_internal_set_optiondailypriceuplimit(from._internal_optiondailypriceuplimit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optiondailypricedownlimit = from._internal_optiondailypricedownlimit();
  uint64_t raw_optiondailypricedownlimit;
  memcpy(&raw_optiondailypricedownlimit, &tmp_optiondailypricedownlimit, sizeof(tmp_optiondailypricedownlimit));
  if (raw_optiondailypricedownlimit != 0) {
    _this->_internal_set_optiondailypricedownlimit(from._internal_optiondailypricedownlimit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginunit = from._internal_optionmarginunit();
  uint64_t raw_optionmarginunit;
  memcpy(&raw_optionmarginunit, &tmp_optionmarginunit, sizeof(tmp_optionmarginunit));
  if (raw_optionmarginunit != 0) {
    _this->_internal_set_optionmarginunit(from._internal_optionmarginunit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginratioparam1 = from._internal_optionmarginratioparam1();
  uint64_t raw_optionmarginratioparam1;
  memcpy(&raw_optionmarginratioparam1, &tmp_optionmarginratioparam1, sizeof(tmp_optionmarginratioparam1));
  if (raw_optionmarginratioparam1 != 0) {
    _this->_internal_set_optionmarginratioparam1(from._internal_optionmarginratioparam1());
  }
  if (from._internal_szhkconnect() != 0) {
    _this->_internal_set_szhkconnect(from._internal_szhkconnect());
  }
  if (from._internal_shortsellflag() != 0) {
    _this->_internal_set_shortsellflag(from._internal_shortsellflag());
  }
  if (from._internal_ficrossmarket() != 0) {
    _this->_internal_set_ficrossmarket(from._internal_ficrossmarket());
  }
  if (from._internal_fishortsellflag() != 0) {
    _this->_internal_set_fishortsellflag(from._internal_fishortsellflag());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionmarginratioparam2 = from._internal_optionmarginratioparam2();
  uint64_t raw_optionmarginratioparam2;
  memcpy(&raw_optionmarginratioparam2, &tmp_optionmarginratioparam2, sizeof(tmp_optionmarginratioparam2));
  if (raw_optionmarginratioparam2 != 0) {
    _this->_internal_set_optionmarginratioparam2(from._internal_optionmarginratioparam2());
  }
  if (from._internal_optionroundlot() != 0) {
    _this->_internal_set_optionroundlot(from._internal_optionroundlot());
  }
  if (from._internal_optionlmtordminfloor() != 0) {
    _this->_internal_set_optionlmtordminfloor(from._internal_optionlmtordminfloor());
  }
  if (from._internal_optionlmtordmaxfloor() != 0) {
    _this->_internal_set_optionlmtordmaxfloor(from._internal_optionlmtordmaxfloor());
  }
  if (from._internal_optionmktordminfloor() != 0) {
    _this->_internal_set_optionmktordminfloor(from._internal_optionmktordminfloor());
  }
  if (from._internal_optionmktordmaxfloor() != 0) {
    _this->_internal_set_optionmktordmaxfloor(from._internal_optionmktordmaxfloor());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionticksize = from._internal_optionticksize();
  uint64_t raw_optionticksize;
  memcpy(&raw_optionticksize, &tmp_optionticksize, sizeof(tmp_optionticksize));
  if (raw_optionticksize != 0) {
    _this->_internal_set_optionticksize(from._internal_optionticksize());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fifaceamount = from._internal_fifaceamount();
  uint64_t raw_fifaceamount;
  memcpy(&raw_fifaceamount, &tmp_fifaceamount, sizeof(tmp_fifaceamount));
  if (raw_fifaceamount != 0) {
    _this->_internal_set_fifaceamount(from._internal_fifaceamount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fiissueprice = from._internal_fiissueprice();
  uint64_t raw_fiissueprice;
  memcpy(&raw_fiissueprice, &tmp_fiissueprice, sizeof(tmp_fiissueprice));
  if (raw_fiissueprice != 0) {
    _this->_internal_set_fiissueprice(from._internal_fiissueprice());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_figuaranteedinterestrate = from._internal_figuaranteedinterestrate();
  uint64_t raw_figuaranteedinterestrate;
  memcpy(&raw_figuaranteedinterestrate, &tmp_figuaranteedinterestrate, sizeof(tmp_figuaranteedinterestrate));
  if (raw_figuaranteedinterestrate != 0) {
    _this->_internal_set_figuaranteedinterestrate(from._internal_figuaranteedinterestrate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fibaseinterestrate = from._internal_fibaseinterestrate();
  uint64_t raw_fibaseinterestrate;
  memcpy(&raw_fibaseinterestrate, &tmp_fibaseinterestrate, sizeof(tmp_fibaseinterestrate));
  if (raw_fibaseinterestrate != 0) {
    _this->_internal_set_fibaseinterestrate(from._internal_fibaseinterestrate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fiquotedmargin = from._internal_fiquotedmargin();
  uint64_t raw_fiquotedmargin;
  memcpy(&raw_fiquotedmargin, &tmp_fiquotedmargin, sizeof(tmp_fiquotedmargin));
  if (raw_fiquotedmargin != 0) {
    _this->_internal_set_fiquotedmargin(from._internal_fiquotedmargin());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fitotalissuance = from._internal_fitotalissuance();
  uint64_t raw_fitotalissuance;
  memcpy(&raw_fitotalissuance, &tmp_fitotalissuance, sizeof(tmp_fitotalissuance));
  if (raw_fitotalissuance != 0) {
    _this->_internal_set_fitotalissuance(from._internal_fitotalissuance());
  }
  if (from._internal_fitimelimit() != 0) {
    _this->_internal_set_fitimelimit(from._internal_fitimelimit());
  }
  if (from._internal_optionadjusttimes() != 0) {
    _this->_internal_set_optionadjusttimes(from._internal_optionadjusttimes());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fitotalshortsellquota = from._internal_fitotalshortsellquota();
  uint64_t raw_fitotalshortsellquota;
  memcpy(&raw_fitotalshortsellquota, &tmp_fitotalshortsellquota, sizeof(tmp_fitotalshortsellquota));
  if (raw_fitotalshortsellquota != 0) {
    _this->_internal_set_fitotalshortsellquota(from._internal_fitotalshortsellquota());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fidealershortsellquota = from._internal_fidealershortsellquota();
  uint64_t raw_fidealershortsellquota;
  memcpy(&raw_fidealershortsellquota, &tmp_fidealershortsellquota, sizeof(tmp_fidealershortsellquota));
  if (raw_fidealershortsellquota != 0) {
    _this->_internal_set_fidealershortsellquota(from._internal_fidealershortsellquota());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fipreclosepx = from._internal_fipreclosepx();
  uint64_t raw_fipreclosepx;
  memcpy(&raw_fipreclosepx, &tmp_fipreclosepx, sizeof(tmp_fipreclosepx));
  if (raw_fipreclosepx != 0) {
    _this->_internal_set_fipreclosepx(from._internal_fipreclosepx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fipreweightedpx = from._internal_fipreweightedpx();
  uint64_t raw_fipreweightedpx;
  memcpy(&raw_fipreweightedpx, &tmp_fipreweightedpx, sizeof(tmp_fipreweightedpx));
  if (raw_fipreweightedpx != 0) {
    _this->_internal_set_fipreweightedpx(from._internal_fipreweightedpx());
  }
  if (from._internal_optioncontractposition() != 0) {
    _this->_internal_set_optioncontractposition(from._internal_optioncontractposition());
  }
  if (from._internal_optionbuyqtyupperlimit() != 0) {
    _this->_internal_set_optionbuyqtyupperlimit(from._internal_optionbuyqtyupperlimit());
  }
  if (from._internal_optionsellqtyupperlimit() != 0) {
    _this->_internal_set_optionsellqtyupperlimit(from._internal_optionsellqtyupperlimit());
  }
  if (from._internal_optionmarketorderbuyqtyupperlimit() != 0) {
    _this->_internal_set_optionmarketorderbuyqtyupperlimit(from._internal_optionmarketorderbuyqtyupperlimit());
  }
  if (from._internal_optionmarketordersellqtyupperlimit() != 0) {
    _this->_internal_set_optionmarketordersellqtyupperlimit(from._internal_optionmarketordersellqtyupperlimit());
  }
  if (from._internal_optionquoteorderbuyqtyupperlimit() != 0) {
    _this->_internal_set_optionquoteorderbuyqtyupperlimit(from._internal_optionquoteorderbuyqtyupperlimit());
  }
  if (from._internal_optionquoteordersellqtyupperlimit() != 0) {
    _this->_internal_set_optionquoteordersellqtyupperlimit(from._internal_optionquoteordersellqtyupperlimit());
  }
  if (from._internal_optionbuyqtyunit() != 0) {
    _this->_internal_set_optionbuyqtyunit(from._internal_optionbuyqtyunit());
  }
  if (from._internal_optionsellqtyunit() != 0) {
    _this->_internal_set_optionsellqtyunit(from._internal_optionsellqtyunit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionlastsellmargin = from._internal_optionlastsellmargin();
  uint64_t raw_optionlastsellmargin;
  memcpy(&raw_optionlastsellmargin, &tmp_optionlastsellmargin, sizeof(tmp_optionlastsellmargin));
  if (raw_optionlastsellmargin != 0) {
    _this->_internal_set_optionlastsellmargin(from._internal_optionlastsellmargin());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optionsellmargin = from._internal_optionsellmargin();
  uint64_t raw_optionsellmargin;
  memcpy(&raw_optionsellmargin, &tmp_optionsellmargin, sizeof(tmp_optionsellmargin));
  if (raw_optionsellmargin != 0) {
    _this->_internal_set_optionsellmargin(from._internal_optionsellmargin());
  }
  if (from._internal_maxmarketordervolume() != 0) {
    _this->_internal_set_maxmarketordervolume(from._internal_maxmarketordervolume());
  }
  if (from._internal_minmarketordervolume() != 0) {
    _this->_internal_set_minmarketordervolume(from._internal_minmarketordervolume());
  }
  if (from._internal_maxlimitordervolume() != 0) {
    _this->_internal_set_maxlimitordervolume(from._internal_maxlimitordervolume());
  }
  if (from._internal_minlimitordervolume() != 0) {
    _this->_internal_set_minlimitordervolume(from._internal_minlimitordervolume());
  }
  if (from._internal_volumemultiple() != 0) {
    _this->_internal_set_volumemultiple(from._internal_volumemultiple());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longmarginratio = from._internal_longmarginratio();
  uint64_t raw_longmarginratio;
  memcpy(&raw_longmarginratio, &tmp_longmarginratio, sizeof(tmp_longmarginratio));
  if (raw_longmarginratio != 0) {
    _this->_internal_set_longmarginratio(from._internal_longmarginratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shortmarginratio = from._internal_shortmarginratio();
  uint64_t raw_shortmarginratio;
  memcpy(&raw_shortmarginratio, &tmp_shortmarginratio, sizeof(tmp_shortmarginratio));
  if (raw_shortmarginratio != 0) {
    _this->_internal_set_shortmarginratio(from._internal_shortmarginratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_strikeprice = from._internal_strikeprice();
  uint64_t raw_strikeprice;
  memcpy(&raw_strikeprice, &tmp_strikeprice, sizeof(tmp_strikeprice));
  if (raw_strikeprice != 0) {
    _this->_internal_set_strikeprice(from._internal_strikeprice());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preopeninterest = from._internal_preopeninterest();
  uint64_t raw_preopeninterest;
  memcpy(&raw_preopeninterest, &tmp_preopeninterest, sizeof(tmp_preopeninterest));
  if (raw_preopeninterest != 0) {
    _this->_internal_set_preopeninterest(from._internal_preopeninterest());
  }
  if (from._internal_buyqtyunit() != 0) {
    _this->_internal_set_buyqtyunit(from._internal_buyqtyunit());
  }
  if (from._internal_sellqtyunit() != 0) {
    _this->_internal_set_sellqtyunit(from._internal_sellqtyunit());
  }
  if (from._internal_buyqtyupperlimit() != 0) {
    _this->_internal_set_buyqtyupperlimit(from._internal_buyqtyupperlimit());
  }
  if (from._internal_sellqtyupperlimit() != 0) {
    _this->_internal_set_sellqtyupperlimit(from._internal_sellqtyupperlimit());
  }
  if (from._internal_buyqtylowerlimit() != 0) {
    _this->_internal_set_buyqtylowerlimit(from._internal_buyqtylowerlimit());
  }
  if (from._internal_sellqtylowerlimit() != 0) {
    _this->_internal_set_sellqtylowerlimit(from._internal_sellqtylowerlimit());
  }
  if (from._internal_vcmflag() != 0) {
    _this->_internal_set_vcmflag(from._internal_vcmflag());
  }
  if (from._internal_casflag() != 0) {
    _this->_internal_set_casflag(from._internal_casflag());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posupperlimitpx = from._internal_posupperlimitpx();
  uint64_t raw_posupperlimitpx;
  memcpy(&raw_posupperlimitpx, &tmp_posupperlimitpx, sizeof(tmp_posupperlimitpx));
  if (raw_posupperlimitpx != 0) {
    _this->_internal_set_posupperlimitpx(from._internal_posupperlimitpx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_poslowerlimitpx = from._internal_poslowerlimitpx();
  uint64_t raw_poslowerlimitpx;
  memcpy(&raw_poslowerlimitpx, &tmp_poslowerlimitpx, sizeof(tmp_poslowerlimitpx));
  if (raw_poslowerlimitpx != 0) {
    _this->_internal_set_poslowerlimitpx(from._internal_poslowerlimitpx());
  }
  if (from._internal_posflag() != 0) {
    _this->_internal_set_posflag(from._internal_posflag());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDBasicInfo::CopyFrom(const MDBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDBasicInfo::IsInitialized() const {
  return true;
}

void MDBasicInfo::InternalSwap(MDBasicInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.constantparams_.InternalSwap(&other->_impl_.constantparams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securityid_, lhs_arena,
      &other->_impl_.securityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chispelling_, lhs_arena,
      &other->_impl_.chispelling_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.englishname_, lhs_arena,
      &other->_impl_.englishname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securitysubtype_, lhs_arena,
      &other->_impl_.securitysubtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.listdate_, lhs_arena,
      &other->_impl_.listdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchangedate_, lhs_arena,
      &other->_impl_.exchangedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchangesymbol_, lhs_arena,
      &other->_impl_.exchangesymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hkspreadtablecode_, lhs_arena,
      &other->_impl_.hkspreadtablecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optioncontractid_, lhs_arena,
      &other->_impl_.optioncontractid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optioncontractsymbol_, lhs_arena,
      &other->_impl_.optioncontractsymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionunderlyingsecurityid_, lhs_arena,
      &other->_impl_.optionunderlyingsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionunderlyingsymbol_, lhs_arena,
      &other->_impl_.optionunderlyingsymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionunderlyingtype_, lhs_arena,
      &other->_impl_.optionunderlyingtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionoptiontype_, lhs_arena,
      &other->_impl_.optionoptiontype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optioncallorput_, lhs_arena,
      &other->_impl_.optioncallorput_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionstartdate_, lhs_arena,
      &other->_impl_.optionstartdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionenddate_, lhs_arena,
      &other->_impl_.optionenddate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionexercisedate_, lhs_arena,
      &other->_impl_.optionexercisedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optiondeliverydate_, lhs_arena,
      &other->_impl_.optiondeliverydate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionexpiredate_, lhs_arena,
      &other->_impl_.optionexpiredate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionupdateversion_, lhs_arena,
      &other->_impl_.optionupdateversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionpricelimittype_, lhs_arena,
      &other->_impl_.optionpricelimittype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionsecuritystatusflag_, lhs_arena,
      &other->_impl_.optionsecuritystatusflag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optioncarryinterestdate_, lhs_arena,
      &other->_impl_.optioncarryinterestdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionearlyexpiredate_, lhs_arena,
      &other->_impl_.optionearlyexpiredate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionstrategysecurityid_, lhs_arena,
      &other->_impl_.optionstrategysecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fitradeproducttype_, lhs_arena,
      &other->_impl_.fitradeproducttype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fisecurityproperty_, lhs_arena,
      &other->_impl_.fisecurityproperty_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fisecuritystatus_, lhs_arena,
      &other->_impl_.fisecuritystatus_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fipledgedsecurityid_, lhs_arena,
      &other->_impl_.fipledgedsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fiopentime_, lhs_arena,
      &other->_impl_.fiopentime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ficlosetime_, lhs_arena,
      &other->_impl_.ficlosetime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fiissuemode_, lhs_arena,
      &other->_impl_.fiissuemode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fiinteresttype_, lhs_arena,
      &other->_impl_.fiinteresttype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fiinterestfrequency_, lhs_arena,
      &other->_impl_.fiinterestfrequency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fiissuestartdate_, lhs_arena,
      &other->_impl_.fiissuestartdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fiissueenddate_, lhs_arena,
      &other->_impl_.fiissueenddate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filistdate_, lhs_arena,
      &other->_impl_.filistdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fiexpiredate_, lhs_arena,
      &other->_impl_.fiexpiredate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.finationaldebttype_, lhs_arena,
      &other->_impl_.finationaldebttype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fiissuemethod_, lhs_arena,
      &other->_impl_.fiissuemethod_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionlisttype_, lhs_arena,
      &other->_impl_.optionlisttype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optiondeliverytype_, lhs_arena,
      &other->_impl_.optiondeliverytype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionmarketmakerflag_, lhs_arena,
      &other->_impl_.optionmarketmakerflag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optioncombinationstrategy_, lhs_arena,
      &other->_impl_.optioncombinationstrategy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deliveryyear_, lhs_arena,
      &other->_impl_.deliveryyear_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deliverymonth_, lhs_arena,
      &other->_impl_.deliverymonth_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrumentid_, lhs_arena,
      &other->_impl_.instrumentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrumentname_, lhs_arena,
      &other->_impl_.instrumentname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchangeinstid_, lhs_arena,
      &other->_impl_.exchangeinstid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.productid_, lhs_arena,
      &other->_impl_.productid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createdate_, lhs_arena,
      &other->_impl_.createdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expiredate_, lhs_arena,
      &other->_impl_.expiredate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.startdelivdate_, lhs_arena,
      &other->_impl_.startdelivdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enddelivdate_, lhs_arena,
      &other->_impl_.enddelivdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.positiontype_, lhs_arena,
      &other->_impl_.positiontype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.maxmarginsidealgorithm_, lhs_arena,
      &other->_impl_.maxmarginsidealgorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.formersymbol_, lhs_arena,
      &other->_impl_.formersymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delistdate_, lhs_arena,
      &other->_impl_.delistdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basecontractid_, lhs_arena,
      &other->_impl_.basecontractid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interestaccrualdate_, lhs_arena,
      &other->_impl_.interestaccrualdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDBasicInfo, _impl_.datamultiplepowerof10_)
      + sizeof(MDBasicInfo::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDBasicInfo, _impl_.securityidsource_)>(
          reinterpret_cast<char*>(&_impl_.securityidsource_),
          reinterpret_cast<char*>(&other->_impl_.securityidsource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDBasicInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDBasicInfo_2eproto_getter, &descriptor_table_MDBasicInfo_2eproto_once,
      file_level_metadata_MDBasicInfo_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDBasicInfo*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDBasicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDBasicInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
