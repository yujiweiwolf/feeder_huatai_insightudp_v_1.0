// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCfetsFxQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDCfetsFxQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDCfetsFxQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDCfetsFxQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDCfetsFxQuote_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDCfetsFxQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDCfetsFxQuote;
struct MDCfetsFxQuoteDefaultTypeInternal;
extern MDCfetsFxQuoteDefaultTypeInternal _MDCfetsFxQuote_default_instance_;
class OptionFxQuote;
struct OptionFxQuoteDefaultTypeInternal;
extern OptionFxQuoteDefaultTypeInternal _OptionFxQuote_default_instance_;
class SwpSptNdfFowFxQuote;
struct SwpSptNdfFowFxQuoteDefaultTypeInternal;
extern SwpSptNdfFowFxQuoteDefaultTypeInternal _SwpSptNdfFowFxQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDCfetsFxQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCfetsFxQuote>(Arena*);
template<> ::com::htsc::mdc::insight::model::OptionFxQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::OptionFxQuote>(Arena*);
template<> ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCfetsFxQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCfetsFxQuote) */ {
 public:
  inline MDCfetsFxQuote() : MDCfetsFxQuote(nullptr) {}
  ~MDCfetsFxQuote() override;
  explicit PROTOBUF_CONSTEXPR MDCfetsFxQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDCfetsFxQuote(const MDCfetsFxQuote& from);
  MDCfetsFxQuote(MDCfetsFxQuote&& from) noexcept
    : MDCfetsFxQuote() {
    *this = ::std::move(from);
  }

  inline MDCfetsFxQuote& operator=(const MDCfetsFxQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCfetsFxQuote& operator=(MDCfetsFxQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDCfetsFxQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDCfetsFxQuote* internal_default_instance() {
    return reinterpret_cast<const MDCfetsFxQuote*>(
               &_MDCfetsFxQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDCfetsFxQuote& a, MDCfetsFxQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDCfetsFxQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDCfetsFxQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDCfetsFxQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDCfetsFxQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDCfetsFxQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDCfetsFxQuote& from) {
    MDCfetsFxQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCfetsFxQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCfetsFxQuote";
  }
  protected:
  explicit MDCfetsFxQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kSecuritySubTypeFieldNumber = 7,
    kTransactTimeFieldNumber = 15,
    kSpotFxQuoteFieldNumber = 9,
    kForwardFxQuoteFieldNumber = 10,
    kNonDeliverableForwardsFxQuoteFieldNumber = 11,
    kSwapFxQuoteFieldNumber = 12,
    kOptionFxQuoteFieldNumber = 13,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kForexQuoteTypeFieldNumber = 8,
    kDataMultiplePowerOf10FieldNumber = 14,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string SecuritySubType = 7;
  void clear_securitysubtype();
  const std::string& securitysubtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitysubtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitysubtype();
  PROTOBUF_NODISCARD std::string* release_securitysubtype();
  void set_allocated_securitysubtype(std::string* securitysubtype);
  private:
  const std::string& _internal_securitysubtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitysubtype(const std::string& value);
  std::string* _internal_mutable_securitysubtype();
  public:

  // string TransactTime = 15;
  void clear_transacttime();
  const std::string& transacttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transacttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transacttime();
  PROTOBUF_NODISCARD std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote spotFxQuote = 9;
  bool has_spotfxquote() const;
  private:
  bool _internal_has_spotfxquote() const;
  public:
  void clear_spotfxquote();
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& spotfxquote() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* release_spotfxquote();
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* mutable_spotfxquote();
  void set_allocated_spotfxquote(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* spotfxquote);
  private:
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& _internal_spotfxquote() const;
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* _internal_mutable_spotfxquote();
  public:
  void unsafe_arena_set_allocated_spotfxquote(
      ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* spotfxquote);
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* unsafe_arena_release_spotfxquote();

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote forwardFxQuote = 10;
  bool has_forwardfxquote() const;
  private:
  bool _internal_has_forwardfxquote() const;
  public:
  void clear_forwardfxquote();
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& forwardfxquote() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* release_forwardfxquote();
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* mutable_forwardfxquote();
  void set_allocated_forwardfxquote(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* forwardfxquote);
  private:
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& _internal_forwardfxquote() const;
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* _internal_mutable_forwardfxquote();
  public:
  void unsafe_arena_set_allocated_forwardfxquote(
      ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* forwardfxquote);
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* unsafe_arena_release_forwardfxquote();

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote nonDeliverableForwardsFxQuote = 11;
  bool has_nondeliverableforwardsfxquote() const;
  private:
  bool _internal_has_nondeliverableforwardsfxquote() const;
  public:
  void clear_nondeliverableforwardsfxquote();
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& nondeliverableforwardsfxquote() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* release_nondeliverableforwardsfxquote();
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* mutable_nondeliverableforwardsfxquote();
  void set_allocated_nondeliverableforwardsfxquote(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* nondeliverableforwardsfxquote);
  private:
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& _internal_nondeliverableforwardsfxquote() const;
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* _internal_mutable_nondeliverableforwardsfxquote();
  public:
  void unsafe_arena_set_allocated_nondeliverableforwardsfxquote(
      ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* nondeliverableforwardsfxquote);
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* unsafe_arena_release_nondeliverableforwardsfxquote();

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote swapFxQuote = 12;
  bool has_swapfxquote() const;
  private:
  bool _internal_has_swapfxquote() const;
  public:
  void clear_swapfxquote();
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& swapfxquote() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* release_swapfxquote();
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* mutable_swapfxquote();
  void set_allocated_swapfxquote(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* swapfxquote);
  private:
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& _internal_swapfxquote() const;
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* _internal_mutable_swapfxquote();
  public:
  void unsafe_arena_set_allocated_swapfxquote(
      ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* swapfxquote);
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* unsafe_arena_release_swapfxquote();

  // .com.htsc.mdc.insight.model.OptionFxQuote optionFxQuote = 13;
  bool has_optionfxquote() const;
  private:
  bool _internal_has_optionfxquote() const;
  public:
  void clear_optionfxquote();
  const ::com::htsc::mdc::insight::model::OptionFxQuote& optionfxquote() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::OptionFxQuote* release_optionfxquote();
  ::com::htsc::mdc::insight::model::OptionFxQuote* mutable_optionfxquote();
  void set_allocated_optionfxquote(::com::htsc::mdc::insight::model::OptionFxQuote* optionfxquote);
  private:
  const ::com::htsc::mdc::insight::model::OptionFxQuote& _internal_optionfxquote() const;
  ::com::htsc::mdc::insight::model::OptionFxQuote* _internal_mutable_optionfxquote();
  public:
  void unsafe_arena_set_allocated_optionfxquote(
      ::com::htsc::mdc::insight::model::OptionFxQuote* optionfxquote);
  ::com::htsc::mdc::insight::model::OptionFxQuote* unsafe_arena_release_optionfxquote();

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ForexQuoteType = 8;
  void clear_forexquotetype();
  int32_t forexquotetype() const;
  void set_forexquotetype(int32_t value);
  private:
  int32_t _internal_forexquotetype() const;
  void _internal_set_forexquotetype(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 14;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCfetsFxQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitysubtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* spotfxquote_;
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* forwardfxquote_;
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* nondeliverableforwardsfxquote_;
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* swapfxquote_;
    ::com::htsc::mdc::insight::model::OptionFxQuote* optionfxquote_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t forexquotetype_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsFxQuote_2eproto;
};
// -------------------------------------------------------------------

class SwpSptNdfFowFxQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote) */ {
 public:
  inline SwpSptNdfFowFxQuote() : SwpSptNdfFowFxQuote(nullptr) {}
  ~SwpSptNdfFowFxQuote() override;
  explicit PROTOBUF_CONSTEXPR SwpSptNdfFowFxQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwpSptNdfFowFxQuote(const SwpSptNdfFowFxQuote& from);
  SwpSptNdfFowFxQuote(SwpSptNdfFowFxQuote&& from) noexcept
    : SwpSptNdfFowFxQuote() {
    *this = ::std::move(from);
  }

  inline SwpSptNdfFowFxQuote& operator=(const SwpSptNdfFowFxQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwpSptNdfFowFxQuote& operator=(SwpSptNdfFowFxQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwpSptNdfFowFxQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwpSptNdfFowFxQuote* internal_default_instance() {
    return reinterpret_cast<const SwpSptNdfFowFxQuote*>(
               &_SwpSptNdfFowFxQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SwpSptNdfFowFxQuote& a, SwpSptNdfFowFxQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(SwpSptNdfFowFxQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwpSptNdfFowFxQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwpSptNdfFowFxQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwpSptNdfFowFxQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwpSptNdfFowFxQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwpSptNdfFowFxQuote& from) {
    SwpSptNdfFowFxQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwpSptNdfFowFxQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote";
  }
  protected:
  explicit SwpSptNdfFowFxQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBestRateDateBuyFieldNumber = 1,
    kBestRateTimeBuyFieldNumber = 2,
    kBestRateDateSellFieldNumber = 3,
    kBestRateTimeSellFieldNumber = 4,
    kRateLiquidProviderBuy1FieldNumber = 7,
    kRateLiquidProviderBuy2FieldNumber = 8,
    kRateLiquidProviderBuy3FieldNumber = 9,
    kRateLiquidProviderBuy4FieldNumber = 10,
    kRateLiquidProviderBuy5FieldNumber = 11,
    kRateLiquidProviderSell1FieldNumber = 12,
    kRateLiquidProviderSell2FieldNumber = 13,
    kRateLiquidProviderSell3FieldNumber = 14,
    kRateLiquidProviderSell4FieldNumber = 15,
    kRateLiquidProviderSell5FieldNumber = 16,
    kLegSignFieldNumber = 17,
    kBestRateBuyFieldNumber = 5,
    kBestRateSellFieldNumber = 6,
  };
  // string BestRateDateBuy = 1;
  void clear_bestratedatebuy();
  const std::string& bestratedatebuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bestratedatebuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bestratedatebuy();
  PROTOBUF_NODISCARD std::string* release_bestratedatebuy();
  void set_allocated_bestratedatebuy(std::string* bestratedatebuy);
  private:
  const std::string& _internal_bestratedatebuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bestratedatebuy(const std::string& value);
  std::string* _internal_mutable_bestratedatebuy();
  public:

  // string BestRateTimeBuy = 2;
  void clear_bestratetimebuy();
  const std::string& bestratetimebuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bestratetimebuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bestratetimebuy();
  PROTOBUF_NODISCARD std::string* release_bestratetimebuy();
  void set_allocated_bestratetimebuy(std::string* bestratetimebuy);
  private:
  const std::string& _internal_bestratetimebuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bestratetimebuy(const std::string& value);
  std::string* _internal_mutable_bestratetimebuy();
  public:

  // string BestRateDateSell = 3;
  void clear_bestratedatesell();
  const std::string& bestratedatesell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bestratedatesell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bestratedatesell();
  PROTOBUF_NODISCARD std::string* release_bestratedatesell();
  void set_allocated_bestratedatesell(std::string* bestratedatesell);
  private:
  const std::string& _internal_bestratedatesell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bestratedatesell(const std::string& value);
  std::string* _internal_mutable_bestratedatesell();
  public:

  // string BestRateTimeSell = 4;
  void clear_bestratetimesell();
  const std::string& bestratetimesell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bestratetimesell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bestratetimesell();
  PROTOBUF_NODISCARD std::string* release_bestratetimesell();
  void set_allocated_bestratetimesell(std::string* bestratetimesell);
  private:
  const std::string& _internal_bestratetimesell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bestratetimesell(const std::string& value);
  std::string* _internal_mutable_bestratetimesell();
  public:

  // string RateLiquidProviderBuy1 = 7;
  void clear_rateliquidproviderbuy1();
  const std::string& rateliquidproviderbuy1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidproviderbuy1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidproviderbuy1();
  PROTOBUF_NODISCARD std::string* release_rateliquidproviderbuy1();
  void set_allocated_rateliquidproviderbuy1(std::string* rateliquidproviderbuy1);
  private:
  const std::string& _internal_rateliquidproviderbuy1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidproviderbuy1(const std::string& value);
  std::string* _internal_mutable_rateliquidproviderbuy1();
  public:

  // string RateLiquidProviderBuy2 = 8;
  void clear_rateliquidproviderbuy2();
  const std::string& rateliquidproviderbuy2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidproviderbuy2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidproviderbuy2();
  PROTOBUF_NODISCARD std::string* release_rateliquidproviderbuy2();
  void set_allocated_rateliquidproviderbuy2(std::string* rateliquidproviderbuy2);
  private:
  const std::string& _internal_rateliquidproviderbuy2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidproviderbuy2(const std::string& value);
  std::string* _internal_mutable_rateliquidproviderbuy2();
  public:

  // string RateLiquidProviderBuy3 = 9;
  void clear_rateliquidproviderbuy3();
  const std::string& rateliquidproviderbuy3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidproviderbuy3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidproviderbuy3();
  PROTOBUF_NODISCARD std::string* release_rateliquidproviderbuy3();
  void set_allocated_rateliquidproviderbuy3(std::string* rateliquidproviderbuy3);
  private:
  const std::string& _internal_rateliquidproviderbuy3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidproviderbuy3(const std::string& value);
  std::string* _internal_mutable_rateliquidproviderbuy3();
  public:

  // string RateLiquidProviderBuy4 = 10;
  void clear_rateliquidproviderbuy4();
  const std::string& rateliquidproviderbuy4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidproviderbuy4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidproviderbuy4();
  PROTOBUF_NODISCARD std::string* release_rateliquidproviderbuy4();
  void set_allocated_rateliquidproviderbuy4(std::string* rateliquidproviderbuy4);
  private:
  const std::string& _internal_rateliquidproviderbuy4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidproviderbuy4(const std::string& value);
  std::string* _internal_mutable_rateliquidproviderbuy4();
  public:

  // string RateLiquidProviderBuy5 = 11;
  void clear_rateliquidproviderbuy5();
  const std::string& rateliquidproviderbuy5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidproviderbuy5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidproviderbuy5();
  PROTOBUF_NODISCARD std::string* release_rateliquidproviderbuy5();
  void set_allocated_rateliquidproviderbuy5(std::string* rateliquidproviderbuy5);
  private:
  const std::string& _internal_rateliquidproviderbuy5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidproviderbuy5(const std::string& value);
  std::string* _internal_mutable_rateliquidproviderbuy5();
  public:

  // string RateLiquidProviderSell1 = 12;
  void clear_rateliquidprovidersell1();
  const std::string& rateliquidprovidersell1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidprovidersell1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidprovidersell1();
  PROTOBUF_NODISCARD std::string* release_rateliquidprovidersell1();
  void set_allocated_rateliquidprovidersell1(std::string* rateliquidprovidersell1);
  private:
  const std::string& _internal_rateliquidprovidersell1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidprovidersell1(const std::string& value);
  std::string* _internal_mutable_rateliquidprovidersell1();
  public:

  // string RateLiquidProviderSell2 = 13;
  void clear_rateliquidprovidersell2();
  const std::string& rateliquidprovidersell2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidprovidersell2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidprovidersell2();
  PROTOBUF_NODISCARD std::string* release_rateliquidprovidersell2();
  void set_allocated_rateliquidprovidersell2(std::string* rateliquidprovidersell2);
  private:
  const std::string& _internal_rateliquidprovidersell2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidprovidersell2(const std::string& value);
  std::string* _internal_mutable_rateliquidprovidersell2();
  public:

  // string RateLiquidProviderSell3 = 14;
  void clear_rateliquidprovidersell3();
  const std::string& rateliquidprovidersell3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidprovidersell3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidprovidersell3();
  PROTOBUF_NODISCARD std::string* release_rateliquidprovidersell3();
  void set_allocated_rateliquidprovidersell3(std::string* rateliquidprovidersell3);
  private:
  const std::string& _internal_rateliquidprovidersell3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidprovidersell3(const std::string& value);
  std::string* _internal_mutable_rateliquidprovidersell3();
  public:

  // string RateLiquidProviderSell4 = 15;
  void clear_rateliquidprovidersell4();
  const std::string& rateliquidprovidersell4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidprovidersell4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidprovidersell4();
  PROTOBUF_NODISCARD std::string* release_rateliquidprovidersell4();
  void set_allocated_rateliquidprovidersell4(std::string* rateliquidprovidersell4);
  private:
  const std::string& _internal_rateliquidprovidersell4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidprovidersell4(const std::string& value);
  std::string* _internal_mutable_rateliquidprovidersell4();
  public:

  // string RateLiquidProviderSell5 = 16;
  void clear_rateliquidprovidersell5();
  const std::string& rateliquidprovidersell5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rateliquidprovidersell5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rateliquidprovidersell5();
  PROTOBUF_NODISCARD std::string* release_rateliquidprovidersell5();
  void set_allocated_rateliquidprovidersell5(std::string* rateliquidprovidersell5);
  private:
  const std::string& _internal_rateliquidprovidersell5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rateliquidprovidersell5(const std::string& value);
  std::string* _internal_mutable_rateliquidprovidersell5();
  public:

  // string LegSign = 17;
  void clear_legsign();
  const std::string& legsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legsign();
  PROTOBUF_NODISCARD std::string* release_legsign();
  void set_allocated_legsign(std::string* legsign);
  private:
  const std::string& _internal_legsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legsign(const std::string& value);
  std::string* _internal_mutable_legsign();
  public:

  // int64 BestRateBuy = 5;
  void clear_bestratebuy();
  int64_t bestratebuy() const;
  void set_bestratebuy(int64_t value);
  private:
  int64_t _internal_bestratebuy() const;
  void _internal_set_bestratebuy(int64_t value);
  public:

  // int64 BestRateSell = 6;
  void clear_bestratesell();
  int64_t bestratesell() const;
  void set_bestratesell(int64_t value);
  private:
  int64_t _internal_bestratesell() const;
  void _internal_set_bestratesell(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestratedatebuy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestratetimebuy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestratedatesell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestratetimesell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidproviderbuy1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidproviderbuy2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidproviderbuy3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidproviderbuy4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidproviderbuy5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidprovidersell1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidprovidersell2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidprovidersell3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidprovidersell4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rateliquidprovidersell5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legsign_;
    int64_t bestratebuy_;
    int64_t bestratesell_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsFxQuote_2eproto;
};
// -------------------------------------------------------------------

class OptionFxQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.OptionFxQuote) */ {
 public:
  inline OptionFxQuote() : OptionFxQuote(nullptr) {}
  ~OptionFxQuote() override;
  explicit PROTOBUF_CONSTEXPR OptionFxQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionFxQuote(const OptionFxQuote& from);
  OptionFxQuote(OptionFxQuote&& from) noexcept
    : OptionFxQuote() {
    *this = ::std::move(from);
  }

  inline OptionFxQuote& operator=(const OptionFxQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionFxQuote& operator=(OptionFxQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionFxQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionFxQuote* internal_default_instance() {
    return reinterpret_cast<const OptionFxQuote*>(
               &_OptionFxQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OptionFxQuote& a, OptionFxQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionFxQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionFxQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionFxQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionFxQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionFxQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionFxQuote& from) {
    OptionFxQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionFxQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.OptionFxQuote";
  }
  protected:
  explicit OptionFxQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBestRateDateBuyFieldNumber = 1,
    kBestRateTimeBuyFieldNumber = 2,
    kBestRateDateSellFieldNumber = 3,
    kBestRateTimeSellFieldNumber = 4,
    kVolatilitySurfaceFieldNumber = 7,
    kTenorBuyFieldNumber = 8,
    kTenorSellFieldNumber = 9,
    kMakerInstitutionBuyFieldNumber = 10,
    kMakerInstitutionSellFieldNumber = 11,
    kBestRateBuyFieldNumber = 5,
    kBestRateSellFieldNumber = 6,
  };
  // string BestRateDateBuy = 1;
  void clear_bestratedatebuy();
  const std::string& bestratedatebuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bestratedatebuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bestratedatebuy();
  PROTOBUF_NODISCARD std::string* release_bestratedatebuy();
  void set_allocated_bestratedatebuy(std::string* bestratedatebuy);
  private:
  const std::string& _internal_bestratedatebuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bestratedatebuy(const std::string& value);
  std::string* _internal_mutable_bestratedatebuy();
  public:

  // string BestRateTimeBuy = 2;
  void clear_bestratetimebuy();
  const std::string& bestratetimebuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bestratetimebuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bestratetimebuy();
  PROTOBUF_NODISCARD std::string* release_bestratetimebuy();
  void set_allocated_bestratetimebuy(std::string* bestratetimebuy);
  private:
  const std::string& _internal_bestratetimebuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bestratetimebuy(const std::string& value);
  std::string* _internal_mutable_bestratetimebuy();
  public:

  // string BestRateDateSell = 3;
  void clear_bestratedatesell();
  const std::string& bestratedatesell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bestratedatesell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bestratedatesell();
  PROTOBUF_NODISCARD std::string* release_bestratedatesell();
  void set_allocated_bestratedatesell(std::string* bestratedatesell);
  private:
  const std::string& _internal_bestratedatesell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bestratedatesell(const std::string& value);
  std::string* _internal_mutable_bestratedatesell();
  public:

  // string BestRateTimeSell = 4;
  void clear_bestratetimesell();
  const std::string& bestratetimesell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bestratetimesell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bestratetimesell();
  PROTOBUF_NODISCARD std::string* release_bestratetimesell();
  void set_allocated_bestratetimesell(std::string* bestratetimesell);
  private:
  const std::string& _internal_bestratetimesell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bestratetimesell(const std::string& value);
  std::string* _internal_mutable_bestratetimesell();
  public:

  // string VolatilitySurface = 7;
  void clear_volatilitysurface();
  const std::string& volatilitysurface() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volatilitysurface(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volatilitysurface();
  PROTOBUF_NODISCARD std::string* release_volatilitysurface();
  void set_allocated_volatilitysurface(std::string* volatilitysurface);
  private:
  const std::string& _internal_volatilitysurface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volatilitysurface(const std::string& value);
  std::string* _internal_mutable_volatilitysurface();
  public:

  // string TenorBuy = 8;
  void clear_tenorbuy();
  const std::string& tenorbuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tenorbuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tenorbuy();
  PROTOBUF_NODISCARD std::string* release_tenorbuy();
  void set_allocated_tenorbuy(std::string* tenorbuy);
  private:
  const std::string& _internal_tenorbuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tenorbuy(const std::string& value);
  std::string* _internal_mutable_tenorbuy();
  public:

  // string TenorSell = 9;
  void clear_tenorsell();
  const std::string& tenorsell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tenorsell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tenorsell();
  PROTOBUF_NODISCARD std::string* release_tenorsell();
  void set_allocated_tenorsell(std::string* tenorsell);
  private:
  const std::string& _internal_tenorsell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tenorsell(const std::string& value);
  std::string* _internal_mutable_tenorsell();
  public:

  // string MakerInstitutionBuy = 10;
  void clear_makerinstitutionbuy();
  const std::string& makerinstitutionbuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_makerinstitutionbuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_makerinstitutionbuy();
  PROTOBUF_NODISCARD std::string* release_makerinstitutionbuy();
  void set_allocated_makerinstitutionbuy(std::string* makerinstitutionbuy);
  private:
  const std::string& _internal_makerinstitutionbuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_makerinstitutionbuy(const std::string& value);
  std::string* _internal_mutable_makerinstitutionbuy();
  public:

  // string MakerInstitutionSell = 11;
  void clear_makerinstitutionsell();
  const std::string& makerinstitutionsell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_makerinstitutionsell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_makerinstitutionsell();
  PROTOBUF_NODISCARD std::string* release_makerinstitutionsell();
  void set_allocated_makerinstitutionsell(std::string* makerinstitutionsell);
  private:
  const std::string& _internal_makerinstitutionsell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_makerinstitutionsell(const std::string& value);
  std::string* _internal_mutable_makerinstitutionsell();
  public:

  // int64 BestRateBuy = 5;
  void clear_bestratebuy();
  int64_t bestratebuy() const;
  void set_bestratebuy(int64_t value);
  private:
  int64_t _internal_bestratebuy() const;
  void _internal_set_bestratebuy(int64_t value);
  public:

  // int64 BestRateSell = 6;
  void clear_bestratesell();
  int64_t bestratesell() const;
  void set_bestratesell(int64_t value);
  private:
  int64_t _internal_bestratesell() const;
  void _internal_set_bestratesell(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.OptionFxQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestratedatebuy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestratetimebuy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestratedatesell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestratetimesell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volatilitysurface_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenorbuy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenorsell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr makerinstitutionbuy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr makerinstitutionsell_;
    int64_t bestratebuy_;
    int64_t bestratesell_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsFxQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDCfetsFxQuote

// string HTSCSecurityID = 1;
inline void MDCfetsFxQuote::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDCfetsFxQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsFxQuote::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.HTSCSecurityID)
}
inline std::string* MDCfetsFxQuote::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxQuote.HTSCSecurityID)
  return _s;
}
inline const std::string& MDCfetsFxQuote::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDCfetsFxQuote::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsFxQuote::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsFxQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxQuote.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDCfetsFxQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDCfetsFxQuote::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDCfetsFxQuote::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDCfetsFxQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.MDDate)
  return _internal_mddate();
}
inline void MDCfetsFxQuote::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDCfetsFxQuote::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDCfetsFxQuote::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDCfetsFxQuote::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDCfetsFxQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.MDTime)
  return _internal_mdtime();
}
inline void MDCfetsFxQuote::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDCfetsFxQuote::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDCfetsFxQuote::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDCfetsFxQuote::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDCfetsFxQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDCfetsFxQuote::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDCfetsFxQuote::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDCfetsFxQuote::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCfetsFxQuote::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCfetsFxQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.securityIDSource)
  return _internal_securityidsource();
}
inline void MDCfetsFxQuote::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDCfetsFxQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDCfetsFxQuote::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDCfetsFxQuote::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDCfetsFxQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.securityType)
  return _internal_securitytype();
}
inline void MDCfetsFxQuote::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDCfetsFxQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.securityType)
}

// string SecuritySubType = 7;
inline void MDCfetsFxQuote::clear_securitysubtype() {
  _impl_.securitysubtype_.ClearToEmpty();
}
inline const std::string& MDCfetsFxQuote::securitysubtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.SecuritySubType)
  return _internal_securitysubtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsFxQuote::set_securitysubtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.securitysubtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.SecuritySubType)
}
inline std::string* MDCfetsFxQuote::mutable_securitysubtype() {
  std::string* _s = _internal_mutable_securitysubtype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxQuote.SecuritySubType)
  return _s;
}
inline const std::string& MDCfetsFxQuote::_internal_securitysubtype() const {
  return _impl_.securitysubtype_.Get();
}
inline void MDCfetsFxQuote::_internal_set_securitysubtype(const std::string& value) {
  
  _impl_.securitysubtype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsFxQuote::_internal_mutable_securitysubtype() {
  
  return _impl_.securitysubtype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsFxQuote::release_securitysubtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxQuote.SecuritySubType)
  return _impl_.securitysubtype_.Release();
}
inline void MDCfetsFxQuote::set_allocated_securitysubtype(std::string* securitysubtype) {
  if (securitysubtype != nullptr) {
    
  } else {
    
  }
  _impl_.securitysubtype_.SetAllocated(securitysubtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitysubtype_.IsDefault()) {
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.SecuritySubType)
}

// int32 ForexQuoteType = 8;
inline void MDCfetsFxQuote::clear_forexquotetype() {
  _impl_.forexquotetype_ = 0;
}
inline int32_t MDCfetsFxQuote::_internal_forexquotetype() const {
  return _impl_.forexquotetype_;
}
inline int32_t MDCfetsFxQuote::forexquotetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.ForexQuoteType)
  return _internal_forexquotetype();
}
inline void MDCfetsFxQuote::_internal_set_forexquotetype(int32_t value) {
  
  _impl_.forexquotetype_ = value;
}
inline void MDCfetsFxQuote::set_forexquotetype(int32_t value) {
  _internal_set_forexquotetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.ForexQuoteType)
}

// .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote spotFxQuote = 9;
inline bool MDCfetsFxQuote::_internal_has_spotfxquote() const {
  return this != internal_default_instance() && _impl_.spotfxquote_ != nullptr;
}
inline bool MDCfetsFxQuote::has_spotfxquote() const {
  return _internal_has_spotfxquote();
}
inline void MDCfetsFxQuote::clear_spotfxquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.spotfxquote_ != nullptr) {
    delete _impl_.spotfxquote_;
  }
  _impl_.spotfxquote_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& MDCfetsFxQuote::_internal_spotfxquote() const {
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* p = _impl_.spotfxquote_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote&>(
      ::com::htsc::mdc::insight::model::_SwpSptNdfFowFxQuote_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& MDCfetsFxQuote::spotfxquote() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.spotFxQuote)
  return _internal_spotfxquote();
}
inline void MDCfetsFxQuote::unsafe_arena_set_allocated_spotfxquote(
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* spotfxquote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spotfxquote_);
  }
  _impl_.spotfxquote_ = spotfxquote;
  if (spotfxquote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.spotFxQuote)
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::release_spotfxquote() {
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* temp = _impl_.spotfxquote_;
  _impl_.spotfxquote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::unsafe_arena_release_spotfxquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxQuote.spotFxQuote)
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* temp = _impl_.spotfxquote_;
  _impl_.spotfxquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::_internal_mutable_spotfxquote() {
  
  if (_impl_.spotfxquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote>(GetArenaForAllocation());
    _impl_.spotfxquote_ = p;
  }
  return _impl_.spotfxquote_;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::mutable_spotfxquote() {
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* _msg = _internal_mutable_spotfxquote();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxQuote.spotFxQuote)
  return _msg;
}
inline void MDCfetsFxQuote::set_allocated_spotfxquote(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* spotfxquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spotfxquote_;
  }
  if (spotfxquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spotfxquote);
    if (message_arena != submessage_arena) {
      spotfxquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spotfxquote, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spotfxquote_ = spotfxquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.spotFxQuote)
}

// .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote forwardFxQuote = 10;
inline bool MDCfetsFxQuote::_internal_has_forwardfxquote() const {
  return this != internal_default_instance() && _impl_.forwardfxquote_ != nullptr;
}
inline bool MDCfetsFxQuote::has_forwardfxquote() const {
  return _internal_has_forwardfxquote();
}
inline void MDCfetsFxQuote::clear_forwardfxquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.forwardfxquote_ != nullptr) {
    delete _impl_.forwardfxquote_;
  }
  _impl_.forwardfxquote_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& MDCfetsFxQuote::_internal_forwardfxquote() const {
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* p = _impl_.forwardfxquote_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote&>(
      ::com::htsc::mdc::insight::model::_SwpSptNdfFowFxQuote_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& MDCfetsFxQuote::forwardfxquote() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.forwardFxQuote)
  return _internal_forwardfxquote();
}
inline void MDCfetsFxQuote::unsafe_arena_set_allocated_forwardfxquote(
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* forwardfxquote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forwardfxquote_);
  }
  _impl_.forwardfxquote_ = forwardfxquote;
  if (forwardfxquote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.forwardFxQuote)
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::release_forwardfxquote() {
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* temp = _impl_.forwardfxquote_;
  _impl_.forwardfxquote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::unsafe_arena_release_forwardfxquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxQuote.forwardFxQuote)
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* temp = _impl_.forwardfxquote_;
  _impl_.forwardfxquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::_internal_mutable_forwardfxquote() {
  
  if (_impl_.forwardfxquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote>(GetArenaForAllocation());
    _impl_.forwardfxquote_ = p;
  }
  return _impl_.forwardfxquote_;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::mutable_forwardfxquote() {
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* _msg = _internal_mutable_forwardfxquote();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxQuote.forwardFxQuote)
  return _msg;
}
inline void MDCfetsFxQuote::set_allocated_forwardfxquote(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* forwardfxquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forwardfxquote_;
  }
  if (forwardfxquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forwardfxquote);
    if (message_arena != submessage_arena) {
      forwardfxquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forwardfxquote, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forwardfxquote_ = forwardfxquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.forwardFxQuote)
}

// .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote nonDeliverableForwardsFxQuote = 11;
inline bool MDCfetsFxQuote::_internal_has_nondeliverableforwardsfxquote() const {
  return this != internal_default_instance() && _impl_.nondeliverableforwardsfxquote_ != nullptr;
}
inline bool MDCfetsFxQuote::has_nondeliverableforwardsfxquote() const {
  return _internal_has_nondeliverableforwardsfxquote();
}
inline void MDCfetsFxQuote::clear_nondeliverableforwardsfxquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.nondeliverableforwardsfxquote_ != nullptr) {
    delete _impl_.nondeliverableforwardsfxquote_;
  }
  _impl_.nondeliverableforwardsfxquote_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& MDCfetsFxQuote::_internal_nondeliverableforwardsfxquote() const {
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* p = _impl_.nondeliverableforwardsfxquote_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote&>(
      ::com::htsc::mdc::insight::model::_SwpSptNdfFowFxQuote_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& MDCfetsFxQuote::nondeliverableforwardsfxquote() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.nonDeliverableForwardsFxQuote)
  return _internal_nondeliverableforwardsfxquote();
}
inline void MDCfetsFxQuote::unsafe_arena_set_allocated_nondeliverableforwardsfxquote(
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* nondeliverableforwardsfxquote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nondeliverableforwardsfxquote_);
  }
  _impl_.nondeliverableforwardsfxquote_ = nondeliverableforwardsfxquote;
  if (nondeliverableforwardsfxquote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.nonDeliverableForwardsFxQuote)
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::release_nondeliverableforwardsfxquote() {
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* temp = _impl_.nondeliverableforwardsfxquote_;
  _impl_.nondeliverableforwardsfxquote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::unsafe_arena_release_nondeliverableforwardsfxquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxQuote.nonDeliverableForwardsFxQuote)
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* temp = _impl_.nondeliverableforwardsfxquote_;
  _impl_.nondeliverableforwardsfxquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::_internal_mutable_nondeliverableforwardsfxquote() {
  
  if (_impl_.nondeliverableforwardsfxquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote>(GetArenaForAllocation());
    _impl_.nondeliverableforwardsfxquote_ = p;
  }
  return _impl_.nondeliverableforwardsfxquote_;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::mutable_nondeliverableforwardsfxquote() {
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* _msg = _internal_mutable_nondeliverableforwardsfxquote();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxQuote.nonDeliverableForwardsFxQuote)
  return _msg;
}
inline void MDCfetsFxQuote::set_allocated_nondeliverableforwardsfxquote(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* nondeliverableforwardsfxquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nondeliverableforwardsfxquote_;
  }
  if (nondeliverableforwardsfxquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nondeliverableforwardsfxquote);
    if (message_arena != submessage_arena) {
      nondeliverableforwardsfxquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nondeliverableforwardsfxquote, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nondeliverableforwardsfxquote_ = nondeliverableforwardsfxquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.nonDeliverableForwardsFxQuote)
}

// .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote swapFxQuote = 12;
inline bool MDCfetsFxQuote::_internal_has_swapfxquote() const {
  return this != internal_default_instance() && _impl_.swapfxquote_ != nullptr;
}
inline bool MDCfetsFxQuote::has_swapfxquote() const {
  return _internal_has_swapfxquote();
}
inline void MDCfetsFxQuote::clear_swapfxquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.swapfxquote_ != nullptr) {
    delete _impl_.swapfxquote_;
  }
  _impl_.swapfxquote_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& MDCfetsFxQuote::_internal_swapfxquote() const {
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* p = _impl_.swapfxquote_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote&>(
      ::com::htsc::mdc::insight::model::_SwpSptNdfFowFxQuote_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& MDCfetsFxQuote::swapfxquote() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.swapFxQuote)
  return _internal_swapfxquote();
}
inline void MDCfetsFxQuote::unsafe_arena_set_allocated_swapfxquote(
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* swapfxquote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swapfxquote_);
  }
  _impl_.swapfxquote_ = swapfxquote;
  if (swapfxquote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.swapFxQuote)
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::release_swapfxquote() {
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* temp = _impl_.swapfxquote_;
  _impl_.swapfxquote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::unsafe_arena_release_swapfxquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxQuote.swapFxQuote)
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* temp = _impl_.swapfxquote_;
  _impl_.swapfxquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::_internal_mutable_swapfxquote() {
  
  if (_impl_.swapfxquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote>(GetArenaForAllocation());
    _impl_.swapfxquote_ = p;
  }
  return _impl_.swapfxquote_;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* MDCfetsFxQuote::mutable_swapfxquote() {
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* _msg = _internal_mutable_swapfxquote();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxQuote.swapFxQuote)
  return _msg;
}
inline void MDCfetsFxQuote::set_allocated_swapfxquote(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote* swapfxquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.swapfxquote_;
  }
  if (swapfxquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(swapfxquote);
    if (message_arena != submessage_arena) {
      swapfxquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swapfxquote, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swapfxquote_ = swapfxquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.swapFxQuote)
}

// .com.htsc.mdc.insight.model.OptionFxQuote optionFxQuote = 13;
inline bool MDCfetsFxQuote::_internal_has_optionfxquote() const {
  return this != internal_default_instance() && _impl_.optionfxquote_ != nullptr;
}
inline bool MDCfetsFxQuote::has_optionfxquote() const {
  return _internal_has_optionfxquote();
}
inline void MDCfetsFxQuote::clear_optionfxquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.optionfxquote_ != nullptr) {
    delete _impl_.optionfxquote_;
  }
  _impl_.optionfxquote_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::OptionFxQuote& MDCfetsFxQuote::_internal_optionfxquote() const {
  const ::com::htsc::mdc::insight::model::OptionFxQuote* p = _impl_.optionfxquote_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::OptionFxQuote&>(
      ::com::htsc::mdc::insight::model::_OptionFxQuote_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::OptionFxQuote& MDCfetsFxQuote::optionfxquote() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.optionFxQuote)
  return _internal_optionfxquote();
}
inline void MDCfetsFxQuote::unsafe_arena_set_allocated_optionfxquote(
    ::com::htsc::mdc::insight::model::OptionFxQuote* optionfxquote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionfxquote_);
  }
  _impl_.optionfxquote_ = optionfxquote;
  if (optionfxquote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.optionFxQuote)
}
inline ::com::htsc::mdc::insight::model::OptionFxQuote* MDCfetsFxQuote::release_optionfxquote() {
  
  ::com::htsc::mdc::insight::model::OptionFxQuote* temp = _impl_.optionfxquote_;
  _impl_.optionfxquote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::OptionFxQuote* MDCfetsFxQuote::unsafe_arena_release_optionfxquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxQuote.optionFxQuote)
  
  ::com::htsc::mdc::insight::model::OptionFxQuote* temp = _impl_.optionfxquote_;
  _impl_.optionfxquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::OptionFxQuote* MDCfetsFxQuote::_internal_mutable_optionfxquote() {
  
  if (_impl_.optionfxquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::OptionFxQuote>(GetArenaForAllocation());
    _impl_.optionfxquote_ = p;
  }
  return _impl_.optionfxquote_;
}
inline ::com::htsc::mdc::insight::model::OptionFxQuote* MDCfetsFxQuote::mutable_optionfxquote() {
  ::com::htsc::mdc::insight::model::OptionFxQuote* _msg = _internal_mutable_optionfxquote();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxQuote.optionFxQuote)
  return _msg;
}
inline void MDCfetsFxQuote::set_allocated_optionfxquote(::com::htsc::mdc::insight::model::OptionFxQuote* optionfxquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optionfxquote_;
  }
  if (optionfxquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionfxquote);
    if (message_arena != submessage_arena) {
      optionfxquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionfxquote, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionfxquote_ = optionfxquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.optionFxQuote)
}

// int32 DataMultiplePowerOf10 = 14;
inline void MDCfetsFxQuote::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDCfetsFxQuote::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDCfetsFxQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDCfetsFxQuote::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDCfetsFxQuote::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.DataMultiplePowerOf10)
}

// string TransactTime = 15;
inline void MDCfetsFxQuote::clear_transacttime() {
  _impl_.transacttime_.ClearToEmpty();
}
inline const std::string& MDCfetsFxQuote::transacttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxQuote.TransactTime)
  return _internal_transacttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsFxQuote::set_transacttime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transacttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxQuote.TransactTime)
}
inline std::string* MDCfetsFxQuote::mutable_transacttime() {
  std::string* _s = _internal_mutable_transacttime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxQuote.TransactTime)
  return _s;
}
inline const std::string& MDCfetsFxQuote::_internal_transacttime() const {
  return _impl_.transacttime_.Get();
}
inline void MDCfetsFxQuote::_internal_set_transacttime(const std::string& value) {
  
  _impl_.transacttime_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsFxQuote::_internal_mutable_transacttime() {
  
  return _impl_.transacttime_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsFxQuote::release_transacttime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxQuote.TransactTime)
  return _impl_.transacttime_.Release();
}
inline void MDCfetsFxQuote::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    
  } else {
    
  }
  _impl_.transacttime_.SetAllocated(transacttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transacttime_.IsDefault()) {
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxQuote.TransactTime)
}

// -------------------------------------------------------------------

// SwpSptNdfFowFxQuote

// string BestRateDateBuy = 1;
inline void SwpSptNdfFowFxQuote::clear_bestratedatebuy() {
  _impl_.bestratedatebuy_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::bestratedatebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateBuy)
  return _internal_bestratedatebuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_bestratedatebuy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bestratedatebuy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateBuy)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_bestratedatebuy() {
  std::string* _s = _internal_mutable_bestratedatebuy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateBuy)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_bestratedatebuy() const {
  return _impl_.bestratedatebuy_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_bestratedatebuy(const std::string& value) {
  
  _impl_.bestratedatebuy_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_bestratedatebuy() {
  
  return _impl_.bestratedatebuy_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_bestratedatebuy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateBuy)
  return _impl_.bestratedatebuy_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_bestratedatebuy(std::string* bestratedatebuy) {
  if (bestratedatebuy != nullptr) {
    
  } else {
    
  }
  _impl_.bestratedatebuy_.SetAllocated(bestratedatebuy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bestratedatebuy_.IsDefault()) {
    _impl_.bestratedatebuy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateBuy)
}

// string BestRateTimeBuy = 2;
inline void SwpSptNdfFowFxQuote::clear_bestratetimebuy() {
  _impl_.bestratetimebuy_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::bestratetimebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeBuy)
  return _internal_bestratetimebuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_bestratetimebuy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bestratetimebuy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeBuy)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_bestratetimebuy() {
  std::string* _s = _internal_mutable_bestratetimebuy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeBuy)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_bestratetimebuy() const {
  return _impl_.bestratetimebuy_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_bestratetimebuy(const std::string& value) {
  
  _impl_.bestratetimebuy_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_bestratetimebuy() {
  
  return _impl_.bestratetimebuy_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_bestratetimebuy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeBuy)
  return _impl_.bestratetimebuy_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_bestratetimebuy(std::string* bestratetimebuy) {
  if (bestratetimebuy != nullptr) {
    
  } else {
    
  }
  _impl_.bestratetimebuy_.SetAllocated(bestratetimebuy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bestratetimebuy_.IsDefault()) {
    _impl_.bestratetimebuy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeBuy)
}

// string BestRateDateSell = 3;
inline void SwpSptNdfFowFxQuote::clear_bestratedatesell() {
  _impl_.bestratedatesell_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::bestratedatesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateSell)
  return _internal_bestratedatesell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_bestratedatesell(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bestratedatesell_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateSell)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_bestratedatesell() {
  std::string* _s = _internal_mutable_bestratedatesell();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateSell)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_bestratedatesell() const {
  return _impl_.bestratedatesell_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_bestratedatesell(const std::string& value) {
  
  _impl_.bestratedatesell_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_bestratedatesell() {
  
  return _impl_.bestratedatesell_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_bestratedatesell() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateSell)
  return _impl_.bestratedatesell_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_bestratedatesell(std::string* bestratedatesell) {
  if (bestratedatesell != nullptr) {
    
  } else {
    
  }
  _impl_.bestratedatesell_.SetAllocated(bestratedatesell, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bestratedatesell_.IsDefault()) {
    _impl_.bestratedatesell_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateSell)
}

// string BestRateTimeSell = 4;
inline void SwpSptNdfFowFxQuote::clear_bestratetimesell() {
  _impl_.bestratetimesell_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::bestratetimesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeSell)
  return _internal_bestratetimesell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_bestratetimesell(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bestratetimesell_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeSell)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_bestratetimesell() {
  std::string* _s = _internal_mutable_bestratetimesell();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeSell)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_bestratetimesell() const {
  return _impl_.bestratetimesell_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_bestratetimesell(const std::string& value) {
  
  _impl_.bestratetimesell_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_bestratetimesell() {
  
  return _impl_.bestratetimesell_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_bestratetimesell() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeSell)
  return _impl_.bestratetimesell_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_bestratetimesell(std::string* bestratetimesell) {
  if (bestratetimesell != nullptr) {
    
  } else {
    
  }
  _impl_.bestratetimesell_.SetAllocated(bestratetimesell, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bestratetimesell_.IsDefault()) {
    _impl_.bestratetimesell_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeSell)
}

// int64 BestRateBuy = 5;
inline void SwpSptNdfFowFxQuote::clear_bestratebuy() {
  _impl_.bestratebuy_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxQuote::_internal_bestratebuy() const {
  return _impl_.bestratebuy_;
}
inline int64_t SwpSptNdfFowFxQuote::bestratebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateBuy)
  return _internal_bestratebuy();
}
inline void SwpSptNdfFowFxQuote::_internal_set_bestratebuy(int64_t value) {
  
  _impl_.bestratebuy_ = value;
}
inline void SwpSptNdfFowFxQuote::set_bestratebuy(int64_t value) {
  _internal_set_bestratebuy(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateBuy)
}

// int64 BestRateSell = 6;
inline void SwpSptNdfFowFxQuote::clear_bestratesell() {
  _impl_.bestratesell_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxQuote::_internal_bestratesell() const {
  return _impl_.bestratesell_;
}
inline int64_t SwpSptNdfFowFxQuote::bestratesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateSell)
  return _internal_bestratesell();
}
inline void SwpSptNdfFowFxQuote::_internal_set_bestratesell(int64_t value) {
  
  _impl_.bestratesell_ = value;
}
inline void SwpSptNdfFowFxQuote::set_bestratesell(int64_t value) {
  _internal_set_bestratesell(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateSell)
}

// string RateLiquidProviderBuy1 = 7;
inline void SwpSptNdfFowFxQuote::clear_rateliquidproviderbuy1() {
  _impl_.rateliquidproviderbuy1_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidproviderbuy1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy1)
  return _internal_rateliquidproviderbuy1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidproviderbuy1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidproviderbuy1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy1)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidproviderbuy1() {
  std::string* _s = _internal_mutable_rateliquidproviderbuy1();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy1)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidproviderbuy1() const {
  return _impl_.rateliquidproviderbuy1_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidproviderbuy1(const std::string& value) {
  
  _impl_.rateliquidproviderbuy1_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidproviderbuy1() {
  
  return _impl_.rateliquidproviderbuy1_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidproviderbuy1() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy1)
  return _impl_.rateliquidproviderbuy1_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidproviderbuy1(std::string* rateliquidproviderbuy1) {
  if (rateliquidproviderbuy1 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidproviderbuy1_.SetAllocated(rateliquidproviderbuy1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidproviderbuy1_.IsDefault()) {
    _impl_.rateliquidproviderbuy1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy1)
}

// string RateLiquidProviderBuy2 = 8;
inline void SwpSptNdfFowFxQuote::clear_rateliquidproviderbuy2() {
  _impl_.rateliquidproviderbuy2_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidproviderbuy2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy2)
  return _internal_rateliquidproviderbuy2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidproviderbuy2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidproviderbuy2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy2)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidproviderbuy2() {
  std::string* _s = _internal_mutable_rateliquidproviderbuy2();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy2)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidproviderbuy2() const {
  return _impl_.rateliquidproviderbuy2_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidproviderbuy2(const std::string& value) {
  
  _impl_.rateliquidproviderbuy2_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidproviderbuy2() {
  
  return _impl_.rateliquidproviderbuy2_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidproviderbuy2() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy2)
  return _impl_.rateliquidproviderbuy2_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidproviderbuy2(std::string* rateliquidproviderbuy2) {
  if (rateliquidproviderbuy2 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidproviderbuy2_.SetAllocated(rateliquidproviderbuy2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidproviderbuy2_.IsDefault()) {
    _impl_.rateliquidproviderbuy2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy2)
}

// string RateLiquidProviderBuy3 = 9;
inline void SwpSptNdfFowFxQuote::clear_rateliquidproviderbuy3() {
  _impl_.rateliquidproviderbuy3_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidproviderbuy3() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy3)
  return _internal_rateliquidproviderbuy3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidproviderbuy3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidproviderbuy3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy3)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidproviderbuy3() {
  std::string* _s = _internal_mutable_rateliquidproviderbuy3();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy3)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidproviderbuy3() const {
  return _impl_.rateliquidproviderbuy3_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidproviderbuy3(const std::string& value) {
  
  _impl_.rateliquidproviderbuy3_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidproviderbuy3() {
  
  return _impl_.rateliquidproviderbuy3_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidproviderbuy3() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy3)
  return _impl_.rateliquidproviderbuy3_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidproviderbuy3(std::string* rateliquidproviderbuy3) {
  if (rateliquidproviderbuy3 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidproviderbuy3_.SetAllocated(rateliquidproviderbuy3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidproviderbuy3_.IsDefault()) {
    _impl_.rateliquidproviderbuy3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy3)
}

// string RateLiquidProviderBuy4 = 10;
inline void SwpSptNdfFowFxQuote::clear_rateliquidproviderbuy4() {
  _impl_.rateliquidproviderbuy4_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidproviderbuy4() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy4)
  return _internal_rateliquidproviderbuy4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidproviderbuy4(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidproviderbuy4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy4)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidproviderbuy4() {
  std::string* _s = _internal_mutable_rateliquidproviderbuy4();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy4)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidproviderbuy4() const {
  return _impl_.rateliquidproviderbuy4_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidproviderbuy4(const std::string& value) {
  
  _impl_.rateliquidproviderbuy4_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidproviderbuy4() {
  
  return _impl_.rateliquidproviderbuy4_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidproviderbuy4() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy4)
  return _impl_.rateliquidproviderbuy4_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidproviderbuy4(std::string* rateliquidproviderbuy4) {
  if (rateliquidproviderbuy4 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidproviderbuy4_.SetAllocated(rateliquidproviderbuy4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidproviderbuy4_.IsDefault()) {
    _impl_.rateliquidproviderbuy4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy4)
}

// string RateLiquidProviderBuy5 = 11;
inline void SwpSptNdfFowFxQuote::clear_rateliquidproviderbuy5() {
  _impl_.rateliquidproviderbuy5_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidproviderbuy5() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy5)
  return _internal_rateliquidproviderbuy5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidproviderbuy5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidproviderbuy5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy5)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidproviderbuy5() {
  std::string* _s = _internal_mutable_rateliquidproviderbuy5();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy5)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidproviderbuy5() const {
  return _impl_.rateliquidproviderbuy5_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidproviderbuy5(const std::string& value) {
  
  _impl_.rateliquidproviderbuy5_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidproviderbuy5() {
  
  return _impl_.rateliquidproviderbuy5_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidproviderbuy5() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy5)
  return _impl_.rateliquidproviderbuy5_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidproviderbuy5(std::string* rateliquidproviderbuy5) {
  if (rateliquidproviderbuy5 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidproviderbuy5_.SetAllocated(rateliquidproviderbuy5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidproviderbuy5_.IsDefault()) {
    _impl_.rateliquidproviderbuy5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy5)
}

// string RateLiquidProviderSell1 = 12;
inline void SwpSptNdfFowFxQuote::clear_rateliquidprovidersell1() {
  _impl_.rateliquidprovidersell1_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidprovidersell1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell1)
  return _internal_rateliquidprovidersell1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidprovidersell1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidprovidersell1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell1)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidprovidersell1() {
  std::string* _s = _internal_mutable_rateliquidprovidersell1();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell1)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidprovidersell1() const {
  return _impl_.rateliquidprovidersell1_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidprovidersell1(const std::string& value) {
  
  _impl_.rateliquidprovidersell1_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidprovidersell1() {
  
  return _impl_.rateliquidprovidersell1_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidprovidersell1() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell1)
  return _impl_.rateliquidprovidersell1_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidprovidersell1(std::string* rateliquidprovidersell1) {
  if (rateliquidprovidersell1 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidprovidersell1_.SetAllocated(rateliquidprovidersell1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidprovidersell1_.IsDefault()) {
    _impl_.rateliquidprovidersell1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell1)
}

// string RateLiquidProviderSell2 = 13;
inline void SwpSptNdfFowFxQuote::clear_rateliquidprovidersell2() {
  _impl_.rateliquidprovidersell2_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidprovidersell2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell2)
  return _internal_rateliquidprovidersell2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidprovidersell2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidprovidersell2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell2)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidprovidersell2() {
  std::string* _s = _internal_mutable_rateliquidprovidersell2();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell2)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidprovidersell2() const {
  return _impl_.rateliquidprovidersell2_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidprovidersell2(const std::string& value) {
  
  _impl_.rateliquidprovidersell2_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidprovidersell2() {
  
  return _impl_.rateliquidprovidersell2_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidprovidersell2() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell2)
  return _impl_.rateliquidprovidersell2_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidprovidersell2(std::string* rateliquidprovidersell2) {
  if (rateliquidprovidersell2 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidprovidersell2_.SetAllocated(rateliquidprovidersell2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidprovidersell2_.IsDefault()) {
    _impl_.rateliquidprovidersell2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell2)
}

// string RateLiquidProviderSell3 = 14;
inline void SwpSptNdfFowFxQuote::clear_rateliquidprovidersell3() {
  _impl_.rateliquidprovidersell3_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidprovidersell3() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell3)
  return _internal_rateliquidprovidersell3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidprovidersell3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidprovidersell3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell3)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidprovidersell3() {
  std::string* _s = _internal_mutable_rateliquidprovidersell3();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell3)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidprovidersell3() const {
  return _impl_.rateliquidprovidersell3_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidprovidersell3(const std::string& value) {
  
  _impl_.rateliquidprovidersell3_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidprovidersell3() {
  
  return _impl_.rateliquidprovidersell3_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidprovidersell3() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell3)
  return _impl_.rateliquidprovidersell3_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidprovidersell3(std::string* rateliquidprovidersell3) {
  if (rateliquidprovidersell3 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidprovidersell3_.SetAllocated(rateliquidprovidersell3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidprovidersell3_.IsDefault()) {
    _impl_.rateliquidprovidersell3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell3)
}

// string RateLiquidProviderSell4 = 15;
inline void SwpSptNdfFowFxQuote::clear_rateliquidprovidersell4() {
  _impl_.rateliquidprovidersell4_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidprovidersell4() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell4)
  return _internal_rateliquidprovidersell4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidprovidersell4(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidprovidersell4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell4)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidprovidersell4() {
  std::string* _s = _internal_mutable_rateliquidprovidersell4();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell4)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidprovidersell4() const {
  return _impl_.rateliquidprovidersell4_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidprovidersell4(const std::string& value) {
  
  _impl_.rateliquidprovidersell4_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidprovidersell4() {
  
  return _impl_.rateliquidprovidersell4_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidprovidersell4() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell4)
  return _impl_.rateliquidprovidersell4_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidprovidersell4(std::string* rateliquidprovidersell4) {
  if (rateliquidprovidersell4 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidprovidersell4_.SetAllocated(rateliquidprovidersell4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidprovidersell4_.IsDefault()) {
    _impl_.rateliquidprovidersell4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell4)
}

// string RateLiquidProviderSell5 = 16;
inline void SwpSptNdfFowFxQuote::clear_rateliquidprovidersell5() {
  _impl_.rateliquidprovidersell5_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::rateliquidprovidersell5() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell5)
  return _internal_rateliquidprovidersell5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_rateliquidprovidersell5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rateliquidprovidersell5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell5)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_rateliquidprovidersell5() {
  std::string* _s = _internal_mutable_rateliquidprovidersell5();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell5)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_rateliquidprovidersell5() const {
  return _impl_.rateliquidprovidersell5_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_rateliquidprovidersell5(const std::string& value) {
  
  _impl_.rateliquidprovidersell5_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_rateliquidprovidersell5() {
  
  return _impl_.rateliquidprovidersell5_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_rateliquidprovidersell5() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell5)
  return _impl_.rateliquidprovidersell5_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_rateliquidprovidersell5(std::string* rateliquidprovidersell5) {
  if (rateliquidprovidersell5 != nullptr) {
    
  } else {
    
  }
  _impl_.rateliquidprovidersell5_.SetAllocated(rateliquidprovidersell5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rateliquidprovidersell5_.IsDefault()) {
    _impl_.rateliquidprovidersell5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell5)
}

// string LegSign = 17;
inline void SwpSptNdfFowFxQuote::clear_legsign() {
  _impl_.legsign_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxQuote::legsign() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.LegSign)
  return _internal_legsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxQuote::set_legsign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.legsign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.LegSign)
}
inline std::string* SwpSptNdfFowFxQuote::mutable_legsign() {
  std::string* _s = _internal_mutable_legsign();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.LegSign)
  return _s;
}
inline const std::string& SwpSptNdfFowFxQuote::_internal_legsign() const {
  return _impl_.legsign_.Get();
}
inline void SwpSptNdfFowFxQuote::_internal_set_legsign(const std::string& value) {
  
  _impl_.legsign_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::_internal_mutable_legsign() {
  
  return _impl_.legsign_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxQuote::release_legsign() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.LegSign)
  return _impl_.legsign_.Release();
}
inline void SwpSptNdfFowFxQuote::set_allocated_legsign(std::string* legsign) {
  if (legsign != nullptr) {
    
  } else {
    
  }
  _impl_.legsign_.SetAllocated(legsign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legsign_.IsDefault()) {
    _impl_.legsign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.LegSign)
}

// -------------------------------------------------------------------

// OptionFxQuote

// string BestRateDateBuy = 1;
inline void OptionFxQuote::clear_bestratedatebuy() {
  _impl_.bestratedatebuy_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::bestratedatebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateBuy)
  return _internal_bestratedatebuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_bestratedatebuy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bestratedatebuy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateBuy)
}
inline std::string* OptionFxQuote::mutable_bestratedatebuy() {
  std::string* _s = _internal_mutable_bestratedatebuy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateBuy)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_bestratedatebuy() const {
  return _impl_.bestratedatebuy_.Get();
}
inline void OptionFxQuote::_internal_set_bestratedatebuy(const std::string& value) {
  
  _impl_.bestratedatebuy_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_bestratedatebuy() {
  
  return _impl_.bestratedatebuy_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_bestratedatebuy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateBuy)
  return _impl_.bestratedatebuy_.Release();
}
inline void OptionFxQuote::set_allocated_bestratedatebuy(std::string* bestratedatebuy) {
  if (bestratedatebuy != nullptr) {
    
  } else {
    
  }
  _impl_.bestratedatebuy_.SetAllocated(bestratedatebuy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bestratedatebuy_.IsDefault()) {
    _impl_.bestratedatebuy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateBuy)
}

// string BestRateTimeBuy = 2;
inline void OptionFxQuote::clear_bestratetimebuy() {
  _impl_.bestratetimebuy_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::bestratetimebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeBuy)
  return _internal_bestratetimebuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_bestratetimebuy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bestratetimebuy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeBuy)
}
inline std::string* OptionFxQuote::mutable_bestratetimebuy() {
  std::string* _s = _internal_mutable_bestratetimebuy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeBuy)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_bestratetimebuy() const {
  return _impl_.bestratetimebuy_.Get();
}
inline void OptionFxQuote::_internal_set_bestratetimebuy(const std::string& value) {
  
  _impl_.bestratetimebuy_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_bestratetimebuy() {
  
  return _impl_.bestratetimebuy_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_bestratetimebuy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeBuy)
  return _impl_.bestratetimebuy_.Release();
}
inline void OptionFxQuote::set_allocated_bestratetimebuy(std::string* bestratetimebuy) {
  if (bestratetimebuy != nullptr) {
    
  } else {
    
  }
  _impl_.bestratetimebuy_.SetAllocated(bestratetimebuy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bestratetimebuy_.IsDefault()) {
    _impl_.bestratetimebuy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeBuy)
}

// string BestRateDateSell = 3;
inline void OptionFxQuote::clear_bestratedatesell() {
  _impl_.bestratedatesell_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::bestratedatesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateSell)
  return _internal_bestratedatesell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_bestratedatesell(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bestratedatesell_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateSell)
}
inline std::string* OptionFxQuote::mutable_bestratedatesell() {
  std::string* _s = _internal_mutable_bestratedatesell();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateSell)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_bestratedatesell() const {
  return _impl_.bestratedatesell_.Get();
}
inline void OptionFxQuote::_internal_set_bestratedatesell(const std::string& value) {
  
  _impl_.bestratedatesell_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_bestratedatesell() {
  
  return _impl_.bestratedatesell_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_bestratedatesell() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateSell)
  return _impl_.bestratedatesell_.Release();
}
inline void OptionFxQuote::set_allocated_bestratedatesell(std::string* bestratedatesell) {
  if (bestratedatesell != nullptr) {
    
  } else {
    
  }
  _impl_.bestratedatesell_.SetAllocated(bestratedatesell, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bestratedatesell_.IsDefault()) {
    _impl_.bestratedatesell_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateSell)
}

// string BestRateTimeSell = 4;
inline void OptionFxQuote::clear_bestratetimesell() {
  _impl_.bestratetimesell_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::bestratetimesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeSell)
  return _internal_bestratetimesell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_bestratetimesell(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bestratetimesell_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeSell)
}
inline std::string* OptionFxQuote::mutable_bestratetimesell() {
  std::string* _s = _internal_mutable_bestratetimesell();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeSell)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_bestratetimesell() const {
  return _impl_.bestratetimesell_.Get();
}
inline void OptionFxQuote::_internal_set_bestratetimesell(const std::string& value) {
  
  _impl_.bestratetimesell_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_bestratetimesell() {
  
  return _impl_.bestratetimesell_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_bestratetimesell() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeSell)
  return _impl_.bestratetimesell_.Release();
}
inline void OptionFxQuote::set_allocated_bestratetimesell(std::string* bestratetimesell) {
  if (bestratetimesell != nullptr) {
    
  } else {
    
  }
  _impl_.bestratetimesell_.SetAllocated(bestratetimesell, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bestratetimesell_.IsDefault()) {
    _impl_.bestratetimesell_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeSell)
}

// int64 BestRateBuy = 5;
inline void OptionFxQuote::clear_bestratebuy() {
  _impl_.bestratebuy_ = int64_t{0};
}
inline int64_t OptionFxQuote::_internal_bestratebuy() const {
  return _impl_.bestratebuy_;
}
inline int64_t OptionFxQuote::bestratebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.BestRateBuy)
  return _internal_bestratebuy();
}
inline void OptionFxQuote::_internal_set_bestratebuy(int64_t value) {
  
  _impl_.bestratebuy_ = value;
}
inline void OptionFxQuote::set_bestratebuy(int64_t value) {
  _internal_set_bestratebuy(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.BestRateBuy)
}

// int64 BestRateSell = 6;
inline void OptionFxQuote::clear_bestratesell() {
  _impl_.bestratesell_ = int64_t{0};
}
inline int64_t OptionFxQuote::_internal_bestratesell() const {
  return _impl_.bestratesell_;
}
inline int64_t OptionFxQuote::bestratesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.BestRateSell)
  return _internal_bestratesell();
}
inline void OptionFxQuote::_internal_set_bestratesell(int64_t value) {
  
  _impl_.bestratesell_ = value;
}
inline void OptionFxQuote::set_bestratesell(int64_t value) {
  _internal_set_bestratesell(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.BestRateSell)
}

// string VolatilitySurface = 7;
inline void OptionFxQuote::clear_volatilitysurface() {
  _impl_.volatilitysurface_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::volatilitysurface() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.VolatilitySurface)
  return _internal_volatilitysurface();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_volatilitysurface(ArgT0&& arg0, ArgT... args) {
 
 _impl_.volatilitysurface_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.VolatilitySurface)
}
inline std::string* OptionFxQuote::mutable_volatilitysurface() {
  std::string* _s = _internal_mutable_volatilitysurface();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.VolatilitySurface)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_volatilitysurface() const {
  return _impl_.volatilitysurface_.Get();
}
inline void OptionFxQuote::_internal_set_volatilitysurface(const std::string& value) {
  
  _impl_.volatilitysurface_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_volatilitysurface() {
  
  return _impl_.volatilitysurface_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_volatilitysurface() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.VolatilitySurface)
  return _impl_.volatilitysurface_.Release();
}
inline void OptionFxQuote::set_allocated_volatilitysurface(std::string* volatilitysurface) {
  if (volatilitysurface != nullptr) {
    
  } else {
    
  }
  _impl_.volatilitysurface_.SetAllocated(volatilitysurface, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.volatilitysurface_.IsDefault()) {
    _impl_.volatilitysurface_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.VolatilitySurface)
}

// string TenorBuy = 8;
inline void OptionFxQuote::clear_tenorbuy() {
  _impl_.tenorbuy_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::tenorbuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.TenorBuy)
  return _internal_tenorbuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_tenorbuy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tenorbuy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.TenorBuy)
}
inline std::string* OptionFxQuote::mutable_tenorbuy() {
  std::string* _s = _internal_mutable_tenorbuy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.TenorBuy)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_tenorbuy() const {
  return _impl_.tenorbuy_.Get();
}
inline void OptionFxQuote::_internal_set_tenorbuy(const std::string& value) {
  
  _impl_.tenorbuy_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_tenorbuy() {
  
  return _impl_.tenorbuy_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_tenorbuy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.TenorBuy)
  return _impl_.tenorbuy_.Release();
}
inline void OptionFxQuote::set_allocated_tenorbuy(std::string* tenorbuy) {
  if (tenorbuy != nullptr) {
    
  } else {
    
  }
  _impl_.tenorbuy_.SetAllocated(tenorbuy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tenorbuy_.IsDefault()) {
    _impl_.tenorbuy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.TenorBuy)
}

// string TenorSell = 9;
inline void OptionFxQuote::clear_tenorsell() {
  _impl_.tenorsell_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::tenorsell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.TenorSell)
  return _internal_tenorsell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_tenorsell(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tenorsell_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.TenorSell)
}
inline std::string* OptionFxQuote::mutable_tenorsell() {
  std::string* _s = _internal_mutable_tenorsell();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.TenorSell)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_tenorsell() const {
  return _impl_.tenorsell_.Get();
}
inline void OptionFxQuote::_internal_set_tenorsell(const std::string& value) {
  
  _impl_.tenorsell_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_tenorsell() {
  
  return _impl_.tenorsell_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_tenorsell() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.TenorSell)
  return _impl_.tenorsell_.Release();
}
inline void OptionFxQuote::set_allocated_tenorsell(std::string* tenorsell) {
  if (tenorsell != nullptr) {
    
  } else {
    
  }
  _impl_.tenorsell_.SetAllocated(tenorsell, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tenorsell_.IsDefault()) {
    _impl_.tenorsell_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.TenorSell)
}

// string MakerInstitutionBuy = 10;
inline void OptionFxQuote::clear_makerinstitutionbuy() {
  _impl_.makerinstitutionbuy_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::makerinstitutionbuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionBuy)
  return _internal_makerinstitutionbuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_makerinstitutionbuy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.makerinstitutionbuy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionBuy)
}
inline std::string* OptionFxQuote::mutable_makerinstitutionbuy() {
  std::string* _s = _internal_mutable_makerinstitutionbuy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionBuy)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_makerinstitutionbuy() const {
  return _impl_.makerinstitutionbuy_.Get();
}
inline void OptionFxQuote::_internal_set_makerinstitutionbuy(const std::string& value) {
  
  _impl_.makerinstitutionbuy_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_makerinstitutionbuy() {
  
  return _impl_.makerinstitutionbuy_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_makerinstitutionbuy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionBuy)
  return _impl_.makerinstitutionbuy_.Release();
}
inline void OptionFxQuote::set_allocated_makerinstitutionbuy(std::string* makerinstitutionbuy) {
  if (makerinstitutionbuy != nullptr) {
    
  } else {
    
  }
  _impl_.makerinstitutionbuy_.SetAllocated(makerinstitutionbuy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.makerinstitutionbuy_.IsDefault()) {
    _impl_.makerinstitutionbuy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionBuy)
}

// string MakerInstitutionSell = 11;
inline void OptionFxQuote::clear_makerinstitutionsell() {
  _impl_.makerinstitutionsell_.ClearToEmpty();
}
inline const std::string& OptionFxQuote::makerinstitutionsell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionSell)
  return _internal_makerinstitutionsell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxQuote::set_makerinstitutionsell(ArgT0&& arg0, ArgT... args) {
 
 _impl_.makerinstitutionsell_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionSell)
}
inline std::string* OptionFxQuote::mutable_makerinstitutionsell() {
  std::string* _s = _internal_mutable_makerinstitutionsell();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionSell)
  return _s;
}
inline const std::string& OptionFxQuote::_internal_makerinstitutionsell() const {
  return _impl_.makerinstitutionsell_.Get();
}
inline void OptionFxQuote::_internal_set_makerinstitutionsell(const std::string& value) {
  
  _impl_.makerinstitutionsell_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxQuote::_internal_mutable_makerinstitutionsell() {
  
  return _impl_.makerinstitutionsell_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxQuote::release_makerinstitutionsell() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionSell)
  return _impl_.makerinstitutionsell_.Release();
}
inline void OptionFxQuote::set_allocated_makerinstitutionsell(std::string* makerinstitutionsell) {
  if (makerinstitutionsell != nullptr) {
    
  } else {
    
  }
  _impl_.makerinstitutionsell_.SetAllocated(makerinstitutionsell, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.makerinstitutionsell_.IsDefault()) {
    _impl_.makerinstitutionsell_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionSell)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDCfetsFxQuote_2eproto
