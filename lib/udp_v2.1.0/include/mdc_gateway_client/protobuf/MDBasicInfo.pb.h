// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDBasicInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDBasicInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDBasicInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDBasicInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDBasicInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDBasicInfo_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDBasicInfo;
struct MDBasicInfoDefaultTypeInternal;
extern MDBasicInfoDefaultTypeInternal _MDBasicInfo_default_instance_;
class MDBasicInfo_ConstantParam;
struct MDBasicInfo_ConstantParamDefaultTypeInternal;
extern MDBasicInfo_ConstantParamDefaultTypeInternal _MDBasicInfo_ConstantParam_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDBasicInfo* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBasicInfo>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDBasicInfo_ConstantParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam) */ {
 public:
  inline MDBasicInfo_ConstantParam() : MDBasicInfo_ConstantParam(nullptr) {}
  ~MDBasicInfo_ConstantParam() override;
  explicit PROTOBUF_CONSTEXPR MDBasicInfo_ConstantParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDBasicInfo_ConstantParam(const MDBasicInfo_ConstantParam& from);
  MDBasicInfo_ConstantParam(MDBasicInfo_ConstantParam&& from) noexcept
    : MDBasicInfo_ConstantParam() {
    *this = ::std::move(from);
  }

  inline MDBasicInfo_ConstantParam& operator=(const MDBasicInfo_ConstantParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDBasicInfo_ConstantParam& operator=(MDBasicInfo_ConstantParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDBasicInfo_ConstantParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDBasicInfo_ConstantParam* internal_default_instance() {
    return reinterpret_cast<const MDBasicInfo_ConstantParam*>(
               &_MDBasicInfo_ConstantParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDBasicInfo_ConstantParam& a, MDBasicInfo_ConstantParam& b) {
    a.Swap(&b);
  }
  inline void Swap(MDBasicInfo_ConstantParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDBasicInfo_ConstantParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDBasicInfo_ConstantParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDBasicInfo_ConstantParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDBasicInfo_ConstantParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDBasicInfo_ConstantParam& from) {
    MDBasicInfo_ConstantParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDBasicInfo_ConstantParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam";
  }
  protected:
  explicit MDBasicInfo_ConstantParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamNameFieldNumber = 1,
    kParamValueFieldNumber = 2,
  };
  // string ParamName = 1;
  void clear_paramname();
  const std::string& paramname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paramname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paramname();
  PROTOBUF_NODISCARD std::string* release_paramname();
  void set_allocated_paramname(std::string* paramname);
  private:
  const std::string& _internal_paramname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paramname(const std::string& value);
  std::string* _internal_mutable_paramname();
  public:

  // string ParamValue = 2;
  void clear_paramvalue();
  const std::string& paramvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paramvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paramvalue();
  PROTOBUF_NODISCARD std::string* release_paramvalue();
  void set_allocated_paramvalue(std::string* paramvalue);
  private:
  const std::string& _internal_paramvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paramvalue(const std::string& value);
  std::string* _internal_mutable_paramvalue();
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDBasicInfo_2eproto;
};
// -------------------------------------------------------------------

class MDBasicInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDBasicInfo) */ {
 public:
  inline MDBasicInfo() : MDBasicInfo(nullptr) {}
  ~MDBasicInfo() override;
  explicit PROTOBUF_CONSTEXPR MDBasicInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDBasicInfo(const MDBasicInfo& from);
  MDBasicInfo(MDBasicInfo&& from) noexcept
    : MDBasicInfo() {
    *this = ::std::move(from);
  }

  inline MDBasicInfo& operator=(const MDBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDBasicInfo& operator=(MDBasicInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDBasicInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDBasicInfo* internal_default_instance() {
    return reinterpret_cast<const MDBasicInfo*>(
               &_MDBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MDBasicInfo& a, MDBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MDBasicInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDBasicInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDBasicInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDBasicInfo& from) {
    MDBasicInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDBasicInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDBasicInfo";
  }
  protected:
  explicit MDBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MDBasicInfo_ConstantParam ConstantParam;

  // accessors -------------------------------------------------------

  enum : int {
    kConstantParamsFieldNumber = 171,
    kHTSCSecurityIDFieldNumber = 1,
    kSecurityIDFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kChiSpellingFieldNumber = 4,
    kEnglishNameFieldNumber = 5,
    kSecuritySubTypeFieldNumber = 8,
    kListDateFieldNumber = 9,
    kCurrencyFieldNumber = 10,
    kTradingPhaseCodeFieldNumber = 14,
    kExchangeDateFieldNumber = 20,
    kExchangeSymbolFieldNumber = 21,
    kHKSpreadTableCodeFieldNumber = 27,
    kOptionContractIDFieldNumber = 40,
    kOptionContractSymbolFieldNumber = 41,
    kOptionUnderlyingSecurityIDFieldNumber = 42,
    kOptionUnderlyingSymbolFieldNumber = 43,
    kOptionUnderlyingTypeFieldNumber = 44,
    kOptionOptionTypeFieldNumber = 45,
    kOptionCallOrPutFieldNumber = 46,
    kOptionStartDateFieldNumber = 49,
    kOptionEndDateFieldNumber = 50,
    kOptionExerciseDateFieldNumber = 51,
    kOptionDeliveryDateFieldNumber = 52,
    kOptionExpireDateFieldNumber = 53,
    kOptionUpdateVersionFieldNumber = 54,
    kOptionPriceLimitTypeFieldNumber = 59,
    kOptionSecurityStatusFlagFieldNumber = 71,
    kOptionCarryInterestDateFieldNumber = 72,
    kOptionEarlyExpireDateFieldNumber = 73,
    kOptionStrategySecurityIDFieldNumber = 74,
    kFITradeProductTypeFieldNumber = 80,
    kFISecurityPropertyFieldNumber = 81,
    kFISecurityStatusFieldNumber = 82,
    kFIPledgedSecurityIDFieldNumber = 83,
    kFIOpenTimeFieldNumber = 84,
    kFICloseTimeFieldNumber = 85,
    kFIIssueModeFieldNumber = 86,
    kFIInterestTypeFieldNumber = 89,
    kFIInterestFrequencyFieldNumber = 90,
    kFIIssueStartDateFieldNumber = 96,
    kFIIssueEndDateFieldNumber = 97,
    kFIListDateFieldNumber = 98,
    kFIExpireDateFieldNumber = 99,
    kFINationalDebtTypeFieldNumber = 100,
    kFIIssueMethodFieldNumber = 101,
    kOptionListTypeFieldNumber = 110,
    kOptionDeliveryTypeFieldNumber = 111,
    kOptionMarketMakerFlagFieldNumber = 124,
    kOptionCombinationStrategyFieldNumber = 125,
    kDeliveryYearFieldNumber = 126,
    kDeliveryMonthFieldNumber = 127,
    kInstrumentIDFieldNumber = 128,
    kInstrumentNameFieldNumber = 129,
    kExchangeInstIDFieldNumber = 130,
    kProductIDFieldNumber = 131,
    kCreateDateFieldNumber = 137,
    kExpireDateFieldNumber = 138,
    kStartDelivDateFieldNumber = 139,
    kEndDelivDateFieldNumber = 140,
    kPositionTypeFieldNumber = 141,
    kMaxMarginSideAlgorithmFieldNumber = 144,
    kFormerSymbolFieldNumber = 147,
    kDelistDateFieldNumber = 148,
    kBaseContractIDFieldNumber = 170,
    kInterestAccrualDateFieldNumber = 173,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kOutstandingShareFieldNumber = 11,
    kPublicFloatShareQuantityFieldNumber = 12,
    kPreClosePxFieldNumber = 15,
    kMaxPxFieldNumber = 16,
    kMinPxFieldNumber = 17,
    kLotSizeFieldNumber = 18,
    kMDDateFieldNumber = 13,
    kLoanMarginIndicatorFieldNumber = 23,
    kTickSizeFieldNumber = 22,
    kPxAccuracyFieldNumber = 24,
    kIPOProfitableFieldNumber = 25,
    kPreSettlePxFieldNumber = 28,
    kDiffRightsIndicatorFieldNumber = 26,
    kShHkConnectFieldNumber = 30,
    kPreIOPVFieldNumber = 29,
    kOptionContractMultiplierUnitFieldNumber = 47,
    kOptionExercisePriceFieldNumber = 48,
    kOptionTotalLongPositionFieldNumber = 55,
    kOptionSecurityClosePxFieldNumber = 56,
    kOptionSettlPriceFieldNumber = 57,
    kOptionUnderlyingClosePxFieldNumber = 58,
    kOptionDailyPriceUpLimitFieldNumber = 60,
    kOptionDailyPriceDownLimitFieldNumber = 61,
    kOptionMarginUnitFieldNumber = 62,
    kOptionMarginRatioParam1FieldNumber = 63,
    kSzHkConnectFieldNumber = 31,
    kShortSellFlagFieldNumber = 19,
    kFICrossMarketFieldNumber = 102,
    kFIShortSellFlagFieldNumber = 103,
    kOptionMarginRatioParam2FieldNumber = 64,
    kOptionRoundLotFieldNumber = 65,
    kOptionLmtOrdMinFloorFieldNumber = 66,
    kOptionLmtOrdMaxFloorFieldNumber = 67,
    kOptionMktOrdMinFloorFieldNumber = 68,
    kOptionMktOrdMaxFloorFieldNumber = 69,
    kOptionTickSizeFieldNumber = 70,
    kFIFaceAmountFieldNumber = 87,
    kFIIssuePriceFieldNumber = 88,
    kFIGuaranteedInterestRateFieldNumber = 91,
    kFIBaseInterestRateFieldNumber = 92,
    kFIQuotedMarginFieldNumber = 93,
    kFITotalIssuanceFieldNumber = 95,
    kFITimeLimitFieldNumber = 94,
    kOptionAdjustTimesFieldNumber = 112,
    kFITotalShortSellQuotaFieldNumber = 104,
    kFIDealerShortSellQuotaFieldNumber = 105,
    kFIPreClosePxFieldNumber = 106,
    kFIPreWeightedPxFieldNumber = 107,
    kOptionContractPositionFieldNumber = 113,
    kOptionBuyQtyUpperLimitFieldNumber = 114,
    kOptionSellQtyUpperLimitFieldNumber = 115,
    kOptionMarketOrderBuyQtyUpperLimitFieldNumber = 116,
    kOptionMarketOrderSellQtyUpperLimitFieldNumber = 117,
    kOptionQuoteOrderBuyQtyUpperLimitFieldNumber = 118,
    kOptionQuoteOrderSellQtyUpperLimitFieldNumber = 119,
    kOptionBuyQtyUnitFieldNumber = 120,
    kOptionSellQtyUnitFieldNumber = 121,
    kOptionLastSellMarginFieldNumber = 122,
    kOptionSellMarginFieldNumber = 123,
    kMaxMarketOrderVolumeFieldNumber = 132,
    kMinMarketOrderVolumeFieldNumber = 133,
    kMaxLimitOrderVolumeFieldNumber = 134,
    kMinLimitOrderVolumeFieldNumber = 135,
    kVolumeMultipleFieldNumber = 136,
    kLongMarginRatioFieldNumber = 142,
    kShortMarginRatioFieldNumber = 143,
    kStrikePriceFieldNumber = 145,
    kPreOpenInterestFieldNumber = 146,
    kBuyQtyUnitFieldNumber = 149,
    kSellQtyUnitFieldNumber = 150,
    kBuyQtyUpperLimitFieldNumber = 161,
    kSellQtyUpperLimitFieldNumber = 162,
    kBuyQtyLowerLimitFieldNumber = 163,
    kSellQtyLowerLimitFieldNumber = 164,
    kVCMFlagFieldNumber = 165,
    kCASFlagFieldNumber = 166,
    kPOSUpperLimitPxFieldNumber = 168,
    kPOSLowerLimitPxFieldNumber = 169,
    kPOSFlagFieldNumber = 167,
    kDataMultiplePowerOf10FieldNumber = 172,
  };
  // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
  int constantparams_size() const;
  private:
  int _internal_constantparams_size() const;
  public:
  void clear_constantparams();
  ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* mutable_constantparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >*
      mutable_constantparams();
  private:
  const ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam& _internal_constantparams(int index) const;
  ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* _internal_add_constantparams();
  public:
  const ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam& constantparams(int index) const;
  ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* add_constantparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >&
      constantparams() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string SecurityID = 2;
  void clear_securityid();
  const std::string& securityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securityid();
  PROTOBUF_NODISCARD std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // string Symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string ChiSpelling = 4;
  void clear_chispelling();
  const std::string& chispelling() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chispelling(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chispelling();
  PROTOBUF_NODISCARD std::string* release_chispelling();
  void set_allocated_chispelling(std::string* chispelling);
  private:
  const std::string& _internal_chispelling() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chispelling(const std::string& value);
  std::string* _internal_mutable_chispelling();
  public:

  // string EnglishName = 5;
  void clear_englishname();
  const std::string& englishname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_englishname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_englishname();
  PROTOBUF_NODISCARD std::string* release_englishname();
  void set_allocated_englishname(std::string* englishname);
  private:
  const std::string& _internal_englishname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_englishname(const std::string& value);
  std::string* _internal_mutable_englishname();
  public:

  // string SecuritySubType = 8;
  void clear_securitysubtype();
  const std::string& securitysubtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitysubtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitysubtype();
  PROTOBUF_NODISCARD std::string* release_securitysubtype();
  void set_allocated_securitysubtype(std::string* securitysubtype);
  private:
  const std::string& _internal_securitysubtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitysubtype(const std::string& value);
  std::string* _internal_mutable_securitysubtype();
  public:

  // string ListDate = 9;
  void clear_listdate();
  const std::string& listdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listdate();
  PROTOBUF_NODISCARD std::string* release_listdate();
  void set_allocated_listdate(std::string* listdate);
  private:
  const std::string& _internal_listdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listdate(const std::string& value);
  std::string* _internal_mutable_listdate();
  public:

  // string Currency = 10;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string TradingPhaseCode = 14;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // string ExchangeDate = 20;
  void clear_exchangedate();
  const std::string& exchangedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchangedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchangedate();
  PROTOBUF_NODISCARD std::string* release_exchangedate();
  void set_allocated_exchangedate(std::string* exchangedate);
  private:
  const std::string& _internal_exchangedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchangedate(const std::string& value);
  std::string* _internal_mutable_exchangedate();
  public:

  // string ExchangeSymbol = 21;
  void clear_exchangesymbol();
  const std::string& exchangesymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchangesymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchangesymbol();
  PROTOBUF_NODISCARD std::string* release_exchangesymbol();
  void set_allocated_exchangesymbol(std::string* exchangesymbol);
  private:
  const std::string& _internal_exchangesymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchangesymbol(const std::string& value);
  std::string* _internal_mutable_exchangesymbol();
  public:

  // string HKSpreadTableCode = 27;
  void clear_hkspreadtablecode();
  const std::string& hkspreadtablecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hkspreadtablecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hkspreadtablecode();
  PROTOBUF_NODISCARD std::string* release_hkspreadtablecode();
  void set_allocated_hkspreadtablecode(std::string* hkspreadtablecode);
  private:
  const std::string& _internal_hkspreadtablecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hkspreadtablecode(const std::string& value);
  std::string* _internal_mutable_hkspreadtablecode();
  public:

  // string OptionContractID = 40;
  void clear_optioncontractid();
  const std::string& optioncontractid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optioncontractid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optioncontractid();
  PROTOBUF_NODISCARD std::string* release_optioncontractid();
  void set_allocated_optioncontractid(std::string* optioncontractid);
  private:
  const std::string& _internal_optioncontractid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optioncontractid(const std::string& value);
  std::string* _internal_mutable_optioncontractid();
  public:

  // string OptionContractSymbol = 41;
  void clear_optioncontractsymbol();
  const std::string& optioncontractsymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optioncontractsymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optioncontractsymbol();
  PROTOBUF_NODISCARD std::string* release_optioncontractsymbol();
  void set_allocated_optioncontractsymbol(std::string* optioncontractsymbol);
  private:
  const std::string& _internal_optioncontractsymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optioncontractsymbol(const std::string& value);
  std::string* _internal_mutable_optioncontractsymbol();
  public:

  // string OptionUnderlyingSecurityID = 42;
  void clear_optionunderlyingsecurityid();
  const std::string& optionunderlyingsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionunderlyingsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionunderlyingsecurityid();
  PROTOBUF_NODISCARD std::string* release_optionunderlyingsecurityid();
  void set_allocated_optionunderlyingsecurityid(std::string* optionunderlyingsecurityid);
  private:
  const std::string& _internal_optionunderlyingsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionunderlyingsecurityid(const std::string& value);
  std::string* _internal_mutable_optionunderlyingsecurityid();
  public:

  // string OptionUnderlyingSymbol = 43;
  void clear_optionunderlyingsymbol();
  const std::string& optionunderlyingsymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionunderlyingsymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionunderlyingsymbol();
  PROTOBUF_NODISCARD std::string* release_optionunderlyingsymbol();
  void set_allocated_optionunderlyingsymbol(std::string* optionunderlyingsymbol);
  private:
  const std::string& _internal_optionunderlyingsymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionunderlyingsymbol(const std::string& value);
  std::string* _internal_mutable_optionunderlyingsymbol();
  public:

  // string OptionUnderlyingType = 44;
  void clear_optionunderlyingtype();
  const std::string& optionunderlyingtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionunderlyingtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionunderlyingtype();
  PROTOBUF_NODISCARD std::string* release_optionunderlyingtype();
  void set_allocated_optionunderlyingtype(std::string* optionunderlyingtype);
  private:
  const std::string& _internal_optionunderlyingtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionunderlyingtype(const std::string& value);
  std::string* _internal_mutable_optionunderlyingtype();
  public:

  // string OptionOptionType = 45;
  void clear_optionoptiontype();
  const std::string& optionoptiontype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionoptiontype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionoptiontype();
  PROTOBUF_NODISCARD std::string* release_optionoptiontype();
  void set_allocated_optionoptiontype(std::string* optionoptiontype);
  private:
  const std::string& _internal_optionoptiontype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionoptiontype(const std::string& value);
  std::string* _internal_mutable_optionoptiontype();
  public:

  // string OptionCallOrPut = 46;
  void clear_optioncallorput();
  const std::string& optioncallorput() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optioncallorput(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optioncallorput();
  PROTOBUF_NODISCARD std::string* release_optioncallorput();
  void set_allocated_optioncallorput(std::string* optioncallorput);
  private:
  const std::string& _internal_optioncallorput() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optioncallorput(const std::string& value);
  std::string* _internal_mutable_optioncallorput();
  public:

  // string OptionStartDate = 49;
  void clear_optionstartdate();
  const std::string& optionstartdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionstartdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionstartdate();
  PROTOBUF_NODISCARD std::string* release_optionstartdate();
  void set_allocated_optionstartdate(std::string* optionstartdate);
  private:
  const std::string& _internal_optionstartdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionstartdate(const std::string& value);
  std::string* _internal_mutable_optionstartdate();
  public:

  // string OptionEndDate = 50;
  void clear_optionenddate();
  const std::string& optionenddate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionenddate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionenddate();
  PROTOBUF_NODISCARD std::string* release_optionenddate();
  void set_allocated_optionenddate(std::string* optionenddate);
  private:
  const std::string& _internal_optionenddate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionenddate(const std::string& value);
  std::string* _internal_mutable_optionenddate();
  public:

  // string OptionExerciseDate = 51;
  void clear_optionexercisedate();
  const std::string& optionexercisedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionexercisedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionexercisedate();
  PROTOBUF_NODISCARD std::string* release_optionexercisedate();
  void set_allocated_optionexercisedate(std::string* optionexercisedate);
  private:
  const std::string& _internal_optionexercisedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionexercisedate(const std::string& value);
  std::string* _internal_mutable_optionexercisedate();
  public:

  // string OptionDeliveryDate = 52;
  void clear_optiondeliverydate();
  const std::string& optiondeliverydate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optiondeliverydate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optiondeliverydate();
  PROTOBUF_NODISCARD std::string* release_optiondeliverydate();
  void set_allocated_optiondeliverydate(std::string* optiondeliverydate);
  private:
  const std::string& _internal_optiondeliverydate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optiondeliverydate(const std::string& value);
  std::string* _internal_mutable_optiondeliverydate();
  public:

  // string OptionExpireDate = 53;
  void clear_optionexpiredate();
  const std::string& optionexpiredate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionexpiredate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionexpiredate();
  PROTOBUF_NODISCARD std::string* release_optionexpiredate();
  void set_allocated_optionexpiredate(std::string* optionexpiredate);
  private:
  const std::string& _internal_optionexpiredate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionexpiredate(const std::string& value);
  std::string* _internal_mutable_optionexpiredate();
  public:

  // string OptionUpdateVersion = 54;
  void clear_optionupdateversion();
  const std::string& optionupdateversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionupdateversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionupdateversion();
  PROTOBUF_NODISCARD std::string* release_optionupdateversion();
  void set_allocated_optionupdateversion(std::string* optionupdateversion);
  private:
  const std::string& _internal_optionupdateversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionupdateversion(const std::string& value);
  std::string* _internal_mutable_optionupdateversion();
  public:

  // string OptionPriceLimitType = 59;
  void clear_optionpricelimittype();
  const std::string& optionpricelimittype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionpricelimittype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionpricelimittype();
  PROTOBUF_NODISCARD std::string* release_optionpricelimittype();
  void set_allocated_optionpricelimittype(std::string* optionpricelimittype);
  private:
  const std::string& _internal_optionpricelimittype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionpricelimittype(const std::string& value);
  std::string* _internal_mutable_optionpricelimittype();
  public:

  // string OptionSecurityStatusFlag = 71;
  void clear_optionsecuritystatusflag();
  const std::string& optionsecuritystatusflag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionsecuritystatusflag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionsecuritystatusflag();
  PROTOBUF_NODISCARD std::string* release_optionsecuritystatusflag();
  void set_allocated_optionsecuritystatusflag(std::string* optionsecuritystatusflag);
  private:
  const std::string& _internal_optionsecuritystatusflag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionsecuritystatusflag(const std::string& value);
  std::string* _internal_mutable_optionsecuritystatusflag();
  public:

  // string OptionCarryInterestDate = 72;
  void clear_optioncarryinterestdate();
  const std::string& optioncarryinterestdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optioncarryinterestdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optioncarryinterestdate();
  PROTOBUF_NODISCARD std::string* release_optioncarryinterestdate();
  void set_allocated_optioncarryinterestdate(std::string* optioncarryinterestdate);
  private:
  const std::string& _internal_optioncarryinterestdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optioncarryinterestdate(const std::string& value);
  std::string* _internal_mutable_optioncarryinterestdate();
  public:

  // string OptionEarlyExpireDate = 73;
  void clear_optionearlyexpiredate();
  const std::string& optionearlyexpiredate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionearlyexpiredate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionearlyexpiredate();
  PROTOBUF_NODISCARD std::string* release_optionearlyexpiredate();
  void set_allocated_optionearlyexpiredate(std::string* optionearlyexpiredate);
  private:
  const std::string& _internal_optionearlyexpiredate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionearlyexpiredate(const std::string& value);
  std::string* _internal_mutable_optionearlyexpiredate();
  public:

  // string OptionStrategySecurityID = 74;
  void clear_optionstrategysecurityid();
  const std::string& optionstrategysecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionstrategysecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionstrategysecurityid();
  PROTOBUF_NODISCARD std::string* release_optionstrategysecurityid();
  void set_allocated_optionstrategysecurityid(std::string* optionstrategysecurityid);
  private:
  const std::string& _internal_optionstrategysecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionstrategysecurityid(const std::string& value);
  std::string* _internal_mutable_optionstrategysecurityid();
  public:

  // string FITradeProductType = 80;
  void clear_fitradeproducttype();
  const std::string& fitradeproducttype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fitradeproducttype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fitradeproducttype();
  PROTOBUF_NODISCARD std::string* release_fitradeproducttype();
  void set_allocated_fitradeproducttype(std::string* fitradeproducttype);
  private:
  const std::string& _internal_fitradeproducttype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fitradeproducttype(const std::string& value);
  std::string* _internal_mutable_fitradeproducttype();
  public:

  // string FISecurityProperty = 81;
  void clear_fisecurityproperty();
  const std::string& fisecurityproperty() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fisecurityproperty(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fisecurityproperty();
  PROTOBUF_NODISCARD std::string* release_fisecurityproperty();
  void set_allocated_fisecurityproperty(std::string* fisecurityproperty);
  private:
  const std::string& _internal_fisecurityproperty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fisecurityproperty(const std::string& value);
  std::string* _internal_mutable_fisecurityproperty();
  public:

  // string FISecurityStatus = 82;
  void clear_fisecuritystatus();
  const std::string& fisecuritystatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fisecuritystatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fisecuritystatus();
  PROTOBUF_NODISCARD std::string* release_fisecuritystatus();
  void set_allocated_fisecuritystatus(std::string* fisecuritystatus);
  private:
  const std::string& _internal_fisecuritystatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fisecuritystatus(const std::string& value);
  std::string* _internal_mutable_fisecuritystatus();
  public:

  // string FIPledgedSecurityID = 83;
  void clear_fipledgedsecurityid();
  const std::string& fipledgedsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fipledgedsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fipledgedsecurityid();
  PROTOBUF_NODISCARD std::string* release_fipledgedsecurityid();
  void set_allocated_fipledgedsecurityid(std::string* fipledgedsecurityid);
  private:
  const std::string& _internal_fipledgedsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fipledgedsecurityid(const std::string& value);
  std::string* _internal_mutable_fipledgedsecurityid();
  public:

  // string FIOpenTime = 84;
  void clear_fiopentime();
  const std::string& fiopentime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fiopentime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fiopentime();
  PROTOBUF_NODISCARD std::string* release_fiopentime();
  void set_allocated_fiopentime(std::string* fiopentime);
  private:
  const std::string& _internal_fiopentime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fiopentime(const std::string& value);
  std::string* _internal_mutable_fiopentime();
  public:

  // string FICloseTime = 85;
  void clear_ficlosetime();
  const std::string& ficlosetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ficlosetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ficlosetime();
  PROTOBUF_NODISCARD std::string* release_ficlosetime();
  void set_allocated_ficlosetime(std::string* ficlosetime);
  private:
  const std::string& _internal_ficlosetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ficlosetime(const std::string& value);
  std::string* _internal_mutable_ficlosetime();
  public:

  // string FIIssueMode = 86;
  void clear_fiissuemode();
  const std::string& fiissuemode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fiissuemode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fiissuemode();
  PROTOBUF_NODISCARD std::string* release_fiissuemode();
  void set_allocated_fiissuemode(std::string* fiissuemode);
  private:
  const std::string& _internal_fiissuemode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fiissuemode(const std::string& value);
  std::string* _internal_mutable_fiissuemode();
  public:

  // string FIInterestType = 89;
  void clear_fiinteresttype();
  const std::string& fiinteresttype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fiinteresttype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fiinteresttype();
  PROTOBUF_NODISCARD std::string* release_fiinteresttype();
  void set_allocated_fiinteresttype(std::string* fiinteresttype);
  private:
  const std::string& _internal_fiinteresttype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fiinteresttype(const std::string& value);
  std::string* _internal_mutable_fiinteresttype();
  public:

  // string FIInterestFrequency = 90;
  void clear_fiinterestfrequency();
  const std::string& fiinterestfrequency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fiinterestfrequency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fiinterestfrequency();
  PROTOBUF_NODISCARD std::string* release_fiinterestfrequency();
  void set_allocated_fiinterestfrequency(std::string* fiinterestfrequency);
  private:
  const std::string& _internal_fiinterestfrequency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fiinterestfrequency(const std::string& value);
  std::string* _internal_mutable_fiinterestfrequency();
  public:

  // string FIIssueStartDate = 96;
  void clear_fiissuestartdate();
  const std::string& fiissuestartdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fiissuestartdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fiissuestartdate();
  PROTOBUF_NODISCARD std::string* release_fiissuestartdate();
  void set_allocated_fiissuestartdate(std::string* fiissuestartdate);
  private:
  const std::string& _internal_fiissuestartdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fiissuestartdate(const std::string& value);
  std::string* _internal_mutable_fiissuestartdate();
  public:

  // string FIIssueEndDate = 97;
  void clear_fiissueenddate();
  const std::string& fiissueenddate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fiissueenddate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fiissueenddate();
  PROTOBUF_NODISCARD std::string* release_fiissueenddate();
  void set_allocated_fiissueenddate(std::string* fiissueenddate);
  private:
  const std::string& _internal_fiissueenddate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fiissueenddate(const std::string& value);
  std::string* _internal_mutable_fiissueenddate();
  public:

  // string FIListDate = 98;
  void clear_filistdate();
  const std::string& filistdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filistdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filistdate();
  PROTOBUF_NODISCARD std::string* release_filistdate();
  void set_allocated_filistdate(std::string* filistdate);
  private:
  const std::string& _internal_filistdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filistdate(const std::string& value);
  std::string* _internal_mutable_filistdate();
  public:

  // string FIExpireDate = 99;
  void clear_fiexpiredate();
  const std::string& fiexpiredate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fiexpiredate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fiexpiredate();
  PROTOBUF_NODISCARD std::string* release_fiexpiredate();
  void set_allocated_fiexpiredate(std::string* fiexpiredate);
  private:
  const std::string& _internal_fiexpiredate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fiexpiredate(const std::string& value);
  std::string* _internal_mutable_fiexpiredate();
  public:

  // string FINationalDebtType = 100;
  void clear_finationaldebttype();
  const std::string& finationaldebttype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_finationaldebttype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_finationaldebttype();
  PROTOBUF_NODISCARD std::string* release_finationaldebttype();
  void set_allocated_finationaldebttype(std::string* finationaldebttype);
  private:
  const std::string& _internal_finationaldebttype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_finationaldebttype(const std::string& value);
  std::string* _internal_mutable_finationaldebttype();
  public:

  // string FIIssueMethod = 101;
  void clear_fiissuemethod();
  const std::string& fiissuemethod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fiissuemethod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fiissuemethod();
  PROTOBUF_NODISCARD std::string* release_fiissuemethod();
  void set_allocated_fiissuemethod(std::string* fiissuemethod);
  private:
  const std::string& _internal_fiissuemethod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fiissuemethod(const std::string& value);
  std::string* _internal_mutable_fiissuemethod();
  public:

  // string OptionListType = 110;
  void clear_optionlisttype();
  const std::string& optionlisttype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionlisttype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionlisttype();
  PROTOBUF_NODISCARD std::string* release_optionlisttype();
  void set_allocated_optionlisttype(std::string* optionlisttype);
  private:
  const std::string& _internal_optionlisttype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionlisttype(const std::string& value);
  std::string* _internal_mutable_optionlisttype();
  public:

  // string OptionDeliveryType = 111;
  void clear_optiondeliverytype();
  const std::string& optiondeliverytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optiondeliverytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optiondeliverytype();
  PROTOBUF_NODISCARD std::string* release_optiondeliverytype();
  void set_allocated_optiondeliverytype(std::string* optiondeliverytype);
  private:
  const std::string& _internal_optiondeliverytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optiondeliverytype(const std::string& value);
  std::string* _internal_mutable_optiondeliverytype();
  public:

  // string OptionMarketMakerFlag = 124;
  void clear_optionmarketmakerflag();
  const std::string& optionmarketmakerflag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optionmarketmakerflag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optionmarketmakerflag();
  PROTOBUF_NODISCARD std::string* release_optionmarketmakerflag();
  void set_allocated_optionmarketmakerflag(std::string* optionmarketmakerflag);
  private:
  const std::string& _internal_optionmarketmakerflag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optionmarketmakerflag(const std::string& value);
  std::string* _internal_mutable_optionmarketmakerflag();
  public:

  // string OptionCombinationStrategy = 125;
  void clear_optioncombinationstrategy();
  const std::string& optioncombinationstrategy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optioncombinationstrategy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optioncombinationstrategy();
  PROTOBUF_NODISCARD std::string* release_optioncombinationstrategy();
  void set_allocated_optioncombinationstrategy(std::string* optioncombinationstrategy);
  private:
  const std::string& _internal_optioncombinationstrategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optioncombinationstrategy(const std::string& value);
  std::string* _internal_mutable_optioncombinationstrategy();
  public:

  // string DeliveryYear = 126;
  void clear_deliveryyear();
  const std::string& deliveryyear() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deliveryyear(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deliveryyear();
  PROTOBUF_NODISCARD std::string* release_deliveryyear();
  void set_allocated_deliveryyear(std::string* deliveryyear);
  private:
  const std::string& _internal_deliveryyear() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deliveryyear(const std::string& value);
  std::string* _internal_mutable_deliveryyear();
  public:

  // string DeliveryMonth = 127;
  void clear_deliverymonth();
  const std::string& deliverymonth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deliverymonth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deliverymonth();
  PROTOBUF_NODISCARD std::string* release_deliverymonth();
  void set_allocated_deliverymonth(std::string* deliverymonth);
  private:
  const std::string& _internal_deliverymonth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deliverymonth(const std::string& value);
  std::string* _internal_mutable_deliverymonth();
  public:

  // string InstrumentID = 128;
  void clear_instrumentid();
  const std::string& instrumentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrumentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrumentid();
  PROTOBUF_NODISCARD std::string* release_instrumentid();
  void set_allocated_instrumentid(std::string* instrumentid);
  private:
  const std::string& _internal_instrumentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrumentid(const std::string& value);
  std::string* _internal_mutable_instrumentid();
  public:

  // string InstrumentName = 129;
  void clear_instrumentname();
  const std::string& instrumentname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrumentname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrumentname();
  PROTOBUF_NODISCARD std::string* release_instrumentname();
  void set_allocated_instrumentname(std::string* instrumentname);
  private:
  const std::string& _internal_instrumentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrumentname(const std::string& value);
  std::string* _internal_mutable_instrumentname();
  public:

  // string ExchangeInstID = 130;
  void clear_exchangeinstid();
  const std::string& exchangeinstid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchangeinstid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchangeinstid();
  PROTOBUF_NODISCARD std::string* release_exchangeinstid();
  void set_allocated_exchangeinstid(std::string* exchangeinstid);
  private:
  const std::string& _internal_exchangeinstid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchangeinstid(const std::string& value);
  std::string* _internal_mutable_exchangeinstid();
  public:

  // string ProductID = 131;
  void clear_productid();
  const std::string& productid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_productid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_productid();
  PROTOBUF_NODISCARD std::string* release_productid();
  void set_allocated_productid(std::string* productid);
  private:
  const std::string& _internal_productid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_productid(const std::string& value);
  std::string* _internal_mutable_productid();
  public:

  // string CreateDate = 137;
  void clear_createdate();
  const std::string& createdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdate();
  PROTOBUF_NODISCARD std::string* release_createdate();
  void set_allocated_createdate(std::string* createdate);
  private:
  const std::string& _internal_createdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdate(const std::string& value);
  std::string* _internal_mutable_createdate();
  public:

  // string ExpireDate = 138;
  void clear_expiredate();
  const std::string& expiredate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expiredate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expiredate();
  PROTOBUF_NODISCARD std::string* release_expiredate();
  void set_allocated_expiredate(std::string* expiredate);
  private:
  const std::string& _internal_expiredate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiredate(const std::string& value);
  std::string* _internal_mutable_expiredate();
  public:

  // string StartDelivDate = 139;
  void clear_startdelivdate();
  const std::string& startdelivdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_startdelivdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_startdelivdate();
  PROTOBUF_NODISCARD std::string* release_startdelivdate();
  void set_allocated_startdelivdate(std::string* startdelivdate);
  private:
  const std::string& _internal_startdelivdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_startdelivdate(const std::string& value);
  std::string* _internal_mutable_startdelivdate();
  public:

  // string EndDelivDate = 140;
  void clear_enddelivdate();
  const std::string& enddelivdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enddelivdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enddelivdate();
  PROTOBUF_NODISCARD std::string* release_enddelivdate();
  void set_allocated_enddelivdate(std::string* enddelivdate);
  private:
  const std::string& _internal_enddelivdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enddelivdate(const std::string& value);
  std::string* _internal_mutable_enddelivdate();
  public:

  // string PositionType = 141;
  void clear_positiontype();
  const std::string& positiontype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_positiontype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_positiontype();
  PROTOBUF_NODISCARD std::string* release_positiontype();
  void set_allocated_positiontype(std::string* positiontype);
  private:
  const std::string& _internal_positiontype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positiontype(const std::string& value);
  std::string* _internal_mutable_positiontype();
  public:

  // string MaxMarginSideAlgorithm = 144;
  void clear_maxmarginsidealgorithm();
  const std::string& maxmarginsidealgorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maxmarginsidealgorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maxmarginsidealgorithm();
  PROTOBUF_NODISCARD std::string* release_maxmarginsidealgorithm();
  void set_allocated_maxmarginsidealgorithm(std::string* maxmarginsidealgorithm);
  private:
  const std::string& _internal_maxmarginsidealgorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maxmarginsidealgorithm(const std::string& value);
  std::string* _internal_mutable_maxmarginsidealgorithm();
  public:

  // string FormerSymbol = 147;
  void clear_formersymbol();
  const std::string& formersymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_formersymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_formersymbol();
  PROTOBUF_NODISCARD std::string* release_formersymbol();
  void set_allocated_formersymbol(std::string* formersymbol);
  private:
  const std::string& _internal_formersymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_formersymbol(const std::string& value);
  std::string* _internal_mutable_formersymbol();
  public:

  // string DelistDate = 148;
  void clear_delistdate();
  const std::string& delistdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delistdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delistdate();
  PROTOBUF_NODISCARD std::string* release_delistdate();
  void set_allocated_delistdate(std::string* delistdate);
  private:
  const std::string& _internal_delistdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delistdate(const std::string& value);
  std::string* _internal_mutable_delistdate();
  public:

  // string BaseContractID = 170;
  void clear_basecontractid();
  const std::string& basecontractid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_basecontractid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_basecontractid();
  PROTOBUF_NODISCARD std::string* release_basecontractid();
  void set_allocated_basecontractid(std::string* basecontractid);
  private:
  const std::string& _internal_basecontractid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basecontractid(const std::string& value);
  std::string* _internal_mutable_basecontractid();
  public:

  // string InterestAccrualDate = 173;
  void clear_interestaccrualdate();
  const std::string& interestaccrualdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interestaccrualdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interestaccrualdate();
  PROTOBUF_NODISCARD std::string* release_interestaccrualdate();
  void set_allocated_interestaccrualdate(std::string* interestaccrualdate);
  private:
  const std::string& _internal_interestaccrualdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interestaccrualdate(const std::string& value);
  std::string* _internal_mutable_interestaccrualdate();
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 OutstandingShare = 11;
  void clear_outstandingshare();
  int64_t outstandingshare() const;
  void set_outstandingshare(int64_t value);
  private:
  int64_t _internal_outstandingshare() const;
  void _internal_set_outstandingshare(int64_t value);
  public:

  // int64 PublicFloatShareQuantity = 12;
  void clear_publicfloatsharequantity();
  int64_t publicfloatsharequantity() const;
  void set_publicfloatsharequantity(int64_t value);
  private:
  int64_t _internal_publicfloatsharequantity() const;
  void _internal_set_publicfloatsharequantity(int64_t value);
  public:

  // int64 PreClosePx = 15;
  void clear_preclosepx();
  int64_t preclosepx() const;
  void set_preclosepx(int64_t value);
  private:
  int64_t _internal_preclosepx() const;
  void _internal_set_preclosepx(int64_t value);
  public:

  // int64 MaxPx = 16;
  void clear_maxpx();
  int64_t maxpx() const;
  void set_maxpx(int64_t value);
  private:
  int64_t _internal_maxpx() const;
  void _internal_set_maxpx(int64_t value);
  public:

  // int64 MinPx = 17;
  void clear_minpx();
  int64_t minpx() const;
  void set_minpx(int64_t value);
  private:
  int64_t _internal_minpx() const;
  void _internal_set_minpx(int64_t value);
  public:

  // int64 LotSize = 18;
  void clear_lotsize();
  int64_t lotsize() const;
  void set_lotsize(int64_t value);
  private:
  int64_t _internal_lotsize() const;
  void _internal_set_lotsize(int64_t value);
  public:

  // int32 MDDate = 13;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 LoanMarginIndicator = 23;
  void clear_loanmarginindicator();
  int32_t loanmarginindicator() const;
  void set_loanmarginindicator(int32_t value);
  private:
  int32_t _internal_loanmarginindicator() const;
  void _internal_set_loanmarginindicator(int32_t value);
  public:

  // double TickSize = 22;
  void clear_ticksize();
  double ticksize() const;
  void set_ticksize(double value);
  private:
  double _internal_ticksize() const;
  void _internal_set_ticksize(double value);
  public:

  // int32 PxAccuracy = 24;
  void clear_pxaccuracy();
  int32_t pxaccuracy() const;
  void set_pxaccuracy(int32_t value);
  private:
  int32_t _internal_pxaccuracy() const;
  void _internal_set_pxaccuracy(int32_t value);
  public:

  // int32 IPOProfitable = 25;
  void clear_ipoprofitable();
  int32_t ipoprofitable() const;
  void set_ipoprofitable(int32_t value);
  private:
  int32_t _internal_ipoprofitable() const;
  void _internal_set_ipoprofitable(int32_t value);
  public:

  // double PreSettlePx = 28;
  void clear_presettlepx();
  double presettlepx() const;
  void set_presettlepx(double value);
  private:
  double _internal_presettlepx() const;
  void _internal_set_presettlepx(double value);
  public:

  // int32 DiffRightsIndicator = 26;
  void clear_diffrightsindicator();
  int32_t diffrightsindicator() const;
  void set_diffrightsindicator(int32_t value);
  private:
  int32_t _internal_diffrightsindicator() const;
  void _internal_set_diffrightsindicator(int32_t value);
  public:

  // int32 ShHkConnect = 30;
  void clear_shhkconnect();
  int32_t shhkconnect() const;
  void set_shhkconnect(int32_t value);
  private:
  int32_t _internal_shhkconnect() const;
  void _internal_set_shhkconnect(int32_t value);
  public:

  // double PreIOPV = 29;
  void clear_preiopv();
  double preiopv() const;
  void set_preiopv(double value);
  private:
  double _internal_preiopv() const;
  void _internal_set_preiopv(double value);
  public:

  // int64 OptionContractMultiplierUnit = 47;
  void clear_optioncontractmultiplierunit();
  int64_t optioncontractmultiplierunit() const;
  void set_optioncontractmultiplierunit(int64_t value);
  private:
  int64_t _internal_optioncontractmultiplierunit() const;
  void _internal_set_optioncontractmultiplierunit(int64_t value);
  public:

  // double OptionExercisePrice = 48;
  void clear_optionexerciseprice();
  double optionexerciseprice() const;
  void set_optionexerciseprice(double value);
  private:
  double _internal_optionexerciseprice() const;
  void _internal_set_optionexerciseprice(double value);
  public:

  // int64 OptionTotalLongPosition = 55;
  void clear_optiontotallongposition();
  int64_t optiontotallongposition() const;
  void set_optiontotallongposition(int64_t value);
  private:
  int64_t _internal_optiontotallongposition() const;
  void _internal_set_optiontotallongposition(int64_t value);
  public:

  // double OptionSecurityClosePx = 56;
  void clear_optionsecurityclosepx();
  double optionsecurityclosepx() const;
  void set_optionsecurityclosepx(double value);
  private:
  double _internal_optionsecurityclosepx() const;
  void _internal_set_optionsecurityclosepx(double value);
  public:

  // double OptionSettlPrice = 57;
  void clear_optionsettlprice();
  double optionsettlprice() const;
  void set_optionsettlprice(double value);
  private:
  double _internal_optionsettlprice() const;
  void _internal_set_optionsettlprice(double value);
  public:

  // double OptionUnderlyingClosePx = 58;
  void clear_optionunderlyingclosepx();
  double optionunderlyingclosepx() const;
  void set_optionunderlyingclosepx(double value);
  private:
  double _internal_optionunderlyingclosepx() const;
  void _internal_set_optionunderlyingclosepx(double value);
  public:

  // double OptionDailyPriceUpLimit = 60;
  void clear_optiondailypriceuplimit();
  double optiondailypriceuplimit() const;
  void set_optiondailypriceuplimit(double value);
  private:
  double _internal_optiondailypriceuplimit() const;
  void _internal_set_optiondailypriceuplimit(double value);
  public:

  // double OptionDailyPriceDownLimit = 61;
  void clear_optiondailypricedownlimit();
  double optiondailypricedownlimit() const;
  void set_optiondailypricedownlimit(double value);
  private:
  double _internal_optiondailypricedownlimit() const;
  void _internal_set_optiondailypricedownlimit(double value);
  public:

  // double OptionMarginUnit = 62;
  void clear_optionmarginunit();
  double optionmarginunit() const;
  void set_optionmarginunit(double value);
  private:
  double _internal_optionmarginunit() const;
  void _internal_set_optionmarginunit(double value);
  public:

  // double OptionMarginRatioParam1 = 63;
  void clear_optionmarginratioparam1();
  double optionmarginratioparam1() const;
  void set_optionmarginratioparam1(double value);
  private:
  double _internal_optionmarginratioparam1() const;
  void _internal_set_optionmarginratioparam1(double value);
  public:

  // int32 SzHkConnect = 31;
  void clear_szhkconnect();
  int32_t szhkconnect() const;
  void set_szhkconnect(int32_t value);
  private:
  int32_t _internal_szhkconnect() const;
  void _internal_set_szhkconnect(int32_t value);
  public:

  // bool ShortSellFlag = 19;
  void clear_shortsellflag();
  bool shortsellflag() const;
  void set_shortsellflag(bool value);
  private:
  bool _internal_shortsellflag() const;
  void _internal_set_shortsellflag(bool value);
  public:

  // bool FICrossMarket = 102;
  void clear_ficrossmarket();
  bool ficrossmarket() const;
  void set_ficrossmarket(bool value);
  private:
  bool _internal_ficrossmarket() const;
  void _internal_set_ficrossmarket(bool value);
  public:

  // bool FIShortSellFlag = 103;
  void clear_fishortsellflag();
  bool fishortsellflag() const;
  void set_fishortsellflag(bool value);
  private:
  bool _internal_fishortsellflag() const;
  void _internal_set_fishortsellflag(bool value);
  public:

  // double OptionMarginRatioParam2 = 64;
  void clear_optionmarginratioparam2();
  double optionmarginratioparam2() const;
  void set_optionmarginratioparam2(double value);
  private:
  double _internal_optionmarginratioparam2() const;
  void _internal_set_optionmarginratioparam2(double value);
  public:

  // int64 OptionRoundLot = 65;
  void clear_optionroundlot();
  int64_t optionroundlot() const;
  void set_optionroundlot(int64_t value);
  private:
  int64_t _internal_optionroundlot() const;
  void _internal_set_optionroundlot(int64_t value);
  public:

  // int64 OptionLmtOrdMinFloor = 66;
  void clear_optionlmtordminfloor();
  int64_t optionlmtordminfloor() const;
  void set_optionlmtordminfloor(int64_t value);
  private:
  int64_t _internal_optionlmtordminfloor() const;
  void _internal_set_optionlmtordminfloor(int64_t value);
  public:

  // int64 OptionLmtOrdMaxFloor = 67;
  void clear_optionlmtordmaxfloor();
  int64_t optionlmtordmaxfloor() const;
  void set_optionlmtordmaxfloor(int64_t value);
  private:
  int64_t _internal_optionlmtordmaxfloor() const;
  void _internal_set_optionlmtordmaxfloor(int64_t value);
  public:

  // int64 OptionMktOrdMinFloor = 68;
  void clear_optionmktordminfloor();
  int64_t optionmktordminfloor() const;
  void set_optionmktordminfloor(int64_t value);
  private:
  int64_t _internal_optionmktordminfloor() const;
  void _internal_set_optionmktordminfloor(int64_t value);
  public:

  // int64 OptionMktOrdMaxFloor = 69;
  void clear_optionmktordmaxfloor();
  int64_t optionmktordmaxfloor() const;
  void set_optionmktordmaxfloor(int64_t value);
  private:
  int64_t _internal_optionmktordmaxfloor() const;
  void _internal_set_optionmktordmaxfloor(int64_t value);
  public:

  // double OptionTickSize = 70;
  void clear_optionticksize();
  double optionticksize() const;
  void set_optionticksize(double value);
  private:
  double _internal_optionticksize() const;
  void _internal_set_optionticksize(double value);
  public:

  // double FIFaceAmount = 87;
  void clear_fifaceamount();
  double fifaceamount() const;
  void set_fifaceamount(double value);
  private:
  double _internal_fifaceamount() const;
  void _internal_set_fifaceamount(double value);
  public:

  // double FIIssuePrice = 88;
  void clear_fiissueprice();
  double fiissueprice() const;
  void set_fiissueprice(double value);
  private:
  double _internal_fiissueprice() const;
  void _internal_set_fiissueprice(double value);
  public:

  // double FIGuaranteedInterestRate = 91;
  void clear_figuaranteedinterestrate();
  double figuaranteedinterestrate() const;
  void set_figuaranteedinterestrate(double value);
  private:
  double _internal_figuaranteedinterestrate() const;
  void _internal_set_figuaranteedinterestrate(double value);
  public:

  // double FIBaseInterestRate = 92;
  void clear_fibaseinterestrate();
  double fibaseinterestrate() const;
  void set_fibaseinterestrate(double value);
  private:
  double _internal_fibaseinterestrate() const;
  void _internal_set_fibaseinterestrate(double value);
  public:

  // double FIQuotedMargin = 93;
  void clear_fiquotedmargin();
  double fiquotedmargin() const;
  void set_fiquotedmargin(double value);
  private:
  double _internal_fiquotedmargin() const;
  void _internal_set_fiquotedmargin(double value);
  public:

  // double FITotalIssuance = 95;
  void clear_fitotalissuance();
  double fitotalissuance() const;
  void set_fitotalissuance(double value);
  private:
  double _internal_fitotalissuance() const;
  void _internal_set_fitotalissuance(double value);
  public:

  // int32 FITimeLimit = 94;
  void clear_fitimelimit();
  int32_t fitimelimit() const;
  void set_fitimelimit(int32_t value);
  private:
  int32_t _internal_fitimelimit() const;
  void _internal_set_fitimelimit(int32_t value);
  public:

  // int32 OptionAdjustTimes = 112;
  void clear_optionadjusttimes();
  int32_t optionadjusttimes() const;
  void set_optionadjusttimes(int32_t value);
  private:
  int32_t _internal_optionadjusttimes() const;
  void _internal_set_optionadjusttimes(int32_t value);
  public:

  // double FITotalShortSellQuota = 104;
  void clear_fitotalshortsellquota();
  double fitotalshortsellquota() const;
  void set_fitotalshortsellquota(double value);
  private:
  double _internal_fitotalshortsellquota() const;
  void _internal_set_fitotalshortsellquota(double value);
  public:

  // double FIDealerShortSellQuota = 105;
  void clear_fidealershortsellquota();
  double fidealershortsellquota() const;
  void set_fidealershortsellquota(double value);
  private:
  double _internal_fidealershortsellquota() const;
  void _internal_set_fidealershortsellquota(double value);
  public:

  // double FIPreClosePx = 106;
  void clear_fipreclosepx();
  double fipreclosepx() const;
  void set_fipreclosepx(double value);
  private:
  double _internal_fipreclosepx() const;
  void _internal_set_fipreclosepx(double value);
  public:

  // double FIPreWeightedPx = 107;
  void clear_fipreweightedpx();
  double fipreweightedpx() const;
  void set_fipreweightedpx(double value);
  private:
  double _internal_fipreweightedpx() const;
  void _internal_set_fipreweightedpx(double value);
  public:

  // int64 OptionContractPosition = 113;
  void clear_optioncontractposition();
  int64_t optioncontractposition() const;
  void set_optioncontractposition(int64_t value);
  private:
  int64_t _internal_optioncontractposition() const;
  void _internal_set_optioncontractposition(int64_t value);
  public:

  // int64 OptionBuyQtyUpperLimit = 114;
  void clear_optionbuyqtyupperlimit();
  int64_t optionbuyqtyupperlimit() const;
  void set_optionbuyqtyupperlimit(int64_t value);
  private:
  int64_t _internal_optionbuyqtyupperlimit() const;
  void _internal_set_optionbuyqtyupperlimit(int64_t value);
  public:

  // int64 OptionSellQtyUpperLimit = 115;
  void clear_optionsellqtyupperlimit();
  int64_t optionsellqtyupperlimit() const;
  void set_optionsellqtyupperlimit(int64_t value);
  private:
  int64_t _internal_optionsellqtyupperlimit() const;
  void _internal_set_optionsellqtyupperlimit(int64_t value);
  public:

  // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
  void clear_optionmarketorderbuyqtyupperlimit();
  int64_t optionmarketorderbuyqtyupperlimit() const;
  void set_optionmarketorderbuyqtyupperlimit(int64_t value);
  private:
  int64_t _internal_optionmarketorderbuyqtyupperlimit() const;
  void _internal_set_optionmarketorderbuyqtyupperlimit(int64_t value);
  public:

  // int64 OptionMarketOrderSellQtyUpperLimit = 117;
  void clear_optionmarketordersellqtyupperlimit();
  int64_t optionmarketordersellqtyupperlimit() const;
  void set_optionmarketordersellqtyupperlimit(int64_t value);
  private:
  int64_t _internal_optionmarketordersellqtyupperlimit() const;
  void _internal_set_optionmarketordersellqtyupperlimit(int64_t value);
  public:

  // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
  void clear_optionquoteorderbuyqtyupperlimit();
  int64_t optionquoteorderbuyqtyupperlimit() const;
  void set_optionquoteorderbuyqtyupperlimit(int64_t value);
  private:
  int64_t _internal_optionquoteorderbuyqtyupperlimit() const;
  void _internal_set_optionquoteorderbuyqtyupperlimit(int64_t value);
  public:

  // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
  void clear_optionquoteordersellqtyupperlimit();
  int64_t optionquoteordersellqtyupperlimit() const;
  void set_optionquoteordersellqtyupperlimit(int64_t value);
  private:
  int64_t _internal_optionquoteordersellqtyupperlimit() const;
  void _internal_set_optionquoteordersellqtyupperlimit(int64_t value);
  public:

  // int64 OptionBuyQtyUnit = 120;
  void clear_optionbuyqtyunit();
  int64_t optionbuyqtyunit() const;
  void set_optionbuyqtyunit(int64_t value);
  private:
  int64_t _internal_optionbuyqtyunit() const;
  void _internal_set_optionbuyqtyunit(int64_t value);
  public:

  // int64 OptionSellQtyUnit = 121;
  void clear_optionsellqtyunit();
  int64_t optionsellqtyunit() const;
  void set_optionsellqtyunit(int64_t value);
  private:
  int64_t _internal_optionsellqtyunit() const;
  void _internal_set_optionsellqtyunit(int64_t value);
  public:

  // double OptionLastSellMargin = 122;
  void clear_optionlastsellmargin();
  double optionlastsellmargin() const;
  void set_optionlastsellmargin(double value);
  private:
  double _internal_optionlastsellmargin() const;
  void _internal_set_optionlastsellmargin(double value);
  public:

  // double OptionSellMargin = 123;
  void clear_optionsellmargin();
  double optionsellmargin() const;
  void set_optionsellmargin(double value);
  private:
  double _internal_optionsellmargin() const;
  void _internal_set_optionsellmargin(double value);
  public:

  // int64 MaxMarketOrderVolume = 132;
  void clear_maxmarketordervolume();
  int64_t maxmarketordervolume() const;
  void set_maxmarketordervolume(int64_t value);
  private:
  int64_t _internal_maxmarketordervolume() const;
  void _internal_set_maxmarketordervolume(int64_t value);
  public:

  // int64 MinMarketOrderVolume = 133;
  void clear_minmarketordervolume();
  int64_t minmarketordervolume() const;
  void set_minmarketordervolume(int64_t value);
  private:
  int64_t _internal_minmarketordervolume() const;
  void _internal_set_minmarketordervolume(int64_t value);
  public:

  // int64 MaxLimitOrderVolume = 134;
  void clear_maxlimitordervolume();
  int64_t maxlimitordervolume() const;
  void set_maxlimitordervolume(int64_t value);
  private:
  int64_t _internal_maxlimitordervolume() const;
  void _internal_set_maxlimitordervolume(int64_t value);
  public:

  // int64 MinLimitOrderVolume = 135;
  void clear_minlimitordervolume();
  int64_t minlimitordervolume() const;
  void set_minlimitordervolume(int64_t value);
  private:
  int64_t _internal_minlimitordervolume() const;
  void _internal_set_minlimitordervolume(int64_t value);
  public:

  // int64 VolumeMultiple = 136;
  void clear_volumemultiple();
  int64_t volumemultiple() const;
  void set_volumemultiple(int64_t value);
  private:
  int64_t _internal_volumemultiple() const;
  void _internal_set_volumemultiple(int64_t value);
  public:

  // double LongMarginRatio = 142;
  void clear_longmarginratio();
  double longmarginratio() const;
  void set_longmarginratio(double value);
  private:
  double _internal_longmarginratio() const;
  void _internal_set_longmarginratio(double value);
  public:

  // double ShortMarginRatio = 143;
  void clear_shortmarginratio();
  double shortmarginratio() const;
  void set_shortmarginratio(double value);
  private:
  double _internal_shortmarginratio() const;
  void _internal_set_shortmarginratio(double value);
  public:

  // double StrikePrice = 145;
  void clear_strikeprice();
  double strikeprice() const;
  void set_strikeprice(double value);
  private:
  double _internal_strikeprice() const;
  void _internal_set_strikeprice(double value);
  public:

  // double PreOpenInterest = 146;
  void clear_preopeninterest();
  double preopeninterest() const;
  void set_preopeninterest(double value);
  private:
  double _internal_preopeninterest() const;
  void _internal_set_preopeninterest(double value);
  public:

  // int64 BuyQtyUnit = 149;
  void clear_buyqtyunit();
  int64_t buyqtyunit() const;
  void set_buyqtyunit(int64_t value);
  private:
  int64_t _internal_buyqtyunit() const;
  void _internal_set_buyqtyunit(int64_t value);
  public:

  // int64 SellQtyUnit = 150;
  void clear_sellqtyunit();
  int64_t sellqtyunit() const;
  void set_sellqtyunit(int64_t value);
  private:
  int64_t _internal_sellqtyunit() const;
  void _internal_set_sellqtyunit(int64_t value);
  public:

  // int64 BuyQtyUpperLimit = 161;
  void clear_buyqtyupperlimit();
  int64_t buyqtyupperlimit() const;
  void set_buyqtyupperlimit(int64_t value);
  private:
  int64_t _internal_buyqtyupperlimit() const;
  void _internal_set_buyqtyupperlimit(int64_t value);
  public:

  // int64 SellQtyUpperLimit = 162;
  void clear_sellqtyupperlimit();
  int64_t sellqtyupperlimit() const;
  void set_sellqtyupperlimit(int64_t value);
  private:
  int64_t _internal_sellqtyupperlimit() const;
  void _internal_set_sellqtyupperlimit(int64_t value);
  public:

  // int64 BuyQtyLowerLimit = 163;
  void clear_buyqtylowerlimit();
  int64_t buyqtylowerlimit() const;
  void set_buyqtylowerlimit(int64_t value);
  private:
  int64_t _internal_buyqtylowerlimit() const;
  void _internal_set_buyqtylowerlimit(int64_t value);
  public:

  // int64 SellQtyLowerLimit = 164;
  void clear_sellqtylowerlimit();
  int64_t sellqtylowerlimit() const;
  void set_sellqtylowerlimit(int64_t value);
  private:
  int64_t _internal_sellqtylowerlimit() const;
  void _internal_set_sellqtylowerlimit(int64_t value);
  public:

  // int32 VCMFlag = 165;
  void clear_vcmflag();
  int32_t vcmflag() const;
  void set_vcmflag(int32_t value);
  private:
  int32_t _internal_vcmflag() const;
  void _internal_set_vcmflag(int32_t value);
  public:

  // int32 CASFlag = 166;
  void clear_casflag();
  int32_t casflag() const;
  void set_casflag(int32_t value);
  private:
  int32_t _internal_casflag() const;
  void _internal_set_casflag(int32_t value);
  public:

  // double POSUpperLimitPx = 168;
  void clear_posupperlimitpx();
  double posupperlimitpx() const;
  void set_posupperlimitpx(double value);
  private:
  double _internal_posupperlimitpx() const;
  void _internal_set_posupperlimitpx(double value);
  public:

  // double POSLowerLimitPx = 169;
  void clear_poslowerlimitpx();
  double poslowerlimitpx() const;
  void set_poslowerlimitpx(double value);
  private:
  double _internal_poslowerlimitpx() const;
  void _internal_set_poslowerlimitpx(double value);
  public:

  // int32 POSFlag = 167;
  void clear_posflag();
  int32_t posflag() const;
  void set_posflag(int32_t value);
  private:
  int32_t _internal_posflag() const;
  void _internal_set_posflag(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 172;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam > constantparams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chispelling_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr englishname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitysubtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangesymbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hkspreadtablecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncontractid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncontractsymbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionunderlyingsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionunderlyingsymbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionunderlyingtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionoptiontype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncallorput_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionstartdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionenddate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionexercisedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optiondeliverydate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionexpiredate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionupdateversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionpricelimittype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionsecuritystatusflag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncarryinterestdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionearlyexpiredate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionstrategysecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fitradeproducttype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fisecurityproperty_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fisecuritystatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fipledgedsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiopentime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ficlosetime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiissuemode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiinteresttype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiinterestfrequency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiissuestartdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiissueenddate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filistdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiexpiredate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finationaldebttype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiissuemethod_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionlisttype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optiondeliverytype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionmarketmakerflag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncombinationstrategy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deliveryyear_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deliverymonth_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangeinstid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiredate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startdelivdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enddelivdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positiontype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxmarginsidealgorithm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formersymbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delistdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basecontractid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interestaccrualdate_;
    int securityidsource_;
    int securitytype_;
    int64_t outstandingshare_;
    int64_t publicfloatsharequantity_;
    int64_t preclosepx_;
    int64_t maxpx_;
    int64_t minpx_;
    int64_t lotsize_;
    int32_t mddate_;
    int32_t loanmarginindicator_;
    double ticksize_;
    int32_t pxaccuracy_;
    int32_t ipoprofitable_;
    double presettlepx_;
    int32_t diffrightsindicator_;
    int32_t shhkconnect_;
    double preiopv_;
    int64_t optioncontractmultiplierunit_;
    double optionexerciseprice_;
    int64_t optiontotallongposition_;
    double optionsecurityclosepx_;
    double optionsettlprice_;
    double optionunderlyingclosepx_;
    double optiondailypriceuplimit_;
    double optiondailypricedownlimit_;
    double optionmarginunit_;
    double optionmarginratioparam1_;
    int32_t szhkconnect_;
    bool shortsellflag_;
    bool ficrossmarket_;
    bool fishortsellflag_;
    double optionmarginratioparam2_;
    int64_t optionroundlot_;
    int64_t optionlmtordminfloor_;
    int64_t optionlmtordmaxfloor_;
    int64_t optionmktordminfloor_;
    int64_t optionmktordmaxfloor_;
    double optionticksize_;
    double fifaceamount_;
    double fiissueprice_;
    double figuaranteedinterestrate_;
    double fibaseinterestrate_;
    double fiquotedmargin_;
    double fitotalissuance_;
    int32_t fitimelimit_;
    int32_t optionadjusttimes_;
    double fitotalshortsellquota_;
    double fidealershortsellquota_;
    double fipreclosepx_;
    double fipreweightedpx_;
    int64_t optioncontractposition_;
    int64_t optionbuyqtyupperlimit_;
    int64_t optionsellqtyupperlimit_;
    int64_t optionmarketorderbuyqtyupperlimit_;
    int64_t optionmarketordersellqtyupperlimit_;
    int64_t optionquoteorderbuyqtyupperlimit_;
    int64_t optionquoteordersellqtyupperlimit_;
    int64_t optionbuyqtyunit_;
    int64_t optionsellqtyunit_;
    double optionlastsellmargin_;
    double optionsellmargin_;
    int64_t maxmarketordervolume_;
    int64_t minmarketordervolume_;
    int64_t maxlimitordervolume_;
    int64_t minlimitordervolume_;
    int64_t volumemultiple_;
    double longmarginratio_;
    double shortmarginratio_;
    double strikeprice_;
    double preopeninterest_;
    int64_t buyqtyunit_;
    int64_t sellqtyunit_;
    int64_t buyqtyupperlimit_;
    int64_t sellqtyupperlimit_;
    int64_t buyqtylowerlimit_;
    int64_t sellqtylowerlimit_;
    int32_t vcmflag_;
    int32_t casflag_;
    double posupperlimitpx_;
    double poslowerlimitpx_;
    int32_t posflag_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDBasicInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDBasicInfo_ConstantParam

// string ParamName = 1;
inline void MDBasicInfo_ConstantParam::clear_paramname() {
  _impl_.paramname_.ClearToEmpty();
}
inline const std::string& MDBasicInfo_ConstantParam::paramname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
  return _internal_paramname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo_ConstantParam::set_paramname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.paramname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
}
inline std::string* MDBasicInfo_ConstantParam::mutable_paramname() {
  std::string* _s = _internal_mutable_paramname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
  return _s;
}
inline const std::string& MDBasicInfo_ConstantParam::_internal_paramname() const {
  return _impl_.paramname_.Get();
}
inline void MDBasicInfo_ConstantParam::_internal_set_paramname(const std::string& value) {
  
  _impl_.paramname_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo_ConstantParam::_internal_mutable_paramname() {
  
  return _impl_.paramname_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo_ConstantParam::release_paramname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
  return _impl_.paramname_.Release();
}
inline void MDBasicInfo_ConstantParam::set_allocated_paramname(std::string* paramname) {
  if (paramname != nullptr) {
    
  } else {
    
  }
  _impl_.paramname_.SetAllocated(paramname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paramname_.IsDefault()) {
    _impl_.paramname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
}

// string ParamValue = 2;
inline void MDBasicInfo_ConstantParam::clear_paramvalue() {
  _impl_.paramvalue_.ClearToEmpty();
}
inline const std::string& MDBasicInfo_ConstantParam::paramvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
  return _internal_paramvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo_ConstantParam::set_paramvalue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.paramvalue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
}
inline std::string* MDBasicInfo_ConstantParam::mutable_paramvalue() {
  std::string* _s = _internal_mutable_paramvalue();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
  return _s;
}
inline const std::string& MDBasicInfo_ConstantParam::_internal_paramvalue() const {
  return _impl_.paramvalue_.Get();
}
inline void MDBasicInfo_ConstantParam::_internal_set_paramvalue(const std::string& value) {
  
  _impl_.paramvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo_ConstantParam::_internal_mutable_paramvalue() {
  
  return _impl_.paramvalue_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo_ConstantParam::release_paramvalue() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
  return _impl_.paramvalue_.Release();
}
inline void MDBasicInfo_ConstantParam::set_allocated_paramvalue(std::string* paramvalue) {
  if (paramvalue != nullptr) {
    
  } else {
    
  }
  _impl_.paramvalue_.SetAllocated(paramvalue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paramvalue_.IsDefault()) {
    _impl_.paramvalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
}

// -------------------------------------------------------------------

// MDBasicInfo

// string HTSCSecurityID = 1;
inline void MDBasicInfo::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
}
inline std::string* MDBasicInfo::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDBasicInfo::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDBasicInfo::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
}

// string SecurityID = 2;
inline void MDBasicInfo::clear_securityid() {
  _impl_.securityid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::securityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
  return _internal_securityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_securityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.securityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
}
inline std::string* MDBasicInfo::mutable_securityid() {
  std::string* _s = _internal_mutable_securityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_securityid() const {
  return _impl_.securityid_.Get();
}
inline void MDBasicInfo::_internal_set_securityid(const std::string& value) {
  
  _impl_.securityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_securityid() {
  
  return _impl_.securityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_securityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
  return _impl_.securityid_.Release();
}
inline void MDBasicInfo::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    
  } else {
    
  }
  _impl_.securityid_.SetAllocated(securityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securityid_.IsDefault()) {
    _impl_.securityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
}

// string Symbol = 3;
inline void MDBasicInfo::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::symbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
}
inline std::string* MDBasicInfo::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void MDBasicInfo::_internal_set_symbol(const std::string& value) {
  
  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_symbol() {
  
  return _impl_.symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_symbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
  return _impl_.symbol_.Release();
}
inline void MDBasicInfo::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  _impl_.symbol_.SetAllocated(symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
}

// string ChiSpelling = 4;
inline void MDBasicInfo::clear_chispelling() {
  _impl_.chispelling_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::chispelling() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
  return _internal_chispelling();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_chispelling(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chispelling_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
}
inline std::string* MDBasicInfo::mutable_chispelling() {
  std::string* _s = _internal_mutable_chispelling();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_chispelling() const {
  return _impl_.chispelling_.Get();
}
inline void MDBasicInfo::_internal_set_chispelling(const std::string& value) {
  
  _impl_.chispelling_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_chispelling() {
  
  return _impl_.chispelling_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_chispelling() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
  return _impl_.chispelling_.Release();
}
inline void MDBasicInfo::set_allocated_chispelling(std::string* chispelling) {
  if (chispelling != nullptr) {
    
  } else {
    
  }
  _impl_.chispelling_.SetAllocated(chispelling, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chispelling_.IsDefault()) {
    _impl_.chispelling_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
}

// string EnglishName = 5;
inline void MDBasicInfo::clear_englishname() {
  _impl_.englishname_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::englishname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
  return _internal_englishname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_englishname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.englishname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
}
inline std::string* MDBasicInfo::mutable_englishname() {
  std::string* _s = _internal_mutable_englishname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_englishname() const {
  return _impl_.englishname_.Get();
}
inline void MDBasicInfo::_internal_set_englishname(const std::string& value) {
  
  _impl_.englishname_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_englishname() {
  
  return _impl_.englishname_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_englishname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
  return _impl_.englishname_.Release();
}
inline void MDBasicInfo::set_allocated_englishname(std::string* englishname) {
  if (englishname != nullptr) {
    
  } else {
    
  }
  _impl_.englishname_.SetAllocated(englishname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.englishname_.IsDefault()) {
    _impl_.englishname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDBasicInfo::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDBasicInfo::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDBasicInfo::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.securityIDSource)
  return _internal_securityidsource();
}
inline void MDBasicInfo::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDBasicInfo::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDBasicInfo::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDBasicInfo::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDBasicInfo::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.securityType)
  return _internal_securitytype();
}
inline void MDBasicInfo::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDBasicInfo::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.securityType)
}

// string SecuritySubType = 8;
inline void MDBasicInfo::clear_securitysubtype() {
  _impl_.securitysubtype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::securitysubtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
  return _internal_securitysubtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_securitysubtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.securitysubtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
}
inline std::string* MDBasicInfo::mutable_securitysubtype() {
  std::string* _s = _internal_mutable_securitysubtype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_securitysubtype() const {
  return _impl_.securitysubtype_.Get();
}
inline void MDBasicInfo::_internal_set_securitysubtype(const std::string& value) {
  
  _impl_.securitysubtype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_securitysubtype() {
  
  return _impl_.securitysubtype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_securitysubtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
  return _impl_.securitysubtype_.Release();
}
inline void MDBasicInfo::set_allocated_securitysubtype(std::string* securitysubtype) {
  if (securitysubtype != nullptr) {
    
  } else {
    
  }
  _impl_.securitysubtype_.SetAllocated(securitysubtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitysubtype_.IsDefault()) {
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
}

// string ListDate = 9;
inline void MDBasicInfo::clear_listdate() {
  _impl_.listdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::listdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
  return _internal_listdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_listdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.listdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
}
inline std::string* MDBasicInfo::mutable_listdate() {
  std::string* _s = _internal_mutable_listdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_listdate() const {
  return _impl_.listdate_.Get();
}
inline void MDBasicInfo::_internal_set_listdate(const std::string& value) {
  
  _impl_.listdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_listdate() {
  
  return _impl_.listdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_listdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
  return _impl_.listdate_.Release();
}
inline void MDBasicInfo::set_allocated_listdate(std::string* listdate) {
  if (listdate != nullptr) {
    
  } else {
    
  }
  _impl_.listdate_.SetAllocated(listdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listdate_.IsDefault()) {
    _impl_.listdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
}

// string Currency = 10;
inline void MDBasicInfo::clear_currency() {
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::currency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_currency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
}
inline std::string* MDBasicInfo::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void MDBasicInfo::_internal_set_currency(const std::string& value) {
  
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_currency() {
  
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_currency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
  return _impl_.currency_.Release();
}
inline void MDBasicInfo::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
}

// int64 OutstandingShare = 11;
inline void MDBasicInfo::clear_outstandingshare() {
  _impl_.outstandingshare_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_outstandingshare() const {
  return _impl_.outstandingshare_;
}
inline int64_t MDBasicInfo::outstandingshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OutstandingShare)
  return _internal_outstandingshare();
}
inline void MDBasicInfo::_internal_set_outstandingshare(int64_t value) {
  
  _impl_.outstandingshare_ = value;
}
inline void MDBasicInfo::set_outstandingshare(int64_t value) {
  _internal_set_outstandingshare(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OutstandingShare)
}

// int64 PublicFloatShareQuantity = 12;
inline void MDBasicInfo::clear_publicfloatsharequantity() {
  _impl_.publicfloatsharequantity_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_publicfloatsharequantity() const {
  return _impl_.publicfloatsharequantity_;
}
inline int64_t MDBasicInfo::publicfloatsharequantity() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PublicFloatShareQuantity)
  return _internal_publicfloatsharequantity();
}
inline void MDBasicInfo::_internal_set_publicfloatsharequantity(int64_t value) {
  
  _impl_.publicfloatsharequantity_ = value;
}
inline void MDBasicInfo::set_publicfloatsharequantity(int64_t value) {
  _internal_set_publicfloatsharequantity(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PublicFloatShareQuantity)
}

// int32 MDDate = 13;
inline void MDBasicInfo::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDBasicInfo::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDBasicInfo::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MDDate)
  return _internal_mddate();
}
inline void MDBasicInfo::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDBasicInfo::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MDDate)
}

// string TradingPhaseCode = 14;
inline void MDBasicInfo::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
}
inline std::string* MDBasicInfo::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDBasicInfo::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDBasicInfo::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
}

// int64 PreClosePx = 15;
inline void MDBasicInfo::clear_preclosepx() {
  _impl_.preclosepx_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_preclosepx() const {
  return _impl_.preclosepx_;
}
inline int64_t MDBasicInfo::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PreClosePx)
  return _internal_preclosepx();
}
inline void MDBasicInfo::_internal_set_preclosepx(int64_t value) {
  
  _impl_.preclosepx_ = value;
}
inline void MDBasicInfo::set_preclosepx(int64_t value) {
  _internal_set_preclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PreClosePx)
}

// int64 MaxPx = 16;
inline void MDBasicInfo::clear_maxpx() {
  _impl_.maxpx_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_maxpx() const {
  return _impl_.maxpx_;
}
inline int64_t MDBasicInfo::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MaxPx)
  return _internal_maxpx();
}
inline void MDBasicInfo::_internal_set_maxpx(int64_t value) {
  
  _impl_.maxpx_ = value;
}
inline void MDBasicInfo::set_maxpx(int64_t value) {
  _internal_set_maxpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MaxPx)
}

// int64 MinPx = 17;
inline void MDBasicInfo::clear_minpx() {
  _impl_.minpx_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_minpx() const {
  return _impl_.minpx_;
}
inline int64_t MDBasicInfo::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MinPx)
  return _internal_minpx();
}
inline void MDBasicInfo::_internal_set_minpx(int64_t value) {
  
  _impl_.minpx_ = value;
}
inline void MDBasicInfo::set_minpx(int64_t value) {
  _internal_set_minpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MinPx)
}

// int64 LotSize = 18;
inline void MDBasicInfo::clear_lotsize() {
  _impl_.lotsize_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_lotsize() const {
  return _impl_.lotsize_;
}
inline int64_t MDBasicInfo::lotsize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.LotSize)
  return _internal_lotsize();
}
inline void MDBasicInfo::_internal_set_lotsize(int64_t value) {
  
  _impl_.lotsize_ = value;
}
inline void MDBasicInfo::set_lotsize(int64_t value) {
  _internal_set_lotsize(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.LotSize)
}

// bool ShortSellFlag = 19;
inline void MDBasicInfo::clear_shortsellflag() {
  _impl_.shortsellflag_ = false;
}
inline bool MDBasicInfo::_internal_shortsellflag() const {
  return _impl_.shortsellflag_;
}
inline bool MDBasicInfo::shortsellflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ShortSellFlag)
  return _internal_shortsellflag();
}
inline void MDBasicInfo::_internal_set_shortsellflag(bool value) {
  
  _impl_.shortsellflag_ = value;
}
inline void MDBasicInfo::set_shortsellflag(bool value) {
  _internal_set_shortsellflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ShortSellFlag)
}

// string ExchangeDate = 20;
inline void MDBasicInfo::clear_exchangedate() {
  _impl_.exchangedate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
  return _internal_exchangedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_exchangedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exchangedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
}
inline std::string* MDBasicInfo::mutable_exchangedate() {
  std::string* _s = _internal_mutable_exchangedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_exchangedate() const {
  return _impl_.exchangedate_.Get();
}
inline void MDBasicInfo::_internal_set_exchangedate(const std::string& value) {
  
  _impl_.exchangedate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_exchangedate() {
  
  return _impl_.exchangedate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_exchangedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
  return _impl_.exchangedate_.Release();
}
inline void MDBasicInfo::set_allocated_exchangedate(std::string* exchangedate) {
  if (exchangedate != nullptr) {
    
  } else {
    
  }
  _impl_.exchangedate_.SetAllocated(exchangedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exchangedate_.IsDefault()) {
    _impl_.exchangedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
}

// string ExchangeSymbol = 21;
inline void MDBasicInfo::clear_exchangesymbol() {
  _impl_.exchangesymbol_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::exchangesymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
  return _internal_exchangesymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_exchangesymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exchangesymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
}
inline std::string* MDBasicInfo::mutable_exchangesymbol() {
  std::string* _s = _internal_mutable_exchangesymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_exchangesymbol() const {
  return _impl_.exchangesymbol_.Get();
}
inline void MDBasicInfo::_internal_set_exchangesymbol(const std::string& value) {
  
  _impl_.exchangesymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_exchangesymbol() {
  
  return _impl_.exchangesymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_exchangesymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
  return _impl_.exchangesymbol_.Release();
}
inline void MDBasicInfo::set_allocated_exchangesymbol(std::string* exchangesymbol) {
  if (exchangesymbol != nullptr) {
    
  } else {
    
  }
  _impl_.exchangesymbol_.SetAllocated(exchangesymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exchangesymbol_.IsDefault()) {
    _impl_.exchangesymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
}

// double TickSize = 22;
inline void MDBasicInfo::clear_ticksize() {
  _impl_.ticksize_ = 0;
}
inline double MDBasicInfo::_internal_ticksize() const {
  return _impl_.ticksize_;
}
inline double MDBasicInfo::ticksize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.TickSize)
  return _internal_ticksize();
}
inline void MDBasicInfo::_internal_set_ticksize(double value) {
  
  _impl_.ticksize_ = value;
}
inline void MDBasicInfo::set_ticksize(double value) {
  _internal_set_ticksize(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.TickSize)
}

// int32 LoanMarginIndicator = 23;
inline void MDBasicInfo::clear_loanmarginindicator() {
  _impl_.loanmarginindicator_ = 0;
}
inline int32_t MDBasicInfo::_internal_loanmarginindicator() const {
  return _impl_.loanmarginindicator_;
}
inline int32_t MDBasicInfo::loanmarginindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.LoanMarginIndicator)
  return _internal_loanmarginindicator();
}
inline void MDBasicInfo::_internal_set_loanmarginindicator(int32_t value) {
  
  _impl_.loanmarginindicator_ = value;
}
inline void MDBasicInfo::set_loanmarginindicator(int32_t value) {
  _internal_set_loanmarginindicator(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.LoanMarginIndicator)
}

// int32 PxAccuracy = 24;
inline void MDBasicInfo::clear_pxaccuracy() {
  _impl_.pxaccuracy_ = 0;
}
inline int32_t MDBasicInfo::_internal_pxaccuracy() const {
  return _impl_.pxaccuracy_;
}
inline int32_t MDBasicInfo::pxaccuracy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PxAccuracy)
  return _internal_pxaccuracy();
}
inline void MDBasicInfo::_internal_set_pxaccuracy(int32_t value) {
  
  _impl_.pxaccuracy_ = value;
}
inline void MDBasicInfo::set_pxaccuracy(int32_t value) {
  _internal_set_pxaccuracy(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PxAccuracy)
}

// int32 IPOProfitable = 25;
inline void MDBasicInfo::clear_ipoprofitable() {
  _impl_.ipoprofitable_ = 0;
}
inline int32_t MDBasicInfo::_internal_ipoprofitable() const {
  return _impl_.ipoprofitable_;
}
inline int32_t MDBasicInfo::ipoprofitable() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.IPOProfitable)
  return _internal_ipoprofitable();
}
inline void MDBasicInfo::_internal_set_ipoprofitable(int32_t value) {
  
  _impl_.ipoprofitable_ = value;
}
inline void MDBasicInfo::set_ipoprofitable(int32_t value) {
  _internal_set_ipoprofitable(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.IPOProfitable)
}

// int32 DiffRightsIndicator = 26;
inline void MDBasicInfo::clear_diffrightsindicator() {
  _impl_.diffrightsindicator_ = 0;
}
inline int32_t MDBasicInfo::_internal_diffrightsindicator() const {
  return _impl_.diffrightsindicator_;
}
inline int32_t MDBasicInfo::diffrightsindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DiffRightsIndicator)
  return _internal_diffrightsindicator();
}
inline void MDBasicInfo::_internal_set_diffrightsindicator(int32_t value) {
  
  _impl_.diffrightsindicator_ = value;
}
inline void MDBasicInfo::set_diffrightsindicator(int32_t value) {
  _internal_set_diffrightsindicator(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DiffRightsIndicator)
}

// string HKSpreadTableCode = 27;
inline void MDBasicInfo::clear_hkspreadtablecode() {
  _impl_.hkspreadtablecode_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::hkspreadtablecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
  return _internal_hkspreadtablecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_hkspreadtablecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hkspreadtablecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
}
inline std::string* MDBasicInfo::mutable_hkspreadtablecode() {
  std::string* _s = _internal_mutable_hkspreadtablecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_hkspreadtablecode() const {
  return _impl_.hkspreadtablecode_.Get();
}
inline void MDBasicInfo::_internal_set_hkspreadtablecode(const std::string& value) {
  
  _impl_.hkspreadtablecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_hkspreadtablecode() {
  
  return _impl_.hkspreadtablecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_hkspreadtablecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
  return _impl_.hkspreadtablecode_.Release();
}
inline void MDBasicInfo::set_allocated_hkspreadtablecode(std::string* hkspreadtablecode) {
  if (hkspreadtablecode != nullptr) {
    
  } else {
    
  }
  _impl_.hkspreadtablecode_.SetAllocated(hkspreadtablecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hkspreadtablecode_.IsDefault()) {
    _impl_.hkspreadtablecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
}

// double PreSettlePx = 28;
inline void MDBasicInfo::clear_presettlepx() {
  _impl_.presettlepx_ = 0;
}
inline double MDBasicInfo::_internal_presettlepx() const {
  return _impl_.presettlepx_;
}
inline double MDBasicInfo::presettlepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PreSettlePx)
  return _internal_presettlepx();
}
inline void MDBasicInfo::_internal_set_presettlepx(double value) {
  
  _impl_.presettlepx_ = value;
}
inline void MDBasicInfo::set_presettlepx(double value) {
  _internal_set_presettlepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PreSettlePx)
}

// double PreIOPV = 29;
inline void MDBasicInfo::clear_preiopv() {
  _impl_.preiopv_ = 0;
}
inline double MDBasicInfo::_internal_preiopv() const {
  return _impl_.preiopv_;
}
inline double MDBasicInfo::preiopv() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PreIOPV)
  return _internal_preiopv();
}
inline void MDBasicInfo::_internal_set_preiopv(double value) {
  
  _impl_.preiopv_ = value;
}
inline void MDBasicInfo::set_preiopv(double value) {
  _internal_set_preiopv(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PreIOPV)
}

// int32 ShHkConnect = 30;
inline void MDBasicInfo::clear_shhkconnect() {
  _impl_.shhkconnect_ = 0;
}
inline int32_t MDBasicInfo::_internal_shhkconnect() const {
  return _impl_.shhkconnect_;
}
inline int32_t MDBasicInfo::shhkconnect() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ShHkConnect)
  return _internal_shhkconnect();
}
inline void MDBasicInfo::_internal_set_shhkconnect(int32_t value) {
  
  _impl_.shhkconnect_ = value;
}
inline void MDBasicInfo::set_shhkconnect(int32_t value) {
  _internal_set_shhkconnect(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ShHkConnect)
}

// int32 SzHkConnect = 31;
inline void MDBasicInfo::clear_szhkconnect() {
  _impl_.szhkconnect_ = 0;
}
inline int32_t MDBasicInfo::_internal_szhkconnect() const {
  return _impl_.szhkconnect_;
}
inline int32_t MDBasicInfo::szhkconnect() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SzHkConnect)
  return _internal_szhkconnect();
}
inline void MDBasicInfo::_internal_set_szhkconnect(int32_t value) {
  
  _impl_.szhkconnect_ = value;
}
inline void MDBasicInfo::set_szhkconnect(int32_t value) {
  _internal_set_szhkconnect(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SzHkConnect)
}

// string OptionContractID = 40;
inline void MDBasicInfo::clear_optioncontractid() {
  _impl_.optioncontractid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optioncontractid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
  return _internal_optioncontractid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optioncontractid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optioncontractid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
}
inline std::string* MDBasicInfo::mutable_optioncontractid() {
  std::string* _s = _internal_mutable_optioncontractid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optioncontractid() const {
  return _impl_.optioncontractid_.Get();
}
inline void MDBasicInfo::_internal_set_optioncontractid(const std::string& value) {
  
  _impl_.optioncontractid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optioncontractid() {
  
  return _impl_.optioncontractid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optioncontractid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
  return _impl_.optioncontractid_.Release();
}
inline void MDBasicInfo::set_allocated_optioncontractid(std::string* optioncontractid) {
  if (optioncontractid != nullptr) {
    
  } else {
    
  }
  _impl_.optioncontractid_.SetAllocated(optioncontractid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optioncontractid_.IsDefault()) {
    _impl_.optioncontractid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
}

// string OptionContractSymbol = 41;
inline void MDBasicInfo::clear_optioncontractsymbol() {
  _impl_.optioncontractsymbol_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optioncontractsymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
  return _internal_optioncontractsymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optioncontractsymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optioncontractsymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
}
inline std::string* MDBasicInfo::mutable_optioncontractsymbol() {
  std::string* _s = _internal_mutable_optioncontractsymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optioncontractsymbol() const {
  return _impl_.optioncontractsymbol_.Get();
}
inline void MDBasicInfo::_internal_set_optioncontractsymbol(const std::string& value) {
  
  _impl_.optioncontractsymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optioncontractsymbol() {
  
  return _impl_.optioncontractsymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optioncontractsymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
  return _impl_.optioncontractsymbol_.Release();
}
inline void MDBasicInfo::set_allocated_optioncontractsymbol(std::string* optioncontractsymbol) {
  if (optioncontractsymbol != nullptr) {
    
  } else {
    
  }
  _impl_.optioncontractsymbol_.SetAllocated(optioncontractsymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optioncontractsymbol_.IsDefault()) {
    _impl_.optioncontractsymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
}

// string OptionUnderlyingSecurityID = 42;
inline void MDBasicInfo::clear_optionunderlyingsecurityid() {
  _impl_.optionunderlyingsecurityid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionunderlyingsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
  return _internal_optionunderlyingsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionunderlyingsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionunderlyingsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
}
inline std::string* MDBasicInfo::mutable_optionunderlyingsecurityid() {
  std::string* _s = _internal_mutable_optionunderlyingsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionunderlyingsecurityid() const {
  return _impl_.optionunderlyingsecurityid_.Get();
}
inline void MDBasicInfo::_internal_set_optionunderlyingsecurityid(const std::string& value) {
  
  _impl_.optionunderlyingsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionunderlyingsecurityid() {
  
  return _impl_.optionunderlyingsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionunderlyingsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
  return _impl_.optionunderlyingsecurityid_.Release();
}
inline void MDBasicInfo::set_allocated_optionunderlyingsecurityid(std::string* optionunderlyingsecurityid) {
  if (optionunderlyingsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.optionunderlyingsecurityid_.SetAllocated(optionunderlyingsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionunderlyingsecurityid_.IsDefault()) {
    _impl_.optionunderlyingsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
}

// string OptionUnderlyingSymbol = 43;
inline void MDBasicInfo::clear_optionunderlyingsymbol() {
  _impl_.optionunderlyingsymbol_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionunderlyingsymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
  return _internal_optionunderlyingsymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionunderlyingsymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionunderlyingsymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
}
inline std::string* MDBasicInfo::mutable_optionunderlyingsymbol() {
  std::string* _s = _internal_mutable_optionunderlyingsymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionunderlyingsymbol() const {
  return _impl_.optionunderlyingsymbol_.Get();
}
inline void MDBasicInfo::_internal_set_optionunderlyingsymbol(const std::string& value) {
  
  _impl_.optionunderlyingsymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionunderlyingsymbol() {
  
  return _impl_.optionunderlyingsymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionunderlyingsymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
  return _impl_.optionunderlyingsymbol_.Release();
}
inline void MDBasicInfo::set_allocated_optionunderlyingsymbol(std::string* optionunderlyingsymbol) {
  if (optionunderlyingsymbol != nullptr) {
    
  } else {
    
  }
  _impl_.optionunderlyingsymbol_.SetAllocated(optionunderlyingsymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionunderlyingsymbol_.IsDefault()) {
    _impl_.optionunderlyingsymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
}

// string OptionUnderlyingType = 44;
inline void MDBasicInfo::clear_optionunderlyingtype() {
  _impl_.optionunderlyingtype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionunderlyingtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
  return _internal_optionunderlyingtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionunderlyingtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionunderlyingtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
}
inline std::string* MDBasicInfo::mutable_optionunderlyingtype() {
  std::string* _s = _internal_mutable_optionunderlyingtype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionunderlyingtype() const {
  return _impl_.optionunderlyingtype_.Get();
}
inline void MDBasicInfo::_internal_set_optionunderlyingtype(const std::string& value) {
  
  _impl_.optionunderlyingtype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionunderlyingtype() {
  
  return _impl_.optionunderlyingtype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionunderlyingtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
  return _impl_.optionunderlyingtype_.Release();
}
inline void MDBasicInfo::set_allocated_optionunderlyingtype(std::string* optionunderlyingtype) {
  if (optionunderlyingtype != nullptr) {
    
  } else {
    
  }
  _impl_.optionunderlyingtype_.SetAllocated(optionunderlyingtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionunderlyingtype_.IsDefault()) {
    _impl_.optionunderlyingtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
}

// string OptionOptionType = 45;
inline void MDBasicInfo::clear_optionoptiontype() {
  _impl_.optionoptiontype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionoptiontype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
  return _internal_optionoptiontype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionoptiontype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionoptiontype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
}
inline std::string* MDBasicInfo::mutable_optionoptiontype() {
  std::string* _s = _internal_mutable_optionoptiontype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionoptiontype() const {
  return _impl_.optionoptiontype_.Get();
}
inline void MDBasicInfo::_internal_set_optionoptiontype(const std::string& value) {
  
  _impl_.optionoptiontype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionoptiontype() {
  
  return _impl_.optionoptiontype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionoptiontype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
  return _impl_.optionoptiontype_.Release();
}
inline void MDBasicInfo::set_allocated_optionoptiontype(std::string* optionoptiontype) {
  if (optionoptiontype != nullptr) {
    
  } else {
    
  }
  _impl_.optionoptiontype_.SetAllocated(optionoptiontype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionoptiontype_.IsDefault()) {
    _impl_.optionoptiontype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
}

// string OptionCallOrPut = 46;
inline void MDBasicInfo::clear_optioncallorput() {
  _impl_.optioncallorput_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optioncallorput() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
  return _internal_optioncallorput();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optioncallorput(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optioncallorput_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
}
inline std::string* MDBasicInfo::mutable_optioncallorput() {
  std::string* _s = _internal_mutable_optioncallorput();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optioncallorput() const {
  return _impl_.optioncallorput_.Get();
}
inline void MDBasicInfo::_internal_set_optioncallorput(const std::string& value) {
  
  _impl_.optioncallorput_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optioncallorput() {
  
  return _impl_.optioncallorput_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optioncallorput() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
  return _impl_.optioncallorput_.Release();
}
inline void MDBasicInfo::set_allocated_optioncallorput(std::string* optioncallorput) {
  if (optioncallorput != nullptr) {
    
  } else {
    
  }
  _impl_.optioncallorput_.SetAllocated(optioncallorput, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optioncallorput_.IsDefault()) {
    _impl_.optioncallorput_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
}

// int64 OptionContractMultiplierUnit = 47;
inline void MDBasicInfo::clear_optioncontractmultiplierunit() {
  _impl_.optioncontractmultiplierunit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optioncontractmultiplierunit() const {
  return _impl_.optioncontractmultiplierunit_;
}
inline int64_t MDBasicInfo::optioncontractmultiplierunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractMultiplierUnit)
  return _internal_optioncontractmultiplierunit();
}
inline void MDBasicInfo::_internal_set_optioncontractmultiplierunit(int64_t value) {
  
  _impl_.optioncontractmultiplierunit_ = value;
}
inline void MDBasicInfo::set_optioncontractmultiplierunit(int64_t value) {
  _internal_set_optioncontractmultiplierunit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractMultiplierUnit)
}

// double OptionExercisePrice = 48;
inline void MDBasicInfo::clear_optionexerciseprice() {
  _impl_.optionexerciseprice_ = 0;
}
inline double MDBasicInfo::_internal_optionexerciseprice() const {
  return _impl_.optionexerciseprice_;
}
inline double MDBasicInfo::optionexerciseprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionExercisePrice)
  return _internal_optionexerciseprice();
}
inline void MDBasicInfo::_internal_set_optionexerciseprice(double value) {
  
  _impl_.optionexerciseprice_ = value;
}
inline void MDBasicInfo::set_optionexerciseprice(double value) {
  _internal_set_optionexerciseprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionExercisePrice)
}

// string OptionStartDate = 49;
inline void MDBasicInfo::clear_optionstartdate() {
  _impl_.optionstartdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionstartdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
  return _internal_optionstartdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionstartdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionstartdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
}
inline std::string* MDBasicInfo::mutable_optionstartdate() {
  std::string* _s = _internal_mutable_optionstartdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionstartdate() const {
  return _impl_.optionstartdate_.Get();
}
inline void MDBasicInfo::_internal_set_optionstartdate(const std::string& value) {
  
  _impl_.optionstartdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionstartdate() {
  
  return _impl_.optionstartdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionstartdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
  return _impl_.optionstartdate_.Release();
}
inline void MDBasicInfo::set_allocated_optionstartdate(std::string* optionstartdate) {
  if (optionstartdate != nullptr) {
    
  } else {
    
  }
  _impl_.optionstartdate_.SetAllocated(optionstartdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionstartdate_.IsDefault()) {
    _impl_.optionstartdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
}

// string OptionEndDate = 50;
inline void MDBasicInfo::clear_optionenddate() {
  _impl_.optionenddate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionenddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
  return _internal_optionenddate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionenddate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionenddate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
}
inline std::string* MDBasicInfo::mutable_optionenddate() {
  std::string* _s = _internal_mutable_optionenddate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionenddate() const {
  return _impl_.optionenddate_.Get();
}
inline void MDBasicInfo::_internal_set_optionenddate(const std::string& value) {
  
  _impl_.optionenddate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionenddate() {
  
  return _impl_.optionenddate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionenddate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
  return _impl_.optionenddate_.Release();
}
inline void MDBasicInfo::set_allocated_optionenddate(std::string* optionenddate) {
  if (optionenddate != nullptr) {
    
  } else {
    
  }
  _impl_.optionenddate_.SetAllocated(optionenddate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionenddate_.IsDefault()) {
    _impl_.optionenddate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
}

// string OptionExerciseDate = 51;
inline void MDBasicInfo::clear_optionexercisedate() {
  _impl_.optionexercisedate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionexercisedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
  return _internal_optionexercisedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionexercisedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionexercisedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
}
inline std::string* MDBasicInfo::mutable_optionexercisedate() {
  std::string* _s = _internal_mutable_optionexercisedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionexercisedate() const {
  return _impl_.optionexercisedate_.Get();
}
inline void MDBasicInfo::_internal_set_optionexercisedate(const std::string& value) {
  
  _impl_.optionexercisedate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionexercisedate() {
  
  return _impl_.optionexercisedate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionexercisedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
  return _impl_.optionexercisedate_.Release();
}
inline void MDBasicInfo::set_allocated_optionexercisedate(std::string* optionexercisedate) {
  if (optionexercisedate != nullptr) {
    
  } else {
    
  }
  _impl_.optionexercisedate_.SetAllocated(optionexercisedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionexercisedate_.IsDefault()) {
    _impl_.optionexercisedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
}

// string OptionDeliveryDate = 52;
inline void MDBasicInfo::clear_optiondeliverydate() {
  _impl_.optiondeliverydate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optiondeliverydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
  return _internal_optiondeliverydate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optiondeliverydate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optiondeliverydate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
}
inline std::string* MDBasicInfo::mutable_optiondeliverydate() {
  std::string* _s = _internal_mutable_optiondeliverydate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optiondeliverydate() const {
  return _impl_.optiondeliverydate_.Get();
}
inline void MDBasicInfo::_internal_set_optiondeliverydate(const std::string& value) {
  
  _impl_.optiondeliverydate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optiondeliverydate() {
  
  return _impl_.optiondeliverydate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optiondeliverydate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
  return _impl_.optiondeliverydate_.Release();
}
inline void MDBasicInfo::set_allocated_optiondeliverydate(std::string* optiondeliverydate) {
  if (optiondeliverydate != nullptr) {
    
  } else {
    
  }
  _impl_.optiondeliverydate_.SetAllocated(optiondeliverydate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optiondeliverydate_.IsDefault()) {
    _impl_.optiondeliverydate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
}

// string OptionExpireDate = 53;
inline void MDBasicInfo::clear_optionexpiredate() {
  _impl_.optionexpiredate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionexpiredate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
  return _internal_optionexpiredate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionexpiredate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionexpiredate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
}
inline std::string* MDBasicInfo::mutable_optionexpiredate() {
  std::string* _s = _internal_mutable_optionexpiredate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionexpiredate() const {
  return _impl_.optionexpiredate_.Get();
}
inline void MDBasicInfo::_internal_set_optionexpiredate(const std::string& value) {
  
  _impl_.optionexpiredate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionexpiredate() {
  
  return _impl_.optionexpiredate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionexpiredate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
  return _impl_.optionexpiredate_.Release();
}
inline void MDBasicInfo::set_allocated_optionexpiredate(std::string* optionexpiredate) {
  if (optionexpiredate != nullptr) {
    
  } else {
    
  }
  _impl_.optionexpiredate_.SetAllocated(optionexpiredate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionexpiredate_.IsDefault()) {
    _impl_.optionexpiredate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
}

// string OptionUpdateVersion = 54;
inline void MDBasicInfo::clear_optionupdateversion() {
  _impl_.optionupdateversion_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionupdateversion() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
  return _internal_optionupdateversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionupdateversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionupdateversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
}
inline std::string* MDBasicInfo::mutable_optionupdateversion() {
  std::string* _s = _internal_mutable_optionupdateversion();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionupdateversion() const {
  return _impl_.optionupdateversion_.Get();
}
inline void MDBasicInfo::_internal_set_optionupdateversion(const std::string& value) {
  
  _impl_.optionupdateversion_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionupdateversion() {
  
  return _impl_.optionupdateversion_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionupdateversion() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
  return _impl_.optionupdateversion_.Release();
}
inline void MDBasicInfo::set_allocated_optionupdateversion(std::string* optionupdateversion) {
  if (optionupdateversion != nullptr) {
    
  } else {
    
  }
  _impl_.optionupdateversion_.SetAllocated(optionupdateversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionupdateversion_.IsDefault()) {
    _impl_.optionupdateversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
}

// int64 OptionTotalLongPosition = 55;
inline void MDBasicInfo::clear_optiontotallongposition() {
  _impl_.optiontotallongposition_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optiontotallongposition() const {
  return _impl_.optiontotallongposition_;
}
inline int64_t MDBasicInfo::optiontotallongposition() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionTotalLongPosition)
  return _internal_optiontotallongposition();
}
inline void MDBasicInfo::_internal_set_optiontotallongposition(int64_t value) {
  
  _impl_.optiontotallongposition_ = value;
}
inline void MDBasicInfo::set_optiontotallongposition(int64_t value) {
  _internal_set_optiontotallongposition(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionTotalLongPosition)
}

// double OptionSecurityClosePx = 56;
inline void MDBasicInfo::clear_optionsecurityclosepx() {
  _impl_.optionsecurityclosepx_ = 0;
}
inline double MDBasicInfo::_internal_optionsecurityclosepx() const {
  return _impl_.optionsecurityclosepx_;
}
inline double MDBasicInfo::optionsecurityclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityClosePx)
  return _internal_optionsecurityclosepx();
}
inline void MDBasicInfo::_internal_set_optionsecurityclosepx(double value) {
  
  _impl_.optionsecurityclosepx_ = value;
}
inline void MDBasicInfo::set_optionsecurityclosepx(double value) {
  _internal_set_optionsecurityclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityClosePx)
}

// double OptionSettlPrice = 57;
inline void MDBasicInfo::clear_optionsettlprice() {
  _impl_.optionsettlprice_ = 0;
}
inline double MDBasicInfo::_internal_optionsettlprice() const {
  return _impl_.optionsettlprice_;
}
inline double MDBasicInfo::optionsettlprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSettlPrice)
  return _internal_optionsettlprice();
}
inline void MDBasicInfo::_internal_set_optionsettlprice(double value) {
  
  _impl_.optionsettlprice_ = value;
}
inline void MDBasicInfo::set_optionsettlprice(double value) {
  _internal_set_optionsettlprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSettlPrice)
}

// double OptionUnderlyingClosePx = 58;
inline void MDBasicInfo::clear_optionunderlyingclosepx() {
  _impl_.optionunderlyingclosepx_ = 0;
}
inline double MDBasicInfo::_internal_optionunderlyingclosepx() const {
  return _impl_.optionunderlyingclosepx_;
}
inline double MDBasicInfo::optionunderlyingclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingClosePx)
  return _internal_optionunderlyingclosepx();
}
inline void MDBasicInfo::_internal_set_optionunderlyingclosepx(double value) {
  
  _impl_.optionunderlyingclosepx_ = value;
}
inline void MDBasicInfo::set_optionunderlyingclosepx(double value) {
  _internal_set_optionunderlyingclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingClosePx)
}

// string OptionPriceLimitType = 59;
inline void MDBasicInfo::clear_optionpricelimittype() {
  _impl_.optionpricelimittype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionpricelimittype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
  return _internal_optionpricelimittype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionpricelimittype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionpricelimittype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
}
inline std::string* MDBasicInfo::mutable_optionpricelimittype() {
  std::string* _s = _internal_mutable_optionpricelimittype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionpricelimittype() const {
  return _impl_.optionpricelimittype_.Get();
}
inline void MDBasicInfo::_internal_set_optionpricelimittype(const std::string& value) {
  
  _impl_.optionpricelimittype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionpricelimittype() {
  
  return _impl_.optionpricelimittype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionpricelimittype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
  return _impl_.optionpricelimittype_.Release();
}
inline void MDBasicInfo::set_allocated_optionpricelimittype(std::string* optionpricelimittype) {
  if (optionpricelimittype != nullptr) {
    
  } else {
    
  }
  _impl_.optionpricelimittype_.SetAllocated(optionpricelimittype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionpricelimittype_.IsDefault()) {
    _impl_.optionpricelimittype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
}

// double OptionDailyPriceUpLimit = 60;
inline void MDBasicInfo::clear_optiondailypriceuplimit() {
  _impl_.optiondailypriceuplimit_ = 0;
}
inline double MDBasicInfo::_internal_optiondailypriceuplimit() const {
  return _impl_.optiondailypriceuplimit_;
}
inline double MDBasicInfo::optiondailypriceuplimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionDailyPriceUpLimit)
  return _internal_optiondailypriceuplimit();
}
inline void MDBasicInfo::_internal_set_optiondailypriceuplimit(double value) {
  
  _impl_.optiondailypriceuplimit_ = value;
}
inline void MDBasicInfo::set_optiondailypriceuplimit(double value) {
  _internal_set_optiondailypriceuplimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionDailyPriceUpLimit)
}

// double OptionDailyPriceDownLimit = 61;
inline void MDBasicInfo::clear_optiondailypricedownlimit() {
  _impl_.optiondailypricedownlimit_ = 0;
}
inline double MDBasicInfo::_internal_optiondailypricedownlimit() const {
  return _impl_.optiondailypricedownlimit_;
}
inline double MDBasicInfo::optiondailypricedownlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionDailyPriceDownLimit)
  return _internal_optiondailypricedownlimit();
}
inline void MDBasicInfo::_internal_set_optiondailypricedownlimit(double value) {
  
  _impl_.optiondailypricedownlimit_ = value;
}
inline void MDBasicInfo::set_optiondailypricedownlimit(double value) {
  _internal_set_optiondailypricedownlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionDailyPriceDownLimit)
}

// double OptionMarginUnit = 62;
inline void MDBasicInfo::clear_optionmarginunit() {
  _impl_.optionmarginunit_ = 0;
}
inline double MDBasicInfo::_internal_optionmarginunit() const {
  return _impl_.optionmarginunit_;
}
inline double MDBasicInfo::optionmarginunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginUnit)
  return _internal_optionmarginunit();
}
inline void MDBasicInfo::_internal_set_optionmarginunit(double value) {
  
  _impl_.optionmarginunit_ = value;
}
inline void MDBasicInfo::set_optionmarginunit(double value) {
  _internal_set_optionmarginunit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginUnit)
}

// double OptionMarginRatioParam1 = 63;
inline void MDBasicInfo::clear_optionmarginratioparam1() {
  _impl_.optionmarginratioparam1_ = 0;
}
inline double MDBasicInfo::_internal_optionmarginratioparam1() const {
  return _impl_.optionmarginratioparam1_;
}
inline double MDBasicInfo::optionmarginratioparam1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginRatioParam1)
  return _internal_optionmarginratioparam1();
}
inline void MDBasicInfo::_internal_set_optionmarginratioparam1(double value) {
  
  _impl_.optionmarginratioparam1_ = value;
}
inline void MDBasicInfo::set_optionmarginratioparam1(double value) {
  _internal_set_optionmarginratioparam1(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginRatioParam1)
}

// double OptionMarginRatioParam2 = 64;
inline void MDBasicInfo::clear_optionmarginratioparam2() {
  _impl_.optionmarginratioparam2_ = 0;
}
inline double MDBasicInfo::_internal_optionmarginratioparam2() const {
  return _impl_.optionmarginratioparam2_;
}
inline double MDBasicInfo::optionmarginratioparam2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginRatioParam2)
  return _internal_optionmarginratioparam2();
}
inline void MDBasicInfo::_internal_set_optionmarginratioparam2(double value) {
  
  _impl_.optionmarginratioparam2_ = value;
}
inline void MDBasicInfo::set_optionmarginratioparam2(double value) {
  _internal_set_optionmarginratioparam2(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginRatioParam2)
}

// int64 OptionRoundLot = 65;
inline void MDBasicInfo::clear_optionroundlot() {
  _impl_.optionroundlot_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionroundlot() const {
  return _impl_.optionroundlot_;
}
inline int64_t MDBasicInfo::optionroundlot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionRoundLot)
  return _internal_optionroundlot();
}
inline void MDBasicInfo::_internal_set_optionroundlot(int64_t value) {
  
  _impl_.optionroundlot_ = value;
}
inline void MDBasicInfo::set_optionroundlot(int64_t value) {
  _internal_set_optionroundlot(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionRoundLot)
}

// int64 OptionLmtOrdMinFloor = 66;
inline void MDBasicInfo::clear_optionlmtordminfloor() {
  _impl_.optionlmtordminfloor_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionlmtordminfloor() const {
  return _impl_.optionlmtordminfloor_;
}
inline int64_t MDBasicInfo::optionlmtordminfloor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionLmtOrdMinFloor)
  return _internal_optionlmtordminfloor();
}
inline void MDBasicInfo::_internal_set_optionlmtordminfloor(int64_t value) {
  
  _impl_.optionlmtordminfloor_ = value;
}
inline void MDBasicInfo::set_optionlmtordminfloor(int64_t value) {
  _internal_set_optionlmtordminfloor(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionLmtOrdMinFloor)
}

// int64 OptionLmtOrdMaxFloor = 67;
inline void MDBasicInfo::clear_optionlmtordmaxfloor() {
  _impl_.optionlmtordmaxfloor_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionlmtordmaxfloor() const {
  return _impl_.optionlmtordmaxfloor_;
}
inline int64_t MDBasicInfo::optionlmtordmaxfloor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionLmtOrdMaxFloor)
  return _internal_optionlmtordmaxfloor();
}
inline void MDBasicInfo::_internal_set_optionlmtordmaxfloor(int64_t value) {
  
  _impl_.optionlmtordmaxfloor_ = value;
}
inline void MDBasicInfo::set_optionlmtordmaxfloor(int64_t value) {
  _internal_set_optionlmtordmaxfloor(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionLmtOrdMaxFloor)
}

// int64 OptionMktOrdMinFloor = 68;
inline void MDBasicInfo::clear_optionmktordminfloor() {
  _impl_.optionmktordminfloor_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionmktordminfloor() const {
  return _impl_.optionmktordminfloor_;
}
inline int64_t MDBasicInfo::optionmktordminfloor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMktOrdMinFloor)
  return _internal_optionmktordminfloor();
}
inline void MDBasicInfo::_internal_set_optionmktordminfloor(int64_t value) {
  
  _impl_.optionmktordminfloor_ = value;
}
inline void MDBasicInfo::set_optionmktordminfloor(int64_t value) {
  _internal_set_optionmktordminfloor(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMktOrdMinFloor)
}

// int64 OptionMktOrdMaxFloor = 69;
inline void MDBasicInfo::clear_optionmktordmaxfloor() {
  _impl_.optionmktordmaxfloor_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionmktordmaxfloor() const {
  return _impl_.optionmktordmaxfloor_;
}
inline int64_t MDBasicInfo::optionmktordmaxfloor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMktOrdMaxFloor)
  return _internal_optionmktordmaxfloor();
}
inline void MDBasicInfo::_internal_set_optionmktordmaxfloor(int64_t value) {
  
  _impl_.optionmktordmaxfloor_ = value;
}
inline void MDBasicInfo::set_optionmktordmaxfloor(int64_t value) {
  _internal_set_optionmktordmaxfloor(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMktOrdMaxFloor)
}

// double OptionTickSize = 70;
inline void MDBasicInfo::clear_optionticksize() {
  _impl_.optionticksize_ = 0;
}
inline double MDBasicInfo::_internal_optionticksize() const {
  return _impl_.optionticksize_;
}
inline double MDBasicInfo::optionticksize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionTickSize)
  return _internal_optionticksize();
}
inline void MDBasicInfo::_internal_set_optionticksize(double value) {
  
  _impl_.optionticksize_ = value;
}
inline void MDBasicInfo::set_optionticksize(double value) {
  _internal_set_optionticksize(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionTickSize)
}

// string OptionSecurityStatusFlag = 71;
inline void MDBasicInfo::clear_optionsecuritystatusflag() {
  _impl_.optionsecuritystatusflag_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionsecuritystatusflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
  return _internal_optionsecuritystatusflag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionsecuritystatusflag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionsecuritystatusflag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
}
inline std::string* MDBasicInfo::mutable_optionsecuritystatusflag() {
  std::string* _s = _internal_mutable_optionsecuritystatusflag();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionsecuritystatusflag() const {
  return _impl_.optionsecuritystatusflag_.Get();
}
inline void MDBasicInfo::_internal_set_optionsecuritystatusflag(const std::string& value) {
  
  _impl_.optionsecuritystatusflag_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionsecuritystatusflag() {
  
  return _impl_.optionsecuritystatusflag_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionsecuritystatusflag() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
  return _impl_.optionsecuritystatusflag_.Release();
}
inline void MDBasicInfo::set_allocated_optionsecuritystatusflag(std::string* optionsecuritystatusflag) {
  if (optionsecuritystatusflag != nullptr) {
    
  } else {
    
  }
  _impl_.optionsecuritystatusflag_.SetAllocated(optionsecuritystatusflag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionsecuritystatusflag_.IsDefault()) {
    _impl_.optionsecuritystatusflag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
}

// string OptionCarryInterestDate = 72;
inline void MDBasicInfo::clear_optioncarryinterestdate() {
  _impl_.optioncarryinterestdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optioncarryinterestdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
  return _internal_optioncarryinterestdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optioncarryinterestdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optioncarryinterestdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
}
inline std::string* MDBasicInfo::mutable_optioncarryinterestdate() {
  std::string* _s = _internal_mutable_optioncarryinterestdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optioncarryinterestdate() const {
  return _impl_.optioncarryinterestdate_.Get();
}
inline void MDBasicInfo::_internal_set_optioncarryinterestdate(const std::string& value) {
  
  _impl_.optioncarryinterestdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optioncarryinterestdate() {
  
  return _impl_.optioncarryinterestdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optioncarryinterestdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
  return _impl_.optioncarryinterestdate_.Release();
}
inline void MDBasicInfo::set_allocated_optioncarryinterestdate(std::string* optioncarryinterestdate) {
  if (optioncarryinterestdate != nullptr) {
    
  } else {
    
  }
  _impl_.optioncarryinterestdate_.SetAllocated(optioncarryinterestdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optioncarryinterestdate_.IsDefault()) {
    _impl_.optioncarryinterestdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
}

// string OptionEarlyExpireDate = 73;
inline void MDBasicInfo::clear_optionearlyexpiredate() {
  _impl_.optionearlyexpiredate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionearlyexpiredate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
  return _internal_optionearlyexpiredate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionearlyexpiredate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionearlyexpiredate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
}
inline std::string* MDBasicInfo::mutable_optionearlyexpiredate() {
  std::string* _s = _internal_mutable_optionearlyexpiredate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionearlyexpiredate() const {
  return _impl_.optionearlyexpiredate_.Get();
}
inline void MDBasicInfo::_internal_set_optionearlyexpiredate(const std::string& value) {
  
  _impl_.optionearlyexpiredate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionearlyexpiredate() {
  
  return _impl_.optionearlyexpiredate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionearlyexpiredate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
  return _impl_.optionearlyexpiredate_.Release();
}
inline void MDBasicInfo::set_allocated_optionearlyexpiredate(std::string* optionearlyexpiredate) {
  if (optionearlyexpiredate != nullptr) {
    
  } else {
    
  }
  _impl_.optionearlyexpiredate_.SetAllocated(optionearlyexpiredate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionearlyexpiredate_.IsDefault()) {
    _impl_.optionearlyexpiredate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
}

// string OptionStrategySecurityID = 74;
inline void MDBasicInfo::clear_optionstrategysecurityid() {
  _impl_.optionstrategysecurityid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionstrategysecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
  return _internal_optionstrategysecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionstrategysecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionstrategysecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
}
inline std::string* MDBasicInfo::mutable_optionstrategysecurityid() {
  std::string* _s = _internal_mutable_optionstrategysecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionstrategysecurityid() const {
  return _impl_.optionstrategysecurityid_.Get();
}
inline void MDBasicInfo::_internal_set_optionstrategysecurityid(const std::string& value) {
  
  _impl_.optionstrategysecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionstrategysecurityid() {
  
  return _impl_.optionstrategysecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionstrategysecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
  return _impl_.optionstrategysecurityid_.Release();
}
inline void MDBasicInfo::set_allocated_optionstrategysecurityid(std::string* optionstrategysecurityid) {
  if (optionstrategysecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.optionstrategysecurityid_.SetAllocated(optionstrategysecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionstrategysecurityid_.IsDefault()) {
    _impl_.optionstrategysecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
}

// string FITradeProductType = 80;
inline void MDBasicInfo::clear_fitradeproducttype() {
  _impl_.fitradeproducttype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fitradeproducttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
  return _internal_fitradeproducttype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fitradeproducttype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fitradeproducttype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
}
inline std::string* MDBasicInfo::mutable_fitradeproducttype() {
  std::string* _s = _internal_mutable_fitradeproducttype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fitradeproducttype() const {
  return _impl_.fitradeproducttype_.Get();
}
inline void MDBasicInfo::_internal_set_fitradeproducttype(const std::string& value) {
  
  _impl_.fitradeproducttype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fitradeproducttype() {
  
  return _impl_.fitradeproducttype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fitradeproducttype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
  return _impl_.fitradeproducttype_.Release();
}
inline void MDBasicInfo::set_allocated_fitradeproducttype(std::string* fitradeproducttype) {
  if (fitradeproducttype != nullptr) {
    
  } else {
    
  }
  _impl_.fitradeproducttype_.SetAllocated(fitradeproducttype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fitradeproducttype_.IsDefault()) {
    _impl_.fitradeproducttype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
}

// string FISecurityProperty = 81;
inline void MDBasicInfo::clear_fisecurityproperty() {
  _impl_.fisecurityproperty_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fisecurityproperty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
  return _internal_fisecurityproperty();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fisecurityproperty(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fisecurityproperty_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
}
inline std::string* MDBasicInfo::mutable_fisecurityproperty() {
  std::string* _s = _internal_mutable_fisecurityproperty();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fisecurityproperty() const {
  return _impl_.fisecurityproperty_.Get();
}
inline void MDBasicInfo::_internal_set_fisecurityproperty(const std::string& value) {
  
  _impl_.fisecurityproperty_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fisecurityproperty() {
  
  return _impl_.fisecurityproperty_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fisecurityproperty() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
  return _impl_.fisecurityproperty_.Release();
}
inline void MDBasicInfo::set_allocated_fisecurityproperty(std::string* fisecurityproperty) {
  if (fisecurityproperty != nullptr) {
    
  } else {
    
  }
  _impl_.fisecurityproperty_.SetAllocated(fisecurityproperty, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fisecurityproperty_.IsDefault()) {
    _impl_.fisecurityproperty_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
}

// string FISecurityStatus = 82;
inline void MDBasicInfo::clear_fisecuritystatus() {
  _impl_.fisecuritystatus_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fisecuritystatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
  return _internal_fisecuritystatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fisecuritystatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fisecuritystatus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
}
inline std::string* MDBasicInfo::mutable_fisecuritystatus() {
  std::string* _s = _internal_mutable_fisecuritystatus();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fisecuritystatus() const {
  return _impl_.fisecuritystatus_.Get();
}
inline void MDBasicInfo::_internal_set_fisecuritystatus(const std::string& value) {
  
  _impl_.fisecuritystatus_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fisecuritystatus() {
  
  return _impl_.fisecuritystatus_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fisecuritystatus() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
  return _impl_.fisecuritystatus_.Release();
}
inline void MDBasicInfo::set_allocated_fisecuritystatus(std::string* fisecuritystatus) {
  if (fisecuritystatus != nullptr) {
    
  } else {
    
  }
  _impl_.fisecuritystatus_.SetAllocated(fisecuritystatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fisecuritystatus_.IsDefault()) {
    _impl_.fisecuritystatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
}

// string FIPledgedSecurityID = 83;
inline void MDBasicInfo::clear_fipledgedsecurityid() {
  _impl_.fipledgedsecurityid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fipledgedsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
  return _internal_fipledgedsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fipledgedsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fipledgedsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
}
inline std::string* MDBasicInfo::mutable_fipledgedsecurityid() {
  std::string* _s = _internal_mutable_fipledgedsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fipledgedsecurityid() const {
  return _impl_.fipledgedsecurityid_.Get();
}
inline void MDBasicInfo::_internal_set_fipledgedsecurityid(const std::string& value) {
  
  _impl_.fipledgedsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fipledgedsecurityid() {
  
  return _impl_.fipledgedsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fipledgedsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
  return _impl_.fipledgedsecurityid_.Release();
}
inline void MDBasicInfo::set_allocated_fipledgedsecurityid(std::string* fipledgedsecurityid) {
  if (fipledgedsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.fipledgedsecurityid_.SetAllocated(fipledgedsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fipledgedsecurityid_.IsDefault()) {
    _impl_.fipledgedsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
}

// string FIOpenTime = 84;
inline void MDBasicInfo::clear_fiopentime() {
  _impl_.fiopentime_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fiopentime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
  return _internal_fiopentime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fiopentime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fiopentime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
}
inline std::string* MDBasicInfo::mutable_fiopentime() {
  std::string* _s = _internal_mutable_fiopentime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fiopentime() const {
  return _impl_.fiopentime_.Get();
}
inline void MDBasicInfo::_internal_set_fiopentime(const std::string& value) {
  
  _impl_.fiopentime_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fiopentime() {
  
  return _impl_.fiopentime_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fiopentime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
  return _impl_.fiopentime_.Release();
}
inline void MDBasicInfo::set_allocated_fiopentime(std::string* fiopentime) {
  if (fiopentime != nullptr) {
    
  } else {
    
  }
  _impl_.fiopentime_.SetAllocated(fiopentime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fiopentime_.IsDefault()) {
    _impl_.fiopentime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
}

// string FICloseTime = 85;
inline void MDBasicInfo::clear_ficlosetime() {
  _impl_.ficlosetime_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::ficlosetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
  return _internal_ficlosetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_ficlosetime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ficlosetime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
}
inline std::string* MDBasicInfo::mutable_ficlosetime() {
  std::string* _s = _internal_mutable_ficlosetime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_ficlosetime() const {
  return _impl_.ficlosetime_.Get();
}
inline void MDBasicInfo::_internal_set_ficlosetime(const std::string& value) {
  
  _impl_.ficlosetime_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_ficlosetime() {
  
  return _impl_.ficlosetime_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_ficlosetime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
  return _impl_.ficlosetime_.Release();
}
inline void MDBasicInfo::set_allocated_ficlosetime(std::string* ficlosetime) {
  if (ficlosetime != nullptr) {
    
  } else {
    
  }
  _impl_.ficlosetime_.SetAllocated(ficlosetime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ficlosetime_.IsDefault()) {
    _impl_.ficlosetime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
}

// string FIIssueMode = 86;
inline void MDBasicInfo::clear_fiissuemode() {
  _impl_.fiissuemode_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fiissuemode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
  return _internal_fiissuemode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fiissuemode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fiissuemode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
}
inline std::string* MDBasicInfo::mutable_fiissuemode() {
  std::string* _s = _internal_mutable_fiissuemode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fiissuemode() const {
  return _impl_.fiissuemode_.Get();
}
inline void MDBasicInfo::_internal_set_fiissuemode(const std::string& value) {
  
  _impl_.fiissuemode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fiissuemode() {
  
  return _impl_.fiissuemode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fiissuemode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
  return _impl_.fiissuemode_.Release();
}
inline void MDBasicInfo::set_allocated_fiissuemode(std::string* fiissuemode) {
  if (fiissuemode != nullptr) {
    
  } else {
    
  }
  _impl_.fiissuemode_.SetAllocated(fiissuemode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fiissuemode_.IsDefault()) {
    _impl_.fiissuemode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
}

// double FIFaceAmount = 87;
inline void MDBasicInfo::clear_fifaceamount() {
  _impl_.fifaceamount_ = 0;
}
inline double MDBasicInfo::_internal_fifaceamount() const {
  return _impl_.fifaceamount_;
}
inline double MDBasicInfo::fifaceamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIFaceAmount)
  return _internal_fifaceamount();
}
inline void MDBasicInfo::_internal_set_fifaceamount(double value) {
  
  _impl_.fifaceamount_ = value;
}
inline void MDBasicInfo::set_fifaceamount(double value) {
  _internal_set_fifaceamount(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIFaceAmount)
}

// double FIIssuePrice = 88;
inline void MDBasicInfo::clear_fiissueprice() {
  _impl_.fiissueprice_ = 0;
}
inline double MDBasicInfo::_internal_fiissueprice() const {
  return _impl_.fiissueprice_;
}
inline double MDBasicInfo::fiissueprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssuePrice)
  return _internal_fiissueprice();
}
inline void MDBasicInfo::_internal_set_fiissueprice(double value) {
  
  _impl_.fiissueprice_ = value;
}
inline void MDBasicInfo::set_fiissueprice(double value) {
  _internal_set_fiissueprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssuePrice)
}

// string FIInterestType = 89;
inline void MDBasicInfo::clear_fiinteresttype() {
  _impl_.fiinteresttype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fiinteresttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
  return _internal_fiinteresttype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fiinteresttype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fiinteresttype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
}
inline std::string* MDBasicInfo::mutable_fiinteresttype() {
  std::string* _s = _internal_mutable_fiinteresttype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fiinteresttype() const {
  return _impl_.fiinteresttype_.Get();
}
inline void MDBasicInfo::_internal_set_fiinteresttype(const std::string& value) {
  
  _impl_.fiinteresttype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fiinteresttype() {
  
  return _impl_.fiinteresttype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fiinteresttype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
  return _impl_.fiinteresttype_.Release();
}
inline void MDBasicInfo::set_allocated_fiinteresttype(std::string* fiinteresttype) {
  if (fiinteresttype != nullptr) {
    
  } else {
    
  }
  _impl_.fiinteresttype_.SetAllocated(fiinteresttype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fiinteresttype_.IsDefault()) {
    _impl_.fiinteresttype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
}

// string FIInterestFrequency = 90;
inline void MDBasicInfo::clear_fiinterestfrequency() {
  _impl_.fiinterestfrequency_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fiinterestfrequency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
  return _internal_fiinterestfrequency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fiinterestfrequency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fiinterestfrequency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
}
inline std::string* MDBasicInfo::mutable_fiinterestfrequency() {
  std::string* _s = _internal_mutable_fiinterestfrequency();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fiinterestfrequency() const {
  return _impl_.fiinterestfrequency_.Get();
}
inline void MDBasicInfo::_internal_set_fiinterestfrequency(const std::string& value) {
  
  _impl_.fiinterestfrequency_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fiinterestfrequency() {
  
  return _impl_.fiinterestfrequency_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fiinterestfrequency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
  return _impl_.fiinterestfrequency_.Release();
}
inline void MDBasicInfo::set_allocated_fiinterestfrequency(std::string* fiinterestfrequency) {
  if (fiinterestfrequency != nullptr) {
    
  } else {
    
  }
  _impl_.fiinterestfrequency_.SetAllocated(fiinterestfrequency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fiinterestfrequency_.IsDefault()) {
    _impl_.fiinterestfrequency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
}

// double FIGuaranteedInterestRate = 91;
inline void MDBasicInfo::clear_figuaranteedinterestrate() {
  _impl_.figuaranteedinterestrate_ = 0;
}
inline double MDBasicInfo::_internal_figuaranteedinterestrate() const {
  return _impl_.figuaranteedinterestrate_;
}
inline double MDBasicInfo::figuaranteedinterestrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIGuaranteedInterestRate)
  return _internal_figuaranteedinterestrate();
}
inline void MDBasicInfo::_internal_set_figuaranteedinterestrate(double value) {
  
  _impl_.figuaranteedinterestrate_ = value;
}
inline void MDBasicInfo::set_figuaranteedinterestrate(double value) {
  _internal_set_figuaranteedinterestrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIGuaranteedInterestRate)
}

// double FIBaseInterestRate = 92;
inline void MDBasicInfo::clear_fibaseinterestrate() {
  _impl_.fibaseinterestrate_ = 0;
}
inline double MDBasicInfo::_internal_fibaseinterestrate() const {
  return _impl_.fibaseinterestrate_;
}
inline double MDBasicInfo::fibaseinterestrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIBaseInterestRate)
  return _internal_fibaseinterestrate();
}
inline void MDBasicInfo::_internal_set_fibaseinterestrate(double value) {
  
  _impl_.fibaseinterestrate_ = value;
}
inline void MDBasicInfo::set_fibaseinterestrate(double value) {
  _internal_set_fibaseinterestrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIBaseInterestRate)
}

// double FIQuotedMargin = 93;
inline void MDBasicInfo::clear_fiquotedmargin() {
  _impl_.fiquotedmargin_ = 0;
}
inline double MDBasicInfo::_internal_fiquotedmargin() const {
  return _impl_.fiquotedmargin_;
}
inline double MDBasicInfo::fiquotedmargin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIQuotedMargin)
  return _internal_fiquotedmargin();
}
inline void MDBasicInfo::_internal_set_fiquotedmargin(double value) {
  
  _impl_.fiquotedmargin_ = value;
}
inline void MDBasicInfo::set_fiquotedmargin(double value) {
  _internal_set_fiquotedmargin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIQuotedMargin)
}

// int32 FITimeLimit = 94;
inline void MDBasicInfo::clear_fitimelimit() {
  _impl_.fitimelimit_ = 0;
}
inline int32_t MDBasicInfo::_internal_fitimelimit() const {
  return _impl_.fitimelimit_;
}
inline int32_t MDBasicInfo::fitimelimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FITimeLimit)
  return _internal_fitimelimit();
}
inline void MDBasicInfo::_internal_set_fitimelimit(int32_t value) {
  
  _impl_.fitimelimit_ = value;
}
inline void MDBasicInfo::set_fitimelimit(int32_t value) {
  _internal_set_fitimelimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FITimeLimit)
}

// double FITotalIssuance = 95;
inline void MDBasicInfo::clear_fitotalissuance() {
  _impl_.fitotalissuance_ = 0;
}
inline double MDBasicInfo::_internal_fitotalissuance() const {
  return _impl_.fitotalissuance_;
}
inline double MDBasicInfo::fitotalissuance() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FITotalIssuance)
  return _internal_fitotalissuance();
}
inline void MDBasicInfo::_internal_set_fitotalissuance(double value) {
  
  _impl_.fitotalissuance_ = value;
}
inline void MDBasicInfo::set_fitotalissuance(double value) {
  _internal_set_fitotalissuance(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FITotalIssuance)
}

// string FIIssueStartDate = 96;
inline void MDBasicInfo::clear_fiissuestartdate() {
  _impl_.fiissuestartdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fiissuestartdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
  return _internal_fiissuestartdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fiissuestartdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fiissuestartdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
}
inline std::string* MDBasicInfo::mutable_fiissuestartdate() {
  std::string* _s = _internal_mutable_fiissuestartdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fiissuestartdate() const {
  return _impl_.fiissuestartdate_.Get();
}
inline void MDBasicInfo::_internal_set_fiissuestartdate(const std::string& value) {
  
  _impl_.fiissuestartdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fiissuestartdate() {
  
  return _impl_.fiissuestartdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fiissuestartdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
  return _impl_.fiissuestartdate_.Release();
}
inline void MDBasicInfo::set_allocated_fiissuestartdate(std::string* fiissuestartdate) {
  if (fiissuestartdate != nullptr) {
    
  } else {
    
  }
  _impl_.fiissuestartdate_.SetAllocated(fiissuestartdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fiissuestartdate_.IsDefault()) {
    _impl_.fiissuestartdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
}

// string FIIssueEndDate = 97;
inline void MDBasicInfo::clear_fiissueenddate() {
  _impl_.fiissueenddate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fiissueenddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
  return _internal_fiissueenddate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fiissueenddate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fiissueenddate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
}
inline std::string* MDBasicInfo::mutable_fiissueenddate() {
  std::string* _s = _internal_mutable_fiissueenddate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fiissueenddate() const {
  return _impl_.fiissueenddate_.Get();
}
inline void MDBasicInfo::_internal_set_fiissueenddate(const std::string& value) {
  
  _impl_.fiissueenddate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fiissueenddate() {
  
  return _impl_.fiissueenddate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fiissueenddate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
  return _impl_.fiissueenddate_.Release();
}
inline void MDBasicInfo::set_allocated_fiissueenddate(std::string* fiissueenddate) {
  if (fiissueenddate != nullptr) {
    
  } else {
    
  }
  _impl_.fiissueenddate_.SetAllocated(fiissueenddate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fiissueenddate_.IsDefault()) {
    _impl_.fiissueenddate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
}

// string FIListDate = 98;
inline void MDBasicInfo::clear_filistdate() {
  _impl_.filistdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::filistdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
  return _internal_filistdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_filistdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filistdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
}
inline std::string* MDBasicInfo::mutable_filistdate() {
  std::string* _s = _internal_mutable_filistdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_filistdate() const {
  return _impl_.filistdate_.Get();
}
inline void MDBasicInfo::_internal_set_filistdate(const std::string& value) {
  
  _impl_.filistdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_filistdate() {
  
  return _impl_.filistdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_filistdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
  return _impl_.filistdate_.Release();
}
inline void MDBasicInfo::set_allocated_filistdate(std::string* filistdate) {
  if (filistdate != nullptr) {
    
  } else {
    
  }
  _impl_.filistdate_.SetAllocated(filistdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filistdate_.IsDefault()) {
    _impl_.filistdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
}

// string FIExpireDate = 99;
inline void MDBasicInfo::clear_fiexpiredate() {
  _impl_.fiexpiredate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fiexpiredate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
  return _internal_fiexpiredate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fiexpiredate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fiexpiredate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
}
inline std::string* MDBasicInfo::mutable_fiexpiredate() {
  std::string* _s = _internal_mutable_fiexpiredate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fiexpiredate() const {
  return _impl_.fiexpiredate_.Get();
}
inline void MDBasicInfo::_internal_set_fiexpiredate(const std::string& value) {
  
  _impl_.fiexpiredate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fiexpiredate() {
  
  return _impl_.fiexpiredate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fiexpiredate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
  return _impl_.fiexpiredate_.Release();
}
inline void MDBasicInfo::set_allocated_fiexpiredate(std::string* fiexpiredate) {
  if (fiexpiredate != nullptr) {
    
  } else {
    
  }
  _impl_.fiexpiredate_.SetAllocated(fiexpiredate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fiexpiredate_.IsDefault()) {
    _impl_.fiexpiredate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
}

// string FINationalDebtType = 100;
inline void MDBasicInfo::clear_finationaldebttype() {
  _impl_.finationaldebttype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::finationaldebttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
  return _internal_finationaldebttype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_finationaldebttype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.finationaldebttype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
}
inline std::string* MDBasicInfo::mutable_finationaldebttype() {
  std::string* _s = _internal_mutable_finationaldebttype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_finationaldebttype() const {
  return _impl_.finationaldebttype_.Get();
}
inline void MDBasicInfo::_internal_set_finationaldebttype(const std::string& value) {
  
  _impl_.finationaldebttype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_finationaldebttype() {
  
  return _impl_.finationaldebttype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_finationaldebttype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
  return _impl_.finationaldebttype_.Release();
}
inline void MDBasicInfo::set_allocated_finationaldebttype(std::string* finationaldebttype) {
  if (finationaldebttype != nullptr) {
    
  } else {
    
  }
  _impl_.finationaldebttype_.SetAllocated(finationaldebttype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.finationaldebttype_.IsDefault()) {
    _impl_.finationaldebttype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
}

// string FIIssueMethod = 101;
inline void MDBasicInfo::clear_fiissuemethod() {
  _impl_.fiissuemethod_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::fiissuemethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
  return _internal_fiissuemethod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_fiissuemethod(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fiissuemethod_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
}
inline std::string* MDBasicInfo::mutable_fiissuemethod() {
  std::string* _s = _internal_mutable_fiissuemethod();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_fiissuemethod() const {
  return _impl_.fiissuemethod_.Get();
}
inline void MDBasicInfo::_internal_set_fiissuemethod(const std::string& value) {
  
  _impl_.fiissuemethod_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_fiissuemethod() {
  
  return _impl_.fiissuemethod_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_fiissuemethod() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
  return _impl_.fiissuemethod_.Release();
}
inline void MDBasicInfo::set_allocated_fiissuemethod(std::string* fiissuemethod) {
  if (fiissuemethod != nullptr) {
    
  } else {
    
  }
  _impl_.fiissuemethod_.SetAllocated(fiissuemethod, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fiissuemethod_.IsDefault()) {
    _impl_.fiissuemethod_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
}

// bool FICrossMarket = 102;
inline void MDBasicInfo::clear_ficrossmarket() {
  _impl_.ficrossmarket_ = false;
}
inline bool MDBasicInfo::_internal_ficrossmarket() const {
  return _impl_.ficrossmarket_;
}
inline bool MDBasicInfo::ficrossmarket() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FICrossMarket)
  return _internal_ficrossmarket();
}
inline void MDBasicInfo::_internal_set_ficrossmarket(bool value) {
  
  _impl_.ficrossmarket_ = value;
}
inline void MDBasicInfo::set_ficrossmarket(bool value) {
  _internal_set_ficrossmarket(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FICrossMarket)
}

// bool FIShortSellFlag = 103;
inline void MDBasicInfo::clear_fishortsellflag() {
  _impl_.fishortsellflag_ = false;
}
inline bool MDBasicInfo::_internal_fishortsellflag() const {
  return _impl_.fishortsellflag_;
}
inline bool MDBasicInfo::fishortsellflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIShortSellFlag)
  return _internal_fishortsellflag();
}
inline void MDBasicInfo::_internal_set_fishortsellflag(bool value) {
  
  _impl_.fishortsellflag_ = value;
}
inline void MDBasicInfo::set_fishortsellflag(bool value) {
  _internal_set_fishortsellflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIShortSellFlag)
}

// double FITotalShortSellQuota = 104;
inline void MDBasicInfo::clear_fitotalshortsellquota() {
  _impl_.fitotalshortsellquota_ = 0;
}
inline double MDBasicInfo::_internal_fitotalshortsellquota() const {
  return _impl_.fitotalshortsellquota_;
}
inline double MDBasicInfo::fitotalshortsellquota() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FITotalShortSellQuota)
  return _internal_fitotalshortsellquota();
}
inline void MDBasicInfo::_internal_set_fitotalshortsellquota(double value) {
  
  _impl_.fitotalshortsellquota_ = value;
}
inline void MDBasicInfo::set_fitotalshortsellquota(double value) {
  _internal_set_fitotalshortsellquota(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FITotalShortSellQuota)
}

// double FIDealerShortSellQuota = 105;
inline void MDBasicInfo::clear_fidealershortsellquota() {
  _impl_.fidealershortsellquota_ = 0;
}
inline double MDBasicInfo::_internal_fidealershortsellquota() const {
  return _impl_.fidealershortsellquota_;
}
inline double MDBasicInfo::fidealershortsellquota() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIDealerShortSellQuota)
  return _internal_fidealershortsellquota();
}
inline void MDBasicInfo::_internal_set_fidealershortsellquota(double value) {
  
  _impl_.fidealershortsellquota_ = value;
}
inline void MDBasicInfo::set_fidealershortsellquota(double value) {
  _internal_set_fidealershortsellquota(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIDealerShortSellQuota)
}

// double FIPreClosePx = 106;
inline void MDBasicInfo::clear_fipreclosepx() {
  _impl_.fipreclosepx_ = 0;
}
inline double MDBasicInfo::_internal_fipreclosepx() const {
  return _impl_.fipreclosepx_;
}
inline double MDBasicInfo::fipreclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIPreClosePx)
  return _internal_fipreclosepx();
}
inline void MDBasicInfo::_internal_set_fipreclosepx(double value) {
  
  _impl_.fipreclosepx_ = value;
}
inline void MDBasicInfo::set_fipreclosepx(double value) {
  _internal_set_fipreclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIPreClosePx)
}

// double FIPreWeightedPx = 107;
inline void MDBasicInfo::clear_fipreweightedpx() {
  _impl_.fipreweightedpx_ = 0;
}
inline double MDBasicInfo::_internal_fipreweightedpx() const {
  return _impl_.fipreweightedpx_;
}
inline double MDBasicInfo::fipreweightedpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIPreWeightedPx)
  return _internal_fipreweightedpx();
}
inline void MDBasicInfo::_internal_set_fipreweightedpx(double value) {
  
  _impl_.fipreweightedpx_ = value;
}
inline void MDBasicInfo::set_fipreweightedpx(double value) {
  _internal_set_fipreweightedpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIPreWeightedPx)
}

// string OptionListType = 110;
inline void MDBasicInfo::clear_optionlisttype() {
  _impl_.optionlisttype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionlisttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
  return _internal_optionlisttype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionlisttype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionlisttype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
}
inline std::string* MDBasicInfo::mutable_optionlisttype() {
  std::string* _s = _internal_mutable_optionlisttype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionlisttype() const {
  return _impl_.optionlisttype_.Get();
}
inline void MDBasicInfo::_internal_set_optionlisttype(const std::string& value) {
  
  _impl_.optionlisttype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionlisttype() {
  
  return _impl_.optionlisttype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionlisttype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
  return _impl_.optionlisttype_.Release();
}
inline void MDBasicInfo::set_allocated_optionlisttype(std::string* optionlisttype) {
  if (optionlisttype != nullptr) {
    
  } else {
    
  }
  _impl_.optionlisttype_.SetAllocated(optionlisttype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionlisttype_.IsDefault()) {
    _impl_.optionlisttype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
}

// string OptionDeliveryType = 111;
inline void MDBasicInfo::clear_optiondeliverytype() {
  _impl_.optiondeliverytype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optiondeliverytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
  return _internal_optiondeliverytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optiondeliverytype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optiondeliverytype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
}
inline std::string* MDBasicInfo::mutable_optiondeliverytype() {
  std::string* _s = _internal_mutable_optiondeliverytype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optiondeliverytype() const {
  return _impl_.optiondeliverytype_.Get();
}
inline void MDBasicInfo::_internal_set_optiondeliverytype(const std::string& value) {
  
  _impl_.optiondeliverytype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optiondeliverytype() {
  
  return _impl_.optiondeliverytype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optiondeliverytype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
  return _impl_.optiondeliverytype_.Release();
}
inline void MDBasicInfo::set_allocated_optiondeliverytype(std::string* optiondeliverytype) {
  if (optiondeliverytype != nullptr) {
    
  } else {
    
  }
  _impl_.optiondeliverytype_.SetAllocated(optiondeliverytype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optiondeliverytype_.IsDefault()) {
    _impl_.optiondeliverytype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
}

// int32 OptionAdjustTimes = 112;
inline void MDBasicInfo::clear_optionadjusttimes() {
  _impl_.optionadjusttimes_ = 0;
}
inline int32_t MDBasicInfo::_internal_optionadjusttimes() const {
  return _impl_.optionadjusttimes_;
}
inline int32_t MDBasicInfo::optionadjusttimes() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionAdjustTimes)
  return _internal_optionadjusttimes();
}
inline void MDBasicInfo::_internal_set_optionadjusttimes(int32_t value) {
  
  _impl_.optionadjusttimes_ = value;
}
inline void MDBasicInfo::set_optionadjusttimes(int32_t value) {
  _internal_set_optionadjusttimes(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionAdjustTimes)
}

// int64 OptionContractPosition = 113;
inline void MDBasicInfo::clear_optioncontractposition() {
  _impl_.optioncontractposition_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optioncontractposition() const {
  return _impl_.optioncontractposition_;
}
inline int64_t MDBasicInfo::optioncontractposition() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractPosition)
  return _internal_optioncontractposition();
}
inline void MDBasicInfo::_internal_set_optioncontractposition(int64_t value) {
  
  _impl_.optioncontractposition_ = value;
}
inline void MDBasicInfo::set_optioncontractposition(int64_t value) {
  _internal_set_optioncontractposition(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractPosition)
}

// int64 OptionBuyQtyUpperLimit = 114;
inline void MDBasicInfo::clear_optionbuyqtyupperlimit() {
  _impl_.optionbuyqtyupperlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionbuyqtyupperlimit() const {
  return _impl_.optionbuyqtyupperlimit_;
}
inline int64_t MDBasicInfo::optionbuyqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionBuyQtyUpperLimit)
  return _internal_optionbuyqtyupperlimit();
}
inline void MDBasicInfo::_internal_set_optionbuyqtyupperlimit(int64_t value) {
  
  _impl_.optionbuyqtyupperlimit_ = value;
}
inline void MDBasicInfo::set_optionbuyqtyupperlimit(int64_t value) {
  _internal_set_optionbuyqtyupperlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionBuyQtyUpperLimit)
}

// int64 OptionSellQtyUpperLimit = 115;
inline void MDBasicInfo::clear_optionsellqtyupperlimit() {
  _impl_.optionsellqtyupperlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionsellqtyupperlimit() const {
  return _impl_.optionsellqtyupperlimit_;
}
inline int64_t MDBasicInfo::optionsellqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellQtyUpperLimit)
  return _internal_optionsellqtyupperlimit();
}
inline void MDBasicInfo::_internal_set_optionsellqtyupperlimit(int64_t value) {
  
  _impl_.optionsellqtyupperlimit_ = value;
}
inline void MDBasicInfo::set_optionsellqtyupperlimit(int64_t value) {
  _internal_set_optionsellqtyupperlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellQtyUpperLimit)
}

// int64 OptionMarketOrderBuyQtyUpperLimit = 116;
inline void MDBasicInfo::clear_optionmarketorderbuyqtyupperlimit() {
  _impl_.optionmarketorderbuyqtyupperlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionmarketorderbuyqtyupperlimit() const {
  return _impl_.optionmarketorderbuyqtyupperlimit_;
}
inline int64_t MDBasicInfo::optionmarketorderbuyqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketOrderBuyQtyUpperLimit)
  return _internal_optionmarketorderbuyqtyupperlimit();
}
inline void MDBasicInfo::_internal_set_optionmarketorderbuyqtyupperlimit(int64_t value) {
  
  _impl_.optionmarketorderbuyqtyupperlimit_ = value;
}
inline void MDBasicInfo::set_optionmarketorderbuyqtyupperlimit(int64_t value) {
  _internal_set_optionmarketorderbuyqtyupperlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketOrderBuyQtyUpperLimit)
}

// int64 OptionMarketOrderSellQtyUpperLimit = 117;
inline void MDBasicInfo::clear_optionmarketordersellqtyupperlimit() {
  _impl_.optionmarketordersellqtyupperlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionmarketordersellqtyupperlimit() const {
  return _impl_.optionmarketordersellqtyupperlimit_;
}
inline int64_t MDBasicInfo::optionmarketordersellqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketOrderSellQtyUpperLimit)
  return _internal_optionmarketordersellqtyupperlimit();
}
inline void MDBasicInfo::_internal_set_optionmarketordersellqtyupperlimit(int64_t value) {
  
  _impl_.optionmarketordersellqtyupperlimit_ = value;
}
inline void MDBasicInfo::set_optionmarketordersellqtyupperlimit(int64_t value) {
  _internal_set_optionmarketordersellqtyupperlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketOrderSellQtyUpperLimit)
}

// int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
inline void MDBasicInfo::clear_optionquoteorderbuyqtyupperlimit() {
  _impl_.optionquoteorderbuyqtyupperlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionquoteorderbuyqtyupperlimit() const {
  return _impl_.optionquoteorderbuyqtyupperlimit_;
}
inline int64_t MDBasicInfo::optionquoteorderbuyqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionQuoteOrderBuyQtyUpperLimit)
  return _internal_optionquoteorderbuyqtyupperlimit();
}
inline void MDBasicInfo::_internal_set_optionquoteorderbuyqtyupperlimit(int64_t value) {
  
  _impl_.optionquoteorderbuyqtyupperlimit_ = value;
}
inline void MDBasicInfo::set_optionquoteorderbuyqtyupperlimit(int64_t value) {
  _internal_set_optionquoteorderbuyqtyupperlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionQuoteOrderBuyQtyUpperLimit)
}

// int64 OptionQuoteOrderSellQtyUpperLimit = 119;
inline void MDBasicInfo::clear_optionquoteordersellqtyupperlimit() {
  _impl_.optionquoteordersellqtyupperlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionquoteordersellqtyupperlimit() const {
  return _impl_.optionquoteordersellqtyupperlimit_;
}
inline int64_t MDBasicInfo::optionquoteordersellqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionQuoteOrderSellQtyUpperLimit)
  return _internal_optionquoteordersellqtyupperlimit();
}
inline void MDBasicInfo::_internal_set_optionquoteordersellqtyupperlimit(int64_t value) {
  
  _impl_.optionquoteordersellqtyupperlimit_ = value;
}
inline void MDBasicInfo::set_optionquoteordersellqtyupperlimit(int64_t value) {
  _internal_set_optionquoteordersellqtyupperlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionQuoteOrderSellQtyUpperLimit)
}

// int64 OptionBuyQtyUnit = 120;
inline void MDBasicInfo::clear_optionbuyqtyunit() {
  _impl_.optionbuyqtyunit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionbuyqtyunit() const {
  return _impl_.optionbuyqtyunit_;
}
inline int64_t MDBasicInfo::optionbuyqtyunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionBuyQtyUnit)
  return _internal_optionbuyqtyunit();
}
inline void MDBasicInfo::_internal_set_optionbuyqtyunit(int64_t value) {
  
  _impl_.optionbuyqtyunit_ = value;
}
inline void MDBasicInfo::set_optionbuyqtyunit(int64_t value) {
  _internal_set_optionbuyqtyunit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionBuyQtyUnit)
}

// int64 OptionSellQtyUnit = 121;
inline void MDBasicInfo::clear_optionsellqtyunit() {
  _impl_.optionsellqtyunit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_optionsellqtyunit() const {
  return _impl_.optionsellqtyunit_;
}
inline int64_t MDBasicInfo::optionsellqtyunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellQtyUnit)
  return _internal_optionsellqtyunit();
}
inline void MDBasicInfo::_internal_set_optionsellqtyunit(int64_t value) {
  
  _impl_.optionsellqtyunit_ = value;
}
inline void MDBasicInfo::set_optionsellqtyunit(int64_t value) {
  _internal_set_optionsellqtyunit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellQtyUnit)
}

// double OptionLastSellMargin = 122;
inline void MDBasicInfo::clear_optionlastsellmargin() {
  _impl_.optionlastsellmargin_ = 0;
}
inline double MDBasicInfo::_internal_optionlastsellmargin() const {
  return _impl_.optionlastsellmargin_;
}
inline double MDBasicInfo::optionlastsellmargin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionLastSellMargin)
  return _internal_optionlastsellmargin();
}
inline void MDBasicInfo::_internal_set_optionlastsellmargin(double value) {
  
  _impl_.optionlastsellmargin_ = value;
}
inline void MDBasicInfo::set_optionlastsellmargin(double value) {
  _internal_set_optionlastsellmargin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionLastSellMargin)
}

// double OptionSellMargin = 123;
inline void MDBasicInfo::clear_optionsellmargin() {
  _impl_.optionsellmargin_ = 0;
}
inline double MDBasicInfo::_internal_optionsellmargin() const {
  return _impl_.optionsellmargin_;
}
inline double MDBasicInfo::optionsellmargin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellMargin)
  return _internal_optionsellmargin();
}
inline void MDBasicInfo::_internal_set_optionsellmargin(double value) {
  
  _impl_.optionsellmargin_ = value;
}
inline void MDBasicInfo::set_optionsellmargin(double value) {
  _internal_set_optionsellmargin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellMargin)
}

// string OptionMarketMakerFlag = 124;
inline void MDBasicInfo::clear_optionmarketmakerflag() {
  _impl_.optionmarketmakerflag_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optionmarketmakerflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
  return _internal_optionmarketmakerflag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optionmarketmakerflag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optionmarketmakerflag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
}
inline std::string* MDBasicInfo::mutable_optionmarketmakerflag() {
  std::string* _s = _internal_mutable_optionmarketmakerflag();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optionmarketmakerflag() const {
  return _impl_.optionmarketmakerflag_.Get();
}
inline void MDBasicInfo::_internal_set_optionmarketmakerflag(const std::string& value) {
  
  _impl_.optionmarketmakerflag_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optionmarketmakerflag() {
  
  return _impl_.optionmarketmakerflag_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optionmarketmakerflag() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
  return _impl_.optionmarketmakerflag_.Release();
}
inline void MDBasicInfo::set_allocated_optionmarketmakerflag(std::string* optionmarketmakerflag) {
  if (optionmarketmakerflag != nullptr) {
    
  } else {
    
  }
  _impl_.optionmarketmakerflag_.SetAllocated(optionmarketmakerflag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optionmarketmakerflag_.IsDefault()) {
    _impl_.optionmarketmakerflag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
}

// string OptionCombinationStrategy = 125;
inline void MDBasicInfo::clear_optioncombinationstrategy() {
  _impl_.optioncombinationstrategy_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::optioncombinationstrategy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
  return _internal_optioncombinationstrategy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_optioncombinationstrategy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optioncombinationstrategy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
}
inline std::string* MDBasicInfo::mutable_optioncombinationstrategy() {
  std::string* _s = _internal_mutable_optioncombinationstrategy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_optioncombinationstrategy() const {
  return _impl_.optioncombinationstrategy_.Get();
}
inline void MDBasicInfo::_internal_set_optioncombinationstrategy(const std::string& value) {
  
  _impl_.optioncombinationstrategy_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_optioncombinationstrategy() {
  
  return _impl_.optioncombinationstrategy_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_optioncombinationstrategy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
  return _impl_.optioncombinationstrategy_.Release();
}
inline void MDBasicInfo::set_allocated_optioncombinationstrategy(std::string* optioncombinationstrategy) {
  if (optioncombinationstrategy != nullptr) {
    
  } else {
    
  }
  _impl_.optioncombinationstrategy_.SetAllocated(optioncombinationstrategy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optioncombinationstrategy_.IsDefault()) {
    _impl_.optioncombinationstrategy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
}

// string DeliveryYear = 126;
inline void MDBasicInfo::clear_deliveryyear() {
  _impl_.deliveryyear_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::deliveryyear() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
  return _internal_deliveryyear();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_deliveryyear(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deliveryyear_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
}
inline std::string* MDBasicInfo::mutable_deliveryyear() {
  std::string* _s = _internal_mutable_deliveryyear();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_deliveryyear() const {
  return _impl_.deliveryyear_.Get();
}
inline void MDBasicInfo::_internal_set_deliveryyear(const std::string& value) {
  
  _impl_.deliveryyear_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_deliveryyear() {
  
  return _impl_.deliveryyear_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_deliveryyear() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
  return _impl_.deliveryyear_.Release();
}
inline void MDBasicInfo::set_allocated_deliveryyear(std::string* deliveryyear) {
  if (deliveryyear != nullptr) {
    
  } else {
    
  }
  _impl_.deliveryyear_.SetAllocated(deliveryyear, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deliveryyear_.IsDefault()) {
    _impl_.deliveryyear_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
}

// string DeliveryMonth = 127;
inline void MDBasicInfo::clear_deliverymonth() {
  _impl_.deliverymonth_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::deliverymonth() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
  return _internal_deliverymonth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_deliverymonth(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deliverymonth_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
}
inline std::string* MDBasicInfo::mutable_deliverymonth() {
  std::string* _s = _internal_mutable_deliverymonth();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_deliverymonth() const {
  return _impl_.deliverymonth_.Get();
}
inline void MDBasicInfo::_internal_set_deliverymonth(const std::string& value) {
  
  _impl_.deliverymonth_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_deliverymonth() {
  
  return _impl_.deliverymonth_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_deliverymonth() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
  return _impl_.deliverymonth_.Release();
}
inline void MDBasicInfo::set_allocated_deliverymonth(std::string* deliverymonth) {
  if (deliverymonth != nullptr) {
    
  } else {
    
  }
  _impl_.deliverymonth_.SetAllocated(deliverymonth, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deliverymonth_.IsDefault()) {
    _impl_.deliverymonth_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
}

// string InstrumentID = 128;
inline void MDBasicInfo::clear_instrumentid() {
  _impl_.instrumentid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
  return _internal_instrumentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_instrumentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrumentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
}
inline std::string* MDBasicInfo::mutable_instrumentid() {
  std::string* _s = _internal_mutable_instrumentid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_instrumentid() const {
  return _impl_.instrumentid_.Get();
}
inline void MDBasicInfo::_internal_set_instrumentid(const std::string& value) {
  
  _impl_.instrumentid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_instrumentid() {
  
  return _impl_.instrumentid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_instrumentid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
  return _impl_.instrumentid_.Release();
}
inline void MDBasicInfo::set_allocated_instrumentid(std::string* instrumentid) {
  if (instrumentid != nullptr) {
    
  } else {
    
  }
  _impl_.instrumentid_.SetAllocated(instrumentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrumentid_.IsDefault()) {
    _impl_.instrumentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
}

// string InstrumentName = 129;
inline void MDBasicInfo::clear_instrumentname() {
  _impl_.instrumentname_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::instrumentname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
  return _internal_instrumentname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_instrumentname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrumentname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
}
inline std::string* MDBasicInfo::mutable_instrumentname() {
  std::string* _s = _internal_mutable_instrumentname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_instrumentname() const {
  return _impl_.instrumentname_.Get();
}
inline void MDBasicInfo::_internal_set_instrumentname(const std::string& value) {
  
  _impl_.instrumentname_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_instrumentname() {
  
  return _impl_.instrumentname_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_instrumentname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
  return _impl_.instrumentname_.Release();
}
inline void MDBasicInfo::set_allocated_instrumentname(std::string* instrumentname) {
  if (instrumentname != nullptr) {
    
  } else {
    
  }
  _impl_.instrumentname_.SetAllocated(instrumentname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrumentname_.IsDefault()) {
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
}

// string ExchangeInstID = 130;
inline void MDBasicInfo::clear_exchangeinstid() {
  _impl_.exchangeinstid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
  return _internal_exchangeinstid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_exchangeinstid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exchangeinstid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
}
inline std::string* MDBasicInfo::mutable_exchangeinstid() {
  std::string* _s = _internal_mutable_exchangeinstid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_exchangeinstid() const {
  return _impl_.exchangeinstid_.Get();
}
inline void MDBasicInfo::_internal_set_exchangeinstid(const std::string& value) {
  
  _impl_.exchangeinstid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_exchangeinstid() {
  
  return _impl_.exchangeinstid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_exchangeinstid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
  return _impl_.exchangeinstid_.Release();
}
inline void MDBasicInfo::set_allocated_exchangeinstid(std::string* exchangeinstid) {
  if (exchangeinstid != nullptr) {
    
  } else {
    
  }
  _impl_.exchangeinstid_.SetAllocated(exchangeinstid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exchangeinstid_.IsDefault()) {
    _impl_.exchangeinstid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
}

// string ProductID = 131;
inline void MDBasicInfo::clear_productid() {
  _impl_.productid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::productid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
  return _internal_productid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_productid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.productid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
}
inline std::string* MDBasicInfo::mutable_productid() {
  std::string* _s = _internal_mutable_productid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_productid() const {
  return _impl_.productid_.Get();
}
inline void MDBasicInfo::_internal_set_productid(const std::string& value) {
  
  _impl_.productid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_productid() {
  
  return _impl_.productid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_productid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
  return _impl_.productid_.Release();
}
inline void MDBasicInfo::set_allocated_productid(std::string* productid) {
  if (productid != nullptr) {
    
  } else {
    
  }
  _impl_.productid_.SetAllocated(productid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.productid_.IsDefault()) {
    _impl_.productid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
}

// int64 MaxMarketOrderVolume = 132;
inline void MDBasicInfo::clear_maxmarketordervolume() {
  _impl_.maxmarketordervolume_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_maxmarketordervolume() const {
  return _impl_.maxmarketordervolume_;
}
inline int64_t MDBasicInfo::maxmarketordervolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarketOrderVolume)
  return _internal_maxmarketordervolume();
}
inline void MDBasicInfo::_internal_set_maxmarketordervolume(int64_t value) {
  
  _impl_.maxmarketordervolume_ = value;
}
inline void MDBasicInfo::set_maxmarketordervolume(int64_t value) {
  _internal_set_maxmarketordervolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarketOrderVolume)
}

// int64 MinMarketOrderVolume = 133;
inline void MDBasicInfo::clear_minmarketordervolume() {
  _impl_.minmarketordervolume_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_minmarketordervolume() const {
  return _impl_.minmarketordervolume_;
}
inline int64_t MDBasicInfo::minmarketordervolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MinMarketOrderVolume)
  return _internal_minmarketordervolume();
}
inline void MDBasicInfo::_internal_set_minmarketordervolume(int64_t value) {
  
  _impl_.minmarketordervolume_ = value;
}
inline void MDBasicInfo::set_minmarketordervolume(int64_t value) {
  _internal_set_minmarketordervolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MinMarketOrderVolume)
}

// int64 MaxLimitOrderVolume = 134;
inline void MDBasicInfo::clear_maxlimitordervolume() {
  _impl_.maxlimitordervolume_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_maxlimitordervolume() const {
  return _impl_.maxlimitordervolume_;
}
inline int64_t MDBasicInfo::maxlimitordervolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MaxLimitOrderVolume)
  return _internal_maxlimitordervolume();
}
inline void MDBasicInfo::_internal_set_maxlimitordervolume(int64_t value) {
  
  _impl_.maxlimitordervolume_ = value;
}
inline void MDBasicInfo::set_maxlimitordervolume(int64_t value) {
  _internal_set_maxlimitordervolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MaxLimitOrderVolume)
}

// int64 MinLimitOrderVolume = 135;
inline void MDBasicInfo::clear_minlimitordervolume() {
  _impl_.minlimitordervolume_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_minlimitordervolume() const {
  return _impl_.minlimitordervolume_;
}
inline int64_t MDBasicInfo::minlimitordervolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MinLimitOrderVolume)
  return _internal_minlimitordervolume();
}
inline void MDBasicInfo::_internal_set_minlimitordervolume(int64_t value) {
  
  _impl_.minlimitordervolume_ = value;
}
inline void MDBasicInfo::set_minlimitordervolume(int64_t value) {
  _internal_set_minlimitordervolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MinLimitOrderVolume)
}

// int64 VolumeMultiple = 136;
inline void MDBasicInfo::clear_volumemultiple() {
  _impl_.volumemultiple_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_volumemultiple() const {
  return _impl_.volumemultiple_;
}
inline int64_t MDBasicInfo::volumemultiple() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.VolumeMultiple)
  return _internal_volumemultiple();
}
inline void MDBasicInfo::_internal_set_volumemultiple(int64_t value) {
  
  _impl_.volumemultiple_ = value;
}
inline void MDBasicInfo::set_volumemultiple(int64_t value) {
  _internal_set_volumemultiple(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.VolumeMultiple)
}

// string CreateDate = 137;
inline void MDBasicInfo::clear_createdate() {
  _impl_.createdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::createdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
  return _internal_createdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_createdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.createdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
}
inline std::string* MDBasicInfo::mutable_createdate() {
  std::string* _s = _internal_mutable_createdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_createdate() const {
  return _impl_.createdate_.Get();
}
inline void MDBasicInfo::_internal_set_createdate(const std::string& value) {
  
  _impl_.createdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_createdate() {
  
  return _impl_.createdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_createdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
  return _impl_.createdate_.Release();
}
inline void MDBasicInfo::set_allocated_createdate(std::string* createdate) {
  if (createdate != nullptr) {
    
  } else {
    
  }
  _impl_.createdate_.SetAllocated(createdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createdate_.IsDefault()) {
    _impl_.createdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
}

// string ExpireDate = 138;
inline void MDBasicInfo::clear_expiredate() {
  _impl_.expiredate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::expiredate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
  return _internal_expiredate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_expiredate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.expiredate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
}
inline std::string* MDBasicInfo::mutable_expiredate() {
  std::string* _s = _internal_mutable_expiredate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_expiredate() const {
  return _impl_.expiredate_.Get();
}
inline void MDBasicInfo::_internal_set_expiredate(const std::string& value) {
  
  _impl_.expiredate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_expiredate() {
  
  return _impl_.expiredate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_expiredate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
  return _impl_.expiredate_.Release();
}
inline void MDBasicInfo::set_allocated_expiredate(std::string* expiredate) {
  if (expiredate != nullptr) {
    
  } else {
    
  }
  _impl_.expiredate_.SetAllocated(expiredate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.expiredate_.IsDefault()) {
    _impl_.expiredate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
}

// string StartDelivDate = 139;
inline void MDBasicInfo::clear_startdelivdate() {
  _impl_.startdelivdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::startdelivdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
  return _internal_startdelivdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_startdelivdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.startdelivdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
}
inline std::string* MDBasicInfo::mutable_startdelivdate() {
  std::string* _s = _internal_mutable_startdelivdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_startdelivdate() const {
  return _impl_.startdelivdate_.Get();
}
inline void MDBasicInfo::_internal_set_startdelivdate(const std::string& value) {
  
  _impl_.startdelivdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_startdelivdate() {
  
  return _impl_.startdelivdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_startdelivdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
  return _impl_.startdelivdate_.Release();
}
inline void MDBasicInfo::set_allocated_startdelivdate(std::string* startdelivdate) {
  if (startdelivdate != nullptr) {
    
  } else {
    
  }
  _impl_.startdelivdate_.SetAllocated(startdelivdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.startdelivdate_.IsDefault()) {
    _impl_.startdelivdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
}

// string EndDelivDate = 140;
inline void MDBasicInfo::clear_enddelivdate() {
  _impl_.enddelivdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::enddelivdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
  return _internal_enddelivdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_enddelivdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enddelivdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
}
inline std::string* MDBasicInfo::mutable_enddelivdate() {
  std::string* _s = _internal_mutable_enddelivdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_enddelivdate() const {
  return _impl_.enddelivdate_.Get();
}
inline void MDBasicInfo::_internal_set_enddelivdate(const std::string& value) {
  
  _impl_.enddelivdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_enddelivdate() {
  
  return _impl_.enddelivdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_enddelivdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
  return _impl_.enddelivdate_.Release();
}
inline void MDBasicInfo::set_allocated_enddelivdate(std::string* enddelivdate) {
  if (enddelivdate != nullptr) {
    
  } else {
    
  }
  _impl_.enddelivdate_.SetAllocated(enddelivdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enddelivdate_.IsDefault()) {
    _impl_.enddelivdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
}

// string PositionType = 141;
inline void MDBasicInfo::clear_positiontype() {
  _impl_.positiontype_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::positiontype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
  return _internal_positiontype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_positiontype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.positiontype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
}
inline std::string* MDBasicInfo::mutable_positiontype() {
  std::string* _s = _internal_mutable_positiontype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_positiontype() const {
  return _impl_.positiontype_.Get();
}
inline void MDBasicInfo::_internal_set_positiontype(const std::string& value) {
  
  _impl_.positiontype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_positiontype() {
  
  return _impl_.positiontype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_positiontype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
  return _impl_.positiontype_.Release();
}
inline void MDBasicInfo::set_allocated_positiontype(std::string* positiontype) {
  if (positiontype != nullptr) {
    
  } else {
    
  }
  _impl_.positiontype_.SetAllocated(positiontype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.positiontype_.IsDefault()) {
    _impl_.positiontype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
}

// double LongMarginRatio = 142;
inline void MDBasicInfo::clear_longmarginratio() {
  _impl_.longmarginratio_ = 0;
}
inline double MDBasicInfo::_internal_longmarginratio() const {
  return _impl_.longmarginratio_;
}
inline double MDBasicInfo::longmarginratio() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.LongMarginRatio)
  return _internal_longmarginratio();
}
inline void MDBasicInfo::_internal_set_longmarginratio(double value) {
  
  _impl_.longmarginratio_ = value;
}
inline void MDBasicInfo::set_longmarginratio(double value) {
  _internal_set_longmarginratio(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.LongMarginRatio)
}

// double ShortMarginRatio = 143;
inline void MDBasicInfo::clear_shortmarginratio() {
  _impl_.shortmarginratio_ = 0;
}
inline double MDBasicInfo::_internal_shortmarginratio() const {
  return _impl_.shortmarginratio_;
}
inline double MDBasicInfo::shortmarginratio() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ShortMarginRatio)
  return _internal_shortmarginratio();
}
inline void MDBasicInfo::_internal_set_shortmarginratio(double value) {
  
  _impl_.shortmarginratio_ = value;
}
inline void MDBasicInfo::set_shortmarginratio(double value) {
  _internal_set_shortmarginratio(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ShortMarginRatio)
}

// string MaxMarginSideAlgorithm = 144;
inline void MDBasicInfo::clear_maxmarginsidealgorithm() {
  _impl_.maxmarginsidealgorithm_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::maxmarginsidealgorithm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
  return _internal_maxmarginsidealgorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_maxmarginsidealgorithm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.maxmarginsidealgorithm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
}
inline std::string* MDBasicInfo::mutable_maxmarginsidealgorithm() {
  std::string* _s = _internal_mutable_maxmarginsidealgorithm();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_maxmarginsidealgorithm() const {
  return _impl_.maxmarginsidealgorithm_.Get();
}
inline void MDBasicInfo::_internal_set_maxmarginsidealgorithm(const std::string& value) {
  
  _impl_.maxmarginsidealgorithm_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_maxmarginsidealgorithm() {
  
  return _impl_.maxmarginsidealgorithm_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_maxmarginsidealgorithm() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
  return _impl_.maxmarginsidealgorithm_.Release();
}
inline void MDBasicInfo::set_allocated_maxmarginsidealgorithm(std::string* maxmarginsidealgorithm) {
  if (maxmarginsidealgorithm != nullptr) {
    
  } else {
    
  }
  _impl_.maxmarginsidealgorithm_.SetAllocated(maxmarginsidealgorithm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.maxmarginsidealgorithm_.IsDefault()) {
    _impl_.maxmarginsidealgorithm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
}

// double StrikePrice = 145;
inline void MDBasicInfo::clear_strikeprice() {
  _impl_.strikeprice_ = 0;
}
inline double MDBasicInfo::_internal_strikeprice() const {
  return _impl_.strikeprice_;
}
inline double MDBasicInfo::strikeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.StrikePrice)
  return _internal_strikeprice();
}
inline void MDBasicInfo::_internal_set_strikeprice(double value) {
  
  _impl_.strikeprice_ = value;
}
inline void MDBasicInfo::set_strikeprice(double value) {
  _internal_set_strikeprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.StrikePrice)
}

// double PreOpenInterest = 146;
inline void MDBasicInfo::clear_preopeninterest() {
  _impl_.preopeninterest_ = 0;
}
inline double MDBasicInfo::_internal_preopeninterest() const {
  return _impl_.preopeninterest_;
}
inline double MDBasicInfo::preopeninterest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PreOpenInterest)
  return _internal_preopeninterest();
}
inline void MDBasicInfo::_internal_set_preopeninterest(double value) {
  
  _impl_.preopeninterest_ = value;
}
inline void MDBasicInfo::set_preopeninterest(double value) {
  _internal_set_preopeninterest(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PreOpenInterest)
}

// string FormerSymbol = 147;
inline void MDBasicInfo::clear_formersymbol() {
  _impl_.formersymbol_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::formersymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
  return _internal_formersymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_formersymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.formersymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
}
inline std::string* MDBasicInfo::mutable_formersymbol() {
  std::string* _s = _internal_mutable_formersymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_formersymbol() const {
  return _impl_.formersymbol_.Get();
}
inline void MDBasicInfo::_internal_set_formersymbol(const std::string& value) {
  
  _impl_.formersymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_formersymbol() {
  
  return _impl_.formersymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_formersymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
  return _impl_.formersymbol_.Release();
}
inline void MDBasicInfo::set_allocated_formersymbol(std::string* formersymbol) {
  if (formersymbol != nullptr) {
    
  } else {
    
  }
  _impl_.formersymbol_.SetAllocated(formersymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.formersymbol_.IsDefault()) {
    _impl_.formersymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
}

// string DelistDate = 148;
inline void MDBasicInfo::clear_delistdate() {
  _impl_.delistdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::delistdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
  return _internal_delistdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_delistdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.delistdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
}
inline std::string* MDBasicInfo::mutable_delistdate() {
  std::string* _s = _internal_mutable_delistdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_delistdate() const {
  return _impl_.delistdate_.Get();
}
inline void MDBasicInfo::_internal_set_delistdate(const std::string& value) {
  
  _impl_.delistdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_delistdate() {
  
  return _impl_.delistdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_delistdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
  return _impl_.delistdate_.Release();
}
inline void MDBasicInfo::set_allocated_delistdate(std::string* delistdate) {
  if (delistdate != nullptr) {
    
  } else {
    
  }
  _impl_.delistdate_.SetAllocated(delistdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delistdate_.IsDefault()) {
    _impl_.delistdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
}

// int64 BuyQtyUnit = 149;
inline void MDBasicInfo::clear_buyqtyunit() {
  _impl_.buyqtyunit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_buyqtyunit() const {
  return _impl_.buyqtyunit_;
}
inline int64_t MDBasicInfo::buyqtyunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyUnit)
  return _internal_buyqtyunit();
}
inline void MDBasicInfo::_internal_set_buyqtyunit(int64_t value) {
  
  _impl_.buyqtyunit_ = value;
}
inline void MDBasicInfo::set_buyqtyunit(int64_t value) {
  _internal_set_buyqtyunit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyUnit)
}

// int64 SellQtyUnit = 150;
inline void MDBasicInfo::clear_sellqtyunit() {
  _impl_.sellqtyunit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_sellqtyunit() const {
  return _impl_.sellqtyunit_;
}
inline int64_t MDBasicInfo::sellqtyunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyUnit)
  return _internal_sellqtyunit();
}
inline void MDBasicInfo::_internal_set_sellqtyunit(int64_t value) {
  
  _impl_.sellqtyunit_ = value;
}
inline void MDBasicInfo::set_sellqtyunit(int64_t value) {
  _internal_set_sellqtyunit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyUnit)
}

// int64 BuyQtyUpperLimit = 161;
inline void MDBasicInfo::clear_buyqtyupperlimit() {
  _impl_.buyqtyupperlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_buyqtyupperlimit() const {
  return _impl_.buyqtyupperlimit_;
}
inline int64_t MDBasicInfo::buyqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyUpperLimit)
  return _internal_buyqtyupperlimit();
}
inline void MDBasicInfo::_internal_set_buyqtyupperlimit(int64_t value) {
  
  _impl_.buyqtyupperlimit_ = value;
}
inline void MDBasicInfo::set_buyqtyupperlimit(int64_t value) {
  _internal_set_buyqtyupperlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyUpperLimit)
}

// int64 SellQtyUpperLimit = 162;
inline void MDBasicInfo::clear_sellqtyupperlimit() {
  _impl_.sellqtyupperlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_sellqtyupperlimit() const {
  return _impl_.sellqtyupperlimit_;
}
inline int64_t MDBasicInfo::sellqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyUpperLimit)
  return _internal_sellqtyupperlimit();
}
inline void MDBasicInfo::_internal_set_sellqtyupperlimit(int64_t value) {
  
  _impl_.sellqtyupperlimit_ = value;
}
inline void MDBasicInfo::set_sellqtyupperlimit(int64_t value) {
  _internal_set_sellqtyupperlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyUpperLimit)
}

// int64 BuyQtyLowerLimit = 163;
inline void MDBasicInfo::clear_buyqtylowerlimit() {
  _impl_.buyqtylowerlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_buyqtylowerlimit() const {
  return _impl_.buyqtylowerlimit_;
}
inline int64_t MDBasicInfo::buyqtylowerlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyLowerLimit)
  return _internal_buyqtylowerlimit();
}
inline void MDBasicInfo::_internal_set_buyqtylowerlimit(int64_t value) {
  
  _impl_.buyqtylowerlimit_ = value;
}
inline void MDBasicInfo::set_buyqtylowerlimit(int64_t value) {
  _internal_set_buyqtylowerlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyLowerLimit)
}

// int64 SellQtyLowerLimit = 164;
inline void MDBasicInfo::clear_sellqtylowerlimit() {
  _impl_.sellqtylowerlimit_ = int64_t{0};
}
inline int64_t MDBasicInfo::_internal_sellqtylowerlimit() const {
  return _impl_.sellqtylowerlimit_;
}
inline int64_t MDBasicInfo::sellqtylowerlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyLowerLimit)
  return _internal_sellqtylowerlimit();
}
inline void MDBasicInfo::_internal_set_sellqtylowerlimit(int64_t value) {
  
  _impl_.sellqtylowerlimit_ = value;
}
inline void MDBasicInfo::set_sellqtylowerlimit(int64_t value) {
  _internal_set_sellqtylowerlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyLowerLimit)
}

// int32 VCMFlag = 165;
inline void MDBasicInfo::clear_vcmflag() {
  _impl_.vcmflag_ = 0;
}
inline int32_t MDBasicInfo::_internal_vcmflag() const {
  return _impl_.vcmflag_;
}
inline int32_t MDBasicInfo::vcmflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.VCMFlag)
  return _internal_vcmflag();
}
inline void MDBasicInfo::_internal_set_vcmflag(int32_t value) {
  
  _impl_.vcmflag_ = value;
}
inline void MDBasicInfo::set_vcmflag(int32_t value) {
  _internal_set_vcmflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.VCMFlag)
}

// int32 CASFlag = 166;
inline void MDBasicInfo::clear_casflag() {
  _impl_.casflag_ = 0;
}
inline int32_t MDBasicInfo::_internal_casflag() const {
  return _impl_.casflag_;
}
inline int32_t MDBasicInfo::casflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.CASFlag)
  return _internal_casflag();
}
inline void MDBasicInfo::_internal_set_casflag(int32_t value) {
  
  _impl_.casflag_ = value;
}
inline void MDBasicInfo::set_casflag(int32_t value) {
  _internal_set_casflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.CASFlag)
}

// int32 POSFlag = 167;
inline void MDBasicInfo::clear_posflag() {
  _impl_.posflag_ = 0;
}
inline int32_t MDBasicInfo::_internal_posflag() const {
  return _impl_.posflag_;
}
inline int32_t MDBasicInfo::posflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.POSFlag)
  return _internal_posflag();
}
inline void MDBasicInfo::_internal_set_posflag(int32_t value) {
  
  _impl_.posflag_ = value;
}
inline void MDBasicInfo::set_posflag(int32_t value) {
  _internal_set_posflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.POSFlag)
}

// double POSUpperLimitPx = 168;
inline void MDBasicInfo::clear_posupperlimitpx() {
  _impl_.posupperlimitpx_ = 0;
}
inline double MDBasicInfo::_internal_posupperlimitpx() const {
  return _impl_.posupperlimitpx_;
}
inline double MDBasicInfo::posupperlimitpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.POSUpperLimitPx)
  return _internal_posupperlimitpx();
}
inline void MDBasicInfo::_internal_set_posupperlimitpx(double value) {
  
  _impl_.posupperlimitpx_ = value;
}
inline void MDBasicInfo::set_posupperlimitpx(double value) {
  _internal_set_posupperlimitpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.POSUpperLimitPx)
}

// double POSLowerLimitPx = 169;
inline void MDBasicInfo::clear_poslowerlimitpx() {
  _impl_.poslowerlimitpx_ = 0;
}
inline double MDBasicInfo::_internal_poslowerlimitpx() const {
  return _impl_.poslowerlimitpx_;
}
inline double MDBasicInfo::poslowerlimitpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.POSLowerLimitPx)
  return _internal_poslowerlimitpx();
}
inline void MDBasicInfo::_internal_set_poslowerlimitpx(double value) {
  
  _impl_.poslowerlimitpx_ = value;
}
inline void MDBasicInfo::set_poslowerlimitpx(double value) {
  _internal_set_poslowerlimitpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.POSLowerLimitPx)
}

// string BaseContractID = 170;
inline void MDBasicInfo::clear_basecontractid() {
  _impl_.basecontractid_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::basecontractid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
  return _internal_basecontractid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_basecontractid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.basecontractid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
}
inline std::string* MDBasicInfo::mutable_basecontractid() {
  std::string* _s = _internal_mutable_basecontractid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_basecontractid() const {
  return _impl_.basecontractid_.Get();
}
inline void MDBasicInfo::_internal_set_basecontractid(const std::string& value) {
  
  _impl_.basecontractid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_basecontractid() {
  
  return _impl_.basecontractid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_basecontractid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
  return _impl_.basecontractid_.Release();
}
inline void MDBasicInfo::set_allocated_basecontractid(std::string* basecontractid) {
  if (basecontractid != nullptr) {
    
  } else {
    
  }
  _impl_.basecontractid_.SetAllocated(basecontractid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.basecontractid_.IsDefault()) {
    _impl_.basecontractid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
}

// repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
inline int MDBasicInfo::_internal_constantparams_size() const {
  return _impl_.constantparams_.size();
}
inline int MDBasicInfo::constantparams_size() const {
  return _internal_constantparams_size();
}
inline void MDBasicInfo::clear_constantparams() {
  _impl_.constantparams_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* MDBasicInfo::mutable_constantparams(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return _impl_.constantparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >*
MDBasicInfo::mutable_constantparams() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return &_impl_.constantparams_;
}
inline const ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam& MDBasicInfo::_internal_constantparams(int index) const {
  return _impl_.constantparams_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam& MDBasicInfo::constantparams(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return _internal_constantparams(index);
}
inline ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* MDBasicInfo::_internal_add_constantparams() {
  return _impl_.constantparams_.Add();
}
inline ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* MDBasicInfo::add_constantparams() {
  ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* _add = _internal_add_constantparams();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >&
MDBasicInfo::constantparams() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return _impl_.constantparams_;
}

// int32 DataMultiplePowerOf10 = 172;
inline void MDBasicInfo::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDBasicInfo::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDBasicInfo::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDBasicInfo::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDBasicInfo::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DataMultiplePowerOf10)
}

// string InterestAccrualDate = 173;
inline void MDBasicInfo::clear_interestaccrualdate() {
  _impl_.interestaccrualdate_.ClearToEmpty();
}
inline const std::string& MDBasicInfo::interestaccrualdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
  return _internal_interestaccrualdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBasicInfo::set_interestaccrualdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interestaccrualdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
}
inline std::string* MDBasicInfo::mutable_interestaccrualdate() {
  std::string* _s = _internal_mutable_interestaccrualdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
  return _s;
}
inline const std::string& MDBasicInfo::_internal_interestaccrualdate() const {
  return _impl_.interestaccrualdate_.Get();
}
inline void MDBasicInfo::_internal_set_interestaccrualdate(const std::string& value) {
  
  _impl_.interestaccrualdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBasicInfo::_internal_mutable_interestaccrualdate() {
  
  return _impl_.interestaccrualdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBasicInfo::release_interestaccrualdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
  return _impl_.interestaccrualdate_.Release();
}
inline void MDBasicInfo::set_allocated_interestaccrualdate(std::string* interestaccrualdate) {
  if (interestaccrualdate != nullptr) {
    
  } else {
    
  }
  _impl_.interestaccrualdate_.SetAllocated(interestaccrualdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interestaccrualdate_.IsDefault()) {
    _impl_.interestaccrualdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDBasicInfo_2eproto
