// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADKLine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADKLine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADKLine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "EMDPeriodType.pb.h"
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADKLine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADKLine_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADKLine_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADKLine;
struct ADKLineDefaultTypeInternal;
extern ADKLineDefaultTypeInternal _ADKLine_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADKLine* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADKLine>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADKLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADKLine) */ {
 public:
  inline ADKLine() : ADKLine(nullptr) {}
  ~ADKLine() override;
  explicit PROTOBUF_CONSTEXPR ADKLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADKLine(const ADKLine& from);
  ADKLine(ADKLine&& from) noexcept
    : ADKLine() {
    *this = ::std::move(from);
  }

  inline ADKLine& operator=(const ADKLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADKLine& operator=(ADKLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADKLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADKLine* internal_default_instance() {
    return reinterpret_cast<const ADKLine*>(
               &_ADKLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADKLine& a, ADKLine& b) {
    a.Swap(&b);
  }
  inline void Swap(ADKLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADKLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADKLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADKLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADKLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADKLine& from) {
    ADKLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADKLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADKLine";
  }
  protected:
  explicit ADKLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kOpenPxFieldNumber = 8,
    kClosePxFieldNumber = 9,
    kHighPxFieldNumber = 10,
    kLowPxFieldNumber = 11,
    kNumTradesFieldNumber = 12,
    kPeriodTypeFieldNumber = 7,
    kExchangeDateFieldNumber = 18,
    kTotalVolumeTradeFieldNumber = 13,
    kTotalValueTradeFieldNumber = 14,
    kIOPVFieldNumber = 15,
    kOpenInterestFieldNumber = 16,
    kSettlePriceFieldNumber = 17,
    kExchangeTimeFieldNumber = 19,
    kKLineCategoryFieldNumber = 20,
    kAfterHoursNumTradesFieldNumber = 21,
    kAfterHoursTotalVolumeTradeFieldNumber = 22,
    kAfterHoursTotalValueTradeFieldNumber = 23,
    kPreClosePxFieldNumber = 24,
    kPreCloseYieldFieldNumber = 25,
    kPreWeightedAvgPxFieldNumber = 26,
    kPreWeightedAvgYieldFieldNumber = 27,
    kCloseWeightedAvgPxFieldNumber = 28,
    kCloseWeightedAvgYieldFieldNumber = 29,
    kOpenYieldFieldNumber = 30,
    kHighYieldFieldNumber = 31,
    kLowYieldFieldNumber = 32,
    kCloseYieldFieldNumber = 33,
    kDataMultiplePowerOf10FieldNumber = 34,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 OpenPx = 8;
  void clear_openpx();
  int64_t openpx() const;
  void set_openpx(int64_t value);
  private:
  int64_t _internal_openpx() const;
  void _internal_set_openpx(int64_t value);
  public:

  // int64 ClosePx = 9;
  void clear_closepx();
  int64_t closepx() const;
  void set_closepx(int64_t value);
  private:
  int64_t _internal_closepx() const;
  void _internal_set_closepx(int64_t value);
  public:

  // int64 HighPx = 10;
  void clear_highpx();
  int64_t highpx() const;
  void set_highpx(int64_t value);
  private:
  int64_t _internal_highpx() const;
  void _internal_set_highpx(int64_t value);
  public:

  // int64 LowPx = 11;
  void clear_lowpx();
  int64_t lowpx() const;
  void set_lowpx(int64_t value);
  private:
  int64_t _internal_lowpx() const;
  void _internal_set_lowpx(int64_t value);
  public:

  // int64 NumTrades = 12;
  void clear_numtrades();
  int64_t numtrades() const;
  void set_numtrades(int64_t value);
  private:
  int64_t _internal_numtrades() const;
  void _internal_set_numtrades(int64_t value);
  public:

  // .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
  void clear_periodtype();
  ::com::htsc::mdc::model::EMDPeriodType periodtype() const;
  void set_periodtype(::com::htsc::mdc::model::EMDPeriodType value);
  private:
  ::com::htsc::mdc::model::EMDPeriodType _internal_periodtype() const;
  void _internal_set_periodtype(::com::htsc::mdc::model::EMDPeriodType value);
  public:

  // int32 ExchangeDate = 18;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int64 TotalVolumeTrade = 13;
  void clear_totalvolumetrade();
  int64_t totalvolumetrade() const;
  void set_totalvolumetrade(int64_t value);
  private:
  int64_t _internal_totalvolumetrade() const;
  void _internal_set_totalvolumetrade(int64_t value);
  public:

  // int64 TotalValueTrade = 14;
  void clear_totalvaluetrade();
  int64_t totalvaluetrade() const;
  void set_totalvaluetrade(int64_t value);
  private:
  int64_t _internal_totalvaluetrade() const;
  void _internal_set_totalvaluetrade(int64_t value);
  public:

  // int64 IOPV = 15;
  void clear_iopv();
  int64_t iopv() const;
  void set_iopv(int64_t value);
  private:
  int64_t _internal_iopv() const;
  void _internal_set_iopv(int64_t value);
  public:

  // int64 OpenInterest = 16;
  void clear_openinterest();
  int64_t openinterest() const;
  void set_openinterest(int64_t value);
  private:
  int64_t _internal_openinterest() const;
  void _internal_set_openinterest(int64_t value);
  public:

  // int64 SettlePrice = 17;
  void clear_settleprice();
  int64_t settleprice() const;
  void set_settleprice(int64_t value);
  private:
  int64_t _internal_settleprice() const;
  void _internal_set_settleprice(int64_t value);
  public:

  // int32 ExchangeTime = 19;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int32 KLineCategory = 20;
  void clear_klinecategory();
  int32_t klinecategory() const;
  void set_klinecategory(int32_t value);
  private:
  int32_t _internal_klinecategory() const;
  void _internal_set_klinecategory(int32_t value);
  public:

  // int64 AfterHoursNumTrades = 21;
  void clear_afterhoursnumtrades();
  int64_t afterhoursnumtrades() const;
  void set_afterhoursnumtrades(int64_t value);
  private:
  int64_t _internal_afterhoursnumtrades() const;
  void _internal_set_afterhoursnumtrades(int64_t value);
  public:

  // int64 AfterHoursTotalVolumeTrade = 22;
  void clear_afterhourstotalvolumetrade();
  int64_t afterhourstotalvolumetrade() const;
  void set_afterhourstotalvolumetrade(int64_t value);
  private:
  int64_t _internal_afterhourstotalvolumetrade() const;
  void _internal_set_afterhourstotalvolumetrade(int64_t value);
  public:

  // int64 AfterHoursTotalValueTrade = 23;
  void clear_afterhourstotalvaluetrade();
  int64_t afterhourstotalvaluetrade() const;
  void set_afterhourstotalvaluetrade(int64_t value);
  private:
  int64_t _internal_afterhourstotalvaluetrade() const;
  void _internal_set_afterhourstotalvaluetrade(int64_t value);
  public:

  // int64 PreClosePx = 24;
  void clear_preclosepx();
  int64_t preclosepx() const;
  void set_preclosepx(int64_t value);
  private:
  int64_t _internal_preclosepx() const;
  void _internal_set_preclosepx(int64_t value);
  public:

  // int64 PreCloseYield = 25;
  void clear_precloseyield();
  int64_t precloseyield() const;
  void set_precloseyield(int64_t value);
  private:
  int64_t _internal_precloseyield() const;
  void _internal_set_precloseyield(int64_t value);
  public:

  // int64 PreWeightedAvgPx = 26;
  void clear_preweightedavgpx();
  int64_t preweightedavgpx() const;
  void set_preweightedavgpx(int64_t value);
  private:
  int64_t _internal_preweightedavgpx() const;
  void _internal_set_preweightedavgpx(int64_t value);
  public:

  // int64 PreWeightedAvgYield = 27;
  void clear_preweightedavgyield();
  int64_t preweightedavgyield() const;
  void set_preweightedavgyield(int64_t value);
  private:
  int64_t _internal_preweightedavgyield() const;
  void _internal_set_preweightedavgyield(int64_t value);
  public:

  // int64 CloseWeightedAvgPx = 28;
  void clear_closeweightedavgpx();
  int64_t closeweightedavgpx() const;
  void set_closeweightedavgpx(int64_t value);
  private:
  int64_t _internal_closeweightedavgpx() const;
  void _internal_set_closeweightedavgpx(int64_t value);
  public:

  // int64 CloseWeightedAvgYield = 29;
  void clear_closeweightedavgyield();
  int64_t closeweightedavgyield() const;
  void set_closeweightedavgyield(int64_t value);
  private:
  int64_t _internal_closeweightedavgyield() const;
  void _internal_set_closeweightedavgyield(int64_t value);
  public:

  // int64 OpenYield = 30;
  void clear_openyield();
  int64_t openyield() const;
  void set_openyield(int64_t value);
  private:
  int64_t _internal_openyield() const;
  void _internal_set_openyield(int64_t value);
  public:

  // int64 HighYield = 31;
  void clear_highyield();
  int64_t highyield() const;
  void set_highyield(int64_t value);
  private:
  int64_t _internal_highyield() const;
  void _internal_set_highyield(int64_t value);
  public:

  // int64 LowYield = 32;
  void clear_lowyield();
  int64_t lowyield() const;
  void set_lowyield(int64_t value);
  private:
  int64_t _internal_lowyield() const;
  void _internal_set_lowyield(int64_t value);
  public:

  // int64 CloseYield = 33;
  void clear_closeyield();
  int64_t closeyield() const;
  void set_closeyield(int64_t value);
  private:
  int64_t _internal_closeyield() const;
  void _internal_set_closeyield(int64_t value);
  public:

  // int32 DataMultiplePowerOf10 = 34;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADKLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t openpx_;
    int64_t closepx_;
    int64_t highpx_;
    int64_t lowpx_;
    int64_t numtrades_;
    int periodtype_;
    int32_t exchangedate_;
    int64_t totalvolumetrade_;
    int64_t totalvaluetrade_;
    int64_t iopv_;
    int64_t openinterest_;
    int64_t settleprice_;
    int32_t exchangetime_;
    int32_t klinecategory_;
    int64_t afterhoursnumtrades_;
    int64_t afterhourstotalvolumetrade_;
    int64_t afterhourstotalvaluetrade_;
    int64_t preclosepx_;
    int64_t precloseyield_;
    int64_t preweightedavgpx_;
    int64_t preweightedavgyield_;
    int64_t closeweightedavgpx_;
    int64_t closeweightedavgyield_;
    int64_t openyield_;
    int64_t highyield_;
    int64_t lowyield_;
    int64_t closeyield_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADKLine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADKLine

// string HTSCSecurityID = 1;
inline void ADKLine::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADKLine::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADKLine::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}
inline std::string* ADKLine::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  return _s;
}
inline const std::string& ADKLine::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADKLine::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADKLine::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADKLine::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADKLine::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADKLine::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t ADKLine::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t ADKLine::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.MDDate)
  return _internal_mddate();
}
inline void ADKLine::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void ADKLine::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.MDDate)
}

// int32 MDTime = 3;
inline void ADKLine::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t ADKLine::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t ADKLine::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.MDTime)
  return _internal_mdtime();
}
inline void ADKLine::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void ADKLine::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADKLine::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t ADKLine::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t ADKLine::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.DataTimestamp)
  return _internal_datatimestamp();
}
inline void ADKLine::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void ADKLine::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADKLine::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADKLine::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADKLine::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.securityIDSource)
  return _internal_securityidsource();
}
inline void ADKLine::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void ADKLine::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADKLine::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADKLine::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType ADKLine::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.securityType)
  return _internal_securitytype();
}
inline void ADKLine::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void ADKLine::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.securityType)
}

// .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
inline void ADKLine::clear_periodtype() {
  _impl_.periodtype_ = 0;
}
inline ::com::htsc::mdc::model::EMDPeriodType ADKLine::_internal_periodtype() const {
  return static_cast< ::com::htsc::mdc::model::EMDPeriodType >(_impl_.periodtype_);
}
inline ::com::htsc::mdc::model::EMDPeriodType ADKLine::periodtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PeriodType)
  return _internal_periodtype();
}
inline void ADKLine::_internal_set_periodtype(::com::htsc::mdc::model::EMDPeriodType value) {
  
  _impl_.periodtype_ = value;
}
inline void ADKLine::set_periodtype(::com::htsc::mdc::model::EMDPeriodType value) {
  _internal_set_periodtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PeriodType)
}

// int64 OpenPx = 8;
inline void ADKLine::clear_openpx() {
  _impl_.openpx_ = int64_t{0};
}
inline int64_t ADKLine::_internal_openpx() const {
  return _impl_.openpx_;
}
inline int64_t ADKLine::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenPx)
  return _internal_openpx();
}
inline void ADKLine::_internal_set_openpx(int64_t value) {
  
  _impl_.openpx_ = value;
}
inline void ADKLine::set_openpx(int64_t value) {
  _internal_set_openpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenPx)
}

// int64 ClosePx = 9;
inline void ADKLine::clear_closepx() {
  _impl_.closepx_ = int64_t{0};
}
inline int64_t ADKLine::_internal_closepx() const {
  return _impl_.closepx_;
}
inline int64_t ADKLine::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ClosePx)
  return _internal_closepx();
}
inline void ADKLine::_internal_set_closepx(int64_t value) {
  
  _impl_.closepx_ = value;
}
inline void ADKLine::set_closepx(int64_t value) {
  _internal_set_closepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ClosePx)
}

// int64 HighPx = 10;
inline void ADKLine::clear_highpx() {
  _impl_.highpx_ = int64_t{0};
}
inline int64_t ADKLine::_internal_highpx() const {
  return _impl_.highpx_;
}
inline int64_t ADKLine::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HighPx)
  return _internal_highpx();
}
inline void ADKLine::_internal_set_highpx(int64_t value) {
  
  _impl_.highpx_ = value;
}
inline void ADKLine::set_highpx(int64_t value) {
  _internal_set_highpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HighPx)
}

// int64 LowPx = 11;
inline void ADKLine::clear_lowpx() {
  _impl_.lowpx_ = int64_t{0};
}
inline int64_t ADKLine::_internal_lowpx() const {
  return _impl_.lowpx_;
}
inline int64_t ADKLine::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.LowPx)
  return _internal_lowpx();
}
inline void ADKLine::_internal_set_lowpx(int64_t value) {
  
  _impl_.lowpx_ = value;
}
inline void ADKLine::set_lowpx(int64_t value) {
  _internal_set_lowpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.LowPx)
}

// int64 NumTrades = 12;
inline void ADKLine::clear_numtrades() {
  _impl_.numtrades_ = int64_t{0};
}
inline int64_t ADKLine::_internal_numtrades() const {
  return _impl_.numtrades_;
}
inline int64_t ADKLine::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.NumTrades)
  return _internal_numtrades();
}
inline void ADKLine::_internal_set_numtrades(int64_t value) {
  
  _impl_.numtrades_ = value;
}
inline void ADKLine::set_numtrades(int64_t value) {
  _internal_set_numtrades(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.NumTrades)
}

// int64 TotalVolumeTrade = 13;
inline void ADKLine::clear_totalvolumetrade() {
  _impl_.totalvolumetrade_ = int64_t{0};
}
inline int64_t ADKLine::_internal_totalvolumetrade() const {
  return _impl_.totalvolumetrade_;
}
inline int64_t ADKLine::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.TotalVolumeTrade)
  return _internal_totalvolumetrade();
}
inline void ADKLine::_internal_set_totalvolumetrade(int64_t value) {
  
  _impl_.totalvolumetrade_ = value;
}
inline void ADKLine::set_totalvolumetrade(int64_t value) {
  _internal_set_totalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.TotalVolumeTrade)
}

// int64 TotalValueTrade = 14;
inline void ADKLine::clear_totalvaluetrade() {
  _impl_.totalvaluetrade_ = int64_t{0};
}
inline int64_t ADKLine::_internal_totalvaluetrade() const {
  return _impl_.totalvaluetrade_;
}
inline int64_t ADKLine::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.TotalValueTrade)
  return _internal_totalvaluetrade();
}
inline void ADKLine::_internal_set_totalvaluetrade(int64_t value) {
  
  _impl_.totalvaluetrade_ = value;
}
inline void ADKLine::set_totalvaluetrade(int64_t value) {
  _internal_set_totalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.TotalValueTrade)
}

// int64 IOPV = 15;
inline void ADKLine::clear_iopv() {
  _impl_.iopv_ = int64_t{0};
}
inline int64_t ADKLine::_internal_iopv() const {
  return _impl_.iopv_;
}
inline int64_t ADKLine::iopv() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.IOPV)
  return _internal_iopv();
}
inline void ADKLine::_internal_set_iopv(int64_t value) {
  
  _impl_.iopv_ = value;
}
inline void ADKLine::set_iopv(int64_t value) {
  _internal_set_iopv(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.IOPV)
}

// int64 OpenInterest = 16;
inline void ADKLine::clear_openinterest() {
  _impl_.openinterest_ = int64_t{0};
}
inline int64_t ADKLine::_internal_openinterest() const {
  return _impl_.openinterest_;
}
inline int64_t ADKLine::openinterest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenInterest)
  return _internal_openinterest();
}
inline void ADKLine::_internal_set_openinterest(int64_t value) {
  
  _impl_.openinterest_ = value;
}
inline void ADKLine::set_openinterest(int64_t value) {
  _internal_set_openinterest(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenInterest)
}

// int64 SettlePrice = 17;
inline void ADKLine::clear_settleprice() {
  _impl_.settleprice_ = int64_t{0};
}
inline int64_t ADKLine::_internal_settleprice() const {
  return _impl_.settleprice_;
}
inline int64_t ADKLine::settleprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.SettlePrice)
  return _internal_settleprice();
}
inline void ADKLine::_internal_set_settleprice(int64_t value) {
  
  _impl_.settleprice_ = value;
}
inline void ADKLine::set_settleprice(int64_t value) {
  _internal_set_settleprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.SettlePrice)
}

// int32 ExchangeDate = 18;
inline void ADKLine::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t ADKLine::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t ADKLine::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ExchangeDate)
  return _internal_exchangedate();
}
inline void ADKLine::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void ADKLine::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ExchangeDate)
}

// int32 ExchangeTime = 19;
inline void ADKLine::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t ADKLine::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t ADKLine::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ExchangeTime)
  return _internal_exchangetime();
}
inline void ADKLine::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void ADKLine::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ExchangeTime)
}

// int32 KLineCategory = 20;
inline void ADKLine::clear_klinecategory() {
  _impl_.klinecategory_ = 0;
}
inline int32_t ADKLine::_internal_klinecategory() const {
  return _impl_.klinecategory_;
}
inline int32_t ADKLine::klinecategory() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.KLineCategory)
  return _internal_klinecategory();
}
inline void ADKLine::_internal_set_klinecategory(int32_t value) {
  
  _impl_.klinecategory_ = value;
}
inline void ADKLine::set_klinecategory(int32_t value) {
  _internal_set_klinecategory(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.KLineCategory)
}

// int64 AfterHoursNumTrades = 21;
inline void ADKLine::clear_afterhoursnumtrades() {
  _impl_.afterhoursnumtrades_ = int64_t{0};
}
inline int64_t ADKLine::_internal_afterhoursnumtrades() const {
  return _impl_.afterhoursnumtrades_;
}
inline int64_t ADKLine::afterhoursnumtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursNumTrades)
  return _internal_afterhoursnumtrades();
}
inline void ADKLine::_internal_set_afterhoursnumtrades(int64_t value) {
  
  _impl_.afterhoursnumtrades_ = value;
}
inline void ADKLine::set_afterhoursnumtrades(int64_t value) {
  _internal_set_afterhoursnumtrades(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursNumTrades)
}

// int64 AfterHoursTotalVolumeTrade = 22;
inline void ADKLine::clear_afterhourstotalvolumetrade() {
  _impl_.afterhourstotalvolumetrade_ = int64_t{0};
}
inline int64_t ADKLine::_internal_afterhourstotalvolumetrade() const {
  return _impl_.afterhourstotalvolumetrade_;
}
inline int64_t ADKLine::afterhourstotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalVolumeTrade)
  return _internal_afterhourstotalvolumetrade();
}
inline void ADKLine::_internal_set_afterhourstotalvolumetrade(int64_t value) {
  
  _impl_.afterhourstotalvolumetrade_ = value;
}
inline void ADKLine::set_afterhourstotalvolumetrade(int64_t value) {
  _internal_set_afterhourstotalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalVolumeTrade)
}

// int64 AfterHoursTotalValueTrade = 23;
inline void ADKLine::clear_afterhourstotalvaluetrade() {
  _impl_.afterhourstotalvaluetrade_ = int64_t{0};
}
inline int64_t ADKLine::_internal_afterhourstotalvaluetrade() const {
  return _impl_.afterhourstotalvaluetrade_;
}
inline int64_t ADKLine::afterhourstotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalValueTrade)
  return _internal_afterhourstotalvaluetrade();
}
inline void ADKLine::_internal_set_afterhourstotalvaluetrade(int64_t value) {
  
  _impl_.afterhourstotalvaluetrade_ = value;
}
inline void ADKLine::set_afterhourstotalvaluetrade(int64_t value) {
  _internal_set_afterhourstotalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalValueTrade)
}

// int64 PreClosePx = 24;
inline void ADKLine::clear_preclosepx() {
  _impl_.preclosepx_ = int64_t{0};
}
inline int64_t ADKLine::_internal_preclosepx() const {
  return _impl_.preclosepx_;
}
inline int64_t ADKLine::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreClosePx)
  return _internal_preclosepx();
}
inline void ADKLine::_internal_set_preclosepx(int64_t value) {
  
  _impl_.preclosepx_ = value;
}
inline void ADKLine::set_preclosepx(int64_t value) {
  _internal_set_preclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreClosePx)
}

// int64 PreCloseYield = 25;
inline void ADKLine::clear_precloseyield() {
  _impl_.precloseyield_ = int64_t{0};
}
inline int64_t ADKLine::_internal_precloseyield() const {
  return _impl_.precloseyield_;
}
inline int64_t ADKLine::precloseyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreCloseYield)
  return _internal_precloseyield();
}
inline void ADKLine::_internal_set_precloseyield(int64_t value) {
  
  _impl_.precloseyield_ = value;
}
inline void ADKLine::set_precloseyield(int64_t value) {
  _internal_set_precloseyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreCloseYield)
}

// int64 PreWeightedAvgPx = 26;
inline void ADKLine::clear_preweightedavgpx() {
  _impl_.preweightedavgpx_ = int64_t{0};
}
inline int64_t ADKLine::_internal_preweightedavgpx() const {
  return _impl_.preweightedavgpx_;
}
inline int64_t ADKLine::preweightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgPx)
  return _internal_preweightedavgpx();
}
inline void ADKLine::_internal_set_preweightedavgpx(int64_t value) {
  
  _impl_.preweightedavgpx_ = value;
}
inline void ADKLine::set_preweightedavgpx(int64_t value) {
  _internal_set_preweightedavgpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgPx)
}

// int64 PreWeightedAvgYield = 27;
inline void ADKLine::clear_preweightedavgyield() {
  _impl_.preweightedavgyield_ = int64_t{0};
}
inline int64_t ADKLine::_internal_preweightedavgyield() const {
  return _impl_.preweightedavgyield_;
}
inline int64_t ADKLine::preweightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgYield)
  return _internal_preweightedavgyield();
}
inline void ADKLine::_internal_set_preweightedavgyield(int64_t value) {
  
  _impl_.preweightedavgyield_ = value;
}
inline void ADKLine::set_preweightedavgyield(int64_t value) {
  _internal_set_preweightedavgyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgYield)
}

// int64 CloseWeightedAvgPx = 28;
inline void ADKLine::clear_closeweightedavgpx() {
  _impl_.closeweightedavgpx_ = int64_t{0};
}
inline int64_t ADKLine::_internal_closeweightedavgpx() const {
  return _impl_.closeweightedavgpx_;
}
inline int64_t ADKLine::closeweightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgPx)
  return _internal_closeweightedavgpx();
}
inline void ADKLine::_internal_set_closeweightedavgpx(int64_t value) {
  
  _impl_.closeweightedavgpx_ = value;
}
inline void ADKLine::set_closeweightedavgpx(int64_t value) {
  _internal_set_closeweightedavgpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgPx)
}

// int64 CloseWeightedAvgYield = 29;
inline void ADKLine::clear_closeweightedavgyield() {
  _impl_.closeweightedavgyield_ = int64_t{0};
}
inline int64_t ADKLine::_internal_closeweightedavgyield() const {
  return _impl_.closeweightedavgyield_;
}
inline int64_t ADKLine::closeweightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgYield)
  return _internal_closeweightedavgyield();
}
inline void ADKLine::_internal_set_closeweightedavgyield(int64_t value) {
  
  _impl_.closeweightedavgyield_ = value;
}
inline void ADKLine::set_closeweightedavgyield(int64_t value) {
  _internal_set_closeweightedavgyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgYield)
}

// int64 OpenYield = 30;
inline void ADKLine::clear_openyield() {
  _impl_.openyield_ = int64_t{0};
}
inline int64_t ADKLine::_internal_openyield() const {
  return _impl_.openyield_;
}
inline int64_t ADKLine::openyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenYield)
  return _internal_openyield();
}
inline void ADKLine::_internal_set_openyield(int64_t value) {
  
  _impl_.openyield_ = value;
}
inline void ADKLine::set_openyield(int64_t value) {
  _internal_set_openyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenYield)
}

// int64 HighYield = 31;
inline void ADKLine::clear_highyield() {
  _impl_.highyield_ = int64_t{0};
}
inline int64_t ADKLine::_internal_highyield() const {
  return _impl_.highyield_;
}
inline int64_t ADKLine::highyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HighYield)
  return _internal_highyield();
}
inline void ADKLine::_internal_set_highyield(int64_t value) {
  
  _impl_.highyield_ = value;
}
inline void ADKLine::set_highyield(int64_t value) {
  _internal_set_highyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HighYield)
}

// int64 LowYield = 32;
inline void ADKLine::clear_lowyield() {
  _impl_.lowyield_ = int64_t{0};
}
inline int64_t ADKLine::_internal_lowyield() const {
  return _impl_.lowyield_;
}
inline int64_t ADKLine::lowyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.LowYield)
  return _internal_lowyield();
}
inline void ADKLine::_internal_set_lowyield(int64_t value) {
  
  _impl_.lowyield_ = value;
}
inline void ADKLine::set_lowyield(int64_t value) {
  _internal_set_lowyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.LowYield)
}

// int64 CloseYield = 33;
inline void ADKLine::clear_closeyield() {
  _impl_.closeyield_ = int64_t{0};
}
inline int64_t ADKLine::_internal_closeyield() const {
  return _impl_.closeyield_;
}
inline int64_t ADKLine::closeyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseYield)
  return _internal_closeyield();
}
inline void ADKLine::_internal_set_closeyield(int64_t value) {
  
  _impl_.closeyield_ = value;
}
inline void ADKLine::set_closeyield(int64_t value) {
  _internal_set_closeyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseYield)
}

// int32 DataMultiplePowerOf10 = 34;
inline void ADKLine::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t ADKLine::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t ADKLine::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void ADKLine::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void ADKLine::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADKLine_2eproto
