// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDSubscribe.proto

#include "MDSubscribe.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDSubscribeRequest::MDSubscribeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscribeall_)*/nullptr
  , /*decltype(_impl_.subscribebysourcetype_)*/nullptr
  , /*decltype(_impl_.subscribebyid_)*/nullptr
  , /*decltype(_impl_.subscribeactiontype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDSubscribeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDSubscribeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDSubscribeRequestDefaultTypeInternal() {}
  union {
    MDSubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDSubscribeRequestDefaultTypeInternal _MDSubscribeRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeAll::SubscribeAll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.marketdatatypes_)*/{}
  , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeAllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeAllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeAllDefaultTypeInternal() {}
  union {
    SubscribeAll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeAllDefaultTypeInternal _SubscribeAll_default_instance_;
PROTOBUF_CONSTEXPR SubscribeByID::SubscribeByID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscribebyiddetails_)*/{}
  , /*decltype(_impl_.globalmarketdatatypes_)*/{}
  , /*decltype(_impl_._globalmarketdatatypes_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeByIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeByIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeByIDDefaultTypeInternal() {}
  union {
    SubscribeByID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeByIDDefaultTypeInternal _SubscribeByID_default_instance_;
PROTOBUF_CONSTEXPR SubscribeByIDDetail::SubscribeByIDDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.marketdatatypes_)*/{}
  , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeByIDDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeByIDDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeByIDDetailDefaultTypeInternal() {}
  union {
    SubscribeByIDDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeByIDDetailDefaultTypeInternal _SubscribeByIDDetail_default_instance_;
PROTOBUF_CONSTEXPR SubscribeBySourceType::SubscribeBySourceType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscribebysourcetypedetail_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeBySourceTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeBySourceTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeBySourceTypeDefaultTypeInternal() {}
  union {
    SubscribeBySourceType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeBySourceTypeDefaultTypeInternal _SubscribeBySourceType_default_instance_;
PROTOBUF_CONSTEXPR SubscribeBySourceTypeDetail::SubscribeBySourceTypeDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.marketdatatypes_)*/{}
  , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.securitysourcetypes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeBySourceTypeDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeBySourceTypeDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeBySourceTypeDetailDefaultTypeInternal() {}
  union {
    SubscribeBySourceTypeDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeBySourceTypeDetailDefaultTypeInternal _SubscribeBySourceTypeDetail_default_instance_;
PROTOBUF_CONSTEXPR MDSubscribeResponse::MDSubscribeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errorcontext_)*/nullptr
  , /*decltype(_impl_.issuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDSubscribeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDSubscribeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDSubscribeResponseDefaultTypeInternal() {}
  union {
    MDSubscribeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDSubscribeResponseDefaultTypeInternal _MDSubscribeResponse_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDSubscribe_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_MDSubscribe_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDSubscribe_2eproto = nullptr;

const uint32_t TableStruct_MDSubscribe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, _impl_.subscribeactiontype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, _impl_.subscribeall_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, _impl_.subscribebysourcetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, _impl_.subscribebyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeAll, _impl_.marketdatatypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByID, _impl_.subscribebyiddetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByID, _impl_.globalmarketdatatypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByIDDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByIDDetail, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByIDDetail, _impl_.marketdatatypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceType, _impl_.subscribebysourcetypedetail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail, _impl_.securitysourcetypes_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail, _impl_.marketdatatypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeResponse, _impl_.issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeResponse, _impl_.errorcontext_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDSubscribeRequest)},
  { 10, -1, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeAll)},
  { 17, -1, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeByID)},
  { 25, -1, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeByIDDetail)},
  { 33, -1, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeBySourceType)},
  { 40, -1, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail)},
  { 48, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDSubscribeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDSubscribeRequest_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SubscribeAll_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SubscribeByID_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SubscribeByIDDetail_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SubscribeBySourceType_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SubscribeBySourceTypeDetail_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDSubscribeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_MDSubscribe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021MDSubscribe.proto\022\032com.htsc.mdc.insigh"
  "t.model\032\030SecuritySourceType.proto\032\025EMark"
  "etDataType.proto\032\031InsightErrorContext.pr"
  "oto\"\267\002\n\022MDSubscribeRequest\022M\n\023subscribeA"
  "ctionType\030\001 \001(\01620.com.htsc.mdc.insight.m"
  "odel.ESubscribeActionType\022>\n\014subscribeAl"
  "l\030\002 \001(\0132(.com.htsc.mdc.insight.model.Sub"
  "scribeAll\022P\n\025subscribeBySourceType\030\003 \001(\013"
  "21.com.htsc.mdc.insight.model.SubscribeB"
  "ySourceType\022@\n\rsubscribeByID\030\004 \001(\0132).com"
  ".htsc.mdc.insight.model.SubscribeByID\"T\n"
  "\014SubscribeAll\022D\n\017marketDataTypes\030\001 \003(\0162+"
  ".com.htsc.mdc.insight.model.EMarketDataT"
  "ype\"\252\001\n\rSubscribeByID\022M\n\024subscribeByIDDe"
  "tails\030\001 \003(\0132/.com.htsc.mdc.insight.model"
  ".SubscribeByIDDetail\022J\n\025globalMarketData"
  "Types\030\002 \003(\0162+.com.htsc.mdc.insight.model"
  ".EMarketDataType\"s\n\023SubscribeByIDDetail\022"
  "\026\n\016htscSecurityID\030\001 \001(\t\022D\n\017marketDataTyp"
  "es\030\002 \003(\0162+.com.htsc.mdc.insight.model.EM"
  "arketDataType\"u\n\025SubscribeBySourceType\022\\"
  "\n\033subscribeBySourceTypeDetail\030\001 \003(\01327.co"
  "m.htsc.mdc.insight.model.SubscribeBySour"
  "ceTypeDetail\"\260\001\n\033SubscribeBySourceTypeDe"
  "tail\022K\n\023securitySourceTypes\030\001 \001(\0132..com."
  "htsc.mdc.insight.model.SecuritySourceTyp"
  "e\022D\n\017marketDataTypes\030\002 \003(\0162+.com.htsc.md"
  "c.insight.model.EMarketDataType\"o\n\023MDSub"
  "scribeResponse\022\021\n\tisSuccess\030\001 \001(\010\022E\n\014err"
  "orContext\030\002 \001(\0132/.com.htsc.mdc.insight.m"
  "odel.InsightErrorContext*G\n\024ESubscribeAc"
  "tionType\022\014\n\010COVERAGE\020\000\022\007\n\003ADD\020\001\022\014\n\010DECRE"
  "ASE\020\002\022\n\n\006CANCEL\020\003B4\n\032com.htsc.mdc.insigh"
  "t.modelB\021MDSubscribeProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDSubscribe_2eproto_deps[3] = {
  &::descriptor_table_EMarketDataType_2eproto,
  &::descriptor_table_InsightErrorContext_2eproto,
  &::descriptor_table_SecuritySourceType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDSubscribe_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDSubscribe_2eproto = {
    false, false, 1359, descriptor_table_protodef_MDSubscribe_2eproto,
    "MDSubscribe.proto",
    &descriptor_table_MDSubscribe_2eproto_once, descriptor_table_MDSubscribe_2eproto_deps, 3, 7,
    schemas, file_default_instances, TableStruct_MDSubscribe_2eproto::offsets,
    file_level_metadata_MDSubscribe_2eproto, file_level_enum_descriptors_MDSubscribe_2eproto,
    file_level_service_descriptors_MDSubscribe_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDSubscribe_2eproto_getter() {
  return &descriptor_table_MDSubscribe_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDSubscribe_2eproto(&descriptor_table_MDSubscribe_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESubscribeActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDSubscribe_2eproto);
  return file_level_enum_descriptors_MDSubscribe_2eproto[0];
}
bool ESubscribeActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MDSubscribeRequest::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::SubscribeAll& subscribeall(const MDSubscribeRequest* msg);
  static const ::com::htsc::mdc::insight::model::SubscribeBySourceType& subscribebysourcetype(const MDSubscribeRequest* msg);
  static const ::com::htsc::mdc::insight::model::SubscribeByID& subscribebyid(const MDSubscribeRequest* msg);
};

const ::com::htsc::mdc::insight::model::SubscribeAll&
MDSubscribeRequest::_Internal::subscribeall(const MDSubscribeRequest* msg) {
  return *msg->_impl_.subscribeall_;
}
const ::com::htsc::mdc::insight::model::SubscribeBySourceType&
MDSubscribeRequest::_Internal::subscribebysourcetype(const MDSubscribeRequest* msg) {
  return *msg->_impl_.subscribebysourcetype_;
}
const ::com::htsc::mdc::insight::model::SubscribeByID&
MDSubscribeRequest::_Internal::subscribebyid(const MDSubscribeRequest* msg) {
  return *msg->_impl_.subscribebyid_;
}
MDSubscribeRequest::MDSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDSubscribeRequest)
}
MDSubscribeRequest::MDSubscribeRequest(const MDSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDSubscribeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribeall_){nullptr}
    , decltype(_impl_.subscribebysourcetype_){nullptr}
    , decltype(_impl_.subscribebyid_){nullptr}
    , decltype(_impl_.subscribeactiontype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subscribeall()) {
    _this->_impl_.subscribeall_ = new ::com::htsc::mdc::insight::model::SubscribeAll(*from._impl_.subscribeall_);
  }
  if (from._internal_has_subscribebysourcetype()) {
    _this->_impl_.subscribebysourcetype_ = new ::com::htsc::mdc::insight::model::SubscribeBySourceType(*from._impl_.subscribebysourcetype_);
  }
  if (from._internal_has_subscribebyid()) {
    _this->_impl_.subscribebyid_ = new ::com::htsc::mdc::insight::model::SubscribeByID(*from._impl_.subscribebyid_);
  }
  _this->_impl_.subscribeactiontype_ = from._impl_.subscribeactiontype_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDSubscribeRequest)
}

inline void MDSubscribeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribeall_){nullptr}
    , decltype(_impl_.subscribebysourcetype_){nullptr}
    , decltype(_impl_.subscribebyid_){nullptr}
    , decltype(_impl_.subscribeactiontype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MDSubscribeRequest::~MDSubscribeRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDSubscribeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.subscribeall_;
  if (this != internal_default_instance()) delete _impl_.subscribebysourcetype_;
  if (this != internal_default_instance()) delete _impl_.subscribebyid_;
}

void MDSubscribeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.subscribeall_ != nullptr) {
    delete _impl_.subscribeall_;
  }
  _impl_.subscribeall_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscribebysourcetype_ != nullptr) {
    delete _impl_.subscribebysourcetype_;
  }
  _impl_.subscribebysourcetype_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscribebyid_ != nullptr) {
    delete _impl_.subscribebyid_;
  }
  _impl_.subscribebyid_ = nullptr;
  _impl_.subscribeactiontype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDSubscribeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscribeactiontype(static_cast<::com::htsc::mdc::insight::model::ESubscribeActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribeall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribebysourcetype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribebyid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDSubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
  if (this->_internal_subscribeactiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_subscribeactiontype(), target);
  }

  // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
  if (this->_internal_has_subscribeall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscribeall(this),
        _Internal::subscribeall(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
  if (this->_internal_has_subscribebysourcetype()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::subscribebysourcetype(this),
        _Internal::subscribebysourcetype(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
  if (this->_internal_has_subscribebyid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subscribebyid(this),
        _Internal::subscribebyid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDSubscribeRequest)
  return target;
}

size_t MDSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
  if (this->_internal_has_subscribeall()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscribeall_);
  }

  // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
  if (this->_internal_has_subscribebysourcetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscribebysourcetype_);
  }

  // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
  if (this->_internal_has_subscribebyid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscribebyid_);
  }

  // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
  if (this->_internal_subscribeactiontype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscribeactiontype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDSubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDSubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDSubscribeRequest::GetClassData() const { return &_class_data_; }


void MDSubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDSubscribeRequest*>(&to_msg);
  auto& from = static_cast<const MDSubscribeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subscribeall()) {
    _this->_internal_mutable_subscribeall()->::com::htsc::mdc::insight::model::SubscribeAll::MergeFrom(
        from._internal_subscribeall());
  }
  if (from._internal_has_subscribebysourcetype()) {
    _this->_internal_mutable_subscribebysourcetype()->::com::htsc::mdc::insight::model::SubscribeBySourceType::MergeFrom(
        from._internal_subscribebysourcetype());
  }
  if (from._internal_has_subscribebyid()) {
    _this->_internal_mutable_subscribebyid()->::com::htsc::mdc::insight::model::SubscribeByID::MergeFrom(
        from._internal_subscribebyid());
  }
  if (from._internal_subscribeactiontype() != 0) {
    _this->_internal_set_subscribeactiontype(from._internal_subscribeactiontype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDSubscribeRequest::CopyFrom(const MDSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDSubscribeRequest::IsInitialized() const {
  return true;
}

void MDSubscribeRequest::InternalSwap(MDSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDSubscribeRequest, _impl_.subscribeactiontype_)
      + sizeof(MDSubscribeRequest::_impl_.subscribeactiontype_)
      - PROTOBUF_FIELD_OFFSET(MDSubscribeRequest, _impl_.subscribeall_)>(
          reinterpret_cast<char*>(&_impl_.subscribeall_),
          reinterpret_cast<char*>(&other->_impl_.subscribeall_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDSubscribeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSubscribe_2eproto_getter, &descriptor_table_MDSubscribe_2eproto_once,
      file_level_metadata_MDSubscribe_2eproto[0]);
}

// ===================================================================

class SubscribeAll::_Internal {
 public:
};

SubscribeAll::SubscribeAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SubscribeAll)
}
SubscribeAll::SubscribeAll(const SubscribeAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeAll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.marketdatatypes_){from._impl_.marketdatatypes_}
    , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeAll)
}

inline void SubscribeAll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.marketdatatypes_){arena}
    , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeAll::~SubscribeAll() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeAll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeAll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.marketdatatypes_.~RepeatedField();
}

void SubscribeAll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeAll::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeAll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.marketdatatypes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeAll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_marketdatatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_marketdatatypes(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeAll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeAll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
  {
    int byte_size = _impl_._marketdatatypes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.marketdatatypes_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeAll)
  return target;
}

size_t SubscribeAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeAll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_marketdatatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_marketdatatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._marketdatatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeAll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeAll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeAll::GetClassData() const { return &_class_data_; }


void SubscribeAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeAll*>(&to_msg);
  auto& from = static_cast<const SubscribeAll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeAll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.marketdatatypes_.MergeFrom(from._impl_.marketdatatypes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeAll::CopyFrom(const SubscribeAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAll::IsInitialized() const {
  return true;
}

void SubscribeAll::InternalSwap(SubscribeAll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.marketdatatypes_.InternalSwap(&other->_impl_.marketdatatypes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSubscribe_2eproto_getter, &descriptor_table_MDSubscribe_2eproto_once,
      file_level_metadata_MDSubscribe_2eproto[1]);
}

// ===================================================================

class SubscribeByID::_Internal {
 public:
};

SubscribeByID::SubscribeByID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SubscribeByID)
}
SubscribeByID::SubscribeByID(const SubscribeByID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeByID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribebyiddetails_){from._impl_.subscribebyiddetails_}
    , decltype(_impl_.globalmarketdatatypes_){from._impl_.globalmarketdatatypes_}
    , /*decltype(_impl_._globalmarketdatatypes_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeByID)
}

inline void SubscribeByID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribebyiddetails_){arena}
    , decltype(_impl_.globalmarketdatatypes_){arena}
    , /*decltype(_impl_._globalmarketdatatypes_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeByID::~SubscribeByID() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeByID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeByID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscribebyiddetails_.~RepeatedPtrField();
  _impl_.globalmarketdatatypes_.~RepeatedField();
}

void SubscribeByID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeByID::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeByID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscribebyiddetails_.Clear();
  _impl_.globalmarketdatatypes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeByID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribebyiddetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_globalmarketdatatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_globalmarketdatatypes(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeByID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeByID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscribebyiddetails_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscribebyiddetails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
  {
    int byte_size = _impl_._globalmarketdatatypes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.globalmarketdatatypes_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeByID)
  return target;
}

size_t SubscribeByID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeByID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
  total_size += 1UL * this->_internal_subscribebyiddetails_size();
  for (const auto& msg : this->_impl_.subscribebyiddetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_globalmarketdatatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_globalmarketdatatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._globalmarketdatatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeByID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeByID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeByID::GetClassData() const { return &_class_data_; }


void SubscribeByID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeByID*>(&to_msg);
  auto& from = static_cast<const SubscribeByID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeByID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subscribebyiddetails_.MergeFrom(from._impl_.subscribebyiddetails_);
  _this->_impl_.globalmarketdatatypes_.MergeFrom(from._impl_.globalmarketdatatypes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeByID::CopyFrom(const SubscribeByID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeByID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeByID::IsInitialized() const {
  return true;
}

void SubscribeByID::InternalSwap(SubscribeByID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subscribebyiddetails_.InternalSwap(&other->_impl_.subscribebyiddetails_);
  _impl_.globalmarketdatatypes_.InternalSwap(&other->_impl_.globalmarketdatatypes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeByID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSubscribe_2eproto_getter, &descriptor_table_MDSubscribe_2eproto_once,
      file_level_metadata_MDSubscribe_2eproto[2]);
}

// ===================================================================

class SubscribeByIDDetail::_Internal {
 public:
};

SubscribeByIDDetail::SubscribeByIDDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SubscribeByIDDetail)
}
SubscribeByIDDetail::SubscribeByIDDetail(const SubscribeByIDDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeByIDDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.marketdatatypes_){from._impl_.marketdatatypes_}
    , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
    , decltype(_impl_.htscsecurityid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeByIDDetail)
}

inline void SubscribeByIDDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.marketdatatypes_){arena}
    , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
    , decltype(_impl_.htscsecurityid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeByIDDetail::~SubscribeByIDDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeByIDDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.marketdatatypes_.~RepeatedField();
  _impl_.htscsecurityid_.Destroy();
}

void SubscribeByIDDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeByIDDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.marketdatatypes_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeByIDDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string htscSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_marketdatatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_marketdatatypes(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeByIDDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string htscSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  {
    int byte_size = _impl_._marketdatatypes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.marketdatatypes_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  return target;
}

size_t SubscribeByIDDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_marketdatatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_marketdatatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._marketdatatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string htscSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeByIDDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeByIDDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeByIDDetail::GetClassData() const { return &_class_data_; }


void SubscribeByIDDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeByIDDetail*>(&to_msg);
  auto& from = static_cast<const SubscribeByIDDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.marketdatatypes_.MergeFrom(from._impl_.marketdatatypes_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeByIDDetail::CopyFrom(const SubscribeByIDDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeByIDDetail::IsInitialized() const {
  return true;
}

void SubscribeByIDDetail::InternalSwap(SubscribeByIDDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.marketdatatypes_.InternalSwap(&other->_impl_.marketdatatypes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeByIDDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSubscribe_2eproto_getter, &descriptor_table_MDSubscribe_2eproto_once,
      file_level_metadata_MDSubscribe_2eproto[3]);
}

// ===================================================================

class SubscribeBySourceType::_Internal {
 public:
};

SubscribeBySourceType::SubscribeBySourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SubscribeBySourceType)
}
SubscribeBySourceType::SubscribeBySourceType(const SubscribeBySourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeBySourceType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribebysourcetypedetail_){from._impl_.subscribebysourcetypedetail_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeBySourceType)
}

inline void SubscribeBySourceType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribebysourcetypedetail_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeBySourceType::~SubscribeBySourceType() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeBySourceType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeBySourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscribebysourcetypedetail_.~RepeatedPtrField();
}

void SubscribeBySourceType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeBySourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscribebysourcetypedetail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeBySourceType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribebysourcetypedetail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeBySourceType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscribebysourcetypedetail_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscribebysourcetypedetail(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeBySourceType)
  return target;
}

size_t SubscribeBySourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
  total_size += 1UL * this->_internal_subscribebysourcetypedetail_size();
  for (const auto& msg : this->_impl_.subscribebysourcetypedetail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeBySourceType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeBySourceType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeBySourceType::GetClassData() const { return &_class_data_; }


void SubscribeBySourceType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeBySourceType*>(&to_msg);
  auto& from = static_cast<const SubscribeBySourceType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subscribebysourcetypedetail_.MergeFrom(from._impl_.subscribebysourcetypedetail_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeBySourceType::CopyFrom(const SubscribeBySourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeBySourceType::IsInitialized() const {
  return true;
}

void SubscribeBySourceType::InternalSwap(SubscribeBySourceType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subscribebysourcetypedetail_.InternalSwap(&other->_impl_.subscribebysourcetypedetail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeBySourceType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSubscribe_2eproto_getter, &descriptor_table_MDSubscribe_2eproto_once,
      file_level_metadata_MDSubscribe_2eproto[4]);
}

// ===================================================================

class SubscribeBySourceTypeDetail::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::SecuritySourceType& securitysourcetypes(const SubscribeBySourceTypeDetail* msg);
};

const ::com::htsc::mdc::insight::model::SecuritySourceType&
SubscribeBySourceTypeDetail::_Internal::securitysourcetypes(const SubscribeBySourceTypeDetail* msg) {
  return *msg->_impl_.securitysourcetypes_;
}
void SubscribeBySourceTypeDetail::clear_securitysourcetypes() {
  if (GetArenaForAllocation() == nullptr && _impl_.securitysourcetypes_ != nullptr) {
    delete _impl_.securitysourcetypes_;
  }
  _impl_.securitysourcetypes_ = nullptr;
}
SubscribeBySourceTypeDetail::SubscribeBySourceTypeDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
}
SubscribeBySourceTypeDetail::SubscribeBySourceTypeDetail(const SubscribeBySourceTypeDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeBySourceTypeDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.marketdatatypes_){from._impl_.marketdatatypes_}
    , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
    , decltype(_impl_.securitysourcetypes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_securitysourcetypes()) {
    _this->_impl_.securitysourcetypes_ = new ::com::htsc::mdc::insight::model::SecuritySourceType(*from._impl_.securitysourcetypes_);
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
}

inline void SubscribeBySourceTypeDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.marketdatatypes_){arena}
    , /*decltype(_impl_._marketdatatypes_cached_byte_size_)*/{0}
    , decltype(_impl_.securitysourcetypes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeBySourceTypeDetail::~SubscribeBySourceTypeDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeBySourceTypeDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.marketdatatypes_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.securitysourcetypes_;
}

void SubscribeBySourceTypeDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeBySourceTypeDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.marketdatatypes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.securitysourcetypes_ != nullptr) {
    delete _impl_.securitysourcetypes_;
  }
  _impl_.securitysourcetypes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeBySourceTypeDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_securitysourcetypes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_marketdatatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_marketdatatypes(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeBySourceTypeDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
  if (this->_internal_has_securitysourcetypes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::securitysourcetypes(this),
        _Internal::securitysourcetypes(this).GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  {
    int byte_size = _impl_._marketdatatypes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.marketdatatypes_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  return target;
}

size_t SubscribeBySourceTypeDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_marketdatatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_marketdatatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._marketdatatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
  if (this->_internal_has_securitysourcetypes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.securitysourcetypes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeBySourceTypeDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeBySourceTypeDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeBySourceTypeDetail::GetClassData() const { return &_class_data_; }


void SubscribeBySourceTypeDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeBySourceTypeDetail*>(&to_msg);
  auto& from = static_cast<const SubscribeBySourceTypeDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.marketdatatypes_.MergeFrom(from._impl_.marketdatatypes_);
  if (from._internal_has_securitysourcetypes()) {
    _this->_internal_mutable_securitysourcetypes()->::com::htsc::mdc::insight::model::SecuritySourceType::MergeFrom(
        from._internal_securitysourcetypes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeBySourceTypeDetail::CopyFrom(const SubscribeBySourceTypeDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeBySourceTypeDetail::IsInitialized() const {
  return true;
}

void SubscribeBySourceTypeDetail::InternalSwap(SubscribeBySourceTypeDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.marketdatatypes_.InternalSwap(&other->_impl_.marketdatatypes_);
  swap(_impl_.securitysourcetypes_, other->_impl_.securitysourcetypes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeBySourceTypeDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSubscribe_2eproto_getter, &descriptor_table_MDSubscribe_2eproto_once,
      file_level_metadata_MDSubscribe_2eproto[5]);
}

// ===================================================================

class MDSubscribeResponse::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const MDSubscribeResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
MDSubscribeResponse::_Internal::errorcontext(const MDSubscribeResponse* msg) {
  return *msg->_impl_.errorcontext_;
}
void MDSubscribeResponse::clear_errorcontext() {
  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
}
MDSubscribeResponse::MDSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDSubscribeResponse)
}
MDSubscribeResponse::MDSubscribeResponse(const MDSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDSubscribeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.issuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errorcontext()) {
    _this->_impl_.errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from._impl_.errorcontext_);
  }
  _this->_impl_.issuccess_ = from._impl_.issuccess_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDSubscribeResponse)
}

inline void MDSubscribeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.issuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MDSubscribeResponse::~MDSubscribeResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDSubscribeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDSubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.errorcontext_;
}

void MDSubscribeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
  _impl_.issuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDSubscribeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDSubscribeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->_internal_has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::errorcontext(this),
        _Internal::errorcontext(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDSubscribeResponse)
  return target;
}

size_t MDSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->_internal_has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.errorcontext_);
  }

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDSubscribeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDSubscribeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDSubscribeResponse::GetClassData() const { return &_class_data_; }


void MDSubscribeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDSubscribeResponse*>(&to_msg);
  auto& from = static_cast<const MDSubscribeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcontext()) {
    _this->_internal_mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(
        from._internal_errorcontext());
  }
  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDSubscribeResponse::CopyFrom(const MDSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDSubscribeResponse::IsInitialized() const {
  return true;
}

void MDSubscribeResponse::InternalSwap(MDSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDSubscribeResponse, _impl_.issuccess_)
      + sizeof(MDSubscribeResponse::_impl_.issuccess_)
      - PROTOBUF_FIELD_OFFSET(MDSubscribeResponse, _impl_.errorcontext_)>(
          reinterpret_cast<char*>(&_impl_.errorcontext_),
          reinterpret_cast<char*>(&other->_impl_.errorcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDSubscribeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSubscribe_2eproto_getter, &descriptor_table_MDSubscribe_2eproto_once,
      file_level_metadata_MDSubscribe_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDSubscribeRequest*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeAll*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SubscribeAll >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeByID*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeByID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SubscribeByID >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeByIDDetail*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeBySourceType*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeBySourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SubscribeBySourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDSubscribeResponse*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDSubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDSubscribeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
