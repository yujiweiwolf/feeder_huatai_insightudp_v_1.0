// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCfetsCurrencySnapshot.proto

#include "MDCfetsCurrencySnapshot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDCfetsCurrencySnapshot::MDCfetsCurrencySnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transacttime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.marketindicator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interbankofferingsnapshot_)*/nullptr
  , /*decltype(_impl_.collateralreposnapshot_)*/nullptr
  , /*decltype(_impl_.outrightreposnapshot_)*/nullptr
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.currencysnapshottype_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDCfetsCurrencySnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDCfetsCurrencySnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDCfetsCurrencySnapshotDefaultTypeInternal() {}
  union {
    MDCfetsCurrencySnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDCfetsCurrencySnapshotDefaultTypeInternal _MDCfetsCurrencySnapshot_default_instance_;
PROTOBUF_CONSTEXPR InterBankOfferingSnapshot::InterBankOfferingSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.precloserate_)*/int64_t{0}
  , /*decltype(_impl_.preweightedrate_)*/int64_t{0}
  , /*decltype(_impl_.openrate_)*/int64_t{0}
  , /*decltype(_impl_.lastrate_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.closerate_)*/int64_t{0}
  , /*decltype(_impl_.weightedrate_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.averageterm_)*/int64_t{0}
  , /*decltype(_impl_.numtrades_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InterBankOfferingSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterBankOfferingSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterBankOfferingSnapshotDefaultTypeInternal() {}
  union {
    InterBankOfferingSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterBankOfferingSnapshotDefaultTypeInternal _InterBankOfferingSnapshot_default_instance_;
PROTOBUF_CONSTEXPR CollateralRepoSnapshot::CollateralRepoSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.precloserate_)*/int64_t{0}
  , /*decltype(_impl_.preweightedrate_)*/int64_t{0}
  , /*decltype(_impl_.openrate_)*/int64_t{0}
  , /*decltype(_impl_.lastrate_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.trademethod_)*/0
  , /*decltype(_impl_.numtrades_)*/0
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.closerate_)*/int64_t{0}
  , /*decltype(_impl_.weightedrate_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.averageterm_)*/int64_t{0}
  , /*decltype(_impl_.irbondweightedrate_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollateralRepoSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollateralRepoSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollateralRepoSnapshotDefaultTypeInternal() {}
  union {
    CollateralRepoSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollateralRepoSnapshotDefaultTypeInternal _CollateralRepoSnapshot_default_instance_;
PROTOBUF_CONSTEXPR OutrightRepoSnapshot::OutrightRepoSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.precloserate_)*/int64_t{0}
  , /*decltype(_impl_.preweightedrate_)*/int64_t{0}
  , /*decltype(_impl_.openrate_)*/int64_t{0}
  , /*decltype(_impl_.lastrate_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.closerate_)*/int64_t{0}
  , /*decltype(_impl_.weightedrate_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutrightRepoSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutrightRepoSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutrightRepoSnapshotDefaultTypeInternal() {}
  union {
    OutrightRepoSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutrightRepoSnapshotDefaultTypeInternal _OutrightRepoSnapshot_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDCfetsCurrencySnapshot_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDCfetsCurrencySnapshot_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDCfetsCurrencySnapshot_2eproto = nullptr;

const uint32_t TableStruct_MDCfetsCurrencySnapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.transacttime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.marketindicator_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.currencysnapshottype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.interbankofferingsnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.collateralreposnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.outrightreposnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot, _impl_.datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.precloserate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.preweightedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.openrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.lastrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.closerate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.weightedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot, _impl_.averageterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.trademethod_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.precloserate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.preweightedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.openrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.lastrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.closerate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.weightedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.averageterm_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::CollateralRepoSnapshot, _impl_.irbondweightedrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.precloserate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.preweightedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.openrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.lastrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.closerate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.weightedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OutrightRepoSnapshot, _impl_.totalvaluetrade_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot)},
  { 19, -1, -1, sizeof(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot)},
  { 36, -1, -1, sizeof(::com::htsc::mdc::insight::model::CollateralRepoSnapshot)},
  { 55, -1, -1, sizeof(::com::htsc::mdc::insight::model::OutrightRepoSnapshot)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDCfetsCurrencySnapshot_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_InterBankOfferingSnapshot_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_CollateralRepoSnapshot_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_OutrightRepoSnapshot_default_instance_._instance,
};

const char descriptor_table_protodef_MDCfetsCurrencySnapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035MDCfetsCurrencySnapshot.proto\022\032com.hts"
  "c.mdc.insight.model\032\027ESecurityIDSource.p"
  "roto\032\023ESecurityType.proto\"\314\004\n\027MDCfetsCur"
  "rencySnapshot\022\026\n\016HTSCSecurityID\030\001 \001(\t\0227\n"
  "\014SecurityType\030\002 \001(\0162!.com.htsc.mdc.model"
  ".ESecurityType\022\?\n\020SecurityIDSource\030\003 \001(\016"
  "2%.com.htsc.mdc.model.ESecurityIDSource\022"
  "\016\n\006MDDate\030\004 \001(\005\022\016\n\006MDTime\030\005 \001(\005\022\025\n\rDataT"
  "imestamp\030\006 \001(\003\022\024\n\014TransactTime\030\007 \001(\t\022\027\n\017"
  "MarketIndicator\030\010 \001(\t\022\034\n\024CurrencySnapsho"
  "tType\030\t \001(\005\022X\n\031interBankOfferingSnapshot"
  "\030\n \001(\01325.com.htsc.mdc.insight.model.Inte"
  "rBankOfferingSnapshot\022R\n\026collateralRepoS"
  "napshot\030\013 \001(\01322.com.htsc.mdc.insight.mod"
  "el.CollateralRepoSnapshot\022N\n\024outrightRep"
  "oSnapshot\030\014 \001(\01320.com.htsc.mdc.insight.m"
  "odel.OutrightRepoSnapshot\022\035\n\025DataMultipl"
  "ePowerOf10\030\r \001(\005\"\373\001\n\031InterBankOfferingSn"
  "apshot\022\024\n\014PreCloseRate\030\001 \001(\003\022\027\n\017PreWeigh"
  "tedRate\030\002 \001(\003\022\020\n\010OpenRate\030\003 \001(\003\022\020\n\010LastR"
  "ate\030\004 \001(\003\022\020\n\010HighRate\030\005 \001(\003\022\017\n\007LowRate\030\006"
  " \001(\003\022\021\n\tCloseRate\030\007 \001(\003\022\024\n\014WeightedRate\030"
  "\010 \001(\003\022\027\n\017TotalValueTrade\030\t \001(\003\022\021\n\tNumTra"
  "des\030\n \001(\005\022\023\n\013AverageTerm\030\013 \001(\003\"\251\002\n\026Colla"
  "teralRepoSnapshot\022\023\n\013TradeMethod\030\001 \001(\005\022\024"
  "\n\014PreCloseRate\030\002 \001(\003\022\027\n\017PreWeightedRate\030"
  "\003 \001(\003\022\020\n\010OpenRate\030\004 \001(\003\022\020\n\010LastRate\030\005 \001("
  "\003\022\020\n\010HighRate\030\006 \001(\003\022\017\n\007LowRate\030\007 \001(\003\022\021\n\t"
  "CloseRate\030\010 \001(\003\022\024\n\014WeightedRate\030\t \001(\003\022\027\n"
  "\017TotalValueTrade\030\n \001(\003\022\021\n\tNumTrades\030\013 \001("
  "\005\022\023\n\013AverageTerm\030\014 \001(\003\022\032\n\022IRBondWeighted"
  "Rate\030\r \001(\003\"\316\001\n\024OutrightRepoSnapshot\022\024\n\014P"
  "reCloseRate\030\001 \001(\003\022\027\n\017PreWeightedRate\030\002 \001"
  "(\003\022\020\n\010OpenRate\030\003 \001(\003\022\020\n\010LastRate\030\004 \001(\003\022\020"
  "\n\010HighRate\030\005 \001(\003\022\017\n\007LowRate\030\006 \001(\003\022\021\n\tClo"
  "seRate\030\007 \001(\003\022\024\n\014WeightedRate\030\010 \001(\003\022\027\n\017To"
  "talValueTrade\030\t \001(\003B@\n\032com.htsc.mdc.insi"
  "ght.modelB\035MDCfetsCurrencySnapshotProtos"
  "H\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDCfetsCurrencySnapshot_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDCfetsCurrencySnapshot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDCfetsCurrencySnapshot_2eproto = {
    false, false, 1533, descriptor_table_protodef_MDCfetsCurrencySnapshot_2eproto,
    "MDCfetsCurrencySnapshot.proto",
    &descriptor_table_MDCfetsCurrencySnapshot_2eproto_once, descriptor_table_MDCfetsCurrencySnapshot_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_MDCfetsCurrencySnapshot_2eproto::offsets,
    file_level_metadata_MDCfetsCurrencySnapshot_2eproto, file_level_enum_descriptors_MDCfetsCurrencySnapshot_2eproto,
    file_level_service_descriptors_MDCfetsCurrencySnapshot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDCfetsCurrencySnapshot_2eproto_getter() {
  return &descriptor_table_MDCfetsCurrencySnapshot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDCfetsCurrencySnapshot_2eproto(&descriptor_table_MDCfetsCurrencySnapshot_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCfetsCurrencySnapshot::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot& interbankofferingsnapshot(const MDCfetsCurrencySnapshot* msg);
  static const ::com::htsc::mdc::insight::model::CollateralRepoSnapshot& collateralreposnapshot(const MDCfetsCurrencySnapshot* msg);
  static const ::com::htsc::mdc::insight::model::OutrightRepoSnapshot& outrightreposnapshot(const MDCfetsCurrencySnapshot* msg);
};

const ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot&
MDCfetsCurrencySnapshot::_Internal::interbankofferingsnapshot(const MDCfetsCurrencySnapshot* msg) {
  return *msg->_impl_.interbankofferingsnapshot_;
}
const ::com::htsc::mdc::insight::model::CollateralRepoSnapshot&
MDCfetsCurrencySnapshot::_Internal::collateralreposnapshot(const MDCfetsCurrencySnapshot* msg) {
  return *msg->_impl_.collateralreposnapshot_;
}
const ::com::htsc::mdc::insight::model::OutrightRepoSnapshot&
MDCfetsCurrencySnapshot::_Internal::outrightreposnapshot(const MDCfetsCurrencySnapshot* msg) {
  return *msg->_impl_.outrightreposnapshot_;
}
MDCfetsCurrencySnapshot::MDCfetsCurrencySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
}
MDCfetsCurrencySnapshot::MDCfetsCurrencySnapshot(const MDCfetsCurrencySnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDCfetsCurrencySnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.transacttime_){}
    , decltype(_impl_.marketindicator_){}
    , decltype(_impl_.interbankofferingsnapshot_){nullptr}
    , decltype(_impl_.collateralreposnapshot_){nullptr}
    , decltype(_impl_.outrightreposnapshot_){nullptr}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.currencysnapshottype_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transacttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transacttime().empty()) {
    _this->_impl_.transacttime_.Set(from._internal_transacttime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.marketindicator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.marketindicator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_marketindicator().empty()) {
    _this->_impl_.marketindicator_.Set(from._internal_marketindicator(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interbankofferingsnapshot()) {
    _this->_impl_.interbankofferingsnapshot_ = new ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot(*from._impl_.interbankofferingsnapshot_);
  }
  if (from._internal_has_collateralreposnapshot()) {
    _this->_impl_.collateralreposnapshot_ = new ::com::htsc::mdc::insight::model::CollateralRepoSnapshot(*from._impl_.collateralreposnapshot_);
  }
  if (from._internal_has_outrightreposnapshot()) {
    _this->_impl_.outrightreposnapshot_ = new ::com::htsc::mdc::insight::model::OutrightRepoSnapshot(*from._impl_.outrightreposnapshot_);
  }
  ::memcpy(&_impl_.securitytype_, &from._impl_.securitytype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.securitytype_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
}

inline void MDCfetsCurrencySnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.transacttime_){}
    , decltype(_impl_.marketindicator_){}
    , decltype(_impl_.interbankofferingsnapshot_){nullptr}
    , decltype(_impl_.collateralreposnapshot_){nullptr}
    , decltype(_impl_.outrightreposnapshot_){nullptr}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.currencysnapshottype_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transacttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marketindicator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.marketindicator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDCfetsCurrencySnapshot::~MDCfetsCurrencySnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDCfetsCurrencySnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.transacttime_.Destroy();
  _impl_.marketindicator_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interbankofferingsnapshot_;
  if (this != internal_default_instance()) delete _impl_.collateralreposnapshot_;
  if (this != internal_default_instance()) delete _impl_.outrightreposnapshot_;
}

void MDCfetsCurrencySnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDCfetsCurrencySnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.transacttime_.ClearToEmpty();
  _impl_.marketindicator_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interbankofferingsnapshot_ != nullptr) {
    delete _impl_.interbankofferingsnapshot_;
  }
  _impl_.interbankofferingsnapshot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collateralreposnapshot_ != nullptr) {
    delete _impl_.collateralreposnapshot_;
  }
  _impl_.collateralreposnapshot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.outrightreposnapshot_ != nullptr) {
    delete _impl_.outrightreposnapshot_;
  }
  _impl_.outrightreposnapshot_ = nullptr;
  ::memset(&_impl_.securitytype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.securitytype_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDCfetsCurrencySnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType SecurityType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource SecurityIDSource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TransactTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.TransactTime"));
        } else
          goto handle_unusual;
        continue;
      // string MarketIndicator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_marketindicator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MarketIndicator"));
        } else
          goto handle_unusual;
        continue;
      // int32 CurrencySnapshotType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.currencysnapshottype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InterBankOfferingSnapshot interBankOfferingSnapshot = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_interbankofferingsnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.CollateralRepoSnapshot collateralRepoSnapshot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_collateralreposnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.OutrightRepoSnapshot outrightRepoSnapshot = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_outrightreposnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDCfetsCurrencySnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // .com.htsc.mdc.model.ESecurityType SecurityType = 2;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_securitytype(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource SecurityIDSource = 3;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_securityidsource(), target);
  }

  // int32 MDDate = 4;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mddate(), target);
  }

  // int32 MDTime = 5;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 6;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_datatimestamp(), target);
  }

  // string TransactTime = 7;
  if (!this->_internal_transacttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.TransactTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_transacttime(), target);
  }

  // string MarketIndicator = 8;
  if (!this->_internal_marketindicator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketindicator().data(), static_cast<int>(this->_internal_marketindicator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MarketIndicator");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_marketindicator(), target);
  }

  // int32 CurrencySnapshotType = 9;
  if (this->_internal_currencysnapshottype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_currencysnapshottype(), target);
  }

  // .com.htsc.mdc.insight.model.InterBankOfferingSnapshot interBankOfferingSnapshot = 10;
  if (this->_internal_has_interbankofferingsnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::interbankofferingsnapshot(this),
        _Internal::interbankofferingsnapshot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.CollateralRepoSnapshot collateralRepoSnapshot = 11;
  if (this->_internal_has_collateralreposnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::collateralreposnapshot(this),
        _Internal::collateralreposnapshot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.OutrightRepoSnapshot outrightRepoSnapshot = 12;
  if (this->_internal_has_outrightreposnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::outrightreposnapshot(this),
        _Internal::outrightreposnapshot(this).GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 13;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
  return target;
}

size_t MDCfetsCurrencySnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TransactTime = 7;
  if (!this->_internal_transacttime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  // string MarketIndicator = 8;
  if (!this->_internal_marketindicator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketindicator());
  }

  // .com.htsc.mdc.insight.model.InterBankOfferingSnapshot interBankOfferingSnapshot = 10;
  if (this->_internal_has_interbankofferingsnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interbankofferingsnapshot_);
  }

  // .com.htsc.mdc.insight.model.CollateralRepoSnapshot collateralRepoSnapshot = 11;
  if (this->_internal_has_collateralreposnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collateralreposnapshot_);
  }

  // .com.htsc.mdc.insight.model.OutrightRepoSnapshot outrightRepoSnapshot = 12;
  if (this->_internal_has_outrightreposnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outrightreposnapshot_);
  }

  // .com.htsc.mdc.model.ESecurityType SecurityType = 2;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // .com.htsc.mdc.model.ESecurityIDSource SecurityIDSource = 3;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // int32 MDDate = 4;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 5;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 6;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // int32 CurrencySnapshotType = 9;
  if (this->_internal_currencysnapshottype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currencysnapshottype());
  }

  // int32 DataMultiplePowerOf10 = 13;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDCfetsCurrencySnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDCfetsCurrencySnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDCfetsCurrencySnapshot::GetClassData() const { return &_class_data_; }


void MDCfetsCurrencySnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDCfetsCurrencySnapshot*>(&to_msg);
  auto& from = static_cast<const MDCfetsCurrencySnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_transacttime().empty()) {
    _this->_internal_set_transacttime(from._internal_transacttime());
  }
  if (!from._internal_marketindicator().empty()) {
    _this->_internal_set_marketindicator(from._internal_marketindicator());
  }
  if (from._internal_has_interbankofferingsnapshot()) {
    _this->_internal_mutable_interbankofferingsnapshot()->::com::htsc::mdc::insight::model::InterBankOfferingSnapshot::MergeFrom(
        from._internal_interbankofferingsnapshot());
  }
  if (from._internal_has_collateralreposnapshot()) {
    _this->_internal_mutable_collateralreposnapshot()->::com::htsc::mdc::insight::model::CollateralRepoSnapshot::MergeFrom(
        from._internal_collateralreposnapshot());
  }
  if (from._internal_has_outrightreposnapshot()) {
    _this->_internal_mutable_outrightreposnapshot()->::com::htsc::mdc::insight::model::OutrightRepoSnapshot::MergeFrom(
        from._internal_outrightreposnapshot());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_currencysnapshottype() != 0) {
    _this->_internal_set_currencysnapshottype(from._internal_currencysnapshottype());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDCfetsCurrencySnapshot::CopyFrom(const MDCfetsCurrencySnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDCfetsCurrencySnapshot::IsInitialized() const {
  return true;
}

void MDCfetsCurrencySnapshot::InternalSwap(MDCfetsCurrencySnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transacttime_, lhs_arena,
      &other->_impl_.transacttime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.marketindicator_, lhs_arena,
      &other->_impl_.marketindicator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDCfetsCurrencySnapshot, _impl_.datamultiplepowerof10_)
      + sizeof(MDCfetsCurrencySnapshot::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDCfetsCurrencySnapshot, _impl_.interbankofferingsnapshot_)>(
          reinterpret_cast<char*>(&_impl_.interbankofferingsnapshot_),
          reinterpret_cast<char*>(&other->_impl_.interbankofferingsnapshot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDCfetsCurrencySnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsCurrencySnapshot_2eproto_getter, &descriptor_table_MDCfetsCurrencySnapshot_2eproto_once,
      file_level_metadata_MDCfetsCurrencySnapshot_2eproto[0]);
}

// ===================================================================

class InterBankOfferingSnapshot::_Internal {
 public:
};

InterBankOfferingSnapshot::InterBankOfferingSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
}
InterBankOfferingSnapshot::InterBankOfferingSnapshot(const InterBankOfferingSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InterBankOfferingSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.precloserate_){}
    , decltype(_impl_.preweightedrate_){}
    , decltype(_impl_.openrate_){}
    , decltype(_impl_.lastrate_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.closerate_){}
    , decltype(_impl_.weightedrate_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.averageterm_){}
    , decltype(_impl_.numtrades_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.precloserate_, &from._impl_.precloserate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numtrades_) -
    reinterpret_cast<char*>(&_impl_.precloserate_)) + sizeof(_impl_.numtrades_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
}

inline void InterBankOfferingSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.precloserate_){int64_t{0}}
    , decltype(_impl_.preweightedrate_){int64_t{0}}
    , decltype(_impl_.openrate_){int64_t{0}}
    , decltype(_impl_.lastrate_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.closerate_){int64_t{0}}
    , decltype(_impl_.weightedrate_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.averageterm_){int64_t{0}}
    , decltype(_impl_.numtrades_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InterBankOfferingSnapshot::~InterBankOfferingSnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InterBankOfferingSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InterBankOfferingSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InterBankOfferingSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.precloserate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.numtrades_) -
      reinterpret_cast<char*>(&_impl_.precloserate_)) + sizeof(_impl_.numtrades_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterBankOfferingSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 PreCloseRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.precloserate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreWeightedRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.preweightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.openrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lastrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.closerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.weightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NumTrades = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AverageTerm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.averageterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InterBankOfferingSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PreCloseRate = 1;
  if (this->_internal_precloserate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_precloserate(), target);
  }

  // int64 PreWeightedRate = 2;
  if (this->_internal_preweightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_preweightedrate(), target);
  }

  // int64 OpenRate = 3;
  if (this->_internal_openrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_openrate(), target);
  }

  // int64 LastRate = 4;
  if (this->_internal_lastrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_lastrate(), target);
  }

  // int64 HighRate = 5;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_highrate(), target);
  }

  // int64 LowRate = 6;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_lowrate(), target);
  }

  // int64 CloseRate = 7;
  if (this->_internal_closerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_closerate(), target);
  }

  // int64 WeightedRate = 8;
  if (this->_internal_weightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_weightedrate(), target);
  }

  // int64 TotalValueTrade = 9;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_totalvaluetrade(), target);
  }

  // int32 NumTrades = 10;
  if (this->_internal_numtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_numtrades(), target);
  }

  // int64 AverageTerm = 11;
  if (this->_internal_averageterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_averageterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
  return target;
}

size_t InterBankOfferingSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 PreCloseRate = 1;
  if (this->_internal_precloserate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_precloserate());
  }

  // int64 PreWeightedRate = 2;
  if (this->_internal_preweightedrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preweightedrate());
  }

  // int64 OpenRate = 3;
  if (this->_internal_openrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openrate());
  }

  // int64 LastRate = 4;
  if (this->_internal_lastrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastrate());
  }

  // int64 HighRate = 5;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int64 LowRate = 6;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 CloseRate = 7;
  if (this->_internal_closerate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closerate());
  }

  // int64 WeightedRate = 8;
  if (this->_internal_weightedrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_weightedrate());
  }

  // int64 TotalValueTrade = 9;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 AverageTerm = 11;
  if (this->_internal_averageterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_averageterm());
  }

  // int32 NumTrades = 10;
  if (this->_internal_numtrades() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numtrades());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterBankOfferingSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InterBankOfferingSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterBankOfferingSnapshot::GetClassData() const { return &_class_data_; }


void InterBankOfferingSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InterBankOfferingSnapshot*>(&to_msg);
  auto& from = static_cast<const InterBankOfferingSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_precloserate() != 0) {
    _this->_internal_set_precloserate(from._internal_precloserate());
  }
  if (from._internal_preweightedrate() != 0) {
    _this->_internal_set_preweightedrate(from._internal_preweightedrate());
  }
  if (from._internal_openrate() != 0) {
    _this->_internal_set_openrate(from._internal_openrate());
  }
  if (from._internal_lastrate() != 0) {
    _this->_internal_set_lastrate(from._internal_lastrate());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_closerate() != 0) {
    _this->_internal_set_closerate(from._internal_closerate());
  }
  if (from._internal_weightedrate() != 0) {
    _this->_internal_set_weightedrate(from._internal_weightedrate());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_averageterm() != 0) {
    _this->_internal_set_averageterm(from._internal_averageterm());
  }
  if (from._internal_numtrades() != 0) {
    _this->_internal_set_numtrades(from._internal_numtrades());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterBankOfferingSnapshot::CopyFrom(const InterBankOfferingSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterBankOfferingSnapshot::IsInitialized() const {
  return true;
}

void InterBankOfferingSnapshot::InternalSwap(InterBankOfferingSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterBankOfferingSnapshot, _impl_.numtrades_)
      + sizeof(InterBankOfferingSnapshot::_impl_.numtrades_)
      - PROTOBUF_FIELD_OFFSET(InterBankOfferingSnapshot, _impl_.precloserate_)>(
          reinterpret_cast<char*>(&_impl_.precloserate_),
          reinterpret_cast<char*>(&other->_impl_.precloserate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterBankOfferingSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsCurrencySnapshot_2eproto_getter, &descriptor_table_MDCfetsCurrencySnapshot_2eproto_once,
      file_level_metadata_MDCfetsCurrencySnapshot_2eproto[1]);
}

// ===================================================================

class CollateralRepoSnapshot::_Internal {
 public:
};

CollateralRepoSnapshot::CollateralRepoSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
}
CollateralRepoSnapshot::CollateralRepoSnapshot(const CollateralRepoSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollateralRepoSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.precloserate_){}
    , decltype(_impl_.preweightedrate_){}
    , decltype(_impl_.openrate_){}
    , decltype(_impl_.lastrate_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.trademethod_){}
    , decltype(_impl_.numtrades_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.closerate_){}
    , decltype(_impl_.weightedrate_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.averageterm_){}
    , decltype(_impl_.irbondweightedrate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.precloserate_, &from._impl_.precloserate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.irbondweightedrate_) -
    reinterpret_cast<char*>(&_impl_.precloserate_)) + sizeof(_impl_.irbondweightedrate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
}

inline void CollateralRepoSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.precloserate_){int64_t{0}}
    , decltype(_impl_.preweightedrate_){int64_t{0}}
    , decltype(_impl_.openrate_){int64_t{0}}
    , decltype(_impl_.lastrate_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.trademethod_){0}
    , decltype(_impl_.numtrades_){0}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.closerate_){int64_t{0}}
    , decltype(_impl_.weightedrate_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.averageterm_){int64_t{0}}
    , decltype(_impl_.irbondweightedrate_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollateralRepoSnapshot::~CollateralRepoSnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollateralRepoSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollateralRepoSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollateralRepoSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.precloserate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.irbondweightedrate_) -
      reinterpret_cast<char*>(&_impl_.precloserate_)) + sizeof(_impl_.irbondweightedrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollateralRepoSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 TradeMethod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.trademethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreCloseRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.precloserate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreWeightedRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.preweightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.openrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lastrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.closerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.weightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NumTrades = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AverageTerm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.averageterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IRBondWeightedRate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.irbondweightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollateralRepoSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TradeMethod = 1;
  if (this->_internal_trademethod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_trademethod(), target);
  }

  // int64 PreCloseRate = 2;
  if (this->_internal_precloserate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_precloserate(), target);
  }

  // int64 PreWeightedRate = 3;
  if (this->_internal_preweightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_preweightedrate(), target);
  }

  // int64 OpenRate = 4;
  if (this->_internal_openrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_openrate(), target);
  }

  // int64 LastRate = 5;
  if (this->_internal_lastrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_lastrate(), target);
  }

  // int64 HighRate = 6;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_highrate(), target);
  }

  // int64 LowRate = 7;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_lowrate(), target);
  }

  // int64 CloseRate = 8;
  if (this->_internal_closerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_closerate(), target);
  }

  // int64 WeightedRate = 9;
  if (this->_internal_weightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_weightedrate(), target);
  }

  // int64 TotalValueTrade = 10;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_totalvaluetrade(), target);
  }

  // int32 NumTrades = 11;
  if (this->_internal_numtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_numtrades(), target);
  }

  // int64 AverageTerm = 12;
  if (this->_internal_averageterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_averageterm(), target);
  }

  // int64 IRBondWeightedRate = 13;
  if (this->_internal_irbondweightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_irbondweightedrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
  return target;
}

size_t CollateralRepoSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 PreCloseRate = 2;
  if (this->_internal_precloserate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_precloserate());
  }

  // int64 PreWeightedRate = 3;
  if (this->_internal_preweightedrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preweightedrate());
  }

  // int64 OpenRate = 4;
  if (this->_internal_openrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openrate());
  }

  // int64 LastRate = 5;
  if (this->_internal_lastrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastrate());
  }

  // int64 HighRate = 6;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int32 TradeMethod = 1;
  if (this->_internal_trademethod() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trademethod());
  }

  // int32 NumTrades = 11;
  if (this->_internal_numtrades() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numtrades());
  }

  // int64 LowRate = 7;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 CloseRate = 8;
  if (this->_internal_closerate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closerate());
  }

  // int64 WeightedRate = 9;
  if (this->_internal_weightedrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_weightedrate());
  }

  // int64 TotalValueTrade = 10;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 AverageTerm = 12;
  if (this->_internal_averageterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_averageterm());
  }

  // int64 IRBondWeightedRate = 13;
  if (this->_internal_irbondweightedrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_irbondweightedrate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollateralRepoSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollateralRepoSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollateralRepoSnapshot::GetClassData() const { return &_class_data_; }


void CollateralRepoSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollateralRepoSnapshot*>(&to_msg);
  auto& from = static_cast<const CollateralRepoSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_precloserate() != 0) {
    _this->_internal_set_precloserate(from._internal_precloserate());
  }
  if (from._internal_preweightedrate() != 0) {
    _this->_internal_set_preweightedrate(from._internal_preweightedrate());
  }
  if (from._internal_openrate() != 0) {
    _this->_internal_set_openrate(from._internal_openrate());
  }
  if (from._internal_lastrate() != 0) {
    _this->_internal_set_lastrate(from._internal_lastrate());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_trademethod() != 0) {
    _this->_internal_set_trademethod(from._internal_trademethod());
  }
  if (from._internal_numtrades() != 0) {
    _this->_internal_set_numtrades(from._internal_numtrades());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_closerate() != 0) {
    _this->_internal_set_closerate(from._internal_closerate());
  }
  if (from._internal_weightedrate() != 0) {
    _this->_internal_set_weightedrate(from._internal_weightedrate());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_averageterm() != 0) {
    _this->_internal_set_averageterm(from._internal_averageterm());
  }
  if (from._internal_irbondweightedrate() != 0) {
    _this->_internal_set_irbondweightedrate(from._internal_irbondweightedrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollateralRepoSnapshot::CopyFrom(const CollateralRepoSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollateralRepoSnapshot::IsInitialized() const {
  return true;
}

void CollateralRepoSnapshot::InternalSwap(CollateralRepoSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollateralRepoSnapshot, _impl_.irbondweightedrate_)
      + sizeof(CollateralRepoSnapshot::_impl_.irbondweightedrate_)
      - PROTOBUF_FIELD_OFFSET(CollateralRepoSnapshot, _impl_.precloserate_)>(
          reinterpret_cast<char*>(&_impl_.precloserate_),
          reinterpret_cast<char*>(&other->_impl_.precloserate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollateralRepoSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsCurrencySnapshot_2eproto_getter, &descriptor_table_MDCfetsCurrencySnapshot_2eproto_once,
      file_level_metadata_MDCfetsCurrencySnapshot_2eproto[2]);
}

// ===================================================================

class OutrightRepoSnapshot::_Internal {
 public:
};

OutrightRepoSnapshot::OutrightRepoSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
}
OutrightRepoSnapshot::OutrightRepoSnapshot(const OutrightRepoSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutrightRepoSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.precloserate_){}
    , decltype(_impl_.preweightedrate_){}
    , decltype(_impl_.openrate_){}
    , decltype(_impl_.lastrate_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.closerate_){}
    , decltype(_impl_.weightedrate_){}
    , decltype(_impl_.totalvaluetrade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.precloserate_, &from._impl_.precloserate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.totalvaluetrade_) -
    reinterpret_cast<char*>(&_impl_.precloserate_)) + sizeof(_impl_.totalvaluetrade_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
}

inline void OutrightRepoSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.precloserate_){int64_t{0}}
    , decltype(_impl_.preweightedrate_){int64_t{0}}
    , decltype(_impl_.openrate_){int64_t{0}}
    , decltype(_impl_.lastrate_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.closerate_){int64_t{0}}
    , decltype(_impl_.weightedrate_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OutrightRepoSnapshot::~OutrightRepoSnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutrightRepoSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OutrightRepoSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutrightRepoSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.precloserate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.totalvaluetrade_) -
      reinterpret_cast<char*>(&_impl_.precloserate_)) + sizeof(_impl_.totalvaluetrade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutrightRepoSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 PreCloseRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.precloserate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreWeightedRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.preweightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.openrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lastrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.closerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.weightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutrightRepoSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PreCloseRate = 1;
  if (this->_internal_precloserate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_precloserate(), target);
  }

  // int64 PreWeightedRate = 2;
  if (this->_internal_preweightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_preweightedrate(), target);
  }

  // int64 OpenRate = 3;
  if (this->_internal_openrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_openrate(), target);
  }

  // int64 LastRate = 4;
  if (this->_internal_lastrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_lastrate(), target);
  }

  // int64 HighRate = 5;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_highrate(), target);
  }

  // int64 LowRate = 6;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_lowrate(), target);
  }

  // int64 CloseRate = 7;
  if (this->_internal_closerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_closerate(), target);
  }

  // int64 WeightedRate = 8;
  if (this->_internal_weightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_weightedrate(), target);
  }

  // int64 TotalValueTrade = 9;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_totalvaluetrade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
  return target;
}

size_t OutrightRepoSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 PreCloseRate = 1;
  if (this->_internal_precloserate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_precloserate());
  }

  // int64 PreWeightedRate = 2;
  if (this->_internal_preweightedrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preweightedrate());
  }

  // int64 OpenRate = 3;
  if (this->_internal_openrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openrate());
  }

  // int64 LastRate = 4;
  if (this->_internal_lastrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastrate());
  }

  // int64 HighRate = 5;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int64 LowRate = 6;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 CloseRate = 7;
  if (this->_internal_closerate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closerate());
  }

  // int64 WeightedRate = 8;
  if (this->_internal_weightedrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_weightedrate());
  }

  // int64 TotalValueTrade = 9;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutrightRepoSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutrightRepoSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutrightRepoSnapshot::GetClassData() const { return &_class_data_; }


void OutrightRepoSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutrightRepoSnapshot*>(&to_msg);
  auto& from = static_cast<const OutrightRepoSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_precloserate() != 0) {
    _this->_internal_set_precloserate(from._internal_precloserate());
  }
  if (from._internal_preweightedrate() != 0) {
    _this->_internal_set_preweightedrate(from._internal_preweightedrate());
  }
  if (from._internal_openrate() != 0) {
    _this->_internal_set_openrate(from._internal_openrate());
  }
  if (from._internal_lastrate() != 0) {
    _this->_internal_set_lastrate(from._internal_lastrate());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_closerate() != 0) {
    _this->_internal_set_closerate(from._internal_closerate());
  }
  if (from._internal_weightedrate() != 0) {
    _this->_internal_set_weightedrate(from._internal_weightedrate());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutrightRepoSnapshot::CopyFrom(const OutrightRepoSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutrightRepoSnapshot::IsInitialized() const {
  return true;
}

void OutrightRepoSnapshot::InternalSwap(OutrightRepoSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutrightRepoSnapshot, _impl_.totalvaluetrade_)
      + sizeof(OutrightRepoSnapshot::_impl_.totalvaluetrade_)
      - PROTOBUF_FIELD_OFFSET(OutrightRepoSnapshot, _impl_.precloserate_)>(
          reinterpret_cast<char*>(&_impl_.precloserate_),
          reinterpret_cast<char*>(&other->_impl_.precloserate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutrightRepoSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsCurrencySnapshot_2eproto_getter, &descriptor_table_MDCfetsCurrencySnapshot_2eproto_once,
      file_level_metadata_MDCfetsCurrencySnapshot_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::CollateralRepoSnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::CollateralRepoSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::CollateralRepoSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::OutrightRepoSnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::OutrightRepoSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::OutrightRepoSnapshot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
