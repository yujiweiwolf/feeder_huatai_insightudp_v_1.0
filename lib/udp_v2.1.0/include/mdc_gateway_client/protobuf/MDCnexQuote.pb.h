// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCnexQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDCnexQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDCnexQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDCnexQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDCnexQuote_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDCnexQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDBondQuote;
struct MDBondQuoteDefaultTypeInternal;
extern MDBondQuoteDefaultTypeInternal _MDBondQuote_default_instance_;
class MDCnexQuote;
struct MDCnexQuoteDefaultTypeInternal;
extern MDCnexQuoteDefaultTypeInternal _MDCnexQuote_default_instance_;
class MDCnyRepoQuote;
struct MDCnyRepoQuoteDefaultTypeInternal;
extern MDCnyRepoQuoteDefaultTypeInternal _MDCnyRepoQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDBondQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBondQuote>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDCnexQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCnexQuote>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDCnyRepoQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCnyRepoQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCnexQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCnexQuote) */ {
 public:
  inline MDCnexQuote() : MDCnexQuote(nullptr) {}
  ~MDCnexQuote() override;
  explicit PROTOBUF_CONSTEXPR MDCnexQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDCnexQuote(const MDCnexQuote& from);
  MDCnexQuote(MDCnexQuote&& from) noexcept
    : MDCnexQuote() {
    *this = ::std::move(from);
  }

  inline MDCnexQuote& operator=(const MDCnexQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCnexQuote& operator=(MDCnexQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDCnexQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDCnexQuote* internal_default_instance() {
    return reinterpret_cast<const MDCnexQuote*>(
               &_MDCnexQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDCnexQuote& a, MDCnexQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDCnexQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDCnexQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDCnexQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDCnexQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDCnexQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDCnexQuote& from) {
    MDCnexQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCnexQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCnexQuote";
  }
  protected:
  explicit MDCnexQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kBondQuoteFieldNumber = 8,
    kCnyRepoQuoteFieldNumber = 9,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kQuoteCategoryFieldNumber = 7,
    kDataMultiplePowerOf10FieldNumber = 10,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // .com.htsc.mdc.insight.model.MDBondQuote BondQuote = 8;
  bool has_bondquote() const;
  private:
  bool _internal_has_bondquote() const;
  public:
  void clear_bondquote();
  const ::com::htsc::mdc::insight::model::MDBondQuote& bondquote() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MDBondQuote* release_bondquote();
  ::com::htsc::mdc::insight::model::MDBondQuote* mutable_bondquote();
  void set_allocated_bondquote(::com::htsc::mdc::insight::model::MDBondQuote* bondquote);
  private:
  const ::com::htsc::mdc::insight::model::MDBondQuote& _internal_bondquote() const;
  ::com::htsc::mdc::insight::model::MDBondQuote* _internal_mutable_bondquote();
  public:
  void unsafe_arena_set_allocated_bondquote(
      ::com::htsc::mdc::insight::model::MDBondQuote* bondquote);
  ::com::htsc::mdc::insight::model::MDBondQuote* unsafe_arena_release_bondquote();

  // .com.htsc.mdc.insight.model.MDCnyRepoQuote CnyRepoQuote = 9;
  bool has_cnyrepoquote() const;
  private:
  bool _internal_has_cnyrepoquote() const;
  public:
  void clear_cnyrepoquote();
  const ::com::htsc::mdc::insight::model::MDCnyRepoQuote& cnyrepoquote() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MDCnyRepoQuote* release_cnyrepoquote();
  ::com::htsc::mdc::insight::model::MDCnyRepoQuote* mutable_cnyrepoquote();
  void set_allocated_cnyrepoquote(::com::htsc::mdc::insight::model::MDCnyRepoQuote* cnyrepoquote);
  private:
  const ::com::htsc::mdc::insight::model::MDCnyRepoQuote& _internal_cnyrepoquote() const;
  ::com::htsc::mdc::insight::model::MDCnyRepoQuote* _internal_mutable_cnyrepoquote();
  public:
  void unsafe_arena_set_allocated_cnyrepoquote(
      ::com::htsc::mdc::insight::model::MDCnyRepoQuote* cnyrepoquote);
  ::com::htsc::mdc::insight::model::MDCnyRepoQuote* unsafe_arena_release_cnyrepoquote();

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 QuoteCategory = 7;
  void clear_quotecategory();
  int32_t quotecategory() const;
  void set_quotecategory(int32_t value);
  private:
  int32_t _internal_quotecategory() const;
  void _internal_set_quotecategory(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 10;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCnexQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::com::htsc::mdc::insight::model::MDBondQuote* bondquote_;
    ::com::htsc::mdc::insight::model::MDCnyRepoQuote* cnyrepoquote_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t quotecategory_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCnexQuote_2eproto;
};
// -------------------------------------------------------------------

class MDBondQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDBondQuote) */ {
 public:
  inline MDBondQuote() : MDBondQuote(nullptr) {}
  ~MDBondQuote() override;
  explicit PROTOBUF_CONSTEXPR MDBondQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDBondQuote(const MDBondQuote& from);
  MDBondQuote(MDBondQuote&& from) noexcept
    : MDBondQuote() {
    *this = ::std::move(from);
  }

  inline MDBondQuote& operator=(const MDBondQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDBondQuote& operator=(MDBondQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDBondQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDBondQuote* internal_default_instance() {
    return reinterpret_cast<const MDBondQuote*>(
               &_MDBondQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MDBondQuote& a, MDBondQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDBondQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDBondQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDBondQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDBondQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDBondQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDBondQuote& from) {
    MDBondQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDBondQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDBondQuote";
  }
  protected:
  explicit MDBondQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteIDFieldNumber = 3,
    kCnexSecurityTypeFieldNumber = 13,
    kCreditRatingFieldNumber = 14,
    kTextFieldNumber = 15,
    kMaturityMonthYearFieldNumber = 16,
    kMatchIdFieldNumber = 18,
    kTenorFieldNumber = 20,
    kIssueDataTimeFieldNumber = 2,
    kCnexDataTypeFieldNumber = 1,
    kQuoteTypeFieldNumber = 4,
    kQuotePriceFieldNumber = 5,
    kQuoteSizeFieldNumber = 6,
    kYieldFieldNumber = 7,
    kQuoteDateFieldNumber = 8,
    kQuoteTimeFieldNumber = 9,
    kQuoteStatusFieldNumber = 10,
    kQuotePriceTypeFieldNumber = 11,
    kMaturityDateFieldNumber = 12,
    kUnderlyingPriceFieldNumber = 17,
    kWorkBenchFieldNumber = 19,
  };
  // string QuoteID = 3;
  void clear_quoteid();
  const std::string& quoteid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quoteid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quoteid();
  PROTOBUF_NODISCARD std::string* release_quoteid();
  void set_allocated_quoteid(std::string* quoteid);
  private:
  const std::string& _internal_quoteid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quoteid(const std::string& value);
  std::string* _internal_mutable_quoteid();
  public:

  // string CnexSecurityType = 13;
  void clear_cnexsecuritytype();
  const std::string& cnexsecuritytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cnexsecuritytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cnexsecuritytype();
  PROTOBUF_NODISCARD std::string* release_cnexsecuritytype();
  void set_allocated_cnexsecuritytype(std::string* cnexsecuritytype);
  private:
  const std::string& _internal_cnexsecuritytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cnexsecuritytype(const std::string& value);
  std::string* _internal_mutable_cnexsecuritytype();
  public:

  // string CreditRating = 14;
  void clear_creditrating();
  const std::string& creditrating() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creditrating(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creditrating();
  PROTOBUF_NODISCARD std::string* release_creditrating();
  void set_allocated_creditrating(std::string* creditrating);
  private:
  const std::string& _internal_creditrating() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creditrating(const std::string& value);
  std::string* _internal_mutable_creditrating();
  public:

  // string Text = 15;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string MaturityMonthYear = 16;
  void clear_maturitymonthyear();
  const std::string& maturitymonthyear() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maturitymonthyear(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maturitymonthyear();
  PROTOBUF_NODISCARD std::string* release_maturitymonthyear();
  void set_allocated_maturitymonthyear(std::string* maturitymonthyear);
  private:
  const std::string& _internal_maturitymonthyear() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maturitymonthyear(const std::string& value);
  std::string* _internal_mutable_maturitymonthyear();
  public:

  // string MatchId = 18;
  void clear_matchid();
  const std::string& matchid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matchid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matchid();
  PROTOBUF_NODISCARD std::string* release_matchid();
  void set_allocated_matchid(std::string* matchid);
  private:
  const std::string& _internal_matchid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matchid(const std::string& value);
  std::string* _internal_mutable_matchid();
  public:

  // string Tenor = 20;
  void clear_tenor();
  const std::string& tenor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tenor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tenor();
  PROTOBUF_NODISCARD std::string* release_tenor();
  void set_allocated_tenor(std::string* tenor);
  private:
  const std::string& _internal_tenor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tenor(const std::string& value);
  std::string* _internal_mutable_tenor();
  public:

  // int64 IssueDataTime = 2;
  void clear_issuedatatime();
  int64_t issuedatatime() const;
  void set_issuedatatime(int64_t value);
  private:
  int64_t _internal_issuedatatime() const;
  void _internal_set_issuedatatime(int64_t value);
  public:

  // int32 CnexDataType = 1;
  void clear_cnexdatatype();
  int32_t cnexdatatype() const;
  void set_cnexdatatype(int32_t value);
  private:
  int32_t _internal_cnexdatatype() const;
  void _internal_set_cnexdatatype(int32_t value);
  public:

  // int32 QuoteType = 4;
  void clear_quotetype();
  int32_t quotetype() const;
  void set_quotetype(int32_t value);
  private:
  int32_t _internal_quotetype() const;
  void _internal_set_quotetype(int32_t value);
  public:

  // int64 QuotePrice = 5;
  void clear_quoteprice();
  int64_t quoteprice() const;
  void set_quoteprice(int64_t value);
  private:
  int64_t _internal_quoteprice() const;
  void _internal_set_quoteprice(int64_t value);
  public:

  // int64 QuoteSize = 6;
  void clear_quotesize();
  int64_t quotesize() const;
  void set_quotesize(int64_t value);
  private:
  int64_t _internal_quotesize() const;
  void _internal_set_quotesize(int64_t value);
  public:

  // int64 Yield = 7;
  void clear_yield();
  int64_t yield() const;
  void set_yield(int64_t value);
  private:
  int64_t _internal_yield() const;
  void _internal_set_yield(int64_t value);
  public:

  // int32 QuoteDate = 8;
  void clear_quotedate();
  int32_t quotedate() const;
  void set_quotedate(int32_t value);
  private:
  int32_t _internal_quotedate() const;
  void _internal_set_quotedate(int32_t value);
  public:

  // int32 QuoteTime = 9;
  void clear_quotetime();
  int32_t quotetime() const;
  void set_quotetime(int32_t value);
  private:
  int32_t _internal_quotetime() const;
  void _internal_set_quotetime(int32_t value);
  public:

  // int32 QuoteStatus = 10;
  void clear_quotestatus();
  int32_t quotestatus() const;
  void set_quotestatus(int32_t value);
  private:
  int32_t _internal_quotestatus() const;
  void _internal_set_quotestatus(int32_t value);
  public:

  // int32 QuotePriceType = 11;
  void clear_quotepricetype();
  int32_t quotepricetype() const;
  void set_quotepricetype(int32_t value);
  private:
  int32_t _internal_quotepricetype() const;
  void _internal_set_quotepricetype(int32_t value);
  public:

  // int32 MaturityDate = 12;
  void clear_maturitydate();
  int32_t maturitydate() const;
  void set_maturitydate(int32_t value);
  private:
  int32_t _internal_maturitydate() const;
  void _internal_set_maturitydate(int32_t value);
  public:

  // int32 UnderlyingPrice = 17;
  void clear_underlyingprice();
  int32_t underlyingprice() const;
  void set_underlyingprice(int32_t value);
  private:
  int32_t _internal_underlyingprice() const;
  void _internal_set_underlyingprice(int32_t value);
  public:

  // int32 WorkBench = 19;
  void clear_workbench();
  int32_t workbench() const;
  void set_workbench(int32_t value);
  private:
  int32_t _internal_workbench() const;
  void _internal_set_workbench(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDBondQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoteid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cnexsecuritytype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creditrating_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maturitymonthyear_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenor_;
    int64_t issuedatatime_;
    int32_t cnexdatatype_;
    int32_t quotetype_;
    int64_t quoteprice_;
    int64_t quotesize_;
    int64_t yield_;
    int32_t quotedate_;
    int32_t quotetime_;
    int32_t quotestatus_;
    int32_t quotepricetype_;
    int32_t maturitydate_;
    int32_t underlyingprice_;
    int32_t workbench_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCnexQuote_2eproto;
};
// -------------------------------------------------------------------

class MDCnyRepoQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCnyRepoQuote) */ {
 public:
  inline MDCnyRepoQuote() : MDCnyRepoQuote(nullptr) {}
  ~MDCnyRepoQuote() override;
  explicit PROTOBUF_CONSTEXPR MDCnyRepoQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDCnyRepoQuote(const MDCnyRepoQuote& from);
  MDCnyRepoQuote(MDCnyRepoQuote&& from) noexcept
    : MDCnyRepoQuote() {
    *this = ::std::move(from);
  }

  inline MDCnyRepoQuote& operator=(const MDCnyRepoQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCnyRepoQuote& operator=(MDCnyRepoQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDCnyRepoQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDCnyRepoQuote* internal_default_instance() {
    return reinterpret_cast<const MDCnyRepoQuote*>(
               &_MDCnyRepoQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MDCnyRepoQuote& a, MDCnyRepoQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDCnyRepoQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDCnyRepoQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDCnyRepoQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDCnyRepoQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDCnyRepoQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDCnyRepoQuote& from) {
    MDCnyRepoQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCnyRepoQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCnyRepoQuote";
  }
  protected:
  explicit MDCnyRepoQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteIDFieldNumber = 3,
    kFloatPriceFieldNumber = 13,
    kFixedRateFieldNumber = 14,
    kVolumeFieldNumber = 15,
    kSpecialTermFieldNumber = 18,
    kZhiLianFieldNumber = 23,
    kUnderwriterLevel1FieldNumber = 24,
    kATAddFieldNumber = 25,
    kDealtypeFieldNumber = 26,
    kIssueDataTimeFieldNumber = 2,
    kCnexDataTypeFieldNumber = 1,
    kQuoteTypeFieldNumber = 4,
    kQuoteDateFieldNumber = 5,
    kQuoteTimeFieldNumber = 6,
    kQuoteStatusFieldNumber = 7,
    kQuotePriceTypeFieldNumber = 8,
    kCreateDateFieldNumber = 9,
    kModifyDateFieldNumber = 10,
    kBaseTermFieldNumber = 11,
    kFloatTypeFieldNumber = 12,
    kVolumeAboveOrBelowFieldNumber = 16,
    kVolCanSplitFieldNumber = 17,
    kAt1FieldNumber = 19,
    kAt2FieldNumber = 20,
    kATCreditRatingFieldNumber = 21,
    kATBankLimitedFieldNumber = 22,
  };
  // string QuoteID = 3;
  void clear_quoteid();
  const std::string& quoteid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quoteid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quoteid();
  PROTOBUF_NODISCARD std::string* release_quoteid();
  void set_allocated_quoteid(std::string* quoteid);
  private:
  const std::string& _internal_quoteid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quoteid(const std::string& value);
  std::string* _internal_mutable_quoteid();
  public:

  // string FloatPrice = 13;
  void clear_floatprice();
  const std::string& floatprice() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_floatprice(ArgT0&& arg0, ArgT... args);
  std::string* mutable_floatprice();
  PROTOBUF_NODISCARD std::string* release_floatprice();
  void set_allocated_floatprice(std::string* floatprice);
  private:
  const std::string& _internal_floatprice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_floatprice(const std::string& value);
  std::string* _internal_mutable_floatprice();
  public:

  // string FixedRate = 14;
  void clear_fixedrate();
  const std::string& fixedrate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fixedrate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fixedrate();
  PROTOBUF_NODISCARD std::string* release_fixedrate();
  void set_allocated_fixedrate(std::string* fixedrate);
  private:
  const std::string& _internal_fixedrate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fixedrate(const std::string& value);
  std::string* _internal_mutable_fixedrate();
  public:

  // string Volume = 15;
  void clear_volume();
  const std::string& volume() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volume(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volume();
  PROTOBUF_NODISCARD std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // string SpecialTerm = 18;
  void clear_specialterm();
  const std::string& specialterm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_specialterm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_specialterm();
  PROTOBUF_NODISCARD std::string* release_specialterm();
  void set_allocated_specialterm(std::string* specialterm);
  private:
  const std::string& _internal_specialterm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_specialterm(const std::string& value);
  std::string* _internal_mutable_specialterm();
  public:

  // string ZhiLian = 23;
  void clear_zhilian();
  const std::string& zhilian() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zhilian(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zhilian();
  PROTOBUF_NODISCARD std::string* release_zhilian();
  void set_allocated_zhilian(std::string* zhilian);
  private:
  const std::string& _internal_zhilian() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zhilian(const std::string& value);
  std::string* _internal_mutable_zhilian();
  public:

  // string UnderwriterLevel1 = 24;
  void clear_underwriterlevel1();
  const std::string& underwriterlevel1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underwriterlevel1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underwriterlevel1();
  PROTOBUF_NODISCARD std::string* release_underwriterlevel1();
  void set_allocated_underwriterlevel1(std::string* underwriterlevel1);
  private:
  const std::string& _internal_underwriterlevel1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underwriterlevel1(const std::string& value);
  std::string* _internal_mutable_underwriterlevel1();
  public:

  // string ATAdd = 25;
  void clear_atadd();
  const std::string& atadd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_atadd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_atadd();
  PROTOBUF_NODISCARD std::string* release_atadd();
  void set_allocated_atadd(std::string* atadd);
  private:
  const std::string& _internal_atadd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_atadd(const std::string& value);
  std::string* _internal_mutable_atadd();
  public:

  // string Dealtype = 26;
  void clear_dealtype();
  const std::string& dealtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dealtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dealtype();
  PROTOBUF_NODISCARD std::string* release_dealtype();
  void set_allocated_dealtype(std::string* dealtype);
  private:
  const std::string& _internal_dealtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dealtype(const std::string& value);
  std::string* _internal_mutable_dealtype();
  public:

  // int64 IssueDataTime = 2;
  void clear_issuedatatime();
  int64_t issuedatatime() const;
  void set_issuedatatime(int64_t value);
  private:
  int64_t _internal_issuedatatime() const;
  void _internal_set_issuedatatime(int64_t value);
  public:

  // int32 CnexDataType = 1;
  void clear_cnexdatatype();
  int32_t cnexdatatype() const;
  void set_cnexdatatype(int32_t value);
  private:
  int32_t _internal_cnexdatatype() const;
  void _internal_set_cnexdatatype(int32_t value);
  public:

  // int32 QuoteType = 4;
  void clear_quotetype();
  int32_t quotetype() const;
  void set_quotetype(int32_t value);
  private:
  int32_t _internal_quotetype() const;
  void _internal_set_quotetype(int32_t value);
  public:

  // int32 QuoteDate = 5;
  void clear_quotedate();
  int32_t quotedate() const;
  void set_quotedate(int32_t value);
  private:
  int32_t _internal_quotedate() const;
  void _internal_set_quotedate(int32_t value);
  public:

  // int32 QuoteTime = 6;
  void clear_quotetime();
  int32_t quotetime() const;
  void set_quotetime(int32_t value);
  private:
  int32_t _internal_quotetime() const;
  void _internal_set_quotetime(int32_t value);
  public:

  // int32 QuoteStatus = 7;
  void clear_quotestatus();
  int32_t quotestatus() const;
  void set_quotestatus(int32_t value);
  private:
  int32_t _internal_quotestatus() const;
  void _internal_set_quotestatus(int32_t value);
  public:

  // int32 QuotePriceType = 8;
  void clear_quotepricetype();
  int32_t quotepricetype() const;
  void set_quotepricetype(int32_t value);
  private:
  int32_t _internal_quotepricetype() const;
  void _internal_set_quotepricetype(int32_t value);
  public:

  // int64 CreateDate = 9;
  void clear_createdate();
  int64_t createdate() const;
  void set_createdate(int64_t value);
  private:
  int64_t _internal_createdate() const;
  void _internal_set_createdate(int64_t value);
  public:

  // int64 ModifyDate = 10;
  void clear_modifydate();
  int64_t modifydate() const;
  void set_modifydate(int64_t value);
  private:
  int64_t _internal_modifydate() const;
  void _internal_set_modifydate(int64_t value);
  public:

  // int32 BaseTerm = 11;
  void clear_baseterm();
  int32_t baseterm() const;
  void set_baseterm(int32_t value);
  private:
  int32_t _internal_baseterm() const;
  void _internal_set_baseterm(int32_t value);
  public:

  // int32 FloatType = 12;
  void clear_floattype();
  int32_t floattype() const;
  void set_floattype(int32_t value);
  private:
  int32_t _internal_floattype() const;
  void _internal_set_floattype(int32_t value);
  public:

  // int32 VolumeAboveOrBelow = 16;
  void clear_volumeaboveorbelow();
  int32_t volumeaboveorbelow() const;
  void set_volumeaboveorbelow(int32_t value);
  private:
  int32_t _internal_volumeaboveorbelow() const;
  void _internal_set_volumeaboveorbelow(int32_t value);
  public:

  // int32 VolCanSplit = 17;
  void clear_volcansplit();
  int32_t volcansplit() const;
  void set_volcansplit(int32_t value);
  private:
  int32_t _internal_volcansplit() const;
  void _internal_set_volcansplit(int32_t value);
  public:

  // int32 At1 = 19;
  void clear_at1();
  int32_t at1() const;
  void set_at1(int32_t value);
  private:
  int32_t _internal_at1() const;
  void _internal_set_at1(int32_t value);
  public:

  // int32 At2 = 20;
  void clear_at2();
  int32_t at2() const;
  void set_at2(int32_t value);
  private:
  int32_t _internal_at2() const;
  void _internal_set_at2(int32_t value);
  public:

  // int32 ATCreditRating = 21;
  void clear_atcreditrating();
  int32_t atcreditrating() const;
  void set_atcreditrating(int32_t value);
  private:
  int32_t _internal_atcreditrating() const;
  void _internal_set_atcreditrating(int32_t value);
  public:

  // int32 ATBankLimited = 22;
  void clear_atbanklimited();
  int32_t atbanklimited() const;
  void set_atbanklimited(int32_t value);
  private:
  int32_t _internal_atbanklimited() const;
  void _internal_set_atbanklimited(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCnyRepoQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoteid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr floatprice_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixedrate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specialterm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zhilian_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underwriterlevel1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atadd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dealtype_;
    int64_t issuedatatime_;
    int32_t cnexdatatype_;
    int32_t quotetype_;
    int32_t quotedate_;
    int32_t quotetime_;
    int32_t quotestatus_;
    int32_t quotepricetype_;
    int64_t createdate_;
    int64_t modifydate_;
    int32_t baseterm_;
    int32_t floattype_;
    int32_t volumeaboveorbelow_;
    int32_t volcansplit_;
    int32_t at1_;
    int32_t at2_;
    int32_t atcreditrating_;
    int32_t atbanklimited_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCnexQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDCnexQuote

// string HTSCSecurityID = 1;
inline void MDCnexQuote::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDCnexQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnexQuote::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexQuote.HTSCSecurityID)
}
inline std::string* MDCnexQuote::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexQuote.HTSCSecurityID)
  return _s;
}
inline const std::string& MDCnexQuote::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDCnexQuote::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnexQuote::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnexQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexQuote.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDCnexQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDCnexQuote::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDCnexQuote::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDCnexQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.MDDate)
  return _internal_mddate();
}
inline void MDCnexQuote::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDCnexQuote::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDCnexQuote::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDCnexQuote::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDCnexQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.MDTime)
  return _internal_mdtime();
}
inline void MDCnexQuote::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDCnexQuote::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDCnexQuote::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDCnexQuote::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDCnexQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDCnexQuote::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDCnexQuote::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexQuote.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDCnexQuote::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCnexQuote::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCnexQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.securityIDSource)
  return _internal_securityidsource();
}
inline void MDCnexQuote::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDCnexQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDCnexQuote::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDCnexQuote::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDCnexQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.securityType)
  return _internal_securitytype();
}
inline void MDCnexQuote::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDCnexQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexQuote.securityType)
}

// int32 QuoteCategory = 7;
inline void MDCnexQuote::clear_quotecategory() {
  _impl_.quotecategory_ = 0;
}
inline int32_t MDCnexQuote::_internal_quotecategory() const {
  return _impl_.quotecategory_;
}
inline int32_t MDCnexQuote::quotecategory() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.QuoteCategory)
  return _internal_quotecategory();
}
inline void MDCnexQuote::_internal_set_quotecategory(int32_t value) {
  
  _impl_.quotecategory_ = value;
}
inline void MDCnexQuote::set_quotecategory(int32_t value) {
  _internal_set_quotecategory(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexQuote.QuoteCategory)
}

// .com.htsc.mdc.insight.model.MDBondQuote BondQuote = 8;
inline bool MDCnexQuote::_internal_has_bondquote() const {
  return this != internal_default_instance() && _impl_.bondquote_ != nullptr;
}
inline bool MDCnexQuote::has_bondquote() const {
  return _internal_has_bondquote();
}
inline void MDCnexQuote::clear_bondquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.bondquote_ != nullptr) {
    delete _impl_.bondquote_;
  }
  _impl_.bondquote_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDBondQuote& MDCnexQuote::_internal_bondquote() const {
  const ::com::htsc::mdc::insight::model::MDBondQuote* p = _impl_.bondquote_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MDBondQuote&>(
      ::com::htsc::mdc::insight::model::_MDBondQuote_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MDBondQuote& MDCnexQuote::bondquote() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.BondQuote)
  return _internal_bondquote();
}
inline void MDCnexQuote::unsafe_arena_set_allocated_bondquote(
    ::com::htsc::mdc::insight::model::MDBondQuote* bondquote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bondquote_);
  }
  _impl_.bondquote_ = bondquote;
  if (bondquote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCnexQuote.BondQuote)
}
inline ::com::htsc::mdc::insight::model::MDBondQuote* MDCnexQuote::release_bondquote() {
  
  ::com::htsc::mdc::insight::model::MDBondQuote* temp = _impl_.bondquote_;
  _impl_.bondquote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDBondQuote* MDCnexQuote::unsafe_arena_release_bondquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexQuote.BondQuote)
  
  ::com::htsc::mdc::insight::model::MDBondQuote* temp = _impl_.bondquote_;
  _impl_.bondquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDBondQuote* MDCnexQuote::_internal_mutable_bondquote() {
  
  if (_impl_.bondquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBondQuote>(GetArenaForAllocation());
    _impl_.bondquote_ = p;
  }
  return _impl_.bondquote_;
}
inline ::com::htsc::mdc::insight::model::MDBondQuote* MDCnexQuote::mutable_bondquote() {
  ::com::htsc::mdc::insight::model::MDBondQuote* _msg = _internal_mutable_bondquote();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexQuote.BondQuote)
  return _msg;
}
inline void MDCnexQuote::set_allocated_bondquote(::com::htsc::mdc::insight::model::MDBondQuote* bondquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bondquote_;
  }
  if (bondquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bondquote);
    if (message_arena != submessage_arena) {
      bondquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bondquote, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bondquote_ = bondquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexQuote.BondQuote)
}

// .com.htsc.mdc.insight.model.MDCnyRepoQuote CnyRepoQuote = 9;
inline bool MDCnexQuote::_internal_has_cnyrepoquote() const {
  return this != internal_default_instance() && _impl_.cnyrepoquote_ != nullptr;
}
inline bool MDCnexQuote::has_cnyrepoquote() const {
  return _internal_has_cnyrepoquote();
}
inline void MDCnexQuote::clear_cnyrepoquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.cnyrepoquote_ != nullptr) {
    delete _impl_.cnyrepoquote_;
  }
  _impl_.cnyrepoquote_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDCnyRepoQuote& MDCnexQuote::_internal_cnyrepoquote() const {
  const ::com::htsc::mdc::insight::model::MDCnyRepoQuote* p = _impl_.cnyrepoquote_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MDCnyRepoQuote&>(
      ::com::htsc::mdc::insight::model::_MDCnyRepoQuote_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MDCnyRepoQuote& MDCnexQuote::cnyrepoquote() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.CnyRepoQuote)
  return _internal_cnyrepoquote();
}
inline void MDCnexQuote::unsafe_arena_set_allocated_cnyrepoquote(
    ::com::htsc::mdc::insight::model::MDCnyRepoQuote* cnyrepoquote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cnyrepoquote_);
  }
  _impl_.cnyrepoquote_ = cnyrepoquote;
  if (cnyrepoquote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCnexQuote.CnyRepoQuote)
}
inline ::com::htsc::mdc::insight::model::MDCnyRepoQuote* MDCnexQuote::release_cnyrepoquote() {
  
  ::com::htsc::mdc::insight::model::MDCnyRepoQuote* temp = _impl_.cnyrepoquote_;
  _impl_.cnyrepoquote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDCnyRepoQuote* MDCnexQuote::unsafe_arena_release_cnyrepoquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexQuote.CnyRepoQuote)
  
  ::com::htsc::mdc::insight::model::MDCnyRepoQuote* temp = _impl_.cnyrepoquote_;
  _impl_.cnyrepoquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDCnyRepoQuote* MDCnexQuote::_internal_mutable_cnyrepoquote() {
  
  if (_impl_.cnyrepoquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCnyRepoQuote>(GetArenaForAllocation());
    _impl_.cnyrepoquote_ = p;
  }
  return _impl_.cnyrepoquote_;
}
inline ::com::htsc::mdc::insight::model::MDCnyRepoQuote* MDCnexQuote::mutable_cnyrepoquote() {
  ::com::htsc::mdc::insight::model::MDCnyRepoQuote* _msg = _internal_mutable_cnyrepoquote();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexQuote.CnyRepoQuote)
  return _msg;
}
inline void MDCnexQuote::set_allocated_cnyrepoquote(::com::htsc::mdc::insight::model::MDCnyRepoQuote* cnyrepoquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cnyrepoquote_;
  }
  if (cnyrepoquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cnyrepoquote);
    if (message_arena != submessage_arena) {
      cnyrepoquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cnyrepoquote, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cnyrepoquote_ = cnyrepoquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexQuote.CnyRepoQuote)
}

// int32 DataMultiplePowerOf10 = 10;
inline void MDCnexQuote::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDCnexQuote::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDCnexQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexQuote.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDCnexQuote::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDCnexQuote::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexQuote.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// MDBondQuote

// int32 CnexDataType = 1;
inline void MDBondQuote::clear_cnexdatatype() {
  _impl_.cnexdatatype_ = 0;
}
inline int32_t MDBondQuote::_internal_cnexdatatype() const {
  return _impl_.cnexdatatype_;
}
inline int32_t MDBondQuote::cnexdatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.CnexDataType)
  return _internal_cnexdatatype();
}
inline void MDBondQuote::_internal_set_cnexdatatype(int32_t value) {
  
  _impl_.cnexdatatype_ = value;
}
inline void MDBondQuote::set_cnexdatatype(int32_t value) {
  _internal_set_cnexdatatype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.CnexDataType)
}

// int64 IssueDataTime = 2;
inline void MDBondQuote::clear_issuedatatime() {
  _impl_.issuedatatime_ = int64_t{0};
}
inline int64_t MDBondQuote::_internal_issuedatatime() const {
  return _impl_.issuedatatime_;
}
inline int64_t MDBondQuote::issuedatatime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.IssueDataTime)
  return _internal_issuedatatime();
}
inline void MDBondQuote::_internal_set_issuedatatime(int64_t value) {
  
  _impl_.issuedatatime_ = value;
}
inline void MDBondQuote::set_issuedatatime(int64_t value) {
  _internal_set_issuedatatime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.IssueDataTime)
}

// string QuoteID = 3;
inline void MDBondQuote::clear_quoteid() {
  _impl_.quoteid_.ClearToEmpty();
}
inline const std::string& MDBondQuote::quoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.QuoteID)
  return _internal_quoteid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBondQuote::set_quoteid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quoteid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.QuoteID)
}
inline std::string* MDBondQuote::mutable_quoteid() {
  std::string* _s = _internal_mutable_quoteid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBondQuote.QuoteID)
  return _s;
}
inline const std::string& MDBondQuote::_internal_quoteid() const {
  return _impl_.quoteid_.Get();
}
inline void MDBondQuote::_internal_set_quoteid(const std::string& value) {
  
  _impl_.quoteid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBondQuote::_internal_mutable_quoteid() {
  
  return _impl_.quoteid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBondQuote::release_quoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBondQuote.QuoteID)
  return _impl_.quoteid_.Release();
}
inline void MDBondQuote::set_allocated_quoteid(std::string* quoteid) {
  if (quoteid != nullptr) {
    
  } else {
    
  }
  _impl_.quoteid_.SetAllocated(quoteid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quoteid_.IsDefault()) {
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBondQuote.QuoteID)
}

// int32 QuoteType = 4;
inline void MDBondQuote::clear_quotetype() {
  _impl_.quotetype_ = 0;
}
inline int32_t MDBondQuote::_internal_quotetype() const {
  return _impl_.quotetype_;
}
inline int32_t MDBondQuote::quotetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.QuoteType)
  return _internal_quotetype();
}
inline void MDBondQuote::_internal_set_quotetype(int32_t value) {
  
  _impl_.quotetype_ = value;
}
inline void MDBondQuote::set_quotetype(int32_t value) {
  _internal_set_quotetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.QuoteType)
}

// int64 QuotePrice = 5;
inline void MDBondQuote::clear_quoteprice() {
  _impl_.quoteprice_ = int64_t{0};
}
inline int64_t MDBondQuote::_internal_quoteprice() const {
  return _impl_.quoteprice_;
}
inline int64_t MDBondQuote::quoteprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.QuotePrice)
  return _internal_quoteprice();
}
inline void MDBondQuote::_internal_set_quoteprice(int64_t value) {
  
  _impl_.quoteprice_ = value;
}
inline void MDBondQuote::set_quoteprice(int64_t value) {
  _internal_set_quoteprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.QuotePrice)
}

// int64 QuoteSize = 6;
inline void MDBondQuote::clear_quotesize() {
  _impl_.quotesize_ = int64_t{0};
}
inline int64_t MDBondQuote::_internal_quotesize() const {
  return _impl_.quotesize_;
}
inline int64_t MDBondQuote::quotesize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.QuoteSize)
  return _internal_quotesize();
}
inline void MDBondQuote::_internal_set_quotesize(int64_t value) {
  
  _impl_.quotesize_ = value;
}
inline void MDBondQuote::set_quotesize(int64_t value) {
  _internal_set_quotesize(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.QuoteSize)
}

// int64 Yield = 7;
inline void MDBondQuote::clear_yield() {
  _impl_.yield_ = int64_t{0};
}
inline int64_t MDBondQuote::_internal_yield() const {
  return _impl_.yield_;
}
inline int64_t MDBondQuote::yield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.Yield)
  return _internal_yield();
}
inline void MDBondQuote::_internal_set_yield(int64_t value) {
  
  _impl_.yield_ = value;
}
inline void MDBondQuote::set_yield(int64_t value) {
  _internal_set_yield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.Yield)
}

// int32 QuoteDate = 8;
inline void MDBondQuote::clear_quotedate() {
  _impl_.quotedate_ = 0;
}
inline int32_t MDBondQuote::_internal_quotedate() const {
  return _impl_.quotedate_;
}
inline int32_t MDBondQuote::quotedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.QuoteDate)
  return _internal_quotedate();
}
inline void MDBondQuote::_internal_set_quotedate(int32_t value) {
  
  _impl_.quotedate_ = value;
}
inline void MDBondQuote::set_quotedate(int32_t value) {
  _internal_set_quotedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.QuoteDate)
}

// int32 QuoteTime = 9;
inline void MDBondQuote::clear_quotetime() {
  _impl_.quotetime_ = 0;
}
inline int32_t MDBondQuote::_internal_quotetime() const {
  return _impl_.quotetime_;
}
inline int32_t MDBondQuote::quotetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.QuoteTime)
  return _internal_quotetime();
}
inline void MDBondQuote::_internal_set_quotetime(int32_t value) {
  
  _impl_.quotetime_ = value;
}
inline void MDBondQuote::set_quotetime(int32_t value) {
  _internal_set_quotetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.QuoteTime)
}

// int32 QuoteStatus = 10;
inline void MDBondQuote::clear_quotestatus() {
  _impl_.quotestatus_ = 0;
}
inline int32_t MDBondQuote::_internal_quotestatus() const {
  return _impl_.quotestatus_;
}
inline int32_t MDBondQuote::quotestatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.QuoteStatus)
  return _internal_quotestatus();
}
inline void MDBondQuote::_internal_set_quotestatus(int32_t value) {
  
  _impl_.quotestatus_ = value;
}
inline void MDBondQuote::set_quotestatus(int32_t value) {
  _internal_set_quotestatus(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.QuoteStatus)
}

// int32 QuotePriceType = 11;
inline void MDBondQuote::clear_quotepricetype() {
  _impl_.quotepricetype_ = 0;
}
inline int32_t MDBondQuote::_internal_quotepricetype() const {
  return _impl_.quotepricetype_;
}
inline int32_t MDBondQuote::quotepricetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.QuotePriceType)
  return _internal_quotepricetype();
}
inline void MDBondQuote::_internal_set_quotepricetype(int32_t value) {
  
  _impl_.quotepricetype_ = value;
}
inline void MDBondQuote::set_quotepricetype(int32_t value) {
  _internal_set_quotepricetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.QuotePriceType)
}

// int32 MaturityDate = 12;
inline void MDBondQuote::clear_maturitydate() {
  _impl_.maturitydate_ = 0;
}
inline int32_t MDBondQuote::_internal_maturitydate() const {
  return _impl_.maturitydate_;
}
inline int32_t MDBondQuote::maturitydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.MaturityDate)
  return _internal_maturitydate();
}
inline void MDBondQuote::_internal_set_maturitydate(int32_t value) {
  
  _impl_.maturitydate_ = value;
}
inline void MDBondQuote::set_maturitydate(int32_t value) {
  _internal_set_maturitydate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.MaturityDate)
}

// string CnexSecurityType = 13;
inline void MDBondQuote::clear_cnexsecuritytype() {
  _impl_.cnexsecuritytype_.ClearToEmpty();
}
inline const std::string& MDBondQuote::cnexsecuritytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.CnexSecurityType)
  return _internal_cnexsecuritytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBondQuote::set_cnexsecuritytype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cnexsecuritytype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.CnexSecurityType)
}
inline std::string* MDBondQuote::mutable_cnexsecuritytype() {
  std::string* _s = _internal_mutable_cnexsecuritytype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBondQuote.CnexSecurityType)
  return _s;
}
inline const std::string& MDBondQuote::_internal_cnexsecuritytype() const {
  return _impl_.cnexsecuritytype_.Get();
}
inline void MDBondQuote::_internal_set_cnexsecuritytype(const std::string& value) {
  
  _impl_.cnexsecuritytype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBondQuote::_internal_mutable_cnexsecuritytype() {
  
  return _impl_.cnexsecuritytype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBondQuote::release_cnexsecuritytype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBondQuote.CnexSecurityType)
  return _impl_.cnexsecuritytype_.Release();
}
inline void MDBondQuote::set_allocated_cnexsecuritytype(std::string* cnexsecuritytype) {
  if (cnexsecuritytype != nullptr) {
    
  } else {
    
  }
  _impl_.cnexsecuritytype_.SetAllocated(cnexsecuritytype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cnexsecuritytype_.IsDefault()) {
    _impl_.cnexsecuritytype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBondQuote.CnexSecurityType)
}

// string CreditRating = 14;
inline void MDBondQuote::clear_creditrating() {
  _impl_.creditrating_.ClearToEmpty();
}
inline const std::string& MDBondQuote::creditrating() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.CreditRating)
  return _internal_creditrating();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBondQuote::set_creditrating(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creditrating_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.CreditRating)
}
inline std::string* MDBondQuote::mutable_creditrating() {
  std::string* _s = _internal_mutable_creditrating();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBondQuote.CreditRating)
  return _s;
}
inline const std::string& MDBondQuote::_internal_creditrating() const {
  return _impl_.creditrating_.Get();
}
inline void MDBondQuote::_internal_set_creditrating(const std::string& value) {
  
  _impl_.creditrating_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBondQuote::_internal_mutable_creditrating() {
  
  return _impl_.creditrating_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBondQuote::release_creditrating() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBondQuote.CreditRating)
  return _impl_.creditrating_.Release();
}
inline void MDBondQuote::set_allocated_creditrating(std::string* creditrating) {
  if (creditrating != nullptr) {
    
  } else {
    
  }
  _impl_.creditrating_.SetAllocated(creditrating, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creditrating_.IsDefault()) {
    _impl_.creditrating_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBondQuote.CreditRating)
}

// string Text = 15;
inline void MDBondQuote::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& MDBondQuote::text() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.Text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBondQuote::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.Text)
}
inline std::string* MDBondQuote::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBondQuote.Text)
  return _s;
}
inline const std::string& MDBondQuote::_internal_text() const {
  return _impl_.text_.Get();
}
inline void MDBondQuote::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBondQuote::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBondQuote::release_text() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBondQuote.Text)
  return _impl_.text_.Release();
}
inline void MDBondQuote::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBondQuote.Text)
}

// string MaturityMonthYear = 16;
inline void MDBondQuote::clear_maturitymonthyear() {
  _impl_.maturitymonthyear_.ClearToEmpty();
}
inline const std::string& MDBondQuote::maturitymonthyear() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.MaturityMonthYear)
  return _internal_maturitymonthyear();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBondQuote::set_maturitymonthyear(ArgT0&& arg0, ArgT... args) {
 
 _impl_.maturitymonthyear_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.MaturityMonthYear)
}
inline std::string* MDBondQuote::mutable_maturitymonthyear() {
  std::string* _s = _internal_mutable_maturitymonthyear();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBondQuote.MaturityMonthYear)
  return _s;
}
inline const std::string& MDBondQuote::_internal_maturitymonthyear() const {
  return _impl_.maturitymonthyear_.Get();
}
inline void MDBondQuote::_internal_set_maturitymonthyear(const std::string& value) {
  
  _impl_.maturitymonthyear_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBondQuote::_internal_mutable_maturitymonthyear() {
  
  return _impl_.maturitymonthyear_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBondQuote::release_maturitymonthyear() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBondQuote.MaturityMonthYear)
  return _impl_.maturitymonthyear_.Release();
}
inline void MDBondQuote::set_allocated_maturitymonthyear(std::string* maturitymonthyear) {
  if (maturitymonthyear != nullptr) {
    
  } else {
    
  }
  _impl_.maturitymonthyear_.SetAllocated(maturitymonthyear, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.maturitymonthyear_.IsDefault()) {
    _impl_.maturitymonthyear_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBondQuote.MaturityMonthYear)
}

// int32 UnderlyingPrice = 17;
inline void MDBondQuote::clear_underlyingprice() {
  _impl_.underlyingprice_ = 0;
}
inline int32_t MDBondQuote::_internal_underlyingprice() const {
  return _impl_.underlyingprice_;
}
inline int32_t MDBondQuote::underlyingprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.UnderlyingPrice)
  return _internal_underlyingprice();
}
inline void MDBondQuote::_internal_set_underlyingprice(int32_t value) {
  
  _impl_.underlyingprice_ = value;
}
inline void MDBondQuote::set_underlyingprice(int32_t value) {
  _internal_set_underlyingprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.UnderlyingPrice)
}

// string MatchId = 18;
inline void MDBondQuote::clear_matchid() {
  _impl_.matchid_.ClearToEmpty();
}
inline const std::string& MDBondQuote::matchid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.MatchId)
  return _internal_matchid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBondQuote::set_matchid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.matchid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.MatchId)
}
inline std::string* MDBondQuote::mutable_matchid() {
  std::string* _s = _internal_mutable_matchid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBondQuote.MatchId)
  return _s;
}
inline const std::string& MDBondQuote::_internal_matchid() const {
  return _impl_.matchid_.Get();
}
inline void MDBondQuote::_internal_set_matchid(const std::string& value) {
  
  _impl_.matchid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBondQuote::_internal_mutable_matchid() {
  
  return _impl_.matchid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBondQuote::release_matchid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBondQuote.MatchId)
  return _impl_.matchid_.Release();
}
inline void MDBondQuote::set_allocated_matchid(std::string* matchid) {
  if (matchid != nullptr) {
    
  } else {
    
  }
  _impl_.matchid_.SetAllocated(matchid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.matchid_.IsDefault()) {
    _impl_.matchid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBondQuote.MatchId)
}

// int32 WorkBench = 19;
inline void MDBondQuote::clear_workbench() {
  _impl_.workbench_ = 0;
}
inline int32_t MDBondQuote::_internal_workbench() const {
  return _impl_.workbench_;
}
inline int32_t MDBondQuote::workbench() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.WorkBench)
  return _internal_workbench();
}
inline void MDBondQuote::_internal_set_workbench(int32_t value) {
  
  _impl_.workbench_ = value;
}
inline void MDBondQuote::set_workbench(int32_t value) {
  _internal_set_workbench(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.WorkBench)
}

// string Tenor = 20;
inline void MDBondQuote::clear_tenor() {
  _impl_.tenor_.ClearToEmpty();
}
inline const std::string& MDBondQuote::tenor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBondQuote.Tenor)
  return _internal_tenor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBondQuote::set_tenor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tenor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBondQuote.Tenor)
}
inline std::string* MDBondQuote::mutable_tenor() {
  std::string* _s = _internal_mutable_tenor();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBondQuote.Tenor)
  return _s;
}
inline const std::string& MDBondQuote::_internal_tenor() const {
  return _impl_.tenor_.Get();
}
inline void MDBondQuote::_internal_set_tenor(const std::string& value) {
  
  _impl_.tenor_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBondQuote::_internal_mutable_tenor() {
  
  return _impl_.tenor_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBondQuote::release_tenor() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBondQuote.Tenor)
  return _impl_.tenor_.Release();
}
inline void MDBondQuote::set_allocated_tenor(std::string* tenor) {
  if (tenor != nullptr) {
    
  } else {
    
  }
  _impl_.tenor_.SetAllocated(tenor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tenor_.IsDefault()) {
    _impl_.tenor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBondQuote.Tenor)
}

// -------------------------------------------------------------------

// MDCnyRepoQuote

// int32 CnexDataType = 1;
inline void MDCnyRepoQuote::clear_cnexdatatype() {
  _impl_.cnexdatatype_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_cnexdatatype() const {
  return _impl_.cnexdatatype_;
}
inline int32_t MDCnyRepoQuote::cnexdatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.CnexDataType)
  return _internal_cnexdatatype();
}
inline void MDCnyRepoQuote::_internal_set_cnexdatatype(int32_t value) {
  
  _impl_.cnexdatatype_ = value;
}
inline void MDCnyRepoQuote::set_cnexdatatype(int32_t value) {
  _internal_set_cnexdatatype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.CnexDataType)
}

// int64 IssueDataTime = 2;
inline void MDCnyRepoQuote::clear_issuedatatime() {
  _impl_.issuedatatime_ = int64_t{0};
}
inline int64_t MDCnyRepoQuote::_internal_issuedatatime() const {
  return _impl_.issuedatatime_;
}
inline int64_t MDCnyRepoQuote::issuedatatime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.IssueDataTime)
  return _internal_issuedatatime();
}
inline void MDCnyRepoQuote::_internal_set_issuedatatime(int64_t value) {
  
  _impl_.issuedatatime_ = value;
}
inline void MDCnyRepoQuote::set_issuedatatime(int64_t value) {
  _internal_set_issuedatatime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.IssueDataTime)
}

// string QuoteID = 3;
inline void MDCnyRepoQuote::clear_quoteid() {
  _impl_.quoteid_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::quoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteID)
  return _internal_quoteid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_quoteid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quoteid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteID)
}
inline std::string* MDCnyRepoQuote::mutable_quoteid() {
  std::string* _s = _internal_mutable_quoteid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteID)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_quoteid() const {
  return _impl_.quoteid_.Get();
}
inline void MDCnyRepoQuote::_internal_set_quoteid(const std::string& value) {
  
  _impl_.quoteid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_quoteid() {
  
  return _impl_.quoteid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_quoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteID)
  return _impl_.quoteid_.Release();
}
inline void MDCnyRepoQuote::set_allocated_quoteid(std::string* quoteid) {
  if (quoteid != nullptr) {
    
  } else {
    
  }
  _impl_.quoteid_.SetAllocated(quoteid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quoteid_.IsDefault()) {
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteID)
}

// int32 QuoteType = 4;
inline void MDCnyRepoQuote::clear_quotetype() {
  _impl_.quotetype_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_quotetype() const {
  return _impl_.quotetype_;
}
inline int32_t MDCnyRepoQuote::quotetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteType)
  return _internal_quotetype();
}
inline void MDCnyRepoQuote::_internal_set_quotetype(int32_t value) {
  
  _impl_.quotetype_ = value;
}
inline void MDCnyRepoQuote::set_quotetype(int32_t value) {
  _internal_set_quotetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteType)
}

// int32 QuoteDate = 5;
inline void MDCnyRepoQuote::clear_quotedate() {
  _impl_.quotedate_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_quotedate() const {
  return _impl_.quotedate_;
}
inline int32_t MDCnyRepoQuote::quotedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteDate)
  return _internal_quotedate();
}
inline void MDCnyRepoQuote::_internal_set_quotedate(int32_t value) {
  
  _impl_.quotedate_ = value;
}
inline void MDCnyRepoQuote::set_quotedate(int32_t value) {
  _internal_set_quotedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteDate)
}

// int32 QuoteTime = 6;
inline void MDCnyRepoQuote::clear_quotetime() {
  _impl_.quotetime_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_quotetime() const {
  return _impl_.quotetime_;
}
inline int32_t MDCnyRepoQuote::quotetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteTime)
  return _internal_quotetime();
}
inline void MDCnyRepoQuote::_internal_set_quotetime(int32_t value) {
  
  _impl_.quotetime_ = value;
}
inline void MDCnyRepoQuote::set_quotetime(int32_t value) {
  _internal_set_quotetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteTime)
}

// int32 QuoteStatus = 7;
inline void MDCnyRepoQuote::clear_quotestatus() {
  _impl_.quotestatus_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_quotestatus() const {
  return _impl_.quotestatus_;
}
inline int32_t MDCnyRepoQuote::quotestatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteStatus)
  return _internal_quotestatus();
}
inline void MDCnyRepoQuote::_internal_set_quotestatus(int32_t value) {
  
  _impl_.quotestatus_ = value;
}
inline void MDCnyRepoQuote::set_quotestatus(int32_t value) {
  _internal_set_quotestatus(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteStatus)
}

// int32 QuotePriceType = 8;
inline void MDCnyRepoQuote::clear_quotepricetype() {
  _impl_.quotepricetype_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_quotepricetype() const {
  return _impl_.quotepricetype_;
}
inline int32_t MDCnyRepoQuote::quotepricetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuotePriceType)
  return _internal_quotepricetype();
}
inline void MDCnyRepoQuote::_internal_set_quotepricetype(int32_t value) {
  
  _impl_.quotepricetype_ = value;
}
inline void MDCnyRepoQuote::set_quotepricetype(int32_t value) {
  _internal_set_quotepricetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.QuotePriceType)
}

// int64 CreateDate = 9;
inline void MDCnyRepoQuote::clear_createdate() {
  _impl_.createdate_ = int64_t{0};
}
inline int64_t MDCnyRepoQuote::_internal_createdate() const {
  return _impl_.createdate_;
}
inline int64_t MDCnyRepoQuote::createdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.CreateDate)
  return _internal_createdate();
}
inline void MDCnyRepoQuote::_internal_set_createdate(int64_t value) {
  
  _impl_.createdate_ = value;
}
inline void MDCnyRepoQuote::set_createdate(int64_t value) {
  _internal_set_createdate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.CreateDate)
}

// int64 ModifyDate = 10;
inline void MDCnyRepoQuote::clear_modifydate() {
  _impl_.modifydate_ = int64_t{0};
}
inline int64_t MDCnyRepoQuote::_internal_modifydate() const {
  return _impl_.modifydate_;
}
inline int64_t MDCnyRepoQuote::modifydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.ModifyDate)
  return _internal_modifydate();
}
inline void MDCnyRepoQuote::_internal_set_modifydate(int64_t value) {
  
  _impl_.modifydate_ = value;
}
inline void MDCnyRepoQuote::set_modifydate(int64_t value) {
  _internal_set_modifydate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.ModifyDate)
}

// int32 BaseTerm = 11;
inline void MDCnyRepoQuote::clear_baseterm() {
  _impl_.baseterm_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_baseterm() const {
  return _impl_.baseterm_;
}
inline int32_t MDCnyRepoQuote::baseterm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.BaseTerm)
  return _internal_baseterm();
}
inline void MDCnyRepoQuote::_internal_set_baseterm(int32_t value) {
  
  _impl_.baseterm_ = value;
}
inline void MDCnyRepoQuote::set_baseterm(int32_t value) {
  _internal_set_baseterm(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.BaseTerm)
}

// int32 FloatType = 12;
inline void MDCnyRepoQuote::clear_floattype() {
  _impl_.floattype_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_floattype() const {
  return _impl_.floattype_;
}
inline int32_t MDCnyRepoQuote::floattype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatType)
  return _internal_floattype();
}
inline void MDCnyRepoQuote::_internal_set_floattype(int32_t value) {
  
  _impl_.floattype_ = value;
}
inline void MDCnyRepoQuote::set_floattype(int32_t value) {
  _internal_set_floattype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatType)
}

// string FloatPrice = 13;
inline void MDCnyRepoQuote::clear_floatprice() {
  _impl_.floatprice_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::floatprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatPrice)
  return _internal_floatprice();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_floatprice(ArgT0&& arg0, ArgT... args) {
 
 _impl_.floatprice_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatPrice)
}
inline std::string* MDCnyRepoQuote::mutable_floatprice() {
  std::string* _s = _internal_mutable_floatprice();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatPrice)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_floatprice() const {
  return _impl_.floatprice_.Get();
}
inline void MDCnyRepoQuote::_internal_set_floatprice(const std::string& value) {
  
  _impl_.floatprice_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_floatprice() {
  
  return _impl_.floatprice_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_floatprice() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatPrice)
  return _impl_.floatprice_.Release();
}
inline void MDCnyRepoQuote::set_allocated_floatprice(std::string* floatprice) {
  if (floatprice != nullptr) {
    
  } else {
    
  }
  _impl_.floatprice_.SetAllocated(floatprice, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.floatprice_.IsDefault()) {
    _impl_.floatprice_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatPrice)
}

// string FixedRate = 14;
inline void MDCnyRepoQuote::clear_fixedrate() {
  _impl_.fixedrate_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::fixedrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.FixedRate)
  return _internal_fixedrate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_fixedrate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fixedrate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.FixedRate)
}
inline std::string* MDCnyRepoQuote::mutable_fixedrate() {
  std::string* _s = _internal_mutable_fixedrate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.FixedRate)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_fixedrate() const {
  return _impl_.fixedrate_.Get();
}
inline void MDCnyRepoQuote::_internal_set_fixedrate(const std::string& value) {
  
  _impl_.fixedrate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_fixedrate() {
  
  return _impl_.fixedrate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_fixedrate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.FixedRate)
  return _impl_.fixedrate_.Release();
}
inline void MDCnyRepoQuote::set_allocated_fixedrate(std::string* fixedrate) {
  if (fixedrate != nullptr) {
    
  } else {
    
  }
  _impl_.fixedrate_.SetAllocated(fixedrate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fixedrate_.IsDefault()) {
    _impl_.fixedrate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.FixedRate)
}

// string Volume = 15;
inline void MDCnyRepoQuote::clear_volume() {
  _impl_.volume_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::volume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.Volume)
  return _internal_volume();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_volume(ArgT0&& arg0, ArgT... args) {
 
 _impl_.volume_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.Volume)
}
inline std::string* MDCnyRepoQuote::mutable_volume() {
  std::string* _s = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.Volume)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_volume() const {
  return _impl_.volume_.Get();
}
inline void MDCnyRepoQuote::_internal_set_volume(const std::string& value) {
  
  _impl_.volume_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_volume() {
  
  return _impl_.volume_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_volume() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.Volume)
  return _impl_.volume_.Release();
}
inline void MDCnyRepoQuote::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  _impl_.volume_.SetAllocated(volume, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.volume_.IsDefault()) {
    _impl_.volume_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.Volume)
}

// int32 VolumeAboveOrBelow = 16;
inline void MDCnyRepoQuote::clear_volumeaboveorbelow() {
  _impl_.volumeaboveorbelow_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_volumeaboveorbelow() const {
  return _impl_.volumeaboveorbelow_;
}
inline int32_t MDCnyRepoQuote::volumeaboveorbelow() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.VolumeAboveOrBelow)
  return _internal_volumeaboveorbelow();
}
inline void MDCnyRepoQuote::_internal_set_volumeaboveorbelow(int32_t value) {
  
  _impl_.volumeaboveorbelow_ = value;
}
inline void MDCnyRepoQuote::set_volumeaboveorbelow(int32_t value) {
  _internal_set_volumeaboveorbelow(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.VolumeAboveOrBelow)
}

// int32 VolCanSplit = 17;
inline void MDCnyRepoQuote::clear_volcansplit() {
  _impl_.volcansplit_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_volcansplit() const {
  return _impl_.volcansplit_;
}
inline int32_t MDCnyRepoQuote::volcansplit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.VolCanSplit)
  return _internal_volcansplit();
}
inline void MDCnyRepoQuote::_internal_set_volcansplit(int32_t value) {
  
  _impl_.volcansplit_ = value;
}
inline void MDCnyRepoQuote::set_volcansplit(int32_t value) {
  _internal_set_volcansplit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.VolCanSplit)
}

// string SpecialTerm = 18;
inline void MDCnyRepoQuote::clear_specialterm() {
  _impl_.specialterm_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::specialterm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.SpecialTerm)
  return _internal_specialterm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_specialterm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.specialterm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.SpecialTerm)
}
inline std::string* MDCnyRepoQuote::mutable_specialterm() {
  std::string* _s = _internal_mutable_specialterm();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.SpecialTerm)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_specialterm() const {
  return _impl_.specialterm_.Get();
}
inline void MDCnyRepoQuote::_internal_set_specialterm(const std::string& value) {
  
  _impl_.specialterm_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_specialterm() {
  
  return _impl_.specialterm_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_specialterm() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.SpecialTerm)
  return _impl_.specialterm_.Release();
}
inline void MDCnyRepoQuote::set_allocated_specialterm(std::string* specialterm) {
  if (specialterm != nullptr) {
    
  } else {
    
  }
  _impl_.specialterm_.SetAllocated(specialterm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.specialterm_.IsDefault()) {
    _impl_.specialterm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.SpecialTerm)
}

// int32 At1 = 19;
inline void MDCnyRepoQuote::clear_at1() {
  _impl_.at1_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_at1() const {
  return _impl_.at1_;
}
inline int32_t MDCnyRepoQuote::at1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.At1)
  return _internal_at1();
}
inline void MDCnyRepoQuote::_internal_set_at1(int32_t value) {
  
  _impl_.at1_ = value;
}
inline void MDCnyRepoQuote::set_at1(int32_t value) {
  _internal_set_at1(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.At1)
}

// int32 At2 = 20;
inline void MDCnyRepoQuote::clear_at2() {
  _impl_.at2_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_at2() const {
  return _impl_.at2_;
}
inline int32_t MDCnyRepoQuote::at2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.At2)
  return _internal_at2();
}
inline void MDCnyRepoQuote::_internal_set_at2(int32_t value) {
  
  _impl_.at2_ = value;
}
inline void MDCnyRepoQuote::set_at2(int32_t value) {
  _internal_set_at2(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.At2)
}

// int32 ATCreditRating = 21;
inline void MDCnyRepoQuote::clear_atcreditrating() {
  _impl_.atcreditrating_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_atcreditrating() const {
  return _impl_.atcreditrating_;
}
inline int32_t MDCnyRepoQuote::atcreditrating() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATCreditRating)
  return _internal_atcreditrating();
}
inline void MDCnyRepoQuote::_internal_set_atcreditrating(int32_t value) {
  
  _impl_.atcreditrating_ = value;
}
inline void MDCnyRepoQuote::set_atcreditrating(int32_t value) {
  _internal_set_atcreditrating(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATCreditRating)
}

// int32 ATBankLimited = 22;
inline void MDCnyRepoQuote::clear_atbanklimited() {
  _impl_.atbanklimited_ = 0;
}
inline int32_t MDCnyRepoQuote::_internal_atbanklimited() const {
  return _impl_.atbanklimited_;
}
inline int32_t MDCnyRepoQuote::atbanklimited() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATBankLimited)
  return _internal_atbanklimited();
}
inline void MDCnyRepoQuote::_internal_set_atbanklimited(int32_t value) {
  
  _impl_.atbanklimited_ = value;
}
inline void MDCnyRepoQuote::set_atbanklimited(int32_t value) {
  _internal_set_atbanklimited(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATBankLimited)
}

// string ZhiLian = 23;
inline void MDCnyRepoQuote::clear_zhilian() {
  _impl_.zhilian_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::zhilian() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.ZhiLian)
  return _internal_zhilian();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_zhilian(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zhilian_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.ZhiLian)
}
inline std::string* MDCnyRepoQuote::mutable_zhilian() {
  std::string* _s = _internal_mutable_zhilian();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.ZhiLian)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_zhilian() const {
  return _impl_.zhilian_.Get();
}
inline void MDCnyRepoQuote::_internal_set_zhilian(const std::string& value) {
  
  _impl_.zhilian_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_zhilian() {
  
  return _impl_.zhilian_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_zhilian() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.ZhiLian)
  return _impl_.zhilian_.Release();
}
inline void MDCnyRepoQuote::set_allocated_zhilian(std::string* zhilian) {
  if (zhilian != nullptr) {
    
  } else {
    
  }
  _impl_.zhilian_.SetAllocated(zhilian, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zhilian_.IsDefault()) {
    _impl_.zhilian_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.ZhiLian)
}

// string UnderwriterLevel1 = 24;
inline void MDCnyRepoQuote::clear_underwriterlevel1() {
  _impl_.underwriterlevel1_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::underwriterlevel1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.UnderwriterLevel1)
  return _internal_underwriterlevel1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_underwriterlevel1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.underwriterlevel1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.UnderwriterLevel1)
}
inline std::string* MDCnyRepoQuote::mutable_underwriterlevel1() {
  std::string* _s = _internal_mutable_underwriterlevel1();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.UnderwriterLevel1)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_underwriterlevel1() const {
  return _impl_.underwriterlevel1_.Get();
}
inline void MDCnyRepoQuote::_internal_set_underwriterlevel1(const std::string& value) {
  
  _impl_.underwriterlevel1_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_underwriterlevel1() {
  
  return _impl_.underwriterlevel1_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_underwriterlevel1() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.UnderwriterLevel1)
  return _impl_.underwriterlevel1_.Release();
}
inline void MDCnyRepoQuote::set_allocated_underwriterlevel1(std::string* underwriterlevel1) {
  if (underwriterlevel1 != nullptr) {
    
  } else {
    
  }
  _impl_.underwriterlevel1_.SetAllocated(underwriterlevel1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.underwriterlevel1_.IsDefault()) {
    _impl_.underwriterlevel1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.UnderwriterLevel1)
}

// string ATAdd = 25;
inline void MDCnyRepoQuote::clear_atadd() {
  _impl_.atadd_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::atadd() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATAdd)
  return _internal_atadd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_atadd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.atadd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATAdd)
}
inline std::string* MDCnyRepoQuote::mutable_atadd() {
  std::string* _s = _internal_mutable_atadd();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATAdd)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_atadd() const {
  return _impl_.atadd_.Get();
}
inline void MDCnyRepoQuote::_internal_set_atadd(const std::string& value) {
  
  _impl_.atadd_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_atadd() {
  
  return _impl_.atadd_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_atadd() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATAdd)
  return _impl_.atadd_.Release();
}
inline void MDCnyRepoQuote::set_allocated_atadd(std::string* atadd) {
  if (atadd != nullptr) {
    
  } else {
    
  }
  _impl_.atadd_.SetAllocated(atadd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.atadd_.IsDefault()) {
    _impl_.atadd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.ATAdd)
}

// string Dealtype = 26;
inline void MDCnyRepoQuote::clear_dealtype() {
  _impl_.dealtype_.ClearToEmpty();
}
inline const std::string& MDCnyRepoQuote::dealtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnyRepoQuote.Dealtype)
  return _internal_dealtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnyRepoQuote::set_dealtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dealtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnyRepoQuote.Dealtype)
}
inline std::string* MDCnyRepoQuote::mutable_dealtype() {
  std::string* _s = _internal_mutable_dealtype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnyRepoQuote.Dealtype)
  return _s;
}
inline const std::string& MDCnyRepoQuote::_internal_dealtype() const {
  return _impl_.dealtype_.Get();
}
inline void MDCnyRepoQuote::_internal_set_dealtype(const std::string& value) {
  
  _impl_.dealtype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::_internal_mutable_dealtype() {
  
  return _impl_.dealtype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnyRepoQuote::release_dealtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnyRepoQuote.Dealtype)
  return _impl_.dealtype_.Release();
}
inline void MDCnyRepoQuote::set_allocated_dealtype(std::string* dealtype) {
  if (dealtype != nullptr) {
    
  } else {
    
  }
  _impl_.dealtype_.SetAllocated(dealtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dealtype_.IsDefault()) {
    _impl_.dealtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnyRepoQuote.Dealtype)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDCnexQuote_2eproto
