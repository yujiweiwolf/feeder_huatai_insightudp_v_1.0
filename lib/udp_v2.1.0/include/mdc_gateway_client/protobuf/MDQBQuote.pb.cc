// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQBQuote.proto

#include "MDQBQuote.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDQBQuote::MDQBQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bidcomment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bidid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offercomment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.applseqnum_)*/int64_t{0}
  , /*decltype(_impl_.bidpx_)*/int64_t{0}
  , /*decltype(_impl_.bidsize_)*/int64_t{0}
  , /*decltype(_impl_.channelno_)*/0
  , /*decltype(_impl_.bidbargainflag_)*/0
  , /*decltype(_impl_.bidyield_)*/int64_t{0}
  , /*decltype(_impl_.bidnetprice_)*/int64_t{0}
  , /*decltype(_impl_.bidrelationflag_)*/0
  , /*decltype(_impl_.bidssdetect_)*/0
  , /*decltype(_impl_.offerpx_)*/int64_t{0}
  , /*decltype(_impl_.offersize_)*/int64_t{0}
  , /*decltype(_impl_.offeryield_)*/int64_t{0}
  , /*decltype(_impl_.offernetprice_)*/int64_t{0}
  , /*decltype(_impl_.offerbargainflag_)*/0
  , /*decltype(_impl_.offerrelationflag_)*/0
  , /*decltype(_impl_.offerssdetect_)*/0
  , /*decltype(_impl_.brokerdatatype_)*/0
  , /*decltype(_impl_.bidexerciseflag_)*/0
  , /*decltype(_impl_.ofrexerciseflag_)*/0
  , /*decltype(_impl_.bidfullprice_)*/int64_t{0}
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_.bidpricetype_)*/0
  , /*decltype(_impl_.ofrfullprice_)*/int64_t{0}
  , /*decltype(_impl_.ofrpricetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDQBQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDQBQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDQBQuoteDefaultTypeInternal() {}
  union {
    MDQBQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDQBQuoteDefaultTypeInternal _MDQBQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDQBQuote_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDQBQuote_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDQBQuote_2eproto = nullptr;

const uint32_t TableStruct_MDQBQuote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.channelno_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.applseqnum_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidsize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidnetprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidbargainflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidrelationflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidcomment_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidssdetect_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offerpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offersize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offeryield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offernetprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offerbargainflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offerrelationflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offercomment_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offerid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.offerssdetect_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.brokerdatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidexerciseflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.ofrexerciseflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidfullprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.ofrfullprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.bidpricetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQBQuote, _impl_.ofrpricetype_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDQBQuote)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDQBQuote_default_instance_._instance,
};

const char descriptor_table_protodef_MDQBQuote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017MDQBQuote.proto\022\032com.htsc.mdc.insight."
  "model\032\027ESecurityIDSource.proto\032\023ESecurit"
  "yType.proto\"\364\006\n\tMDQBQuote\022\026\n\016HTSCSecurit"
  "yID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001("
  "\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\030\n\020TradingPhase"
  "Code\030\005 \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%.c"
  "om.htsc.mdc.model.ESecurityIDSource\0227\n\014s"
  "ecurityType\030\007 \001(\0162!.com.htsc.mdc.model.E"
  "SecurityType\022\024\n\014ExchangeDate\030\010 \001(\005\022\024\n\014Ex"
  "changeTime\030\t \001(\005\022\021\n\tChannelNo\030\n \001(\005\022\022\n\nA"
  "pplSeqNum\030\013 \001(\003\022\r\n\005BidPx\030\014 \001(\003\022\017\n\007BidSiz"
  "e\030\r \001(\003\022\020\n\010BidYield\030\016 \001(\003\022\023\n\013BidNetPrice"
  "\030\017 \001(\003\022\026\n\016BidBargainFlag\030\020 \001(\005\022\027\n\017BidRel"
  "ationFlag\030\021 \001(\005\022\022\n\nBidComment\030\022 \001(\t\022\r\n\005B"
  "idID\030\023 \001(\t\022\023\n\013BidSsDetect\030\024 \001(\005\022\017\n\007Offer"
  "Px\030\025 \001(\003\022\021\n\tOfferSize\030\026 \001(\003\022\022\n\nOfferYiel"
  "d\030\027 \001(\003\022\025\n\rOfferNetPrice\030\030 \001(\003\022\030\n\020OfferB"
  "argainFlag\030\031 \001(\005\022\031\n\021OfferRelationFlag\030\032 "
  "\001(\005\022\024\n\014OfferComment\030\033 \001(\t\022\017\n\007OfferID\030\034 \001"
  "(\t\022\025\n\rOfferSsDetect\030\035 \001(\005\022\026\n\016BrokerDataT"
  "ype\030\036 \001(\005\022\027\n\017BidExerciseFlag\030\037 \001(\005\022\027\n\017Of"
  "rExerciseFlag\030  \001(\005\022\035\n\025DataMultiplePower"
  "Of10\030! \001(\005\022\024\n\014BidFullPrice\030\" \001(\003\022\024\n\014OfrF"
  "ullPrice\030# \001(\003\022\024\n\014BidPriceType\030$ \001(\005\022\024\n\014"
  "OfrPriceType\030% \001(\005B2\n\032com.htsc.mdc.insig"
  "ht.modelB\017MDQBQuoteProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDQBQuote_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDQBQuote_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDQBQuote_2eproto = {
    false, false, 1038, descriptor_table_protodef_MDQBQuote_2eproto,
    "MDQBQuote.proto",
    &descriptor_table_MDQBQuote_2eproto_once, descriptor_table_MDQBQuote_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_MDQBQuote_2eproto::offsets,
    file_level_metadata_MDQBQuote_2eproto, file_level_enum_descriptors_MDQBQuote_2eproto,
    file_level_service_descriptors_MDQBQuote_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDQBQuote_2eproto_getter() {
  return &descriptor_table_MDQBQuote_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDQBQuote_2eproto(&descriptor_table_MDQBQuote_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQBQuote::_Internal {
 public:
};

MDQBQuote::MDQBQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDQBQuote)
}
MDQBQuote::MDQBQuote(const MDQBQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDQBQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.bidcomment_){}
    , decltype(_impl_.bidid_){}
    , decltype(_impl_.offercomment_){}
    , decltype(_impl_.offerid_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.applseqnum_){}
    , decltype(_impl_.bidpx_){}
    , decltype(_impl_.bidsize_){}
    , decltype(_impl_.channelno_){}
    , decltype(_impl_.bidbargainflag_){}
    , decltype(_impl_.bidyield_){}
    , decltype(_impl_.bidnetprice_){}
    , decltype(_impl_.bidrelationflag_){}
    , decltype(_impl_.bidssdetect_){}
    , decltype(_impl_.offerpx_){}
    , decltype(_impl_.offersize_){}
    , decltype(_impl_.offeryield_){}
    , decltype(_impl_.offernetprice_){}
    , decltype(_impl_.offerbargainflag_){}
    , decltype(_impl_.offerrelationflag_){}
    , decltype(_impl_.offerssdetect_){}
    , decltype(_impl_.brokerdatatype_){}
    , decltype(_impl_.bidexerciseflag_){}
    , decltype(_impl_.ofrexerciseflag_){}
    , decltype(_impl_.bidfullprice_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , decltype(_impl_.bidpricetype_){}
    , decltype(_impl_.ofrfullprice_){}
    , decltype(_impl_.ofrpricetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bidcomment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bidcomment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bidcomment().empty()) {
    _this->_impl_.bidcomment_.Set(from._internal_bidcomment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bidid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bidid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bidid().empty()) {
    _this->_impl_.bidid_.Set(from._internal_bidid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.offercomment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offercomment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offercomment().empty()) {
    _this->_impl_.offercomment_.Set(from._internal_offercomment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.offerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offerid().empty()) {
    _this->_impl_.offerid_.Set(from._internal_offerid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ofrpricetype_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.ofrpricetype_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDQBQuote)
}

inline void MDQBQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.bidcomment_){}
    , decltype(_impl_.bidid_){}
    , decltype(_impl_.offercomment_){}
    , decltype(_impl_.offerid_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.applseqnum_){int64_t{0}}
    , decltype(_impl_.bidpx_){int64_t{0}}
    , decltype(_impl_.bidsize_){int64_t{0}}
    , decltype(_impl_.channelno_){0}
    , decltype(_impl_.bidbargainflag_){0}
    , decltype(_impl_.bidyield_){int64_t{0}}
    , decltype(_impl_.bidnetprice_){int64_t{0}}
    , decltype(_impl_.bidrelationflag_){0}
    , decltype(_impl_.bidssdetect_){0}
    , decltype(_impl_.offerpx_){int64_t{0}}
    , decltype(_impl_.offersize_){int64_t{0}}
    , decltype(_impl_.offeryield_){int64_t{0}}
    , decltype(_impl_.offernetprice_){int64_t{0}}
    , decltype(_impl_.offerbargainflag_){0}
    , decltype(_impl_.offerrelationflag_){0}
    , decltype(_impl_.offerssdetect_){0}
    , decltype(_impl_.brokerdatatype_){0}
    , decltype(_impl_.bidexerciseflag_){0}
    , decltype(_impl_.ofrexerciseflag_){0}
    , decltype(_impl_.bidfullprice_){int64_t{0}}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , decltype(_impl_.bidpricetype_){0}
    , decltype(_impl_.ofrfullprice_){int64_t{0}}
    , decltype(_impl_.ofrpricetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bidcomment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bidcomment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bidid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bidid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.offercomment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offercomment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.offerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDQBQuote::~MDQBQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDQBQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDQBQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
  _impl_.bidcomment_.Destroy();
  _impl_.bidid_.Destroy();
  _impl_.offercomment_.Destroy();
  _impl_.offerid_.Destroy();
}

void MDQBQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDQBQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDQBQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  _impl_.bidcomment_.ClearToEmpty();
  _impl_.bidid_.ClearToEmpty();
  _impl_.offercomment_.ClearToEmpty();
  _impl_.offerid_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ofrpricetype_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.ofrpricetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDQBQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQBQuote.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQBQuote.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChannelNo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.channelno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ApplSeqNum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.applseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidPx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.bidpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidSize = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.bidsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidYield = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.bidyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidNetPrice = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.bidnetprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BidBargainFlag = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.bidbargainflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BidRelationFlag = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.bidrelationflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BidComment = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_bidcomment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQBQuote.BidComment"));
        } else
          goto handle_unusual;
        continue;
      // string BidID = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_bidid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQBQuote.BidID"));
        } else
          goto handle_unusual;
        continue;
      // int32 BidSsDetect = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.bidssdetect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OfferPx = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.offerpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OfferSize = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.offersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OfferYield = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.offeryield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OfferNetPrice = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.offernetprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OfferBargainFlag = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.offerbargainflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OfferRelationFlag = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.offerrelationflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OfferComment = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_offercomment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQBQuote.OfferComment"));
        } else
          goto handle_unusual;
        continue;
      // string OfferID = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_offerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQBQuote.OfferID"));
        } else
          goto handle_unusual;
        continue;
      // int32 OfferSsDetect = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.offerssdetect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BrokerDataType = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.brokerdatatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BidExerciseFlag = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.bidexerciseflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OfrExerciseFlag = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.ofrexerciseflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidFullPrice = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bidfullprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OfrFullPrice = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ofrfullprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BidPriceType = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bidpricetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OfrPriceType = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ofrpricetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDQBQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDQBQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQBQuote.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQBQuote.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int32 ExchangeDate = 8;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 9;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_exchangetime(), target);
  }

  // int32 ChannelNo = 10;
  if (this->_internal_channelno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_channelno(), target);
  }

  // int64 ApplSeqNum = 11;
  if (this->_internal_applseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_applseqnum(), target);
  }

  // int64 BidPx = 12;
  if (this->_internal_bidpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_bidpx(), target);
  }

  // int64 BidSize = 13;
  if (this->_internal_bidsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_bidsize(), target);
  }

  // int64 BidYield = 14;
  if (this->_internal_bidyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_bidyield(), target);
  }

  // int64 BidNetPrice = 15;
  if (this->_internal_bidnetprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_bidnetprice(), target);
  }

  // int32 BidBargainFlag = 16;
  if (this->_internal_bidbargainflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_bidbargainflag(), target);
  }

  // int32 BidRelationFlag = 17;
  if (this->_internal_bidrelationflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_bidrelationflag(), target);
  }

  // string BidComment = 18;
  if (!this->_internal_bidcomment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bidcomment().data(), static_cast<int>(this->_internal_bidcomment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQBQuote.BidComment");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_bidcomment(), target);
  }

  // string BidID = 19;
  if (!this->_internal_bidid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bidid().data(), static_cast<int>(this->_internal_bidid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQBQuote.BidID");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_bidid(), target);
  }

  // int32 BidSsDetect = 20;
  if (this->_internal_bidssdetect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_bidssdetect(), target);
  }

  // int64 OfferPx = 21;
  if (this->_internal_offerpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_offerpx(), target);
  }

  // int64 OfferSize = 22;
  if (this->_internal_offersize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_offersize(), target);
  }

  // int64 OfferYield = 23;
  if (this->_internal_offeryield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_offeryield(), target);
  }

  // int64 OfferNetPrice = 24;
  if (this->_internal_offernetprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_offernetprice(), target);
  }

  // int32 OfferBargainFlag = 25;
  if (this->_internal_offerbargainflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_offerbargainflag(), target);
  }

  // int32 OfferRelationFlag = 26;
  if (this->_internal_offerrelationflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_offerrelationflag(), target);
  }

  // string OfferComment = 27;
  if (!this->_internal_offercomment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offercomment().data(), static_cast<int>(this->_internal_offercomment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQBQuote.OfferComment");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_offercomment(), target);
  }

  // string OfferID = 28;
  if (!this->_internal_offerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offerid().data(), static_cast<int>(this->_internal_offerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQBQuote.OfferID");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_offerid(), target);
  }

  // int32 OfferSsDetect = 29;
  if (this->_internal_offerssdetect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_offerssdetect(), target);
  }

  // int32 BrokerDataType = 30;
  if (this->_internal_brokerdatatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_brokerdatatype(), target);
  }

  // int32 BidExerciseFlag = 31;
  if (this->_internal_bidexerciseflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_bidexerciseflag(), target);
  }

  // int32 OfrExerciseFlag = 32;
  if (this->_internal_ofrexerciseflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_ofrexerciseflag(), target);
  }

  // int32 DataMultiplePowerOf10 = 33;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_datamultiplepowerof10(), target);
  }

  // int64 BidFullPrice = 34;
  if (this->_internal_bidfullprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(34, this->_internal_bidfullprice(), target);
  }

  // int64 OfrFullPrice = 35;
  if (this->_internal_ofrfullprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(35, this->_internal_ofrfullprice(), target);
  }

  // int32 BidPriceType = 36;
  if (this->_internal_bidpricetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_bidpricetype(), target);
  }

  // int32 OfrPriceType = 37;
  if (this->_internal_ofrpricetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_ofrpricetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDQBQuote)
  return target;
}

size_t MDQBQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDQBQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // string BidComment = 18;
  if (!this->_internal_bidcomment().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bidcomment());
  }

  // string BidID = 19;
  if (!this->_internal_bidid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bidid());
  }

  // string OfferComment = 27;
  if (!this->_internal_offercomment().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offercomment());
  }

  // string OfferID = 28;
  if (!this->_internal_offerid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offerid());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ExchangeDate = 8;
  if (this->_internal_exchangedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 9;
  if (this->_internal_exchangetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangetime());
  }

  // int64 ApplSeqNum = 11;
  if (this->_internal_applseqnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_applseqnum());
  }

  // int64 BidPx = 12;
  if (this->_internal_bidpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bidpx());
  }

  // int64 BidSize = 13;
  if (this->_internal_bidsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bidsize());
  }

  // int32 ChannelNo = 10;
  if (this->_internal_channelno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelno());
  }

  // int32 BidBargainFlag = 16;
  if (this->_internal_bidbargainflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bidbargainflag());
  }

  // int64 BidYield = 14;
  if (this->_internal_bidyield() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bidyield());
  }

  // int64 BidNetPrice = 15;
  if (this->_internal_bidnetprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bidnetprice());
  }

  // int32 BidRelationFlag = 17;
  if (this->_internal_bidrelationflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bidrelationflag());
  }

  // int32 BidSsDetect = 20;
  if (this->_internal_bidssdetect() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bidssdetect());
  }

  // int64 OfferPx = 21;
  if (this->_internal_offerpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_offerpx());
  }

  // int64 OfferSize = 22;
  if (this->_internal_offersize() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_offersize());
  }

  // int64 OfferYield = 23;
  if (this->_internal_offeryield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_offeryield());
  }

  // int64 OfferNetPrice = 24;
  if (this->_internal_offernetprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_offernetprice());
  }

  // int32 OfferBargainFlag = 25;
  if (this->_internal_offerbargainflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_offerbargainflag());
  }

  // int32 OfferRelationFlag = 26;
  if (this->_internal_offerrelationflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_offerrelationflag());
  }

  // int32 OfferSsDetect = 29;
  if (this->_internal_offerssdetect() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_offerssdetect());
  }

  // int32 BrokerDataType = 30;
  if (this->_internal_brokerdatatype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_brokerdatatype());
  }

  // int32 BidExerciseFlag = 31;
  if (this->_internal_bidexerciseflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bidexerciseflag());
  }

  // int32 OfrExerciseFlag = 32;
  if (this->_internal_ofrexerciseflag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ofrexerciseflag());
  }

  // int64 BidFullPrice = 34;
  if (this->_internal_bidfullprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_bidfullprice());
  }

  // int32 DataMultiplePowerOf10 = 33;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  // int32 BidPriceType = 36;
  if (this->_internal_bidpricetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bidpricetype());
  }

  // int64 OfrFullPrice = 35;
  if (this->_internal_ofrfullprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ofrfullprice());
  }

  // int32 OfrPriceType = 37;
  if (this->_internal_ofrpricetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ofrpricetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDQBQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDQBQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDQBQuote::GetClassData() const { return &_class_data_; }


void MDQBQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDQBQuote*>(&to_msg);
  auto& from = static_cast<const MDQBQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDQBQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (!from._internal_bidcomment().empty()) {
    _this->_internal_set_bidcomment(from._internal_bidcomment());
  }
  if (!from._internal_bidid().empty()) {
    _this->_internal_set_bidid(from._internal_bidid());
  }
  if (!from._internal_offercomment().empty()) {
    _this->_internal_set_offercomment(from._internal_offercomment());
  }
  if (!from._internal_offerid().empty()) {
    _this->_internal_set_offerid(from._internal_offerid());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_applseqnum() != 0) {
    _this->_internal_set_applseqnum(from._internal_applseqnum());
  }
  if (from._internal_bidpx() != 0) {
    _this->_internal_set_bidpx(from._internal_bidpx());
  }
  if (from._internal_bidsize() != 0) {
    _this->_internal_set_bidsize(from._internal_bidsize());
  }
  if (from._internal_channelno() != 0) {
    _this->_internal_set_channelno(from._internal_channelno());
  }
  if (from._internal_bidbargainflag() != 0) {
    _this->_internal_set_bidbargainflag(from._internal_bidbargainflag());
  }
  if (from._internal_bidyield() != 0) {
    _this->_internal_set_bidyield(from._internal_bidyield());
  }
  if (from._internal_bidnetprice() != 0) {
    _this->_internal_set_bidnetprice(from._internal_bidnetprice());
  }
  if (from._internal_bidrelationflag() != 0) {
    _this->_internal_set_bidrelationflag(from._internal_bidrelationflag());
  }
  if (from._internal_bidssdetect() != 0) {
    _this->_internal_set_bidssdetect(from._internal_bidssdetect());
  }
  if (from._internal_offerpx() != 0) {
    _this->_internal_set_offerpx(from._internal_offerpx());
  }
  if (from._internal_offersize() != 0) {
    _this->_internal_set_offersize(from._internal_offersize());
  }
  if (from._internal_offeryield() != 0) {
    _this->_internal_set_offeryield(from._internal_offeryield());
  }
  if (from._internal_offernetprice() != 0) {
    _this->_internal_set_offernetprice(from._internal_offernetprice());
  }
  if (from._internal_offerbargainflag() != 0) {
    _this->_internal_set_offerbargainflag(from._internal_offerbargainflag());
  }
  if (from._internal_offerrelationflag() != 0) {
    _this->_internal_set_offerrelationflag(from._internal_offerrelationflag());
  }
  if (from._internal_offerssdetect() != 0) {
    _this->_internal_set_offerssdetect(from._internal_offerssdetect());
  }
  if (from._internal_brokerdatatype() != 0) {
    _this->_internal_set_brokerdatatype(from._internal_brokerdatatype());
  }
  if (from._internal_bidexerciseflag() != 0) {
    _this->_internal_set_bidexerciseflag(from._internal_bidexerciseflag());
  }
  if (from._internal_ofrexerciseflag() != 0) {
    _this->_internal_set_ofrexerciseflag(from._internal_ofrexerciseflag());
  }
  if (from._internal_bidfullprice() != 0) {
    _this->_internal_set_bidfullprice(from._internal_bidfullprice());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  if (from._internal_bidpricetype() != 0) {
    _this->_internal_set_bidpricetype(from._internal_bidpricetype());
  }
  if (from._internal_ofrfullprice() != 0) {
    _this->_internal_set_ofrfullprice(from._internal_ofrfullprice());
  }
  if (from._internal_ofrpricetype() != 0) {
    _this->_internal_set_ofrpricetype(from._internal_ofrpricetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDQBQuote::CopyFrom(const MDQBQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDQBQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDQBQuote::IsInitialized() const {
  return true;
}

void MDQBQuote::InternalSwap(MDQBQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bidcomment_, lhs_arena,
      &other->_impl_.bidcomment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bidid_, lhs_arena,
      &other->_impl_.bidid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.offercomment_, lhs_arena,
      &other->_impl_.offercomment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.offerid_, lhs_arena,
      &other->_impl_.offerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDQBQuote, _impl_.ofrpricetype_)
      + sizeof(MDQBQuote::_impl_.ofrpricetype_)
      - PROTOBUF_FIELD_OFFSET(MDQBQuote, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDQBQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDQBQuote_2eproto_getter, &descriptor_table_MDQBQuote_2eproto_once,
      file_level_metadata_MDQBQuote_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDQBQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDQBQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDQBQuote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
