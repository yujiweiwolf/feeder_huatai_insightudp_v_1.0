// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDForex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDForex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDForex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDForex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDForex_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDForex_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDForex;
struct MDForexDefaultTypeInternal;
extern MDForexDefaultTypeInternal _MDForex_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDForex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDForex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDForex) */ {
 public:
  inline MDForex() : MDForex(nullptr) {}
  ~MDForex() override;
  explicit PROTOBUF_CONSTEXPR MDForex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDForex(const MDForex& from);
  MDForex(MDForex&& from) noexcept
    : MDForex() {
    *this = ::std::move(from);
  }

  inline MDForex& operator=(const MDForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDForex& operator=(MDForex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDForex& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDForex* internal_default_instance() {
    return reinterpret_cast<const MDForex*>(
               &_MDForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDForex& a, MDForex& b) {
    a.Swap(&b);
  }
  inline void Swap(MDForex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDForex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDForex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDForex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDForex& from) {
    MDForex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDForex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDForex";
  }
  protected:
  explicit MDForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyPriceQueueFieldNumber = 51,
    kBuyOrderQtyQueueFieldNumber = 52,
    kSellPriceQueueFieldNumber = 53,
    kSellOrderQtyQueueFieldNumber = 54,
    kBuyOrderQueueFieldNumber = 55,
    kSellOrderQueueFieldNumber = 56,
    kBuyNumOrdersQueueFieldNumber = 57,
    kSellNumOrdersQueueFieldNumber = 58,
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kBuyCurrencyFieldNumber = 61,
    kSellCurrencyFieldNumber = 62,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kMaxPxFieldNumber = 8,
    kMinPxFieldNumber = 9,
    kPreClosePxFieldNumber = 10,
    kTotalVolumeTradeFieldNumber = 11,
    kTotalValueTradeFieldNumber = 12,
    kLastPxFieldNumber = 13,
    kOpenPxFieldNumber = 14,
    kClosePxFieldNumber = 15,
    kHighPxFieldNumber = 16,
    kLowPxFieldNumber = 17,
    kExchangeDateFieldNumber = 18,
    kExchangeTimeFieldNumber = 19,
    kMidPxFieldNumber = 60,
    kDataMultiplePowerOf10FieldNumber = 59,
    kTenorFieldNumber = 63,
  };
  // repeated int64 BuyPriceQueue = 51 [packed = true];
  int buypricequeue_size() const;
  private:
  int _internal_buypricequeue_size() const;
  public:
  void clear_buypricequeue();
  private:
  int64_t _internal_buypricequeue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buypricequeue() const;
  void _internal_add_buypricequeue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buypricequeue();
  public:
  int64_t buypricequeue(int index) const;
  void set_buypricequeue(int index, int64_t value);
  void add_buypricequeue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buypricequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buypricequeue();

  // repeated int64 BuyOrderQtyQueue = 52 [packed = true];
  int buyorderqtyqueue_size() const;
  private:
  int _internal_buyorderqtyqueue_size() const;
  public:
  void clear_buyorderqtyqueue();
  private:
  int64_t _internal_buyorderqtyqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buyorderqtyqueue() const;
  void _internal_add_buyorderqtyqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buyorderqtyqueue();
  public:
  int64_t buyorderqtyqueue(int index) const;
  void set_buyorderqtyqueue(int index, int64_t value);
  void add_buyorderqtyqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buyorderqtyqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buyorderqtyqueue();

  // repeated int64 SellPriceQueue = 53 [packed = true];
  int sellpricequeue_size() const;
  private:
  int _internal_sellpricequeue_size() const;
  public:
  void clear_sellpricequeue();
  private:
  int64_t _internal_sellpricequeue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellpricequeue() const;
  void _internal_add_sellpricequeue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellpricequeue();
  public:
  int64_t sellpricequeue(int index) const;
  void set_sellpricequeue(int index, int64_t value);
  void add_sellpricequeue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellpricequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellpricequeue();

  // repeated int64 SellOrderQtyQueue = 54 [packed = true];
  int sellorderqtyqueue_size() const;
  private:
  int _internal_sellorderqtyqueue_size() const;
  public:
  void clear_sellorderqtyqueue();
  private:
  int64_t _internal_sellorderqtyqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellorderqtyqueue() const;
  void _internal_add_sellorderqtyqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellorderqtyqueue();
  public:
  int64_t sellorderqtyqueue(int index) const;
  void set_sellorderqtyqueue(int index, int64_t value);
  void add_sellorderqtyqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellorderqtyqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellorderqtyqueue();

  // repeated int64 BuyOrderQueue = 55 [packed = true];
  int buyorderqueue_size() const;
  private:
  int _internal_buyorderqueue_size() const;
  public:
  void clear_buyorderqueue();
  private:
  int64_t _internal_buyorderqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buyorderqueue() const;
  void _internal_add_buyorderqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buyorderqueue();
  public:
  int64_t buyorderqueue(int index) const;
  void set_buyorderqueue(int index, int64_t value);
  void add_buyorderqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buyorderqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buyorderqueue();

  // repeated int64 SellOrderQueue = 56 [packed = true];
  int sellorderqueue_size() const;
  private:
  int _internal_sellorderqueue_size() const;
  public:
  void clear_sellorderqueue();
  private:
  int64_t _internal_sellorderqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellorderqueue() const;
  void _internal_add_sellorderqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellorderqueue();
  public:
  int64_t sellorderqueue(int index) const;
  void set_sellorderqueue(int index, int64_t value);
  void add_sellorderqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellorderqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellorderqueue();

  // repeated int64 BuyNumOrdersQueue = 57 [packed = true];
  int buynumordersqueue_size() const;
  private:
  int _internal_buynumordersqueue_size() const;
  public:
  void clear_buynumordersqueue();
  private:
  int64_t _internal_buynumordersqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buynumordersqueue() const;
  void _internal_add_buynumordersqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buynumordersqueue();
  public:
  int64_t buynumordersqueue(int index) const;
  void set_buynumordersqueue(int index, int64_t value);
  void add_buynumordersqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buynumordersqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buynumordersqueue();

  // repeated int64 SellNumOrdersQueue = 58 [packed = true];
  int sellnumordersqueue_size() const;
  private:
  int _internal_sellnumordersqueue_size() const;
  public:
  void clear_sellnumordersqueue();
  private:
  int64_t _internal_sellnumordersqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellnumordersqueue() const;
  void _internal_add_sellnumordersqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellnumordersqueue();
  public:
  int64_t sellnumordersqueue(int index) const;
  void set_sellnumordersqueue(int index, int64_t value);
  void add_sellnumordersqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellnumordersqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellnumordersqueue();

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // string BuyCurrency = 61;
  void clear_buycurrency();
  const std::string& buycurrency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buycurrency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buycurrency();
  PROTOBUF_NODISCARD std::string* release_buycurrency();
  void set_allocated_buycurrency(std::string* buycurrency);
  private:
  const std::string& _internal_buycurrency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buycurrency(const std::string& value);
  std::string* _internal_mutable_buycurrency();
  public:

  // string SellCurrency = 62;
  void clear_sellcurrency();
  const std::string& sellcurrency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sellcurrency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sellcurrency();
  PROTOBUF_NODISCARD std::string* release_sellcurrency();
  void set_allocated_sellcurrency(std::string* sellcurrency);
  private:
  const std::string& _internal_sellcurrency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sellcurrency(const std::string& value);
  std::string* _internal_mutable_sellcurrency();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 MaxPx = 8;
  void clear_maxpx();
  int64_t maxpx() const;
  void set_maxpx(int64_t value);
  private:
  int64_t _internal_maxpx() const;
  void _internal_set_maxpx(int64_t value);
  public:

  // int64 MinPx = 9;
  void clear_minpx();
  int64_t minpx() const;
  void set_minpx(int64_t value);
  private:
  int64_t _internal_minpx() const;
  void _internal_set_minpx(int64_t value);
  public:

  // int64 PreClosePx = 10;
  void clear_preclosepx();
  int64_t preclosepx() const;
  void set_preclosepx(int64_t value);
  private:
  int64_t _internal_preclosepx() const;
  void _internal_set_preclosepx(int64_t value);
  public:

  // int64 TotalVolumeTrade = 11;
  void clear_totalvolumetrade();
  int64_t totalvolumetrade() const;
  void set_totalvolumetrade(int64_t value);
  private:
  int64_t _internal_totalvolumetrade() const;
  void _internal_set_totalvolumetrade(int64_t value);
  public:

  // int64 TotalValueTrade = 12;
  void clear_totalvaluetrade();
  int64_t totalvaluetrade() const;
  void set_totalvaluetrade(int64_t value);
  private:
  int64_t _internal_totalvaluetrade() const;
  void _internal_set_totalvaluetrade(int64_t value);
  public:

  // int64 LastPx = 13;
  void clear_lastpx();
  int64_t lastpx() const;
  void set_lastpx(int64_t value);
  private:
  int64_t _internal_lastpx() const;
  void _internal_set_lastpx(int64_t value);
  public:

  // int64 OpenPx = 14;
  void clear_openpx();
  int64_t openpx() const;
  void set_openpx(int64_t value);
  private:
  int64_t _internal_openpx() const;
  void _internal_set_openpx(int64_t value);
  public:

  // int64 ClosePx = 15;
  void clear_closepx();
  int64_t closepx() const;
  void set_closepx(int64_t value);
  private:
  int64_t _internal_closepx() const;
  void _internal_set_closepx(int64_t value);
  public:

  // int64 HighPx = 16;
  void clear_highpx();
  int64_t highpx() const;
  void set_highpx(int64_t value);
  private:
  int64_t _internal_highpx() const;
  void _internal_set_highpx(int64_t value);
  public:

  // int64 LowPx = 17;
  void clear_lowpx();
  int64_t lowpx() const;
  void set_lowpx(int64_t value);
  private:
  int64_t _internal_lowpx() const;
  void _internal_set_lowpx(int64_t value);
  public:

  // int32 ExchangeDate = 18;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 19;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int64 MidPx = 60;
  void clear_midpx();
  int64_t midpx() const;
  void set_midpx(int64_t value);
  private:
  int64_t _internal_midpx() const;
  void _internal_set_midpx(int64_t value);
  public:

  // int32 DataMultiplePowerOf10 = 59;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // int32 Tenor = 63;
  void clear_tenor();
  int32_t tenor() const;
  void set_tenor(int32_t value);
  private:
  int32_t _internal_tenor() const;
  void _internal_set_tenor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDForex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buypricequeue_;
    mutable std::atomic<int> _buypricequeue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buyorderqtyqueue_;
    mutable std::atomic<int> _buyorderqtyqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellpricequeue_;
    mutable std::atomic<int> _sellpricequeue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellorderqtyqueue_;
    mutable std::atomic<int> _sellorderqtyqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buyorderqueue_;
    mutable std::atomic<int> _buyorderqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellorderqueue_;
    mutable std::atomic<int> _sellorderqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buynumordersqueue_;
    mutable std::atomic<int> _buynumordersqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellnumordersqueue_;
    mutable std::atomic<int> _sellnumordersqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buycurrency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellcurrency_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t maxpx_;
    int64_t minpx_;
    int64_t preclosepx_;
    int64_t totalvolumetrade_;
    int64_t totalvaluetrade_;
    int64_t lastpx_;
    int64_t openpx_;
    int64_t closepx_;
    int64_t highpx_;
    int64_t lowpx_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int64_t midpx_;
    int32_t datamultiplepowerof10_;
    int32_t tenor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDForex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDForex

// string HTSCSecurityID = 1;
inline void MDForex::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDForex::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDForex::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
}
inline std::string* MDForex::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
  return _s;
}
inline const std::string& MDForex::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDForex::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDForex::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDForex::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDForex::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDForex::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDForex::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDForex::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MDDate)
  return _internal_mddate();
}
inline void MDForex::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDForex::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MDDate)
}

// int32 MDTime = 3;
inline void MDForex::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDForex::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDForex::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MDTime)
  return _internal_mdtime();
}
inline void MDForex::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDForex::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDForex::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDForex::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDForex::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDForex::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDForex::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDForex::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDForex::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDForex::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
}
inline std::string* MDForex::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
  return _s;
}
inline const std::string& MDForex::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDForex::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDForex::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDForex::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDForex::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDForex::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDForex::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDForex::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.securityIDSource)
  return _internal_securityidsource();
}
inline void MDForex::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDForex::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDForex::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDForex::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDForex::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.securityType)
  return _internal_securitytype();
}
inline void MDForex::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDForex::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.securityType)
}

// int64 MaxPx = 8;
inline void MDForex::clear_maxpx() {
  _impl_.maxpx_ = int64_t{0};
}
inline int64_t MDForex::_internal_maxpx() const {
  return _impl_.maxpx_;
}
inline int64_t MDForex::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MaxPx)
  return _internal_maxpx();
}
inline void MDForex::_internal_set_maxpx(int64_t value) {
  
  _impl_.maxpx_ = value;
}
inline void MDForex::set_maxpx(int64_t value) {
  _internal_set_maxpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MaxPx)
}

// int64 MinPx = 9;
inline void MDForex::clear_minpx() {
  _impl_.minpx_ = int64_t{0};
}
inline int64_t MDForex::_internal_minpx() const {
  return _impl_.minpx_;
}
inline int64_t MDForex::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MinPx)
  return _internal_minpx();
}
inline void MDForex::_internal_set_minpx(int64_t value) {
  
  _impl_.minpx_ = value;
}
inline void MDForex::set_minpx(int64_t value) {
  _internal_set_minpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MinPx)
}

// int64 PreClosePx = 10;
inline void MDForex::clear_preclosepx() {
  _impl_.preclosepx_ = int64_t{0};
}
inline int64_t MDForex::_internal_preclosepx() const {
  return _impl_.preclosepx_;
}
inline int64_t MDForex::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.PreClosePx)
  return _internal_preclosepx();
}
inline void MDForex::_internal_set_preclosepx(int64_t value) {
  
  _impl_.preclosepx_ = value;
}
inline void MDForex::set_preclosepx(int64_t value) {
  _internal_set_preclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.PreClosePx)
}

// int64 TotalVolumeTrade = 11;
inline void MDForex::clear_totalvolumetrade() {
  _impl_.totalvolumetrade_ = int64_t{0};
}
inline int64_t MDForex::_internal_totalvolumetrade() const {
  return _impl_.totalvolumetrade_;
}
inline int64_t MDForex::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.TotalVolumeTrade)
  return _internal_totalvolumetrade();
}
inline void MDForex::_internal_set_totalvolumetrade(int64_t value) {
  
  _impl_.totalvolumetrade_ = value;
}
inline void MDForex::set_totalvolumetrade(int64_t value) {
  _internal_set_totalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.TotalVolumeTrade)
}

// int64 TotalValueTrade = 12;
inline void MDForex::clear_totalvaluetrade() {
  _impl_.totalvaluetrade_ = int64_t{0};
}
inline int64_t MDForex::_internal_totalvaluetrade() const {
  return _impl_.totalvaluetrade_;
}
inline int64_t MDForex::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.TotalValueTrade)
  return _internal_totalvaluetrade();
}
inline void MDForex::_internal_set_totalvaluetrade(int64_t value) {
  
  _impl_.totalvaluetrade_ = value;
}
inline void MDForex::set_totalvaluetrade(int64_t value) {
  _internal_set_totalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.TotalValueTrade)
}

// int64 LastPx = 13;
inline void MDForex::clear_lastpx() {
  _impl_.lastpx_ = int64_t{0};
}
inline int64_t MDForex::_internal_lastpx() const {
  return _impl_.lastpx_;
}
inline int64_t MDForex::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.LastPx)
  return _internal_lastpx();
}
inline void MDForex::_internal_set_lastpx(int64_t value) {
  
  _impl_.lastpx_ = value;
}
inline void MDForex::set_lastpx(int64_t value) {
  _internal_set_lastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.LastPx)
}

// int64 OpenPx = 14;
inline void MDForex::clear_openpx() {
  _impl_.openpx_ = int64_t{0};
}
inline int64_t MDForex::_internal_openpx() const {
  return _impl_.openpx_;
}
inline int64_t MDForex::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.OpenPx)
  return _internal_openpx();
}
inline void MDForex::_internal_set_openpx(int64_t value) {
  
  _impl_.openpx_ = value;
}
inline void MDForex::set_openpx(int64_t value) {
  _internal_set_openpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.OpenPx)
}

// int64 ClosePx = 15;
inline void MDForex::clear_closepx() {
  _impl_.closepx_ = int64_t{0};
}
inline int64_t MDForex::_internal_closepx() const {
  return _impl_.closepx_;
}
inline int64_t MDForex::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.ClosePx)
  return _internal_closepx();
}
inline void MDForex::_internal_set_closepx(int64_t value) {
  
  _impl_.closepx_ = value;
}
inline void MDForex::set_closepx(int64_t value) {
  _internal_set_closepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.ClosePx)
}

// int64 HighPx = 16;
inline void MDForex::clear_highpx() {
  _impl_.highpx_ = int64_t{0};
}
inline int64_t MDForex::_internal_highpx() const {
  return _impl_.highpx_;
}
inline int64_t MDForex::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.HighPx)
  return _internal_highpx();
}
inline void MDForex::_internal_set_highpx(int64_t value) {
  
  _impl_.highpx_ = value;
}
inline void MDForex::set_highpx(int64_t value) {
  _internal_set_highpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.HighPx)
}

// int64 LowPx = 17;
inline void MDForex::clear_lowpx() {
  _impl_.lowpx_ = int64_t{0};
}
inline int64_t MDForex::_internal_lowpx() const {
  return _impl_.lowpx_;
}
inline int64_t MDForex::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.LowPx)
  return _internal_lowpx();
}
inline void MDForex::_internal_set_lowpx(int64_t value) {
  
  _impl_.lowpx_ = value;
}
inline void MDForex::set_lowpx(int64_t value) {
  _internal_set_lowpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.LowPx)
}

// int32 ExchangeDate = 18;
inline void MDForex::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDForex::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDForex::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDForex::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDForex::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.ExchangeDate)
}

// int32 ExchangeTime = 19;
inline void MDForex::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDForex::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDForex::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDForex::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDForex::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.ExchangeTime)
}

// repeated int64 BuyPriceQueue = 51 [packed = true];
inline int MDForex::_internal_buypricequeue_size() const {
  return _impl_.buypricequeue_.size();
}
inline int MDForex::buypricequeue_size() const {
  return _internal_buypricequeue_size();
}
inline void MDForex::clear_buypricequeue() {
  _impl_.buypricequeue_.Clear();
}
inline int64_t MDForex::_internal_buypricequeue(int index) const {
  return _impl_.buypricequeue_.Get(index);
}
inline int64_t MDForex::buypricequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
  return _internal_buypricequeue(index);
}
inline void MDForex::set_buypricequeue(int index, int64_t value) {
  _impl_.buypricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
}
inline void MDForex::_internal_add_buypricequeue(int64_t value) {
  _impl_.buypricequeue_.Add(value);
}
inline void MDForex::add_buypricequeue(int64_t value) {
  _internal_add_buypricequeue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::_internal_buypricequeue() const {
  return _impl_.buypricequeue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::buypricequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
  return _internal_buypricequeue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::_internal_mutable_buypricequeue() {
  return &_impl_.buypricequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::mutable_buypricequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
  return _internal_mutable_buypricequeue();
}

// repeated int64 BuyOrderQtyQueue = 52 [packed = true];
inline int MDForex::_internal_buyorderqtyqueue_size() const {
  return _impl_.buyorderqtyqueue_.size();
}
inline int MDForex::buyorderqtyqueue_size() const {
  return _internal_buyorderqtyqueue_size();
}
inline void MDForex::clear_buyorderqtyqueue() {
  _impl_.buyorderqtyqueue_.Clear();
}
inline int64_t MDForex::_internal_buyorderqtyqueue(int index) const {
  return _impl_.buyorderqtyqueue_.Get(index);
}
inline int64_t MDForex::buyorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
  return _internal_buyorderqtyqueue(index);
}
inline void MDForex::set_buyorderqtyqueue(int index, int64_t value) {
  _impl_.buyorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
}
inline void MDForex::_internal_add_buyorderqtyqueue(int64_t value) {
  _impl_.buyorderqtyqueue_.Add(value);
}
inline void MDForex::add_buyorderqtyqueue(int64_t value) {
  _internal_add_buyorderqtyqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::_internal_buyorderqtyqueue() const {
  return _impl_.buyorderqtyqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::buyorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
  return _internal_buyorderqtyqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::_internal_mutable_buyorderqtyqueue() {
  return &_impl_.buyorderqtyqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::mutable_buyorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
  return _internal_mutable_buyorderqtyqueue();
}

// repeated int64 SellPriceQueue = 53 [packed = true];
inline int MDForex::_internal_sellpricequeue_size() const {
  return _impl_.sellpricequeue_.size();
}
inline int MDForex::sellpricequeue_size() const {
  return _internal_sellpricequeue_size();
}
inline void MDForex::clear_sellpricequeue() {
  _impl_.sellpricequeue_.Clear();
}
inline int64_t MDForex::_internal_sellpricequeue(int index) const {
  return _impl_.sellpricequeue_.Get(index);
}
inline int64_t MDForex::sellpricequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
  return _internal_sellpricequeue(index);
}
inline void MDForex::set_sellpricequeue(int index, int64_t value) {
  _impl_.sellpricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
}
inline void MDForex::_internal_add_sellpricequeue(int64_t value) {
  _impl_.sellpricequeue_.Add(value);
}
inline void MDForex::add_sellpricequeue(int64_t value) {
  _internal_add_sellpricequeue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::_internal_sellpricequeue() const {
  return _impl_.sellpricequeue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::sellpricequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
  return _internal_sellpricequeue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::_internal_mutable_sellpricequeue() {
  return &_impl_.sellpricequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::mutable_sellpricequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
  return _internal_mutable_sellpricequeue();
}

// repeated int64 SellOrderQtyQueue = 54 [packed = true];
inline int MDForex::_internal_sellorderqtyqueue_size() const {
  return _impl_.sellorderqtyqueue_.size();
}
inline int MDForex::sellorderqtyqueue_size() const {
  return _internal_sellorderqtyqueue_size();
}
inline void MDForex::clear_sellorderqtyqueue() {
  _impl_.sellorderqtyqueue_.Clear();
}
inline int64_t MDForex::_internal_sellorderqtyqueue(int index) const {
  return _impl_.sellorderqtyqueue_.Get(index);
}
inline int64_t MDForex::sellorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
  return _internal_sellorderqtyqueue(index);
}
inline void MDForex::set_sellorderqtyqueue(int index, int64_t value) {
  _impl_.sellorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
}
inline void MDForex::_internal_add_sellorderqtyqueue(int64_t value) {
  _impl_.sellorderqtyqueue_.Add(value);
}
inline void MDForex::add_sellorderqtyqueue(int64_t value) {
  _internal_add_sellorderqtyqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::_internal_sellorderqtyqueue() const {
  return _impl_.sellorderqtyqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::sellorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
  return _internal_sellorderqtyqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::_internal_mutable_sellorderqtyqueue() {
  return &_impl_.sellorderqtyqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::mutable_sellorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
  return _internal_mutable_sellorderqtyqueue();
}

// repeated int64 BuyOrderQueue = 55 [packed = true];
inline int MDForex::_internal_buyorderqueue_size() const {
  return _impl_.buyorderqueue_.size();
}
inline int MDForex::buyorderqueue_size() const {
  return _internal_buyorderqueue_size();
}
inline void MDForex::clear_buyorderqueue() {
  _impl_.buyorderqueue_.Clear();
}
inline int64_t MDForex::_internal_buyorderqueue(int index) const {
  return _impl_.buyorderqueue_.Get(index);
}
inline int64_t MDForex::buyorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
  return _internal_buyorderqueue(index);
}
inline void MDForex::set_buyorderqueue(int index, int64_t value) {
  _impl_.buyorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
}
inline void MDForex::_internal_add_buyorderqueue(int64_t value) {
  _impl_.buyorderqueue_.Add(value);
}
inline void MDForex::add_buyorderqueue(int64_t value) {
  _internal_add_buyorderqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::_internal_buyorderqueue() const {
  return _impl_.buyorderqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::buyorderqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
  return _internal_buyorderqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::_internal_mutable_buyorderqueue() {
  return &_impl_.buyorderqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::mutable_buyorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
  return _internal_mutable_buyorderqueue();
}

// repeated int64 SellOrderQueue = 56 [packed = true];
inline int MDForex::_internal_sellorderqueue_size() const {
  return _impl_.sellorderqueue_.size();
}
inline int MDForex::sellorderqueue_size() const {
  return _internal_sellorderqueue_size();
}
inline void MDForex::clear_sellorderqueue() {
  _impl_.sellorderqueue_.Clear();
}
inline int64_t MDForex::_internal_sellorderqueue(int index) const {
  return _impl_.sellorderqueue_.Get(index);
}
inline int64_t MDForex::sellorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
  return _internal_sellorderqueue(index);
}
inline void MDForex::set_sellorderqueue(int index, int64_t value) {
  _impl_.sellorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
}
inline void MDForex::_internal_add_sellorderqueue(int64_t value) {
  _impl_.sellorderqueue_.Add(value);
}
inline void MDForex::add_sellorderqueue(int64_t value) {
  _internal_add_sellorderqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::_internal_sellorderqueue() const {
  return _impl_.sellorderqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::sellorderqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
  return _internal_sellorderqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::_internal_mutable_sellorderqueue() {
  return &_impl_.sellorderqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::mutable_sellorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
  return _internal_mutable_sellorderqueue();
}

// repeated int64 BuyNumOrdersQueue = 57 [packed = true];
inline int MDForex::_internal_buynumordersqueue_size() const {
  return _impl_.buynumordersqueue_.size();
}
inline int MDForex::buynumordersqueue_size() const {
  return _internal_buynumordersqueue_size();
}
inline void MDForex::clear_buynumordersqueue() {
  _impl_.buynumordersqueue_.Clear();
}
inline int64_t MDForex::_internal_buynumordersqueue(int index) const {
  return _impl_.buynumordersqueue_.Get(index);
}
inline int64_t MDForex::buynumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
  return _internal_buynumordersqueue(index);
}
inline void MDForex::set_buynumordersqueue(int index, int64_t value) {
  _impl_.buynumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
}
inline void MDForex::_internal_add_buynumordersqueue(int64_t value) {
  _impl_.buynumordersqueue_.Add(value);
}
inline void MDForex::add_buynumordersqueue(int64_t value) {
  _internal_add_buynumordersqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::_internal_buynumordersqueue() const {
  return _impl_.buynumordersqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::buynumordersqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
  return _internal_buynumordersqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::_internal_mutable_buynumordersqueue() {
  return &_impl_.buynumordersqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::mutable_buynumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
  return _internal_mutable_buynumordersqueue();
}

// repeated int64 SellNumOrdersQueue = 58 [packed = true];
inline int MDForex::_internal_sellnumordersqueue_size() const {
  return _impl_.sellnumordersqueue_.size();
}
inline int MDForex::sellnumordersqueue_size() const {
  return _internal_sellnumordersqueue_size();
}
inline void MDForex::clear_sellnumordersqueue() {
  _impl_.sellnumordersqueue_.Clear();
}
inline int64_t MDForex::_internal_sellnumordersqueue(int index) const {
  return _impl_.sellnumordersqueue_.Get(index);
}
inline int64_t MDForex::sellnumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
  return _internal_sellnumordersqueue(index);
}
inline void MDForex::set_sellnumordersqueue(int index, int64_t value) {
  _impl_.sellnumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
}
inline void MDForex::_internal_add_sellnumordersqueue(int64_t value) {
  _impl_.sellnumordersqueue_.Add(value);
}
inline void MDForex::add_sellnumordersqueue(int64_t value) {
  _internal_add_sellnumordersqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::_internal_sellnumordersqueue() const {
  return _impl_.sellnumordersqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDForex::sellnumordersqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
  return _internal_sellnumordersqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::_internal_mutable_sellnumordersqueue() {
  return &_impl_.sellnumordersqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDForex::mutable_sellnumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
  return _internal_mutable_sellnumordersqueue();
}

// int32 DataMultiplePowerOf10 = 59;
inline void MDForex::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDForex::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDForex::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDForex::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDForex::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.DataMultiplePowerOf10)
}

// int64 MidPx = 60;
inline void MDForex::clear_midpx() {
  _impl_.midpx_ = int64_t{0};
}
inline int64_t MDForex::_internal_midpx() const {
  return _impl_.midpx_;
}
inline int64_t MDForex::midpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MidPx)
  return _internal_midpx();
}
inline void MDForex::_internal_set_midpx(int64_t value) {
  
  _impl_.midpx_ = value;
}
inline void MDForex::set_midpx(int64_t value) {
  _internal_set_midpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MidPx)
}

// string BuyCurrency = 61;
inline void MDForex::clear_buycurrency() {
  _impl_.buycurrency_.ClearToEmpty();
}
inline const std::string& MDForex::buycurrency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyCurrency)
  return _internal_buycurrency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDForex::set_buycurrency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buycurrency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyCurrency)
}
inline std::string* MDForex::mutable_buycurrency() {
  std::string* _s = _internal_mutable_buycurrency();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDForex.BuyCurrency)
  return _s;
}
inline const std::string& MDForex::_internal_buycurrency() const {
  return _impl_.buycurrency_.Get();
}
inline void MDForex::_internal_set_buycurrency(const std::string& value) {
  
  _impl_.buycurrency_.Set(value, GetArenaForAllocation());
}
inline std::string* MDForex::_internal_mutable_buycurrency() {
  
  return _impl_.buycurrency_.Mutable(GetArenaForAllocation());
}
inline std::string* MDForex::release_buycurrency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDForex.BuyCurrency)
  return _impl_.buycurrency_.Release();
}
inline void MDForex::set_allocated_buycurrency(std::string* buycurrency) {
  if (buycurrency != nullptr) {
    
  } else {
    
  }
  _impl_.buycurrency_.SetAllocated(buycurrency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buycurrency_.IsDefault()) {
    _impl_.buycurrency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDForex.BuyCurrency)
}

// string SellCurrency = 62;
inline void MDForex::clear_sellcurrency() {
  _impl_.sellcurrency_.ClearToEmpty();
}
inline const std::string& MDForex::sellcurrency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellCurrency)
  return _internal_sellcurrency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDForex::set_sellcurrency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sellcurrency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellCurrency)
}
inline std::string* MDForex::mutable_sellcurrency() {
  std::string* _s = _internal_mutable_sellcurrency();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDForex.SellCurrency)
  return _s;
}
inline const std::string& MDForex::_internal_sellcurrency() const {
  return _impl_.sellcurrency_.Get();
}
inline void MDForex::_internal_set_sellcurrency(const std::string& value) {
  
  _impl_.sellcurrency_.Set(value, GetArenaForAllocation());
}
inline std::string* MDForex::_internal_mutable_sellcurrency() {
  
  return _impl_.sellcurrency_.Mutable(GetArenaForAllocation());
}
inline std::string* MDForex::release_sellcurrency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDForex.SellCurrency)
  return _impl_.sellcurrency_.Release();
}
inline void MDForex::set_allocated_sellcurrency(std::string* sellcurrency) {
  if (sellcurrency != nullptr) {
    
  } else {
    
  }
  _impl_.sellcurrency_.SetAllocated(sellcurrency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sellcurrency_.IsDefault()) {
    _impl_.sellcurrency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDForex.SellCurrency)
}

// int32 Tenor = 63;
inline void MDForex::clear_tenor() {
  _impl_.tenor_ = 0;
}
inline int32_t MDForex::_internal_tenor() const {
  return _impl_.tenor_;
}
inline int32_t MDForex::tenor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.Tenor)
  return _internal_tenor();
}
inline void MDForex::_internal_set_tenor(int32_t value) {
  
  _impl_.tenor_ = value;
}
inline void MDForex::set_tenor(int32_t value) {
  _internal_set_tenor(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.Tenor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDForex_2eproto
