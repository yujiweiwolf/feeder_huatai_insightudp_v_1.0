// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDETFBasicInfo.proto

#include "MDETFBasicInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDETFBasicInfo::MDETFBasicInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.etfcomponents_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creationid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creationsymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redemptionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redemptionsymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creationredemptioncapitalid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creationredemptioncapitalsymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crosssourcecapitalid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crosssourcecapitalsymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fundmanagementcompany_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.underlyingsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingday_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pretradingday_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.formersymbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.creationredemptionunit_)*/0
  , /*decltype(_impl_.estimatecashcomponent_)*/0
  , /*decltype(_impl_.maxcashratio_)*/0
  , /*decltype(_impl_.recordnum_)*/int64_t{0}
  , /*decltype(_impl_.underlyingsecurityidsource_)*/0
  , /*decltype(_impl_.ispublish_)*/false
  , /*decltype(_impl_.isallowcreation_)*/false
  , /*decltype(_impl_.isallowredemption_)*/false
  , /*decltype(_impl_.crossmarket_)*/false
  , /*decltype(_impl_.cashcomponent_)*/0
  , /*decltype(_impl_.navpercu_)*/0
  , /*decltype(_impl_.nav_)*/0
  , /*decltype(_impl_.dividendpercu_)*/0
  , /*decltype(_impl_.creationlimit_)*/0
  , /*decltype(_impl_.redemptionlimit_)*/0
  , /*decltype(_impl_.creationlimitperuser_)*/0
  , /*decltype(_impl_.redemptionlimitperuser_)*/0
  , /*decltype(_impl_.netcreationlimit_)*/0
  , /*decltype(_impl_.netredemptionlimit_)*/0
  , /*decltype(_impl_.netcreationlimitperuser_)*/0
  , /*decltype(_impl_.netredemptionlimitperuser_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDETFBasicInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDETFBasicInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDETFBasicInfoDefaultTypeInternal() {}
  union {
    MDETFBasicInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDETFBasicInfoDefaultTypeInternal _MDETFBasicInfo_default_instance_;
PROTOBUF_CONSTEXPR MDETFComponentDetail::MDETFComponentDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.componentshare_)*/0
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.substituteflag_)*/0
  , /*decltype(_impl_.premiumratio_)*/0
  , /*decltype(_impl_.creationcashsubstitute_)*/0
  , /*decltype(_impl_.redemptioncashsubstitute_)*/0
  , /*decltype(_impl_.totalcashsubstitute_)*/0
  , /*decltype(_impl_.discountratio_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDETFComponentDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDETFComponentDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDETFComponentDetailDefaultTypeInternal() {}
  union {
    MDETFComponentDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDETFComponentDetailDefaultTypeInternal _MDETFComponentDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDETFBasicInfo_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_MDETFBasicInfo_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDETFBasicInfo_2eproto = nullptr;

const uint32_t TableStruct_MDETFBasicInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.securityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.creationid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.creationsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.redemptionid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.redemptionsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.creationredemptioncapitalid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.creationredemptioncapitalsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.crosssourcecapitalid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.crosssourcecapitalsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.fundmanagementcompany_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.underlyingsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.underlyingsecurityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.creationredemptionunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.estimatecashcomponent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.maxcashratio_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.ispublish_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.isallowcreation_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.isallowredemption_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.recordnum_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.tradingday_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.pretradingday_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.cashcomponent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.navpercu_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.nav_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.dividendpercu_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.creationlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.redemptionlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.creationlimitperuser_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.redemptionlimitperuser_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.netcreationlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.netredemptionlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.netcreationlimitperuser_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.netredemptionlimitperuser_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.etfcomponents_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.formersymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.crossmarket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _impl_.datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.securityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.componentshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.substituteflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.premiumratio_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.creationcashsubstitute_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.redemptioncashsubstitute_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.totalcashsubstitute_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _impl_.discountratio_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDETFBasicInfo)},
  { 49, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDETFComponentDetail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDETFBasicInfo_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDETFComponentDetail_default_instance_._instance,
};

const char descriptor_table_protodef_MDETFBasicInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024MDETFBasicInfo.proto\022\032com.htsc.mdc.ins"
  "ight.model\032\027ESecurityIDSource.proto\032\023ESe"
  "curityType.proto\"\372\t\n\016MDETFBasicInfo\022\026\n\016H"
  "TSCSecurityID\030\001 \001(\t\022\022\n\nSecurityID\030\002 \001(\t\022"
  "\016\n\006Symbol\030\003 \001(\t\022\016\n\006MDDate\030\004 \001(\005\022\016\n\006MDTim"
  "e\030\005 \001(\005\022\?\n\020securityIDSource\030\006 \001(\0162%.com."
  "htsc.mdc.model.ESecurityIDSource\0227\n\014secu"
  "rityType\030\007 \001(\0162!.com.htsc.mdc.model.ESec"
  "urityType\022\022\n\nCreationID\030\013 \001(\t\022\026\n\016Creatio"
  "nSymbol\030\014 \001(\t\022\024\n\014RedemptionID\030\r \001(\t\022\030\n\020R"
  "edemptionSymbol\030\016 \001(\t\022#\n\033CreationRedempt"
  "ionCapitalID\030\017 \001(\t\022\'\n\037CreationRedemption"
  "CapitalSymbol\030\020 \001(\t\022\034\n\024CrossSourceCapita"
  "lID\030\021 \001(\t\022 \n\030CrossSourceCapitalSymbol\030\022 "
  "\001(\t\022\035\n\025FundManagementCompany\030\023 \001(\t\022\034\n\024Un"
  "derlyingSecurityID\030\024 \001(\t\022I\n\032UnderlyingSe"
  "curityIDSource\030\025 \001(\0162%.com.htsc.mdc.mode"
  "l.ESecurityIDSource\022\036\n\026CreationRedemptio"
  "nUnit\030\026 \001(\001\022\035\n\025EstimateCashComponent\030\027 \001"
  "(\001\022\024\n\014MaxCashRatio\030\030 \001(\001\022\021\n\tIsPublish\030\031 "
  "\001(\010\022\027\n\017IsAllowCreation\030\032 \001(\010\022\031\n\021IsAllowR"
  "edemption\030\033 \001(\010\022\021\n\tRecordNum\030\034 \001(\003\022\022\n\nTr"
  "adingDay\030\035 \001(\t\022\025\n\rPreTradingDay\030\036 \001(\t\022\025\n"
  "\rCashComponent\030\037 \001(\001\022\020\n\010NAVperCU\030  \001(\001\022\013"
  "\n\003NAV\030! \001(\001\022\025\n\rDividendPerCU\030\" \001(\001\022\025\n\rCr"
  "eationLimit\030# \001(\001\022\027\n\017RedemptionLimit\030$ \001"
  "(\001\022\034\n\024CreationLimitPerUser\030% \001(\001\022\036\n\026Rede"
  "mptionLimitPerUser\030& \001(\001\022\030\n\020NetCreationL"
  "imit\030\' \001(\001\022\032\n\022NetRedemptionLimit\030( \001(\001\022\037"
  "\n\027NetCreationLimitPerUser\030) \001(\001\022!\n\031NetRe"
  "demptionLimitPerUser\030* \001(\001\022G\n\rETFCompone"
  "nts\030+ \003(\01320.com.htsc.mdc.insight.model.M"
  "DETFComponentDetail\022\024\n\014FormerSymbol\030, \001("
  "\t\022\023\n\013CrossMarket\030- \001(\010\022\035\n\025DataMultiplePo"
  "werOf10\030. \001(\005\"\200\003\n\024MDETFComponentDetail\022\026"
  "\n\016HTSCSecurityID\030\001 \001(\t\022\022\n\nSecurityID\030\002 \001"
  "(\t\022\016\n\006Symbol\030\003 \001(\t\022\?\n\020securityIDSource\030\004"
  " \001(\0162%.com.htsc.mdc.model.ESecurityIDSou"
  "rce\022\026\n\016ComponentShare\030\005 \001(\001\022G\n\016Substitut"
  "eFlag\030\006 \001(\0162/.com.htsc.mdc.insight.model"
  ".MDETFSubstituteFlag\022\024\n\014PremiumRatio\030\007 \001"
  "(\001\022\036\n\026CreationCashSubstitute\030\010 \001(\001\022 \n\030Re"
  "demptionCashSubstitute\030\t \001(\001\022\033\n\023TotalCas"
  "hSubstitute\030\n \001(\001\022\025\n\rDiscountRatio\030\013 \001(\001"
  "*v\n\023MDETFSubstituteFlag\022\033\n\027DEFAULT_SUBST"
  "ITUTE_FLAG\020\000\022\027\n\023DISALLOW_SUBSTITUTE\020\001\022\024\n"
  "\020ALLOW_SUBSTITUTE\020\002\022\023\n\017MUST_SUBSTITUTE\020\003"
  "B7\n\032com.htsc.mdc.insight.modelB\024MDETFBas"
  "icInfoProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDETFBasicInfo_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDETFBasicInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDETFBasicInfo_2eproto = {
    false, false, 1945, descriptor_table_protodef_MDETFBasicInfo_2eproto,
    "MDETFBasicInfo.proto",
    &descriptor_table_MDETFBasicInfo_2eproto_once, descriptor_table_MDETFBasicInfo_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_MDETFBasicInfo_2eproto::offsets,
    file_level_metadata_MDETFBasicInfo_2eproto, file_level_enum_descriptors_MDETFBasicInfo_2eproto,
    file_level_service_descriptors_MDETFBasicInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDETFBasicInfo_2eproto_getter() {
  return &descriptor_table_MDETFBasicInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDETFBasicInfo_2eproto(&descriptor_table_MDETFBasicInfo_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MDETFSubstituteFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDETFBasicInfo_2eproto);
  return file_level_enum_descriptors_MDETFBasicInfo_2eproto[0];
}
bool MDETFSubstituteFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MDETFBasicInfo::_Internal {
 public:
};

MDETFBasicInfo::MDETFBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDETFBasicInfo)
}
MDETFBasicInfo::MDETFBasicInfo(const MDETFBasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDETFBasicInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.etfcomponents_){from._impl_.etfcomponents_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securityid_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.creationid_){}
    , decltype(_impl_.creationsymbol_){}
    , decltype(_impl_.redemptionid_){}
    , decltype(_impl_.redemptionsymbol_){}
    , decltype(_impl_.creationredemptioncapitalid_){}
    , decltype(_impl_.creationredemptioncapitalsymbol_){}
    , decltype(_impl_.crosssourcecapitalid_){}
    , decltype(_impl_.crosssourcecapitalsymbol_){}
    , decltype(_impl_.fundmanagementcompany_){}
    , decltype(_impl_.underlyingsecurityid_){}
    , decltype(_impl_.tradingday_){}
    , decltype(_impl_.pretradingday_){}
    , decltype(_impl_.formersymbol_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.creationredemptionunit_){}
    , decltype(_impl_.estimatecashcomponent_){}
    , decltype(_impl_.maxcashratio_){}
    , decltype(_impl_.recordnum_){}
    , decltype(_impl_.underlyingsecurityidsource_){}
    , decltype(_impl_.ispublish_){}
    , decltype(_impl_.isallowcreation_){}
    , decltype(_impl_.isallowredemption_){}
    , decltype(_impl_.crossmarket_){}
    , decltype(_impl_.cashcomponent_){}
    , decltype(_impl_.navpercu_){}
    , decltype(_impl_.nav_){}
    , decltype(_impl_.dividendpercu_){}
    , decltype(_impl_.creationlimit_){}
    , decltype(_impl_.redemptionlimit_){}
    , decltype(_impl_.creationlimitperuser_){}
    , decltype(_impl_.redemptionlimitperuser_){}
    , decltype(_impl_.netcreationlimit_){}
    , decltype(_impl_.netredemptionlimit_){}
    , decltype(_impl_.netcreationlimitperuser_){}
    , decltype(_impl_.netredemptionlimitperuser_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_securityid().empty()) {
    _this->_impl_.securityid_.Set(from._internal_securityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creationid().empty()) {
    _this->_impl_.creationid_.Set(from._internal_creationid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creationsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creationsymbol().empty()) {
    _this->_impl_.creationsymbol_.Set(from._internal_creationsymbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redemptionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redemptionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redemptionid().empty()) {
    _this->_impl_.redemptionid_.Set(from._internal_redemptionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redemptionsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redemptionsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redemptionsymbol().empty()) {
    _this->_impl_.redemptionsymbol_.Set(from._internal_redemptionsymbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creationredemptioncapitalid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationredemptioncapitalid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creationredemptioncapitalid().empty()) {
    _this->_impl_.creationredemptioncapitalid_.Set(from._internal_creationredemptioncapitalid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creationredemptioncapitalsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationredemptioncapitalsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creationredemptioncapitalsymbol().empty()) {
    _this->_impl_.creationredemptioncapitalsymbol_.Set(from._internal_creationredemptioncapitalsymbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.crosssourcecapitalid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crosssourcecapitalid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crosssourcecapitalid().empty()) {
    _this->_impl_.crosssourcecapitalid_.Set(from._internal_crosssourcecapitalid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.crosssourcecapitalsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crosssourcecapitalsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crosssourcecapitalsymbol().empty()) {
    _this->_impl_.crosssourcecapitalsymbol_.Set(from._internal_crosssourcecapitalsymbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fundmanagementcompany_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fundmanagementcompany_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fundmanagementcompany().empty()) {
    _this->_impl_.fundmanagementcompany_.Set(from._internal_fundmanagementcompany(), 
      _this->GetArenaForAllocation());
  }
  _impl_.underlyingsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underlyingsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underlyingsecurityid().empty()) {
    _this->_impl_.underlyingsecurityid_.Set(from._internal_underlyingsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingday_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingday_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingday().empty()) {
    _this->_impl_.tradingday_.Set(from._internal_tradingday(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pretradingday_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pretradingday_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pretradingday().empty()) {
    _this->_impl_.pretradingday_.Set(from._internal_pretradingday(), 
      _this->GetArenaForAllocation());
  }
  _impl_.formersymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formersymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_formersymbol().empty()) {
    _this->_impl_.formersymbol_.Set(from._internal_formersymbol(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDETFBasicInfo)
}

inline void MDETFBasicInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.etfcomponents_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securityid_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.creationid_){}
    , decltype(_impl_.creationsymbol_){}
    , decltype(_impl_.redemptionid_){}
    , decltype(_impl_.redemptionsymbol_){}
    , decltype(_impl_.creationredemptioncapitalid_){}
    , decltype(_impl_.creationredemptioncapitalsymbol_){}
    , decltype(_impl_.crosssourcecapitalid_){}
    , decltype(_impl_.crosssourcecapitalsymbol_){}
    , decltype(_impl_.fundmanagementcompany_){}
    , decltype(_impl_.underlyingsecurityid_){}
    , decltype(_impl_.tradingday_){}
    , decltype(_impl_.pretradingday_){}
    , decltype(_impl_.formersymbol_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.creationredemptionunit_){0}
    , decltype(_impl_.estimatecashcomponent_){0}
    , decltype(_impl_.maxcashratio_){0}
    , decltype(_impl_.recordnum_){int64_t{0}}
    , decltype(_impl_.underlyingsecurityidsource_){0}
    , decltype(_impl_.ispublish_){false}
    , decltype(_impl_.isallowcreation_){false}
    , decltype(_impl_.isallowredemption_){false}
    , decltype(_impl_.crossmarket_){false}
    , decltype(_impl_.cashcomponent_){0}
    , decltype(_impl_.navpercu_){0}
    , decltype(_impl_.nav_){0}
    , decltype(_impl_.dividendpercu_){0}
    , decltype(_impl_.creationlimit_){0}
    , decltype(_impl_.redemptionlimit_){0}
    , decltype(_impl_.creationlimitperuser_){0}
    , decltype(_impl_.redemptionlimitperuser_){0}
    , decltype(_impl_.netcreationlimit_){0}
    , decltype(_impl_.netredemptionlimit_){0}
    , decltype(_impl_.netcreationlimitperuser_){0}
    , decltype(_impl_.netredemptionlimitperuser_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creationsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redemptionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redemptionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redemptionsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redemptionsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creationredemptioncapitalid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationredemptioncapitalid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creationredemptioncapitalsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationredemptioncapitalsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.crosssourcecapitalid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crosssourcecapitalid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.crosssourcecapitalsymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crosssourcecapitalsymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fundmanagementcompany_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fundmanagementcompany_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.underlyingsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underlyingsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingday_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingday_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pretradingday_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pretradingday_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.formersymbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formersymbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDETFBasicInfo::~MDETFBasicInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDETFBasicInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDETFBasicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.etfcomponents_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.securityid_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.creationid_.Destroy();
  _impl_.creationsymbol_.Destroy();
  _impl_.redemptionid_.Destroy();
  _impl_.redemptionsymbol_.Destroy();
  _impl_.creationredemptioncapitalid_.Destroy();
  _impl_.creationredemptioncapitalsymbol_.Destroy();
  _impl_.crosssourcecapitalid_.Destroy();
  _impl_.crosssourcecapitalsymbol_.Destroy();
  _impl_.fundmanagementcompany_.Destroy();
  _impl_.underlyingsecurityid_.Destroy();
  _impl_.tradingday_.Destroy();
  _impl_.pretradingday_.Destroy();
  _impl_.formersymbol_.Destroy();
}

void MDETFBasicInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDETFBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.etfcomponents_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.securityid_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.creationid_.ClearToEmpty();
  _impl_.creationsymbol_.ClearToEmpty();
  _impl_.redemptionid_.ClearToEmpty();
  _impl_.redemptionsymbol_.ClearToEmpty();
  _impl_.creationredemptioncapitalid_.ClearToEmpty();
  _impl_.creationredemptioncapitalsymbol_.ClearToEmpty();
  _impl_.crosssourcecapitalid_.ClearToEmpty();
  _impl_.crosssourcecapitalsymbol_.ClearToEmpty();
  _impl_.fundmanagementcompany_.ClearToEmpty();
  _impl_.underlyingsecurityid_.ClearToEmpty();
  _impl_.tradingday_.ClearToEmpty();
  _impl_.pretradingday_.ClearToEmpty();
  _impl_.formersymbol_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDETFBasicInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string SecurityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_securityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string Symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string CreationID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_creationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID"));
        } else
          goto handle_unusual;
        continue;
      // string CreationSymbol = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_creationsymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol"));
        } else
          goto handle_unusual;
        continue;
      // string RedemptionID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_redemptionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID"));
        } else
          goto handle_unusual;
        continue;
      // string RedemptionSymbol = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_redemptionsymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol"));
        } else
          goto handle_unusual;
        continue;
      // string CreationRedemptionCapitalID = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_creationredemptioncapitalid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID"));
        } else
          goto handle_unusual;
        continue;
      // string CreationRedemptionCapitalSymbol = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_creationredemptioncapitalsymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol"));
        } else
          goto handle_unusual;
        continue;
      // string CrossSourceCapitalID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_crosssourcecapitalid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID"));
        } else
          goto handle_unusual;
        continue;
      // string CrossSourceCapitalSymbol = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_crosssourcecapitalsymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol"));
        } else
          goto handle_unusual;
        continue;
      // string FundManagementCompany = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_fundmanagementcompany();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany"));
        } else
          goto handle_unusual;
        continue;
      // string UnderlyingSecurityID = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_underlyingsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_underlyingsecurityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // double CreationRedemptionUnit = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.creationredemptionunit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double EstimateCashComponent = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.estimatecashcomponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double MaxCashRatio = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.maxcashratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool IsPublish = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.ispublish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsAllowCreation = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.isallowcreation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsAllowRedemption = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.isallowredemption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RecordNum = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.recordnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingDay = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_tradingday();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay"));
        } else
          goto handle_unusual;
        continue;
      // string PreTradingDay = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_pretradingday();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay"));
        } else
          goto handle_unusual;
        continue;
      // double CashComponent = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.cashcomponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double NAVperCU = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.navpercu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double NAV = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.nav_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double DividendPerCU = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.dividendpercu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double CreationLimit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.creationlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double RedemptionLimit = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.redemptionlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double CreationLimitPerUser = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.creationlimitperuser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double RedemptionLimitPerUser = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.redemptionlimitperuser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double NetCreationLimit = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.netcreationlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double NetRedemptionLimit = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.netredemptionlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double NetCreationLimitPerUser = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.netcreationlimitperuser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double NetRedemptionLimitPerUser = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.netredemptionlimitperuser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_etfcomponents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string FormerSymbol = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_formersymbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol"));
        } else
          goto handle_unusual;
        continue;
      // bool CrossMarket = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.crossmarket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDETFBasicInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // string SecurityID = 2;
  if (!this->_internal_securityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_securityid(), target);
  }

  // string Symbol = 3;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // int32 MDDate = 4;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mddate(), target);
  }

  // int32 MDTime = 5;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mdtime(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // string CreationID = 11;
  if (!this->_internal_creationid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creationid().data(), static_cast<int>(this->_internal_creationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_creationid(), target);
  }

  // string CreationSymbol = 12;
  if (!this->_internal_creationsymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creationsymbol().data(), static_cast<int>(this->_internal_creationsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_creationsymbol(), target);
  }

  // string RedemptionID = 13;
  if (!this->_internal_redemptionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redemptionid().data(), static_cast<int>(this->_internal_redemptionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_redemptionid(), target);
  }

  // string RedemptionSymbol = 14;
  if (!this->_internal_redemptionsymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redemptionsymbol().data(), static_cast<int>(this->_internal_redemptionsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_redemptionsymbol(), target);
  }

  // string CreationRedemptionCapitalID = 15;
  if (!this->_internal_creationredemptioncapitalid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creationredemptioncapitalid().data(), static_cast<int>(this->_internal_creationredemptioncapitalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_creationredemptioncapitalid(), target);
  }

  // string CreationRedemptionCapitalSymbol = 16;
  if (!this->_internal_creationredemptioncapitalsymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creationredemptioncapitalsymbol().data(), static_cast<int>(this->_internal_creationredemptioncapitalsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_creationredemptioncapitalsymbol(), target);
  }

  // string CrossSourceCapitalID = 17;
  if (!this->_internal_crosssourcecapitalid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crosssourcecapitalid().data(), static_cast<int>(this->_internal_crosssourcecapitalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_crosssourcecapitalid(), target);
  }

  // string CrossSourceCapitalSymbol = 18;
  if (!this->_internal_crosssourcecapitalsymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crosssourcecapitalsymbol().data(), static_cast<int>(this->_internal_crosssourcecapitalsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_crosssourcecapitalsymbol(), target);
  }

  // string FundManagementCompany = 19;
  if (!this->_internal_fundmanagementcompany().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundmanagementcompany().data(), static_cast<int>(this->_internal_fundmanagementcompany().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_fundmanagementcompany(), target);
  }

  // string UnderlyingSecurityID = 20;
  if (!this->_internal_underlyingsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_underlyingsecurityid().data(), static_cast<int>(this->_internal_underlyingsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_underlyingsecurityid(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
  if (this->_internal_underlyingsecurityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_underlyingsecurityidsource(), target);
  }

  // double CreationRedemptionUnit = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationredemptionunit = this->_internal_creationredemptionunit();
  uint64_t raw_creationredemptionunit;
  memcpy(&raw_creationredemptionunit, &tmp_creationredemptionunit, sizeof(tmp_creationredemptionunit));
  if (raw_creationredemptionunit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_creationredemptionunit(), target);
  }

  // double EstimateCashComponent = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_estimatecashcomponent = this->_internal_estimatecashcomponent();
  uint64_t raw_estimatecashcomponent;
  memcpy(&raw_estimatecashcomponent, &tmp_estimatecashcomponent, sizeof(tmp_estimatecashcomponent));
  if (raw_estimatecashcomponent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_estimatecashcomponent(), target);
  }

  // double MaxCashRatio = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxcashratio = this->_internal_maxcashratio();
  uint64_t raw_maxcashratio;
  memcpy(&raw_maxcashratio, &tmp_maxcashratio, sizeof(tmp_maxcashratio));
  if (raw_maxcashratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_maxcashratio(), target);
  }

  // bool IsPublish = 25;
  if (this->_internal_ispublish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_ispublish(), target);
  }

  // bool IsAllowCreation = 26;
  if (this->_internal_isallowcreation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_isallowcreation(), target);
  }

  // bool IsAllowRedemption = 27;
  if (this->_internal_isallowredemption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_isallowredemption(), target);
  }

  // int64 RecordNum = 28;
  if (this->_internal_recordnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_recordnum(), target);
  }

  // string TradingDay = 29;
  if (!this->_internal_tradingday().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingday().data(), static_cast<int>(this->_internal_tradingday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_tradingday(), target);
  }

  // string PreTradingDay = 30;
  if (!this->_internal_pretradingday().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pretradingday().data(), static_cast<int>(this->_internal_pretradingday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_pretradingday(), target);
  }

  // double CashComponent = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cashcomponent = this->_internal_cashcomponent();
  uint64_t raw_cashcomponent;
  memcpy(&raw_cashcomponent, &tmp_cashcomponent, sizeof(tmp_cashcomponent));
  if (raw_cashcomponent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_cashcomponent(), target);
  }

  // double NAVperCU = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_navpercu = this->_internal_navpercu();
  uint64_t raw_navpercu;
  memcpy(&raw_navpercu, &tmp_navpercu, sizeof(tmp_navpercu));
  if (raw_navpercu != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_navpercu(), target);
  }

  // double NAV = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nav = this->_internal_nav();
  uint64_t raw_nav;
  memcpy(&raw_nav, &tmp_nav, sizeof(tmp_nav));
  if (raw_nav != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_nav(), target);
  }

  // double DividendPerCU = 34;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividendpercu = this->_internal_dividendpercu();
  uint64_t raw_dividendpercu;
  memcpy(&raw_dividendpercu, &tmp_dividendpercu, sizeof(tmp_dividendpercu));
  if (raw_dividendpercu != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(34, this->_internal_dividendpercu(), target);
  }

  // double CreationLimit = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationlimit = this->_internal_creationlimit();
  uint64_t raw_creationlimit;
  memcpy(&raw_creationlimit, &tmp_creationlimit, sizeof(tmp_creationlimit));
  if (raw_creationlimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_creationlimit(), target);
  }

  // double RedemptionLimit = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptionlimit = this->_internal_redemptionlimit();
  uint64_t raw_redemptionlimit;
  memcpy(&raw_redemptionlimit, &tmp_redemptionlimit, sizeof(tmp_redemptionlimit));
  if (raw_redemptionlimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(36, this->_internal_redemptionlimit(), target);
  }

  // double CreationLimitPerUser = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationlimitperuser = this->_internal_creationlimitperuser();
  uint64_t raw_creationlimitperuser;
  memcpy(&raw_creationlimitperuser, &tmp_creationlimitperuser, sizeof(tmp_creationlimitperuser));
  if (raw_creationlimitperuser != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(37, this->_internal_creationlimitperuser(), target);
  }

  // double RedemptionLimitPerUser = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptionlimitperuser = this->_internal_redemptionlimitperuser();
  uint64_t raw_redemptionlimitperuser;
  memcpy(&raw_redemptionlimitperuser, &tmp_redemptionlimitperuser, sizeof(tmp_redemptionlimitperuser));
  if (raw_redemptionlimitperuser != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(38, this->_internal_redemptionlimitperuser(), target);
  }

  // double NetCreationLimit = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netcreationlimit = this->_internal_netcreationlimit();
  uint64_t raw_netcreationlimit;
  memcpy(&raw_netcreationlimit, &tmp_netcreationlimit, sizeof(tmp_netcreationlimit));
  if (raw_netcreationlimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(39, this->_internal_netcreationlimit(), target);
  }

  // double NetRedemptionLimit = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netredemptionlimit = this->_internal_netredemptionlimit();
  uint64_t raw_netredemptionlimit;
  memcpy(&raw_netredemptionlimit, &tmp_netredemptionlimit, sizeof(tmp_netredemptionlimit));
  if (raw_netredemptionlimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(40, this->_internal_netredemptionlimit(), target);
  }

  // double NetCreationLimitPerUser = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netcreationlimitperuser = this->_internal_netcreationlimitperuser();
  uint64_t raw_netcreationlimitperuser;
  memcpy(&raw_netcreationlimitperuser, &tmp_netcreationlimitperuser, sizeof(tmp_netcreationlimitperuser));
  if (raw_netcreationlimitperuser != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(41, this->_internal_netcreationlimitperuser(), target);
  }

  // double NetRedemptionLimitPerUser = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netredemptionlimitperuser = this->_internal_netredemptionlimitperuser();
  uint64_t raw_netredemptionlimitperuser;
  memcpy(&raw_netredemptionlimitperuser, &tmp_netredemptionlimitperuser, sizeof(tmp_netredemptionlimitperuser));
  if (raw_netredemptionlimitperuser != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_netredemptionlimitperuser(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_etfcomponents_size()); i < n; i++) {
    const auto& repfield = this->_internal_etfcomponents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string FormerSymbol = 44;
  if (!this->_internal_formersymbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formersymbol().data(), static_cast<int>(this->_internal_formersymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_formersymbol(), target);
  }

  // bool CrossMarket = 45;
  if (this->_internal_crossmarket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_crossmarket(), target);
  }

  // int32 DataMultiplePowerOf10 = 46;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDETFBasicInfo)
  return target;
}

size_t MDETFBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
  total_size += 2UL * this->_internal_etfcomponents_size();
  for (const auto& msg : this->_impl_.etfcomponents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string SecurityID = 2;
  if (!this->_internal_securityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  // string Symbol = 3;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string CreationID = 11;
  if (!this->_internal_creationid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationid());
  }

  // string CreationSymbol = 12;
  if (!this->_internal_creationsymbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationsymbol());
  }

  // string RedemptionID = 13;
  if (!this->_internal_redemptionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redemptionid());
  }

  // string RedemptionSymbol = 14;
  if (!this->_internal_redemptionsymbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redemptionsymbol());
  }

  // string CreationRedemptionCapitalID = 15;
  if (!this->_internal_creationredemptioncapitalid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationredemptioncapitalid());
  }

  // string CreationRedemptionCapitalSymbol = 16;
  if (!this->_internal_creationredemptioncapitalsymbol().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationredemptioncapitalsymbol());
  }

  // string CrossSourceCapitalID = 17;
  if (!this->_internal_crosssourcecapitalid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crosssourcecapitalid());
  }

  // string CrossSourceCapitalSymbol = 18;
  if (!this->_internal_crosssourcecapitalsymbol().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crosssourcecapitalsymbol());
  }

  // string FundManagementCompany = 19;
  if (!this->_internal_fundmanagementcompany().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fundmanagementcompany());
  }

  // string UnderlyingSecurityID = 20;
  if (!this->_internal_underlyingsecurityid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_underlyingsecurityid());
  }

  // string TradingDay = 29;
  if (!this->_internal_tradingday().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingday());
  }

  // string PreTradingDay = 30;
  if (!this->_internal_pretradingday().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pretradingday());
  }

  // string FormerSymbol = 44;
  if (!this->_internal_formersymbol().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formersymbol());
  }

  // int32 MDDate = 4;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 5;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // double CreationRedemptionUnit = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationredemptionunit = this->_internal_creationredemptionunit();
  uint64_t raw_creationredemptionunit;
  memcpy(&raw_creationredemptionunit, &tmp_creationredemptionunit, sizeof(tmp_creationredemptionunit));
  if (raw_creationredemptionunit != 0) {
    total_size += 2 + 8;
  }

  // double EstimateCashComponent = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_estimatecashcomponent = this->_internal_estimatecashcomponent();
  uint64_t raw_estimatecashcomponent;
  memcpy(&raw_estimatecashcomponent, &tmp_estimatecashcomponent, sizeof(tmp_estimatecashcomponent));
  if (raw_estimatecashcomponent != 0) {
    total_size += 2 + 8;
  }

  // double MaxCashRatio = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxcashratio = this->_internal_maxcashratio();
  uint64_t raw_maxcashratio;
  memcpy(&raw_maxcashratio, &tmp_maxcashratio, sizeof(tmp_maxcashratio));
  if (raw_maxcashratio != 0) {
    total_size += 2 + 8;
  }

  // int64 RecordNum = 28;
  if (this->_internal_recordnum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_recordnum());
  }

  // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
  if (this->_internal_underlyingsecurityidsource() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_underlyingsecurityidsource());
  }

  // bool IsPublish = 25;
  if (this->_internal_ispublish() != 0) {
    total_size += 2 + 1;
  }

  // bool IsAllowCreation = 26;
  if (this->_internal_isallowcreation() != 0) {
    total_size += 2 + 1;
  }

  // bool IsAllowRedemption = 27;
  if (this->_internal_isallowredemption() != 0) {
    total_size += 2 + 1;
  }

  // bool CrossMarket = 45;
  if (this->_internal_crossmarket() != 0) {
    total_size += 2 + 1;
  }

  // double CashComponent = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cashcomponent = this->_internal_cashcomponent();
  uint64_t raw_cashcomponent;
  memcpy(&raw_cashcomponent, &tmp_cashcomponent, sizeof(tmp_cashcomponent));
  if (raw_cashcomponent != 0) {
    total_size += 2 + 8;
  }

  // double NAVperCU = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_navpercu = this->_internal_navpercu();
  uint64_t raw_navpercu;
  memcpy(&raw_navpercu, &tmp_navpercu, sizeof(tmp_navpercu));
  if (raw_navpercu != 0) {
    total_size += 2 + 8;
  }

  // double NAV = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nav = this->_internal_nav();
  uint64_t raw_nav;
  memcpy(&raw_nav, &tmp_nav, sizeof(tmp_nav));
  if (raw_nav != 0) {
    total_size += 2 + 8;
  }

  // double DividendPerCU = 34;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividendpercu = this->_internal_dividendpercu();
  uint64_t raw_dividendpercu;
  memcpy(&raw_dividendpercu, &tmp_dividendpercu, sizeof(tmp_dividendpercu));
  if (raw_dividendpercu != 0) {
    total_size += 2 + 8;
  }

  // double CreationLimit = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationlimit = this->_internal_creationlimit();
  uint64_t raw_creationlimit;
  memcpy(&raw_creationlimit, &tmp_creationlimit, sizeof(tmp_creationlimit));
  if (raw_creationlimit != 0) {
    total_size += 2 + 8;
  }

  // double RedemptionLimit = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptionlimit = this->_internal_redemptionlimit();
  uint64_t raw_redemptionlimit;
  memcpy(&raw_redemptionlimit, &tmp_redemptionlimit, sizeof(tmp_redemptionlimit));
  if (raw_redemptionlimit != 0) {
    total_size += 2 + 8;
  }

  // double CreationLimitPerUser = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationlimitperuser = this->_internal_creationlimitperuser();
  uint64_t raw_creationlimitperuser;
  memcpy(&raw_creationlimitperuser, &tmp_creationlimitperuser, sizeof(tmp_creationlimitperuser));
  if (raw_creationlimitperuser != 0) {
    total_size += 2 + 8;
  }

  // double RedemptionLimitPerUser = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptionlimitperuser = this->_internal_redemptionlimitperuser();
  uint64_t raw_redemptionlimitperuser;
  memcpy(&raw_redemptionlimitperuser, &tmp_redemptionlimitperuser, sizeof(tmp_redemptionlimitperuser));
  if (raw_redemptionlimitperuser != 0) {
    total_size += 2 + 8;
  }

  // double NetCreationLimit = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netcreationlimit = this->_internal_netcreationlimit();
  uint64_t raw_netcreationlimit;
  memcpy(&raw_netcreationlimit, &tmp_netcreationlimit, sizeof(tmp_netcreationlimit));
  if (raw_netcreationlimit != 0) {
    total_size += 2 + 8;
  }

  // double NetRedemptionLimit = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netredemptionlimit = this->_internal_netredemptionlimit();
  uint64_t raw_netredemptionlimit;
  memcpy(&raw_netredemptionlimit, &tmp_netredemptionlimit, sizeof(tmp_netredemptionlimit));
  if (raw_netredemptionlimit != 0) {
    total_size += 2 + 8;
  }

  // double NetCreationLimitPerUser = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netcreationlimitperuser = this->_internal_netcreationlimitperuser();
  uint64_t raw_netcreationlimitperuser;
  memcpy(&raw_netcreationlimitperuser, &tmp_netcreationlimitperuser, sizeof(tmp_netcreationlimitperuser));
  if (raw_netcreationlimitperuser != 0) {
    total_size += 2 + 8;
  }

  // double NetRedemptionLimitPerUser = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netredemptionlimitperuser = this->_internal_netredemptionlimitperuser();
  uint64_t raw_netredemptionlimitperuser;
  memcpy(&raw_netredemptionlimitperuser, &tmp_netredemptionlimitperuser, sizeof(tmp_netredemptionlimitperuser));
  if (raw_netredemptionlimitperuser != 0) {
    total_size += 2 + 8;
  }

  // int32 DataMultiplePowerOf10 = 46;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDETFBasicInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDETFBasicInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDETFBasicInfo::GetClassData() const { return &_class_data_; }


void MDETFBasicInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDETFBasicInfo*>(&to_msg);
  auto& from = static_cast<const MDETFBasicInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.etfcomponents_.MergeFrom(from._impl_.etfcomponents_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_securityid().empty()) {
    _this->_internal_set_securityid(from._internal_securityid());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_creationid().empty()) {
    _this->_internal_set_creationid(from._internal_creationid());
  }
  if (!from._internal_creationsymbol().empty()) {
    _this->_internal_set_creationsymbol(from._internal_creationsymbol());
  }
  if (!from._internal_redemptionid().empty()) {
    _this->_internal_set_redemptionid(from._internal_redemptionid());
  }
  if (!from._internal_redemptionsymbol().empty()) {
    _this->_internal_set_redemptionsymbol(from._internal_redemptionsymbol());
  }
  if (!from._internal_creationredemptioncapitalid().empty()) {
    _this->_internal_set_creationredemptioncapitalid(from._internal_creationredemptioncapitalid());
  }
  if (!from._internal_creationredemptioncapitalsymbol().empty()) {
    _this->_internal_set_creationredemptioncapitalsymbol(from._internal_creationredemptioncapitalsymbol());
  }
  if (!from._internal_crosssourcecapitalid().empty()) {
    _this->_internal_set_crosssourcecapitalid(from._internal_crosssourcecapitalid());
  }
  if (!from._internal_crosssourcecapitalsymbol().empty()) {
    _this->_internal_set_crosssourcecapitalsymbol(from._internal_crosssourcecapitalsymbol());
  }
  if (!from._internal_fundmanagementcompany().empty()) {
    _this->_internal_set_fundmanagementcompany(from._internal_fundmanagementcompany());
  }
  if (!from._internal_underlyingsecurityid().empty()) {
    _this->_internal_set_underlyingsecurityid(from._internal_underlyingsecurityid());
  }
  if (!from._internal_tradingday().empty()) {
    _this->_internal_set_tradingday(from._internal_tradingday());
  }
  if (!from._internal_pretradingday().empty()) {
    _this->_internal_set_pretradingday(from._internal_pretradingday());
  }
  if (!from._internal_formersymbol().empty()) {
    _this->_internal_set_formersymbol(from._internal_formersymbol());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationredemptionunit = from._internal_creationredemptionunit();
  uint64_t raw_creationredemptionunit;
  memcpy(&raw_creationredemptionunit, &tmp_creationredemptionunit, sizeof(tmp_creationredemptionunit));
  if (raw_creationredemptionunit != 0) {
    _this->_internal_set_creationredemptionunit(from._internal_creationredemptionunit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_estimatecashcomponent = from._internal_estimatecashcomponent();
  uint64_t raw_estimatecashcomponent;
  memcpy(&raw_estimatecashcomponent, &tmp_estimatecashcomponent, sizeof(tmp_estimatecashcomponent));
  if (raw_estimatecashcomponent != 0) {
    _this->_internal_set_estimatecashcomponent(from._internal_estimatecashcomponent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxcashratio = from._internal_maxcashratio();
  uint64_t raw_maxcashratio;
  memcpy(&raw_maxcashratio, &tmp_maxcashratio, sizeof(tmp_maxcashratio));
  if (raw_maxcashratio != 0) {
    _this->_internal_set_maxcashratio(from._internal_maxcashratio());
  }
  if (from._internal_recordnum() != 0) {
    _this->_internal_set_recordnum(from._internal_recordnum());
  }
  if (from._internal_underlyingsecurityidsource() != 0) {
    _this->_internal_set_underlyingsecurityidsource(from._internal_underlyingsecurityidsource());
  }
  if (from._internal_ispublish() != 0) {
    _this->_internal_set_ispublish(from._internal_ispublish());
  }
  if (from._internal_isallowcreation() != 0) {
    _this->_internal_set_isallowcreation(from._internal_isallowcreation());
  }
  if (from._internal_isallowredemption() != 0) {
    _this->_internal_set_isallowredemption(from._internal_isallowredemption());
  }
  if (from._internal_crossmarket() != 0) {
    _this->_internal_set_crossmarket(from._internal_crossmarket());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cashcomponent = from._internal_cashcomponent();
  uint64_t raw_cashcomponent;
  memcpy(&raw_cashcomponent, &tmp_cashcomponent, sizeof(tmp_cashcomponent));
  if (raw_cashcomponent != 0) {
    _this->_internal_set_cashcomponent(from._internal_cashcomponent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_navpercu = from._internal_navpercu();
  uint64_t raw_navpercu;
  memcpy(&raw_navpercu, &tmp_navpercu, sizeof(tmp_navpercu));
  if (raw_navpercu != 0) {
    _this->_internal_set_navpercu(from._internal_navpercu());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nav = from._internal_nav();
  uint64_t raw_nav;
  memcpy(&raw_nav, &tmp_nav, sizeof(tmp_nav));
  if (raw_nav != 0) {
    _this->_internal_set_nav(from._internal_nav());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dividendpercu = from._internal_dividendpercu();
  uint64_t raw_dividendpercu;
  memcpy(&raw_dividendpercu, &tmp_dividendpercu, sizeof(tmp_dividendpercu));
  if (raw_dividendpercu != 0) {
    _this->_internal_set_dividendpercu(from._internal_dividendpercu());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationlimit = from._internal_creationlimit();
  uint64_t raw_creationlimit;
  memcpy(&raw_creationlimit, &tmp_creationlimit, sizeof(tmp_creationlimit));
  if (raw_creationlimit != 0) {
    _this->_internal_set_creationlimit(from._internal_creationlimit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptionlimit = from._internal_redemptionlimit();
  uint64_t raw_redemptionlimit;
  memcpy(&raw_redemptionlimit, &tmp_redemptionlimit, sizeof(tmp_redemptionlimit));
  if (raw_redemptionlimit != 0) {
    _this->_internal_set_redemptionlimit(from._internal_redemptionlimit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationlimitperuser = from._internal_creationlimitperuser();
  uint64_t raw_creationlimitperuser;
  memcpy(&raw_creationlimitperuser, &tmp_creationlimitperuser, sizeof(tmp_creationlimitperuser));
  if (raw_creationlimitperuser != 0) {
    _this->_internal_set_creationlimitperuser(from._internal_creationlimitperuser());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptionlimitperuser = from._internal_redemptionlimitperuser();
  uint64_t raw_redemptionlimitperuser;
  memcpy(&raw_redemptionlimitperuser, &tmp_redemptionlimitperuser, sizeof(tmp_redemptionlimitperuser));
  if (raw_redemptionlimitperuser != 0) {
    _this->_internal_set_redemptionlimitperuser(from._internal_redemptionlimitperuser());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netcreationlimit = from._internal_netcreationlimit();
  uint64_t raw_netcreationlimit;
  memcpy(&raw_netcreationlimit, &tmp_netcreationlimit, sizeof(tmp_netcreationlimit));
  if (raw_netcreationlimit != 0) {
    _this->_internal_set_netcreationlimit(from._internal_netcreationlimit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netredemptionlimit = from._internal_netredemptionlimit();
  uint64_t raw_netredemptionlimit;
  memcpy(&raw_netredemptionlimit, &tmp_netredemptionlimit, sizeof(tmp_netredemptionlimit));
  if (raw_netredemptionlimit != 0) {
    _this->_internal_set_netredemptionlimit(from._internal_netredemptionlimit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netcreationlimitperuser = from._internal_netcreationlimitperuser();
  uint64_t raw_netcreationlimitperuser;
  memcpy(&raw_netcreationlimitperuser, &tmp_netcreationlimitperuser, sizeof(tmp_netcreationlimitperuser));
  if (raw_netcreationlimitperuser != 0) {
    _this->_internal_set_netcreationlimitperuser(from._internal_netcreationlimitperuser());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_netredemptionlimitperuser = from._internal_netredemptionlimitperuser();
  uint64_t raw_netredemptionlimitperuser;
  memcpy(&raw_netredemptionlimitperuser, &tmp_netredemptionlimitperuser, sizeof(tmp_netredemptionlimitperuser));
  if (raw_netredemptionlimitperuser != 0) {
    _this->_internal_set_netredemptionlimitperuser(from._internal_netredemptionlimitperuser());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDETFBasicInfo::CopyFrom(const MDETFBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDETFBasicInfo::IsInitialized() const {
  return true;
}

void MDETFBasicInfo::InternalSwap(MDETFBasicInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.etfcomponents_.InternalSwap(&other->_impl_.etfcomponents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securityid_, lhs_arena,
      &other->_impl_.securityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creationid_, lhs_arena,
      &other->_impl_.creationid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creationsymbol_, lhs_arena,
      &other->_impl_.creationsymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redemptionid_, lhs_arena,
      &other->_impl_.redemptionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redemptionsymbol_, lhs_arena,
      &other->_impl_.redemptionsymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creationredemptioncapitalid_, lhs_arena,
      &other->_impl_.creationredemptioncapitalid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creationredemptioncapitalsymbol_, lhs_arena,
      &other->_impl_.creationredemptioncapitalsymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crosssourcecapitalid_, lhs_arena,
      &other->_impl_.crosssourcecapitalid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crosssourcecapitalsymbol_, lhs_arena,
      &other->_impl_.crosssourcecapitalsymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fundmanagementcompany_, lhs_arena,
      &other->_impl_.fundmanagementcompany_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.underlyingsecurityid_, lhs_arena,
      &other->_impl_.underlyingsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingday_, lhs_arena,
      &other->_impl_.tradingday_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pretradingday_, lhs_arena,
      &other->_impl_.pretradingday_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.formersymbol_, lhs_arena,
      &other->_impl_.formersymbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDETFBasicInfo, _impl_.datamultiplepowerof10_)
      + sizeof(MDETFBasicInfo::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDETFBasicInfo, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDETFBasicInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDETFBasicInfo_2eproto_getter, &descriptor_table_MDETFBasicInfo_2eproto_once,
      file_level_metadata_MDETFBasicInfo_2eproto[0]);
}

// ===================================================================

class MDETFComponentDetail::_Internal {
 public:
};

MDETFComponentDetail::MDETFComponentDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDETFComponentDetail)
}
MDETFComponentDetail::MDETFComponentDetail(const MDETFComponentDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDETFComponentDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securityid_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.componentshare_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.substituteflag_){}
    , decltype(_impl_.premiumratio_){}
    , decltype(_impl_.creationcashsubstitute_){}
    , decltype(_impl_.redemptioncashsubstitute_){}
    , decltype(_impl_.totalcashsubstitute_){}
    , decltype(_impl_.discountratio_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_securityid().empty()) {
    _this->_impl_.securityid_.Set(from._internal_securityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.componentshare_, &from._impl_.componentshare_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.discountratio_) -
    reinterpret_cast<char*>(&_impl_.componentshare_)) + sizeof(_impl_.discountratio_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDETFComponentDetail)
}

inline void MDETFComponentDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securityid_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.componentshare_){0}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.substituteflag_){0}
    , decltype(_impl_.premiumratio_){0}
    , decltype(_impl_.creationcashsubstitute_){0}
    , decltype(_impl_.redemptioncashsubstitute_){0}
    , decltype(_impl_.totalcashsubstitute_){0}
    , decltype(_impl_.discountratio_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDETFComponentDetail::~MDETFComponentDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDETFComponentDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDETFComponentDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.securityid_.Destroy();
  _impl_.symbol_.Destroy();
}

void MDETFComponentDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDETFComponentDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.securityid_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.componentshare_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.discountratio_) -
      reinterpret_cast<char*>(&_impl_.componentshare_)) + sizeof(_impl_.discountratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDETFComponentDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string SecurityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_securityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID"));
        } else
          goto handle_unusual;
        continue;
      // string Symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // double ComponentShare = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.componentshare_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_substituteflag(static_cast<::com::htsc::mdc::insight::model::MDETFSubstituteFlag>(val));
        } else
          goto handle_unusual;
        continue;
      // double PremiumRatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.premiumratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double CreationCashSubstitute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.creationcashsubstitute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double RedemptionCashSubstitute = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.redemptioncashsubstitute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double TotalCashSubstitute = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.totalcashsubstitute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double DiscountRatio = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.discountratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDETFComponentDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // string SecurityID = 2;
  if (!this->_internal_securityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_securityid(), target);
  }

  // string Symbol = 3;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_securityidsource(), target);
  }

  // double ComponentShare = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_componentshare = this->_internal_componentshare();
  uint64_t raw_componentshare;
  memcpy(&raw_componentshare, &tmp_componentshare, sizeof(tmp_componentshare));
  if (raw_componentshare != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_componentshare(), target);
  }

  // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
  if (this->_internal_substituteflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_substituteflag(), target);
  }

  // double PremiumRatio = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_premiumratio = this->_internal_premiumratio();
  uint64_t raw_premiumratio;
  memcpy(&raw_premiumratio, &tmp_premiumratio, sizeof(tmp_premiumratio));
  if (raw_premiumratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_premiumratio(), target);
  }

  // double CreationCashSubstitute = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationcashsubstitute = this->_internal_creationcashsubstitute();
  uint64_t raw_creationcashsubstitute;
  memcpy(&raw_creationcashsubstitute, &tmp_creationcashsubstitute, sizeof(tmp_creationcashsubstitute));
  if (raw_creationcashsubstitute != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_creationcashsubstitute(), target);
  }

  // double RedemptionCashSubstitute = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptioncashsubstitute = this->_internal_redemptioncashsubstitute();
  uint64_t raw_redemptioncashsubstitute;
  memcpy(&raw_redemptioncashsubstitute, &tmp_redemptioncashsubstitute, sizeof(tmp_redemptioncashsubstitute));
  if (raw_redemptioncashsubstitute != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_redemptioncashsubstitute(), target);
  }

  // double TotalCashSubstitute = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalcashsubstitute = this->_internal_totalcashsubstitute();
  uint64_t raw_totalcashsubstitute;
  memcpy(&raw_totalcashsubstitute, &tmp_totalcashsubstitute, sizeof(tmp_totalcashsubstitute));
  if (raw_totalcashsubstitute != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_totalcashsubstitute(), target);
  }

  // double DiscountRatio = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discountratio = this->_internal_discountratio();
  uint64_t raw_discountratio;
  memcpy(&raw_discountratio, &tmp_discountratio, sizeof(tmp_discountratio));
  if (raw_discountratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_discountratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDETFComponentDetail)
  return target;
}

size_t MDETFComponentDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string SecurityID = 2;
  if (!this->_internal_securityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  // string Symbol = 3;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // double ComponentShare = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_componentshare = this->_internal_componentshare();
  uint64_t raw_componentshare;
  memcpy(&raw_componentshare, &tmp_componentshare, sizeof(tmp_componentshare));
  if (raw_componentshare != 0) {
    total_size += 1 + 8;
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
  if (this->_internal_substituteflag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_substituteflag());
  }

  // double PremiumRatio = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_premiumratio = this->_internal_premiumratio();
  uint64_t raw_premiumratio;
  memcpy(&raw_premiumratio, &tmp_premiumratio, sizeof(tmp_premiumratio));
  if (raw_premiumratio != 0) {
    total_size += 1 + 8;
  }

  // double CreationCashSubstitute = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationcashsubstitute = this->_internal_creationcashsubstitute();
  uint64_t raw_creationcashsubstitute;
  memcpy(&raw_creationcashsubstitute, &tmp_creationcashsubstitute, sizeof(tmp_creationcashsubstitute));
  if (raw_creationcashsubstitute != 0) {
    total_size += 1 + 8;
  }

  // double RedemptionCashSubstitute = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptioncashsubstitute = this->_internal_redemptioncashsubstitute();
  uint64_t raw_redemptioncashsubstitute;
  memcpy(&raw_redemptioncashsubstitute, &tmp_redemptioncashsubstitute, sizeof(tmp_redemptioncashsubstitute));
  if (raw_redemptioncashsubstitute != 0) {
    total_size += 1 + 8;
  }

  // double TotalCashSubstitute = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalcashsubstitute = this->_internal_totalcashsubstitute();
  uint64_t raw_totalcashsubstitute;
  memcpy(&raw_totalcashsubstitute, &tmp_totalcashsubstitute, sizeof(tmp_totalcashsubstitute));
  if (raw_totalcashsubstitute != 0) {
    total_size += 1 + 8;
  }

  // double DiscountRatio = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discountratio = this->_internal_discountratio();
  uint64_t raw_discountratio;
  memcpy(&raw_discountratio, &tmp_discountratio, sizeof(tmp_discountratio));
  if (raw_discountratio != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDETFComponentDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDETFComponentDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDETFComponentDetail::GetClassData() const { return &_class_data_; }


void MDETFComponentDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDETFComponentDetail*>(&to_msg);
  auto& from = static_cast<const MDETFComponentDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_securityid().empty()) {
    _this->_internal_set_securityid(from._internal_securityid());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_componentshare = from._internal_componentshare();
  uint64_t raw_componentshare;
  memcpy(&raw_componentshare, &tmp_componentshare, sizeof(tmp_componentshare));
  if (raw_componentshare != 0) {
    _this->_internal_set_componentshare(from._internal_componentshare());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_substituteflag() != 0) {
    _this->_internal_set_substituteflag(from._internal_substituteflag());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_premiumratio = from._internal_premiumratio();
  uint64_t raw_premiumratio;
  memcpy(&raw_premiumratio, &tmp_premiumratio, sizeof(tmp_premiumratio));
  if (raw_premiumratio != 0) {
    _this->_internal_set_premiumratio(from._internal_premiumratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationcashsubstitute = from._internal_creationcashsubstitute();
  uint64_t raw_creationcashsubstitute;
  memcpy(&raw_creationcashsubstitute, &tmp_creationcashsubstitute, sizeof(tmp_creationcashsubstitute));
  if (raw_creationcashsubstitute != 0) {
    _this->_internal_set_creationcashsubstitute(from._internal_creationcashsubstitute());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_redemptioncashsubstitute = from._internal_redemptioncashsubstitute();
  uint64_t raw_redemptioncashsubstitute;
  memcpy(&raw_redemptioncashsubstitute, &tmp_redemptioncashsubstitute, sizeof(tmp_redemptioncashsubstitute));
  if (raw_redemptioncashsubstitute != 0) {
    _this->_internal_set_redemptioncashsubstitute(from._internal_redemptioncashsubstitute());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totalcashsubstitute = from._internal_totalcashsubstitute();
  uint64_t raw_totalcashsubstitute;
  memcpy(&raw_totalcashsubstitute, &tmp_totalcashsubstitute, sizeof(tmp_totalcashsubstitute));
  if (raw_totalcashsubstitute != 0) {
    _this->_internal_set_totalcashsubstitute(from._internal_totalcashsubstitute());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discountratio = from._internal_discountratio();
  uint64_t raw_discountratio;
  memcpy(&raw_discountratio, &tmp_discountratio, sizeof(tmp_discountratio));
  if (raw_discountratio != 0) {
    _this->_internal_set_discountratio(from._internal_discountratio());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDETFComponentDetail::CopyFrom(const MDETFComponentDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDETFComponentDetail::IsInitialized() const {
  return true;
}

void MDETFComponentDetail::InternalSwap(MDETFComponentDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securityid_, lhs_arena,
      &other->_impl_.securityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDETFComponentDetail, _impl_.discountratio_)
      + sizeof(MDETFComponentDetail::_impl_.discountratio_)
      - PROTOBUF_FIELD_OFFSET(MDETFComponentDetail, _impl_.componentshare_)>(
          reinterpret_cast<char*>(&_impl_.componentshare_),
          reinterpret_cast<char*>(&other->_impl_.componentshare_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDETFComponentDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDETFBasicInfo_2eproto_getter, &descriptor_table_MDETFBasicInfo_2eproto_once,
      file_level_metadata_MDETFBasicInfo_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDETFBasicInfo*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDETFBasicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDETFBasicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDETFComponentDetail*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDETFComponentDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDETFComponentDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
