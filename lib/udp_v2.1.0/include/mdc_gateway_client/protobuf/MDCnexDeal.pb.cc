// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCnexDeal.proto

#include "MDCnexDeal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDCnexDeal::MDCnexDeal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dealid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cnexsecuritytype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creditrating_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exerciseflag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tenor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.issuedatatime_)*/int64_t{0}
  , /*decltype(_impl_.cnexdatatype_)*/0
  , /*decltype(_impl_.dealtype_)*/0
  , /*decltype(_impl_.dealprice_)*/int64_t{0}
  , /*decltype(_impl_.dealsize_)*/int64_t{0}
  , /*decltype(_impl_.yield_)*/int64_t{0}
  , /*decltype(_impl_.dealdate_)*/0
  , /*decltype(_impl_.dealtime_)*/0
  , /*decltype(_impl_.quotestatus_)*/0
  , /*decltype(_impl_.quotepricetype_)*/0
  , /*decltype(_impl_.maturitydate_)*/0
  , /*decltype(_impl_.statusvalue_)*/0
  , /*decltype(_impl_.workbench_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDCnexDealDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDCnexDealDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDCnexDealDefaultTypeInternal() {}
  union {
    MDCnexDeal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDCnexDealDefaultTypeInternal _MDCnexDeal_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDCnexDeal_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDCnexDeal_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDCnexDeal_2eproto = nullptr;

const uint32_t TableStruct_MDCnexDeal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.cnexdatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.issuedatatime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.dealid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.dealtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.dealprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.dealsize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.yield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.dealdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.dealtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.quotestatus_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.quotepricetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.maturitydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.cnexsecuritytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.creditrating_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.statusvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.exerciseflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.tenor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.workbench_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexDeal, _impl_.datamultiplepowerof10_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDCnexDeal)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDCnexDeal_default_instance_._instance,
};

const char descriptor_table_protodef_MDCnexDeal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020MDCnexDeal.proto\022\032com.htsc.mdc.insight"
  ".model\032\027ESecurityIDSource.proto\032\023ESecuri"
  "tyType.proto\"\351\004\n\nMDCnexDeal\022\026\n\016HTSCSecur"
  "ityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 "
  "\001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020securityID"
  "Source\030\005 \001(\0162%.com.htsc.mdc.model.ESecur"
  "ityIDSource\0227\n\014securityType\030\006 \001(\0162!.com."
  "htsc.mdc.model.ESecurityType\022\024\n\014CnexData"
  "Type\030\007 \001(\005\022\025\n\rIssueDataTime\030\010 \001(\003\022\016\n\006Dea"
  "lID\030\t \001(\t\022\020\n\010DealType\030\n \001(\005\022\021\n\tDealPrice"
  "\030\013 \001(\003\022\020\n\010DealSize\030\014 \001(\003\022\r\n\005Yield\030\r \001(\003\022"
  "\020\n\010DealDate\030\016 \001(\005\022\020\n\010DealTime\030\017 \001(\005\022\023\n\013Q"
  "uoteStatus\030\020 \001(\005\022\026\n\016QuotePriceType\030\021 \001(\005"
  "\022\024\n\014MaturityDate\030\022 \001(\005\022\030\n\020CnexSecurityTy"
  "pe\030\023 \001(\t\022\024\n\014CreditRating\030\024 \001(\t\022\014\n\004Text\030\025"
  " \001(\t\022\023\n\013StatusValue\030\026 \001(\005\022\024\n\014ExerciseFla"
  "g\030\027 \001(\t\022\r\n\005Tenor\030\030 \001(\t\022\021\n\tWorkBench\030\031 \001("
  "\005\022\035\n\025DataMultiplePowerOf10\030\032 \001(\005B3\n\032com."
  "htsc.mdc.insight.modelB\020MDCnexDealProtos"
  "H\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDCnexDeal_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDCnexDeal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDCnexDeal_2eproto = {
    false, false, 773, descriptor_table_protodef_MDCnexDeal_2eproto,
    "MDCnexDeal.proto",
    &descriptor_table_MDCnexDeal_2eproto_once, descriptor_table_MDCnexDeal_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_MDCnexDeal_2eproto::offsets,
    file_level_metadata_MDCnexDeal_2eproto, file_level_enum_descriptors_MDCnexDeal_2eproto,
    file_level_service_descriptors_MDCnexDeal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDCnexDeal_2eproto_getter() {
  return &descriptor_table_MDCnexDeal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDCnexDeal_2eproto(&descriptor_table_MDCnexDeal_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCnexDeal::_Internal {
 public:
};

MDCnexDeal::MDCnexDeal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDCnexDeal)
}
MDCnexDeal::MDCnexDeal(const MDCnexDeal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDCnexDeal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.dealid_){}
    , decltype(_impl_.cnexsecuritytype_){}
    , decltype(_impl_.creditrating_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.exerciseflag_){}
    , decltype(_impl_.tenor_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.issuedatatime_){}
    , decltype(_impl_.cnexdatatype_){}
    , decltype(_impl_.dealtype_){}
    , decltype(_impl_.dealprice_){}
    , decltype(_impl_.dealsize_){}
    , decltype(_impl_.yield_){}
    , decltype(_impl_.dealdate_){}
    , decltype(_impl_.dealtime_){}
    , decltype(_impl_.quotestatus_){}
    , decltype(_impl_.quotepricetype_){}
    , decltype(_impl_.maturitydate_){}
    , decltype(_impl_.statusvalue_){}
    , decltype(_impl_.workbench_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dealid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dealid().empty()) {
    _this->_impl_.dealid_.Set(from._internal_dealid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cnexsecuritytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cnexsecuritytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cnexsecuritytype().empty()) {
    _this->_impl_.cnexsecuritytype_.Set(from._internal_cnexsecuritytype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creditrating_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creditrating_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creditrating().empty()) {
    _this->_impl_.creditrating_.Set(from._internal_creditrating(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exerciseflag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exerciseflag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exerciseflag().empty()) {
    _this->_impl_.exerciseflag_.Set(from._internal_exerciseflag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tenor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tenor().empty()) {
    _this->_impl_.tenor_.Set(from._internal_tenor(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCnexDeal)
}

inline void MDCnexDeal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.dealid_){}
    , decltype(_impl_.cnexsecuritytype_){}
    , decltype(_impl_.creditrating_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.exerciseflag_){}
    , decltype(_impl_.tenor_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.issuedatatime_){int64_t{0}}
    , decltype(_impl_.cnexdatatype_){0}
    , decltype(_impl_.dealtype_){0}
    , decltype(_impl_.dealprice_){int64_t{0}}
    , decltype(_impl_.dealsize_){int64_t{0}}
    , decltype(_impl_.yield_){int64_t{0}}
    , decltype(_impl_.dealdate_){0}
    , decltype(_impl_.dealtime_){0}
    , decltype(_impl_.quotestatus_){0}
    , decltype(_impl_.quotepricetype_){0}
    , decltype(_impl_.maturitydate_){0}
    , decltype(_impl_.statusvalue_){0}
    , decltype(_impl_.workbench_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dealid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cnexsecuritytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cnexsecuritytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creditrating_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creditrating_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exerciseflag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exerciseflag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tenor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDCnexDeal::~MDCnexDeal() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCnexDeal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDCnexDeal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.dealid_.Destroy();
  _impl_.cnexsecuritytype_.Destroy();
  _impl_.creditrating_.Destroy();
  _impl_.text_.Destroy();
  _impl_.exerciseflag_.Destroy();
  _impl_.tenor_.Destroy();
}

void MDCnexDeal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDCnexDeal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCnexDeal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.dealid_.ClearToEmpty();
  _impl_.cnexsecuritytype_.ClearToEmpty();
  _impl_.creditrating_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.exerciseflag_.ClearToEmpty();
  _impl_.tenor_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDCnexDeal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnexDeal.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 CnexDataType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cnexdatatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IssueDataTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.issuedatatime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string DealID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_dealid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnexDeal.DealID"));
        } else
          goto handle_unusual;
        continue;
      // int32 DealType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.dealtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DealPrice = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.dealprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DealSize = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.dealsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Yield = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.yield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DealDate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.dealdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DealTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.dealtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteStatus = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.quotestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuotePriceType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.quotepricetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaturityDate = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.maturitydate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string CnexSecurityType = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_cnexsecuritytype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnexDeal.CnexSecurityType"));
        } else
          goto handle_unusual;
        continue;
      // string CreditRating = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_creditrating();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnexDeal.CreditRating"));
        } else
          goto handle_unusual;
        continue;
      // string Text = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnexDeal.Text"));
        } else
          goto handle_unusual;
        continue;
      // int32 StatusValue = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.statusvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ExerciseFlag = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_exerciseflag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnexDeal.ExerciseFlag"));
        } else
          goto handle_unusual;
        continue;
      // string Tenor = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_tenor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnexDeal.Tenor"));
        } else
          goto handle_unusual;
        continue;
      // int32 WorkBench = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.workbench_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDCnexDeal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCnexDeal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnexDeal.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // int32 CnexDataType = 7;
  if (this->_internal_cnexdatatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_cnexdatatype(), target);
  }

  // int64 IssueDataTime = 8;
  if (this->_internal_issuedatatime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_issuedatatime(), target);
  }

  // string DealID = 9;
  if (!this->_internal_dealid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dealid().data(), static_cast<int>(this->_internal_dealid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnexDeal.DealID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_dealid(), target);
  }

  // int32 DealType = 10;
  if (this->_internal_dealtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_dealtype(), target);
  }

  // int64 DealPrice = 11;
  if (this->_internal_dealprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_dealprice(), target);
  }

  // int64 DealSize = 12;
  if (this->_internal_dealsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_dealsize(), target);
  }

  // int64 Yield = 13;
  if (this->_internal_yield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_yield(), target);
  }

  // int32 DealDate = 14;
  if (this->_internal_dealdate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_dealdate(), target);
  }

  // int32 DealTime = 15;
  if (this->_internal_dealtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_dealtime(), target);
  }

  // int32 QuoteStatus = 16;
  if (this->_internal_quotestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_quotestatus(), target);
  }

  // int32 QuotePriceType = 17;
  if (this->_internal_quotepricetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_quotepricetype(), target);
  }

  // int32 MaturityDate = 18;
  if (this->_internal_maturitydate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_maturitydate(), target);
  }

  // string CnexSecurityType = 19;
  if (!this->_internal_cnexsecuritytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cnexsecuritytype().data(), static_cast<int>(this->_internal_cnexsecuritytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnexDeal.CnexSecurityType");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_cnexsecuritytype(), target);
  }

  // string CreditRating = 20;
  if (!this->_internal_creditrating().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creditrating().data(), static_cast<int>(this->_internal_creditrating().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnexDeal.CreditRating");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_creditrating(), target);
  }

  // string Text = 21;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnexDeal.Text");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_text(), target);
  }

  // int32 StatusValue = 22;
  if (this->_internal_statusvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_statusvalue(), target);
  }

  // string ExerciseFlag = 23;
  if (!this->_internal_exerciseflag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exerciseflag().data(), static_cast<int>(this->_internal_exerciseflag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnexDeal.ExerciseFlag");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_exerciseflag(), target);
  }

  // string Tenor = 24;
  if (!this->_internal_tenor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenor().data(), static_cast<int>(this->_internal_tenor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnexDeal.Tenor");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_tenor(), target);
  }

  // int32 WorkBench = 25;
  if (this->_internal_workbench() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_workbench(), target);
  }

  // int32 DataMultiplePowerOf10 = 26;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCnexDeal)
  return target;
}

size_t MDCnexDeal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCnexDeal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string DealID = 9;
  if (!this->_internal_dealid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dealid());
  }

  // string CnexSecurityType = 19;
  if (!this->_internal_cnexsecuritytype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cnexsecuritytype());
  }

  // string CreditRating = 20;
  if (!this->_internal_creditrating().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creditrating());
  }

  // string Text = 21;
  if (!this->_internal_text().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string ExerciseFlag = 23;
  if (!this->_internal_exerciseflag().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exerciseflag());
  }

  // string Tenor = 24;
  if (!this->_internal_tenor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenor());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 IssueDataTime = 8;
  if (this->_internal_issuedatatime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_issuedatatime());
  }

  // int32 CnexDataType = 7;
  if (this->_internal_cnexdatatype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cnexdatatype());
  }

  // int32 DealType = 10;
  if (this->_internal_dealtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dealtype());
  }

  // int64 DealPrice = 11;
  if (this->_internal_dealprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dealprice());
  }

  // int64 DealSize = 12;
  if (this->_internal_dealsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dealsize());
  }

  // int64 Yield = 13;
  if (this->_internal_yield() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_yield());
  }

  // int32 DealDate = 14;
  if (this->_internal_dealdate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dealdate());
  }

  // int32 DealTime = 15;
  if (this->_internal_dealtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dealtime());
  }

  // int32 QuoteStatus = 16;
  if (this->_internal_quotestatus() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_quotestatus());
  }

  // int32 QuotePriceType = 17;
  if (this->_internal_quotepricetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_quotepricetype());
  }

  // int32 MaturityDate = 18;
  if (this->_internal_maturitydate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maturitydate());
  }

  // int32 StatusValue = 22;
  if (this->_internal_statusvalue() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_statusvalue());
  }

  // int32 WorkBench = 25;
  if (this->_internal_workbench() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_workbench());
  }

  // int32 DataMultiplePowerOf10 = 26;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDCnexDeal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDCnexDeal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDCnexDeal::GetClassData() const { return &_class_data_; }


void MDCnexDeal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDCnexDeal*>(&to_msg);
  auto& from = static_cast<const MDCnexDeal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCnexDeal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_dealid().empty()) {
    _this->_internal_set_dealid(from._internal_dealid());
  }
  if (!from._internal_cnexsecuritytype().empty()) {
    _this->_internal_set_cnexsecuritytype(from._internal_cnexsecuritytype());
  }
  if (!from._internal_creditrating().empty()) {
    _this->_internal_set_creditrating(from._internal_creditrating());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_exerciseflag().empty()) {
    _this->_internal_set_exerciseflag(from._internal_exerciseflag());
  }
  if (!from._internal_tenor().empty()) {
    _this->_internal_set_tenor(from._internal_tenor());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_issuedatatime() != 0) {
    _this->_internal_set_issuedatatime(from._internal_issuedatatime());
  }
  if (from._internal_cnexdatatype() != 0) {
    _this->_internal_set_cnexdatatype(from._internal_cnexdatatype());
  }
  if (from._internal_dealtype() != 0) {
    _this->_internal_set_dealtype(from._internal_dealtype());
  }
  if (from._internal_dealprice() != 0) {
    _this->_internal_set_dealprice(from._internal_dealprice());
  }
  if (from._internal_dealsize() != 0) {
    _this->_internal_set_dealsize(from._internal_dealsize());
  }
  if (from._internal_yield() != 0) {
    _this->_internal_set_yield(from._internal_yield());
  }
  if (from._internal_dealdate() != 0) {
    _this->_internal_set_dealdate(from._internal_dealdate());
  }
  if (from._internal_dealtime() != 0) {
    _this->_internal_set_dealtime(from._internal_dealtime());
  }
  if (from._internal_quotestatus() != 0) {
    _this->_internal_set_quotestatus(from._internal_quotestatus());
  }
  if (from._internal_quotepricetype() != 0) {
    _this->_internal_set_quotepricetype(from._internal_quotepricetype());
  }
  if (from._internal_maturitydate() != 0) {
    _this->_internal_set_maturitydate(from._internal_maturitydate());
  }
  if (from._internal_statusvalue() != 0) {
    _this->_internal_set_statusvalue(from._internal_statusvalue());
  }
  if (from._internal_workbench() != 0) {
    _this->_internal_set_workbench(from._internal_workbench());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDCnexDeal::CopyFrom(const MDCnexDeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCnexDeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDCnexDeal::IsInitialized() const {
  return true;
}

void MDCnexDeal::InternalSwap(MDCnexDeal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dealid_, lhs_arena,
      &other->_impl_.dealid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cnexsecuritytype_, lhs_arena,
      &other->_impl_.cnexsecuritytype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creditrating_, lhs_arena,
      &other->_impl_.creditrating_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exerciseflag_, lhs_arena,
      &other->_impl_.exerciseflag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tenor_, lhs_arena,
      &other->_impl_.tenor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDCnexDeal, _impl_.datamultiplepowerof10_)
      + sizeof(MDCnexDeal::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDCnexDeal, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDCnexDeal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCnexDeal_2eproto_getter, &descriptor_table_MDCnexDeal_2eproto_once,
      file_level_metadata_MDCnexDeal_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDCnexDeal*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDCnexDeal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDCnexDeal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
