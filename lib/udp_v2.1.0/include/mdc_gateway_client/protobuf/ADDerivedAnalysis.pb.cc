// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADDerivedAnalysis.proto

#include "ADDerivedAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR ADDerivedAnalysis::ADDerivedAnalysis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amv_)*/{}
  , /*decltype(_impl_.arbr_)*/{}
  , /*decltype(_impl_.bias_)*/{}
  , /*decltype(_impl_.boll_)*/{}
  , /*decltype(_impl_.cr_)*/{}
  , /*decltype(_impl_.vmama_)*/{}
  , /*decltype(_impl_.vr_)*/{}
  , /*decltype(_impl_.wr_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.numtrades_)*/int64_t{0}
  , /*decltype(_impl_.totalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.lastpx_)*/int64_t{0}
  , /*decltype(_impl_.openpx_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.highpx_)*/int64_t{0}
  , /*decltype(_impl_.lowpx_)*/int64_t{0}
  , /*decltype(_impl_.iopv_)*/int64_t{0}
  , /*decltype(_impl_.preiopv_)*/int64_t{0}
  , /*decltype(_impl_.openinterest_)*/int64_t{0}
  , /*decltype(_impl_.preopeninterest_)*/int64_t{0}
  , /*decltype(_impl_.settleprice_)*/int64_t{0}
  , /*decltype(_impl_.presettleprice_)*/int64_t{0}
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.bbi_)*/int64_t{0}
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADDerivedAnalysisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADDerivedAnalysisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADDerivedAnalysisDefaultTypeInternal() {}
  union {
    ADDerivedAnalysis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADDerivedAnalysisDefaultTypeInternal _ADDerivedAnalysis_default_instance_;
PROTOBUF_CONSTEXPR ADAmv::ADAmv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amv_)*/int64_t{0}
  , /*decltype(_impl_.nvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADAmvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADAmvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADAmvDefaultTypeInternal() {}
  union {
    ADAmv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADAmvDefaultTypeInternal _ADAmv_default_instance_;
PROTOBUF_CONSTEXPR ADArBr::ADArBr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ar_)*/int64_t{0}
  , /*decltype(_impl_.br_)*/int64_t{0}
  , /*decltype(_impl_.nvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADArBrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADArBrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADArBrDefaultTypeInternal() {}
  union {
    ADArBr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADArBrDefaultTypeInternal _ADArBr_default_instance_;
PROTOBUF_CONSTEXPR ADBias::ADBias(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bias_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.nvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADBiasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADBiasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADBiasDefaultTypeInternal() {}
  union {
    ADBias _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADBiasDefaultTypeInternal _ADBias_default_instance_;
PROTOBUF_CONSTEXPR ADBoll::ADBoll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nvalue_)*/0
  , /*decltype(_impl_.pvalue_)*/0
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.upper_)*/int64_t{0}
  , /*decltype(_impl_.lower_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADBollDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADBollDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADBollDefaultTypeInternal() {}
  union {
    ADBoll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADBollDefaultTypeInternal _ADBoll_default_instance_;
PROTOBUF_CONSTEXPR ADCr::ADCr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cr_)*/int64_t{0}
  , /*decltype(_impl_.p1_)*/int64_t{0}
  , /*decltype(_impl_.p2_)*/int64_t{0}
  , /*decltype(_impl_.ym_)*/int64_t{0}
  , /*decltype(_impl_.nvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADCrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCrDefaultTypeInternal() {}
  union {
    ADCr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCrDefaultTypeInternal _ADCr_default_instance_;
PROTOBUF_CONSTEXPR ADVmaMa::ADVmaMa(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nvalue_)*/int64_t{0}
  , /*decltype(_impl_.vma_)*/int64_t{0}
  , /*decltype(_impl_.ma_)*/int64_t{0}
  , /*decltype(_impl_.periodtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADVmaMaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVmaMaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVmaMaDefaultTypeInternal() {}
  union {
    ADVmaMa _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVmaMaDefaultTypeInternal _ADVmaMa_default_instance_;
PROTOBUF_CONSTEXPR ADVr::ADVr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vr_)*/int64_t{0}
  , /*decltype(_impl_.avs_)*/int64_t{0}
  , /*decltype(_impl_.bvs_)*/int64_t{0}
  , /*decltype(_impl_.cvs_)*/int64_t{0}
  , /*decltype(_impl_.nvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADVrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVrDefaultTypeInternal() {}
  union {
    ADVr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVrDefaultTypeInternal _ADVr_default_instance_;
PROTOBUF_CONSTEXPR ADWr::ADWr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wr_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.nhighpx_)*/int64_t{0}
  , /*decltype(_impl_.nlowpx_)*/int64_t{0}
  , /*decltype(_impl_.nvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADWrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADWrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADWrDefaultTypeInternal() {}
  union {
    ADWr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADWrDefaultTypeInternal _ADWr_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_ADDerivedAnalysis_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ADDerivedAnalysis_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ADDerivedAnalysis_2eproto = nullptr;

const uint32_t TableStruct_ADDerivedAnalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.iopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.preiopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.openinterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.preopeninterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.settleprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.presettleprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.bbi_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.amv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.arbr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.bias_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.boll_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.cr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.vmama_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.vr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.wr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _impl_.datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADAmv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADAmv, _impl_.nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADAmv, _impl_.amv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADArBr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADArBr, _impl_.nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADArBr, _impl_.ar_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADArBr, _impl_.br_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBias, _impl_.nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBias, _impl_.bias_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBias, _impl_.closepx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, _impl_.nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, _impl_.pvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, _impl_.upper_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, _impl_.lower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, _impl_.nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, _impl_.cr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, _impl_.p1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, _impl_.p2_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, _impl_.ym_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, _impl_.nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, _impl_.vma_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, _impl_.ma_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, _impl_.periodtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, _impl_.nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, _impl_.vr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, _impl_.avs_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, _impl_.bvs_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, _impl_.cvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, _impl_.nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, _impl_.wr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, _impl_.nhighpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, _impl_.nlowpx_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADDerivedAnalysis)},
  { 40, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADAmv)},
  { 48, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADArBr)},
  { 57, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADBias)},
  { 66, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADBoll)},
  { 77, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADCr)},
  { 88, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADVmaMa)},
  { 98, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADVr)},
  { 109, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADWr)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_ADDerivedAnalysis_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADAmv_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADArBr_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADBias_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADBoll_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADCr_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADVmaMa_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADVr_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADWr_default_instance_._instance,
};

const char descriptor_table_protodef_ADDerivedAnalysis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ADDerivedAnalysis.proto\022\032com.htsc.mdc."
  "insight.model\032\023ESecurityType.proto\032\027ESec"
  "urityIDSource.proto\"\367\007\n\021ADDerivedAnalysi"
  "s\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001("
  "\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003"
  "\022\030\n\020TradingPhaseCode\030\005 \001(\t\022\?\n\020securityID"
  "Source\030\006 \001(\0162%.com.htsc.mdc.model.ESecur"
  "ityIDSource\0227\n\014securityType\030\007 \001(\0162!.com."
  "htsc.mdc.model.ESecurityType\022\021\n\tNumTrade"
  "s\030\010 \001(\003\022\030\n\020TotalVolumeTrade\030\t \001(\003\022\027\n\017Tot"
  "alValueTrade\030\n \001(\003\022\022\n\nPreClosePx\030\013 \001(\003\022\016"
  "\n\006LastPx\030\014 \001(\003\022\016\n\006OpenPx\030\r \001(\003\022\017\n\007CloseP"
  "x\030\016 \001(\003\022\016\n\006HighPx\030\017 \001(\003\022\r\n\005LowPx\030\020 \001(\003\022\014"
  "\n\004IOPV\030\021 \001(\003\022\017\n\007PreIOPV\030\022 \001(\003\022\024\n\014OpenInt"
  "erest\030\023 \001(\003\022\027\n\017PreOpenInterest\030\024 \001(\003\022\023\n\013"
  "SettlePrice\030\025 \001(\003\022\026\n\016PreSettlePrice\030\026 \001("
  "\003\022\024\n\014ExchangeDate\030\027 \001(\005\022\024\n\014ExchangeTime\030"
  "\030 \001(\005\022\013\n\003BBI\030( \001(\003\022.\n\003Amv\030) \003(\0132!.com.ht"
  "sc.mdc.insight.model.ADAmv\0220\n\004ArBr\030* \003(\013"
  "2\".com.htsc.mdc.insight.model.ADArBr\0220\n\004"
  "Bias\030+ \003(\0132\".com.htsc.mdc.insight.model."
  "ADBias\0220\n\004Boll\030, \003(\0132\".com.htsc.mdc.insi"
  "ght.model.ADBoll\022,\n\002Cr\030- \003(\0132 .com.htsc."
  "mdc.insight.model.ADCr\0222\n\005VmaMa\030. \003(\0132#."
  "com.htsc.mdc.insight.model.ADVmaMa\022,\n\002Vr"
  "\030/ \003(\0132 .com.htsc.mdc.insight.model.ADVr"
  "\022,\n\002Wr\0300 \003(\0132 .com.htsc.mdc.insight.mode"
  "l.ADWr\022\035\n\025DataMultiplePowerOf10\0301 \001(\005\"$\n"
  "\005ADAmv\022\016\n\006NValue\030\001 \001(\005\022\013\n\003Amv\030\002 \001(\003\"0\n\006A"
  "DArBr\022\016\n\006NValue\030\001 \001(\005\022\n\n\002Ar\030\002 \001(\003\022\n\n\002Br\030"
  "\003 \001(\003\"7\n\006ADBias\022\016\n\006NValue\030\001 \001(\005\022\014\n\004Bias\030"
  "\002 \001(\003\022\017\n\007ClosePx\030\003 \001(\003\"S\n\006ADBoll\022\016\n\006NVal"
  "ue\030\001 \001(\005\022\016\n\006PValue\030\002 \001(\005\022\013\n\003Mid\030\003 \001(\003\022\r\n"
  "\005Upper\030\004 \001(\003\022\r\n\005Lower\030\005 \001(\003\"F\n\004ADCr\022\016\n\006N"
  "Value\030\001 \001(\005\022\n\n\002Cr\030\002 \001(\003\022\n\n\002P1\030\003 \001(\003\022\n\n\002P"
  "2\030\004 \001(\003\022\n\n\002YM\030\005 \001(\003\"F\n\007ADVmaMa\022\016\n\006NValue"
  "\030\001 \001(\003\022\013\n\003Vma\030\002 \001(\003\022\n\n\002Ma\030\003 \001(\003\022\022\n\nPerio"
  "dType\030\004 \001(\005\"I\n\004ADVr\022\016\n\006NValue\030\001 \001(\005\022\n\n\002V"
  "R\030\002 \001(\003\022\013\n\003AVS\030\003 \001(\003\022\013\n\003BVS\030\004 \001(\003\022\013\n\003CVS"
  "\030\005 \001(\003\"T\n\004ADWr\022\016\n\006NValue\030\001 \001(\005\022\n\n\002Wr\030\002 \001"
  "(\003\022\017\n\007ClosePx\030\003 \001(\003\022\017\n\007NHighPx\030\004 \001(\003\022\016\n\006"
  "NLowPx\030\005 \001(\003B:\n\032com.htsc.mdc.insight.mod"
  "elB\027ADDerivedAnalysisProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ADDerivedAnalysis_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_ADDerivedAnalysis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ADDerivedAnalysis_2eproto = {
    false, false, 1720, descriptor_table_protodef_ADDerivedAnalysis_2eproto,
    "ADDerivedAnalysis.proto",
    &descriptor_table_ADDerivedAnalysis_2eproto_once, descriptor_table_ADDerivedAnalysis_2eproto_deps, 2, 9,
    schemas, file_default_instances, TableStruct_ADDerivedAnalysis_2eproto::offsets,
    file_level_metadata_ADDerivedAnalysis_2eproto, file_level_enum_descriptors_ADDerivedAnalysis_2eproto,
    file_level_service_descriptors_ADDerivedAnalysis_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ADDerivedAnalysis_2eproto_getter() {
  return &descriptor_table_ADDerivedAnalysis_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ADDerivedAnalysis_2eproto(&descriptor_table_ADDerivedAnalysis_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADDerivedAnalysis::_Internal {
 public:
};

ADDerivedAnalysis::ADDerivedAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADDerivedAnalysis)
}
ADDerivedAnalysis::ADDerivedAnalysis(const ADDerivedAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADDerivedAnalysis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amv_){from._impl_.amv_}
    , decltype(_impl_.arbr_){from._impl_.arbr_}
    , decltype(_impl_.bias_){from._impl_.bias_}
    , decltype(_impl_.boll_){from._impl_.boll_}
    , decltype(_impl_.cr_){from._impl_.cr_}
    , decltype(_impl_.vmama_){from._impl_.vmama_}
    , decltype(_impl_.vr_){from._impl_.vr_}
    , decltype(_impl_.wr_){from._impl_.wr_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.numtrades_){}
    , decltype(_impl_.totalvolumetrade_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.lastpx_){}
    , decltype(_impl_.openpx_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.highpx_){}
    , decltype(_impl_.lowpx_){}
    , decltype(_impl_.iopv_){}
    , decltype(_impl_.preiopv_){}
    , decltype(_impl_.openinterest_){}
    , decltype(_impl_.preopeninterest_){}
    , decltype(_impl_.settleprice_){}
    , decltype(_impl_.presettleprice_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.bbi_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADDerivedAnalysis)
}

inline void ADDerivedAnalysis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amv_){arena}
    , decltype(_impl_.arbr_){arena}
    , decltype(_impl_.bias_){arena}
    , decltype(_impl_.boll_){arena}
    , decltype(_impl_.cr_){arena}
    , decltype(_impl_.vmama_){arena}
    , decltype(_impl_.vr_){arena}
    , decltype(_impl_.wr_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.numtrades_){int64_t{0}}
    , decltype(_impl_.totalvolumetrade_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.lastpx_){int64_t{0}}
    , decltype(_impl_.openpx_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.highpx_){int64_t{0}}
    , decltype(_impl_.lowpx_){int64_t{0}}
    , decltype(_impl_.iopv_){int64_t{0}}
    , decltype(_impl_.preiopv_){int64_t{0}}
    , decltype(_impl_.openinterest_){int64_t{0}}
    , decltype(_impl_.preopeninterest_){int64_t{0}}
    , decltype(_impl_.settleprice_){int64_t{0}}
    , decltype(_impl_.presettleprice_){int64_t{0}}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.bbi_){int64_t{0}}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADDerivedAnalysis::~ADDerivedAnalysis() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADDerivedAnalysis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.amv_.~RepeatedPtrField();
  _impl_.arbr_.~RepeatedPtrField();
  _impl_.bias_.~RepeatedPtrField();
  _impl_.boll_.~RepeatedPtrField();
  _impl_.cr_.~RepeatedPtrField();
  _impl_.vmama_.~RepeatedPtrField();
  _impl_.vr_.~RepeatedPtrField();
  _impl_.wr_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
}

void ADDerivedAnalysis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADDerivedAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amv_.Clear();
  _impl_.arbr_.Clear();
  _impl_.bias_.Clear();
  _impl_.boll_.Clear();
  _impl_.cr_.Clear();
  _impl_.vmama_.Clear();
  _impl_.vr_.Clear();
  _impl_.wr_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADDerivedAnalysis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADDerivedAnalysis.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADDerivedAnalysis.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 NumTrades = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastPx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenPx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighPx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowPx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IOPV = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.iopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreIOPV = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.preiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenInterest = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreOpenInterest = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.preopeninterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SettlePrice = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.settleprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreSettlePrice = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.presettleprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BBI = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.bbi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADAmv Amv = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_amv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADArBr ArBr = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_arbr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADBias Bias = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bias(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADBoll Boll = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_boll(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADCr Cr = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_cr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADVmaMa VmaMa = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vmama(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<370>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADVr Vr = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<378>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADWr Wr = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_wr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADDerivedAnalysis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADDerivedAnalysis.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADDerivedAnalysis.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int64 NumTrades = 8;
  if (this->_internal_numtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_numtrades(), target);
  }

  // int64 TotalVolumeTrade = 9;
  if (this->_internal_totalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 10;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_totalvaluetrade(), target);
  }

  // int64 PreClosePx = 11;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_preclosepx(), target);
  }

  // int64 LastPx = 12;
  if (this->_internal_lastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_lastpx(), target);
  }

  // int64 OpenPx = 13;
  if (this->_internal_openpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_openpx(), target);
  }

  // int64 ClosePx = 14;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_closepx(), target);
  }

  // int64 HighPx = 15;
  if (this->_internal_highpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_highpx(), target);
  }

  // int64 LowPx = 16;
  if (this->_internal_lowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_lowpx(), target);
  }

  // int64 IOPV = 17;
  if (this->_internal_iopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_iopv(), target);
  }

  // int64 PreIOPV = 18;
  if (this->_internal_preiopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_preiopv(), target);
  }

  // int64 OpenInterest = 19;
  if (this->_internal_openinterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_openinterest(), target);
  }

  // int64 PreOpenInterest = 20;
  if (this->_internal_preopeninterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(20, this->_internal_preopeninterest(), target);
  }

  // int64 SettlePrice = 21;
  if (this->_internal_settleprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_settleprice(), target);
  }

  // int64 PreSettlePrice = 22;
  if (this->_internal_presettleprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_presettleprice(), target);
  }

  // int32 ExchangeDate = 23;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 24;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_exchangetime(), target);
  }

  // int64 BBI = 40;
  if (this->_internal_bbi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(40, this->_internal_bbi(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADAmv Amv = 41;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_amv_size()); i < n; i++) {
    const auto& repfield = this->_internal_amv(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADArBr ArBr = 42;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arbr_size()); i < n; i++) {
    const auto& repfield = this->_internal_arbr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADBias Bias = 43;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bias_size()); i < n; i++) {
    const auto& repfield = this->_internal_bias(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADBoll Boll = 44;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boll_size()); i < n; i++) {
    const auto& repfield = this->_internal_boll(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADCr Cr = 45;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cr_size()); i < n; i++) {
    const auto& repfield = this->_internal_cr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADVmaMa VmaMa = 46;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vmama_size()); i < n; i++) {
    const auto& repfield = this->_internal_vmama(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(46, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADVr Vr = 47;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vr_size()); i < n; i++) {
    const auto& repfield = this->_internal_vr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(47, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADWr Wr = 48;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wr_size()); i < n; i++) {
    const auto& repfield = this->_internal_wr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 49;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(49, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  return target;
}

size_t ADDerivedAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADAmv Amv = 41;
  total_size += 2UL * this->_internal_amv_size();
  for (const auto& msg : this->_impl_.amv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADArBr ArBr = 42;
  total_size += 2UL * this->_internal_arbr_size();
  for (const auto& msg : this->_impl_.arbr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADBias Bias = 43;
  total_size += 2UL * this->_internal_bias_size();
  for (const auto& msg : this->_impl_.bias_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADBoll Boll = 44;
  total_size += 2UL * this->_internal_boll_size();
  for (const auto& msg : this->_impl_.boll_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADCr Cr = 45;
  total_size += 2UL * this->_internal_cr_size();
  for (const auto& msg : this->_impl_.cr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADVmaMa VmaMa = 46;
  total_size += 2UL * this->_internal_vmama_size();
  for (const auto& msg : this->_impl_.vmama_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADVr Vr = 47;
  total_size += 2UL * this->_internal_vr_size();
  for (const auto& msg : this->_impl_.vr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADWr Wr = 48;
  total_size += 2UL * this->_internal_wr_size();
  for (const auto& msg : this->_impl_.wr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 NumTrades = 8;
  if (this->_internal_numtrades() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numtrades());
  }

  // int64 TotalVolumeTrade = 9;
  if (this->_internal_totalvolumetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvolumetrade());
  }

  // int64 TotalValueTrade = 10;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 PreClosePx = 11;
  if (this->_internal_preclosepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preclosepx());
  }

  // int64 LastPx = 12;
  if (this->_internal_lastpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpx());
  }

  // int64 OpenPx = 13;
  if (this->_internal_openpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openpx());
  }

  // int64 ClosePx = 14;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  // int64 HighPx = 15;
  if (this->_internal_highpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highpx());
  }

  // int64 LowPx = 16;
  if (this->_internal_lowpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lowpx());
  }

  // int64 IOPV = 17;
  if (this->_internal_iopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_iopv());
  }

  // int64 PreIOPV = 18;
  if (this->_internal_preiopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preiopv());
  }

  // int64 OpenInterest = 19;
  if (this->_internal_openinterest() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_openinterest());
  }

  // int64 PreOpenInterest = 20;
  if (this->_internal_preopeninterest() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preopeninterest());
  }

  // int64 SettlePrice = 21;
  if (this->_internal_settleprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_settleprice());
  }

  // int64 PreSettlePrice = 22;
  if (this->_internal_presettleprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_presettleprice());
  }

  // int32 ExchangeDate = 23;
  if (this->_internal_exchangedate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 24;
  if (this->_internal_exchangetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangetime());
  }

  // int64 BBI = 40;
  if (this->_internal_bbi() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_bbi());
  }

  // int32 DataMultiplePowerOf10 = 49;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADDerivedAnalysis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADDerivedAnalysis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADDerivedAnalysis::GetClassData() const { return &_class_data_; }


void ADDerivedAnalysis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADDerivedAnalysis*>(&to_msg);
  auto& from = static_cast<const ADDerivedAnalysis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.amv_.MergeFrom(from._impl_.amv_);
  _this->_impl_.arbr_.MergeFrom(from._impl_.arbr_);
  _this->_impl_.bias_.MergeFrom(from._impl_.bias_);
  _this->_impl_.boll_.MergeFrom(from._impl_.boll_);
  _this->_impl_.cr_.MergeFrom(from._impl_.cr_);
  _this->_impl_.vmama_.MergeFrom(from._impl_.vmama_);
  _this->_impl_.vr_.MergeFrom(from._impl_.vr_);
  _this->_impl_.wr_.MergeFrom(from._impl_.wr_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_numtrades() != 0) {
    _this->_internal_set_numtrades(from._internal_numtrades());
  }
  if (from._internal_totalvolumetrade() != 0) {
    _this->_internal_set_totalvolumetrade(from._internal_totalvolumetrade());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_lastpx() != 0) {
    _this->_internal_set_lastpx(from._internal_lastpx());
  }
  if (from._internal_openpx() != 0) {
    _this->_internal_set_openpx(from._internal_openpx());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_highpx() != 0) {
    _this->_internal_set_highpx(from._internal_highpx());
  }
  if (from._internal_lowpx() != 0) {
    _this->_internal_set_lowpx(from._internal_lowpx());
  }
  if (from._internal_iopv() != 0) {
    _this->_internal_set_iopv(from._internal_iopv());
  }
  if (from._internal_preiopv() != 0) {
    _this->_internal_set_preiopv(from._internal_preiopv());
  }
  if (from._internal_openinterest() != 0) {
    _this->_internal_set_openinterest(from._internal_openinterest());
  }
  if (from._internal_preopeninterest() != 0) {
    _this->_internal_set_preopeninterest(from._internal_preopeninterest());
  }
  if (from._internal_settleprice() != 0) {
    _this->_internal_set_settleprice(from._internal_settleprice());
  }
  if (from._internal_presettleprice() != 0) {
    _this->_internal_set_presettleprice(from._internal_presettleprice());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_bbi() != 0) {
    _this->_internal_set_bbi(from._internal_bbi());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADDerivedAnalysis::CopyFrom(const ADDerivedAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADDerivedAnalysis::IsInitialized() const {
  return true;
}

void ADDerivedAnalysis::InternalSwap(ADDerivedAnalysis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.amv_.InternalSwap(&other->_impl_.amv_);
  _impl_.arbr_.InternalSwap(&other->_impl_.arbr_);
  _impl_.bias_.InternalSwap(&other->_impl_.bias_);
  _impl_.boll_.InternalSwap(&other->_impl_.boll_);
  _impl_.cr_.InternalSwap(&other->_impl_.cr_);
  _impl_.vmama_.InternalSwap(&other->_impl_.vmama_);
  _impl_.vr_.InternalSwap(&other->_impl_.vr_);
  _impl_.wr_.InternalSwap(&other->_impl_.wr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADDerivedAnalysis, _impl_.datamultiplepowerof10_)
      + sizeof(ADDerivedAnalysis::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(ADDerivedAnalysis, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADDerivedAnalysis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[0]);
}

// ===================================================================

class ADAmv::_Internal {
 public:
};

ADAmv::ADAmv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADAmv)
}
ADAmv::ADAmv(const ADAmv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADAmv* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amv_){}
    , decltype(_impl_.nvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amv_, &from._impl_.amv_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nvalue_) -
    reinterpret_cast<char*>(&_impl_.amv_)) + sizeof(_impl_.nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADAmv)
}

inline void ADAmv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amv_){int64_t{0}}
    , decltype(_impl_.nvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADAmv::~ADAmv() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADAmv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADAmv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADAmv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADAmv::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADAmv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.amv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nvalue_) -
      reinterpret_cast<char*>(&_impl_.amv_)) + sizeof(_impl_.nvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADAmv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Amv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADAmv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADAmv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nvalue(), target);
  }

  // int64 Amv = 2;
  if (this->_internal_amv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_amv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADAmv)
  return target;
}

size_t ADAmv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADAmv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Amv = 2;
  if (this->_internal_amv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amv());
  }

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADAmv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADAmv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADAmv::GetClassData() const { return &_class_data_; }


void ADAmv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADAmv*>(&to_msg);
  auto& from = static_cast<const ADAmv&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADAmv)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_amv() != 0) {
    _this->_internal_set_amv(from._internal_amv());
  }
  if (from._internal_nvalue() != 0) {
    _this->_internal_set_nvalue(from._internal_nvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADAmv::CopyFrom(const ADAmv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADAmv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADAmv::IsInitialized() const {
  return true;
}

void ADAmv::InternalSwap(ADAmv* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADAmv, _impl_.nvalue_)
      + sizeof(ADAmv::_impl_.nvalue_)
      - PROTOBUF_FIELD_OFFSET(ADAmv, _impl_.amv_)>(
          reinterpret_cast<char*>(&_impl_.amv_),
          reinterpret_cast<char*>(&other->_impl_.amv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADAmv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[1]);
}

// ===================================================================

class ADArBr::_Internal {
 public:
};

ADArBr::ADArBr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADArBr)
}
ADArBr::ADArBr(const ADArBr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADArBr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ar_){}
    , decltype(_impl_.br_){}
    , decltype(_impl_.nvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ar_, &from._impl_.ar_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nvalue_) -
    reinterpret_cast<char*>(&_impl_.ar_)) + sizeof(_impl_.nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADArBr)
}

inline void ADArBr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ar_){int64_t{0}}
    , decltype(_impl_.br_){int64_t{0}}
    , decltype(_impl_.nvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADArBr::~ADArBr() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADArBr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADArBr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADArBr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADArBr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADArBr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nvalue_) -
      reinterpret_cast<char*>(&_impl_.ar_)) + sizeof(_impl_.nvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADArBr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Br = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.br_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADArBr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADArBr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nvalue(), target);
  }

  // int64 Ar = 2;
  if (this->_internal_ar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ar(), target);
  }

  // int64 Br = 3;
  if (this->_internal_br() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_br(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADArBr)
  return target;
}

size_t ADArBr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADArBr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Ar = 2;
  if (this->_internal_ar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ar());
  }

  // int64 Br = 3;
  if (this->_internal_br() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_br());
  }

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADArBr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADArBr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADArBr::GetClassData() const { return &_class_data_; }


void ADArBr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADArBr*>(&to_msg);
  auto& from = static_cast<const ADArBr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADArBr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ar() != 0) {
    _this->_internal_set_ar(from._internal_ar());
  }
  if (from._internal_br() != 0) {
    _this->_internal_set_br(from._internal_br());
  }
  if (from._internal_nvalue() != 0) {
    _this->_internal_set_nvalue(from._internal_nvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADArBr::CopyFrom(const ADArBr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADArBr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADArBr::IsInitialized() const {
  return true;
}

void ADArBr::InternalSwap(ADArBr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADArBr, _impl_.nvalue_)
      + sizeof(ADArBr::_impl_.nvalue_)
      - PROTOBUF_FIELD_OFFSET(ADArBr, _impl_.ar_)>(
          reinterpret_cast<char*>(&_impl_.ar_),
          reinterpret_cast<char*>(&other->_impl_.ar_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADArBr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[2]);
}

// ===================================================================

class ADBias::_Internal {
 public:
};

ADBias::ADBias(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADBias)
}
ADBias::ADBias(const ADBias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADBias* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bias_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.nvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bias_, &from._impl_.bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nvalue_) -
    reinterpret_cast<char*>(&_impl_.bias_)) + sizeof(_impl_.nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADBias)
}

inline void ADBias::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bias_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.nvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADBias::~ADBias() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADBias)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADBias::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADBias::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADBias::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADBias)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nvalue_) -
      reinterpret_cast<char*>(&_impl_.bias_)) + sizeof(_impl_.nvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADBias::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADBias::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADBias)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nvalue(), target);
  }

  // int64 Bias = 2;
  if (this->_internal_bias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_bias(), target);
  }

  // int64 ClosePx = 3;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_closepx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADBias)
  return target;
}

size_t ADBias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADBias)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Bias = 2;
  if (this->_internal_bias() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bias());
  }

  // int64 ClosePx = 3;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADBias::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADBias::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADBias::GetClassData() const { return &_class_data_; }


void ADBias::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADBias*>(&to_msg);
  auto& from = static_cast<const ADBias&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADBias)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bias() != 0) {
    _this->_internal_set_bias(from._internal_bias());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_nvalue() != 0) {
    _this->_internal_set_nvalue(from._internal_nvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADBias::CopyFrom(const ADBias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADBias::IsInitialized() const {
  return true;
}

void ADBias::InternalSwap(ADBias* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADBias, _impl_.nvalue_)
      + sizeof(ADBias::_impl_.nvalue_)
      - PROTOBUF_FIELD_OFFSET(ADBias, _impl_.bias_)>(
          reinterpret_cast<char*>(&_impl_.bias_),
          reinterpret_cast<char*>(&other->_impl_.bias_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADBias::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[3]);
}

// ===================================================================

class ADBoll::_Internal {
 public:
};

ADBoll::ADBoll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADBoll)
}
ADBoll::ADBoll(const ADBoll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADBoll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nvalue_){}
    , decltype(_impl_.pvalue_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.upper_){}
    , decltype(_impl_.lower_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nvalue_, &from._impl_.nvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lower_) -
    reinterpret_cast<char*>(&_impl_.nvalue_)) + sizeof(_impl_.lower_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADBoll)
}

inline void ADBoll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nvalue_){0}
    , decltype(_impl_.pvalue_){0}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.upper_){int64_t{0}}
    , decltype(_impl_.lower_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADBoll::~ADBoll() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADBoll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADBoll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADBoll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADBoll::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADBoll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.nvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lower_) -
      reinterpret_cast<char*>(&_impl_.nvalue_)) + sizeof(_impl_.lower_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADBoll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Mid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Upper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Lower = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADBoll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADBoll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nvalue(), target);
  }

  // int32 PValue = 2;
  if (this->_internal_pvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pvalue(), target);
  }

  // int64 Mid = 3;
  if (this->_internal_mid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_mid(), target);
  }

  // int64 Upper = 4;
  if (this->_internal_upper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_upper(), target);
  }

  // int64 Lower = 5;
  if (this->_internal_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_lower(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADBoll)
  return target;
}

size_t ADBoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADBoll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nvalue());
  }

  // int32 PValue = 2;
  if (this->_internal_pvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pvalue());
  }

  // int64 Mid = 3;
  if (this->_internal_mid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  // int64 Upper = 4;
  if (this->_internal_upper() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_upper());
  }

  // int64 Lower = 5;
  if (this->_internal_lower() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lower());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADBoll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADBoll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADBoll::GetClassData() const { return &_class_data_; }


void ADBoll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADBoll*>(&to_msg);
  auto& from = static_cast<const ADBoll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADBoll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nvalue() != 0) {
    _this->_internal_set_nvalue(from._internal_nvalue());
  }
  if (from._internal_pvalue() != 0) {
    _this->_internal_set_pvalue(from._internal_pvalue());
  }
  if (from._internal_mid() != 0) {
    _this->_internal_set_mid(from._internal_mid());
  }
  if (from._internal_upper() != 0) {
    _this->_internal_set_upper(from._internal_upper());
  }
  if (from._internal_lower() != 0) {
    _this->_internal_set_lower(from._internal_lower());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADBoll::CopyFrom(const ADBoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADBoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADBoll::IsInitialized() const {
  return true;
}

void ADBoll::InternalSwap(ADBoll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADBoll, _impl_.lower_)
      + sizeof(ADBoll::_impl_.lower_)
      - PROTOBUF_FIELD_OFFSET(ADBoll, _impl_.nvalue_)>(
          reinterpret_cast<char*>(&_impl_.nvalue_),
          reinterpret_cast<char*>(&other->_impl_.nvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADBoll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[4]);
}

// ===================================================================

class ADCr::_Internal {
 public:
};

ADCr::ADCr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADCr)
}
ADCr::ADCr(const ADCr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADCr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cr_){}
    , decltype(_impl_.p1_){}
    , decltype(_impl_.p2_){}
    , decltype(_impl_.ym_){}
    , decltype(_impl_.nvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cr_, &from._impl_.cr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nvalue_) -
    reinterpret_cast<char*>(&_impl_.cr_)) + sizeof(_impl_.nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADCr)
}

inline void ADCr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cr_){int64_t{0}}
    , decltype(_impl_.p1_){int64_t{0}}
    , decltype(_impl_.p2_){int64_t{0}}
    , decltype(_impl_.ym_){int64_t{0}}
    , decltype(_impl_.nvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADCr::~ADCr() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADCr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADCr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADCr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADCr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADCr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nvalue_) -
      reinterpret_cast<char*>(&_impl_.cr_)) + sizeof(_impl_.nvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Cr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 P1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.p1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 P2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.p2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 YM = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADCr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nvalue(), target);
  }

  // int64 Cr = 2;
  if (this->_internal_cr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_cr(), target);
  }

  // int64 P1 = 3;
  if (this->_internal_p1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_p1(), target);
  }

  // int64 P2 = 4;
  if (this->_internal_p2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_p2(), target);
  }

  // int64 YM = 5;
  if (this->_internal_ym() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_ym(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADCr)
  return target;
}

size_t ADCr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADCr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Cr = 2;
  if (this->_internal_cr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cr());
  }

  // int64 P1 = 3;
  if (this->_internal_p1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_p1());
  }

  // int64 P2 = 4;
  if (this->_internal_p2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_p2());
  }

  // int64 YM = 5;
  if (this->_internal_ym() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ym());
  }

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADCr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCr::GetClassData() const { return &_class_data_; }


void ADCr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADCr*>(&to_msg);
  auto& from = static_cast<const ADCr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADCr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cr() != 0) {
    _this->_internal_set_cr(from._internal_cr());
  }
  if (from._internal_p1() != 0) {
    _this->_internal_set_p1(from._internal_p1());
  }
  if (from._internal_p2() != 0) {
    _this->_internal_set_p2(from._internal_p2());
  }
  if (from._internal_ym() != 0) {
    _this->_internal_set_ym(from._internal_ym());
  }
  if (from._internal_nvalue() != 0) {
    _this->_internal_set_nvalue(from._internal_nvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCr::CopyFrom(const ADCr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADCr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCr::IsInitialized() const {
  return true;
}

void ADCr::InternalSwap(ADCr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCr, _impl_.nvalue_)
      + sizeof(ADCr::_impl_.nvalue_)
      - PROTOBUF_FIELD_OFFSET(ADCr, _impl_.cr_)>(
          reinterpret_cast<char*>(&_impl_.cr_),
          reinterpret_cast<char*>(&other->_impl_.cr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[5]);
}

// ===================================================================

class ADVmaMa::_Internal {
 public:
};

ADVmaMa::ADVmaMa(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADVmaMa)
}
ADVmaMa::ADVmaMa(const ADVmaMa& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVmaMa* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nvalue_){}
    , decltype(_impl_.vma_){}
    , decltype(_impl_.ma_){}
    , decltype(_impl_.periodtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nvalue_, &from._impl_.nvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.periodtype_) -
    reinterpret_cast<char*>(&_impl_.nvalue_)) + sizeof(_impl_.periodtype_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADVmaMa)
}

inline void ADVmaMa::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nvalue_){int64_t{0}}
    , decltype(_impl_.vma_){int64_t{0}}
    , decltype(_impl_.ma_){int64_t{0}}
    , decltype(_impl_.periodtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADVmaMa::~ADVmaMa() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADVmaMa)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVmaMa::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADVmaMa::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVmaMa::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADVmaMa)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.nvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.periodtype_) -
      reinterpret_cast<char*>(&_impl_.nvalue_)) + sizeof(_impl_.periodtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVmaMa::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Vma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PeriodType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.periodtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVmaMa::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADVmaMa)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_nvalue(), target);
  }

  // int64 Vma = 2;
  if (this->_internal_vma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_vma(), target);
  }

  // int64 Ma = 3;
  if (this->_internal_ma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ma(), target);
  }

  // int32 PeriodType = 4;
  if (this->_internal_periodtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_periodtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADVmaMa)
  return target;
}

size_t ADVmaMa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADVmaMa)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nvalue());
  }

  // int64 Vma = 2;
  if (this->_internal_vma() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_vma());
  }

  // int64 Ma = 3;
  if (this->_internal_ma() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ma());
  }

  // int32 PeriodType = 4;
  if (this->_internal_periodtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_periodtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVmaMa::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVmaMa::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVmaMa::GetClassData() const { return &_class_data_; }


void ADVmaMa::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVmaMa*>(&to_msg);
  auto& from = static_cast<const ADVmaMa&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADVmaMa)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nvalue() != 0) {
    _this->_internal_set_nvalue(from._internal_nvalue());
  }
  if (from._internal_vma() != 0) {
    _this->_internal_set_vma(from._internal_vma());
  }
  if (from._internal_ma() != 0) {
    _this->_internal_set_ma(from._internal_ma());
  }
  if (from._internal_periodtype() != 0) {
    _this->_internal_set_periodtype(from._internal_periodtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVmaMa::CopyFrom(const ADVmaMa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADVmaMa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVmaMa::IsInitialized() const {
  return true;
}

void ADVmaMa::InternalSwap(ADVmaMa* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADVmaMa, _impl_.periodtype_)
      + sizeof(ADVmaMa::_impl_.periodtype_)
      - PROTOBUF_FIELD_OFFSET(ADVmaMa, _impl_.nvalue_)>(
          reinterpret_cast<char*>(&_impl_.nvalue_),
          reinterpret_cast<char*>(&other->_impl_.nvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVmaMa::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[6]);
}

// ===================================================================

class ADVr::_Internal {
 public:
};

ADVr::ADVr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADVr)
}
ADVr::ADVr(const ADVr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vr_){}
    , decltype(_impl_.avs_){}
    , decltype(_impl_.bvs_){}
    , decltype(_impl_.cvs_){}
    , decltype(_impl_.nvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vr_, &from._impl_.vr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nvalue_) -
    reinterpret_cast<char*>(&_impl_.vr_)) + sizeof(_impl_.nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADVr)
}

inline void ADVr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vr_){int64_t{0}}
    , decltype(_impl_.avs_){int64_t{0}}
    , decltype(_impl_.bvs_){int64_t{0}}
    , decltype(_impl_.cvs_){int64_t{0}}
    , decltype(_impl_.nvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADVr::~ADVr() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADVr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADVr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADVr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nvalue_) -
      reinterpret_cast<char*>(&_impl_.vr_)) + sizeof(_impl_.nvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 VR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AVS = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.avs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BVS = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bvs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CVS = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cvs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADVr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nvalue(), target);
  }

  // int64 VR = 2;
  if (this->_internal_vr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_vr(), target);
  }

  // int64 AVS = 3;
  if (this->_internal_avs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_avs(), target);
  }

  // int64 BVS = 4;
  if (this->_internal_bvs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_bvs(), target);
  }

  // int64 CVS = 5;
  if (this->_internal_cvs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_cvs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADVr)
  return target;
}

size_t ADVr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADVr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 VR = 2;
  if (this->_internal_vr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_vr());
  }

  // int64 AVS = 3;
  if (this->_internal_avs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_avs());
  }

  // int64 BVS = 4;
  if (this->_internal_bvs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bvs());
  }

  // int64 CVS = 5;
  if (this->_internal_cvs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cvs());
  }

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVr::GetClassData() const { return &_class_data_; }


void ADVr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVr*>(&to_msg);
  auto& from = static_cast<const ADVr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADVr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vr() != 0) {
    _this->_internal_set_vr(from._internal_vr());
  }
  if (from._internal_avs() != 0) {
    _this->_internal_set_avs(from._internal_avs());
  }
  if (from._internal_bvs() != 0) {
    _this->_internal_set_bvs(from._internal_bvs());
  }
  if (from._internal_cvs() != 0) {
    _this->_internal_set_cvs(from._internal_cvs());
  }
  if (from._internal_nvalue() != 0) {
    _this->_internal_set_nvalue(from._internal_nvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVr::CopyFrom(const ADVr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADVr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVr::IsInitialized() const {
  return true;
}

void ADVr::InternalSwap(ADVr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADVr, _impl_.nvalue_)
      + sizeof(ADVr::_impl_.nvalue_)
      - PROTOBUF_FIELD_OFFSET(ADVr, _impl_.vr_)>(
          reinterpret_cast<char*>(&_impl_.vr_),
          reinterpret_cast<char*>(&other->_impl_.vr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[7]);
}

// ===================================================================

class ADWr::_Internal {
 public:
};

ADWr::ADWr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADWr)
}
ADWr::ADWr(const ADWr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADWr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wr_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.nhighpx_){}
    , decltype(_impl_.nlowpx_){}
    , decltype(_impl_.nvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wr_, &from._impl_.wr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nvalue_) -
    reinterpret_cast<char*>(&_impl_.wr_)) + sizeof(_impl_.nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADWr)
}

inline void ADWr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wr_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.nhighpx_){int64_t{0}}
    , decltype(_impl_.nlowpx_){int64_t{0}}
    , decltype(_impl_.nvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADWr::~ADWr() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADWr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADWr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADWr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADWr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADWr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.wr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nvalue_) -
      reinterpret_cast<char*>(&_impl_.wr_)) + sizeof(_impl_.nvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADWr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Wr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.wr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NHighPx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.nhighpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NLowPx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.nlowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADWr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADWr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nvalue(), target);
  }

  // int64 Wr = 2;
  if (this->_internal_wr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_wr(), target);
  }

  // int64 ClosePx = 3;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_closepx(), target);
  }

  // int64 NHighPx = 4;
  if (this->_internal_nhighpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_nhighpx(), target);
  }

  // int64 NLowPx = 5;
  if (this->_internal_nlowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_nlowpx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADWr)
  return target;
}

size_t ADWr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADWr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Wr = 2;
  if (this->_internal_wr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_wr());
  }

  // int64 ClosePx = 3;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  // int64 NHighPx = 4;
  if (this->_internal_nhighpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nhighpx());
  }

  // int64 NLowPx = 5;
  if (this->_internal_nlowpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nlowpx());
  }

  // int32 NValue = 1;
  if (this->_internal_nvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADWr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADWr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADWr::GetClassData() const { return &_class_data_; }


void ADWr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADWr*>(&to_msg);
  auto& from = static_cast<const ADWr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADWr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_wr() != 0) {
    _this->_internal_set_wr(from._internal_wr());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_nhighpx() != 0) {
    _this->_internal_set_nhighpx(from._internal_nhighpx());
  }
  if (from._internal_nlowpx() != 0) {
    _this->_internal_set_nlowpx(from._internal_nlowpx());
  }
  if (from._internal_nvalue() != 0) {
    _this->_internal_set_nvalue(from._internal_nvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADWr::CopyFrom(const ADWr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADWr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADWr::IsInitialized() const {
  return true;
}

void ADWr::InternalSwap(ADWr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADWr, _impl_.nvalue_)
      + sizeof(ADWr::_impl_.nvalue_)
      - PROTOBUF_FIELD_OFFSET(ADWr, _impl_.wr_)>(
          reinterpret_cast<char*>(&_impl_.wr_),
          reinterpret_cast<char*>(&other->_impl_.wr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADWr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADDerivedAnalysis_2eproto_getter, &descriptor_table_ADDerivedAnalysis_2eproto_once,
      file_level_metadata_ADDerivedAnalysis_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADDerivedAnalysis*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADDerivedAnalysis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADDerivedAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADAmv*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADAmv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADAmv >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADArBr*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADArBr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADArBr >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADBias*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADBias >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADBias >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADBoll*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADBoll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADBoll >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADCr*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADCr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADCr >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADVmaMa*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADVmaMa >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADVmaMa >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADVr*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADVr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADVr >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADWr*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADWr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADWr >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
