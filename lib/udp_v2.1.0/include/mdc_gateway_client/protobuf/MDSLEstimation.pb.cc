// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDSLEstimation.proto

#include "MDSLEstimation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDSLEstimation::MDSLEstimation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.longtermlends_)*/{}
  , /*decltype(_impl_.validborrows_)*/{}
  , /*decltype(_impl_.validalends_)*/{}
  , /*decltype(_impl_.validblends_)*/{}
  , /*decltype(_impl_.borrows_)*/{}
  , /*decltype(_impl_.alends_)*/{}
  , /*decltype(_impl_.blends_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.lastpx_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.htscvolume_)*/int64_t{0}
  , /*decltype(_impl_.prehtscvolume_)*/int64_t{0}
  , /*decltype(_impl_.weightedrate_)*/int64_t{0}
  , /*decltype(_impl_.preweightedrate_)*/int64_t{0}
  , /*decltype(_impl_.bestborrowrate_)*/int64_t{0}
  , /*decltype(_impl_.bestlendrate_)*/int64_t{0}
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDSLEstimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDSLEstimationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDSLEstimationDefaultTypeInternal() {}
  union {
    MDSLEstimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDSLEstimationDefaultTypeInternal _MDSLEstimation_default_instance_;
PROTOBUF_CONSTEXPR ADSLEstimationEntry::ADSLEstimationEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rate_)*/int64_t{0}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.postponeprobability_)*/0
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADSLEstimationEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADSLEstimationEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADSLEstimationEntryDefaultTypeInternal() {}
  union {
    ADSLEstimationEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADSLEstimationEntryDefaultTypeInternal _ADSLEstimationEntry_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDSLEstimation_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDSLEstimation_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDSLEstimation_2eproto = nullptr;

const uint32_t TableStruct_MDSLEstimation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.longtermlends_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.htscvolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.prehtscvolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.weightedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.preweightedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.bestborrowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.bestlendrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.validborrows_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.validalends_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.validblends_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.borrows_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.alends_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSLEstimation, _impl_.blends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADSLEstimationEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADSLEstimationEntry, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADSLEstimationEntry, _impl_.rate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADSLEstimationEntry, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADSLEstimationEntry, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADSLEstimationEntry, _impl_.postponeprobability_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDSLEstimation)},
  { 31, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADSLEstimationEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDSLEstimation_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADSLEstimationEntry_default_instance_._instance,
};

const char descriptor_table_protodef_MDSLEstimation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024MDSLEstimation.proto\022\032com.htsc.mdc.ins"
  "ight.model\032\027ESecurityIDSource.proto\032\023ESe"
  "curityType.proto\032\027MDSecurityLending.prot"
  "o\"\341\007\n\016MDSLEstimation\022\026\n\016HTSCSecurityID\030\001"
  " \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\r"
  "DataTimestamp\030\004 \001(\003\022\030\n\020TradingPhaseCode\030"
  "\005 \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%.com.ht"
  "sc.mdc.model.ESecurityIDSource\0227\n\014securi"
  "tyType\030\007 \001(\0162!.com.htsc.mdc.model.ESecur"
  "ityType\022\035\n\025DataMultiplePowerOf10\030\010 \001(\005\022F"
  "\n\rLongTermLends\030\t \003(\0132/.com.htsc.mdc.ins"
  "ight.model.ADSLEstimationEntry\022\016\n\006LastPx"
  "\030\n \001(\003\022\022\n\nPreClosePx\030\013 \001(\003\022\020\n\010HighRate\030\014"
  " \001(\003\022\017\n\007LowRate\030\r \001(\003\022\022\n\nHtscVolume\030\016 \001("
  "\003\022\025\n\rPreHtscVolume\030\017 \001(\003\022\024\n\014WeightedRate"
  "\030\020 \001(\003\022\027\n\017PreWeightedRate\030\021 \001(\003\022\026\n\016BestB"
  "orrowRate\030\022 \001(\003\022\024\n\014BestLendRate\030\023 \001(\003\022M\n"
  "\014ValidBorrows\030\024 \003(\01327.com.htsc.mdc.insig"
  "ht.model.ADValidSecurityLendingEntry\022L\n\013"
  "ValidALends\030\025 \003(\01327.com.htsc.mdc.insight"
  ".model.ADValidSecurityLendingEntry\022L\n\013Va"
  "lidBLends\030\026 \003(\01327.com.htsc.mdc.insight.m"
  "odel.ADValidSecurityLendingEntry\022C\n\007Borr"
  "ows\030\027 \003(\01322.com.htsc.mdc.insight.model.A"
  "DSecurityLendingEntry\022B\n\006ALends\030\030 \003(\01322."
  "com.htsc.mdc.insight.model.ADSecurityLen"
  "dingEntry\022B\n\006BLends\030\031 \003(\01322.com.htsc.mdc"
  ".insight.model.ADSecurityLendingEntry\"m\n"
  "\023ADSLEstimationEntry\022\r\n\005Level\030\001 \001(\005\022\014\n\004R"
  "ate\030\002 \001(\003\022\014\n\004Term\030\003 \001(\t\022\016\n\006Amount\030\004 \001(\003\022"
  "\033\n\023PostponeProbability\030\005 \001(\005B7\n\032com.htsc"
  ".mdc.insight.modelB\024MDSLEstimationProtos"
  "H\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDSLEstimation_2eproto_deps[3] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
  &::descriptor_table_MDSecurityLending_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDSLEstimation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDSLEstimation_2eproto = {
    false, false, 1293, descriptor_table_protodef_MDSLEstimation_2eproto,
    "MDSLEstimation.proto",
    &descriptor_table_MDSLEstimation_2eproto_once, descriptor_table_MDSLEstimation_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_MDSLEstimation_2eproto::offsets,
    file_level_metadata_MDSLEstimation_2eproto, file_level_enum_descriptors_MDSLEstimation_2eproto,
    file_level_service_descriptors_MDSLEstimation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDSLEstimation_2eproto_getter() {
  return &descriptor_table_MDSLEstimation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDSLEstimation_2eproto(&descriptor_table_MDSLEstimation_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDSLEstimation::_Internal {
 public:
};

void MDSLEstimation::clear_validborrows() {
  _impl_.validborrows_.Clear();
}
void MDSLEstimation::clear_validalends() {
  _impl_.validalends_.Clear();
}
void MDSLEstimation::clear_validblends() {
  _impl_.validblends_.Clear();
}
void MDSLEstimation::clear_borrows() {
  _impl_.borrows_.Clear();
}
void MDSLEstimation::clear_alends() {
  _impl_.alends_.Clear();
}
void MDSLEstimation::clear_blends() {
  _impl_.blends_.Clear();
}
MDSLEstimation::MDSLEstimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDSLEstimation)
}
MDSLEstimation::MDSLEstimation(const MDSLEstimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDSLEstimation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.longtermlends_){from._impl_.longtermlends_}
    , decltype(_impl_.validborrows_){from._impl_.validborrows_}
    , decltype(_impl_.validalends_){from._impl_.validalends_}
    , decltype(_impl_.validblends_){from._impl_.validblends_}
    , decltype(_impl_.borrows_){from._impl_.borrows_}
    , decltype(_impl_.alends_){from._impl_.alends_}
    , decltype(_impl_.blends_){from._impl_.blends_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.lastpx_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.htscvolume_){}
    , decltype(_impl_.prehtscvolume_){}
    , decltype(_impl_.weightedrate_){}
    , decltype(_impl_.preweightedrate_){}
    , decltype(_impl_.bestborrowrate_){}
    , decltype(_impl_.bestlendrate_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDSLEstimation)
}

inline void MDSLEstimation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.longtermlends_){arena}
    , decltype(_impl_.validborrows_){arena}
    , decltype(_impl_.validalends_){arena}
    , decltype(_impl_.validblends_){arena}
    , decltype(_impl_.borrows_){arena}
    , decltype(_impl_.alends_){arena}
    , decltype(_impl_.blends_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.lastpx_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.htscvolume_){int64_t{0}}
    , decltype(_impl_.prehtscvolume_){int64_t{0}}
    , decltype(_impl_.weightedrate_){int64_t{0}}
    , decltype(_impl_.preweightedrate_){int64_t{0}}
    , decltype(_impl_.bestborrowrate_){int64_t{0}}
    , decltype(_impl_.bestlendrate_){int64_t{0}}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDSLEstimation::~MDSLEstimation() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDSLEstimation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDSLEstimation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.longtermlends_.~RepeatedPtrField();
  _impl_.validborrows_.~RepeatedPtrField();
  _impl_.validalends_.~RepeatedPtrField();
  _impl_.validblends_.~RepeatedPtrField();
  _impl_.borrows_.~RepeatedPtrField();
  _impl_.alends_.~RepeatedPtrField();
  _impl_.blends_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
}

void MDSLEstimation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDSLEstimation::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDSLEstimation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.longtermlends_.Clear();
  _impl_.validborrows_.Clear();
  _impl_.validalends_.Clear();
  _impl_.validblends_.Clear();
  _impl_.borrows_.Clear();
  _impl_.alends_.Clear();
  _impl_.blends_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDSLEstimation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDSLEstimation.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDSLEstimation.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADSLEstimationEntry LongTermLends = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_longtermlends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 LastPx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HtscVolume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.htscvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreHtscVolume = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.prehtscvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedRate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.weightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreWeightedRate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.preweightedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BestBorrowRate = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.bestborrowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BestLendRate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.bestlendrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidBorrows = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_validborrows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidALends = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_validalends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidBLends = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_validblends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry Borrows = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_borrows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry ALends = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_alends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry BLends = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_blends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDSLEstimation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDSLEstimation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDSLEstimation.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDSLEstimation.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int32 DataMultiplePowerOf10 = 8;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_datamultiplepowerof10(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADSLEstimationEntry LongTermLends = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_longtermlends_size()); i < n; i++) {
    const auto& repfield = this->_internal_longtermlends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 LastPx = 10;
  if (this->_internal_lastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastpx(), target);
  }

  // int64 PreClosePx = 11;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_preclosepx(), target);
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_highrate(), target);
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_lowrate(), target);
  }

  // int64 HtscVolume = 14;
  if (this->_internal_htscvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_htscvolume(), target);
  }

  // int64 PreHtscVolume = 15;
  if (this->_internal_prehtscvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_prehtscvolume(), target);
  }

  // int64 WeightedRate = 16;
  if (this->_internal_weightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_weightedrate(), target);
  }

  // int64 PreWeightedRate = 17;
  if (this->_internal_preweightedrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_preweightedrate(), target);
  }

  // int64 BestBorrowRate = 18;
  if (this->_internal_bestborrowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_bestborrowrate(), target);
  }

  // int64 BestLendRate = 19;
  if (this->_internal_bestlendrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_bestlendrate(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidBorrows = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validborrows_size()); i < n; i++) {
    const auto& repfield = this->_internal_validborrows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidALends = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validalends_size()); i < n; i++) {
    const auto& repfield = this->_internal_validalends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidBLends = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validblends_size()); i < n; i++) {
    const auto& repfield = this->_internal_validblends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry Borrows = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_borrows_size()); i < n; i++) {
    const auto& repfield = this->_internal_borrows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry ALends = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alends_size()); i < n; i++) {
    const auto& repfield = this->_internal_alends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry BLends = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blends_size()); i < n; i++) {
    const auto& repfield = this->_internal_blends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDSLEstimation)
  return target;
}

size_t MDSLEstimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDSLEstimation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADSLEstimationEntry LongTermLends = 9;
  total_size += 1UL * this->_internal_longtermlends_size();
  for (const auto& msg : this->_impl_.longtermlends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidBorrows = 20;
  total_size += 2UL * this->_internal_validborrows_size();
  for (const auto& msg : this->_impl_.validborrows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidALends = 21;
  total_size += 2UL * this->_internal_validalends_size();
  for (const auto& msg : this->_impl_.validalends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADValidSecurityLendingEntry ValidBLends = 22;
  total_size += 2UL * this->_internal_validblends_size();
  for (const auto& msg : this->_impl_.validblends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry Borrows = 23;
  total_size += 2UL * this->_internal_borrows_size();
  for (const auto& msg : this->_impl_.borrows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry ALends = 24;
  total_size += 2UL * this->_internal_alends_size();
  for (const auto& msg : this->_impl_.alends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADSecurityLendingEntry BLends = 25;
  total_size += 2UL * this->_internal_blends_size();
  for (const auto& msg : this->_impl_.blends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 LastPx = 10;
  if (this->_internal_lastpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpx());
  }

  // int64 PreClosePx = 11;
  if (this->_internal_preclosepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preclosepx());
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 HtscVolume = 14;
  if (this->_internal_htscvolume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_htscvolume());
  }

  // int64 PreHtscVolume = 15;
  if (this->_internal_prehtscvolume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_prehtscvolume());
  }

  // int64 WeightedRate = 16;
  if (this->_internal_weightedrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_weightedrate());
  }

  // int64 PreWeightedRate = 17;
  if (this->_internal_preweightedrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preweightedrate());
  }

  // int64 BestBorrowRate = 18;
  if (this->_internal_bestborrowrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_bestborrowrate());
  }

  // int64 BestLendRate = 19;
  if (this->_internal_bestlendrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_bestlendrate());
  }

  // int32 DataMultiplePowerOf10 = 8;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDSLEstimation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDSLEstimation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDSLEstimation::GetClassData() const { return &_class_data_; }


void MDSLEstimation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDSLEstimation*>(&to_msg);
  auto& from = static_cast<const MDSLEstimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDSLEstimation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.longtermlends_.MergeFrom(from._impl_.longtermlends_);
  _this->_impl_.validborrows_.MergeFrom(from._impl_.validborrows_);
  _this->_impl_.validalends_.MergeFrom(from._impl_.validalends_);
  _this->_impl_.validblends_.MergeFrom(from._impl_.validblends_);
  _this->_impl_.borrows_.MergeFrom(from._impl_.borrows_);
  _this->_impl_.alends_.MergeFrom(from._impl_.alends_);
  _this->_impl_.blends_.MergeFrom(from._impl_.blends_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_lastpx() != 0) {
    _this->_internal_set_lastpx(from._internal_lastpx());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_htscvolume() != 0) {
    _this->_internal_set_htscvolume(from._internal_htscvolume());
  }
  if (from._internal_prehtscvolume() != 0) {
    _this->_internal_set_prehtscvolume(from._internal_prehtscvolume());
  }
  if (from._internal_weightedrate() != 0) {
    _this->_internal_set_weightedrate(from._internal_weightedrate());
  }
  if (from._internal_preweightedrate() != 0) {
    _this->_internal_set_preweightedrate(from._internal_preweightedrate());
  }
  if (from._internal_bestborrowrate() != 0) {
    _this->_internal_set_bestborrowrate(from._internal_bestborrowrate());
  }
  if (from._internal_bestlendrate() != 0) {
    _this->_internal_set_bestlendrate(from._internal_bestlendrate());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDSLEstimation::CopyFrom(const MDSLEstimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDSLEstimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDSLEstimation::IsInitialized() const {
  return true;
}

void MDSLEstimation::InternalSwap(MDSLEstimation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.longtermlends_.InternalSwap(&other->_impl_.longtermlends_);
  _impl_.validborrows_.InternalSwap(&other->_impl_.validborrows_);
  _impl_.validalends_.InternalSwap(&other->_impl_.validalends_);
  _impl_.validblends_.InternalSwap(&other->_impl_.validblends_);
  _impl_.borrows_.InternalSwap(&other->_impl_.borrows_);
  _impl_.alends_.InternalSwap(&other->_impl_.alends_);
  _impl_.blends_.InternalSwap(&other->_impl_.blends_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDSLEstimation, _impl_.datamultiplepowerof10_)
      + sizeof(MDSLEstimation::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDSLEstimation, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDSLEstimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSLEstimation_2eproto_getter, &descriptor_table_MDSLEstimation_2eproto_once,
      file_level_metadata_MDSLEstimation_2eproto[0]);
}

// ===================================================================

class ADSLEstimationEntry::_Internal {
 public:
};

ADSLEstimationEntry::ADSLEstimationEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADSLEstimationEntry)
}
ADSLEstimationEntry::ADSLEstimationEntry(const ADSLEstimationEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADSLEstimationEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.rate_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.postponeprobability_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.term_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.term_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_term().empty()) {
    _this->_impl_.term_.Set(from._internal_term(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rate_, &from._impl_.rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_) -
    reinterpret_cast<char*>(&_impl_.rate_)) + sizeof(_impl_.amount_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADSLEstimationEntry)
}

inline void ADSLEstimationEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.rate_){int64_t{0}}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.postponeprobability_){0}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.term_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.term_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADSLEstimationEntry::~ADSLEstimationEntry() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADSLEstimationEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADSLEstimationEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.term_.Destroy();
}

void ADSLEstimationEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADSLEstimationEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADSLEstimationEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.term_.ClearToEmpty();
  ::memset(&_impl_.rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_) -
      reinterpret_cast<char*>(&_impl_.rate_)) + sizeof(_impl_.amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADSLEstimationEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_term();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADSLEstimationEntry.Term"));
        } else
          goto handle_unusual;
        continue;
      // int64 Amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PostponeProbability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.postponeprobability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADSLEstimationEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADSLEstimationEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int64 Rate = 2;
  if (this->_internal_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_rate(), target);
  }

  // string Term = 3;
  if (!this->_internal_term().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_term().data(), static_cast<int>(this->_internal_term().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADSLEstimationEntry.Term");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_term(), target);
  }

  // int64 Amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_amount(), target);
  }

  // int32 PostponeProbability = 5;
  if (this->_internal_postponeprobability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_postponeprobability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADSLEstimationEntry)
  return target;
}

size_t ADSLEstimationEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADSLEstimationEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Term = 3;
  if (!this->_internal_term().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_term());
  }

  // int64 Rate = 2;
  if (this->_internal_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rate());
  }

  // int32 Level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 PostponeProbability = 5;
  if (this->_internal_postponeprobability() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_postponeprobability());
  }

  // int64 Amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADSLEstimationEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADSLEstimationEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADSLEstimationEntry::GetClassData() const { return &_class_data_; }


void ADSLEstimationEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADSLEstimationEntry*>(&to_msg);
  auto& from = static_cast<const ADSLEstimationEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADSLEstimationEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_term().empty()) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_rate() != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_postponeprobability() != 0) {
    _this->_internal_set_postponeprobability(from._internal_postponeprobability());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADSLEstimationEntry::CopyFrom(const ADSLEstimationEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADSLEstimationEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADSLEstimationEntry::IsInitialized() const {
  return true;
}

void ADSLEstimationEntry::InternalSwap(ADSLEstimationEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.term_, lhs_arena,
      &other->_impl_.term_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADSLEstimationEntry, _impl_.amount_)
      + sizeof(ADSLEstimationEntry::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(ADSLEstimationEntry, _impl_.rate_)>(
          reinterpret_cast<char*>(&_impl_.rate_),
          reinterpret_cast<char*>(&other->_impl_.rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADSLEstimationEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSLEstimation_2eproto_getter, &descriptor_table_MDSLEstimation_2eproto_once,
      file_level_metadata_MDSLEstimation_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDSLEstimation*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDSLEstimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDSLEstimation >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADSLEstimationEntry*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADSLEstimationEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADSLEstimationEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
