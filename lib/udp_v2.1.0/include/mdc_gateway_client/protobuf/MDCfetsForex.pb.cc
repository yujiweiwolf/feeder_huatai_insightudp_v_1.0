// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCfetsForex.proto

#include "MDCfetsForex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDCfetsForex::MDCfetsForex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securitysubtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transacttime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spotforex_)*/nullptr
  , /*decltype(_impl_.forwardforex_)*/nullptr
  , /*decltype(_impl_.nondeliverableforwardsforex_)*/nullptr
  , /*decltype(_impl_.swapforex_)*/nullptr
  , /*decltype(_impl_.optionforex_)*/nullptr
  , /*decltype(_impl_.spotclosepriceforex_)*/nullptr
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.forextype_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDCfetsForexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDCfetsForexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDCfetsForexDefaultTypeInternal() {}
  union {
    MDCfetsForex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDCfetsForexDefaultTypeInternal _MDCfetsForex_default_instance_;
PROTOBUF_CONSTEXPR SpotForex::SpotForex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valuedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buydate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buytime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selldate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selltime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.netbasischange_)*/int64_t{0}
  , /*decltype(_impl_.percentagechange_)*/int64_t{0}
  , /*decltype(_impl_.lastbuyrate_)*/int64_t{0}
  , /*decltype(_impl_.lastsellrate_)*/int64_t{0}
  , /*decltype(_impl_.lastbuyallin_)*/int64_t{0}
  , /*decltype(_impl_.lastsellallin_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.openrate_)*/int64_t{0}
  , /*decltype(_impl_.historycloserate_)*/int64_t{0}
  , /*decltype(_impl_.closerate_)*/int64_t{0}
  , /*decltype(_impl_.amountlevelrate_)*/0
  , /*decltype(_impl_.amountlevelallin_)*/0
  , /*decltype(_impl_.rateside_)*/0
  , /*decltype(_impl_.allinside_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpotForexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotForexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotForexDefaultTypeInternal() {}
  union {
    SpotForex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotForexDefaultTypeInternal _SpotForex_default_instance_;
PROTOBUF_CONSTEXPR ForwardForex::ForwardForex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valuedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buydate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buytime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selldate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selltime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.netbasischange_)*/int64_t{0}
  , /*decltype(_impl_.percentagechange_)*/int64_t{0}
  , /*decltype(_impl_.lastbuyrate_)*/int64_t{0}
  , /*decltype(_impl_.lastsellrate_)*/int64_t{0}
  , /*decltype(_impl_.lastbuyallin_)*/int64_t{0}
  , /*decltype(_impl_.lastsellallin_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.openrate_)*/int64_t{0}
  , /*decltype(_impl_.historycloserate_)*/int64_t{0}
  , /*decltype(_impl_.closerate_)*/int64_t{0}
  , /*decltype(_impl_.amountlevelrate_)*/0
  , /*decltype(_impl_.amountlevelallin_)*/0
  , /*decltype(_impl_.rateside_)*/0
  , /*decltype(_impl_.allinside_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForwardForexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardForexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardForexDefaultTypeInternal() {}
  union {
    ForwardForex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardForexDefaultTypeInternal _ForwardForex_default_instance_;
PROTOBUF_CONSTEXPR NonDeliverableForwardsForex::NonDeliverableForwardsForex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valuedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buydate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buytime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selldate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selltime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.netbasischange_)*/int64_t{0}
  , /*decltype(_impl_.percentagechange_)*/int64_t{0}
  , /*decltype(_impl_.lastbuyrate_)*/int64_t{0}
  , /*decltype(_impl_.lastsellrate_)*/int64_t{0}
  , /*decltype(_impl_.lastbuyallin_)*/int64_t{0}
  , /*decltype(_impl_.lastsellallin_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.openrate_)*/int64_t{0}
  , /*decltype(_impl_.historycloserate_)*/int64_t{0}
  , /*decltype(_impl_.closerate_)*/int64_t{0}
  , /*decltype(_impl_.amountlevelrate_)*/0
  , /*decltype(_impl_.amountlevelallin_)*/0
  , /*decltype(_impl_.rateside_)*/0
  , /*decltype(_impl_.allinside_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NonDeliverableForwardsForexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NonDeliverableForwardsForexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NonDeliverableForwardsForexDefaultTypeInternal() {}
  union {
    NonDeliverableForwardsForex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NonDeliverableForwardsForexDefaultTypeInternal _NonDeliverableForwardsForex_default_instance_;
PROTOBUF_CONSTEXPR SwapForex::SwapForex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valuedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buydate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buytime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selldate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selltime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legsign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.netbasischange_)*/int64_t{0}
  , /*decltype(_impl_.percentagechange_)*/int64_t{0}
  , /*decltype(_impl_.lastbuyrate_)*/int64_t{0}
  , /*decltype(_impl_.lastsellrate_)*/int64_t{0}
  , /*decltype(_impl_.lastbuyallin_)*/int64_t{0}
  , /*decltype(_impl_.lastsellallin_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.openrate_)*/int64_t{0}
  , /*decltype(_impl_.historycloserate_)*/int64_t{0}
  , /*decltype(_impl_.closerate_)*/int64_t{0}
  , /*decltype(_impl_.amountlevelrate_)*/0
  , /*decltype(_impl_.amountlevelallin_)*/0
  , /*decltype(_impl_.rateside_)*/0
  , /*decltype(_impl_.allinside_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwapForexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwapForexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwapForexDefaultTypeInternal() {}
  union {
    SwapForex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwapForexDefaultTypeInternal _SwapForex_default_instance_;
PROTOBUF_CONSTEXPR OptionForex::OptionForex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fxterm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optiontype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.premium_)*/int64_t{0}
  , /*decltype(_impl_.volatility_)*/int64_t{0}
  , /*decltype(_impl_.volume_)*/int64_t{0}
  , /*decltype(_impl_.premiumtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionForexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionForexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionForexDefaultTypeInternal() {}
  union {
    OptionForex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionForexDefaultTypeInternal _OptionForex_default_instance_;
PROTOBUF_CONSTEXPR SpotClosePriceForex::SpotClosePriceForex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.updatedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updatetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpotClosePriceForexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotClosePriceForexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotClosePriceForexDefaultTypeInternal() {}
  union {
    SpotClosePriceForex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotClosePriceForexDefaultTypeInternal _SpotClosePriceForex_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDCfetsForex_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDCfetsForex_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDCfetsForex_2eproto = nullptr;

const uint32_t TableStruct_MDCfetsForex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.securitysubtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.forextype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.spotforex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.forwardforex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.nondeliverableforwardsforex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.swapforex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.optionforex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.spotclosepriceforex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsForex, _impl_.transacttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.valuedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.netbasischange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.percentagechange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.buydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.buytime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.selldate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.selltime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.lastbuyrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.lastsellrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.lastbuyallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.lastsellallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.openrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.historycloserate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.closerate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.amountlevelrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.amountlevelallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.rateside_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotForex, _impl_.allinside_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.valuedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.netbasischange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.percentagechange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.buydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.buytime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.selldate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.selltime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.lastbuyrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.lastsellrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.lastbuyallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.lastsellallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.openrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.historycloserate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.closerate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.amountlevelrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.amountlevelallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.rateside_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ForwardForex, _impl_.allinside_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.valuedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.netbasischange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.percentagechange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.buydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.buytime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.selldate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.selltime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.lastbuyrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.lastsellrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.lastbuyallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.lastsellallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.openrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.historycloserate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.closerate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.amountlevelrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.amountlevelallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.rateside_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex, _impl_.allinside_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.valuedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.netbasischange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.percentagechange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.buydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.buytime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.selldate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.selltime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.lastbuyrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.lastsellrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.lastbuyallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.lastsellallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.openrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.historycloserate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.closerate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.amountlevelrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.amountlevelallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.rateside_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.allinside_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwapForex, _impl_.legsign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _impl_.fxterm_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _impl_.premium_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _impl_.volatility_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _impl_.tradedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _impl_.tradetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _impl_.premiumtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionForex, _impl_.optiontype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotClosePriceForex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotClosePriceForex, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotClosePriceForex, _impl_.updatedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotClosePriceForex, _impl_.updatetime_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDCfetsForex)},
  { 22, -1, -1, sizeof(::com::htsc::mdc::insight::model::SpotForex)},
  { 48, -1, -1, sizeof(::com::htsc::mdc::insight::model::ForwardForex)},
  { 74, -1, -1, sizeof(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex)},
  { 100, -1, -1, sizeof(::com::htsc::mdc::insight::model::SwapForex)},
  { 127, -1, -1, sizeof(::com::htsc::mdc::insight::model::OptionForex)},
  { 141, -1, -1, sizeof(::com::htsc::mdc::insight::model::SpotClosePriceForex)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDCfetsForex_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SpotForex_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ForwardForex_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_NonDeliverableForwardsForex_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SwapForex_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_OptionForex_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SpotClosePriceForex_default_instance_._instance,
};

const char descriptor_table_protodef_MDCfetsForex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022MDCfetsForex.proto\022\032com.htsc.mdc.insig"
  "ht.model\032\027ESecurityIDSource.proto\032\023ESecu"
  "rityType.proto\"\326\005\n\014MDCfetsForex\022\026\n\016HTSCS"
  "ecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTim"
  "e\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020securi"
  "tyIDSource\030\005 \001(\0162%.com.htsc.mdc.model.ES"
  "ecurityIDSource\0227\n\014securityType\030\006 \001(\0162!."
  "com.htsc.mdc.model.ESecurityType\022\027\n\017Secu"
  "ritySubType\030\007 \001(\t\022\021\n\tForexType\030\010 \001(\005\0228\n\t"
  "spotForex\030\t \001(\0132%.com.htsc.mdc.insight.m"
  "odel.SpotForex\022>\n\014forwardForex\030\n \001(\0132(.c"
  "om.htsc.mdc.insight.model.ForwardForex\022\\"
  "\n\033nonDeliverableForwardsForex\030\013 \001(\01327.co"
  "m.htsc.mdc.insight.model.NonDeliverableF"
  "orwardsForex\0228\n\tswapForex\030\014 \001(\0132%.com.ht"
  "sc.mdc.insight.model.SwapForex\022<\n\013option"
  "Forex\030\r \001(\0132\'.com.htsc.mdc.insight.model"
  ".OptionForex\022L\n\023spotClosePriceForex\030\016 \001("
  "\0132/.com.htsc.mdc.insight.model.SpotClose"
  "PriceForex\022\035\n\025DataMultiplePowerOf10\030\017 \001("
  "\005\022\024\n\014TransactTime\030\020 \001(\t\"\250\003\n\tSpotForex\022\021\n"
  "\tValueDate\030\001 \001(\t\022\026\n\016NetBasisChange\030\002 \001(\003"
  "\022\030\n\020PercentageChange\030\003 \001(\003\022\017\n\007BuyDate\030\004 "
  "\001(\t\022\017\n\007BuyTime\030\005 \001(\t\022\020\n\010SellDate\030\006 \001(\t\022\020"
  "\n\010SellTime\030\007 \001(\t\022\023\n\013LastBuyRate\030\010 \001(\003\022\024\n"
  "\014LastSellRate\030\t \001(\003\022\024\n\014LastBuyAllin\030\n \001("
  "\003\022\025\n\rLastSellAllin\030\013 \001(\003\022\020\n\010HighRate\030\014 \001"
  "(\003\022\017\n\007LowRate\030\r \001(\003\022\020\n\010OpenRate\030\016 \001(\003\022\030\n"
  "\020HistoryCloseRate\030\017 \001(\003\022\021\n\tCloseRate\030\020 \001"
  "(\003\022\027\n\017AmountLevelRate\030\021 \001(\005\022\030\n\020AmountLev"
  "elAllin\030\022 \001(\005\022\020\n\010RateSide\030\023 \001(\005\022\021\n\tAllin"
  "Side\030\024 \001(\005\"\253\003\n\014ForwardForex\022\021\n\tValueDate"
  "\030\001 \001(\t\022\026\n\016NetBasisChange\030\002 \001(\003\022\030\n\020Percen"
  "tageChange\030\003 \001(\003\022\017\n\007BuyDate\030\004 \001(\t\022\017\n\007Buy"
  "Time\030\005 \001(\t\022\020\n\010SellDate\030\006 \001(\t\022\020\n\010SellTime"
  "\030\007 \001(\t\022\023\n\013LastBuyRate\030\010 \001(\003\022\024\n\014LastSellR"
  "ate\030\t \001(\003\022\024\n\014LastBuyAllin\030\n \001(\003\022\025\n\rLastS"
  "ellAllin\030\013 \001(\003\022\020\n\010HighRate\030\014 \001(\003\022\017\n\007LowR"
  "ate\030\r \001(\003\022\020\n\010OpenRate\030\016 \001(\003\022\030\n\020HistoryCl"
  "oseRate\030\017 \001(\003\022\021\n\tCloseRate\030\020 \001(\003\022\027\n\017Amou"
  "ntLevelRate\030\021 \001(\005\022\030\n\020AmountLevelAllin\030\022 "
  "\001(\005\022\020\n\010RateSide\030\023 \001(\005\022\021\n\tAllinSide\030\024 \001(\005"
  "\"\272\003\n\033NonDeliverableForwardsForex\022\021\n\tValu"
  "eDate\030\001 \001(\t\022\026\n\016NetBasisChange\030\002 \001(\003\022\030\n\020P"
  "ercentageChange\030\003 \001(\003\022\017\n\007BuyDate\030\004 \001(\t\022\017"
  "\n\007BuyTime\030\005 \001(\t\022\020\n\010SellDate\030\006 \001(\t\022\020\n\010Sel"
  "lTime\030\007 \001(\t\022\023\n\013LastBuyRate\030\010 \001(\003\022\024\n\014Last"
  "SellRate\030\t \001(\003\022\024\n\014LastBuyAllin\030\n \001(\003\022\025\n\r"
  "LastSellAllin\030\013 \001(\003\022\020\n\010HighRate\030\014 \001(\003\022\017\n"
  "\007LowRate\030\r \001(\003\022\020\n\010OpenRate\030\016 \001(\003\022\030\n\020Hist"
  "oryCloseRate\030\017 \001(\003\022\021\n\tCloseRate\030\020 \001(\003\022\027\n"
  "\017AmountLevelRate\030\021 \001(\005\022\030\n\020AmountLevelAll"
  "in\030\022 \001(\005\022\020\n\010RateSide\030\023 \001(\005\022\021\n\tAllinSide\030"
  "\024 \001(\005\"\271\003\n\tSwapForex\022\021\n\tValueDate\030\001 \001(\t\022\026"
  "\n\016NetBasisChange\030\002 \001(\003\022\030\n\020PercentageChan"
  "ge\030\003 \001(\003\022\017\n\007BuyDate\030\004 \001(\t\022\017\n\007BuyTime\030\005 \001"
  "(\t\022\020\n\010SellDate\030\006 \001(\t\022\020\n\010SellTime\030\007 \001(\t\022\023"
  "\n\013LastBuyRate\030\010 \001(\003\022\024\n\014LastSellRate\030\t \001("
  "\003\022\024\n\014LastBuyAllin\030\n \001(\003\022\025\n\rLastSellAllin"
  "\030\013 \001(\003\022\020\n\010HighRate\030\014 \001(\003\022\017\n\007LowRate\030\r \001("
  "\003\022\020\n\010OpenRate\030\016 \001(\003\022\030\n\020HistoryCloseRate\030"
  "\017 \001(\003\022\021\n\tCloseRate\030\020 \001(\003\022\027\n\017AmountLevelR"
  "ate\030\021 \001(\005\022\030\n\020AmountLevelAllin\030\022 \001(\005\022\020\n\010R"
  "ateSide\030\023 \001(\005\022\021\n\tAllinSide\030\024 \001(\005\022\017\n\007LegS"
  "ign\030\025 \001(\t\"\241\001\n\013OptionForex\022\016\n\006FxTerm\030\001 \001("
  "\t\022\017\n\007Premium\030\002 \001(\003\022\022\n\nVolatility\030\003 \001(\003\022\016"
  "\n\006Volume\030\004 \001(\003\022\021\n\tTradeDate\030\005 \001(\t\022\021\n\tTra"
  "deTime\030\006 \001(\t\022\023\n\013PremiumType\030\007 \001(\005\022\022\n\nOpt"
  "ionType\030\010 \001(\t\"N\n\023SpotClosePriceForex\022\017\n\007"
  "ClosePx\030\001 \001(\003\022\022\n\nUpdateDate\030\002 \001(\t\022\022\n\nUpd"
  "ateTime\030\003 \001(\tB5\n\032com.htsc.mdc.insight.mo"
  "delB\022MDCfetsForexProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDCfetsForex_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDCfetsForex_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDCfetsForex_2eproto = {
    false, false, 2876, descriptor_table_protodef_MDCfetsForex_2eproto,
    "MDCfetsForex.proto",
    &descriptor_table_MDCfetsForex_2eproto_once, descriptor_table_MDCfetsForex_2eproto_deps, 2, 7,
    schemas, file_default_instances, TableStruct_MDCfetsForex_2eproto::offsets,
    file_level_metadata_MDCfetsForex_2eproto, file_level_enum_descriptors_MDCfetsForex_2eproto,
    file_level_service_descriptors_MDCfetsForex_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDCfetsForex_2eproto_getter() {
  return &descriptor_table_MDCfetsForex_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDCfetsForex_2eproto(&descriptor_table_MDCfetsForex_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCfetsForex::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::SpotForex& spotforex(const MDCfetsForex* msg);
  static const ::com::htsc::mdc::insight::model::ForwardForex& forwardforex(const MDCfetsForex* msg);
  static const ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex& nondeliverableforwardsforex(const MDCfetsForex* msg);
  static const ::com::htsc::mdc::insight::model::SwapForex& swapforex(const MDCfetsForex* msg);
  static const ::com::htsc::mdc::insight::model::OptionForex& optionforex(const MDCfetsForex* msg);
  static const ::com::htsc::mdc::insight::model::SpotClosePriceForex& spotclosepriceforex(const MDCfetsForex* msg);
};

const ::com::htsc::mdc::insight::model::SpotForex&
MDCfetsForex::_Internal::spotforex(const MDCfetsForex* msg) {
  return *msg->_impl_.spotforex_;
}
const ::com::htsc::mdc::insight::model::ForwardForex&
MDCfetsForex::_Internal::forwardforex(const MDCfetsForex* msg) {
  return *msg->_impl_.forwardforex_;
}
const ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex&
MDCfetsForex::_Internal::nondeliverableforwardsforex(const MDCfetsForex* msg) {
  return *msg->_impl_.nondeliverableforwardsforex_;
}
const ::com::htsc::mdc::insight::model::SwapForex&
MDCfetsForex::_Internal::swapforex(const MDCfetsForex* msg) {
  return *msg->_impl_.swapforex_;
}
const ::com::htsc::mdc::insight::model::OptionForex&
MDCfetsForex::_Internal::optionforex(const MDCfetsForex* msg) {
  return *msg->_impl_.optionforex_;
}
const ::com::htsc::mdc::insight::model::SpotClosePriceForex&
MDCfetsForex::_Internal::spotclosepriceforex(const MDCfetsForex* msg) {
  return *msg->_impl_.spotclosepriceforex_;
}
MDCfetsForex::MDCfetsForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDCfetsForex)
}
MDCfetsForex::MDCfetsForex(const MDCfetsForex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDCfetsForex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securitysubtype_){}
    , decltype(_impl_.transacttime_){}
    , decltype(_impl_.spotforex_){nullptr}
    , decltype(_impl_.forwardforex_){nullptr}
    , decltype(_impl_.nondeliverableforwardsforex_){nullptr}
    , decltype(_impl_.swapforex_){nullptr}
    , decltype(_impl_.optionforex_){nullptr}
    , decltype(_impl_.spotclosepriceforex_){nullptr}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.forextype_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securitysubtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_securitysubtype().empty()) {
    _this->_impl_.securitysubtype_.Set(from._internal_securitysubtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transacttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transacttime().empty()) {
    _this->_impl_.transacttime_.Set(from._internal_transacttime(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spotforex()) {
    _this->_impl_.spotforex_ = new ::com::htsc::mdc::insight::model::SpotForex(*from._impl_.spotforex_);
  }
  if (from._internal_has_forwardforex()) {
    _this->_impl_.forwardforex_ = new ::com::htsc::mdc::insight::model::ForwardForex(*from._impl_.forwardforex_);
  }
  if (from._internal_has_nondeliverableforwardsforex()) {
    _this->_impl_.nondeliverableforwardsforex_ = new ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex(*from._impl_.nondeliverableforwardsforex_);
  }
  if (from._internal_has_swapforex()) {
    _this->_impl_.swapforex_ = new ::com::htsc::mdc::insight::model::SwapForex(*from._impl_.swapforex_);
  }
  if (from._internal_has_optionforex()) {
    _this->_impl_.optionforex_ = new ::com::htsc::mdc::insight::model::OptionForex(*from._impl_.optionforex_);
  }
  if (from._internal_has_spotclosepriceforex()) {
    _this->_impl_.spotclosepriceforex_ = new ::com::htsc::mdc::insight::model::SpotClosePriceForex(*from._impl_.spotclosepriceforex_);
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCfetsForex)
}

inline void MDCfetsForex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securitysubtype_){}
    , decltype(_impl_.transacttime_){}
    , decltype(_impl_.spotforex_){nullptr}
    , decltype(_impl_.forwardforex_){nullptr}
    , decltype(_impl_.nondeliverableforwardsforex_){nullptr}
    , decltype(_impl_.swapforex_){nullptr}
    , decltype(_impl_.optionforex_){nullptr}
    , decltype(_impl_.spotclosepriceforex_){nullptr}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.forextype_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securitysubtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transacttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDCfetsForex::~MDCfetsForex() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCfetsForex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDCfetsForex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.securitysubtype_.Destroy();
  _impl_.transacttime_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spotforex_;
  if (this != internal_default_instance()) delete _impl_.forwardforex_;
  if (this != internal_default_instance()) delete _impl_.nondeliverableforwardsforex_;
  if (this != internal_default_instance()) delete _impl_.swapforex_;
  if (this != internal_default_instance()) delete _impl_.optionforex_;
  if (this != internal_default_instance()) delete _impl_.spotclosepriceforex_;
}

void MDCfetsForex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDCfetsForex::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCfetsForex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.securitysubtype_.ClearToEmpty();
  _impl_.transacttime_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spotforex_ != nullptr) {
    delete _impl_.spotforex_;
  }
  _impl_.spotforex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forwardforex_ != nullptr) {
    delete _impl_.forwardforex_;
  }
  _impl_.forwardforex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nondeliverableforwardsforex_ != nullptr) {
    delete _impl_.nondeliverableforwardsforex_;
  }
  _impl_.nondeliverableforwardsforex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.swapforex_ != nullptr) {
    delete _impl_.swapforex_;
  }
  _impl_.swapforex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.optionforex_ != nullptr) {
    delete _impl_.optionforex_;
  }
  _impl_.optionforex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spotclosepriceforex_ != nullptr) {
    delete _impl_.spotclosepriceforex_;
  }
  _impl_.spotclosepriceforex_ = nullptr;
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDCfetsForex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsForex.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string SecuritySubType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_securitysubtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsForex.SecuritySubType"));
        } else
          goto handle_unusual;
        continue;
      // int32 ForexType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.forextype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SpotForex spotForex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_spotforex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ForwardForex forwardForex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_forwardforex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.NonDeliverableForwardsForex nonDeliverableForwardsForex = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_nondeliverableforwardsforex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwapForex swapForex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapforex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.OptionForex optionForex = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_optionforex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SpotClosePriceForex spotClosePriceForex = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_spotclosepriceforex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TransactTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsForex.TransactTime"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDCfetsForex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCfetsForex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsForex.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // string SecuritySubType = 7;
  if (!this->_internal_securitysubtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securitysubtype().data(), static_cast<int>(this->_internal_securitysubtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsForex.SecuritySubType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_securitysubtype(), target);
  }

  // int32 ForexType = 8;
  if (this->_internal_forextype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_forextype(), target);
  }

  // .com.htsc.mdc.insight.model.SpotForex spotForex = 9;
  if (this->_internal_has_spotforex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::spotforex(this),
        _Internal::spotforex(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ForwardForex forwardForex = 10;
  if (this->_internal_has_forwardforex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::forwardforex(this),
        _Internal::forwardforex(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.NonDeliverableForwardsForex nonDeliverableForwardsForex = 11;
  if (this->_internal_has_nondeliverableforwardsforex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::nondeliverableforwardsforex(this),
        _Internal::nondeliverableforwardsforex(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SwapForex swapForex = 12;
  if (this->_internal_has_swapforex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::swapforex(this),
        _Internal::swapforex(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.OptionForex optionForex = 13;
  if (this->_internal_has_optionforex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::optionforex(this),
        _Internal::optionforex(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SpotClosePriceForex spotClosePriceForex = 14;
  if (this->_internal_has_spotclosepriceforex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::spotclosepriceforex(this),
        _Internal::spotclosepriceforex(this).GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 15;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_datamultiplepowerof10(), target);
  }

  // string TransactTime = 16;
  if (!this->_internal_transacttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsForex.TransactTime");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_transacttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCfetsForex)
  return target;
}

size_t MDCfetsForex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCfetsForex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string SecuritySubType = 7;
  if (!this->_internal_securitysubtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securitysubtype());
  }

  // string TransactTime = 16;
  if (!this->_internal_transacttime().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  // .com.htsc.mdc.insight.model.SpotForex spotForex = 9;
  if (this->_internal_has_spotforex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spotforex_);
  }

  // .com.htsc.mdc.insight.model.ForwardForex forwardForex = 10;
  if (this->_internal_has_forwardforex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forwardforex_);
  }

  // .com.htsc.mdc.insight.model.NonDeliverableForwardsForex nonDeliverableForwardsForex = 11;
  if (this->_internal_has_nondeliverableforwardsforex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nondeliverableforwardsforex_);
  }

  // .com.htsc.mdc.insight.model.SwapForex swapForex = 12;
  if (this->_internal_has_swapforex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.swapforex_);
  }

  // .com.htsc.mdc.insight.model.OptionForex optionForex = 13;
  if (this->_internal_has_optionforex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optionforex_);
  }

  // .com.htsc.mdc.insight.model.SpotClosePriceForex spotClosePriceForex = 14;
  if (this->_internal_has_spotclosepriceforex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spotclosepriceforex_);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ForexType = 8;
  if (this->_internal_forextype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_forextype());
  }

  // int32 DataMultiplePowerOf10 = 15;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDCfetsForex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDCfetsForex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDCfetsForex::GetClassData() const { return &_class_data_; }


void MDCfetsForex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDCfetsForex*>(&to_msg);
  auto& from = static_cast<const MDCfetsForex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCfetsForex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_securitysubtype().empty()) {
    _this->_internal_set_securitysubtype(from._internal_securitysubtype());
  }
  if (!from._internal_transacttime().empty()) {
    _this->_internal_set_transacttime(from._internal_transacttime());
  }
  if (from._internal_has_spotforex()) {
    _this->_internal_mutable_spotforex()->::com::htsc::mdc::insight::model::SpotForex::MergeFrom(
        from._internal_spotforex());
  }
  if (from._internal_has_forwardforex()) {
    _this->_internal_mutable_forwardforex()->::com::htsc::mdc::insight::model::ForwardForex::MergeFrom(
        from._internal_forwardforex());
  }
  if (from._internal_has_nondeliverableforwardsforex()) {
    _this->_internal_mutable_nondeliverableforwardsforex()->::com::htsc::mdc::insight::model::NonDeliverableForwardsForex::MergeFrom(
        from._internal_nondeliverableforwardsforex());
  }
  if (from._internal_has_swapforex()) {
    _this->_internal_mutable_swapforex()->::com::htsc::mdc::insight::model::SwapForex::MergeFrom(
        from._internal_swapforex());
  }
  if (from._internal_has_optionforex()) {
    _this->_internal_mutable_optionforex()->::com::htsc::mdc::insight::model::OptionForex::MergeFrom(
        from._internal_optionforex());
  }
  if (from._internal_has_spotclosepriceforex()) {
    _this->_internal_mutable_spotclosepriceforex()->::com::htsc::mdc::insight::model::SpotClosePriceForex::MergeFrom(
        from._internal_spotclosepriceforex());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_forextype() != 0) {
    _this->_internal_set_forextype(from._internal_forextype());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDCfetsForex::CopyFrom(const MDCfetsForex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCfetsForex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDCfetsForex::IsInitialized() const {
  return true;
}

void MDCfetsForex::InternalSwap(MDCfetsForex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securitysubtype_, lhs_arena,
      &other->_impl_.securitysubtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transacttime_, lhs_arena,
      &other->_impl_.transacttime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDCfetsForex, _impl_.datamultiplepowerof10_)
      + sizeof(MDCfetsForex::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDCfetsForex, _impl_.spotforex_)>(
          reinterpret_cast<char*>(&_impl_.spotforex_),
          reinterpret_cast<char*>(&other->_impl_.spotforex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDCfetsForex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsForex_2eproto_getter, &descriptor_table_MDCfetsForex_2eproto_once,
      file_level_metadata_MDCfetsForex_2eproto[0]);
}

// ===================================================================

class SpotForex::_Internal {
 public:
};

SpotForex::SpotForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SpotForex)
}
SpotForex::SpotForex(const SpotForex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpotForex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.buydate_){}
    , decltype(_impl_.buytime_){}
    , decltype(_impl_.selldate_){}
    , decltype(_impl_.selltime_){}
    , decltype(_impl_.netbasischange_){}
    , decltype(_impl_.percentagechange_){}
    , decltype(_impl_.lastbuyrate_){}
    , decltype(_impl_.lastsellrate_){}
    , decltype(_impl_.lastbuyallin_){}
    , decltype(_impl_.lastsellallin_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.openrate_){}
    , decltype(_impl_.historycloserate_){}
    , decltype(_impl_.closerate_){}
    , decltype(_impl_.amountlevelrate_){}
    , decltype(_impl_.amountlevelallin_){}
    , decltype(_impl_.rateside_){}
    , decltype(_impl_.allinside_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valuedate().empty()) {
    _this->_impl_.valuedate_.Set(from._internal_valuedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buydate().empty()) {
    _this->_impl_.buydate_.Set(from._internal_buydate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buytime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buytime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buytime().empty()) {
    _this->_impl_.buytime_.Set(from._internal_buytime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selldate().empty()) {
    _this->_impl_.selldate_.Set(from._internal_selldate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selltime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selltime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selltime().empty()) {
    _this->_impl_.selltime_.Set(from._internal_selltime(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.netbasischange_, &from._impl_.netbasischange_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allinside_) -
    reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SpotForex)
}

inline void SpotForex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.buydate_){}
    , decltype(_impl_.buytime_){}
    , decltype(_impl_.selldate_){}
    , decltype(_impl_.selltime_){}
    , decltype(_impl_.netbasischange_){int64_t{0}}
    , decltype(_impl_.percentagechange_){int64_t{0}}
    , decltype(_impl_.lastbuyrate_){int64_t{0}}
    , decltype(_impl_.lastsellrate_){int64_t{0}}
    , decltype(_impl_.lastbuyallin_){int64_t{0}}
    , decltype(_impl_.lastsellallin_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.openrate_){int64_t{0}}
    , decltype(_impl_.historycloserate_){int64_t{0}}
    , decltype(_impl_.closerate_){int64_t{0}}
    , decltype(_impl_.amountlevelrate_){0}
    , decltype(_impl_.amountlevelallin_){0}
    , decltype(_impl_.rateside_){0}
    , decltype(_impl_.allinside_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buytime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buytime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selltime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selltime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpotForex::~SpotForex() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SpotForex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotForex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.valuedate_.Destroy();
  _impl_.buydate_.Destroy();
  _impl_.buytime_.Destroy();
  _impl_.selldate_.Destroy();
  _impl_.selltime_.Destroy();
}

void SpotForex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotForex::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SpotForex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valuedate_.ClearToEmpty();
  _impl_.buydate_.ClearToEmpty();
  _impl_.buytime_.ClearToEmpty();
  _impl_.selldate_.ClearToEmpty();
  _impl_.selltime_.ClearToEmpty();
  ::memset(&_impl_.netbasischange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allinside_) -
      reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotForex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ValueDate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_valuedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotForex.ValueDate"));
        } else
          goto handle_unusual;
        continue;
      // int64 NetBasisChange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.netbasischange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PercentageChange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.percentagechange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BuyDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_buydate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotForex.BuyDate"));
        } else
          goto handle_unusual;
        continue;
      // string BuyTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buytime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotForex.BuyTime"));
        } else
          goto handle_unusual;
        continue;
      // string SellDate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_selldate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotForex.SellDate"));
        } else
          goto handle_unusual;
        continue;
      // string SellTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_selltime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotForex.SellTime"));
        } else
          goto handle_unusual;
        continue;
      // int64 LastBuyRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lastbuyrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastSellRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.lastsellrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastBuyAllin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lastbuyallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastSellAllin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.lastsellallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.openrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HistoryCloseRate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.historycloserate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseRate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.closerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelRate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.amountlevelrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelAllin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.amountlevelallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RateSide = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.rateside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AllinSide = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.allinside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpotForex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SpotForex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuedate().data(), static_cast<int>(this->_internal_valuedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotForex.ValueDate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_valuedate(), target);
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_netbasischange(), target);
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_percentagechange(), target);
  }

  // string BuyDate = 4;
  if (!this->_internal_buydate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buydate().data(), static_cast<int>(this->_internal_buydate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotForex.BuyDate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_buydate(), target);
  }

  // string BuyTime = 5;
  if (!this->_internal_buytime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buytime().data(), static_cast<int>(this->_internal_buytime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotForex.BuyTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_buytime(), target);
  }

  // string SellDate = 6;
  if (!this->_internal_selldate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selldate().data(), static_cast<int>(this->_internal_selldate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotForex.SellDate");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_selldate(), target);
  }

  // string SellTime = 7;
  if (!this->_internal_selltime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selltime().data(), static_cast<int>(this->_internal_selltime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotForex.SellTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_selltime(), target);
  }

  // int64 LastBuyRate = 8;
  if (this->_internal_lastbuyrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_lastbuyrate(), target);
  }

  // int64 LastSellRate = 9;
  if (this->_internal_lastsellrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_lastsellrate(), target);
  }

  // int64 LastBuyAllin = 10;
  if (this->_internal_lastbuyallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastbuyallin(), target);
  }

  // int64 LastSellAllin = 11;
  if (this->_internal_lastsellallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_lastsellallin(), target);
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_highrate(), target);
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_lowrate(), target);
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_openrate(), target);
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_historycloserate(), target);
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_closerate(), target);
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_amountlevelrate(), target);
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_amountlevelallin(), target);
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_rateside(), target);
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_allinside(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SpotForex)
  return target;
}

size_t SpotForex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SpotForex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuedate());
  }

  // string BuyDate = 4;
  if (!this->_internal_buydate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buydate());
  }

  // string BuyTime = 5;
  if (!this->_internal_buytime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buytime());
  }

  // string SellDate = 6;
  if (!this->_internal_selldate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selldate());
  }

  // string SellTime = 7;
  if (!this->_internal_selltime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selltime());
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_netbasischange());
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_percentagechange());
  }

  // int64 LastBuyRate = 8;
  if (this->_internal_lastbuyrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastbuyrate());
  }

  // int64 LastSellRate = 9;
  if (this->_internal_lastsellrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsellrate());
  }

  // int64 LastBuyAllin = 10;
  if (this->_internal_lastbuyallin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastbuyallin());
  }

  // int64 LastSellAllin = 11;
  if (this->_internal_lastsellallin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsellallin());
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openrate());
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_historycloserate());
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closerate());
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelrate());
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelallin());
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_rateside());
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_allinside());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpotForex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpotForex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpotForex::GetClassData() const { return &_class_data_; }


void SpotForex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpotForex*>(&to_msg);
  auto& from = static_cast<const SpotForex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SpotForex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_valuedate().empty()) {
    _this->_internal_set_valuedate(from._internal_valuedate());
  }
  if (!from._internal_buydate().empty()) {
    _this->_internal_set_buydate(from._internal_buydate());
  }
  if (!from._internal_buytime().empty()) {
    _this->_internal_set_buytime(from._internal_buytime());
  }
  if (!from._internal_selldate().empty()) {
    _this->_internal_set_selldate(from._internal_selldate());
  }
  if (!from._internal_selltime().empty()) {
    _this->_internal_set_selltime(from._internal_selltime());
  }
  if (from._internal_netbasischange() != 0) {
    _this->_internal_set_netbasischange(from._internal_netbasischange());
  }
  if (from._internal_percentagechange() != 0) {
    _this->_internal_set_percentagechange(from._internal_percentagechange());
  }
  if (from._internal_lastbuyrate() != 0) {
    _this->_internal_set_lastbuyrate(from._internal_lastbuyrate());
  }
  if (from._internal_lastsellrate() != 0) {
    _this->_internal_set_lastsellrate(from._internal_lastsellrate());
  }
  if (from._internal_lastbuyallin() != 0) {
    _this->_internal_set_lastbuyallin(from._internal_lastbuyallin());
  }
  if (from._internal_lastsellallin() != 0) {
    _this->_internal_set_lastsellallin(from._internal_lastsellallin());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_openrate() != 0) {
    _this->_internal_set_openrate(from._internal_openrate());
  }
  if (from._internal_historycloserate() != 0) {
    _this->_internal_set_historycloserate(from._internal_historycloserate());
  }
  if (from._internal_closerate() != 0) {
    _this->_internal_set_closerate(from._internal_closerate());
  }
  if (from._internal_amountlevelrate() != 0) {
    _this->_internal_set_amountlevelrate(from._internal_amountlevelrate());
  }
  if (from._internal_amountlevelallin() != 0) {
    _this->_internal_set_amountlevelallin(from._internal_amountlevelallin());
  }
  if (from._internal_rateside() != 0) {
    _this->_internal_set_rateside(from._internal_rateside());
  }
  if (from._internal_allinside() != 0) {
    _this->_internal_set_allinside(from._internal_allinside());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpotForex::CopyFrom(const SpotForex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SpotForex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotForex::IsInitialized() const {
  return true;
}

void SpotForex::InternalSwap(SpotForex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valuedate_, lhs_arena,
      &other->_impl_.valuedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buydate_, lhs_arena,
      &other->_impl_.buydate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buytime_, lhs_arena,
      &other->_impl_.buytime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selldate_, lhs_arena,
      &other->_impl_.selldate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selltime_, lhs_arena,
      &other->_impl_.selltime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotForex, _impl_.allinside_)
      + sizeof(SpotForex::_impl_.allinside_)
      - PROTOBUF_FIELD_OFFSET(SpotForex, _impl_.netbasischange_)>(
          reinterpret_cast<char*>(&_impl_.netbasischange_),
          reinterpret_cast<char*>(&other->_impl_.netbasischange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotForex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsForex_2eproto_getter, &descriptor_table_MDCfetsForex_2eproto_once,
      file_level_metadata_MDCfetsForex_2eproto[1]);
}

// ===================================================================

class ForwardForex::_Internal {
 public:
};

ForwardForex::ForwardForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ForwardForex)
}
ForwardForex::ForwardForex(const ForwardForex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForwardForex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.buydate_){}
    , decltype(_impl_.buytime_){}
    , decltype(_impl_.selldate_){}
    , decltype(_impl_.selltime_){}
    , decltype(_impl_.netbasischange_){}
    , decltype(_impl_.percentagechange_){}
    , decltype(_impl_.lastbuyrate_){}
    , decltype(_impl_.lastsellrate_){}
    , decltype(_impl_.lastbuyallin_){}
    , decltype(_impl_.lastsellallin_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.openrate_){}
    , decltype(_impl_.historycloserate_){}
    , decltype(_impl_.closerate_){}
    , decltype(_impl_.amountlevelrate_){}
    , decltype(_impl_.amountlevelallin_){}
    , decltype(_impl_.rateside_){}
    , decltype(_impl_.allinside_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valuedate().empty()) {
    _this->_impl_.valuedate_.Set(from._internal_valuedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buydate().empty()) {
    _this->_impl_.buydate_.Set(from._internal_buydate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buytime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buytime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buytime().empty()) {
    _this->_impl_.buytime_.Set(from._internal_buytime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selldate().empty()) {
    _this->_impl_.selldate_.Set(from._internal_selldate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selltime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selltime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selltime().empty()) {
    _this->_impl_.selltime_.Set(from._internal_selltime(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.netbasischange_, &from._impl_.netbasischange_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allinside_) -
    reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ForwardForex)
}

inline void ForwardForex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.buydate_){}
    , decltype(_impl_.buytime_){}
    , decltype(_impl_.selldate_){}
    , decltype(_impl_.selltime_){}
    , decltype(_impl_.netbasischange_){int64_t{0}}
    , decltype(_impl_.percentagechange_){int64_t{0}}
    , decltype(_impl_.lastbuyrate_){int64_t{0}}
    , decltype(_impl_.lastsellrate_){int64_t{0}}
    , decltype(_impl_.lastbuyallin_){int64_t{0}}
    , decltype(_impl_.lastsellallin_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.openrate_){int64_t{0}}
    , decltype(_impl_.historycloserate_){int64_t{0}}
    , decltype(_impl_.closerate_){int64_t{0}}
    , decltype(_impl_.amountlevelrate_){0}
    , decltype(_impl_.amountlevelallin_){0}
    , decltype(_impl_.rateside_){0}
    , decltype(_impl_.allinside_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buytime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buytime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selltime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selltime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ForwardForex::~ForwardForex() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ForwardForex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForwardForex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.valuedate_.Destroy();
  _impl_.buydate_.Destroy();
  _impl_.buytime_.Destroy();
  _impl_.selldate_.Destroy();
  _impl_.selltime_.Destroy();
}

void ForwardForex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForwardForex::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ForwardForex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valuedate_.ClearToEmpty();
  _impl_.buydate_.ClearToEmpty();
  _impl_.buytime_.ClearToEmpty();
  _impl_.selldate_.ClearToEmpty();
  _impl_.selltime_.ClearToEmpty();
  ::memset(&_impl_.netbasischange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allinside_) -
      reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardForex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ValueDate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_valuedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ForwardForex.ValueDate"));
        } else
          goto handle_unusual;
        continue;
      // int64 NetBasisChange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.netbasischange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PercentageChange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.percentagechange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BuyDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_buydate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ForwardForex.BuyDate"));
        } else
          goto handle_unusual;
        continue;
      // string BuyTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buytime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ForwardForex.BuyTime"));
        } else
          goto handle_unusual;
        continue;
      // string SellDate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_selldate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ForwardForex.SellDate"));
        } else
          goto handle_unusual;
        continue;
      // string SellTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_selltime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ForwardForex.SellTime"));
        } else
          goto handle_unusual;
        continue;
      // int64 LastBuyRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lastbuyrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastSellRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.lastsellrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastBuyAllin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lastbuyallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastSellAllin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.lastsellallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.openrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HistoryCloseRate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.historycloserate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseRate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.closerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelRate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.amountlevelrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelAllin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.amountlevelallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RateSide = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.rateside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AllinSide = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.allinside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForwardForex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ForwardForex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuedate().data(), static_cast<int>(this->_internal_valuedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ForwardForex.ValueDate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_valuedate(), target);
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_netbasischange(), target);
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_percentagechange(), target);
  }

  // string BuyDate = 4;
  if (!this->_internal_buydate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buydate().data(), static_cast<int>(this->_internal_buydate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ForwardForex.BuyDate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_buydate(), target);
  }

  // string BuyTime = 5;
  if (!this->_internal_buytime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buytime().data(), static_cast<int>(this->_internal_buytime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ForwardForex.BuyTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_buytime(), target);
  }

  // string SellDate = 6;
  if (!this->_internal_selldate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selldate().data(), static_cast<int>(this->_internal_selldate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ForwardForex.SellDate");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_selldate(), target);
  }

  // string SellTime = 7;
  if (!this->_internal_selltime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selltime().data(), static_cast<int>(this->_internal_selltime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ForwardForex.SellTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_selltime(), target);
  }

  // int64 LastBuyRate = 8;
  if (this->_internal_lastbuyrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_lastbuyrate(), target);
  }

  // int64 LastSellRate = 9;
  if (this->_internal_lastsellrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_lastsellrate(), target);
  }

  // int64 LastBuyAllin = 10;
  if (this->_internal_lastbuyallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastbuyallin(), target);
  }

  // int64 LastSellAllin = 11;
  if (this->_internal_lastsellallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_lastsellallin(), target);
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_highrate(), target);
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_lowrate(), target);
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_openrate(), target);
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_historycloserate(), target);
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_closerate(), target);
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_amountlevelrate(), target);
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_amountlevelallin(), target);
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_rateside(), target);
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_allinside(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ForwardForex)
  return target;
}

size_t ForwardForex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ForwardForex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuedate());
  }

  // string BuyDate = 4;
  if (!this->_internal_buydate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buydate());
  }

  // string BuyTime = 5;
  if (!this->_internal_buytime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buytime());
  }

  // string SellDate = 6;
  if (!this->_internal_selldate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selldate());
  }

  // string SellTime = 7;
  if (!this->_internal_selltime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selltime());
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_netbasischange());
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_percentagechange());
  }

  // int64 LastBuyRate = 8;
  if (this->_internal_lastbuyrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastbuyrate());
  }

  // int64 LastSellRate = 9;
  if (this->_internal_lastsellrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsellrate());
  }

  // int64 LastBuyAllin = 10;
  if (this->_internal_lastbuyallin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastbuyallin());
  }

  // int64 LastSellAllin = 11;
  if (this->_internal_lastsellallin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsellallin());
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openrate());
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_historycloserate());
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closerate());
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelrate());
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelallin());
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_rateside());
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_allinside());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardForex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForwardForex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardForex::GetClassData() const { return &_class_data_; }


void ForwardForex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForwardForex*>(&to_msg);
  auto& from = static_cast<const ForwardForex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ForwardForex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_valuedate().empty()) {
    _this->_internal_set_valuedate(from._internal_valuedate());
  }
  if (!from._internal_buydate().empty()) {
    _this->_internal_set_buydate(from._internal_buydate());
  }
  if (!from._internal_buytime().empty()) {
    _this->_internal_set_buytime(from._internal_buytime());
  }
  if (!from._internal_selldate().empty()) {
    _this->_internal_set_selldate(from._internal_selldate());
  }
  if (!from._internal_selltime().empty()) {
    _this->_internal_set_selltime(from._internal_selltime());
  }
  if (from._internal_netbasischange() != 0) {
    _this->_internal_set_netbasischange(from._internal_netbasischange());
  }
  if (from._internal_percentagechange() != 0) {
    _this->_internal_set_percentagechange(from._internal_percentagechange());
  }
  if (from._internal_lastbuyrate() != 0) {
    _this->_internal_set_lastbuyrate(from._internal_lastbuyrate());
  }
  if (from._internal_lastsellrate() != 0) {
    _this->_internal_set_lastsellrate(from._internal_lastsellrate());
  }
  if (from._internal_lastbuyallin() != 0) {
    _this->_internal_set_lastbuyallin(from._internal_lastbuyallin());
  }
  if (from._internal_lastsellallin() != 0) {
    _this->_internal_set_lastsellallin(from._internal_lastsellallin());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_openrate() != 0) {
    _this->_internal_set_openrate(from._internal_openrate());
  }
  if (from._internal_historycloserate() != 0) {
    _this->_internal_set_historycloserate(from._internal_historycloserate());
  }
  if (from._internal_closerate() != 0) {
    _this->_internal_set_closerate(from._internal_closerate());
  }
  if (from._internal_amountlevelrate() != 0) {
    _this->_internal_set_amountlevelrate(from._internal_amountlevelrate());
  }
  if (from._internal_amountlevelallin() != 0) {
    _this->_internal_set_amountlevelallin(from._internal_amountlevelallin());
  }
  if (from._internal_rateside() != 0) {
    _this->_internal_set_rateside(from._internal_rateside());
  }
  if (from._internal_allinside() != 0) {
    _this->_internal_set_allinside(from._internal_allinside());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardForex::CopyFrom(const ForwardForex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ForwardForex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardForex::IsInitialized() const {
  return true;
}

void ForwardForex::InternalSwap(ForwardForex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valuedate_, lhs_arena,
      &other->_impl_.valuedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buydate_, lhs_arena,
      &other->_impl_.buydate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buytime_, lhs_arena,
      &other->_impl_.buytime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selldate_, lhs_arena,
      &other->_impl_.selldate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selltime_, lhs_arena,
      &other->_impl_.selltime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForwardForex, _impl_.allinside_)
      + sizeof(ForwardForex::_impl_.allinside_)
      - PROTOBUF_FIELD_OFFSET(ForwardForex, _impl_.netbasischange_)>(
          reinterpret_cast<char*>(&_impl_.netbasischange_),
          reinterpret_cast<char*>(&other->_impl_.netbasischange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardForex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsForex_2eproto_getter, &descriptor_table_MDCfetsForex_2eproto_once,
      file_level_metadata_MDCfetsForex_2eproto[2]);
}

// ===================================================================

class NonDeliverableForwardsForex::_Internal {
 public:
};

NonDeliverableForwardsForex::NonDeliverableForwardsForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
}
NonDeliverableForwardsForex::NonDeliverableForwardsForex(const NonDeliverableForwardsForex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NonDeliverableForwardsForex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.buydate_){}
    , decltype(_impl_.buytime_){}
    , decltype(_impl_.selldate_){}
    , decltype(_impl_.selltime_){}
    , decltype(_impl_.netbasischange_){}
    , decltype(_impl_.percentagechange_){}
    , decltype(_impl_.lastbuyrate_){}
    , decltype(_impl_.lastsellrate_){}
    , decltype(_impl_.lastbuyallin_){}
    , decltype(_impl_.lastsellallin_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.openrate_){}
    , decltype(_impl_.historycloserate_){}
    , decltype(_impl_.closerate_){}
    , decltype(_impl_.amountlevelrate_){}
    , decltype(_impl_.amountlevelallin_){}
    , decltype(_impl_.rateside_){}
    , decltype(_impl_.allinside_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valuedate().empty()) {
    _this->_impl_.valuedate_.Set(from._internal_valuedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buydate().empty()) {
    _this->_impl_.buydate_.Set(from._internal_buydate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buytime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buytime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buytime().empty()) {
    _this->_impl_.buytime_.Set(from._internal_buytime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selldate().empty()) {
    _this->_impl_.selldate_.Set(from._internal_selldate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selltime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selltime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selltime().empty()) {
    _this->_impl_.selltime_.Set(from._internal_selltime(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.netbasischange_, &from._impl_.netbasischange_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allinside_) -
    reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
}

inline void NonDeliverableForwardsForex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.buydate_){}
    , decltype(_impl_.buytime_){}
    , decltype(_impl_.selldate_){}
    , decltype(_impl_.selltime_){}
    , decltype(_impl_.netbasischange_){int64_t{0}}
    , decltype(_impl_.percentagechange_){int64_t{0}}
    , decltype(_impl_.lastbuyrate_){int64_t{0}}
    , decltype(_impl_.lastsellrate_){int64_t{0}}
    , decltype(_impl_.lastbuyallin_){int64_t{0}}
    , decltype(_impl_.lastsellallin_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.openrate_){int64_t{0}}
    , decltype(_impl_.historycloserate_){int64_t{0}}
    , decltype(_impl_.closerate_){int64_t{0}}
    , decltype(_impl_.amountlevelrate_){0}
    , decltype(_impl_.amountlevelallin_){0}
    , decltype(_impl_.rateside_){0}
    , decltype(_impl_.allinside_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buytime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buytime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selltime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selltime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NonDeliverableForwardsForex::~NonDeliverableForwardsForex() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NonDeliverableForwardsForex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.valuedate_.Destroy();
  _impl_.buydate_.Destroy();
  _impl_.buytime_.Destroy();
  _impl_.selldate_.Destroy();
  _impl_.selltime_.Destroy();
}

void NonDeliverableForwardsForex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NonDeliverableForwardsForex::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valuedate_.ClearToEmpty();
  _impl_.buydate_.ClearToEmpty();
  _impl_.buytime_.ClearToEmpty();
  _impl_.selldate_.ClearToEmpty();
  _impl_.selltime_.ClearToEmpty();
  ::memset(&_impl_.netbasischange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allinside_) -
      reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NonDeliverableForwardsForex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ValueDate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_valuedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.ValueDate"));
        } else
          goto handle_unusual;
        continue;
      // int64 NetBasisChange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.netbasischange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PercentageChange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.percentagechange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BuyDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_buydate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyDate"));
        } else
          goto handle_unusual;
        continue;
      // string BuyTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buytime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyTime"));
        } else
          goto handle_unusual;
        continue;
      // string SellDate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_selldate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellDate"));
        } else
          goto handle_unusual;
        continue;
      // string SellTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_selltime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellTime"));
        } else
          goto handle_unusual;
        continue;
      // int64 LastBuyRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lastbuyrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastSellRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.lastsellrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastBuyAllin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lastbuyallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastSellAllin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.lastsellallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.openrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HistoryCloseRate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.historycloserate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseRate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.closerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelRate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.amountlevelrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelAllin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.amountlevelallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RateSide = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.rateside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AllinSide = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.allinside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NonDeliverableForwardsForex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuedate().data(), static_cast<int>(this->_internal_valuedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.ValueDate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_valuedate(), target);
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_netbasischange(), target);
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_percentagechange(), target);
  }

  // string BuyDate = 4;
  if (!this->_internal_buydate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buydate().data(), static_cast<int>(this->_internal_buydate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyDate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_buydate(), target);
  }

  // string BuyTime = 5;
  if (!this->_internal_buytime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buytime().data(), static_cast<int>(this->_internal_buytime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_buytime(), target);
  }

  // string SellDate = 6;
  if (!this->_internal_selldate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selldate().data(), static_cast<int>(this->_internal_selldate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellDate");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_selldate(), target);
  }

  // string SellTime = 7;
  if (!this->_internal_selltime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selltime().data(), static_cast<int>(this->_internal_selltime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_selltime(), target);
  }

  // int64 LastBuyRate = 8;
  if (this->_internal_lastbuyrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_lastbuyrate(), target);
  }

  // int64 LastSellRate = 9;
  if (this->_internal_lastsellrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_lastsellrate(), target);
  }

  // int64 LastBuyAllin = 10;
  if (this->_internal_lastbuyallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastbuyallin(), target);
  }

  // int64 LastSellAllin = 11;
  if (this->_internal_lastsellallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_lastsellallin(), target);
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_highrate(), target);
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_lowrate(), target);
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_openrate(), target);
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_historycloserate(), target);
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_closerate(), target);
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_amountlevelrate(), target);
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_amountlevelallin(), target);
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_rateside(), target);
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_allinside(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
  return target;
}

size_t NonDeliverableForwardsForex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuedate());
  }

  // string BuyDate = 4;
  if (!this->_internal_buydate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buydate());
  }

  // string BuyTime = 5;
  if (!this->_internal_buytime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buytime());
  }

  // string SellDate = 6;
  if (!this->_internal_selldate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selldate());
  }

  // string SellTime = 7;
  if (!this->_internal_selltime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selltime());
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_netbasischange());
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_percentagechange());
  }

  // int64 LastBuyRate = 8;
  if (this->_internal_lastbuyrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastbuyrate());
  }

  // int64 LastSellRate = 9;
  if (this->_internal_lastsellrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsellrate());
  }

  // int64 LastBuyAllin = 10;
  if (this->_internal_lastbuyallin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastbuyallin());
  }

  // int64 LastSellAllin = 11;
  if (this->_internal_lastsellallin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsellallin());
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openrate());
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_historycloserate());
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closerate());
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelrate());
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelallin());
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_rateside());
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_allinside());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NonDeliverableForwardsForex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NonDeliverableForwardsForex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NonDeliverableForwardsForex::GetClassData() const { return &_class_data_; }


void NonDeliverableForwardsForex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NonDeliverableForwardsForex*>(&to_msg);
  auto& from = static_cast<const NonDeliverableForwardsForex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_valuedate().empty()) {
    _this->_internal_set_valuedate(from._internal_valuedate());
  }
  if (!from._internal_buydate().empty()) {
    _this->_internal_set_buydate(from._internal_buydate());
  }
  if (!from._internal_buytime().empty()) {
    _this->_internal_set_buytime(from._internal_buytime());
  }
  if (!from._internal_selldate().empty()) {
    _this->_internal_set_selldate(from._internal_selldate());
  }
  if (!from._internal_selltime().empty()) {
    _this->_internal_set_selltime(from._internal_selltime());
  }
  if (from._internal_netbasischange() != 0) {
    _this->_internal_set_netbasischange(from._internal_netbasischange());
  }
  if (from._internal_percentagechange() != 0) {
    _this->_internal_set_percentagechange(from._internal_percentagechange());
  }
  if (from._internal_lastbuyrate() != 0) {
    _this->_internal_set_lastbuyrate(from._internal_lastbuyrate());
  }
  if (from._internal_lastsellrate() != 0) {
    _this->_internal_set_lastsellrate(from._internal_lastsellrate());
  }
  if (from._internal_lastbuyallin() != 0) {
    _this->_internal_set_lastbuyallin(from._internal_lastbuyallin());
  }
  if (from._internal_lastsellallin() != 0) {
    _this->_internal_set_lastsellallin(from._internal_lastsellallin());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_openrate() != 0) {
    _this->_internal_set_openrate(from._internal_openrate());
  }
  if (from._internal_historycloserate() != 0) {
    _this->_internal_set_historycloserate(from._internal_historycloserate());
  }
  if (from._internal_closerate() != 0) {
    _this->_internal_set_closerate(from._internal_closerate());
  }
  if (from._internal_amountlevelrate() != 0) {
    _this->_internal_set_amountlevelrate(from._internal_amountlevelrate());
  }
  if (from._internal_amountlevelallin() != 0) {
    _this->_internal_set_amountlevelallin(from._internal_amountlevelallin());
  }
  if (from._internal_rateside() != 0) {
    _this->_internal_set_rateside(from._internal_rateside());
  }
  if (from._internal_allinside() != 0) {
    _this->_internal_set_allinside(from._internal_allinside());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NonDeliverableForwardsForex::CopyFrom(const NonDeliverableForwardsForex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonDeliverableForwardsForex::IsInitialized() const {
  return true;
}

void NonDeliverableForwardsForex::InternalSwap(NonDeliverableForwardsForex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valuedate_, lhs_arena,
      &other->_impl_.valuedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buydate_, lhs_arena,
      &other->_impl_.buydate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buytime_, lhs_arena,
      &other->_impl_.buytime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selldate_, lhs_arena,
      &other->_impl_.selldate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selltime_, lhs_arena,
      &other->_impl_.selltime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NonDeliverableForwardsForex, _impl_.allinside_)
      + sizeof(NonDeliverableForwardsForex::_impl_.allinside_)
      - PROTOBUF_FIELD_OFFSET(NonDeliverableForwardsForex, _impl_.netbasischange_)>(
          reinterpret_cast<char*>(&_impl_.netbasischange_),
          reinterpret_cast<char*>(&other->_impl_.netbasischange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NonDeliverableForwardsForex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsForex_2eproto_getter, &descriptor_table_MDCfetsForex_2eproto_once,
      file_level_metadata_MDCfetsForex_2eproto[3]);
}

// ===================================================================

class SwapForex::_Internal {
 public:
};

SwapForex::SwapForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SwapForex)
}
SwapForex::SwapForex(const SwapForex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwapForex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.buydate_){}
    , decltype(_impl_.buytime_){}
    , decltype(_impl_.selldate_){}
    , decltype(_impl_.selltime_){}
    , decltype(_impl_.legsign_){}
    , decltype(_impl_.netbasischange_){}
    , decltype(_impl_.percentagechange_){}
    , decltype(_impl_.lastbuyrate_){}
    , decltype(_impl_.lastsellrate_){}
    , decltype(_impl_.lastbuyallin_){}
    , decltype(_impl_.lastsellallin_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.openrate_){}
    , decltype(_impl_.historycloserate_){}
    , decltype(_impl_.closerate_){}
    , decltype(_impl_.amountlevelrate_){}
    , decltype(_impl_.amountlevelallin_){}
    , decltype(_impl_.rateside_){}
    , decltype(_impl_.allinside_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valuedate().empty()) {
    _this->_impl_.valuedate_.Set(from._internal_valuedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buydate().empty()) {
    _this->_impl_.buydate_.Set(from._internal_buydate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buytime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buytime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buytime().empty()) {
    _this->_impl_.buytime_.Set(from._internal_buytime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selldate().empty()) {
    _this->_impl_.selldate_.Set(from._internal_selldate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selltime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selltime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selltime().empty()) {
    _this->_impl_.selltime_.Set(from._internal_selltime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.legsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_legsign().empty()) {
    _this->_impl_.legsign_.Set(from._internal_legsign(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.netbasischange_, &from._impl_.netbasischange_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allinside_) -
    reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SwapForex)
}

inline void SwapForex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.buydate_){}
    , decltype(_impl_.buytime_){}
    , decltype(_impl_.selldate_){}
    , decltype(_impl_.selltime_){}
    , decltype(_impl_.legsign_){}
    , decltype(_impl_.netbasischange_){int64_t{0}}
    , decltype(_impl_.percentagechange_){int64_t{0}}
    , decltype(_impl_.lastbuyrate_){int64_t{0}}
    , decltype(_impl_.lastsellrate_){int64_t{0}}
    , decltype(_impl_.lastbuyallin_){int64_t{0}}
    , decltype(_impl_.lastsellallin_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.openrate_){int64_t{0}}
    , decltype(_impl_.historycloserate_){int64_t{0}}
    , decltype(_impl_.closerate_){int64_t{0}}
    , decltype(_impl_.amountlevelrate_){0}
    , decltype(_impl_.amountlevelallin_){0}
    , decltype(_impl_.rateside_){0}
    , decltype(_impl_.allinside_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buydate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buydate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buytime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buytime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selltime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selltime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.legsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SwapForex::~SwapForex() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SwapForex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwapForex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.valuedate_.Destroy();
  _impl_.buydate_.Destroy();
  _impl_.buytime_.Destroy();
  _impl_.selldate_.Destroy();
  _impl_.selltime_.Destroy();
  _impl_.legsign_.Destroy();
}

void SwapForex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwapForex::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SwapForex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valuedate_.ClearToEmpty();
  _impl_.buydate_.ClearToEmpty();
  _impl_.buytime_.ClearToEmpty();
  _impl_.selldate_.ClearToEmpty();
  _impl_.selltime_.ClearToEmpty();
  _impl_.legsign_.ClearToEmpty();
  ::memset(&_impl_.netbasischange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allinside_) -
      reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapForex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ValueDate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_valuedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwapForex.ValueDate"));
        } else
          goto handle_unusual;
        continue;
      // int64 NetBasisChange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.netbasischange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PercentageChange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.percentagechange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BuyDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_buydate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwapForex.BuyDate"));
        } else
          goto handle_unusual;
        continue;
      // string BuyTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buytime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwapForex.BuyTime"));
        } else
          goto handle_unusual;
        continue;
      // string SellDate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_selldate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwapForex.SellDate"));
        } else
          goto handle_unusual;
        continue;
      // string SellTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_selltime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwapForex.SellTime"));
        } else
          goto handle_unusual;
        continue;
      // int64 LastBuyRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lastbuyrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastSellRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.lastsellrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastBuyAllin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lastbuyallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastSellAllin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.lastsellallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.openrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HistoryCloseRate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.historycloserate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseRate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.closerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelRate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.amountlevelrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelAllin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.amountlevelallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RateSide = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.rateside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AllinSide = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.allinside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LegSign = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_legsign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwapForex.LegSign"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwapForex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SwapForex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuedate().data(), static_cast<int>(this->_internal_valuedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwapForex.ValueDate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_valuedate(), target);
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_netbasischange(), target);
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_percentagechange(), target);
  }

  // string BuyDate = 4;
  if (!this->_internal_buydate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buydate().data(), static_cast<int>(this->_internal_buydate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwapForex.BuyDate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_buydate(), target);
  }

  // string BuyTime = 5;
  if (!this->_internal_buytime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buytime().data(), static_cast<int>(this->_internal_buytime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwapForex.BuyTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_buytime(), target);
  }

  // string SellDate = 6;
  if (!this->_internal_selldate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selldate().data(), static_cast<int>(this->_internal_selldate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwapForex.SellDate");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_selldate(), target);
  }

  // string SellTime = 7;
  if (!this->_internal_selltime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selltime().data(), static_cast<int>(this->_internal_selltime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwapForex.SellTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_selltime(), target);
  }

  // int64 LastBuyRate = 8;
  if (this->_internal_lastbuyrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_lastbuyrate(), target);
  }

  // int64 LastSellRate = 9;
  if (this->_internal_lastsellrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_lastsellrate(), target);
  }

  // int64 LastBuyAllin = 10;
  if (this->_internal_lastbuyallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastbuyallin(), target);
  }

  // int64 LastSellAllin = 11;
  if (this->_internal_lastsellallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_lastsellallin(), target);
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_highrate(), target);
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_lowrate(), target);
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_openrate(), target);
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_historycloserate(), target);
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_closerate(), target);
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_amountlevelrate(), target);
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_amountlevelallin(), target);
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_rateside(), target);
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_allinside(), target);
  }

  // string LegSign = 21;
  if (!this->_internal_legsign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_legsign().data(), static_cast<int>(this->_internal_legsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwapForex.LegSign");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_legsign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SwapForex)
  return target;
}

size_t SwapForex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SwapForex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuedate());
  }

  // string BuyDate = 4;
  if (!this->_internal_buydate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buydate());
  }

  // string BuyTime = 5;
  if (!this->_internal_buytime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buytime());
  }

  // string SellDate = 6;
  if (!this->_internal_selldate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selldate());
  }

  // string SellTime = 7;
  if (!this->_internal_selltime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selltime());
  }

  // string LegSign = 21;
  if (!this->_internal_legsign().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_legsign());
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_netbasischange());
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_percentagechange());
  }

  // int64 LastBuyRate = 8;
  if (this->_internal_lastbuyrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastbuyrate());
  }

  // int64 LastSellRate = 9;
  if (this->_internal_lastsellrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsellrate());
  }

  // int64 LastBuyAllin = 10;
  if (this->_internal_lastbuyallin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastbuyallin());
  }

  // int64 LastSellAllin = 11;
  if (this->_internal_lastsellallin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsellallin());
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openrate());
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_historycloserate());
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closerate());
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelrate());
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelallin());
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_rateside());
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_allinside());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapForex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwapForex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapForex::GetClassData() const { return &_class_data_; }


void SwapForex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwapForex*>(&to_msg);
  auto& from = static_cast<const SwapForex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SwapForex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_valuedate().empty()) {
    _this->_internal_set_valuedate(from._internal_valuedate());
  }
  if (!from._internal_buydate().empty()) {
    _this->_internal_set_buydate(from._internal_buydate());
  }
  if (!from._internal_buytime().empty()) {
    _this->_internal_set_buytime(from._internal_buytime());
  }
  if (!from._internal_selldate().empty()) {
    _this->_internal_set_selldate(from._internal_selldate());
  }
  if (!from._internal_selltime().empty()) {
    _this->_internal_set_selltime(from._internal_selltime());
  }
  if (!from._internal_legsign().empty()) {
    _this->_internal_set_legsign(from._internal_legsign());
  }
  if (from._internal_netbasischange() != 0) {
    _this->_internal_set_netbasischange(from._internal_netbasischange());
  }
  if (from._internal_percentagechange() != 0) {
    _this->_internal_set_percentagechange(from._internal_percentagechange());
  }
  if (from._internal_lastbuyrate() != 0) {
    _this->_internal_set_lastbuyrate(from._internal_lastbuyrate());
  }
  if (from._internal_lastsellrate() != 0) {
    _this->_internal_set_lastsellrate(from._internal_lastsellrate());
  }
  if (from._internal_lastbuyallin() != 0) {
    _this->_internal_set_lastbuyallin(from._internal_lastbuyallin());
  }
  if (from._internal_lastsellallin() != 0) {
    _this->_internal_set_lastsellallin(from._internal_lastsellallin());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_openrate() != 0) {
    _this->_internal_set_openrate(from._internal_openrate());
  }
  if (from._internal_historycloserate() != 0) {
    _this->_internal_set_historycloserate(from._internal_historycloserate());
  }
  if (from._internal_closerate() != 0) {
    _this->_internal_set_closerate(from._internal_closerate());
  }
  if (from._internal_amountlevelrate() != 0) {
    _this->_internal_set_amountlevelrate(from._internal_amountlevelrate());
  }
  if (from._internal_amountlevelallin() != 0) {
    _this->_internal_set_amountlevelallin(from._internal_amountlevelallin());
  }
  if (from._internal_rateside() != 0) {
    _this->_internal_set_rateside(from._internal_rateside());
  }
  if (from._internal_allinside() != 0) {
    _this->_internal_set_allinside(from._internal_allinside());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapForex::CopyFrom(const SwapForex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SwapForex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapForex::IsInitialized() const {
  return true;
}

void SwapForex::InternalSwap(SwapForex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valuedate_, lhs_arena,
      &other->_impl_.valuedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buydate_, lhs_arena,
      &other->_impl_.buydate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buytime_, lhs_arena,
      &other->_impl_.buytime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selldate_, lhs_arena,
      &other->_impl_.selldate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selltime_, lhs_arena,
      &other->_impl_.selltime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.legsign_, lhs_arena,
      &other->_impl_.legsign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapForex, _impl_.allinside_)
      + sizeof(SwapForex::_impl_.allinside_)
      - PROTOBUF_FIELD_OFFSET(SwapForex, _impl_.netbasischange_)>(
          reinterpret_cast<char*>(&_impl_.netbasischange_),
          reinterpret_cast<char*>(&other->_impl_.netbasischange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapForex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsForex_2eproto_getter, &descriptor_table_MDCfetsForex_2eproto_once,
      file_level_metadata_MDCfetsForex_2eproto[4]);
}

// ===================================================================

class OptionForex::_Internal {
 public:
};

OptionForex::OptionForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.OptionForex)
}
OptionForex::OptionForex(const OptionForex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionForex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fxterm_){}
    , decltype(_impl_.tradedate_){}
    , decltype(_impl_.tradetime_){}
    , decltype(_impl_.optiontype_){}
    , decltype(_impl_.premium_){}
    , decltype(_impl_.volatility_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.premiumtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fxterm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fxterm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fxterm().empty()) {
    _this->_impl_.fxterm_.Set(from._internal_fxterm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradedate().empty()) {
    _this->_impl_.tradedate_.Set(from._internal_tradedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradetime().empty()) {
    _this->_impl_.tradetime_.Set(from._internal_tradetime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optiontype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optiontype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optiontype().empty()) {
    _this->_impl_.optiontype_.Set(from._internal_optiontype(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.premium_, &from._impl_.premium_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.premiumtype_) -
    reinterpret_cast<char*>(&_impl_.premium_)) + sizeof(_impl_.premiumtype_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.OptionForex)
}

inline void OptionForex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fxterm_){}
    , decltype(_impl_.tradedate_){}
    , decltype(_impl_.tradetime_){}
    , decltype(_impl_.optiontype_){}
    , decltype(_impl_.premium_){int64_t{0}}
    , decltype(_impl_.volatility_){int64_t{0}}
    , decltype(_impl_.volume_){int64_t{0}}
    , decltype(_impl_.premiumtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fxterm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fxterm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optiontype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optiontype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OptionForex::~OptionForex() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.OptionForex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionForex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fxterm_.Destroy();
  _impl_.tradedate_.Destroy();
  _impl_.tradetime_.Destroy();
  _impl_.optiontype_.Destroy();
}

void OptionForex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionForex::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.OptionForex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fxterm_.ClearToEmpty();
  _impl_.tradedate_.ClearToEmpty();
  _impl_.tradetime_.ClearToEmpty();
  _impl_.optiontype_.ClearToEmpty();
  ::memset(&_impl_.premium_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.premiumtype_) -
      reinterpret_cast<char*>(&_impl_.premium_)) + sizeof(_impl_.premiumtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionForex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FxTerm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fxterm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionForex.FxTerm"));
        } else
          goto handle_unusual;
        continue;
      // int64 Premium = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.premium_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Volatility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradeDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionForex.TradeDate"));
        } else
          goto handle_unusual;
        continue;
      // string TradeTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_tradetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionForex.TradeTime"));
        } else
          goto handle_unusual;
        continue;
      // int32 PremiumType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.premiumtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OptionType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_optiontype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionForex.OptionType"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionForex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.OptionForex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string FxTerm = 1;
  if (!this->_internal_fxterm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fxterm().data(), static_cast<int>(this->_internal_fxterm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionForex.FxTerm");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fxterm(), target);
  }

  // int64 Premium = 2;
  if (this->_internal_premium() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_premium(), target);
  }

  // int64 Volatility = 3;
  if (this->_internal_volatility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_volatility(), target);
  }

  // int64 Volume = 4;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_volume(), target);
  }

  // string TradeDate = 5;
  if (!this->_internal_tradedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradedate().data(), static_cast<int>(this->_internal_tradedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionForex.TradeDate");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradedate(), target);
  }

  // string TradeTime = 6;
  if (!this->_internal_tradetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradetime().data(), static_cast<int>(this->_internal_tradetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionForex.TradeTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_tradetime(), target);
  }

  // int32 PremiumType = 7;
  if (this->_internal_premiumtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_premiumtype(), target);
  }

  // string OptionType = 8;
  if (!this->_internal_optiontype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optiontype().data(), static_cast<int>(this->_internal_optiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionForex.OptionType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_optiontype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.OptionForex)
  return target;
}

size_t OptionForex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.OptionForex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FxTerm = 1;
  if (!this->_internal_fxterm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fxterm());
  }

  // string TradeDate = 5;
  if (!this->_internal_tradedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradedate());
  }

  // string TradeTime = 6;
  if (!this->_internal_tradetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradetime());
  }

  // string OptionType = 8;
  if (!this->_internal_optiontype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optiontype());
  }

  // int64 Premium = 2;
  if (this->_internal_premium() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_premium());
  }

  // int64 Volatility = 3;
  if (this->_internal_volatility() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_volatility());
  }

  // int64 Volume = 4;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_volume());
  }

  // int32 PremiumType = 7;
  if (this->_internal_premiumtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_premiumtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionForex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionForex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionForex::GetClassData() const { return &_class_data_; }


void OptionForex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionForex*>(&to_msg);
  auto& from = static_cast<const OptionForex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.OptionForex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fxterm().empty()) {
    _this->_internal_set_fxterm(from._internal_fxterm());
  }
  if (!from._internal_tradedate().empty()) {
    _this->_internal_set_tradedate(from._internal_tradedate());
  }
  if (!from._internal_tradetime().empty()) {
    _this->_internal_set_tradetime(from._internal_tradetime());
  }
  if (!from._internal_optiontype().empty()) {
    _this->_internal_set_optiontype(from._internal_optiontype());
  }
  if (from._internal_premium() != 0) {
    _this->_internal_set_premium(from._internal_premium());
  }
  if (from._internal_volatility() != 0) {
    _this->_internal_set_volatility(from._internal_volatility());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_premiumtype() != 0) {
    _this->_internal_set_premiumtype(from._internal_premiumtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionForex::CopyFrom(const OptionForex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.OptionForex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionForex::IsInitialized() const {
  return true;
}

void OptionForex::InternalSwap(OptionForex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fxterm_, lhs_arena,
      &other->_impl_.fxterm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradedate_, lhs_arena,
      &other->_impl_.tradedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradetime_, lhs_arena,
      &other->_impl_.tradetime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optiontype_, lhs_arena,
      &other->_impl_.optiontype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionForex, _impl_.premiumtype_)
      + sizeof(OptionForex::_impl_.premiumtype_)
      - PROTOBUF_FIELD_OFFSET(OptionForex, _impl_.premium_)>(
          reinterpret_cast<char*>(&_impl_.premium_),
          reinterpret_cast<char*>(&other->_impl_.premium_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionForex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsForex_2eproto_getter, &descriptor_table_MDCfetsForex_2eproto_once,
      file_level_metadata_MDCfetsForex_2eproto[5]);
}

// ===================================================================

class SpotClosePriceForex::_Internal {
 public:
};

SpotClosePriceForex::SpotClosePriceForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SpotClosePriceForex)
}
SpotClosePriceForex::SpotClosePriceForex(const SpotClosePriceForex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpotClosePriceForex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.updatedate_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.closepx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.updatedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updatedate().empty()) {
    _this->_impl_.updatedate_.Set(from._internal_updatedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updatetime().empty()) {
    _this->_impl_.updatetime_.Set(from._internal_updatetime(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.closepx_ = from._impl_.closepx_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SpotClosePriceForex)
}

inline void SpotClosePriceForex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.updatedate_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.closepx_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.updatedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpotClosePriceForex::~SpotClosePriceForex() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SpotClosePriceForex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotClosePriceForex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.updatedate_.Destroy();
  _impl_.updatetime_.Destroy();
}

void SpotClosePriceForex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotClosePriceForex::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SpotClosePriceForex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updatedate_.ClearToEmpty();
  _impl_.updatetime_.ClearToEmpty();
  _impl_.closepx_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotClosePriceForex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ClosePx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UpdateDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_updatedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateDate"));
        } else
          goto handle_unusual;
        continue;
      // string UpdateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_updatetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateTime"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpotClosePriceForex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SpotClosePriceForex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ClosePx = 1;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_closepx(), target);
  }

  // string UpdateDate = 2;
  if (!this->_internal_updatedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatedate().data(), static_cast<int>(this->_internal_updatedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateDate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_updatedate(), target);
  }

  // string UpdateTime = 3;
  if (!this->_internal_updatetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatetime().data(), static_cast<int>(this->_internal_updatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_updatetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SpotClosePriceForex)
  return target;
}

size_t SpotClosePriceForex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SpotClosePriceForex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UpdateDate = 2;
  if (!this->_internal_updatedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatedate());
  }

  // string UpdateTime = 3;
  if (!this->_internal_updatetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatetime());
  }

  // int64 ClosePx = 1;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpotClosePriceForex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpotClosePriceForex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpotClosePriceForex::GetClassData() const { return &_class_data_; }


void SpotClosePriceForex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpotClosePriceForex*>(&to_msg);
  auto& from = static_cast<const SpotClosePriceForex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SpotClosePriceForex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_updatedate().empty()) {
    _this->_internal_set_updatedate(from._internal_updatedate());
  }
  if (!from._internal_updatetime().empty()) {
    _this->_internal_set_updatetime(from._internal_updatetime());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpotClosePriceForex::CopyFrom(const SpotClosePriceForex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SpotClosePriceForex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotClosePriceForex::IsInitialized() const {
  return true;
}

void SpotClosePriceForex::InternalSwap(SpotClosePriceForex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updatedate_, lhs_arena,
      &other->_impl_.updatedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updatetime_, lhs_arena,
      &other->_impl_.updatetime_, rhs_arena
  );
  swap(_impl_.closepx_, other->_impl_.closepx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotClosePriceForex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsForex_2eproto_getter, &descriptor_table_MDCfetsForex_2eproto_once,
      file_level_metadata_MDCfetsForex_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDCfetsForex*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDCfetsForex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDCfetsForex >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SpotForex*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SpotForex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SpotForex >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ForwardForex*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ForwardForex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ForwardForex >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SwapForex*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SwapForex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SwapForex >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::OptionForex*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::OptionForex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::OptionForex >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SpotClosePriceForex*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SpotClosePriceForex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SpotClosePriceForex >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
