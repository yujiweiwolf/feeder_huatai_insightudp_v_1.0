// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDPlayback.proto

#include "MDPlayback.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR PlaybackRequest::PlaybackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityids_)*/{}
  , /*decltype(_impl_.securitysourcetype_)*/{}
  , /*decltype(_impl_.taskid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.starttime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stoptime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initialdatastarttime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replaydatatype_)*/0
  , /*decltype(_impl_.replayrate_)*/0
  , /*decltype(_impl_.exrightstype_)*/0
  , /*decltype(_impl_.isneedinitialdata_)*/false
  , /*decltype(_impl_.replayfunctype_)*/0
  , /*decltype(_impl_.sorttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaybackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackRequestDefaultTypeInternal() {}
  union {
    PlaybackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackRequestDefaultTypeInternal _PlaybackRequest_default_instance_;
PROTOBUF_CONSTEXPR PlaybackResponse::PlaybackResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorcontext_)*/nullptr
  , /*decltype(_impl_.issuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaybackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackResponseDefaultTypeInternal() {}
  union {
    PlaybackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackResponseDefaultTypeInternal _PlaybackResponse_default_instance_;
PROTOBUF_CONSTEXPR PlaybackControlRequest::PlaybackControlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.controltype_)*/0
  , /*decltype(_impl_.replayrate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaybackControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackControlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackControlRequestDefaultTypeInternal() {}
  union {
    PlaybackControlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackControlRequestDefaultTypeInternal _PlaybackControlRequest_default_instance_;
PROTOBUF_CONSTEXPR PlaybackControlResponse::PlaybackControlResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorcontext_)*/nullptr
  , /*decltype(_impl_.issuccess_)*/false
  , /*decltype(_impl_.currentreplayrate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaybackControlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackControlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackControlResponseDefaultTypeInternal() {}
  union {
    PlaybackControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackControlResponseDefaultTypeInternal _PlaybackControlResponse_default_instance_;
PROTOBUF_CONSTEXPR PlaybackStatusRequest::PlaybackStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaybackStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackStatusRequestDefaultTypeInternal() {}
  union {
    PlaybackStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackStatusRequestDefaultTypeInternal _PlaybackStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR PlaybackStatus::PlaybackStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.taskstatus_)*/0
  , /*decltype(_impl_.replaypercent_)*/0
  , /*decltype(_impl_.currentreplayrate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaybackStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackStatusDefaultTypeInternal() {}
  union {
    PlaybackStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackStatusDefaultTypeInternal _PlaybackStatus_default_instance_;
PROTOBUF_CONSTEXPR PlaybackPayload::PlaybackPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.marketdatastream_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaybackPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackPayloadDefaultTypeInternal() {}
  union {
    PlaybackPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackPayloadDefaultTypeInternal _PlaybackPayload_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDPlayback_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_MDPlayback_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDPlayback_2eproto = nullptr;

const uint32_t TableStruct_MDPlayback_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.htscsecurityids_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.securitysourcetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.stoptime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.replaydatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.replayrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.exrightstype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.isneedinitialdata_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.initialdatastarttime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.replayfunctype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _impl_.sorttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackResponse, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackResponse, _impl_.issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackResponse, _impl_.errorcontext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlRequest, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlRequest, _impl_.controltype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlRequest, _impl_.replayrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, _impl_.issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, _impl_.errorcontext_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, _impl_.currentreplayrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatusRequest, _impl_.taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, _impl_.taskstatus_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, _impl_.replaypercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, _impl_.currentreplayrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackPayload, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackPayload, _impl_.marketdatastream_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackRequest)},
  { 18, -1, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackResponse)},
  { 27, -1, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackControlRequest)},
  { 36, -1, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackControlResponse)},
  { 46, -1, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackStatusRequest)},
  { 53, -1, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackStatus)},
  { 63, -1, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackPayload)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_PlaybackRequest_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_PlaybackResponse_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_PlaybackControlRequest_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_PlaybackControlResponse_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_PlaybackStatusRequest_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_PlaybackStatus_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_PlaybackPayload_default_instance_._instance,
};

const char descriptor_table_protodef_MDPlayback_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020MDPlayback.proto\022\032com.htsc.mdc.insight"
  ".model\032\025EMarketDataType.proto\032\020MarketDat"
  "a.proto\032\031InsightErrorContext.proto\032\030Secu"
  "ritySourceType.proto\"\260\003\n\017PlaybackRequest"
  "\022\016\n\006taskId\030\001 \001(\t\022\027\n\017htscSecurityIDs\030\002 \003("
  "\t\022J\n\022securitySourceType\030\003 \003(\0132..com.htsc"
  ".mdc.insight.model.SecuritySourceType\022\021\n"
  "\tstartTime\030\004 \001(\t\022\020\n\010stopTime\030\005 \001(\t\022C\n\016re"
  "playDataType\030\006 \001(\0162+.com.htsc.mdc.insigh"
  "t.model.EMarketDataType\022\022\n\nreplayRate\030\007 "
  "\001(\005\022G\n\014exrightsType\030\010 \001(\01621.com.htsc.mdc"
  ".insight.model.EPlaybackExrightsType\022\031\n\021"
  "isNeedInitialData\030\t \001(\010\022\034\n\024initialDataSt"
  "artTime\030\n \001(\t\022\026\n\016replayFuncType\030\013 \001(\005\022\020\n"
  "\010sortType\030\014 \001(\005\"|\n\020PlaybackResponse\022\016\n\006t"
  "askId\030\001 \001(\t\022\021\n\tisSuccess\030\002 \001(\010\022E\n\014errorC"
  "ontext\030\003 \001(\0132/.com.htsc.mdc.insight.mode"
  "l.InsightErrorContext\"\207\001\n\026PlaybackContro"
  "lRequest\022\016\n\006taskId\030\001 \001(\t\022I\n\013controlType\030"
  "\002 \001(\01624.com.htsc.mdc.insight.model.EPlay"
  "backTaskControlType\022\022\n\nreplayRate\030\003 \001(\005\""
  "\236\001\n\027PlaybackControlResponse\022\016\n\006taskId\030\001 "
  "\001(\t\022\021\n\tisSuccess\030\002 \001(\010\022E\n\014errorContext\030\003"
  " \001(\0132/.com.htsc.mdc.insight.model.Insigh"
  "tErrorContext\022\031\n\021currentReplayRate\030\004 \001(\005"
  "\"\'\n\025PlaybackStatusRequest\022\016\n\006taskId\030\001 \001("
  "\t\"\227\001\n\016PlaybackStatus\022\016\n\006taskId\030\001 \001(\t\022C\n\n"
  "taskStatus\030\002 \001(\0162/.com.htsc.mdc.insight."
  "model.EPlaybackTaskStatus\022\025\n\rreplayPerce"
  "nt\030\003 \001(\005\022\031\n\021currentReplayRate\030\004 \001(\005\"i\n\017P"
  "laybackPayload\022\016\n\006taskId\030\001 \001(\t\022F\n\020market"
  "DataStream\030\002 \001(\0132,.com.htsc.mdc.insight."
  "model.MarketDataStream*p\n\025EPlaybackExrig"
  "htsType\022\031\n\025DEFAULT_EXRIGHTS_TYPE\020\000\022\017\n\013NO"
  "_EXRIGHTS\020\n\022\024\n\020FORWARD_EXRIGHTS\020\013\022\025\n\021BAC"
  "KWARD_EXRIGHTS\020\014*\\\n\030EPlaybackTaskControl"
  "Type\022\030\n\024DEFAULT_CONTROL_TYPE\020\000\022\017\n\013CANCEL"
  "_TASK\020\001\022\025\n\021SET_PLAYBACK_RATE\020\002*\235\001\n\023EPlay"
  "backTaskStatus\022\022\n\016DEFAULT_STATUS\020\000\022\020\n\014IN"
  "ITIALIZING\020\013\022\r\n\tPREPARING\020\014\022\014\n\010PREPARED\020"
  "\r\022\013\n\007RUNNING\020\016\022\r\n\tAPPENDING\020\017\022\014\n\010CANCELE"
  "D\020\020\022\r\n\tCOMPLETED\020\021\022\n\n\006FAILED\020\022B2\n\032com.ht"
  "sc.mdc.insight.modelB\017MDPlaybackProtoH\001\240"
  "\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDPlayback_2eproto_deps[4] = {
  &::descriptor_table_EMarketDataType_2eproto,
  &::descriptor_table_InsightErrorContext_2eproto,
  &::descriptor_table_MarketData_2eproto,
  &::descriptor_table_SecuritySourceType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDPlayback_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDPlayback_2eproto = {
    false, false, 1730, descriptor_table_protodef_MDPlayback_2eproto,
    "MDPlayback.proto",
    &descriptor_table_MDPlayback_2eproto_once, descriptor_table_MDPlayback_2eproto_deps, 4, 7,
    schemas, file_default_instances, TableStruct_MDPlayback_2eproto::offsets,
    file_level_metadata_MDPlayback_2eproto, file_level_enum_descriptors_MDPlayback_2eproto,
    file_level_service_descriptors_MDPlayback_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDPlayback_2eproto_getter() {
  return &descriptor_table_MDPlayback_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDPlayback_2eproto(&descriptor_table_MDPlayback_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackExrightsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDPlayback_2eproto);
  return file_level_enum_descriptors_MDPlayback_2eproto[0];
}
bool EPlaybackExrightsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackTaskControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDPlayback_2eproto);
  return file_level_enum_descriptors_MDPlayback_2eproto[1];
}
bool EPlaybackTaskControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackTaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDPlayback_2eproto);
  return file_level_enum_descriptors_MDPlayback_2eproto[2];
}
bool EPlaybackTaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlaybackRequest::_Internal {
 public:
};

void PlaybackRequest::clear_securitysourcetype() {
  _impl_.securitysourcetype_.Clear();
}
PlaybackRequest::PlaybackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.PlaybackRequest)
}
PlaybackRequest::PlaybackRequest(const PlaybackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityids_){from._impl_.htscsecurityids_}
    , decltype(_impl_.securitysourcetype_){from._impl_.securitysourcetype_}
    , decltype(_impl_.taskid_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.stoptime_){}
    , decltype(_impl_.initialdatastarttime_){}
    , decltype(_impl_.replaydatatype_){}
    , decltype(_impl_.replayrate_){}
    , decltype(_impl_.exrightstype_){}
    , decltype(_impl_.isneedinitialdata_){}
    , decltype(_impl_.replayfunctype_){}
    , decltype(_impl_.sorttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    _this->_impl_.taskid_.Set(from._internal_taskid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.starttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.starttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_starttime().empty()) {
    _this->_impl_.starttime_.Set(from._internal_starttime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stoptime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stoptime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stoptime().empty()) {
    _this->_impl_.stoptime_.Set(from._internal_stoptime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.initialdatastarttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initialdatastarttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initialdatastarttime().empty()) {
    _this->_impl_.initialdatastarttime_.Set(from._internal_initialdatastarttime(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.replaydatatype_, &from._impl_.replaydatatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sorttype_) -
    reinterpret_cast<char*>(&_impl_.replaydatatype_)) + sizeof(_impl_.sorttype_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackRequest)
}

inline void PlaybackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityids_){arena}
    , decltype(_impl_.securitysourcetype_){arena}
    , decltype(_impl_.taskid_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.stoptime_){}
    , decltype(_impl_.initialdatastarttime_){}
    , decltype(_impl_.replaydatatype_){0}
    , decltype(_impl_.replayrate_){0}
    , decltype(_impl_.exrightstype_){0}
    , decltype(_impl_.isneedinitialdata_){false}
    , decltype(_impl_.replayfunctype_){0}
    , decltype(_impl_.sorttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.starttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.starttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stoptime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stoptime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initialdatastarttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initialdatastarttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaybackRequest::~PlaybackRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityids_.~RepeatedPtrField();
  _impl_.securitysourcetype_.~RepeatedPtrField();
  _impl_.taskid_.Destroy();
  _impl_.starttime_.Destroy();
  _impl_.stoptime_.Destroy();
  _impl_.initialdatastarttime_.Destroy();
}

void PlaybackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityids_.Clear();
  _impl_.securitysourcetype_.Clear();
  _impl_.taskid_.ClearToEmpty();
  _impl_.starttime_.ClearToEmpty();
  _impl_.stoptime_.ClearToEmpty();
  _impl_.initialdatastarttime_.ClearToEmpty();
  ::memset(&_impl_.replaydatatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sorttype_) -
      reinterpret_cast<char*>(&_impl_.replaydatatype_)) + sizeof(_impl_.sorttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackRequest.taskId"));
        } else
          goto handle_unusual;
        continue;
      // repeated string htscSecurityIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_htscsecurityids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_securitysourcetype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string startTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_starttime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackRequest.startTime"));
        } else
          goto handle_unusual;
        continue;
      // string stopTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stoptime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackRequest.stopTime"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_replaydatatype(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 replayRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.replayrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exrightstype(static_cast<::com::htsc::mdc::insight::model::EPlaybackExrightsType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool isNeedInitialData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.isneedinitialdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string initialDataStartTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_initialdatastarttime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime"));
        } else
          goto handle_unusual;
        continue;
      // int32 replayFuncType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.replayfunctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sortType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.sorttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaybackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // repeated string htscSecurityIDs = 2;
  for (int i = 0, n = this->_internal_htscsecurityids_size(); i < n; i++) {
    const auto& s = this->_internal_htscsecurityids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs");
    target = stream->WriteString(2, s, target);
  }

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_securitysourcetype_size()); i < n; i++) {
    const auto& repfield = this->_internal_securitysourcetype(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string startTime = 4;
  if (!this->_internal_starttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_starttime().data(), static_cast<int>(this->_internal_starttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.startTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_starttime(), target);
  }

  // string stopTime = 5;
  if (!this->_internal_stoptime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stoptime().data(), static_cast<int>(this->_internal_stoptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.stopTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stoptime(), target);
  }

  // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
  if (this->_internal_replaydatatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_replaydatatype(), target);
  }

  // int32 replayRate = 7;
  if (this->_internal_replayrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_replayrate(), target);
  }

  // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
  if (this->_internal_exrightstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_exrightstype(), target);
  }

  // bool isNeedInitialData = 9;
  if (this->_internal_isneedinitialdata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_isneedinitialdata(), target);
  }

  // string initialDataStartTime = 10;
  if (!this->_internal_initialdatastarttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initialdatastarttime().data(), static_cast<int>(this->_internal_initialdatastarttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_initialdatastarttime(), target);
  }

  // int32 replayFuncType = 11;
  if (this->_internal_replayfunctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_replayfunctype(), target);
  }

  // int32 sortType = 12;
  if (this->_internal_sorttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sorttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackRequest)
  return target;
}

size_t PlaybackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string htscSecurityIDs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.htscsecurityids_.size());
  for (int i = 0, n = _impl_.htscsecurityids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.htscsecurityids_.Get(i));
  }

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
  total_size += 1UL * this->_internal_securitysourcetype_size();
  for (const auto& msg : this->_impl_.securitysourcetype_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string startTime = 4;
  if (!this->_internal_starttime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_starttime());
  }

  // string stopTime = 5;
  if (!this->_internal_stoptime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stoptime());
  }

  // string initialDataStartTime = 10;
  if (!this->_internal_initialdatastarttime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initialdatastarttime());
  }

  // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
  if (this->_internal_replaydatatype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_replaydatatype());
  }

  // int32 replayRate = 7;
  if (this->_internal_replayrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replayrate());
  }

  // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
  if (this->_internal_exrightstype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exrightstype());
  }

  // bool isNeedInitialData = 9;
  if (this->_internal_isneedinitialdata() != 0) {
    total_size += 1 + 1;
  }

  // int32 replayFuncType = 11;
  if (this->_internal_replayfunctype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replayfunctype());
  }

  // int32 sortType = 12;
  if (this->_internal_sorttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sorttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackRequest::GetClassData() const { return &_class_data_; }


void PlaybackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackRequest*>(&to_msg);
  auto& from = static_cast<const PlaybackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.htscsecurityids_.MergeFrom(from._impl_.htscsecurityids_);
  _this->_impl_.securitysourcetype_.MergeFrom(from._impl_.securitysourcetype_);
  if (!from._internal_taskid().empty()) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (!from._internal_starttime().empty()) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (!from._internal_stoptime().empty()) {
    _this->_internal_set_stoptime(from._internal_stoptime());
  }
  if (!from._internal_initialdatastarttime().empty()) {
    _this->_internal_set_initialdatastarttime(from._internal_initialdatastarttime());
  }
  if (from._internal_replaydatatype() != 0) {
    _this->_internal_set_replaydatatype(from._internal_replaydatatype());
  }
  if (from._internal_replayrate() != 0) {
    _this->_internal_set_replayrate(from._internal_replayrate());
  }
  if (from._internal_exrightstype() != 0) {
    _this->_internal_set_exrightstype(from._internal_exrightstype());
  }
  if (from._internal_isneedinitialdata() != 0) {
    _this->_internal_set_isneedinitialdata(from._internal_isneedinitialdata());
  }
  if (from._internal_replayfunctype() != 0) {
    _this->_internal_set_replayfunctype(from._internal_replayfunctype());
  }
  if (from._internal_sorttype() != 0) {
    _this->_internal_set_sorttype(from._internal_sorttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackRequest::CopyFrom(const PlaybackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackRequest::IsInitialized() const {
  return true;
}

void PlaybackRequest::InternalSwap(PlaybackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.htscsecurityids_.InternalSwap(&other->_impl_.htscsecurityids_);
  _impl_.securitysourcetype_.InternalSwap(&other->_impl_.securitysourcetype_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskid_, lhs_arena,
      &other->_impl_.taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.starttime_, lhs_arena,
      &other->_impl_.starttime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stoptime_, lhs_arena,
      &other->_impl_.stoptime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.initialdatastarttime_, lhs_arena,
      &other->_impl_.initialdatastarttime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaybackRequest, _impl_.sorttype_)
      + sizeof(PlaybackRequest::_impl_.sorttype_)
      - PROTOBUF_FIELD_OFFSET(PlaybackRequest, _impl_.replaydatatype_)>(
          reinterpret_cast<char*>(&_impl_.replaydatatype_),
          reinterpret_cast<char*>(&other->_impl_.replaydatatype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDPlayback_2eproto_getter, &descriptor_table_MDPlayback_2eproto_once,
      file_level_metadata_MDPlayback_2eproto[0]);
}

// ===================================================================

class PlaybackResponse::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const PlaybackResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
PlaybackResponse::_Internal::errorcontext(const PlaybackResponse* msg) {
  return *msg->_impl_.errorcontext_;
}
void PlaybackResponse::clear_errorcontext() {
  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
}
PlaybackResponse::PlaybackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.PlaybackResponse)
}
PlaybackResponse::PlaybackResponse(const PlaybackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.issuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    _this->_impl_.taskid_.Set(from._internal_taskid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_errorcontext()) {
    _this->_impl_.errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from._impl_.errorcontext_);
  }
  _this->_impl_.issuccess_ = from._impl_.issuccess_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackResponse)
}

inline void PlaybackResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.issuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaybackResponse::~PlaybackResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.errorcontext_;
}

void PlaybackResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
  _impl_.issuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackResponse.taskId"));
        } else
          goto handle_unusual;
        continue;
      // bool isSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaybackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackResponse.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // bool isSuccess = 2;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->_internal_has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::errorcontext(this),
        _Internal::errorcontext(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackResponse)
  return target;
}

size_t PlaybackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->_internal_has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.errorcontext_);
  }

  // bool isSuccess = 2;
  if (this->_internal_issuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackResponse::GetClassData() const { return &_class_data_; }


void PlaybackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackResponse*>(&to_msg);
  auto& from = static_cast<const PlaybackResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_has_errorcontext()) {
    _this->_internal_mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(
        from._internal_errorcontext());
  }
  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackResponse::CopyFrom(const PlaybackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackResponse::IsInitialized() const {
  return true;
}

void PlaybackResponse::InternalSwap(PlaybackResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskid_, lhs_arena,
      &other->_impl_.taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaybackResponse, _impl_.issuccess_)
      + sizeof(PlaybackResponse::_impl_.issuccess_)
      - PROTOBUF_FIELD_OFFSET(PlaybackResponse, _impl_.errorcontext_)>(
          reinterpret_cast<char*>(&_impl_.errorcontext_),
          reinterpret_cast<char*>(&other->_impl_.errorcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDPlayback_2eproto_getter, &descriptor_table_MDPlayback_2eproto_once,
      file_level_metadata_MDPlayback_2eproto[1]);
}

// ===================================================================

class PlaybackControlRequest::_Internal {
 public:
};

PlaybackControlRequest::PlaybackControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.PlaybackControlRequest)
}
PlaybackControlRequest::PlaybackControlRequest(const PlaybackControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackControlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.controltype_){}
    , decltype(_impl_.replayrate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    _this->_impl_.taskid_.Set(from._internal_taskid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.controltype_, &from._impl_.controltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.replayrate_) -
    reinterpret_cast<char*>(&_impl_.controltype_)) + sizeof(_impl_.replayrate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackControlRequest)
}

inline void PlaybackControlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.controltype_){0}
    , decltype(_impl_.replayrate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaybackControlRequest::~PlaybackControlRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackControlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskid_.Destroy();
}

void PlaybackControlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskid_.ClearToEmpty();
  ::memset(&_impl_.controltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.replayrate_) -
      reinterpret_cast<char*>(&_impl_.controltype_)) + sizeof(_impl_.replayrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackControlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackControlRequest.taskId"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_controltype(static_cast<::com::htsc::mdc::insight::model::EPlaybackTaskControlType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 replayRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.replayrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaybackControlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackControlRequest.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
  if (this->_internal_controltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_controltype(), target);
  }

  // int32 replayRate = 3;
  if (this->_internal_replayrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_replayrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackControlRequest)
  return target;
}

size_t PlaybackControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
  if (this->_internal_controltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_controltype());
  }

  // int32 replayRate = 3;
  if (this->_internal_replayrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replayrate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackControlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackControlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackControlRequest::GetClassData() const { return &_class_data_; }


void PlaybackControlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackControlRequest*>(&to_msg);
  auto& from = static_cast<const PlaybackControlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_controltype() != 0) {
    _this->_internal_set_controltype(from._internal_controltype());
  }
  if (from._internal_replayrate() != 0) {
    _this->_internal_set_replayrate(from._internal_replayrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackControlRequest::CopyFrom(const PlaybackControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackControlRequest::IsInitialized() const {
  return true;
}

void PlaybackControlRequest::InternalSwap(PlaybackControlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskid_, lhs_arena,
      &other->_impl_.taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaybackControlRequest, _impl_.replayrate_)
      + sizeof(PlaybackControlRequest::_impl_.replayrate_)
      - PROTOBUF_FIELD_OFFSET(PlaybackControlRequest, _impl_.controltype_)>(
          reinterpret_cast<char*>(&_impl_.controltype_),
          reinterpret_cast<char*>(&other->_impl_.controltype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDPlayback_2eproto_getter, &descriptor_table_MDPlayback_2eproto_once,
      file_level_metadata_MDPlayback_2eproto[2]);
}

// ===================================================================

class PlaybackControlResponse::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const PlaybackControlResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
PlaybackControlResponse::_Internal::errorcontext(const PlaybackControlResponse* msg) {
  return *msg->_impl_.errorcontext_;
}
void PlaybackControlResponse::clear_errorcontext() {
  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
}
PlaybackControlResponse::PlaybackControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.PlaybackControlResponse)
}
PlaybackControlResponse::PlaybackControlResponse(const PlaybackControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackControlResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.issuccess_){}
    , decltype(_impl_.currentreplayrate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    _this->_impl_.taskid_.Set(from._internal_taskid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_errorcontext()) {
    _this->_impl_.errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from._impl_.errorcontext_);
  }
  ::memcpy(&_impl_.issuccess_, &from._impl_.issuccess_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentreplayrate_) -
    reinterpret_cast<char*>(&_impl_.issuccess_)) + sizeof(_impl_.currentreplayrate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackControlResponse)
}

inline void PlaybackControlResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.issuccess_){false}
    , decltype(_impl_.currentreplayrate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaybackControlResponse::~PlaybackControlResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackControlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.errorcontext_;
}

void PlaybackControlResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
  ::memset(&_impl_.issuccess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currentreplayrate_) -
      reinterpret_cast<char*>(&_impl_.issuccess_)) + sizeof(_impl_.currentreplayrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackControlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackControlResponse.taskId"));
        } else
          goto handle_unusual;
        continue;
      // bool isSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 currentReplayRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.currentreplayrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaybackControlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackControlResponse.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // bool isSuccess = 2;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->_internal_has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::errorcontext(this),
        _Internal::errorcontext(this).GetCachedSize(), target, stream);
  }

  // int32 currentReplayRate = 4;
  if (this->_internal_currentreplayrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_currentreplayrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackControlResponse)
  return target;
}

size_t PlaybackControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->_internal_has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.errorcontext_);
  }

  // bool isSuccess = 2;
  if (this->_internal_issuccess() != 0) {
    total_size += 1 + 1;
  }

  // int32 currentReplayRate = 4;
  if (this->_internal_currentreplayrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentreplayrate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackControlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackControlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackControlResponse::GetClassData() const { return &_class_data_; }


void PlaybackControlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackControlResponse*>(&to_msg);
  auto& from = static_cast<const PlaybackControlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_has_errorcontext()) {
    _this->_internal_mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(
        from._internal_errorcontext());
  }
  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  if (from._internal_currentreplayrate() != 0) {
    _this->_internal_set_currentreplayrate(from._internal_currentreplayrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackControlResponse::CopyFrom(const PlaybackControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackControlResponse::IsInitialized() const {
  return true;
}

void PlaybackControlResponse::InternalSwap(PlaybackControlResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskid_, lhs_arena,
      &other->_impl_.taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaybackControlResponse, _impl_.currentreplayrate_)
      + sizeof(PlaybackControlResponse::_impl_.currentreplayrate_)
      - PROTOBUF_FIELD_OFFSET(PlaybackControlResponse, _impl_.errorcontext_)>(
          reinterpret_cast<char*>(&_impl_.errorcontext_),
          reinterpret_cast<char*>(&other->_impl_.errorcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackControlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDPlayback_2eproto_getter, &descriptor_table_MDPlayback_2eproto_once,
      file_level_metadata_MDPlayback_2eproto[3]);
}

// ===================================================================

class PlaybackStatusRequest::_Internal {
 public:
};

PlaybackStatusRequest::PlaybackStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.PlaybackStatusRequest)
}
PlaybackStatusRequest::PlaybackStatusRequest(const PlaybackStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    _this->_impl_.taskid_.Set(from._internal_taskid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackStatusRequest)
}

inline void PlaybackStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaybackStatusRequest::~PlaybackStatusRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskid_.Destroy();
}

void PlaybackStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaybackStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  return target;
}

size_t PlaybackStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackStatusRequest::GetClassData() const { return &_class_data_; }


void PlaybackStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackStatusRequest*>(&to_msg);
  auto& from = static_cast<const PlaybackStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackStatusRequest::CopyFrom(const PlaybackStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackStatusRequest::IsInitialized() const {
  return true;
}

void PlaybackStatusRequest::InternalSwap(PlaybackStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskid_, lhs_arena,
      &other->_impl_.taskid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDPlayback_2eproto_getter, &descriptor_table_MDPlayback_2eproto_once,
      file_level_metadata_MDPlayback_2eproto[4]);
}

// ===================================================================

class PlaybackStatus::_Internal {
 public:
};

PlaybackStatus::PlaybackStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.PlaybackStatus)
}
PlaybackStatus::PlaybackStatus(const PlaybackStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.taskstatus_){}
    , decltype(_impl_.replaypercent_){}
    , decltype(_impl_.currentreplayrate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    _this->_impl_.taskid_.Set(from._internal_taskid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.taskstatus_, &from._impl_.taskstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentreplayrate_) -
    reinterpret_cast<char*>(&_impl_.taskstatus_)) + sizeof(_impl_.currentreplayrate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackStatus)
}

inline void PlaybackStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.taskstatus_){0}
    , decltype(_impl_.replaypercent_){0}
    , decltype(_impl_.currentreplayrate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaybackStatus::~PlaybackStatus() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskid_.Destroy();
}

void PlaybackStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskid_.ClearToEmpty();
  ::memset(&_impl_.taskstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currentreplayrate_) -
      reinterpret_cast<char*>(&_impl_.taskstatus_)) + sizeof(_impl_.currentreplayrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackStatus.taskId"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_taskstatus(static_cast<::com::htsc::mdc::insight::model::EPlaybackTaskStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 replayPercent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.replaypercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 currentReplayRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.currentreplayrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaybackStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackStatus.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
  if (this->_internal_taskstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_taskstatus(), target);
  }

  // int32 replayPercent = 3;
  if (this->_internal_replaypercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_replaypercent(), target);
  }

  // int32 currentReplayRate = 4;
  if (this->_internal_currentreplayrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_currentreplayrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackStatus)
  return target;
}

size_t PlaybackStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
  if (this->_internal_taskstatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_taskstatus());
  }

  // int32 replayPercent = 3;
  if (this->_internal_replaypercent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replaypercent());
  }

  // int32 currentReplayRate = 4;
  if (this->_internal_currentreplayrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentreplayrate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackStatus::GetClassData() const { return &_class_data_; }


void PlaybackStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackStatus*>(&to_msg);
  auto& from = static_cast<const PlaybackStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_taskstatus() != 0) {
    _this->_internal_set_taskstatus(from._internal_taskstatus());
  }
  if (from._internal_replaypercent() != 0) {
    _this->_internal_set_replaypercent(from._internal_replaypercent());
  }
  if (from._internal_currentreplayrate() != 0) {
    _this->_internal_set_currentreplayrate(from._internal_currentreplayrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackStatus::CopyFrom(const PlaybackStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackStatus::IsInitialized() const {
  return true;
}

void PlaybackStatus::InternalSwap(PlaybackStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskid_, lhs_arena,
      &other->_impl_.taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaybackStatus, _impl_.currentreplayrate_)
      + sizeof(PlaybackStatus::_impl_.currentreplayrate_)
      - PROTOBUF_FIELD_OFFSET(PlaybackStatus, _impl_.taskstatus_)>(
          reinterpret_cast<char*>(&_impl_.taskstatus_),
          reinterpret_cast<char*>(&other->_impl_.taskstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDPlayback_2eproto_getter, &descriptor_table_MDPlayback_2eproto_once,
      file_level_metadata_MDPlayback_2eproto[5]);
}

// ===================================================================

class PlaybackPayload::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::MarketDataStream& marketdatastream(const PlaybackPayload* msg);
};

const ::com::htsc::mdc::insight::model::MarketDataStream&
PlaybackPayload::_Internal::marketdatastream(const PlaybackPayload* msg) {
  return *msg->_impl_.marketdatastream_;
}
void PlaybackPayload::clear_marketdatastream() {
  if (GetArenaForAllocation() == nullptr && _impl_.marketdatastream_ != nullptr) {
    delete _impl_.marketdatastream_;
  }
  _impl_.marketdatastream_ = nullptr;
}
PlaybackPayload::PlaybackPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.PlaybackPayload)
}
PlaybackPayload::PlaybackPayload(const PlaybackPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.marketdatastream_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    _this->_impl_.taskid_.Set(from._internal_taskid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_marketdatastream()) {
    _this->_impl_.marketdatastream_ = new ::com::htsc::mdc::insight::model::MarketDataStream(*from._impl_.marketdatastream_);
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackPayload)
}

inline void PlaybackPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.marketdatastream_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaybackPayload::~PlaybackPayload() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.marketdatastream_;
}

void PlaybackPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.marketdatastream_ != nullptr) {
    delete _impl_.marketdatastream_;
  }
  _impl_.marketdatastream_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.PlaybackPayload.taskId"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketdatastream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaybackPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackPayload.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
  if (this->_internal_has_marketdatastream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::marketdatastream(this),
        _Internal::marketdatastream(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackPayload)
  return target;
}

size_t PlaybackPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
  if (this->_internal_has_marketdatastream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.marketdatastream_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackPayload::GetClassData() const { return &_class_data_; }


void PlaybackPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackPayload*>(&to_msg);
  auto& from = static_cast<const PlaybackPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_has_marketdatastream()) {
    _this->_internal_mutable_marketdatastream()->::com::htsc::mdc::insight::model::MarketDataStream::MergeFrom(
        from._internal_marketdatastream());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackPayload::CopyFrom(const PlaybackPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackPayload::IsInitialized() const {
  return true;
}

void PlaybackPayload::InternalSwap(PlaybackPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskid_, lhs_arena,
      &other->_impl_.taskid_, rhs_arena
  );
  swap(_impl_.marketdatastream_, other->_impl_.marketdatastream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDPlayback_2eproto_getter, &descriptor_table_MDPlayback_2eproto_once,
      file_level_metadata_MDPlayback_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackRequest*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::PlaybackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackResponse*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::PlaybackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackControlRequest*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::PlaybackControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackControlResponse*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::PlaybackControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackStatusRequest*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::PlaybackStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackStatus*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::PlaybackStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackPayload*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::PlaybackPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
