// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCfetsFxSnapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDCfetsFxSnapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDCfetsFxSnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDCfetsFxSnapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDCfetsFxSnapshot_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDCfetsFxSnapshot_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDCfetsFxSnapshot;
struct MDCfetsFxSnapshotDefaultTypeInternal;
extern MDCfetsFxSnapshotDefaultTypeInternal _MDCfetsFxSnapshot_default_instance_;
class OptionFxSnapshot;
struct OptionFxSnapshotDefaultTypeInternal;
extern OptionFxSnapshotDefaultTypeInternal _OptionFxSnapshot_default_instance_;
class SpotClosePriceFxSnapshot;
struct SpotClosePriceFxSnapshotDefaultTypeInternal;
extern SpotClosePriceFxSnapshotDefaultTypeInternal _SpotClosePriceFxSnapshot_default_instance_;
class SwpSptNdfFowFxSnapshot;
struct SwpSptNdfFowFxSnapshotDefaultTypeInternal;
extern SwpSptNdfFowFxSnapshotDefaultTypeInternal _SwpSptNdfFowFxSnapshot_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDCfetsFxSnapshot* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCfetsFxSnapshot>(Arena*);
template<> ::com::htsc::mdc::insight::model::OptionFxSnapshot* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::OptionFxSnapshot>(Arena*);
template<> ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot>(Arena*);
template<> ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCfetsFxSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCfetsFxSnapshot) */ {
 public:
  inline MDCfetsFxSnapshot() : MDCfetsFxSnapshot(nullptr) {}
  ~MDCfetsFxSnapshot() override;
  explicit PROTOBUF_CONSTEXPR MDCfetsFxSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDCfetsFxSnapshot(const MDCfetsFxSnapshot& from);
  MDCfetsFxSnapshot(MDCfetsFxSnapshot&& from) noexcept
    : MDCfetsFxSnapshot() {
    *this = ::std::move(from);
  }

  inline MDCfetsFxSnapshot& operator=(const MDCfetsFxSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCfetsFxSnapshot& operator=(MDCfetsFxSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDCfetsFxSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDCfetsFxSnapshot* internal_default_instance() {
    return reinterpret_cast<const MDCfetsFxSnapshot*>(
               &_MDCfetsFxSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDCfetsFxSnapshot& a, MDCfetsFxSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(MDCfetsFxSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDCfetsFxSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDCfetsFxSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDCfetsFxSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDCfetsFxSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDCfetsFxSnapshot& from) {
    MDCfetsFxSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCfetsFxSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCfetsFxSnapshot";
  }
  protected:
  explicit MDCfetsFxSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kSecuritySubTypeFieldNumber = 7,
    kTransactTimeFieldNumber = 16,
    kSpotFxSnapshotFieldNumber = 9,
    kForwardFxSnapshotFieldNumber = 10,
    kNonDeliverableForwardsFxSnapshotFieldNumber = 11,
    kSwapFxSnapshotFieldNumber = 12,
    kOptionFxSnapshotFieldNumber = 13,
    kSpotClosePriceFxSnapshotFieldNumber = 14,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kForexSnapshotTypeFieldNumber = 8,
    kDataMultiplePowerOf10FieldNumber = 15,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string SecuritySubType = 7;
  void clear_securitysubtype();
  const std::string& securitysubtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitysubtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitysubtype();
  PROTOBUF_NODISCARD std::string* release_securitysubtype();
  void set_allocated_securitysubtype(std::string* securitysubtype);
  private:
  const std::string& _internal_securitysubtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitysubtype(const std::string& value);
  std::string* _internal_mutable_securitysubtype();
  public:

  // string TransactTime = 16;
  void clear_transacttime();
  const std::string& transacttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transacttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transacttime();
  PROTOBUF_NODISCARD std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot spotFxSnapshot = 9;
  bool has_spotfxsnapshot() const;
  private:
  bool _internal_has_spotfxsnapshot() const;
  public:
  void clear_spotfxsnapshot();
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& spotfxsnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* release_spotfxsnapshot();
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* mutable_spotfxsnapshot();
  void set_allocated_spotfxsnapshot(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* spotfxsnapshot);
  private:
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& _internal_spotfxsnapshot() const;
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* _internal_mutable_spotfxsnapshot();
  public:
  void unsafe_arena_set_allocated_spotfxsnapshot(
      ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* spotfxsnapshot);
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* unsafe_arena_release_spotfxsnapshot();

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot forwardFxSnapshot = 10;
  bool has_forwardfxsnapshot() const;
  private:
  bool _internal_has_forwardfxsnapshot() const;
  public:
  void clear_forwardfxsnapshot();
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& forwardfxsnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* release_forwardfxsnapshot();
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* mutable_forwardfxsnapshot();
  void set_allocated_forwardfxsnapshot(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* forwardfxsnapshot);
  private:
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& _internal_forwardfxsnapshot() const;
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* _internal_mutable_forwardfxsnapshot();
  public:
  void unsafe_arena_set_allocated_forwardfxsnapshot(
      ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* forwardfxsnapshot);
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* unsafe_arena_release_forwardfxsnapshot();

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot nonDeliverableForwardsFxSnapshot = 11;
  bool has_nondeliverableforwardsfxsnapshot() const;
  private:
  bool _internal_has_nondeliverableforwardsfxsnapshot() const;
  public:
  void clear_nondeliverableforwardsfxsnapshot();
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& nondeliverableforwardsfxsnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* release_nondeliverableforwardsfxsnapshot();
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* mutable_nondeliverableforwardsfxsnapshot();
  void set_allocated_nondeliverableforwardsfxsnapshot(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* nondeliverableforwardsfxsnapshot);
  private:
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& _internal_nondeliverableforwardsfxsnapshot() const;
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* _internal_mutable_nondeliverableforwardsfxsnapshot();
  public:
  void unsafe_arena_set_allocated_nondeliverableforwardsfxsnapshot(
      ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* nondeliverableforwardsfxsnapshot);
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* unsafe_arena_release_nondeliverableforwardsfxsnapshot();

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot swapFxSnapshot = 12;
  bool has_swapfxsnapshot() const;
  private:
  bool _internal_has_swapfxsnapshot() const;
  public:
  void clear_swapfxsnapshot();
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& swapfxsnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* release_swapfxsnapshot();
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* mutable_swapfxsnapshot();
  void set_allocated_swapfxsnapshot(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* swapfxsnapshot);
  private:
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& _internal_swapfxsnapshot() const;
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* _internal_mutable_swapfxsnapshot();
  public:
  void unsafe_arena_set_allocated_swapfxsnapshot(
      ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* swapfxsnapshot);
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* unsafe_arena_release_swapfxsnapshot();

  // .com.htsc.mdc.insight.model.OptionFxSnapshot optionFxSnapshot = 13;
  bool has_optionfxsnapshot() const;
  private:
  bool _internal_has_optionfxsnapshot() const;
  public:
  void clear_optionfxsnapshot();
  const ::com::htsc::mdc::insight::model::OptionFxSnapshot& optionfxsnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::OptionFxSnapshot* release_optionfxsnapshot();
  ::com::htsc::mdc::insight::model::OptionFxSnapshot* mutable_optionfxsnapshot();
  void set_allocated_optionfxsnapshot(::com::htsc::mdc::insight::model::OptionFxSnapshot* optionfxsnapshot);
  private:
  const ::com::htsc::mdc::insight::model::OptionFxSnapshot& _internal_optionfxsnapshot() const;
  ::com::htsc::mdc::insight::model::OptionFxSnapshot* _internal_mutable_optionfxsnapshot();
  public:
  void unsafe_arena_set_allocated_optionfxsnapshot(
      ::com::htsc::mdc::insight::model::OptionFxSnapshot* optionfxsnapshot);
  ::com::htsc::mdc::insight::model::OptionFxSnapshot* unsafe_arena_release_optionfxsnapshot();

  // .com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot spotClosePriceFxSnapshot = 14;
  bool has_spotclosepricefxsnapshot() const;
  private:
  bool _internal_has_spotclosepricefxsnapshot() const;
  public:
  void clear_spotclosepricefxsnapshot();
  const ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot& spotclosepricefxsnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* release_spotclosepricefxsnapshot();
  ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* mutable_spotclosepricefxsnapshot();
  void set_allocated_spotclosepricefxsnapshot(::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* spotclosepricefxsnapshot);
  private:
  const ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot& _internal_spotclosepricefxsnapshot() const;
  ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* _internal_mutable_spotclosepricefxsnapshot();
  public:
  void unsafe_arena_set_allocated_spotclosepricefxsnapshot(
      ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* spotclosepricefxsnapshot);
  ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* unsafe_arena_release_spotclosepricefxsnapshot();

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ForexSnapshotType = 8;
  void clear_forexsnapshottype();
  int32_t forexsnapshottype() const;
  void set_forexsnapshottype(int32_t value);
  private:
  int32_t _internal_forexsnapshottype() const;
  void _internal_set_forexsnapshottype(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 15;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitysubtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* spotfxsnapshot_;
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* forwardfxsnapshot_;
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* nondeliverableforwardsfxsnapshot_;
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* swapfxsnapshot_;
    ::com::htsc::mdc::insight::model::OptionFxSnapshot* optionfxsnapshot_;
    ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* spotclosepricefxsnapshot_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t forexsnapshottype_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsFxSnapshot_2eproto;
};
// -------------------------------------------------------------------

class SwpSptNdfFowFxSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot) */ {
 public:
  inline SwpSptNdfFowFxSnapshot() : SwpSptNdfFowFxSnapshot(nullptr) {}
  ~SwpSptNdfFowFxSnapshot() override;
  explicit PROTOBUF_CONSTEXPR SwpSptNdfFowFxSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwpSptNdfFowFxSnapshot(const SwpSptNdfFowFxSnapshot& from);
  SwpSptNdfFowFxSnapshot(SwpSptNdfFowFxSnapshot&& from) noexcept
    : SwpSptNdfFowFxSnapshot() {
    *this = ::std::move(from);
  }

  inline SwpSptNdfFowFxSnapshot& operator=(const SwpSptNdfFowFxSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwpSptNdfFowFxSnapshot& operator=(SwpSptNdfFowFxSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwpSptNdfFowFxSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwpSptNdfFowFxSnapshot* internal_default_instance() {
    return reinterpret_cast<const SwpSptNdfFowFxSnapshot*>(
               &_SwpSptNdfFowFxSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SwpSptNdfFowFxSnapshot& a, SwpSptNdfFowFxSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(SwpSptNdfFowFxSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwpSptNdfFowFxSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwpSptNdfFowFxSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwpSptNdfFowFxSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwpSptNdfFowFxSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwpSptNdfFowFxSnapshot& from) {
    SwpSptNdfFowFxSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwpSptNdfFowFxSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot";
  }
  protected:
  explicit SwpSptNdfFowFxSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueDateFieldNumber = 1,
    kDateBuyFieldNumber = 4,
    kTimeBuyFieldNumber = 5,
    kDateSellFieldNumber = 6,
    kTimeSellFieldNumber = 7,
    kLegSignFieldNumber = 21,
    kNetBasisChangeFieldNumber = 2,
    kPercentageChangeFieldNumber = 3,
    kLastRateBuyFieldNumber = 8,
    kLastRateSellFieldNumber = 9,
    kLastAllinBuyFieldNumber = 10,
    kLastAllinSellFieldNumber = 11,
    kHighRateFieldNumber = 12,
    kLowRateFieldNumber = 13,
    kOpenRateFieldNumber = 14,
    kHistoryCloseRateFieldNumber = 15,
    kCloseRateFieldNumber = 16,
    kAmountLevelRateFieldNumber = 17,
    kAmountLevelAllinFieldNumber = 18,
    kRateSideFieldNumber = 19,
    kAllinSideFieldNumber = 20,
  };
  // string ValueDate = 1;
  void clear_valuedate();
  const std::string& valuedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valuedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valuedate();
  PROTOBUF_NODISCARD std::string* release_valuedate();
  void set_allocated_valuedate(std::string* valuedate);
  private:
  const std::string& _internal_valuedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valuedate(const std::string& value);
  std::string* _internal_mutable_valuedate();
  public:

  // string DateBuy = 4;
  void clear_datebuy();
  const std::string& datebuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datebuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datebuy();
  PROTOBUF_NODISCARD std::string* release_datebuy();
  void set_allocated_datebuy(std::string* datebuy);
  private:
  const std::string& _internal_datebuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datebuy(const std::string& value);
  std::string* _internal_mutable_datebuy();
  public:

  // string TimeBuy = 5;
  void clear_timebuy();
  const std::string& timebuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timebuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timebuy();
  PROTOBUF_NODISCARD std::string* release_timebuy();
  void set_allocated_timebuy(std::string* timebuy);
  private:
  const std::string& _internal_timebuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timebuy(const std::string& value);
  std::string* _internal_mutable_timebuy();
  public:

  // string DateSell = 6;
  void clear_datesell();
  const std::string& datesell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datesell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datesell();
  PROTOBUF_NODISCARD std::string* release_datesell();
  void set_allocated_datesell(std::string* datesell);
  private:
  const std::string& _internal_datesell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datesell(const std::string& value);
  std::string* _internal_mutable_datesell();
  public:

  // string TimeSell = 7;
  void clear_timesell();
  const std::string& timesell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timesell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timesell();
  PROTOBUF_NODISCARD std::string* release_timesell();
  void set_allocated_timesell(std::string* timesell);
  private:
  const std::string& _internal_timesell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timesell(const std::string& value);
  std::string* _internal_mutable_timesell();
  public:

  // string LegSign = 21;
  void clear_legsign();
  const std::string& legsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legsign();
  PROTOBUF_NODISCARD std::string* release_legsign();
  void set_allocated_legsign(std::string* legsign);
  private:
  const std::string& _internal_legsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legsign(const std::string& value);
  std::string* _internal_mutable_legsign();
  public:

  // int64 NetBasisChange = 2;
  void clear_netbasischange();
  int64_t netbasischange() const;
  void set_netbasischange(int64_t value);
  private:
  int64_t _internal_netbasischange() const;
  void _internal_set_netbasischange(int64_t value);
  public:

  // int64 PercentageChange = 3;
  void clear_percentagechange();
  int64_t percentagechange() const;
  void set_percentagechange(int64_t value);
  private:
  int64_t _internal_percentagechange() const;
  void _internal_set_percentagechange(int64_t value);
  public:

  // int64 LastRateBuy = 8;
  void clear_lastratebuy();
  int64_t lastratebuy() const;
  void set_lastratebuy(int64_t value);
  private:
  int64_t _internal_lastratebuy() const;
  void _internal_set_lastratebuy(int64_t value);
  public:

  // int64 LastRateSell = 9;
  void clear_lastratesell();
  int64_t lastratesell() const;
  void set_lastratesell(int64_t value);
  private:
  int64_t _internal_lastratesell() const;
  void _internal_set_lastratesell(int64_t value);
  public:

  // int64 LastAllinBuy = 10;
  void clear_lastallinbuy();
  int64_t lastallinbuy() const;
  void set_lastallinbuy(int64_t value);
  private:
  int64_t _internal_lastallinbuy() const;
  void _internal_set_lastallinbuy(int64_t value);
  public:

  // int64 LastAllinSell = 11;
  void clear_lastallinsell();
  int64_t lastallinsell() const;
  void set_lastallinsell(int64_t value);
  private:
  int64_t _internal_lastallinsell() const;
  void _internal_set_lastallinsell(int64_t value);
  public:

  // int64 HighRate = 12;
  void clear_highrate();
  int64_t highrate() const;
  void set_highrate(int64_t value);
  private:
  int64_t _internal_highrate() const;
  void _internal_set_highrate(int64_t value);
  public:

  // int64 LowRate = 13;
  void clear_lowrate();
  int64_t lowrate() const;
  void set_lowrate(int64_t value);
  private:
  int64_t _internal_lowrate() const;
  void _internal_set_lowrate(int64_t value);
  public:

  // int64 OpenRate = 14;
  void clear_openrate();
  int64_t openrate() const;
  void set_openrate(int64_t value);
  private:
  int64_t _internal_openrate() const;
  void _internal_set_openrate(int64_t value);
  public:

  // int64 HistoryCloseRate = 15;
  void clear_historycloserate();
  int64_t historycloserate() const;
  void set_historycloserate(int64_t value);
  private:
  int64_t _internal_historycloserate() const;
  void _internal_set_historycloserate(int64_t value);
  public:

  // int64 CloseRate = 16;
  void clear_closerate();
  int64_t closerate() const;
  void set_closerate(int64_t value);
  private:
  int64_t _internal_closerate() const;
  void _internal_set_closerate(int64_t value);
  public:

  // int32 AmountLevelRate = 17;
  void clear_amountlevelrate();
  int32_t amountlevelrate() const;
  void set_amountlevelrate(int32_t value);
  private:
  int32_t _internal_amountlevelrate() const;
  void _internal_set_amountlevelrate(int32_t value);
  public:

  // int32 AmountLevelAllin = 18;
  void clear_amountlevelallin();
  int32_t amountlevelallin() const;
  void set_amountlevelallin(int32_t value);
  private:
  int32_t _internal_amountlevelallin() const;
  void _internal_set_amountlevelallin(int32_t value);
  public:

  // int32 RateSide = 19;
  void clear_rateside();
  int32_t rateside() const;
  void set_rateside(int32_t value);
  private:
  int32_t _internal_rateside() const;
  void _internal_set_rateside(int32_t value);
  public:

  // int32 AllinSide = 20;
  void clear_allinside();
  int32_t allinside() const;
  void set_allinside(int32_t value);
  private:
  int32_t _internal_allinside() const;
  void _internal_set_allinside(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valuedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datebuy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timebuy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datesell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timesell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legsign_;
    int64_t netbasischange_;
    int64_t percentagechange_;
    int64_t lastratebuy_;
    int64_t lastratesell_;
    int64_t lastallinbuy_;
    int64_t lastallinsell_;
    int64_t highrate_;
    int64_t lowrate_;
    int64_t openrate_;
    int64_t historycloserate_;
    int64_t closerate_;
    int32_t amountlevelrate_;
    int32_t amountlevelallin_;
    int32_t rateside_;
    int32_t allinside_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsFxSnapshot_2eproto;
};
// -------------------------------------------------------------------

class OptionFxSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.OptionFxSnapshot) */ {
 public:
  inline OptionFxSnapshot() : OptionFxSnapshot(nullptr) {}
  ~OptionFxSnapshot() override;
  explicit PROTOBUF_CONSTEXPR OptionFxSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionFxSnapshot(const OptionFxSnapshot& from);
  OptionFxSnapshot(OptionFxSnapshot&& from) noexcept
    : OptionFxSnapshot() {
    *this = ::std::move(from);
  }

  inline OptionFxSnapshot& operator=(const OptionFxSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionFxSnapshot& operator=(OptionFxSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionFxSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionFxSnapshot* internal_default_instance() {
    return reinterpret_cast<const OptionFxSnapshot*>(
               &_OptionFxSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OptionFxSnapshot& a, OptionFxSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionFxSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionFxSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionFxSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionFxSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionFxSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionFxSnapshot& from) {
    OptionFxSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionFxSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.OptionFxSnapshot";
  }
  protected:
  explicit OptionFxSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxTermFieldNumber = 1,
    kTradeDateFieldNumber = 5,
    kTradeTimeFieldNumber = 6,
    kOptionTypeFieldNumber = 8,
    kPremiumFieldNumber = 2,
    kVolatilityFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kPremiumTypeFieldNumber = 7,
  };
  // string FxTerm = 1;
  void clear_fxterm();
  const std::string& fxterm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fxterm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fxterm();
  PROTOBUF_NODISCARD std::string* release_fxterm();
  void set_allocated_fxterm(std::string* fxterm);
  private:
  const std::string& _internal_fxterm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fxterm(const std::string& value);
  std::string* _internal_mutable_fxterm();
  public:

  // string TradeDate = 5;
  void clear_tradedate();
  const std::string& tradedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradedate();
  PROTOBUF_NODISCARD std::string* release_tradedate();
  void set_allocated_tradedate(std::string* tradedate);
  private:
  const std::string& _internal_tradedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradedate(const std::string& value);
  std::string* _internal_mutable_tradedate();
  public:

  // string TradeTime = 6;
  void clear_tradetime();
  const std::string& tradetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradetime();
  PROTOBUF_NODISCARD std::string* release_tradetime();
  void set_allocated_tradetime(std::string* tradetime);
  private:
  const std::string& _internal_tradetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradetime(const std::string& value);
  std::string* _internal_mutable_tradetime();
  public:

  // string OptionType = 8;
  void clear_optiontype();
  const std::string& optiontype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optiontype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optiontype();
  PROTOBUF_NODISCARD std::string* release_optiontype();
  void set_allocated_optiontype(std::string* optiontype);
  private:
  const std::string& _internal_optiontype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optiontype(const std::string& value);
  std::string* _internal_mutable_optiontype();
  public:

  // int64 Premium = 2;
  void clear_premium();
  int64_t premium() const;
  void set_premium(int64_t value);
  private:
  int64_t _internal_premium() const;
  void _internal_set_premium(int64_t value);
  public:

  // int64 Volatility = 3;
  void clear_volatility();
  int64_t volatility() const;
  void set_volatility(int64_t value);
  private:
  int64_t _internal_volatility() const;
  void _internal_set_volatility(int64_t value);
  public:

  // int64 Volume = 4;
  void clear_volume();
  int64_t volume() const;
  void set_volume(int64_t value);
  private:
  int64_t _internal_volume() const;
  void _internal_set_volume(int64_t value);
  public:

  // int32 PremiumType = 7;
  void clear_premiumtype();
  int32_t premiumtype() const;
  void set_premiumtype(int32_t value);
  private:
  int32_t _internal_premiumtype() const;
  void _internal_set_premiumtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.OptionFxSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fxterm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradetime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optiontype_;
    int64_t premium_;
    int64_t volatility_;
    int64_t volume_;
    int32_t premiumtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsFxSnapshot_2eproto;
};
// -------------------------------------------------------------------

class SpotClosePriceFxSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot) */ {
 public:
  inline SpotClosePriceFxSnapshot() : SpotClosePriceFxSnapshot(nullptr) {}
  ~SpotClosePriceFxSnapshot() override;
  explicit PROTOBUF_CONSTEXPR SpotClosePriceFxSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpotClosePriceFxSnapshot(const SpotClosePriceFxSnapshot& from);
  SpotClosePriceFxSnapshot(SpotClosePriceFxSnapshot&& from) noexcept
    : SpotClosePriceFxSnapshot() {
    *this = ::std::move(from);
  }

  inline SpotClosePriceFxSnapshot& operator=(const SpotClosePriceFxSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpotClosePriceFxSnapshot& operator=(SpotClosePriceFxSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpotClosePriceFxSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpotClosePriceFxSnapshot* internal_default_instance() {
    return reinterpret_cast<const SpotClosePriceFxSnapshot*>(
               &_SpotClosePriceFxSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SpotClosePriceFxSnapshot& a, SpotClosePriceFxSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(SpotClosePriceFxSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpotClosePriceFxSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpotClosePriceFxSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpotClosePriceFxSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpotClosePriceFxSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpotClosePriceFxSnapshot& from) {
    SpotClosePriceFxSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpotClosePriceFxSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot";
  }
  protected:
  explicit SpotClosePriceFxSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateDateFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
    kClosePxFieldNumber = 1,
  };
  // string UpdateDate = 2;
  void clear_updatedate();
  const std::string& updatedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatedate();
  PROTOBUF_NODISCARD std::string* release_updatedate();
  void set_allocated_updatedate(std::string* updatedate);
  private:
  const std::string& _internal_updatedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedate(const std::string& value);
  std::string* _internal_mutable_updatedate();
  public:

  // string UpdateTime = 3;
  void clear_updatetime();
  const std::string& updatetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatetime();
  PROTOBUF_NODISCARD std::string* release_updatetime();
  void set_allocated_updatetime(std::string* updatetime);
  private:
  const std::string& _internal_updatetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatetime(const std::string& value);
  std::string* _internal_mutable_updatetime();
  public:

  // int64 ClosePx = 1;
  void clear_closepx();
  int64_t closepx() const;
  void set_closepx(int64_t value);
  private:
  int64_t _internal_closepx() const;
  void _internal_set_closepx(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatetime_;
    int64_t closepx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsFxSnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDCfetsFxSnapshot

// string HTSCSecurityID = 1;
inline void MDCfetsFxSnapshot::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDCfetsFxSnapshot::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsFxSnapshot::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.HTSCSecurityID)
}
inline std::string* MDCfetsFxSnapshot::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.HTSCSecurityID)
  return _s;
}
inline const std::string& MDCfetsFxSnapshot::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDCfetsFxSnapshot::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsFxSnapshot::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsFxSnapshot::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDCfetsFxSnapshot::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDCfetsFxSnapshot::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDCfetsFxSnapshot::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDCfetsFxSnapshot::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.MDDate)
  return _internal_mddate();
}
inline void MDCfetsFxSnapshot::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDCfetsFxSnapshot::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.MDDate)
}

// int32 MDTime = 3;
inline void MDCfetsFxSnapshot::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDCfetsFxSnapshot::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDCfetsFxSnapshot::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.MDTime)
  return _internal_mdtime();
}
inline void MDCfetsFxSnapshot::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDCfetsFxSnapshot::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDCfetsFxSnapshot::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDCfetsFxSnapshot::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDCfetsFxSnapshot::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDCfetsFxSnapshot::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDCfetsFxSnapshot::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDCfetsFxSnapshot::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCfetsFxSnapshot::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCfetsFxSnapshot::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.securityIDSource)
  return _internal_securityidsource();
}
inline void MDCfetsFxSnapshot::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDCfetsFxSnapshot::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDCfetsFxSnapshot::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDCfetsFxSnapshot::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDCfetsFxSnapshot::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.securityType)
  return _internal_securitytype();
}
inline void MDCfetsFxSnapshot::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDCfetsFxSnapshot::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.securityType)
}

// string SecuritySubType = 7;
inline void MDCfetsFxSnapshot::clear_securitysubtype() {
  _impl_.securitysubtype_.ClearToEmpty();
}
inline const std::string& MDCfetsFxSnapshot::securitysubtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.SecuritySubType)
  return _internal_securitysubtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsFxSnapshot::set_securitysubtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.securitysubtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.SecuritySubType)
}
inline std::string* MDCfetsFxSnapshot::mutable_securitysubtype() {
  std::string* _s = _internal_mutable_securitysubtype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.SecuritySubType)
  return _s;
}
inline const std::string& MDCfetsFxSnapshot::_internal_securitysubtype() const {
  return _impl_.securitysubtype_.Get();
}
inline void MDCfetsFxSnapshot::_internal_set_securitysubtype(const std::string& value) {
  
  _impl_.securitysubtype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsFxSnapshot::_internal_mutable_securitysubtype() {
  
  return _impl_.securitysubtype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsFxSnapshot::release_securitysubtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.SecuritySubType)
  return _impl_.securitysubtype_.Release();
}
inline void MDCfetsFxSnapshot::set_allocated_securitysubtype(std::string* securitysubtype) {
  if (securitysubtype != nullptr) {
    
  } else {
    
  }
  _impl_.securitysubtype_.SetAllocated(securitysubtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitysubtype_.IsDefault()) {
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.SecuritySubType)
}

// int32 ForexSnapshotType = 8;
inline void MDCfetsFxSnapshot::clear_forexsnapshottype() {
  _impl_.forexsnapshottype_ = 0;
}
inline int32_t MDCfetsFxSnapshot::_internal_forexsnapshottype() const {
  return _impl_.forexsnapshottype_;
}
inline int32_t MDCfetsFxSnapshot::forexsnapshottype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.ForexSnapshotType)
  return _internal_forexsnapshottype();
}
inline void MDCfetsFxSnapshot::_internal_set_forexsnapshottype(int32_t value) {
  
  _impl_.forexsnapshottype_ = value;
}
inline void MDCfetsFxSnapshot::set_forexsnapshottype(int32_t value) {
  _internal_set_forexsnapshottype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.ForexSnapshotType)
}

// .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot spotFxSnapshot = 9;
inline bool MDCfetsFxSnapshot::_internal_has_spotfxsnapshot() const {
  return this != internal_default_instance() && _impl_.spotfxsnapshot_ != nullptr;
}
inline bool MDCfetsFxSnapshot::has_spotfxsnapshot() const {
  return _internal_has_spotfxsnapshot();
}
inline void MDCfetsFxSnapshot::clear_spotfxsnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.spotfxsnapshot_ != nullptr) {
    delete _impl_.spotfxsnapshot_;
  }
  _impl_.spotfxsnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& MDCfetsFxSnapshot::_internal_spotfxsnapshot() const {
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* p = _impl_.spotfxsnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot&>(
      ::com::htsc::mdc::insight::model::_SwpSptNdfFowFxSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& MDCfetsFxSnapshot::spotfxsnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotFxSnapshot)
  return _internal_spotfxsnapshot();
}
inline void MDCfetsFxSnapshot::unsafe_arena_set_allocated_spotfxsnapshot(
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* spotfxsnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spotfxsnapshot_);
  }
  _impl_.spotfxsnapshot_ = spotfxsnapshot;
  if (spotfxsnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotFxSnapshot)
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::release_spotfxsnapshot() {
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* temp = _impl_.spotfxsnapshot_;
  _impl_.spotfxsnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::unsafe_arena_release_spotfxsnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotFxSnapshot)
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* temp = _impl_.spotfxsnapshot_;
  _impl_.spotfxsnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::_internal_mutable_spotfxsnapshot() {
  
  if (_impl_.spotfxsnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot>(GetArenaForAllocation());
    _impl_.spotfxsnapshot_ = p;
  }
  return _impl_.spotfxsnapshot_;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::mutable_spotfxsnapshot() {
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* _msg = _internal_mutable_spotfxsnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotFxSnapshot)
  return _msg;
}
inline void MDCfetsFxSnapshot::set_allocated_spotfxsnapshot(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* spotfxsnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spotfxsnapshot_;
  }
  if (spotfxsnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spotfxsnapshot);
    if (message_arena != submessage_arena) {
      spotfxsnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spotfxsnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spotfxsnapshot_ = spotfxsnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotFxSnapshot)
}

// .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot forwardFxSnapshot = 10;
inline bool MDCfetsFxSnapshot::_internal_has_forwardfxsnapshot() const {
  return this != internal_default_instance() && _impl_.forwardfxsnapshot_ != nullptr;
}
inline bool MDCfetsFxSnapshot::has_forwardfxsnapshot() const {
  return _internal_has_forwardfxsnapshot();
}
inline void MDCfetsFxSnapshot::clear_forwardfxsnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.forwardfxsnapshot_ != nullptr) {
    delete _impl_.forwardfxsnapshot_;
  }
  _impl_.forwardfxsnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& MDCfetsFxSnapshot::_internal_forwardfxsnapshot() const {
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* p = _impl_.forwardfxsnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot&>(
      ::com::htsc::mdc::insight::model::_SwpSptNdfFowFxSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& MDCfetsFxSnapshot::forwardfxsnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.forwardFxSnapshot)
  return _internal_forwardfxsnapshot();
}
inline void MDCfetsFxSnapshot::unsafe_arena_set_allocated_forwardfxsnapshot(
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* forwardfxsnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forwardfxsnapshot_);
  }
  _impl_.forwardfxsnapshot_ = forwardfxsnapshot;
  if (forwardfxsnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.forwardFxSnapshot)
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::release_forwardfxsnapshot() {
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* temp = _impl_.forwardfxsnapshot_;
  _impl_.forwardfxsnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::unsafe_arena_release_forwardfxsnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.forwardFxSnapshot)
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* temp = _impl_.forwardfxsnapshot_;
  _impl_.forwardfxsnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::_internal_mutable_forwardfxsnapshot() {
  
  if (_impl_.forwardfxsnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot>(GetArenaForAllocation());
    _impl_.forwardfxsnapshot_ = p;
  }
  return _impl_.forwardfxsnapshot_;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::mutable_forwardfxsnapshot() {
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* _msg = _internal_mutable_forwardfxsnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.forwardFxSnapshot)
  return _msg;
}
inline void MDCfetsFxSnapshot::set_allocated_forwardfxsnapshot(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* forwardfxsnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forwardfxsnapshot_;
  }
  if (forwardfxsnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forwardfxsnapshot);
    if (message_arena != submessage_arena) {
      forwardfxsnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forwardfxsnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forwardfxsnapshot_ = forwardfxsnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.forwardFxSnapshot)
}

// .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot nonDeliverableForwardsFxSnapshot = 11;
inline bool MDCfetsFxSnapshot::_internal_has_nondeliverableforwardsfxsnapshot() const {
  return this != internal_default_instance() && _impl_.nondeliverableforwardsfxsnapshot_ != nullptr;
}
inline bool MDCfetsFxSnapshot::has_nondeliverableforwardsfxsnapshot() const {
  return _internal_has_nondeliverableforwardsfxsnapshot();
}
inline void MDCfetsFxSnapshot::clear_nondeliverableforwardsfxsnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.nondeliverableforwardsfxsnapshot_ != nullptr) {
    delete _impl_.nondeliverableforwardsfxsnapshot_;
  }
  _impl_.nondeliverableforwardsfxsnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& MDCfetsFxSnapshot::_internal_nondeliverableforwardsfxsnapshot() const {
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* p = _impl_.nondeliverableforwardsfxsnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot&>(
      ::com::htsc::mdc::insight::model::_SwpSptNdfFowFxSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& MDCfetsFxSnapshot::nondeliverableforwardsfxsnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.nonDeliverableForwardsFxSnapshot)
  return _internal_nondeliverableforwardsfxsnapshot();
}
inline void MDCfetsFxSnapshot::unsafe_arena_set_allocated_nondeliverableforwardsfxsnapshot(
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* nondeliverableforwardsfxsnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nondeliverableforwardsfxsnapshot_);
  }
  _impl_.nondeliverableforwardsfxsnapshot_ = nondeliverableforwardsfxsnapshot;
  if (nondeliverableforwardsfxsnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.nonDeliverableForwardsFxSnapshot)
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::release_nondeliverableforwardsfxsnapshot() {
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* temp = _impl_.nondeliverableforwardsfxsnapshot_;
  _impl_.nondeliverableforwardsfxsnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::unsafe_arena_release_nondeliverableforwardsfxsnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.nonDeliverableForwardsFxSnapshot)
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* temp = _impl_.nondeliverableforwardsfxsnapshot_;
  _impl_.nondeliverableforwardsfxsnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::_internal_mutable_nondeliverableforwardsfxsnapshot() {
  
  if (_impl_.nondeliverableforwardsfxsnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot>(GetArenaForAllocation());
    _impl_.nondeliverableforwardsfxsnapshot_ = p;
  }
  return _impl_.nondeliverableforwardsfxsnapshot_;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::mutable_nondeliverableforwardsfxsnapshot() {
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* _msg = _internal_mutable_nondeliverableforwardsfxsnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.nonDeliverableForwardsFxSnapshot)
  return _msg;
}
inline void MDCfetsFxSnapshot::set_allocated_nondeliverableforwardsfxsnapshot(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* nondeliverableforwardsfxsnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nondeliverableforwardsfxsnapshot_;
  }
  if (nondeliverableforwardsfxsnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nondeliverableforwardsfxsnapshot);
    if (message_arena != submessage_arena) {
      nondeliverableforwardsfxsnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nondeliverableforwardsfxsnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nondeliverableforwardsfxsnapshot_ = nondeliverableforwardsfxsnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.nonDeliverableForwardsFxSnapshot)
}

// .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot swapFxSnapshot = 12;
inline bool MDCfetsFxSnapshot::_internal_has_swapfxsnapshot() const {
  return this != internal_default_instance() && _impl_.swapfxsnapshot_ != nullptr;
}
inline bool MDCfetsFxSnapshot::has_swapfxsnapshot() const {
  return _internal_has_swapfxsnapshot();
}
inline void MDCfetsFxSnapshot::clear_swapfxsnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.swapfxsnapshot_ != nullptr) {
    delete _impl_.swapfxsnapshot_;
  }
  _impl_.swapfxsnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& MDCfetsFxSnapshot::_internal_swapfxsnapshot() const {
  const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* p = _impl_.swapfxsnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot&>(
      ::com::htsc::mdc::insight::model::_SwpSptNdfFowFxSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& MDCfetsFxSnapshot::swapfxsnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.swapFxSnapshot)
  return _internal_swapfxsnapshot();
}
inline void MDCfetsFxSnapshot::unsafe_arena_set_allocated_swapfxsnapshot(
    ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* swapfxsnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swapfxsnapshot_);
  }
  _impl_.swapfxsnapshot_ = swapfxsnapshot;
  if (swapfxsnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.swapFxSnapshot)
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::release_swapfxsnapshot() {
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* temp = _impl_.swapfxsnapshot_;
  _impl_.swapfxsnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::unsafe_arena_release_swapfxsnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.swapFxSnapshot)
  
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* temp = _impl_.swapfxsnapshot_;
  _impl_.swapfxsnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::_internal_mutable_swapfxsnapshot() {
  
  if (_impl_.swapfxsnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot>(GetArenaForAllocation());
    _impl_.swapfxsnapshot_ = p;
  }
  return _impl_.swapfxsnapshot_;
}
inline ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* MDCfetsFxSnapshot::mutable_swapfxsnapshot() {
  ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* _msg = _internal_mutable_swapfxsnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.swapFxSnapshot)
  return _msg;
}
inline void MDCfetsFxSnapshot::set_allocated_swapfxsnapshot(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot* swapfxsnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.swapfxsnapshot_;
  }
  if (swapfxsnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(swapfxsnapshot);
    if (message_arena != submessage_arena) {
      swapfxsnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swapfxsnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swapfxsnapshot_ = swapfxsnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.swapFxSnapshot)
}

// .com.htsc.mdc.insight.model.OptionFxSnapshot optionFxSnapshot = 13;
inline bool MDCfetsFxSnapshot::_internal_has_optionfxsnapshot() const {
  return this != internal_default_instance() && _impl_.optionfxsnapshot_ != nullptr;
}
inline bool MDCfetsFxSnapshot::has_optionfxsnapshot() const {
  return _internal_has_optionfxsnapshot();
}
inline void MDCfetsFxSnapshot::clear_optionfxsnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.optionfxsnapshot_ != nullptr) {
    delete _impl_.optionfxsnapshot_;
  }
  _impl_.optionfxsnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::OptionFxSnapshot& MDCfetsFxSnapshot::_internal_optionfxsnapshot() const {
  const ::com::htsc::mdc::insight::model::OptionFxSnapshot* p = _impl_.optionfxsnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::OptionFxSnapshot&>(
      ::com::htsc::mdc::insight::model::_OptionFxSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::OptionFxSnapshot& MDCfetsFxSnapshot::optionfxsnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.optionFxSnapshot)
  return _internal_optionfxsnapshot();
}
inline void MDCfetsFxSnapshot::unsafe_arena_set_allocated_optionfxsnapshot(
    ::com::htsc::mdc::insight::model::OptionFxSnapshot* optionfxsnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionfxsnapshot_);
  }
  _impl_.optionfxsnapshot_ = optionfxsnapshot;
  if (optionfxsnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.optionFxSnapshot)
}
inline ::com::htsc::mdc::insight::model::OptionFxSnapshot* MDCfetsFxSnapshot::release_optionfxsnapshot() {
  
  ::com::htsc::mdc::insight::model::OptionFxSnapshot* temp = _impl_.optionfxsnapshot_;
  _impl_.optionfxsnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::OptionFxSnapshot* MDCfetsFxSnapshot::unsafe_arena_release_optionfxsnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.optionFxSnapshot)
  
  ::com::htsc::mdc::insight::model::OptionFxSnapshot* temp = _impl_.optionfxsnapshot_;
  _impl_.optionfxsnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::OptionFxSnapshot* MDCfetsFxSnapshot::_internal_mutable_optionfxsnapshot() {
  
  if (_impl_.optionfxsnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::OptionFxSnapshot>(GetArenaForAllocation());
    _impl_.optionfxsnapshot_ = p;
  }
  return _impl_.optionfxsnapshot_;
}
inline ::com::htsc::mdc::insight::model::OptionFxSnapshot* MDCfetsFxSnapshot::mutable_optionfxsnapshot() {
  ::com::htsc::mdc::insight::model::OptionFxSnapshot* _msg = _internal_mutable_optionfxsnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.optionFxSnapshot)
  return _msg;
}
inline void MDCfetsFxSnapshot::set_allocated_optionfxsnapshot(::com::htsc::mdc::insight::model::OptionFxSnapshot* optionfxsnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optionfxsnapshot_;
  }
  if (optionfxsnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionfxsnapshot);
    if (message_arena != submessage_arena) {
      optionfxsnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionfxsnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionfxsnapshot_ = optionfxsnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.optionFxSnapshot)
}

// .com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot spotClosePriceFxSnapshot = 14;
inline bool MDCfetsFxSnapshot::_internal_has_spotclosepricefxsnapshot() const {
  return this != internal_default_instance() && _impl_.spotclosepricefxsnapshot_ != nullptr;
}
inline bool MDCfetsFxSnapshot::has_spotclosepricefxsnapshot() const {
  return _internal_has_spotclosepricefxsnapshot();
}
inline void MDCfetsFxSnapshot::clear_spotclosepricefxsnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.spotclosepricefxsnapshot_ != nullptr) {
    delete _impl_.spotclosepricefxsnapshot_;
  }
  _impl_.spotclosepricefxsnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot& MDCfetsFxSnapshot::_internal_spotclosepricefxsnapshot() const {
  const ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* p = _impl_.spotclosepricefxsnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot&>(
      ::com::htsc::mdc::insight::model::_SpotClosePriceFxSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot& MDCfetsFxSnapshot::spotclosepricefxsnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotClosePriceFxSnapshot)
  return _internal_spotclosepricefxsnapshot();
}
inline void MDCfetsFxSnapshot::unsafe_arena_set_allocated_spotclosepricefxsnapshot(
    ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* spotclosepricefxsnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spotclosepricefxsnapshot_);
  }
  _impl_.spotclosepricefxsnapshot_ = spotclosepricefxsnapshot;
  if (spotclosepricefxsnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotClosePriceFxSnapshot)
}
inline ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* MDCfetsFxSnapshot::release_spotclosepricefxsnapshot() {
  
  ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* temp = _impl_.spotclosepricefxsnapshot_;
  _impl_.spotclosepricefxsnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* MDCfetsFxSnapshot::unsafe_arena_release_spotclosepricefxsnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotClosePriceFxSnapshot)
  
  ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* temp = _impl_.spotclosepricefxsnapshot_;
  _impl_.spotclosepricefxsnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* MDCfetsFxSnapshot::_internal_mutable_spotclosepricefxsnapshot() {
  
  if (_impl_.spotclosepricefxsnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot>(GetArenaForAllocation());
    _impl_.spotclosepricefxsnapshot_ = p;
  }
  return _impl_.spotclosepricefxsnapshot_;
}
inline ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* MDCfetsFxSnapshot::mutable_spotclosepricefxsnapshot() {
  ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* _msg = _internal_mutable_spotclosepricefxsnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotClosePriceFxSnapshot)
  return _msg;
}
inline void MDCfetsFxSnapshot::set_allocated_spotclosepricefxsnapshot(::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot* spotclosepricefxsnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spotclosepricefxsnapshot_;
  }
  if (spotclosepricefxsnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spotclosepricefxsnapshot);
    if (message_arena != submessage_arena) {
      spotclosepricefxsnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spotclosepricefxsnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spotclosepricefxsnapshot_ = spotclosepricefxsnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.spotClosePriceFxSnapshot)
}

// int32 DataMultiplePowerOf10 = 15;
inline void MDCfetsFxSnapshot::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDCfetsFxSnapshot::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDCfetsFxSnapshot::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDCfetsFxSnapshot::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDCfetsFxSnapshot::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.DataMultiplePowerOf10)
}

// string TransactTime = 16;
inline void MDCfetsFxSnapshot::clear_transacttime() {
  _impl_.transacttime_.ClearToEmpty();
}
inline const std::string& MDCfetsFxSnapshot::transacttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.TransactTime)
  return _internal_transacttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsFxSnapshot::set_transacttime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transacttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.TransactTime)
}
inline std::string* MDCfetsFxSnapshot::mutable_transacttime() {
  std::string* _s = _internal_mutable_transacttime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.TransactTime)
  return _s;
}
inline const std::string& MDCfetsFxSnapshot::_internal_transacttime() const {
  return _impl_.transacttime_.Get();
}
inline void MDCfetsFxSnapshot::_internal_set_transacttime(const std::string& value) {
  
  _impl_.transacttime_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsFxSnapshot::_internal_mutable_transacttime() {
  
  return _impl_.transacttime_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsFxSnapshot::release_transacttime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.TransactTime)
  return _impl_.transacttime_.Release();
}
inline void MDCfetsFxSnapshot::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    
  } else {
    
  }
  _impl_.transacttime_.SetAllocated(transacttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transacttime_.IsDefault()) {
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsFxSnapshot.TransactTime)
}

// -------------------------------------------------------------------

// SwpSptNdfFowFxSnapshot

// string ValueDate = 1;
inline void SwpSptNdfFowFxSnapshot::clear_valuedate() {
  _impl_.valuedate_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxSnapshot::valuedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.ValueDate)
  return _internal_valuedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxSnapshot::set_valuedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.valuedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.ValueDate)
}
inline std::string* SwpSptNdfFowFxSnapshot::mutable_valuedate() {
  std::string* _s = _internal_mutable_valuedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.ValueDate)
  return _s;
}
inline const std::string& SwpSptNdfFowFxSnapshot::_internal_valuedate() const {
  return _impl_.valuedate_.Get();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_valuedate(const std::string& value) {
  
  _impl_.valuedate_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::_internal_mutable_valuedate() {
  
  return _impl_.valuedate_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::release_valuedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.ValueDate)
  return _impl_.valuedate_.Release();
}
inline void SwpSptNdfFowFxSnapshot::set_allocated_valuedate(std::string* valuedate) {
  if (valuedate != nullptr) {
    
  } else {
    
  }
  _impl_.valuedate_.SetAllocated(valuedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.valuedate_.IsDefault()) {
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.ValueDate)
}

// int64 NetBasisChange = 2;
inline void SwpSptNdfFowFxSnapshot::clear_netbasischange() {
  _impl_.netbasischange_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_netbasischange() const {
  return _impl_.netbasischange_;
}
inline int64_t SwpSptNdfFowFxSnapshot::netbasischange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.NetBasisChange)
  return _internal_netbasischange();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_netbasischange(int64_t value) {
  
  _impl_.netbasischange_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_netbasischange(int64_t value) {
  _internal_set_netbasischange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.NetBasisChange)
}

// int64 PercentageChange = 3;
inline void SwpSptNdfFowFxSnapshot::clear_percentagechange() {
  _impl_.percentagechange_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_percentagechange() const {
  return _impl_.percentagechange_;
}
inline int64_t SwpSptNdfFowFxSnapshot::percentagechange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.PercentageChange)
  return _internal_percentagechange();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_percentagechange(int64_t value) {
  
  _impl_.percentagechange_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_percentagechange(int64_t value) {
  _internal_set_percentagechange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.PercentageChange)
}

// string DateBuy = 4;
inline void SwpSptNdfFowFxSnapshot::clear_datebuy() {
  _impl_.datebuy_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxSnapshot::datebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateBuy)
  return _internal_datebuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxSnapshot::set_datebuy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datebuy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateBuy)
}
inline std::string* SwpSptNdfFowFxSnapshot::mutable_datebuy() {
  std::string* _s = _internal_mutable_datebuy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateBuy)
  return _s;
}
inline const std::string& SwpSptNdfFowFxSnapshot::_internal_datebuy() const {
  return _impl_.datebuy_.Get();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_datebuy(const std::string& value) {
  
  _impl_.datebuy_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::_internal_mutable_datebuy() {
  
  return _impl_.datebuy_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::release_datebuy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateBuy)
  return _impl_.datebuy_.Release();
}
inline void SwpSptNdfFowFxSnapshot::set_allocated_datebuy(std::string* datebuy) {
  if (datebuy != nullptr) {
    
  } else {
    
  }
  _impl_.datebuy_.SetAllocated(datebuy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datebuy_.IsDefault()) {
    _impl_.datebuy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateBuy)
}

// string TimeBuy = 5;
inline void SwpSptNdfFowFxSnapshot::clear_timebuy() {
  _impl_.timebuy_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxSnapshot::timebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeBuy)
  return _internal_timebuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxSnapshot::set_timebuy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timebuy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeBuy)
}
inline std::string* SwpSptNdfFowFxSnapshot::mutable_timebuy() {
  std::string* _s = _internal_mutable_timebuy();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeBuy)
  return _s;
}
inline const std::string& SwpSptNdfFowFxSnapshot::_internal_timebuy() const {
  return _impl_.timebuy_.Get();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_timebuy(const std::string& value) {
  
  _impl_.timebuy_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::_internal_mutable_timebuy() {
  
  return _impl_.timebuy_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::release_timebuy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeBuy)
  return _impl_.timebuy_.Release();
}
inline void SwpSptNdfFowFxSnapshot::set_allocated_timebuy(std::string* timebuy) {
  if (timebuy != nullptr) {
    
  } else {
    
  }
  _impl_.timebuy_.SetAllocated(timebuy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timebuy_.IsDefault()) {
    _impl_.timebuy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeBuy)
}

// string DateSell = 6;
inline void SwpSptNdfFowFxSnapshot::clear_datesell() {
  _impl_.datesell_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxSnapshot::datesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateSell)
  return _internal_datesell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxSnapshot::set_datesell(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datesell_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateSell)
}
inline std::string* SwpSptNdfFowFxSnapshot::mutable_datesell() {
  std::string* _s = _internal_mutable_datesell();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateSell)
  return _s;
}
inline const std::string& SwpSptNdfFowFxSnapshot::_internal_datesell() const {
  return _impl_.datesell_.Get();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_datesell(const std::string& value) {
  
  _impl_.datesell_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::_internal_mutable_datesell() {
  
  return _impl_.datesell_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::release_datesell() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateSell)
  return _impl_.datesell_.Release();
}
inline void SwpSptNdfFowFxSnapshot::set_allocated_datesell(std::string* datesell) {
  if (datesell != nullptr) {
    
  } else {
    
  }
  _impl_.datesell_.SetAllocated(datesell, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datesell_.IsDefault()) {
    _impl_.datesell_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateSell)
}

// string TimeSell = 7;
inline void SwpSptNdfFowFxSnapshot::clear_timesell() {
  _impl_.timesell_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxSnapshot::timesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeSell)
  return _internal_timesell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxSnapshot::set_timesell(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timesell_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeSell)
}
inline std::string* SwpSptNdfFowFxSnapshot::mutable_timesell() {
  std::string* _s = _internal_mutable_timesell();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeSell)
  return _s;
}
inline const std::string& SwpSptNdfFowFxSnapshot::_internal_timesell() const {
  return _impl_.timesell_.Get();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_timesell(const std::string& value) {
  
  _impl_.timesell_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::_internal_mutable_timesell() {
  
  return _impl_.timesell_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::release_timesell() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeSell)
  return _impl_.timesell_.Release();
}
inline void SwpSptNdfFowFxSnapshot::set_allocated_timesell(std::string* timesell) {
  if (timesell != nullptr) {
    
  } else {
    
  }
  _impl_.timesell_.SetAllocated(timesell, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timesell_.IsDefault()) {
    _impl_.timesell_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeSell)
}

// int64 LastRateBuy = 8;
inline void SwpSptNdfFowFxSnapshot::clear_lastratebuy() {
  _impl_.lastratebuy_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_lastratebuy() const {
  return _impl_.lastratebuy_;
}
inline int64_t SwpSptNdfFowFxSnapshot::lastratebuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LastRateBuy)
  return _internal_lastratebuy();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_lastratebuy(int64_t value) {
  
  _impl_.lastratebuy_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_lastratebuy(int64_t value) {
  _internal_set_lastratebuy(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LastRateBuy)
}

// int64 LastRateSell = 9;
inline void SwpSptNdfFowFxSnapshot::clear_lastratesell() {
  _impl_.lastratesell_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_lastratesell() const {
  return _impl_.lastratesell_;
}
inline int64_t SwpSptNdfFowFxSnapshot::lastratesell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LastRateSell)
  return _internal_lastratesell();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_lastratesell(int64_t value) {
  
  _impl_.lastratesell_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_lastratesell(int64_t value) {
  _internal_set_lastratesell(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LastRateSell)
}

// int64 LastAllinBuy = 10;
inline void SwpSptNdfFowFxSnapshot::clear_lastallinbuy() {
  _impl_.lastallinbuy_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_lastallinbuy() const {
  return _impl_.lastallinbuy_;
}
inline int64_t SwpSptNdfFowFxSnapshot::lastallinbuy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LastAllinBuy)
  return _internal_lastallinbuy();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_lastallinbuy(int64_t value) {
  
  _impl_.lastallinbuy_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_lastallinbuy(int64_t value) {
  _internal_set_lastallinbuy(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LastAllinBuy)
}

// int64 LastAllinSell = 11;
inline void SwpSptNdfFowFxSnapshot::clear_lastallinsell() {
  _impl_.lastallinsell_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_lastallinsell() const {
  return _impl_.lastallinsell_;
}
inline int64_t SwpSptNdfFowFxSnapshot::lastallinsell() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LastAllinSell)
  return _internal_lastallinsell();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_lastallinsell(int64_t value) {
  
  _impl_.lastallinsell_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_lastallinsell(int64_t value) {
  _internal_set_lastallinsell(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LastAllinSell)
}

// int64 HighRate = 12;
inline void SwpSptNdfFowFxSnapshot::clear_highrate() {
  _impl_.highrate_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_highrate() const {
  return _impl_.highrate_;
}
inline int64_t SwpSptNdfFowFxSnapshot::highrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.HighRate)
  return _internal_highrate();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_highrate(int64_t value) {
  
  _impl_.highrate_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_highrate(int64_t value) {
  _internal_set_highrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.HighRate)
}

// int64 LowRate = 13;
inline void SwpSptNdfFowFxSnapshot::clear_lowrate() {
  _impl_.lowrate_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_lowrate() const {
  return _impl_.lowrate_;
}
inline int64_t SwpSptNdfFowFxSnapshot::lowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LowRate)
  return _internal_lowrate();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_lowrate(int64_t value) {
  
  _impl_.lowrate_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_lowrate(int64_t value) {
  _internal_set_lowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LowRate)
}

// int64 OpenRate = 14;
inline void SwpSptNdfFowFxSnapshot::clear_openrate() {
  _impl_.openrate_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_openrate() const {
  return _impl_.openrate_;
}
inline int64_t SwpSptNdfFowFxSnapshot::openrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.OpenRate)
  return _internal_openrate();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_openrate(int64_t value) {
  
  _impl_.openrate_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_openrate(int64_t value) {
  _internal_set_openrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.OpenRate)
}

// int64 HistoryCloseRate = 15;
inline void SwpSptNdfFowFxSnapshot::clear_historycloserate() {
  _impl_.historycloserate_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_historycloserate() const {
  return _impl_.historycloserate_;
}
inline int64_t SwpSptNdfFowFxSnapshot::historycloserate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.HistoryCloseRate)
  return _internal_historycloserate();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_historycloserate(int64_t value) {
  
  _impl_.historycloserate_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_historycloserate(int64_t value) {
  _internal_set_historycloserate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.HistoryCloseRate)
}

// int64 CloseRate = 16;
inline void SwpSptNdfFowFxSnapshot::clear_closerate() {
  _impl_.closerate_ = int64_t{0};
}
inline int64_t SwpSptNdfFowFxSnapshot::_internal_closerate() const {
  return _impl_.closerate_;
}
inline int64_t SwpSptNdfFowFxSnapshot::closerate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.CloseRate)
  return _internal_closerate();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_closerate(int64_t value) {
  
  _impl_.closerate_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_closerate(int64_t value) {
  _internal_set_closerate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.CloseRate)
}

// int32 AmountLevelRate = 17;
inline void SwpSptNdfFowFxSnapshot::clear_amountlevelrate() {
  _impl_.amountlevelrate_ = 0;
}
inline int32_t SwpSptNdfFowFxSnapshot::_internal_amountlevelrate() const {
  return _impl_.amountlevelrate_;
}
inline int32_t SwpSptNdfFowFxSnapshot::amountlevelrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.AmountLevelRate)
  return _internal_amountlevelrate();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_amountlevelrate(int32_t value) {
  
  _impl_.amountlevelrate_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_amountlevelrate(int32_t value) {
  _internal_set_amountlevelrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.AmountLevelRate)
}

// int32 AmountLevelAllin = 18;
inline void SwpSptNdfFowFxSnapshot::clear_amountlevelallin() {
  _impl_.amountlevelallin_ = 0;
}
inline int32_t SwpSptNdfFowFxSnapshot::_internal_amountlevelallin() const {
  return _impl_.amountlevelallin_;
}
inline int32_t SwpSptNdfFowFxSnapshot::amountlevelallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.AmountLevelAllin)
  return _internal_amountlevelallin();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_amountlevelallin(int32_t value) {
  
  _impl_.amountlevelallin_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_amountlevelallin(int32_t value) {
  _internal_set_amountlevelallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.AmountLevelAllin)
}

// int32 RateSide = 19;
inline void SwpSptNdfFowFxSnapshot::clear_rateside() {
  _impl_.rateside_ = 0;
}
inline int32_t SwpSptNdfFowFxSnapshot::_internal_rateside() const {
  return _impl_.rateside_;
}
inline int32_t SwpSptNdfFowFxSnapshot::rateside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.RateSide)
  return _internal_rateside();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_rateside(int32_t value) {
  
  _impl_.rateside_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_rateside(int32_t value) {
  _internal_set_rateside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.RateSide)
}

// int32 AllinSide = 20;
inline void SwpSptNdfFowFxSnapshot::clear_allinside() {
  _impl_.allinside_ = 0;
}
inline int32_t SwpSptNdfFowFxSnapshot::_internal_allinside() const {
  return _impl_.allinside_;
}
inline int32_t SwpSptNdfFowFxSnapshot::allinside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.AllinSide)
  return _internal_allinside();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_allinside(int32_t value) {
  
  _impl_.allinside_ = value;
}
inline void SwpSptNdfFowFxSnapshot::set_allinside(int32_t value) {
  _internal_set_allinside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.AllinSide)
}

// string LegSign = 21;
inline void SwpSptNdfFowFxSnapshot::clear_legsign() {
  _impl_.legsign_.ClearToEmpty();
}
inline const std::string& SwpSptNdfFowFxSnapshot::legsign() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LegSign)
  return _internal_legsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwpSptNdfFowFxSnapshot::set_legsign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.legsign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LegSign)
}
inline std::string* SwpSptNdfFowFxSnapshot::mutable_legsign() {
  std::string* _s = _internal_mutable_legsign();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LegSign)
  return _s;
}
inline const std::string& SwpSptNdfFowFxSnapshot::_internal_legsign() const {
  return _impl_.legsign_.Get();
}
inline void SwpSptNdfFowFxSnapshot::_internal_set_legsign(const std::string& value) {
  
  _impl_.legsign_.Set(value, GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::_internal_mutable_legsign() {
  
  return _impl_.legsign_.Mutable(GetArenaForAllocation());
}
inline std::string* SwpSptNdfFowFxSnapshot::release_legsign() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LegSign)
  return _impl_.legsign_.Release();
}
inline void SwpSptNdfFowFxSnapshot::set_allocated_legsign(std::string* legsign) {
  if (legsign != nullptr) {
    
  } else {
    
  }
  _impl_.legsign_.SetAllocated(legsign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legsign_.IsDefault()) {
    _impl_.legsign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LegSign)
}

// -------------------------------------------------------------------

// OptionFxSnapshot

// string FxTerm = 1;
inline void OptionFxSnapshot::clear_fxterm() {
  _impl_.fxterm_.ClearToEmpty();
}
inline const std::string& OptionFxSnapshot::fxterm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxSnapshot.FxTerm)
  return _internal_fxterm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxSnapshot::set_fxterm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fxterm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxSnapshot.FxTerm)
}
inline std::string* OptionFxSnapshot::mutable_fxterm() {
  std::string* _s = _internal_mutable_fxterm();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxSnapshot.FxTerm)
  return _s;
}
inline const std::string& OptionFxSnapshot::_internal_fxterm() const {
  return _impl_.fxterm_.Get();
}
inline void OptionFxSnapshot::_internal_set_fxterm(const std::string& value) {
  
  _impl_.fxterm_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxSnapshot::_internal_mutable_fxterm() {
  
  return _impl_.fxterm_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxSnapshot::release_fxterm() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxSnapshot.FxTerm)
  return _impl_.fxterm_.Release();
}
inline void OptionFxSnapshot::set_allocated_fxterm(std::string* fxterm) {
  if (fxterm != nullptr) {
    
  } else {
    
  }
  _impl_.fxterm_.SetAllocated(fxterm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fxterm_.IsDefault()) {
    _impl_.fxterm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxSnapshot.FxTerm)
}

// int64 Premium = 2;
inline void OptionFxSnapshot::clear_premium() {
  _impl_.premium_ = int64_t{0};
}
inline int64_t OptionFxSnapshot::_internal_premium() const {
  return _impl_.premium_;
}
inline int64_t OptionFxSnapshot::premium() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxSnapshot.Premium)
  return _internal_premium();
}
inline void OptionFxSnapshot::_internal_set_premium(int64_t value) {
  
  _impl_.premium_ = value;
}
inline void OptionFxSnapshot::set_premium(int64_t value) {
  _internal_set_premium(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxSnapshot.Premium)
}

// int64 Volatility = 3;
inline void OptionFxSnapshot::clear_volatility() {
  _impl_.volatility_ = int64_t{0};
}
inline int64_t OptionFxSnapshot::_internal_volatility() const {
  return _impl_.volatility_;
}
inline int64_t OptionFxSnapshot::volatility() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxSnapshot.Volatility)
  return _internal_volatility();
}
inline void OptionFxSnapshot::_internal_set_volatility(int64_t value) {
  
  _impl_.volatility_ = value;
}
inline void OptionFxSnapshot::set_volatility(int64_t value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxSnapshot.Volatility)
}

// int64 Volume = 4;
inline void OptionFxSnapshot::clear_volume() {
  _impl_.volume_ = int64_t{0};
}
inline int64_t OptionFxSnapshot::_internal_volume() const {
  return _impl_.volume_;
}
inline int64_t OptionFxSnapshot::volume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxSnapshot.Volume)
  return _internal_volume();
}
inline void OptionFxSnapshot::_internal_set_volume(int64_t value) {
  
  _impl_.volume_ = value;
}
inline void OptionFxSnapshot::set_volume(int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxSnapshot.Volume)
}

// string TradeDate = 5;
inline void OptionFxSnapshot::clear_tradedate() {
  _impl_.tradedate_.ClearToEmpty();
}
inline const std::string& OptionFxSnapshot::tradedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeDate)
  return _internal_tradedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxSnapshot::set_tradedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeDate)
}
inline std::string* OptionFxSnapshot::mutable_tradedate() {
  std::string* _s = _internal_mutable_tradedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeDate)
  return _s;
}
inline const std::string& OptionFxSnapshot::_internal_tradedate() const {
  return _impl_.tradedate_.Get();
}
inline void OptionFxSnapshot::_internal_set_tradedate(const std::string& value) {
  
  _impl_.tradedate_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxSnapshot::_internal_mutable_tradedate() {
  
  return _impl_.tradedate_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxSnapshot::release_tradedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeDate)
  return _impl_.tradedate_.Release();
}
inline void OptionFxSnapshot::set_allocated_tradedate(std::string* tradedate) {
  if (tradedate != nullptr) {
    
  } else {
    
  }
  _impl_.tradedate_.SetAllocated(tradedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradedate_.IsDefault()) {
    _impl_.tradedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeDate)
}

// string TradeTime = 6;
inline void OptionFxSnapshot::clear_tradetime() {
  _impl_.tradetime_.ClearToEmpty();
}
inline const std::string& OptionFxSnapshot::tradetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeTime)
  return _internal_tradetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxSnapshot::set_tradetime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradetime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeTime)
}
inline std::string* OptionFxSnapshot::mutable_tradetime() {
  std::string* _s = _internal_mutable_tradetime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeTime)
  return _s;
}
inline const std::string& OptionFxSnapshot::_internal_tradetime() const {
  return _impl_.tradetime_.Get();
}
inline void OptionFxSnapshot::_internal_set_tradetime(const std::string& value) {
  
  _impl_.tradetime_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxSnapshot::_internal_mutable_tradetime() {
  
  return _impl_.tradetime_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxSnapshot::release_tradetime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeTime)
  return _impl_.tradetime_.Release();
}
inline void OptionFxSnapshot::set_allocated_tradetime(std::string* tradetime) {
  if (tradetime != nullptr) {
    
  } else {
    
  }
  _impl_.tradetime_.SetAllocated(tradetime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradetime_.IsDefault()) {
    _impl_.tradetime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxSnapshot.TradeTime)
}

// int32 PremiumType = 7;
inline void OptionFxSnapshot::clear_premiumtype() {
  _impl_.premiumtype_ = 0;
}
inline int32_t OptionFxSnapshot::_internal_premiumtype() const {
  return _impl_.premiumtype_;
}
inline int32_t OptionFxSnapshot::premiumtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxSnapshot.PremiumType)
  return _internal_premiumtype();
}
inline void OptionFxSnapshot::_internal_set_premiumtype(int32_t value) {
  
  _impl_.premiumtype_ = value;
}
inline void OptionFxSnapshot::set_premiumtype(int32_t value) {
  _internal_set_premiumtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxSnapshot.PremiumType)
}

// string OptionType = 8;
inline void OptionFxSnapshot::clear_optiontype() {
  _impl_.optiontype_.ClearToEmpty();
}
inline const std::string& OptionFxSnapshot::optiontype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionFxSnapshot.OptionType)
  return _internal_optiontype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionFxSnapshot::set_optiontype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optiontype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionFxSnapshot.OptionType)
}
inline std::string* OptionFxSnapshot::mutable_optiontype() {
  std::string* _s = _internal_mutable_optiontype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionFxSnapshot.OptionType)
  return _s;
}
inline const std::string& OptionFxSnapshot::_internal_optiontype() const {
  return _impl_.optiontype_.Get();
}
inline void OptionFxSnapshot::_internal_set_optiontype(const std::string& value) {
  
  _impl_.optiontype_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionFxSnapshot::_internal_mutable_optiontype() {
  
  return _impl_.optiontype_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionFxSnapshot::release_optiontype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionFxSnapshot.OptionType)
  return _impl_.optiontype_.Release();
}
inline void OptionFxSnapshot::set_allocated_optiontype(std::string* optiontype) {
  if (optiontype != nullptr) {
    
  } else {
    
  }
  _impl_.optiontype_.SetAllocated(optiontype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optiontype_.IsDefault()) {
    _impl_.optiontype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionFxSnapshot.OptionType)
}

// -------------------------------------------------------------------

// SpotClosePriceFxSnapshot

// int64 ClosePx = 1;
inline void SpotClosePriceFxSnapshot::clear_closepx() {
  _impl_.closepx_ = int64_t{0};
}
inline int64_t SpotClosePriceFxSnapshot::_internal_closepx() const {
  return _impl_.closepx_;
}
inline int64_t SpotClosePriceFxSnapshot::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.ClosePx)
  return _internal_closepx();
}
inline void SpotClosePriceFxSnapshot::_internal_set_closepx(int64_t value) {
  
  _impl_.closepx_ = value;
}
inline void SpotClosePriceFxSnapshot::set_closepx(int64_t value) {
  _internal_set_closepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.ClosePx)
}

// string UpdateDate = 2;
inline void SpotClosePriceFxSnapshot::clear_updatedate() {
  _impl_.updatedate_.ClearToEmpty();
}
inline const std::string& SpotClosePriceFxSnapshot::updatedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateDate)
  return _internal_updatedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotClosePriceFxSnapshot::set_updatedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updatedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateDate)
}
inline std::string* SpotClosePriceFxSnapshot::mutable_updatedate() {
  std::string* _s = _internal_mutable_updatedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateDate)
  return _s;
}
inline const std::string& SpotClosePriceFxSnapshot::_internal_updatedate() const {
  return _impl_.updatedate_.Get();
}
inline void SpotClosePriceFxSnapshot::_internal_set_updatedate(const std::string& value) {
  
  _impl_.updatedate_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotClosePriceFxSnapshot::_internal_mutable_updatedate() {
  
  return _impl_.updatedate_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotClosePriceFxSnapshot::release_updatedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateDate)
  return _impl_.updatedate_.Release();
}
inline void SpotClosePriceFxSnapshot::set_allocated_updatedate(std::string* updatedate) {
  if (updatedate != nullptr) {
    
  } else {
    
  }
  _impl_.updatedate_.SetAllocated(updatedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updatedate_.IsDefault()) {
    _impl_.updatedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateDate)
}

// string UpdateTime = 3;
inline void SpotClosePriceFxSnapshot::clear_updatetime() {
  _impl_.updatetime_.ClearToEmpty();
}
inline const std::string& SpotClosePriceFxSnapshot::updatetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateTime)
  return _internal_updatetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotClosePriceFxSnapshot::set_updatetime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updatetime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateTime)
}
inline std::string* SpotClosePriceFxSnapshot::mutable_updatetime() {
  std::string* _s = _internal_mutable_updatetime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateTime)
  return _s;
}
inline const std::string& SpotClosePriceFxSnapshot::_internal_updatetime() const {
  return _impl_.updatetime_.Get();
}
inline void SpotClosePriceFxSnapshot::_internal_set_updatetime(const std::string& value) {
  
  _impl_.updatetime_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotClosePriceFxSnapshot::_internal_mutable_updatetime() {
  
  return _impl_.updatetime_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotClosePriceFxSnapshot::release_updatetime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateTime)
  return _impl_.updatetime_.Release();
}
inline void SpotClosePriceFxSnapshot::set_allocated_updatetime(std::string* updatetime) {
  if (updatetime != nullptr) {
    
  } else {
    
  }
  _impl_.updatetime_.SetAllocated(updatetime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updatetime_.IsDefault()) {
    _impl_.updatetime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDCfetsFxSnapshot_2eproto
