// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDRate.proto

#include "MDRate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDRate::MDRate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buypricequeue_)*/{}
  , /*decltype(_impl_._buypricequeue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.buyorderqtyqueue_)*/{}
  , /*decltype(_impl_._buyorderqtyqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellpricequeue_)*/{}
  , /*decltype(_impl_._sellpricequeue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellorderqtyqueue_)*/{}
  , /*decltype(_impl_._sellorderqtyqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.buyorderqueue_)*/{}
  , /*decltype(_impl_._buyorderqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellorderqueue_)*/{}
  , /*decltype(_impl_._sellorderqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.buynumordersqueue_)*/{}
  , /*decltype(_impl_._buynumordersqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellnumordersqueue_)*/{}
  , /*decltype(_impl_._sellnumordersqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.maxpx_)*/int64_t{0}
  , /*decltype(_impl_.minpx_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.totalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.lastpx_)*/int64_t{0}
  , /*decltype(_impl_.openpx_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.highpx_)*/int64_t{0}
  , /*decltype(_impl_.lowpx_)*/int64_t{0}
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDRateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDRateDefaultTypeInternal() {}
  union {
    MDRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDRateDefaultTypeInternal _MDRate_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDRate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDRate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDRate_2eproto = nullptr;

const uint32_t TableStruct_MDRate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.maxpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.minpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.buypricequeue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.buyorderqtyqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.sellpricequeue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.sellorderqtyqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.buyorderqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.sellorderqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.buynumordersqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.sellnumordersqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDRate, _impl_.datamultiplepowerof10_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDRate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDRate_default_instance_._instance,
};

const char descriptor_table_protodef_MDRate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014MDRate.proto\022\032com.htsc.mdc.insight.mod"
  "el\032\027ESecurityIDSource.proto\032\023ESecurityTy"
  "pe.proto\"\325\005\n\006MDRate\022\026\n\016HTSCSecurityID\030\001 "
  "\001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rD"
  "ataTimestamp\030\004 \001(\003\022\030\n\020TradingPhaseCode\030\005"
  " \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%.com.hts"
  "c.mdc.model.ESecurityIDSource\0227\n\014securit"
  "yType\030\007 \001(\0162!.com.htsc.mdc.model.ESecuri"
  "tyType\022\r\n\005MaxPx\030\010 \001(\003\022\r\n\005MinPx\030\t \001(\003\022\022\n\n"
  "PreClosePx\030\n \001(\003\022\030\n\020TotalVolumeTrade\030\013 \001"
  "(\003\022\027\n\017TotalValueTrade\030\014 \001(\003\022\016\n\006LastPx\030\r "
  "\001(\003\022\016\n\006OpenPx\030\016 \001(\003\022\017\n\007ClosePx\030\017 \001(\003\022\016\n\006"
  "HighPx\030\020 \001(\003\022\r\n\005LowPx\030\021 \001(\003\022\024\n\014ExchangeD"
  "ate\030\022 \001(\005\022\024\n\014ExchangeTime\030\023 \001(\005\022\031\n\rBuyPr"
  "iceQueue\030\025 \003(\003B\002\020\001\022\034\n\020BuyOrderQtyQueue\030\026"
  " \003(\003B\002\020\001\022\032\n\016SellPriceQueue\030\027 \003(\003B\002\020\001\022\035\n\021"
  "SellOrderQtyQueue\030\030 \003(\003B\002\020\001\022\031\n\rBuyOrderQ"
  "ueue\030\031 \003(\003B\002\020\001\022\032\n\016SellOrderQueue\030\032 \003(\003B\002"
  "\020\001\022\035\n\021BuyNumOrdersQueue\030\033 \003(\003B\002\020\001\022\036\n\022Sel"
  "lNumOrdersQueue\030\034 \003(\003B\002\020\001\022\035\n\025DataMultipl"
  "ePowerOf10\030\035 \001(\005B/\n\032com.htsc.mdc.insight"
  ".modelB\014MDRateProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDRate_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDRate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDRate_2eproto = {
    false, false, 873, descriptor_table_protodef_MDRate_2eproto,
    "MDRate.proto",
    &descriptor_table_MDRate_2eproto_once, descriptor_table_MDRate_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_MDRate_2eproto::offsets,
    file_level_metadata_MDRate_2eproto, file_level_enum_descriptors_MDRate_2eproto,
    file_level_service_descriptors_MDRate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDRate_2eproto_getter() {
  return &descriptor_table_MDRate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDRate_2eproto(&descriptor_table_MDRate_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDRate::_Internal {
 public:
};

MDRate::MDRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDRate)
}
MDRate::MDRate(const MDRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDRate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buypricequeue_){from._impl_.buypricequeue_}
    , /*decltype(_impl_._buypricequeue_cached_byte_size_)*/{0}
    , decltype(_impl_.buyorderqtyqueue_){from._impl_.buyorderqtyqueue_}
    , /*decltype(_impl_._buyorderqtyqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellpricequeue_){from._impl_.sellpricequeue_}
    , /*decltype(_impl_._sellpricequeue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellorderqtyqueue_){from._impl_.sellorderqtyqueue_}
    , /*decltype(_impl_._sellorderqtyqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.buyorderqueue_){from._impl_.buyorderqueue_}
    , /*decltype(_impl_._buyorderqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellorderqueue_){from._impl_.sellorderqueue_}
    , /*decltype(_impl_._sellorderqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.buynumordersqueue_){from._impl_.buynumordersqueue_}
    , /*decltype(_impl_._buynumordersqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellnumordersqueue_){from._impl_.sellnumordersqueue_}
    , /*decltype(_impl_._sellnumordersqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.maxpx_){}
    , decltype(_impl_.minpx_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.totalvolumetrade_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.lastpx_){}
    , decltype(_impl_.openpx_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.highpx_){}
    , decltype(_impl_.lowpx_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDRate)
}

inline void MDRate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buypricequeue_){arena}
    , /*decltype(_impl_._buypricequeue_cached_byte_size_)*/{0}
    , decltype(_impl_.buyorderqtyqueue_){arena}
    , /*decltype(_impl_._buyorderqtyqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellpricequeue_){arena}
    , /*decltype(_impl_._sellpricequeue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellorderqtyqueue_){arena}
    , /*decltype(_impl_._sellorderqtyqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.buyorderqueue_){arena}
    , /*decltype(_impl_._buyorderqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellorderqueue_){arena}
    , /*decltype(_impl_._sellorderqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.buynumordersqueue_){arena}
    , /*decltype(_impl_._buynumordersqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellnumordersqueue_){arena}
    , /*decltype(_impl_._sellnumordersqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.maxpx_){int64_t{0}}
    , decltype(_impl_.minpx_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.totalvolumetrade_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.lastpx_){int64_t{0}}
    , decltype(_impl_.openpx_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.highpx_){int64_t{0}}
    , decltype(_impl_.lowpx_){int64_t{0}}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDRate::~MDRate() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDRate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDRate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buypricequeue_.~RepeatedField();
  _impl_.buyorderqtyqueue_.~RepeatedField();
  _impl_.sellpricequeue_.~RepeatedField();
  _impl_.sellorderqtyqueue_.~RepeatedField();
  _impl_.buyorderqueue_.~RepeatedField();
  _impl_.sellorderqueue_.~RepeatedField();
  _impl_.buynumordersqueue_.~RepeatedField();
  _impl_.sellnumordersqueue_.~RepeatedField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
}

void MDRate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDRate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDRate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buypricequeue_.Clear();
  _impl_.buyorderqtyqueue_.Clear();
  _impl_.sellpricequeue_.Clear();
  _impl_.sellorderqtyqueue_.Clear();
  _impl_.buyorderqueue_.Clear();
  _impl_.sellorderqueue_.Clear();
  _impl_.buynumordersqueue_.Clear();
  _impl_.sellnumordersqueue_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDRate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDRate.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDRate.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 MaxPx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.maxpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MinPx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.minpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastPx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenPx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighPx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowPx = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyPriceQueue = 21 [packed = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buypricequeue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 168) {
          _internal_add_buypricequeue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyOrderQtyQueue = 22 [packed = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buyorderqtyqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_buyorderqtyqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellPriceQueue = 23 [packed = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellpricequeue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 184) {
          _internal_add_sellpricequeue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellOrderQtyQueue = 24 [packed = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellorderqtyqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 192) {
          _internal_add_sellorderqtyqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyOrderQueue = 25 [packed = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buyorderqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 200) {
          _internal_add_buyorderqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellOrderQueue = 26 [packed = true];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellorderqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 208) {
          _internal_add_sellorderqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyNumOrdersQueue = 27 [packed = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buynumordersqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 216) {
          _internal_add_buynumordersqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellNumOrdersQueue = 28 [packed = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellnumordersqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 224) {
          _internal_add_sellnumordersqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDRate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDRate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDRate.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDRate.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int64 MaxPx = 8;
  if (this->_internal_maxpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_maxpx(), target);
  }

  // int64 MinPx = 9;
  if (this->_internal_minpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_minpx(), target);
  }

  // int64 PreClosePx = 10;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_preclosepx(), target);
  }

  // int64 TotalVolumeTrade = 11;
  if (this->_internal_totalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 12;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_totalvaluetrade(), target);
  }

  // int64 LastPx = 13;
  if (this->_internal_lastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_lastpx(), target);
  }

  // int64 OpenPx = 14;
  if (this->_internal_openpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_openpx(), target);
  }

  // int64 ClosePx = 15;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_closepx(), target);
  }

  // int64 HighPx = 16;
  if (this->_internal_highpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_highpx(), target);
  }

  // int64 LowPx = 17;
  if (this->_internal_lowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_lowpx(), target);
  }

  // int32 ExchangeDate = 18;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 19;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_exchangetime(), target);
  }

  // repeated int64 BuyPriceQueue = 21 [packed = true];
  {
    int byte_size = _impl_._buypricequeue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          21, _internal_buypricequeue(), byte_size, target);
    }
  }

  // repeated int64 BuyOrderQtyQueue = 22 [packed = true];
  {
    int byte_size = _impl_._buyorderqtyqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          22, _internal_buyorderqtyqueue(), byte_size, target);
    }
  }

  // repeated int64 SellPriceQueue = 23 [packed = true];
  {
    int byte_size = _impl_._sellpricequeue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          23, _internal_sellpricequeue(), byte_size, target);
    }
  }

  // repeated int64 SellOrderQtyQueue = 24 [packed = true];
  {
    int byte_size = _impl_._sellorderqtyqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          24, _internal_sellorderqtyqueue(), byte_size, target);
    }
  }

  // repeated int64 BuyOrderQueue = 25 [packed = true];
  {
    int byte_size = _impl_._buyorderqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          25, _internal_buyorderqueue(), byte_size, target);
    }
  }

  // repeated int64 SellOrderQueue = 26 [packed = true];
  {
    int byte_size = _impl_._sellorderqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          26, _internal_sellorderqueue(), byte_size, target);
    }
  }

  // repeated int64 BuyNumOrdersQueue = 27 [packed = true];
  {
    int byte_size = _impl_._buynumordersqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          27, _internal_buynumordersqueue(), byte_size, target);
    }
  }

  // repeated int64 SellNumOrdersQueue = 28 [packed = true];
  {
    int byte_size = _impl_._sellnumordersqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          28, _internal_sellnumordersqueue(), byte_size, target);
    }
  }

  // int32 DataMultiplePowerOf10 = 29;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDRate)
  return target;
}

size_t MDRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDRate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 BuyPriceQueue = 21 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buypricequeue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buypricequeue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 BuyOrderQtyQueue = 22 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buyorderqtyqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buyorderqtyqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellPriceQueue = 23 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellpricequeue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellpricequeue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellOrderQtyQueue = 24 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellorderqtyqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellorderqtyqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 BuyOrderQueue = 25 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buyorderqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buyorderqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellOrderQueue = 26 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellorderqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellorderqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 BuyNumOrdersQueue = 27 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buynumordersqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buynumordersqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellNumOrdersQueue = 28 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellnumordersqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellnumordersqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 MaxPx = 8;
  if (this->_internal_maxpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maxpx());
  }

  // int64 MinPx = 9;
  if (this->_internal_minpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_minpx());
  }

  // int64 PreClosePx = 10;
  if (this->_internal_preclosepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preclosepx());
  }

  // int64 TotalVolumeTrade = 11;
  if (this->_internal_totalvolumetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvolumetrade());
  }

  // int64 TotalValueTrade = 12;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 LastPx = 13;
  if (this->_internal_lastpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpx());
  }

  // int64 OpenPx = 14;
  if (this->_internal_openpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openpx());
  }

  // int64 ClosePx = 15;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  // int64 HighPx = 16;
  if (this->_internal_highpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_highpx());
  }

  // int64 LowPx = 17;
  if (this->_internal_lowpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lowpx());
  }

  // int32 ExchangeDate = 18;
  if (this->_internal_exchangedate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 19;
  if (this->_internal_exchangetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangetime());
  }

  // int32 DataMultiplePowerOf10 = 29;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDRate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDRate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDRate::GetClassData() const { return &_class_data_; }


void MDRate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDRate*>(&to_msg);
  auto& from = static_cast<const MDRate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDRate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buypricequeue_.MergeFrom(from._impl_.buypricequeue_);
  _this->_impl_.buyorderqtyqueue_.MergeFrom(from._impl_.buyorderqtyqueue_);
  _this->_impl_.sellpricequeue_.MergeFrom(from._impl_.sellpricequeue_);
  _this->_impl_.sellorderqtyqueue_.MergeFrom(from._impl_.sellorderqtyqueue_);
  _this->_impl_.buyorderqueue_.MergeFrom(from._impl_.buyorderqueue_);
  _this->_impl_.sellorderqueue_.MergeFrom(from._impl_.sellorderqueue_);
  _this->_impl_.buynumordersqueue_.MergeFrom(from._impl_.buynumordersqueue_);
  _this->_impl_.sellnumordersqueue_.MergeFrom(from._impl_.sellnumordersqueue_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_maxpx() != 0) {
    _this->_internal_set_maxpx(from._internal_maxpx());
  }
  if (from._internal_minpx() != 0) {
    _this->_internal_set_minpx(from._internal_minpx());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_totalvolumetrade() != 0) {
    _this->_internal_set_totalvolumetrade(from._internal_totalvolumetrade());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_lastpx() != 0) {
    _this->_internal_set_lastpx(from._internal_lastpx());
  }
  if (from._internal_openpx() != 0) {
    _this->_internal_set_openpx(from._internal_openpx());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_highpx() != 0) {
    _this->_internal_set_highpx(from._internal_highpx());
  }
  if (from._internal_lowpx() != 0) {
    _this->_internal_set_lowpx(from._internal_lowpx());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDRate::CopyFrom(const MDRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDRate::IsInitialized() const {
  return true;
}

void MDRate::InternalSwap(MDRate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buypricequeue_.InternalSwap(&other->_impl_.buypricequeue_);
  _impl_.buyorderqtyqueue_.InternalSwap(&other->_impl_.buyorderqtyqueue_);
  _impl_.sellpricequeue_.InternalSwap(&other->_impl_.sellpricequeue_);
  _impl_.sellorderqtyqueue_.InternalSwap(&other->_impl_.sellorderqtyqueue_);
  _impl_.buyorderqueue_.InternalSwap(&other->_impl_.buyorderqueue_);
  _impl_.sellorderqueue_.InternalSwap(&other->_impl_.sellorderqueue_);
  _impl_.buynumordersqueue_.InternalSwap(&other->_impl_.buynumordersqueue_);
  _impl_.sellnumordersqueue_.InternalSwap(&other->_impl_.sellnumordersqueue_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDRate, _impl_.datamultiplepowerof10_)
      + sizeof(MDRate::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDRate, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDRate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDRate_2eproto_getter, &descriptor_table_MDRate_2eproto_once,
      file_level_metadata_MDRate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDRate*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDRate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
