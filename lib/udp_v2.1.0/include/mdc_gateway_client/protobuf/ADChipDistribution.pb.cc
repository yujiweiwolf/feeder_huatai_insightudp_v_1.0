// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADChipDistribution.proto

#include "ADChipDistribution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR ADChipDistribution::ADChipDistribution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tradabledetails_)*/{}
  , /*decltype(_impl_.restricteddetails_)*/{}
  , /*decltype(_impl_.restrictedholddetails_)*/{}
  , /*decltype(_impl_.largeshareholdersdetails_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.lastpx_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.sharetotalnumber_)*/int64_t{0}
  , /*decltype(_impl_.totalshare_)*/int64_t{0}
  , /*decltype(_impl_.atotalshare_)*/int64_t{0}
  , /*decltype(_impl_.alistedtotalshare_)*/int64_t{0}
  , /*decltype(_impl_.tradablemcst_)*/int64_t{0}
  , /*decltype(_impl_.tradablemaxcostofpositions_)*/int64_t{0}
  , /*decltype(_impl_.tradablemincostofpositions_)*/int64_t{0}
  , /*decltype(_impl_.tradableprofitpercent_)*/int64_t{0}
  , /*decltype(_impl_.tradablechipdispersionpercent_)*/int64_t{0}
  , /*decltype(_impl_.tradablepreprofitpercent_)*/int64_t{0}
  , /*decltype(_impl_.tradableprofitchangepercent_)*/int64_t{0}
  , /*decltype(_impl_.tradablecentralizedpercent_)*/int64_t{0}
  , /*decltype(_impl_.tradablecentralizedmaxcostofpositions_)*/int64_t{0}
  , /*decltype(_impl_.tradablecentralizedmincostofpositions_)*/int64_t{0}
  , /*decltype(_impl_.tradablesharetotalnumber_)*/int64_t{0}
  , /*decltype(_impl_.tradablesharepercent_)*/int64_t{0}
  , /*decltype(_impl_.isfinalsettlement_)*/false
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_.restrictedmcst_)*/int64_t{0}
  , /*decltype(_impl_.restrictedmaxcostofpositions_)*/int64_t{0}
  , /*decltype(_impl_.restrictedmincostofpositions_)*/int64_t{0}
  , /*decltype(_impl_.restrictedsharetotalnumber_)*/int64_t{0}
  , /*decltype(_impl_.restrictedsharepercent_)*/int64_t{0}
  , /*decltype(_impl_.largeshareholdersmcst_)*/int64_t{0}
  , /*decltype(_impl_.largeshareholdersmaxcostofpositions_)*/int64_t{0}
  , /*decltype(_impl_.largeshareholdersmincostofpositions_)*/int64_t{0}
  , /*decltype(_impl_.largeshareholderssharetotalnumber_)*/int64_t{0}
  , /*decltype(_impl_.largeshareholderssharepercent_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADChipDistributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADChipDistributionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADChipDistributionDefaultTypeInternal() {}
  union {
    ADChipDistribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADChipDistributionDefaultTypeInternal _ADChipDistribution_default_instance_;
PROTOBUF_CONSTEXPR ADChipDistributionDetail::ADChipDistributionDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shareholdername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/int64_t{0}
  , /*decltype(_impl_.numberofshares_)*/int64_t{0}
  , /*decltype(_impl_.numberofsharespercent_)*/int64_t{0}
  , /*decltype(_impl_.listeddate_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADChipDistributionDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADChipDistributionDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADChipDistributionDetailDefaultTypeInternal() {}
  union {
    ADChipDistributionDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADChipDistributionDetailDefaultTypeInternal _ADChipDistributionDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_ADChipDistribution_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ADChipDistribution_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ADChipDistribution_2eproto = nullptr;

const uint32_t TableStruct_ADChipDistribution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.sharetotalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.isfinalsettlement_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.totalshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.atotalshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.alistedtotalshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradabledetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablemcst_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablemaxcostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablemincostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradableprofitpercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablechipdispersionpercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablepreprofitpercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradableprofitchangepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablecentralizedpercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablecentralizedmaxcostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablecentralizedmincostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablesharetotalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.tradablesharepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.restricteddetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.restrictedmcst_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.restrictedmaxcostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.restrictedmincostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.restrictedsharetotalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.restrictedsharepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.restrictedholddetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.largeshareholdersdetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.largeshareholdersmcst_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.largeshareholdersmaxcostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.largeshareholdersmincostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.largeshareholderssharetotalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.largeshareholderssharepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _impl_.datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, _impl_.numberofshares_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, _impl_.numberofsharespercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, _impl_.listeddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, _impl_.shareholdername_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADChipDistribution)},
  { 48, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADChipDistributionDetail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_ADChipDistribution_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADChipDistributionDetail_default_instance_._instance,
};

const char descriptor_table_protodef_ADChipDistribution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030ADChipDistribution.proto\022\032com.htsc.mdc"
  ".insight.model\032\023ESecurityType.proto\032\027ESe"
  "curityIDSource.proto\"\262\014\n\022ADChipDistribut"
  "ion\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 "
  "\001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001"
  "(\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc."
  "mdc.model.ESecurityIDSource\0227\n\014securityT"
  "ype\030\006 \001(\0162!.com.htsc.mdc.model.ESecurity"
  "Type\022\024\n\014ExchangeDate\030\007 \001(\005\022\024\n\014ExchangeTi"
  "me\030\010 \001(\005\022\016\n\006LastPx\030\013 \001(\003\022\022\n\nPreClosePx\030\014"
  " \001(\003\022\030\n\020ShareTotalNumber\030\r \001(\003\022\031\n\021IsFina"
  "lSettlement\030\016 \001(\010\022\022\n\nTotalShare\030\017 \001(\003\022\023\n"
  "\013ATotalShare\030\020 \001(\003\022\031\n\021AListedTotalShare\030"
  "\021 \001(\003\022M\n\017TradableDetails\030\024 \003(\01324.com.hts"
  "c.mdc.insight.model.ADChipDistributionDe"
  "tail\022\024\n\014TradableMCST\030\025 \001(\003\022\"\n\032TradableMa"
  "xCostOfPositions\030\026 \001(\003\022\"\n\032TradableMinCos"
  "tOfPositions\030\027 \001(\003\022\035\n\025TradableProfitPerc"
  "ent\030\030 \001(\003\022%\n\035TradableChipDispersionPerce"
  "nt\030\031 \001(\003\022 \n\030TradablePreProfitPercent\030\032 \001"
  "(\003\022#\n\033TradableProfitChangePercent\030\033 \001(\003\022"
  "\"\n\032TradableCentralizedPercent\030\034 \001(\003\022-\n%T"
  "radableCentralizedMaxCostOfPositions\030\035 \001"
  "(\003\022-\n%TradableCentralizedMinCostOfPositi"
  "ons\030\036 \001(\003\022 \n\030TradableShareTotalNumber\030\037 "
  "\001(\003\022\034\n\024TradableSharePercent\030  \001(\003\022O\n\021Res"
  "trictedDetails\030( \003(\01324.com.htsc.mdc.insi"
  "ght.model.ADChipDistributionDetail\022\026\n\016Re"
  "strictedMCST\030) \001(\003\022$\n\034RestrictedMaxCostO"
  "fPositions\030* \001(\003\022$\n\034RestrictedMinCostOfP"
  "ositions\030+ \001(\003\022\"\n\032RestrictedShareTotalNu"
  "mber\030. \001(\003\022\036\n\026RestrictedSharePercent\030/ \001"
  "(\003\022S\n\025RestrictedHoldDetails\0300 \003(\01324.com."
  "htsc.mdc.insight.model.ADChipDistributio"
  "nDetail\022V\n\030LargeShareholdersDetails\0302 \003("
  "\01324.com.htsc.mdc.insight.model.ADChipDis"
  "tributionDetail\022\035\n\025LargeShareholdersMCST"
  "\0303 \001(\003\022+\n#LargeShareholdersMaxCostOfPosi"
  "tions\0304 \001(\003\022+\n#LargeShareholdersMinCostO"
  "fPositions\0305 \001(\003\022)\n!LargeShareholdersSha"
  "reTotalNumber\0306 \001(\003\022%\n\035LargeShareholders"
  "SharePercent\0307 \001(\003\022\035\n\025DataMultiplePowerO"
  "f10\0308 \001(\005\"\215\001\n\030ADChipDistributionDetail\022\r"
  "\n\005Price\030\001 \001(\003\022\026\n\016NumberOfShares\030\002 \001(\003\022\035\n"
  "\025NumberOfSharesPercent\030\003 \001(\003\022\022\n\nListedDa"
  "te\030\004 \001(\003\022\027\n\017ShareHolderName\030\005 \001(\tB;\n\032com"
  ".htsc.mdc.insight.modelB\030ADChipDistribut"
  "ionProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ADChipDistribution_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_ADChipDistribution_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ADChipDistribution_2eproto = {
    false, false, 1902, descriptor_table_protodef_ADChipDistribution_2eproto,
    "ADChipDistribution.proto",
    &descriptor_table_ADChipDistribution_2eproto_once, descriptor_table_ADChipDistribution_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_ADChipDistribution_2eproto::offsets,
    file_level_metadata_ADChipDistribution_2eproto, file_level_enum_descriptors_ADChipDistribution_2eproto,
    file_level_service_descriptors_ADChipDistribution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ADChipDistribution_2eproto_getter() {
  return &descriptor_table_ADChipDistribution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ADChipDistribution_2eproto(&descriptor_table_ADChipDistribution_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADChipDistribution::_Internal {
 public:
};

ADChipDistribution::ADChipDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADChipDistribution)
}
ADChipDistribution::ADChipDistribution(const ADChipDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADChipDistribution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tradabledetails_){from._impl_.tradabledetails_}
    , decltype(_impl_.restricteddetails_){from._impl_.restricteddetails_}
    , decltype(_impl_.restrictedholddetails_){from._impl_.restrictedholddetails_}
    , decltype(_impl_.largeshareholdersdetails_){from._impl_.largeshareholdersdetails_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.lastpx_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.sharetotalnumber_){}
    , decltype(_impl_.totalshare_){}
    , decltype(_impl_.atotalshare_){}
    , decltype(_impl_.alistedtotalshare_){}
    , decltype(_impl_.tradablemcst_){}
    , decltype(_impl_.tradablemaxcostofpositions_){}
    , decltype(_impl_.tradablemincostofpositions_){}
    , decltype(_impl_.tradableprofitpercent_){}
    , decltype(_impl_.tradablechipdispersionpercent_){}
    , decltype(_impl_.tradablepreprofitpercent_){}
    , decltype(_impl_.tradableprofitchangepercent_){}
    , decltype(_impl_.tradablecentralizedpercent_){}
    , decltype(_impl_.tradablecentralizedmaxcostofpositions_){}
    , decltype(_impl_.tradablecentralizedmincostofpositions_){}
    , decltype(_impl_.tradablesharetotalnumber_){}
    , decltype(_impl_.tradablesharepercent_){}
    , decltype(_impl_.isfinalsettlement_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , decltype(_impl_.restrictedmcst_){}
    , decltype(_impl_.restrictedmaxcostofpositions_){}
    , decltype(_impl_.restrictedmincostofpositions_){}
    , decltype(_impl_.restrictedsharetotalnumber_){}
    , decltype(_impl_.restrictedsharepercent_){}
    , decltype(_impl_.largeshareholdersmcst_){}
    , decltype(_impl_.largeshareholdersmaxcostofpositions_){}
    , decltype(_impl_.largeshareholdersmincostofpositions_){}
    , decltype(_impl_.largeshareholderssharetotalnumber_){}
    , decltype(_impl_.largeshareholderssharepercent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.largeshareholderssharepercent_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.largeshareholderssharepercent_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADChipDistribution)
}

inline void ADChipDistribution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tradabledetails_){arena}
    , decltype(_impl_.restricteddetails_){arena}
    , decltype(_impl_.restrictedholddetails_){arena}
    , decltype(_impl_.largeshareholdersdetails_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.lastpx_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.sharetotalnumber_){int64_t{0}}
    , decltype(_impl_.totalshare_){int64_t{0}}
    , decltype(_impl_.atotalshare_){int64_t{0}}
    , decltype(_impl_.alistedtotalshare_){int64_t{0}}
    , decltype(_impl_.tradablemcst_){int64_t{0}}
    , decltype(_impl_.tradablemaxcostofpositions_){int64_t{0}}
    , decltype(_impl_.tradablemincostofpositions_){int64_t{0}}
    , decltype(_impl_.tradableprofitpercent_){int64_t{0}}
    , decltype(_impl_.tradablechipdispersionpercent_){int64_t{0}}
    , decltype(_impl_.tradablepreprofitpercent_){int64_t{0}}
    , decltype(_impl_.tradableprofitchangepercent_){int64_t{0}}
    , decltype(_impl_.tradablecentralizedpercent_){int64_t{0}}
    , decltype(_impl_.tradablecentralizedmaxcostofpositions_){int64_t{0}}
    , decltype(_impl_.tradablecentralizedmincostofpositions_){int64_t{0}}
    , decltype(_impl_.tradablesharetotalnumber_){int64_t{0}}
    , decltype(_impl_.tradablesharepercent_){int64_t{0}}
    , decltype(_impl_.isfinalsettlement_){false}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , decltype(_impl_.restrictedmcst_){int64_t{0}}
    , decltype(_impl_.restrictedmaxcostofpositions_){int64_t{0}}
    , decltype(_impl_.restrictedmincostofpositions_){int64_t{0}}
    , decltype(_impl_.restrictedsharetotalnumber_){int64_t{0}}
    , decltype(_impl_.restrictedsharepercent_){int64_t{0}}
    , decltype(_impl_.largeshareholdersmcst_){int64_t{0}}
    , decltype(_impl_.largeshareholdersmaxcostofpositions_){int64_t{0}}
    , decltype(_impl_.largeshareholdersmincostofpositions_){int64_t{0}}
    , decltype(_impl_.largeshareholderssharetotalnumber_){int64_t{0}}
    , decltype(_impl_.largeshareholderssharepercent_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADChipDistribution::~ADChipDistribution() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADChipDistribution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADChipDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tradabledetails_.~RepeatedPtrField();
  _impl_.restricteddetails_.~RepeatedPtrField();
  _impl_.restrictedholddetails_.~RepeatedPtrField();
  _impl_.largeshareholdersdetails_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
}

void ADChipDistribution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADChipDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADChipDistribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tradabledetails_.Clear();
  _impl_.restricteddetails_.Clear();
  _impl_.restrictedholddetails_.Clear();
  _impl_.largeshareholdersdetails_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.largeshareholderssharepercent_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.largeshareholderssharepercent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADChipDistribution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastPx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ShareTotalNumber = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.sharetotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsFinalSettlement = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.isfinalsettlement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalShare = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.totalshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ATotalShare = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.atotalshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AListedTotalShare = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.alistedtotalshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tradabledetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 TradableMCST = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.tradablemcst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableMaxCostOfPositions = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.tradablemaxcostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableMinCostOfPositions = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.tradablemincostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableProfitPercent = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.tradableprofitpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableChipDispersionPercent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.tradablechipdispersionpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradablePreProfitPercent = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.tradablepreprofitpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableProfitChangePercent = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.tradableprofitchangepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableCentralizedPercent = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.tradablecentralizedpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableCentralizedMaxCostOfPositions = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.tradablecentralizedmaxcostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableCentralizedMinCostOfPositions = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.tradablecentralizedmincostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableShareTotalNumber = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.tradablesharetotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradableSharePercent = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.tradablesharepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_restricteddetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 RestrictedMCST = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.restrictedmcst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RestrictedMaxCostOfPositions = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.restrictedmaxcostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RestrictedMinCostOfPositions = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.restrictedmincostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RestrictedShareTotalNumber = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.restrictedsharetotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RestrictedSharePercent = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.restrictedsharepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_restrictedholddetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_largeshareholdersdetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 LargeShareholdersMCST = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.largeshareholdersmcst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LargeShareholdersMaxCostOfPositions = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.largeshareholdersmaxcostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LargeShareholdersMinCostOfPositions = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.largeshareholdersmincostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LargeShareholdersShareTotalNumber = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.largeshareholderssharetotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LargeShareholdersSharePercent = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.largeshareholderssharepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADChipDistribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADChipDistribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // int32 ExchangeDate = 7;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 8;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_exchangetime(), target);
  }

  // int64 LastPx = 11;
  if (this->_internal_lastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_lastpx(), target);
  }

  // int64 PreClosePx = 12;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_preclosepx(), target);
  }

  // int64 ShareTotalNumber = 13;
  if (this->_internal_sharetotalnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_sharetotalnumber(), target);
  }

  // bool IsFinalSettlement = 14;
  if (this->_internal_isfinalsettlement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_isfinalsettlement(), target);
  }

  // int64 TotalShare = 15;
  if (this->_internal_totalshare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_totalshare(), target);
  }

  // int64 ATotalShare = 16;
  if (this->_internal_atotalshare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_atotalshare(), target);
  }

  // int64 AListedTotalShare = 17;
  if (this->_internal_alistedtotalshare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_alistedtotalshare(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tradabledetails_size()); i < n; i++) {
    const auto& repfield = this->_internal_tradabledetails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 TradableMCST = 21;
  if (this->_internal_tradablemcst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_tradablemcst(), target);
  }

  // int64 TradableMaxCostOfPositions = 22;
  if (this->_internal_tradablemaxcostofpositions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_tradablemaxcostofpositions(), target);
  }

  // int64 TradableMinCostOfPositions = 23;
  if (this->_internal_tradablemincostofpositions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_tradablemincostofpositions(), target);
  }

  // int64 TradableProfitPercent = 24;
  if (this->_internal_tradableprofitpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_tradableprofitpercent(), target);
  }

  // int64 TradableChipDispersionPercent = 25;
  if (this->_internal_tradablechipdispersionpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_tradablechipdispersionpercent(), target);
  }

  // int64 TradablePreProfitPercent = 26;
  if (this->_internal_tradablepreprofitpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_tradablepreprofitpercent(), target);
  }

  // int64 TradableProfitChangePercent = 27;
  if (this->_internal_tradableprofitchangepercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_tradableprofitchangepercent(), target);
  }

  // int64 TradableCentralizedPercent = 28;
  if (this->_internal_tradablecentralizedpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_tradablecentralizedpercent(), target);
  }

  // int64 TradableCentralizedMaxCostOfPositions = 29;
  if (this->_internal_tradablecentralizedmaxcostofpositions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_tradablecentralizedmaxcostofpositions(), target);
  }

  // int64 TradableCentralizedMinCostOfPositions = 30;
  if (this->_internal_tradablecentralizedmincostofpositions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(30, this->_internal_tradablecentralizedmincostofpositions(), target);
  }

  // int64 TradableShareTotalNumber = 31;
  if (this->_internal_tradablesharetotalnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_tradablesharetotalnumber(), target);
  }

  // int64 TradableSharePercent = 32;
  if (this->_internal_tradablesharepercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_tradablesharepercent(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_restricteddetails_size()); i < n; i++) {
    const auto& repfield = this->_internal_restricteddetails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 RestrictedMCST = 41;
  if (this->_internal_restrictedmcst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(41, this->_internal_restrictedmcst(), target);
  }

  // int64 RestrictedMaxCostOfPositions = 42;
  if (this->_internal_restrictedmaxcostofpositions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(42, this->_internal_restrictedmaxcostofpositions(), target);
  }

  // int64 RestrictedMinCostOfPositions = 43;
  if (this->_internal_restrictedmincostofpositions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(43, this->_internal_restrictedmincostofpositions(), target);
  }

  // int64 RestrictedShareTotalNumber = 46;
  if (this->_internal_restrictedsharetotalnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(46, this->_internal_restrictedsharetotalnumber(), target);
  }

  // int64 RestrictedSharePercent = 47;
  if (this->_internal_restrictedsharepercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(47, this->_internal_restrictedsharepercent(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_restrictedholddetails_size()); i < n; i++) {
    const auto& repfield = this->_internal_restrictedholddetails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_largeshareholdersdetails_size()); i < n; i++) {
    const auto& repfield = this->_internal_largeshareholdersdetails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 LargeShareholdersMCST = 51;
  if (this->_internal_largeshareholdersmcst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(51, this->_internal_largeshareholdersmcst(), target);
  }

  // int64 LargeShareholdersMaxCostOfPositions = 52;
  if (this->_internal_largeshareholdersmaxcostofpositions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(52, this->_internal_largeshareholdersmaxcostofpositions(), target);
  }

  // int64 LargeShareholdersMinCostOfPositions = 53;
  if (this->_internal_largeshareholdersmincostofpositions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(53, this->_internal_largeshareholdersmincostofpositions(), target);
  }

  // int64 LargeShareholdersShareTotalNumber = 54;
  if (this->_internal_largeshareholderssharetotalnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(54, this->_internal_largeshareholderssharetotalnumber(), target);
  }

  // int64 LargeShareholdersSharePercent = 55;
  if (this->_internal_largeshareholderssharepercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(55, this->_internal_largeshareholderssharepercent(), target);
  }

  // int32 DataMultiplePowerOf10 = 56;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(56, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADChipDistribution)
  return target;
}

size_t ADChipDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADChipDistribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  total_size += 2UL * this->_internal_tradabledetails_size();
  for (const auto& msg : this->_impl_.tradabledetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  total_size += 2UL * this->_internal_restricteddetails_size();
  for (const auto& msg : this->_impl_.restricteddetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  total_size += 2UL * this->_internal_restrictedholddetails_size();
  for (const auto& msg : this->_impl_.restrictedholddetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  total_size += 2UL * this->_internal_largeshareholdersdetails_size();
  for (const auto& msg : this->_impl_.largeshareholdersdetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ExchangeDate = 7;
  if (this->_internal_exchangedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 8;
  if (this->_internal_exchangetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangetime());
  }

  // int64 LastPx = 11;
  if (this->_internal_lastpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpx());
  }

  // int64 PreClosePx = 12;
  if (this->_internal_preclosepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preclosepx());
  }

  // int64 ShareTotalNumber = 13;
  if (this->_internal_sharetotalnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sharetotalnumber());
  }

  // int64 TotalShare = 15;
  if (this->_internal_totalshare() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalshare());
  }

  // int64 ATotalShare = 16;
  if (this->_internal_atotalshare() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_atotalshare());
  }

  // int64 AListedTotalShare = 17;
  if (this->_internal_alistedtotalshare() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_alistedtotalshare());
  }

  // int64 TradableMCST = 21;
  if (this->_internal_tradablemcst() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablemcst());
  }

  // int64 TradableMaxCostOfPositions = 22;
  if (this->_internal_tradablemaxcostofpositions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablemaxcostofpositions());
  }

  // int64 TradableMinCostOfPositions = 23;
  if (this->_internal_tradablemincostofpositions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablemincostofpositions());
  }

  // int64 TradableProfitPercent = 24;
  if (this->_internal_tradableprofitpercent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradableprofitpercent());
  }

  // int64 TradableChipDispersionPercent = 25;
  if (this->_internal_tradablechipdispersionpercent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablechipdispersionpercent());
  }

  // int64 TradablePreProfitPercent = 26;
  if (this->_internal_tradablepreprofitpercent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablepreprofitpercent());
  }

  // int64 TradableProfitChangePercent = 27;
  if (this->_internal_tradableprofitchangepercent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradableprofitchangepercent());
  }

  // int64 TradableCentralizedPercent = 28;
  if (this->_internal_tradablecentralizedpercent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablecentralizedpercent());
  }

  // int64 TradableCentralizedMaxCostOfPositions = 29;
  if (this->_internal_tradablecentralizedmaxcostofpositions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablecentralizedmaxcostofpositions());
  }

  // int64 TradableCentralizedMinCostOfPositions = 30;
  if (this->_internal_tradablecentralizedmincostofpositions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablecentralizedmincostofpositions());
  }

  // int64 TradableShareTotalNumber = 31;
  if (this->_internal_tradablesharetotalnumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablesharetotalnumber());
  }

  // int64 TradableSharePercent = 32;
  if (this->_internal_tradablesharepercent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradablesharepercent());
  }

  // bool IsFinalSettlement = 14;
  if (this->_internal_isfinalsettlement() != 0) {
    total_size += 1 + 1;
  }

  // int32 DataMultiplePowerOf10 = 56;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  // int64 RestrictedMCST = 41;
  if (this->_internal_restrictedmcst() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_restrictedmcst());
  }

  // int64 RestrictedMaxCostOfPositions = 42;
  if (this->_internal_restrictedmaxcostofpositions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_restrictedmaxcostofpositions());
  }

  // int64 RestrictedMinCostOfPositions = 43;
  if (this->_internal_restrictedmincostofpositions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_restrictedmincostofpositions());
  }

  // int64 RestrictedShareTotalNumber = 46;
  if (this->_internal_restrictedsharetotalnumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_restrictedsharetotalnumber());
  }

  // int64 RestrictedSharePercent = 47;
  if (this->_internal_restrictedsharepercent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_restrictedsharepercent());
  }

  // int64 LargeShareholdersMCST = 51;
  if (this->_internal_largeshareholdersmcst() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_largeshareholdersmcst());
  }

  // int64 LargeShareholdersMaxCostOfPositions = 52;
  if (this->_internal_largeshareholdersmaxcostofpositions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_largeshareholdersmaxcostofpositions());
  }

  // int64 LargeShareholdersMinCostOfPositions = 53;
  if (this->_internal_largeshareholdersmincostofpositions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_largeshareholdersmincostofpositions());
  }

  // int64 LargeShareholdersShareTotalNumber = 54;
  if (this->_internal_largeshareholderssharetotalnumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_largeshareholderssharetotalnumber());
  }

  // int64 LargeShareholdersSharePercent = 55;
  if (this->_internal_largeshareholderssharepercent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_largeshareholderssharepercent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADChipDistribution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADChipDistribution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADChipDistribution::GetClassData() const { return &_class_data_; }


void ADChipDistribution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADChipDistribution*>(&to_msg);
  auto& from = static_cast<const ADChipDistribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tradabledetails_.MergeFrom(from._impl_.tradabledetails_);
  _this->_impl_.restricteddetails_.MergeFrom(from._impl_.restricteddetails_);
  _this->_impl_.restrictedholddetails_.MergeFrom(from._impl_.restrictedholddetails_);
  _this->_impl_.largeshareholdersdetails_.MergeFrom(from._impl_.largeshareholdersdetails_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_lastpx() != 0) {
    _this->_internal_set_lastpx(from._internal_lastpx());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_sharetotalnumber() != 0) {
    _this->_internal_set_sharetotalnumber(from._internal_sharetotalnumber());
  }
  if (from._internal_totalshare() != 0) {
    _this->_internal_set_totalshare(from._internal_totalshare());
  }
  if (from._internal_atotalshare() != 0) {
    _this->_internal_set_atotalshare(from._internal_atotalshare());
  }
  if (from._internal_alistedtotalshare() != 0) {
    _this->_internal_set_alistedtotalshare(from._internal_alistedtotalshare());
  }
  if (from._internal_tradablemcst() != 0) {
    _this->_internal_set_tradablemcst(from._internal_tradablemcst());
  }
  if (from._internal_tradablemaxcostofpositions() != 0) {
    _this->_internal_set_tradablemaxcostofpositions(from._internal_tradablemaxcostofpositions());
  }
  if (from._internal_tradablemincostofpositions() != 0) {
    _this->_internal_set_tradablemincostofpositions(from._internal_tradablemincostofpositions());
  }
  if (from._internal_tradableprofitpercent() != 0) {
    _this->_internal_set_tradableprofitpercent(from._internal_tradableprofitpercent());
  }
  if (from._internal_tradablechipdispersionpercent() != 0) {
    _this->_internal_set_tradablechipdispersionpercent(from._internal_tradablechipdispersionpercent());
  }
  if (from._internal_tradablepreprofitpercent() != 0) {
    _this->_internal_set_tradablepreprofitpercent(from._internal_tradablepreprofitpercent());
  }
  if (from._internal_tradableprofitchangepercent() != 0) {
    _this->_internal_set_tradableprofitchangepercent(from._internal_tradableprofitchangepercent());
  }
  if (from._internal_tradablecentralizedpercent() != 0) {
    _this->_internal_set_tradablecentralizedpercent(from._internal_tradablecentralizedpercent());
  }
  if (from._internal_tradablecentralizedmaxcostofpositions() != 0) {
    _this->_internal_set_tradablecentralizedmaxcostofpositions(from._internal_tradablecentralizedmaxcostofpositions());
  }
  if (from._internal_tradablecentralizedmincostofpositions() != 0) {
    _this->_internal_set_tradablecentralizedmincostofpositions(from._internal_tradablecentralizedmincostofpositions());
  }
  if (from._internal_tradablesharetotalnumber() != 0) {
    _this->_internal_set_tradablesharetotalnumber(from._internal_tradablesharetotalnumber());
  }
  if (from._internal_tradablesharepercent() != 0) {
    _this->_internal_set_tradablesharepercent(from._internal_tradablesharepercent());
  }
  if (from._internal_isfinalsettlement() != 0) {
    _this->_internal_set_isfinalsettlement(from._internal_isfinalsettlement());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  if (from._internal_restrictedmcst() != 0) {
    _this->_internal_set_restrictedmcst(from._internal_restrictedmcst());
  }
  if (from._internal_restrictedmaxcostofpositions() != 0) {
    _this->_internal_set_restrictedmaxcostofpositions(from._internal_restrictedmaxcostofpositions());
  }
  if (from._internal_restrictedmincostofpositions() != 0) {
    _this->_internal_set_restrictedmincostofpositions(from._internal_restrictedmincostofpositions());
  }
  if (from._internal_restrictedsharetotalnumber() != 0) {
    _this->_internal_set_restrictedsharetotalnumber(from._internal_restrictedsharetotalnumber());
  }
  if (from._internal_restrictedsharepercent() != 0) {
    _this->_internal_set_restrictedsharepercent(from._internal_restrictedsharepercent());
  }
  if (from._internal_largeshareholdersmcst() != 0) {
    _this->_internal_set_largeshareholdersmcst(from._internal_largeshareholdersmcst());
  }
  if (from._internal_largeshareholdersmaxcostofpositions() != 0) {
    _this->_internal_set_largeshareholdersmaxcostofpositions(from._internal_largeshareholdersmaxcostofpositions());
  }
  if (from._internal_largeshareholdersmincostofpositions() != 0) {
    _this->_internal_set_largeshareholdersmincostofpositions(from._internal_largeshareholdersmincostofpositions());
  }
  if (from._internal_largeshareholderssharetotalnumber() != 0) {
    _this->_internal_set_largeshareholderssharetotalnumber(from._internal_largeshareholderssharetotalnumber());
  }
  if (from._internal_largeshareholderssharepercent() != 0) {
    _this->_internal_set_largeshareholderssharepercent(from._internal_largeshareholderssharepercent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADChipDistribution::CopyFrom(const ADChipDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADChipDistribution::IsInitialized() const {
  return true;
}

void ADChipDistribution::InternalSwap(ADChipDistribution* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tradabledetails_.InternalSwap(&other->_impl_.tradabledetails_);
  _impl_.restricteddetails_.InternalSwap(&other->_impl_.restricteddetails_);
  _impl_.restrictedholddetails_.InternalSwap(&other->_impl_.restrictedholddetails_);
  _impl_.largeshareholdersdetails_.InternalSwap(&other->_impl_.largeshareholdersdetails_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADChipDistribution, _impl_.largeshareholderssharepercent_)
      + sizeof(ADChipDistribution::_impl_.largeshareholderssharepercent_)
      - PROTOBUF_FIELD_OFFSET(ADChipDistribution, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADChipDistribution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADChipDistribution_2eproto_getter, &descriptor_table_ADChipDistribution_2eproto_once,
      file_level_metadata_ADChipDistribution_2eproto[0]);
}

// ===================================================================

class ADChipDistributionDetail::_Internal {
 public:
};

ADChipDistributionDetail::ADChipDistributionDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
}
ADChipDistributionDetail::ADChipDistributionDetail(const ADChipDistributionDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADChipDistributionDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shareholdername_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.numberofshares_){}
    , decltype(_impl_.numberofsharespercent_){}
    , decltype(_impl_.listeddate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.shareholdername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shareholdername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shareholdername().empty()) {
    _this->_impl_.shareholdername_.Set(from._internal_shareholdername(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.listeddate_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.listeddate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
}

inline void ADChipDistributionDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shareholdername_){}
    , decltype(_impl_.price_){int64_t{0}}
    , decltype(_impl_.numberofshares_){int64_t{0}}
    , decltype(_impl_.numberofsharespercent_){int64_t{0}}
    , decltype(_impl_.listeddate_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.shareholdername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shareholdername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADChipDistributionDetail::~ADChipDistributionDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADChipDistributionDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shareholdername_.Destroy();
}

void ADChipDistributionDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADChipDistributionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shareholdername_.ClearToEmpty();
  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.listeddate_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.listeddate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADChipDistributionDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NumberOfShares = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.numberofshares_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NumberOfSharesPercent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.numberofsharespercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ListedDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.listeddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ShareHolderName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_shareholdername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADChipDistributionDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Price = 1;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_price(), target);
  }

  // int64 NumberOfShares = 2;
  if (this->_internal_numberofshares() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_numberofshares(), target);
  }

  // int64 NumberOfSharesPercent = 3;
  if (this->_internal_numberofsharespercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_numberofsharespercent(), target);
  }

  // int64 ListedDate = 4;
  if (this->_internal_listeddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_listeddate(), target);
  }

  // string ShareHolderName = 5;
  if (!this->_internal_shareholdername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shareholdername().data(), static_cast<int>(this->_internal_shareholdername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_shareholdername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  return target;
}

size_t ADChipDistributionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ShareHolderName = 5;
  if (!this->_internal_shareholdername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shareholdername());
  }

  // int64 Price = 1;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_price());
  }

  // int64 NumberOfShares = 2;
  if (this->_internal_numberofshares() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numberofshares());
  }

  // int64 NumberOfSharesPercent = 3;
  if (this->_internal_numberofsharespercent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numberofsharespercent());
  }

  // int64 ListedDate = 4;
  if (this->_internal_listeddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_listeddate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADChipDistributionDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADChipDistributionDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADChipDistributionDetail::GetClassData() const { return &_class_data_; }


void ADChipDistributionDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADChipDistributionDetail*>(&to_msg);
  auto& from = static_cast<const ADChipDistributionDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_shareholdername().empty()) {
    _this->_internal_set_shareholdername(from._internal_shareholdername());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_numberofshares() != 0) {
    _this->_internal_set_numberofshares(from._internal_numberofshares());
  }
  if (from._internal_numberofsharespercent() != 0) {
    _this->_internal_set_numberofsharespercent(from._internal_numberofsharespercent());
  }
  if (from._internal_listeddate() != 0) {
    _this->_internal_set_listeddate(from._internal_listeddate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADChipDistributionDetail::CopyFrom(const ADChipDistributionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADChipDistributionDetail::IsInitialized() const {
  return true;
}

void ADChipDistributionDetail::InternalSwap(ADChipDistributionDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shareholdername_, lhs_arena,
      &other->_impl_.shareholdername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADChipDistributionDetail, _impl_.listeddate_)
      + sizeof(ADChipDistributionDetail::_impl_.listeddate_)
      - PROTOBUF_FIELD_OFFSET(ADChipDistributionDetail, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADChipDistributionDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADChipDistribution_2eproto_getter, &descriptor_table_ADChipDistribution_2eproto_once,
      file_level_metadata_ADChipDistribution_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADChipDistribution*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADChipDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADChipDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADChipDistributionDetail*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
