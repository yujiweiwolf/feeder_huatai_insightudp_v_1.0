// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCfetsFxQuote.proto

#include "MDCfetsFxQuote.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDCfetsFxQuote::MDCfetsFxQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securitysubtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transacttime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spotfxquote_)*/nullptr
  , /*decltype(_impl_.forwardfxquote_)*/nullptr
  , /*decltype(_impl_.nondeliverableforwardsfxquote_)*/nullptr
  , /*decltype(_impl_.swapfxquote_)*/nullptr
  , /*decltype(_impl_.optionfxquote_)*/nullptr
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.forexquotetype_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDCfetsFxQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDCfetsFxQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDCfetsFxQuoteDefaultTypeInternal() {}
  union {
    MDCfetsFxQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDCfetsFxQuoteDefaultTypeInternal _MDCfetsFxQuote_default_instance_;
PROTOBUF_CONSTEXPR SwpSptNdfFowFxQuote::SwpSptNdfFowFxQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bestratedatebuy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bestratetimebuy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bestratedatesell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bestratetimesell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidproviderbuy1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidproviderbuy2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidproviderbuy3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidproviderbuy4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidproviderbuy5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidprovidersell1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidprovidersell2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidprovidersell3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidprovidersell4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rateliquidprovidersell5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legsign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bestratebuy_)*/int64_t{0}
  , /*decltype(_impl_.bestratesell_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwpSptNdfFowFxQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwpSptNdfFowFxQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwpSptNdfFowFxQuoteDefaultTypeInternal() {}
  union {
    SwpSptNdfFowFxQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwpSptNdfFowFxQuoteDefaultTypeInternal _SwpSptNdfFowFxQuote_default_instance_;
PROTOBUF_CONSTEXPR OptionFxQuote::OptionFxQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bestratedatebuy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bestratetimebuy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bestratedatesell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bestratetimesell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.volatilitysurface_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tenorbuy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tenorsell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.makerinstitutionbuy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.makerinstitutionsell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bestratebuy_)*/int64_t{0}
  , /*decltype(_impl_.bestratesell_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionFxQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionFxQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionFxQuoteDefaultTypeInternal() {}
  union {
    OptionFxQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionFxQuoteDefaultTypeInternal _OptionFxQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDCfetsFxQuote_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDCfetsFxQuote_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDCfetsFxQuote_2eproto = nullptr;

const uint32_t TableStruct_MDCfetsFxQuote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.securitysubtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.forexquotetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.spotfxquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.forwardfxquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.nondeliverableforwardsfxquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.swapfxquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.optionfxquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxQuote, _impl_.transacttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.bestratedatebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.bestratetimebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.bestratedatesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.bestratetimesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.bestratebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.bestratesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidproviderbuy1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidproviderbuy2_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidproviderbuy3_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidproviderbuy4_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidproviderbuy5_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidprovidersell1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidprovidersell2_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidprovidersell3_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidprovidersell4_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.rateliquidprovidersell5_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote, _impl_.legsign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.bestratedatebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.bestratetimebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.bestratedatesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.bestratetimesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.bestratebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.bestratesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.volatilitysurface_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.tenorbuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.tenorsell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.makerinstitutionbuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxQuote, _impl_.makerinstitutionsell_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDCfetsFxQuote)},
  { 21, -1, -1, sizeof(::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote)},
  { 44, -1, -1, sizeof(::com::htsc::mdc::insight::model::OptionFxQuote)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDCfetsFxQuote_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SwpSptNdfFowFxQuote_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_OptionFxQuote_default_instance_._instance,
};

const char descriptor_table_protodef_MDCfetsFxQuote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024MDCfetsFxQuote.proto\022\032com.htsc.mdc.ins"
  "ight.model\032\027ESecurityIDSource.proto\032\023ESe"
  "curityType.proto\"\256\005\n\016MDCfetsFxQuote\022\026\n\016H"
  "TSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006M"
  "DTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020se"
  "curityIDSource\030\005 \001(\0162%.com.htsc.mdc.mode"
  "l.ESecurityIDSource\0227\n\014securityType\030\006 \001("
  "\0162!.com.htsc.mdc.model.ESecurityType\022\027\n\017"
  "SecuritySubType\030\007 \001(\t\022\026\n\016ForexQuoteType\030"
  "\010 \001(\005\022D\n\013spotFxQuote\030\t \001(\0132/.com.htsc.md"
  "c.insight.model.SwpSptNdfFowFxQuote\022G\n\016f"
  "orwardFxQuote\030\n \001(\0132/.com.htsc.mdc.insig"
  "ht.model.SwpSptNdfFowFxQuote\022V\n\035nonDeliv"
  "erableForwardsFxQuote\030\013 \001(\0132/.com.htsc.m"
  "dc.insight.model.SwpSptNdfFowFxQuote\022D\n\013"
  "swapFxQuote\030\014 \001(\0132/.com.htsc.mdc.insight"
  ".model.SwpSptNdfFowFxQuote\022@\n\roptionFxQu"
  "ote\030\r \001(\0132).com.htsc.mdc.insight.model.O"
  "ptionFxQuote\022\035\n\025DataMultiplePowerOf10\030\016 "
  "\001(\005\022\024\n\014TransactTime\030\017 \001(\t\"\374\003\n\023SwpSptNdfF"
  "owFxQuote\022\027\n\017BestRateDateBuy\030\001 \001(\t\022\027\n\017Be"
  "stRateTimeBuy\030\002 \001(\t\022\030\n\020BestRateDateSell\030"
  "\003 \001(\t\022\030\n\020BestRateTimeSell\030\004 \001(\t\022\023\n\013BestR"
  "ateBuy\030\005 \001(\003\022\024\n\014BestRateSell\030\006 \001(\003\022\036\n\026Ra"
  "teLiquidProviderBuy1\030\007 \001(\t\022\036\n\026RateLiquid"
  "ProviderBuy2\030\010 \001(\t\022\036\n\026RateLiquidProvider"
  "Buy3\030\t \001(\t\022\036\n\026RateLiquidProviderBuy4\030\n \001"
  "(\t\022\036\n\026RateLiquidProviderBuy5\030\013 \001(\t\022\037\n\027Ra"
  "teLiquidProviderSell1\030\014 \001(\t\022\037\n\027RateLiqui"
  "dProviderSell2\030\r \001(\t\022\037\n\027RateLiquidProvid"
  "erSell3\030\016 \001(\t\022\037\n\027RateLiquidProviderSell4"
  "\030\017 \001(\t\022\037\n\027RateLiquidProviderSell5\030\020 \001(\t\022"
  "\017\n\007LegSign\030\021 \001(\t\"\233\002\n\rOptionFxQuote\022\027\n\017Be"
  "stRateDateBuy\030\001 \001(\t\022\027\n\017BestRateTimeBuy\030\002"
  " \001(\t\022\030\n\020BestRateDateSell\030\003 \001(\t\022\030\n\020BestRa"
  "teTimeSell\030\004 \001(\t\022\023\n\013BestRateBuy\030\005 \001(\003\022\024\n"
  "\014BestRateSell\030\006 \001(\003\022\031\n\021VolatilitySurface"
  "\030\007 \001(\t\022\020\n\010TenorBuy\030\010 \001(\t\022\021\n\tTenorSell\030\t "
  "\001(\t\022\033\n\023MakerInstitutionBuy\030\n \001(\t\022\034\n\024Make"
  "rInstitutionSell\030\013 \001(\tB7\n\032com.htsc.mdc.i"
  "nsight.modelB\024MDCfetsFxQuoteProtosH\001\240\001\001b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDCfetsFxQuote_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDCfetsFxQuote_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDCfetsFxQuote_2eproto = {
    false, false, 1647, descriptor_table_protodef_MDCfetsFxQuote_2eproto,
    "MDCfetsFxQuote.proto",
    &descriptor_table_MDCfetsFxQuote_2eproto_once, descriptor_table_MDCfetsFxQuote_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_MDCfetsFxQuote_2eproto::offsets,
    file_level_metadata_MDCfetsFxQuote_2eproto, file_level_enum_descriptors_MDCfetsFxQuote_2eproto,
    file_level_service_descriptors_MDCfetsFxQuote_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDCfetsFxQuote_2eproto_getter() {
  return &descriptor_table_MDCfetsFxQuote_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDCfetsFxQuote_2eproto(&descriptor_table_MDCfetsFxQuote_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCfetsFxQuote::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& spotfxquote(const MDCfetsFxQuote* msg);
  static const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& forwardfxquote(const MDCfetsFxQuote* msg);
  static const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& nondeliverableforwardsfxquote(const MDCfetsFxQuote* msg);
  static const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote& swapfxquote(const MDCfetsFxQuote* msg);
  static const ::com::htsc::mdc::insight::model::OptionFxQuote& optionfxquote(const MDCfetsFxQuote* msg);
};

const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote&
MDCfetsFxQuote::_Internal::spotfxquote(const MDCfetsFxQuote* msg) {
  return *msg->_impl_.spotfxquote_;
}
const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote&
MDCfetsFxQuote::_Internal::forwardfxquote(const MDCfetsFxQuote* msg) {
  return *msg->_impl_.forwardfxquote_;
}
const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote&
MDCfetsFxQuote::_Internal::nondeliverableforwardsfxquote(const MDCfetsFxQuote* msg) {
  return *msg->_impl_.nondeliverableforwardsfxquote_;
}
const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote&
MDCfetsFxQuote::_Internal::swapfxquote(const MDCfetsFxQuote* msg) {
  return *msg->_impl_.swapfxquote_;
}
const ::com::htsc::mdc::insight::model::OptionFxQuote&
MDCfetsFxQuote::_Internal::optionfxquote(const MDCfetsFxQuote* msg) {
  return *msg->_impl_.optionfxquote_;
}
MDCfetsFxQuote::MDCfetsFxQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDCfetsFxQuote)
}
MDCfetsFxQuote::MDCfetsFxQuote(const MDCfetsFxQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDCfetsFxQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securitysubtype_){}
    , decltype(_impl_.transacttime_){}
    , decltype(_impl_.spotfxquote_){nullptr}
    , decltype(_impl_.forwardfxquote_){nullptr}
    , decltype(_impl_.nondeliverableforwardsfxquote_){nullptr}
    , decltype(_impl_.swapfxquote_){nullptr}
    , decltype(_impl_.optionfxquote_){nullptr}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.forexquotetype_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securitysubtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_securitysubtype().empty()) {
    _this->_impl_.securitysubtype_.Set(from._internal_securitysubtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transacttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transacttime().empty()) {
    _this->_impl_.transacttime_.Set(from._internal_transacttime(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spotfxquote()) {
    _this->_impl_.spotfxquote_ = new ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote(*from._impl_.spotfxquote_);
  }
  if (from._internal_has_forwardfxquote()) {
    _this->_impl_.forwardfxquote_ = new ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote(*from._impl_.forwardfxquote_);
  }
  if (from._internal_has_nondeliverableforwardsfxquote()) {
    _this->_impl_.nondeliverableforwardsfxquote_ = new ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote(*from._impl_.nondeliverableforwardsfxquote_);
  }
  if (from._internal_has_swapfxquote()) {
    _this->_impl_.swapfxquote_ = new ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote(*from._impl_.swapfxquote_);
  }
  if (from._internal_has_optionfxquote()) {
    _this->_impl_.optionfxquote_ = new ::com::htsc::mdc::insight::model::OptionFxQuote(*from._impl_.optionfxquote_);
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCfetsFxQuote)
}

inline void MDCfetsFxQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securitysubtype_){}
    , decltype(_impl_.transacttime_){}
    , decltype(_impl_.spotfxquote_){nullptr}
    , decltype(_impl_.forwardfxquote_){nullptr}
    , decltype(_impl_.nondeliverableforwardsfxquote_){nullptr}
    , decltype(_impl_.swapfxquote_){nullptr}
    , decltype(_impl_.optionfxquote_){nullptr}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.forexquotetype_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securitysubtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transacttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDCfetsFxQuote::~MDCfetsFxQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCfetsFxQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDCfetsFxQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.securitysubtype_.Destroy();
  _impl_.transacttime_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spotfxquote_;
  if (this != internal_default_instance()) delete _impl_.forwardfxquote_;
  if (this != internal_default_instance()) delete _impl_.nondeliverableforwardsfxquote_;
  if (this != internal_default_instance()) delete _impl_.swapfxquote_;
  if (this != internal_default_instance()) delete _impl_.optionfxquote_;
}

void MDCfetsFxQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDCfetsFxQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCfetsFxQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.securitysubtype_.ClearToEmpty();
  _impl_.transacttime_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spotfxquote_ != nullptr) {
    delete _impl_.spotfxquote_;
  }
  _impl_.spotfxquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forwardfxquote_ != nullptr) {
    delete _impl_.forwardfxquote_;
  }
  _impl_.forwardfxquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nondeliverableforwardsfxquote_ != nullptr) {
    delete _impl_.nondeliverableforwardsfxquote_;
  }
  _impl_.nondeliverableforwardsfxquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.swapfxquote_ != nullptr) {
    delete _impl_.swapfxquote_;
  }
  _impl_.swapfxquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.optionfxquote_ != nullptr) {
    delete _impl_.optionfxquote_;
  }
  _impl_.optionfxquote_ = nullptr;
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDCfetsFxQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsFxQuote.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string SecuritySubType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_securitysubtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsFxQuote.SecuritySubType"));
        } else
          goto handle_unusual;
        continue;
      // int32 ForexQuoteType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.forexquotetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote spotFxQuote = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_spotfxquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote forwardFxQuote = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_forwardfxquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote nonDeliverableForwardsFxQuote = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_nondeliverableforwardsfxquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote swapFxQuote = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapfxquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.OptionFxQuote optionFxQuote = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_optionfxquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TransactTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsFxQuote.TransactTime"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDCfetsFxQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCfetsFxQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsFxQuote.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // string SecuritySubType = 7;
  if (!this->_internal_securitysubtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securitysubtype().data(), static_cast<int>(this->_internal_securitysubtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsFxQuote.SecuritySubType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_securitysubtype(), target);
  }

  // int32 ForexQuoteType = 8;
  if (this->_internal_forexquotetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_forexquotetype(), target);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote spotFxQuote = 9;
  if (this->_internal_has_spotfxquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::spotfxquote(this),
        _Internal::spotfxquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote forwardFxQuote = 10;
  if (this->_internal_has_forwardfxquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::forwardfxquote(this),
        _Internal::forwardfxquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote nonDeliverableForwardsFxQuote = 11;
  if (this->_internal_has_nondeliverableforwardsfxquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::nondeliverableforwardsfxquote(this),
        _Internal::nondeliverableforwardsfxquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote swapFxQuote = 12;
  if (this->_internal_has_swapfxquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::swapfxquote(this),
        _Internal::swapfxquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.OptionFxQuote optionFxQuote = 13;
  if (this->_internal_has_optionfxquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::optionfxquote(this),
        _Internal::optionfxquote(this).GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 14;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_datamultiplepowerof10(), target);
  }

  // string TransactTime = 15;
  if (!this->_internal_transacttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsFxQuote.TransactTime");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_transacttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCfetsFxQuote)
  return target;
}

size_t MDCfetsFxQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCfetsFxQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string SecuritySubType = 7;
  if (!this->_internal_securitysubtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securitysubtype());
  }

  // string TransactTime = 15;
  if (!this->_internal_transacttime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote spotFxQuote = 9;
  if (this->_internal_has_spotfxquote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spotfxquote_);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote forwardFxQuote = 10;
  if (this->_internal_has_forwardfxquote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forwardfxquote_);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote nonDeliverableForwardsFxQuote = 11;
  if (this->_internal_has_nondeliverableforwardsfxquote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nondeliverableforwardsfxquote_);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote swapFxQuote = 12;
  if (this->_internal_has_swapfxquote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.swapfxquote_);
  }

  // .com.htsc.mdc.insight.model.OptionFxQuote optionFxQuote = 13;
  if (this->_internal_has_optionfxquote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optionfxquote_);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ForexQuoteType = 8;
  if (this->_internal_forexquotetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_forexquotetype());
  }

  // int32 DataMultiplePowerOf10 = 14;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDCfetsFxQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDCfetsFxQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDCfetsFxQuote::GetClassData() const { return &_class_data_; }


void MDCfetsFxQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDCfetsFxQuote*>(&to_msg);
  auto& from = static_cast<const MDCfetsFxQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCfetsFxQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_securitysubtype().empty()) {
    _this->_internal_set_securitysubtype(from._internal_securitysubtype());
  }
  if (!from._internal_transacttime().empty()) {
    _this->_internal_set_transacttime(from._internal_transacttime());
  }
  if (from._internal_has_spotfxquote()) {
    _this->_internal_mutable_spotfxquote()->::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote::MergeFrom(
        from._internal_spotfxquote());
  }
  if (from._internal_has_forwardfxquote()) {
    _this->_internal_mutable_forwardfxquote()->::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote::MergeFrom(
        from._internal_forwardfxquote());
  }
  if (from._internal_has_nondeliverableforwardsfxquote()) {
    _this->_internal_mutable_nondeliverableforwardsfxquote()->::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote::MergeFrom(
        from._internal_nondeliverableforwardsfxquote());
  }
  if (from._internal_has_swapfxquote()) {
    _this->_internal_mutable_swapfxquote()->::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote::MergeFrom(
        from._internal_swapfxquote());
  }
  if (from._internal_has_optionfxquote()) {
    _this->_internal_mutable_optionfxquote()->::com::htsc::mdc::insight::model::OptionFxQuote::MergeFrom(
        from._internal_optionfxquote());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_forexquotetype() != 0) {
    _this->_internal_set_forexquotetype(from._internal_forexquotetype());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDCfetsFxQuote::CopyFrom(const MDCfetsFxQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCfetsFxQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDCfetsFxQuote::IsInitialized() const {
  return true;
}

void MDCfetsFxQuote::InternalSwap(MDCfetsFxQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securitysubtype_, lhs_arena,
      &other->_impl_.securitysubtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transacttime_, lhs_arena,
      &other->_impl_.transacttime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDCfetsFxQuote, _impl_.datamultiplepowerof10_)
      + sizeof(MDCfetsFxQuote::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDCfetsFxQuote, _impl_.spotfxquote_)>(
          reinterpret_cast<char*>(&_impl_.spotfxquote_),
          reinterpret_cast<char*>(&other->_impl_.spotfxquote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDCfetsFxQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsFxQuote_2eproto_getter, &descriptor_table_MDCfetsFxQuote_2eproto_once,
      file_level_metadata_MDCfetsFxQuote_2eproto[0]);
}

// ===================================================================

class SwpSptNdfFowFxQuote::_Internal {
 public:
};

SwpSptNdfFowFxQuote::SwpSptNdfFowFxQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
}
SwpSptNdfFowFxQuote::SwpSptNdfFowFxQuote(const SwpSptNdfFowFxQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwpSptNdfFowFxQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bestratedatebuy_){}
    , decltype(_impl_.bestratetimebuy_){}
    , decltype(_impl_.bestratedatesell_){}
    , decltype(_impl_.bestratetimesell_){}
    , decltype(_impl_.rateliquidproviderbuy1_){}
    , decltype(_impl_.rateliquidproviderbuy2_){}
    , decltype(_impl_.rateliquidproviderbuy3_){}
    , decltype(_impl_.rateliquidproviderbuy4_){}
    , decltype(_impl_.rateliquidproviderbuy5_){}
    , decltype(_impl_.rateliquidprovidersell1_){}
    , decltype(_impl_.rateliquidprovidersell2_){}
    , decltype(_impl_.rateliquidprovidersell3_){}
    , decltype(_impl_.rateliquidprovidersell4_){}
    , decltype(_impl_.rateliquidprovidersell5_){}
    , decltype(_impl_.legsign_){}
    , decltype(_impl_.bestratebuy_){}
    , decltype(_impl_.bestratesell_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bestratedatebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratedatebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bestratedatebuy().empty()) {
    _this->_impl_.bestratedatebuy_.Set(from._internal_bestratedatebuy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bestratetimebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratetimebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bestratetimebuy().empty()) {
    _this->_impl_.bestratetimebuy_.Set(from._internal_bestratetimebuy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bestratedatesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratedatesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bestratedatesell().empty()) {
    _this->_impl_.bestratedatesell_.Set(from._internal_bestratedatesell(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bestratetimesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratetimesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bestratetimesell().empty()) {
    _this->_impl_.bestratetimesell_.Set(from._internal_bestratetimesell(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidproviderbuy1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidproviderbuy1().empty()) {
    _this->_impl_.rateliquidproviderbuy1_.Set(from._internal_rateliquidproviderbuy1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidproviderbuy2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidproviderbuy2().empty()) {
    _this->_impl_.rateliquidproviderbuy2_.Set(from._internal_rateliquidproviderbuy2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidproviderbuy3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidproviderbuy3().empty()) {
    _this->_impl_.rateliquidproviderbuy3_.Set(from._internal_rateliquidproviderbuy3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidproviderbuy4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidproviderbuy4().empty()) {
    _this->_impl_.rateliquidproviderbuy4_.Set(from._internal_rateliquidproviderbuy4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidproviderbuy5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidproviderbuy5().empty()) {
    _this->_impl_.rateliquidproviderbuy5_.Set(from._internal_rateliquidproviderbuy5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidprovidersell1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidprovidersell1().empty()) {
    _this->_impl_.rateliquidprovidersell1_.Set(from._internal_rateliquidprovidersell1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidprovidersell2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidprovidersell2().empty()) {
    _this->_impl_.rateliquidprovidersell2_.Set(from._internal_rateliquidprovidersell2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidprovidersell3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidprovidersell3().empty()) {
    _this->_impl_.rateliquidprovidersell3_.Set(from._internal_rateliquidprovidersell3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidprovidersell4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidprovidersell4().empty()) {
    _this->_impl_.rateliquidprovidersell4_.Set(from._internal_rateliquidprovidersell4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rateliquidprovidersell5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rateliquidprovidersell5().empty()) {
    _this->_impl_.rateliquidprovidersell5_.Set(from._internal_rateliquidprovidersell5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.legsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_legsign().empty()) {
    _this->_impl_.legsign_.Set(from._internal_legsign(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bestratebuy_, &from._impl_.bestratebuy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bestratesell_) -
    reinterpret_cast<char*>(&_impl_.bestratebuy_)) + sizeof(_impl_.bestratesell_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
}

inline void SwpSptNdfFowFxQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bestratedatebuy_){}
    , decltype(_impl_.bestratetimebuy_){}
    , decltype(_impl_.bestratedatesell_){}
    , decltype(_impl_.bestratetimesell_){}
    , decltype(_impl_.rateliquidproviderbuy1_){}
    , decltype(_impl_.rateliquidproviderbuy2_){}
    , decltype(_impl_.rateliquidproviderbuy3_){}
    , decltype(_impl_.rateliquidproviderbuy4_){}
    , decltype(_impl_.rateliquidproviderbuy5_){}
    , decltype(_impl_.rateliquidprovidersell1_){}
    , decltype(_impl_.rateliquidprovidersell2_){}
    , decltype(_impl_.rateliquidprovidersell3_){}
    , decltype(_impl_.rateliquidprovidersell4_){}
    , decltype(_impl_.rateliquidprovidersell5_){}
    , decltype(_impl_.legsign_){}
    , decltype(_impl_.bestratebuy_){int64_t{0}}
    , decltype(_impl_.bestratesell_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bestratedatebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratedatebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bestratetimebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratetimebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bestratedatesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratedatesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bestratetimesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratetimesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidproviderbuy1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidproviderbuy2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidproviderbuy3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidproviderbuy4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidproviderbuy5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidproviderbuy5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidprovidersell1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidprovidersell2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidprovidersell3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidprovidersell4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rateliquidprovidersell5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rateliquidprovidersell5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.legsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SwpSptNdfFowFxQuote::~SwpSptNdfFowFxQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwpSptNdfFowFxQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bestratedatebuy_.Destroy();
  _impl_.bestratetimebuy_.Destroy();
  _impl_.bestratedatesell_.Destroy();
  _impl_.bestratetimesell_.Destroy();
  _impl_.rateliquidproviderbuy1_.Destroy();
  _impl_.rateliquidproviderbuy2_.Destroy();
  _impl_.rateliquidproviderbuy3_.Destroy();
  _impl_.rateliquidproviderbuy4_.Destroy();
  _impl_.rateliquidproviderbuy5_.Destroy();
  _impl_.rateliquidprovidersell1_.Destroy();
  _impl_.rateliquidprovidersell2_.Destroy();
  _impl_.rateliquidprovidersell3_.Destroy();
  _impl_.rateliquidprovidersell4_.Destroy();
  _impl_.rateliquidprovidersell5_.Destroy();
  _impl_.legsign_.Destroy();
}

void SwpSptNdfFowFxQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwpSptNdfFowFxQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bestratedatebuy_.ClearToEmpty();
  _impl_.bestratetimebuy_.ClearToEmpty();
  _impl_.bestratedatesell_.ClearToEmpty();
  _impl_.bestratetimesell_.ClearToEmpty();
  _impl_.rateliquidproviderbuy1_.ClearToEmpty();
  _impl_.rateliquidproviderbuy2_.ClearToEmpty();
  _impl_.rateliquidproviderbuy3_.ClearToEmpty();
  _impl_.rateliquidproviderbuy4_.ClearToEmpty();
  _impl_.rateliquidproviderbuy5_.ClearToEmpty();
  _impl_.rateliquidprovidersell1_.ClearToEmpty();
  _impl_.rateliquidprovidersell2_.ClearToEmpty();
  _impl_.rateliquidprovidersell3_.ClearToEmpty();
  _impl_.rateliquidprovidersell4_.ClearToEmpty();
  _impl_.rateliquidprovidersell5_.ClearToEmpty();
  _impl_.legsign_.ClearToEmpty();
  ::memset(&_impl_.bestratebuy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bestratesell_) -
      reinterpret_cast<char*>(&_impl_.bestratebuy_)) + sizeof(_impl_.bestratesell_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwpSptNdfFowFxQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BestRateDateBuy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bestratedatebuy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateBuy"));
        } else
          goto handle_unusual;
        continue;
      // string BestRateTimeBuy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bestratetimebuy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeBuy"));
        } else
          goto handle_unusual;
        continue;
      // string BestRateDateSell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bestratedatesell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateSell"));
        } else
          goto handle_unusual;
        continue;
      // string BestRateTimeSell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bestratetimesell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeSell"));
        } else
          goto handle_unusual;
        continue;
      // int64 BestRateBuy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bestratebuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BestRateSell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bestratesell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderBuy1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rateliquidproviderbuy1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy1"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderBuy2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_rateliquidproviderbuy2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy2"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderBuy3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_rateliquidproviderbuy3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy3"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderBuy4 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_rateliquidproviderbuy4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy4"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderBuy5 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_rateliquidproviderbuy5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy5"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderSell1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_rateliquidprovidersell1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell1"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderSell2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_rateliquidprovidersell2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell2"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderSell3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_rateliquidprovidersell3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell3"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderSell4 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_rateliquidprovidersell4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell4"));
        } else
          goto handle_unusual;
        continue;
      // string RateLiquidProviderSell5 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_rateliquidprovidersell5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell5"));
        } else
          goto handle_unusual;
        continue;
      // string LegSign = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_legsign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.LegSign"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwpSptNdfFowFxQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BestRateDateBuy = 1;
  if (!this->_internal_bestratedatebuy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestratedatebuy().data(), static_cast<int>(this->_internal_bestratedatebuy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateBuy");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bestratedatebuy(), target);
  }

  // string BestRateTimeBuy = 2;
  if (!this->_internal_bestratetimebuy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestratetimebuy().data(), static_cast<int>(this->_internal_bestratetimebuy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeBuy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bestratetimebuy(), target);
  }

  // string BestRateDateSell = 3;
  if (!this->_internal_bestratedatesell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestratedatesell().data(), static_cast<int>(this->_internal_bestratedatesell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateDateSell");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bestratedatesell(), target);
  }

  // string BestRateTimeSell = 4;
  if (!this->_internal_bestratetimesell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestratetimesell().data(), static_cast<int>(this->_internal_bestratetimesell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.BestRateTimeSell");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bestratetimesell(), target);
  }

  // int64 BestRateBuy = 5;
  if (this->_internal_bestratebuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_bestratebuy(), target);
  }

  // int64 BestRateSell = 6;
  if (this->_internal_bestratesell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_bestratesell(), target);
  }

  // string RateLiquidProviderBuy1 = 7;
  if (!this->_internal_rateliquidproviderbuy1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidproviderbuy1().data(), static_cast<int>(this->_internal_rateliquidproviderbuy1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy1");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_rateliquidproviderbuy1(), target);
  }

  // string RateLiquidProviderBuy2 = 8;
  if (!this->_internal_rateliquidproviderbuy2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidproviderbuy2().data(), static_cast<int>(this->_internal_rateliquidproviderbuy2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy2");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rateliquidproviderbuy2(), target);
  }

  // string RateLiquidProviderBuy3 = 9;
  if (!this->_internal_rateliquidproviderbuy3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidproviderbuy3().data(), static_cast<int>(this->_internal_rateliquidproviderbuy3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy3");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_rateliquidproviderbuy3(), target);
  }

  // string RateLiquidProviderBuy4 = 10;
  if (!this->_internal_rateliquidproviderbuy4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidproviderbuy4().data(), static_cast<int>(this->_internal_rateliquidproviderbuy4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy4");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_rateliquidproviderbuy4(), target);
  }

  // string RateLiquidProviderBuy5 = 11;
  if (!this->_internal_rateliquidproviderbuy5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidproviderbuy5().data(), static_cast<int>(this->_internal_rateliquidproviderbuy5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderBuy5");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_rateliquidproviderbuy5(), target);
  }

  // string RateLiquidProviderSell1 = 12;
  if (!this->_internal_rateliquidprovidersell1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidprovidersell1().data(), static_cast<int>(this->_internal_rateliquidprovidersell1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell1");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_rateliquidprovidersell1(), target);
  }

  // string RateLiquidProviderSell2 = 13;
  if (!this->_internal_rateliquidprovidersell2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidprovidersell2().data(), static_cast<int>(this->_internal_rateliquidprovidersell2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell2");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_rateliquidprovidersell2(), target);
  }

  // string RateLiquidProviderSell3 = 14;
  if (!this->_internal_rateliquidprovidersell3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidprovidersell3().data(), static_cast<int>(this->_internal_rateliquidprovidersell3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell3");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_rateliquidprovidersell3(), target);
  }

  // string RateLiquidProviderSell4 = 15;
  if (!this->_internal_rateliquidprovidersell4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidprovidersell4().data(), static_cast<int>(this->_internal_rateliquidprovidersell4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell4");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_rateliquidprovidersell4(), target);
  }

  // string RateLiquidProviderSell5 = 16;
  if (!this->_internal_rateliquidprovidersell5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rateliquidprovidersell5().data(), static_cast<int>(this->_internal_rateliquidprovidersell5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.RateLiquidProviderSell5");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_rateliquidprovidersell5(), target);
  }

  // string LegSign = 17;
  if (!this->_internal_legsign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_legsign().data(), static_cast<int>(this->_internal_legsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote.LegSign");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_legsign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
  return target;
}

size_t SwpSptNdfFowFxQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BestRateDateBuy = 1;
  if (!this->_internal_bestratedatebuy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestratedatebuy());
  }

  // string BestRateTimeBuy = 2;
  if (!this->_internal_bestratetimebuy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestratetimebuy());
  }

  // string BestRateDateSell = 3;
  if (!this->_internal_bestratedatesell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestratedatesell());
  }

  // string BestRateTimeSell = 4;
  if (!this->_internal_bestratetimesell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestratetimesell());
  }

  // string RateLiquidProviderBuy1 = 7;
  if (!this->_internal_rateliquidproviderbuy1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidproviderbuy1());
  }

  // string RateLiquidProviderBuy2 = 8;
  if (!this->_internal_rateliquidproviderbuy2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidproviderbuy2());
  }

  // string RateLiquidProviderBuy3 = 9;
  if (!this->_internal_rateliquidproviderbuy3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidproviderbuy3());
  }

  // string RateLiquidProviderBuy4 = 10;
  if (!this->_internal_rateliquidproviderbuy4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidproviderbuy4());
  }

  // string RateLiquidProviderBuy5 = 11;
  if (!this->_internal_rateliquidproviderbuy5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidproviderbuy5());
  }

  // string RateLiquidProviderSell1 = 12;
  if (!this->_internal_rateliquidprovidersell1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidprovidersell1());
  }

  // string RateLiquidProviderSell2 = 13;
  if (!this->_internal_rateliquidprovidersell2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidprovidersell2());
  }

  // string RateLiquidProviderSell3 = 14;
  if (!this->_internal_rateliquidprovidersell3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidprovidersell3());
  }

  // string RateLiquidProviderSell4 = 15;
  if (!this->_internal_rateliquidprovidersell4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidprovidersell4());
  }

  // string RateLiquidProviderSell5 = 16;
  if (!this->_internal_rateliquidprovidersell5().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rateliquidprovidersell5());
  }

  // string LegSign = 17;
  if (!this->_internal_legsign().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_legsign());
  }

  // int64 BestRateBuy = 5;
  if (this->_internal_bestratebuy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bestratebuy());
  }

  // int64 BestRateSell = 6;
  if (this->_internal_bestratesell() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bestratesell());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwpSptNdfFowFxQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwpSptNdfFowFxQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwpSptNdfFowFxQuote::GetClassData() const { return &_class_data_; }


void SwpSptNdfFowFxQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwpSptNdfFowFxQuote*>(&to_msg);
  auto& from = static_cast<const SwpSptNdfFowFxQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bestratedatebuy().empty()) {
    _this->_internal_set_bestratedatebuy(from._internal_bestratedatebuy());
  }
  if (!from._internal_bestratetimebuy().empty()) {
    _this->_internal_set_bestratetimebuy(from._internal_bestratetimebuy());
  }
  if (!from._internal_bestratedatesell().empty()) {
    _this->_internal_set_bestratedatesell(from._internal_bestratedatesell());
  }
  if (!from._internal_bestratetimesell().empty()) {
    _this->_internal_set_bestratetimesell(from._internal_bestratetimesell());
  }
  if (!from._internal_rateliquidproviderbuy1().empty()) {
    _this->_internal_set_rateliquidproviderbuy1(from._internal_rateliquidproviderbuy1());
  }
  if (!from._internal_rateliquidproviderbuy2().empty()) {
    _this->_internal_set_rateliquidproviderbuy2(from._internal_rateliquidproviderbuy2());
  }
  if (!from._internal_rateliquidproviderbuy3().empty()) {
    _this->_internal_set_rateliquidproviderbuy3(from._internal_rateliquidproviderbuy3());
  }
  if (!from._internal_rateliquidproviderbuy4().empty()) {
    _this->_internal_set_rateliquidproviderbuy4(from._internal_rateliquidproviderbuy4());
  }
  if (!from._internal_rateliquidproviderbuy5().empty()) {
    _this->_internal_set_rateliquidproviderbuy5(from._internal_rateliquidproviderbuy5());
  }
  if (!from._internal_rateliquidprovidersell1().empty()) {
    _this->_internal_set_rateliquidprovidersell1(from._internal_rateliquidprovidersell1());
  }
  if (!from._internal_rateliquidprovidersell2().empty()) {
    _this->_internal_set_rateliquidprovidersell2(from._internal_rateliquidprovidersell2());
  }
  if (!from._internal_rateliquidprovidersell3().empty()) {
    _this->_internal_set_rateliquidprovidersell3(from._internal_rateliquidprovidersell3());
  }
  if (!from._internal_rateliquidprovidersell4().empty()) {
    _this->_internal_set_rateliquidprovidersell4(from._internal_rateliquidprovidersell4());
  }
  if (!from._internal_rateliquidprovidersell5().empty()) {
    _this->_internal_set_rateliquidprovidersell5(from._internal_rateliquidprovidersell5());
  }
  if (!from._internal_legsign().empty()) {
    _this->_internal_set_legsign(from._internal_legsign());
  }
  if (from._internal_bestratebuy() != 0) {
    _this->_internal_set_bestratebuy(from._internal_bestratebuy());
  }
  if (from._internal_bestratesell() != 0) {
    _this->_internal_set_bestratesell(from._internal_bestratesell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwpSptNdfFowFxQuote::CopyFrom(const SwpSptNdfFowFxQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwpSptNdfFowFxQuote::IsInitialized() const {
  return true;
}

void SwpSptNdfFowFxQuote::InternalSwap(SwpSptNdfFowFxQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bestratedatebuy_, lhs_arena,
      &other->_impl_.bestratedatebuy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bestratetimebuy_, lhs_arena,
      &other->_impl_.bestratetimebuy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bestratedatesell_, lhs_arena,
      &other->_impl_.bestratedatesell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bestratetimesell_, lhs_arena,
      &other->_impl_.bestratetimesell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidproviderbuy1_, lhs_arena,
      &other->_impl_.rateliquidproviderbuy1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidproviderbuy2_, lhs_arena,
      &other->_impl_.rateliquidproviderbuy2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidproviderbuy3_, lhs_arena,
      &other->_impl_.rateliquidproviderbuy3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidproviderbuy4_, lhs_arena,
      &other->_impl_.rateliquidproviderbuy4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidproviderbuy5_, lhs_arena,
      &other->_impl_.rateliquidproviderbuy5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidprovidersell1_, lhs_arena,
      &other->_impl_.rateliquidprovidersell1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidprovidersell2_, lhs_arena,
      &other->_impl_.rateliquidprovidersell2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidprovidersell3_, lhs_arena,
      &other->_impl_.rateliquidprovidersell3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidprovidersell4_, lhs_arena,
      &other->_impl_.rateliquidprovidersell4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rateliquidprovidersell5_, lhs_arena,
      &other->_impl_.rateliquidprovidersell5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.legsign_, lhs_arena,
      &other->_impl_.legsign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwpSptNdfFowFxQuote, _impl_.bestratesell_)
      + sizeof(SwpSptNdfFowFxQuote::_impl_.bestratesell_)
      - PROTOBUF_FIELD_OFFSET(SwpSptNdfFowFxQuote, _impl_.bestratebuy_)>(
          reinterpret_cast<char*>(&_impl_.bestratebuy_),
          reinterpret_cast<char*>(&other->_impl_.bestratebuy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwpSptNdfFowFxQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsFxQuote_2eproto_getter, &descriptor_table_MDCfetsFxQuote_2eproto_once,
      file_level_metadata_MDCfetsFxQuote_2eproto[1]);
}

// ===================================================================

class OptionFxQuote::_Internal {
 public:
};

OptionFxQuote::OptionFxQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.OptionFxQuote)
}
OptionFxQuote::OptionFxQuote(const OptionFxQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionFxQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bestratedatebuy_){}
    , decltype(_impl_.bestratetimebuy_){}
    , decltype(_impl_.bestratedatesell_){}
    , decltype(_impl_.bestratetimesell_){}
    , decltype(_impl_.volatilitysurface_){}
    , decltype(_impl_.tenorbuy_){}
    , decltype(_impl_.tenorsell_){}
    , decltype(_impl_.makerinstitutionbuy_){}
    , decltype(_impl_.makerinstitutionsell_){}
    , decltype(_impl_.bestratebuy_){}
    , decltype(_impl_.bestratesell_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bestratedatebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratedatebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bestratedatebuy().empty()) {
    _this->_impl_.bestratedatebuy_.Set(from._internal_bestratedatebuy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bestratetimebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratetimebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bestratetimebuy().empty()) {
    _this->_impl_.bestratetimebuy_.Set(from._internal_bestratetimebuy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bestratedatesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratedatesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bestratedatesell().empty()) {
    _this->_impl_.bestratedatesell_.Set(from._internal_bestratedatesell(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bestratetimesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratetimesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bestratetimesell().empty()) {
    _this->_impl_.bestratetimesell_.Set(from._internal_bestratetimesell(), 
      _this->GetArenaForAllocation());
  }
  _impl_.volatilitysurface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.volatilitysurface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_volatilitysurface().empty()) {
    _this->_impl_.volatilitysurface_.Set(from._internal_volatilitysurface(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tenorbuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenorbuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tenorbuy().empty()) {
    _this->_impl_.tenorbuy_.Set(from._internal_tenorbuy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tenorsell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenorsell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tenorsell().empty()) {
    _this->_impl_.tenorsell_.Set(from._internal_tenorsell(), 
      _this->GetArenaForAllocation());
  }
  _impl_.makerinstitutionbuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.makerinstitutionbuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_makerinstitutionbuy().empty()) {
    _this->_impl_.makerinstitutionbuy_.Set(from._internal_makerinstitutionbuy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.makerinstitutionsell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.makerinstitutionsell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_makerinstitutionsell().empty()) {
    _this->_impl_.makerinstitutionsell_.Set(from._internal_makerinstitutionsell(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bestratebuy_, &from._impl_.bestratebuy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bestratesell_) -
    reinterpret_cast<char*>(&_impl_.bestratebuy_)) + sizeof(_impl_.bestratesell_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.OptionFxQuote)
}

inline void OptionFxQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bestratedatebuy_){}
    , decltype(_impl_.bestratetimebuy_){}
    , decltype(_impl_.bestratedatesell_){}
    , decltype(_impl_.bestratetimesell_){}
    , decltype(_impl_.volatilitysurface_){}
    , decltype(_impl_.tenorbuy_){}
    , decltype(_impl_.tenorsell_){}
    , decltype(_impl_.makerinstitutionbuy_){}
    , decltype(_impl_.makerinstitutionsell_){}
    , decltype(_impl_.bestratebuy_){int64_t{0}}
    , decltype(_impl_.bestratesell_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bestratedatebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratedatebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bestratetimebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratetimebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bestratedatesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratedatesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bestratetimesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bestratetimesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.volatilitysurface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.volatilitysurface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tenorbuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenorbuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tenorsell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenorsell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.makerinstitutionbuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.makerinstitutionbuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.makerinstitutionsell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.makerinstitutionsell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OptionFxQuote::~OptionFxQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.OptionFxQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionFxQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bestratedatebuy_.Destroy();
  _impl_.bestratetimebuy_.Destroy();
  _impl_.bestratedatesell_.Destroy();
  _impl_.bestratetimesell_.Destroy();
  _impl_.volatilitysurface_.Destroy();
  _impl_.tenorbuy_.Destroy();
  _impl_.tenorsell_.Destroy();
  _impl_.makerinstitutionbuy_.Destroy();
  _impl_.makerinstitutionsell_.Destroy();
}

void OptionFxQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionFxQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.OptionFxQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bestratedatebuy_.ClearToEmpty();
  _impl_.bestratetimebuy_.ClearToEmpty();
  _impl_.bestratedatesell_.ClearToEmpty();
  _impl_.bestratetimesell_.ClearToEmpty();
  _impl_.volatilitysurface_.ClearToEmpty();
  _impl_.tenorbuy_.ClearToEmpty();
  _impl_.tenorsell_.ClearToEmpty();
  _impl_.makerinstitutionbuy_.ClearToEmpty();
  _impl_.makerinstitutionsell_.ClearToEmpty();
  ::memset(&_impl_.bestratebuy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bestratesell_) -
      reinterpret_cast<char*>(&_impl_.bestratebuy_)) + sizeof(_impl_.bestratesell_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionFxQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BestRateDateBuy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bestratedatebuy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateBuy"));
        } else
          goto handle_unusual;
        continue;
      // string BestRateTimeBuy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bestratetimebuy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeBuy"));
        } else
          goto handle_unusual;
        continue;
      // string BestRateDateSell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bestratedatesell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateSell"));
        } else
          goto handle_unusual;
        continue;
      // string BestRateTimeSell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bestratetimesell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeSell"));
        } else
          goto handle_unusual;
        continue;
      // int64 BestRateBuy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bestratebuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BestRateSell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bestratesell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VolatilitySurface = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_volatilitysurface();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.VolatilitySurface"));
        } else
          goto handle_unusual;
        continue;
      // string TenorBuy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_tenorbuy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.TenorBuy"));
        } else
          goto handle_unusual;
        continue;
      // string TenorSell = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_tenorsell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.TenorSell"));
        } else
          goto handle_unusual;
        continue;
      // string MakerInstitutionBuy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_makerinstitutionbuy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionBuy"));
        } else
          goto handle_unusual;
        continue;
      // string MakerInstitutionSell = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_makerinstitutionsell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionSell"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionFxQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.OptionFxQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BestRateDateBuy = 1;
  if (!this->_internal_bestratedatebuy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestratedatebuy().data(), static_cast<int>(this->_internal_bestratedatebuy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateBuy");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bestratedatebuy(), target);
  }

  // string BestRateTimeBuy = 2;
  if (!this->_internal_bestratetimebuy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestratetimebuy().data(), static_cast<int>(this->_internal_bestratetimebuy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeBuy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bestratetimebuy(), target);
  }

  // string BestRateDateSell = 3;
  if (!this->_internal_bestratedatesell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestratedatesell().data(), static_cast<int>(this->_internal_bestratedatesell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.BestRateDateSell");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bestratedatesell(), target);
  }

  // string BestRateTimeSell = 4;
  if (!this->_internal_bestratetimesell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestratetimesell().data(), static_cast<int>(this->_internal_bestratetimesell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.BestRateTimeSell");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bestratetimesell(), target);
  }

  // int64 BestRateBuy = 5;
  if (this->_internal_bestratebuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_bestratebuy(), target);
  }

  // int64 BestRateSell = 6;
  if (this->_internal_bestratesell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_bestratesell(), target);
  }

  // string VolatilitySurface = 7;
  if (!this->_internal_volatilitysurface().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volatilitysurface().data(), static_cast<int>(this->_internal_volatilitysurface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.VolatilitySurface");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_volatilitysurface(), target);
  }

  // string TenorBuy = 8;
  if (!this->_internal_tenorbuy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenorbuy().data(), static_cast<int>(this->_internal_tenorbuy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.TenorBuy");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tenorbuy(), target);
  }

  // string TenorSell = 9;
  if (!this->_internal_tenorsell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenorsell().data(), static_cast<int>(this->_internal_tenorsell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.TenorSell");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_tenorsell(), target);
  }

  // string MakerInstitutionBuy = 10;
  if (!this->_internal_makerinstitutionbuy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_makerinstitutionbuy().data(), static_cast<int>(this->_internal_makerinstitutionbuy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionBuy");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_makerinstitutionbuy(), target);
  }

  // string MakerInstitutionSell = 11;
  if (!this->_internal_makerinstitutionsell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_makerinstitutionsell().data(), static_cast<int>(this->_internal_makerinstitutionsell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxQuote.MakerInstitutionSell");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_makerinstitutionsell(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.OptionFxQuote)
  return target;
}

size_t OptionFxQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.OptionFxQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BestRateDateBuy = 1;
  if (!this->_internal_bestratedatebuy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestratedatebuy());
  }

  // string BestRateTimeBuy = 2;
  if (!this->_internal_bestratetimebuy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestratetimebuy());
  }

  // string BestRateDateSell = 3;
  if (!this->_internal_bestratedatesell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestratedatesell());
  }

  // string BestRateTimeSell = 4;
  if (!this->_internal_bestratetimesell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestratetimesell());
  }

  // string VolatilitySurface = 7;
  if (!this->_internal_volatilitysurface().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volatilitysurface());
  }

  // string TenorBuy = 8;
  if (!this->_internal_tenorbuy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenorbuy());
  }

  // string TenorSell = 9;
  if (!this->_internal_tenorsell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenorsell());
  }

  // string MakerInstitutionBuy = 10;
  if (!this->_internal_makerinstitutionbuy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_makerinstitutionbuy());
  }

  // string MakerInstitutionSell = 11;
  if (!this->_internal_makerinstitutionsell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_makerinstitutionsell());
  }

  // int64 BestRateBuy = 5;
  if (this->_internal_bestratebuy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bestratebuy());
  }

  // int64 BestRateSell = 6;
  if (this->_internal_bestratesell() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bestratesell());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionFxQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionFxQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionFxQuote::GetClassData() const { return &_class_data_; }


void OptionFxQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionFxQuote*>(&to_msg);
  auto& from = static_cast<const OptionFxQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.OptionFxQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bestratedatebuy().empty()) {
    _this->_internal_set_bestratedatebuy(from._internal_bestratedatebuy());
  }
  if (!from._internal_bestratetimebuy().empty()) {
    _this->_internal_set_bestratetimebuy(from._internal_bestratetimebuy());
  }
  if (!from._internal_bestratedatesell().empty()) {
    _this->_internal_set_bestratedatesell(from._internal_bestratedatesell());
  }
  if (!from._internal_bestratetimesell().empty()) {
    _this->_internal_set_bestratetimesell(from._internal_bestratetimesell());
  }
  if (!from._internal_volatilitysurface().empty()) {
    _this->_internal_set_volatilitysurface(from._internal_volatilitysurface());
  }
  if (!from._internal_tenorbuy().empty()) {
    _this->_internal_set_tenorbuy(from._internal_tenorbuy());
  }
  if (!from._internal_tenorsell().empty()) {
    _this->_internal_set_tenorsell(from._internal_tenorsell());
  }
  if (!from._internal_makerinstitutionbuy().empty()) {
    _this->_internal_set_makerinstitutionbuy(from._internal_makerinstitutionbuy());
  }
  if (!from._internal_makerinstitutionsell().empty()) {
    _this->_internal_set_makerinstitutionsell(from._internal_makerinstitutionsell());
  }
  if (from._internal_bestratebuy() != 0) {
    _this->_internal_set_bestratebuy(from._internal_bestratebuy());
  }
  if (from._internal_bestratesell() != 0) {
    _this->_internal_set_bestratesell(from._internal_bestratesell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionFxQuote::CopyFrom(const OptionFxQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.OptionFxQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionFxQuote::IsInitialized() const {
  return true;
}

void OptionFxQuote::InternalSwap(OptionFxQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bestratedatebuy_, lhs_arena,
      &other->_impl_.bestratedatebuy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bestratetimebuy_, lhs_arena,
      &other->_impl_.bestratetimebuy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bestratedatesell_, lhs_arena,
      &other->_impl_.bestratedatesell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bestratetimesell_, lhs_arena,
      &other->_impl_.bestratetimesell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.volatilitysurface_, lhs_arena,
      &other->_impl_.volatilitysurface_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tenorbuy_, lhs_arena,
      &other->_impl_.tenorbuy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tenorsell_, lhs_arena,
      &other->_impl_.tenorsell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.makerinstitutionbuy_, lhs_arena,
      &other->_impl_.makerinstitutionbuy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.makerinstitutionsell_, lhs_arena,
      &other->_impl_.makerinstitutionsell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionFxQuote, _impl_.bestratesell_)
      + sizeof(OptionFxQuote::_impl_.bestratesell_)
      - PROTOBUF_FIELD_OFFSET(OptionFxQuote, _impl_.bestratebuy_)>(
          reinterpret_cast<char*>(&_impl_.bestratebuy_),
          reinterpret_cast<char*>(&other->_impl_.bestratebuy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionFxQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsFxQuote_2eproto_getter, &descriptor_table_MDCfetsFxQuote_2eproto_once,
      file_level_metadata_MDCfetsFxQuote_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDCfetsFxQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDCfetsFxQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDCfetsFxQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SwpSptNdfFowFxQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::OptionFxQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::OptionFxQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::OptionFxQuote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
