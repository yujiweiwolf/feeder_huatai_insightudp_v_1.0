// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQuery.proto

#include "MDQuery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDQueryRequest::MDQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.securitysourcetype_)*/{}
  , /*decltype(_impl_.htscsecurityids_)*/{}
  , /*decltype(_impl_.queryparams_)*/{}
  , /*decltype(_impl_.querytype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDQueryRequestDefaultTypeInternal() {}
  union {
    MDQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDQueryRequestDefaultTypeInternal _MDQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR QueryParam::QueryParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paramtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paramvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamDefaultTypeInternal() {}
  union {
    QueryParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamDefaultTypeInternal _QueryParam_default_instance_;
PROTOBUF_CONSTEXPR MDQueryResponse::MDQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errorcontext_)*/nullptr
  , /*decltype(_impl_.marketdatastream_)*/nullptr
  , /*decltype(_impl_.querytype_)*/0
  , /*decltype(_impl_.issuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDQueryResponseDefaultTypeInternal() {}
  union {
    MDQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDQueryResponseDefaultTypeInternal _MDQueryResponse_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDQuery_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDQuery_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDQuery_2eproto = nullptr;

const uint32_t TableStruct_MDQuery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, _impl_.querytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, _impl_.securitysourcetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, _impl_.htscsecurityids_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, _impl_.queryparams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::QueryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::QueryParam, _impl_.paramtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::QueryParam, _impl_.paramvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, _impl_.querytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, _impl_.issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, _impl_.errorcontext_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, _impl_.marketdatastream_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDQueryRequest)},
  { 10, -1, -1, sizeof(::com::htsc::mdc::insight::model::QueryParam)},
  { 18, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDQueryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDQueryRequest_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_QueryParam_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDQueryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_MDQuery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rMDQuery.proto\022\032com.htsc.mdc.insight.mo"
  "del\032\030SecuritySourceType.proto\032\031InsightEr"
  "rorContext.proto\032\020MarketData.proto\"\305\001\n\016M"
  "DQueryRequest\022\021\n\tqueryType\030\001 \001(\005\022J\n\022secu"
  "ritySourceType\030\002 \003(\0132..com.htsc.mdc.insi"
  "ght.model.SecuritySourceType\022\027\n\017htscSecu"
  "rityIDs\030\003 \003(\t\022;\n\013queryParams\030\004 \003(\0132&.com"
  ".htsc.mdc.insight.model.QueryParam\"3\n\nQu"
  "eryParam\022\021\n\tparamType\030\001 \001(\t\022\022\n\nparamValu"
  "e\030\002 \001(\t\"\306\001\n\017MDQueryResponse\022\021\n\tqueryType"
  "\030\001 \001(\005\022\021\n\tisSuccess\030\002 \001(\010\022E\n\014errorContex"
  "t\030\003 \001(\0132/.com.htsc.mdc.insight.model.Ins"
  "ightErrorContext\022F\n\020marketDataStream\030\004 \001"
  "(\0132,.com.htsc.mdc.insight.model.MarketDa"
  "taStreamB/\n\032com.htsc.mdc.insight.modelB\014"
  "MDQueryProtoH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDQuery_2eproto_deps[3] = {
  &::descriptor_table_InsightErrorContext_2eproto,
  &::descriptor_table_MarketData_2eproto,
  &::descriptor_table_SecuritySourceType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDQuery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDQuery_2eproto = {
    false, false, 625, descriptor_table_protodef_MDQuery_2eproto,
    "MDQuery.proto",
    &descriptor_table_MDQuery_2eproto_once, descriptor_table_MDQuery_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_MDQuery_2eproto::offsets,
    file_level_metadata_MDQuery_2eproto, file_level_enum_descriptors_MDQuery_2eproto,
    file_level_service_descriptors_MDQuery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDQuery_2eproto_getter() {
  return &descriptor_table_MDQuery_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDQuery_2eproto(&descriptor_table_MDQuery_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQueryRequest::_Internal {
 public:
};

void MDQueryRequest::clear_securitysourcetype() {
  _impl_.securitysourcetype_.Clear();
}
MDQueryRequest::MDQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDQueryRequest)
}
MDQueryRequest::MDQueryRequest(const MDQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.securitysourcetype_){from._impl_.securitysourcetype_}
    , decltype(_impl_.htscsecurityids_){from._impl_.htscsecurityids_}
    , decltype(_impl_.queryparams_){from._impl_.queryparams_}
    , decltype(_impl_.querytype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.querytype_ = from._impl_.querytype_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDQueryRequest)
}

inline void MDQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.securitysourcetype_){arena}
    , decltype(_impl_.htscsecurityids_){arena}
    , decltype(_impl_.queryparams_){arena}
    , decltype(_impl_.querytype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MDQueryRequest::~MDQueryRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.securitysourcetype_.~RepeatedPtrField();
  _impl_.htscsecurityids_.~RepeatedPtrField();
  _impl_.queryparams_.~RepeatedPtrField();
}

void MDQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.securitysourcetype_.Clear();
  _impl_.htscsecurityids_.Clear();
  _impl_.queryparams_.Clear();
  _impl_.querytype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 queryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.querytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_securitysourcetype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string htscSecurityIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_htscsecurityids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queryparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryType = 1;
  if (this->_internal_querytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_querytype(), target);
  }

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_securitysourcetype_size()); i < n; i++) {
    const auto& repfield = this->_internal_securitysourcetype(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string htscSecurityIDs = 3;
  for (int i = 0, n = this->_internal_htscsecurityids_size(); i < n; i++) {
    const auto& s = this->_internal_htscsecurityids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs");
    target = stream->WriteString(3, s, target);
  }

  // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queryparams_size()); i < n; i++) {
    const auto& repfield = this->_internal_queryparams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDQueryRequest)
  return target;
}

size_t MDQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
  total_size += 1UL * this->_internal_securitysourcetype_size();
  for (const auto& msg : this->_impl_.securitysourcetype_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string htscSecurityIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.htscsecurityids_.size());
  for (int i = 0, n = _impl_.htscsecurityids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.htscsecurityids_.Get(i));
  }

  // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
  total_size += 1UL * this->_internal_queryparams_size();
  for (const auto& msg : this->_impl_.queryparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 queryType = 1;
  if (this->_internal_querytype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_querytype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDQueryRequest::GetClassData() const { return &_class_data_; }


void MDQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDQueryRequest*>(&to_msg);
  auto& from = static_cast<const MDQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.securitysourcetype_.MergeFrom(from._impl_.securitysourcetype_);
  _this->_impl_.htscsecurityids_.MergeFrom(from._impl_.htscsecurityids_);
  _this->_impl_.queryparams_.MergeFrom(from._impl_.queryparams_);
  if (from._internal_querytype() != 0) {
    _this->_internal_set_querytype(from._internal_querytype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDQueryRequest::CopyFrom(const MDQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDQueryRequest::IsInitialized() const {
  return true;
}

void MDQueryRequest::InternalSwap(MDQueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.securitysourcetype_.InternalSwap(&other->_impl_.securitysourcetype_);
  _impl_.htscsecurityids_.InternalSwap(&other->_impl_.htscsecurityids_);
  _impl_.queryparams_.InternalSwap(&other->_impl_.queryparams_);
  swap(_impl_.querytype_, other->_impl_.querytype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDQuery_2eproto_getter, &descriptor_table_MDQuery_2eproto_once,
      file_level_metadata_MDQuery_2eproto[0]);
}

// ===================================================================

class QueryParam::_Internal {
 public:
};

QueryParam::QueryParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.QueryParam)
}
QueryParam::QueryParam(const QueryParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paramtype_){}
    , decltype(_impl_.paramvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.paramtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paramtype().empty()) {
    _this->_impl_.paramtype_.Set(from._internal_paramtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paramvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paramvalue().empty()) {
    _this->_impl_.paramvalue_.Set(from._internal_paramvalue(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.QueryParam)
}

inline void QueryParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paramtype_){}
    , decltype(_impl_.paramvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.paramtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paramvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryParam::~QueryParam() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.QueryParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paramtype_.Destroy();
  _impl_.paramvalue_.Destroy();
}

void QueryParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.QueryParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paramtype_.ClearToEmpty();
  _impl_.paramvalue_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string paramType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_paramtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.QueryParam.paramType"));
        } else
          goto handle_unusual;
        continue;
      // string paramValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_paramvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.QueryParam.paramValue"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.QueryParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string paramType = 1;
  if (!this->_internal_paramtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paramtype().data(), static_cast<int>(this->_internal_paramtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.QueryParam.paramType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paramtype(), target);
  }

  // string paramValue = 2;
  if (!this->_internal_paramvalue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paramvalue().data(), static_cast<int>(this->_internal_paramvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.QueryParam.paramValue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_paramvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.QueryParam)
  return target;
}

size_t QueryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.QueryParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string paramType = 1;
  if (!this->_internal_paramtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paramtype());
  }

  // string paramValue = 2;
  if (!this->_internal_paramvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paramvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParam::GetClassData() const { return &_class_data_; }


void QueryParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParam*>(&to_msg);
  auto& from = static_cast<const QueryParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.QueryParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_paramtype().empty()) {
    _this->_internal_set_paramtype(from._internal_paramtype());
  }
  if (!from._internal_paramvalue().empty()) {
    _this->_internal_set_paramvalue(from._internal_paramvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParam::CopyFrom(const QueryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParam::IsInitialized() const {
  return true;
}

void QueryParam::InternalSwap(QueryParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paramtype_, lhs_arena,
      &other->_impl_.paramtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paramvalue_, lhs_arena,
      &other->_impl_.paramvalue_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDQuery_2eproto_getter, &descriptor_table_MDQuery_2eproto_once,
      file_level_metadata_MDQuery_2eproto[1]);
}

// ===================================================================

class MDQueryResponse::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const MDQueryResponse* msg);
  static const ::com::htsc::mdc::insight::model::MarketDataStream& marketdatastream(const MDQueryResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
MDQueryResponse::_Internal::errorcontext(const MDQueryResponse* msg) {
  return *msg->_impl_.errorcontext_;
}
const ::com::htsc::mdc::insight::model::MarketDataStream&
MDQueryResponse::_Internal::marketdatastream(const MDQueryResponse* msg) {
  return *msg->_impl_.marketdatastream_;
}
void MDQueryResponse::clear_errorcontext() {
  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
}
void MDQueryResponse::clear_marketdatastream() {
  if (GetArenaForAllocation() == nullptr && _impl_.marketdatastream_ != nullptr) {
    delete _impl_.marketdatastream_;
  }
  _impl_.marketdatastream_ = nullptr;
}
MDQueryResponse::MDQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDQueryResponse)
}
MDQueryResponse::MDQueryResponse(const MDQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.marketdatastream_){nullptr}
    , decltype(_impl_.querytype_){}
    , decltype(_impl_.issuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errorcontext()) {
    _this->_impl_.errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from._impl_.errorcontext_);
  }
  if (from._internal_has_marketdatastream()) {
    _this->_impl_.marketdatastream_ = new ::com::htsc::mdc::insight::model::MarketDataStream(*from._impl_.marketdatastream_);
  }
  ::memcpy(&_impl_.querytype_, &from._impl_.querytype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.issuccess_) -
    reinterpret_cast<char*>(&_impl_.querytype_)) + sizeof(_impl_.issuccess_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDQueryResponse)
}

inline void MDQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.marketdatastream_){nullptr}
    , decltype(_impl_.querytype_){0}
    , decltype(_impl_.issuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MDQueryResponse::~MDQueryResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.errorcontext_;
  if (this != internal_default_instance()) delete _impl_.marketdatastream_;
}

void MDQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.marketdatastream_ != nullptr) {
    delete _impl_.marketdatastream_;
  }
  _impl_.marketdatastream_ = nullptr;
  ::memset(&_impl_.querytype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.issuccess_) -
      reinterpret_cast<char*>(&_impl_.querytype_)) + sizeof(_impl_.issuccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 queryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.querytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketdatastream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryType = 1;
  if (this->_internal_querytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_querytype(), target);
  }

  // bool isSuccess = 2;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->_internal_has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::errorcontext(this),
        _Internal::errorcontext(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
  if (this->_internal_has_marketdatastream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::marketdatastream(this),
        _Internal::marketdatastream(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDQueryResponse)
  return target;
}

size_t MDQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->_internal_has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.errorcontext_);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
  if (this->_internal_has_marketdatastream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.marketdatastream_);
  }

  // int32 queryType = 1;
  if (this->_internal_querytype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_querytype());
  }

  // bool isSuccess = 2;
  if (this->_internal_issuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDQueryResponse::GetClassData() const { return &_class_data_; }


void MDQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDQueryResponse*>(&to_msg);
  auto& from = static_cast<const MDQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcontext()) {
    _this->_internal_mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(
        from._internal_errorcontext());
  }
  if (from._internal_has_marketdatastream()) {
    _this->_internal_mutable_marketdatastream()->::com::htsc::mdc::insight::model::MarketDataStream::MergeFrom(
        from._internal_marketdatastream());
  }
  if (from._internal_querytype() != 0) {
    _this->_internal_set_querytype(from._internal_querytype());
  }
  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDQueryResponse::CopyFrom(const MDQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDQueryResponse::IsInitialized() const {
  return true;
}

void MDQueryResponse::InternalSwap(MDQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDQueryResponse, _impl_.issuccess_)
      + sizeof(MDQueryResponse::_impl_.issuccess_)
      - PROTOBUF_FIELD_OFFSET(MDQueryResponse, _impl_.errorcontext_)>(
          reinterpret_cast<char*>(&_impl_.errorcontext_),
          reinterpret_cast<char*>(&other->_impl_.errorcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDQuery_2eproto_getter, &descriptor_table_MDQuery_2eproto_once,
      file_level_metadata_MDQuery_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDQueryRequest*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::QueryParam*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::QueryParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::QueryParam >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDQueryResponse*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDQueryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
