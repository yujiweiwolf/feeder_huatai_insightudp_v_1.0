// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADOrderbookSnapshot.proto

#include "ADOrderbookSnapshot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR ADOrderbookSnapshot::ADOrderbookSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buyentries_)*/{}
  , /*decltype(_impl_.sellentries_)*/{}
  , /*decltype(_impl_.buymarketorders_)*/{}
  , /*decltype(_impl_._buymarketorders_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellmarketorders_)*/{}
  , /*decltype(_impl_._sellmarketorders_cached_byte_size_)*/{0}
  , /*decltype(_impl_.aftermatchedbuyentries_)*/{}
  , /*decltype(_impl_.aftermatchedsellentries_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.applseqnum_)*/int64_t{0}
  , /*decltype(_impl_.snapshotmddatetime_)*/int64_t{0}
  , /*decltype(_impl_.numtrades_)*/int64_t{0}
  , /*decltype(_impl_.totalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.lastpx_)*/int64_t{0}
  , /*decltype(_impl_.channelno_)*/0
  , /*decltype(_impl_.numbuyorders_)*/0
  , /*decltype(_impl_.highpx_)*/int64_t{0}
  , /*decltype(_impl_.lowpx_)*/int64_t{0}
  , /*decltype(_impl_.totalbuyqty_)*/int64_t{0}
  , /*decltype(_impl_.totalsellqty_)*/int64_t{0}
  , /*decltype(_impl_.weightedavgbuypx_)*/int64_t{0}
  , /*decltype(_impl_.weightedavgsellpx_)*/int64_t{0}
  , /*decltype(_impl_.totalbuynumber_)*/int64_t{0}
  , /*decltype(_impl_.totalsellnumber_)*/int64_t{0}
  , /*decltype(_impl_.numsellorders_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_.maxpx_)*/int64_t{0}
  , /*decltype(_impl_.minpx_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.openpx_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.iopv_)*/int64_t{0}
  , /*decltype(_impl_.preiopv_)*/int64_t{0}
  , /*decltype(_impl_.datasource_)*/0
  , /*decltype(_impl_.period_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADOrderbookSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADOrderbookSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADOrderbookSnapshotDefaultTypeInternal() {}
  union {
    ADOrderbookSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADOrderbookSnapshotDefaultTypeInternal _ADOrderbookSnapshot_default_instance_;
PROTOBUF_CONSTEXPR ADEntryDetail::ADEntryDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orderqtylist_)*/{}
  , /*decltype(_impl_._orderqtylist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.price_)*/int64_t{0}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.totalqty_)*/0
  , /*decltype(_impl_.numberoforders_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADEntryDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADEntryDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADEntryDetailDefaultTypeInternal() {}
  union {
    ADEntryDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADEntryDetailDefaultTypeInternal _ADEntryDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_ADOrderbookSnapshot_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ADOrderbookSnapshot_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ADOrderbookSnapshot_2eproto = nullptr;

const uint32_t TableStruct_ADOrderbookSnapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.channelno_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.applseqnum_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.snapshotmddatetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.totalbuyqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.totalsellqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.weightedavgbuypx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.weightedavgsellpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.totalbuynumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.totalsellnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.numbuyorders_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.numsellorders_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.buyentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.sellentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.buymarketorders_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.sellmarketorders_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.aftermatchedbuyentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.aftermatchedsellentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.maxpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.minpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.iopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.preiopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.datasource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADOrderbookSnapshot, _impl_.period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADEntryDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADEntryDetail, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADEntryDetail, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADEntryDetail, _impl_.totalqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADEntryDetail, _impl_.numberoforders_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADEntryDetail, _impl_.orderqtylist_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADOrderbookSnapshot)},
  { 48, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADEntryDetail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_ADOrderbookSnapshot_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADEntryDetail_default_instance_._instance,
};

const char descriptor_table_protodef_ADOrderbookSnapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ADOrderbookSnapshot.proto\022\032com.htsc.md"
  "c.insight.model\032\023ESecurityType.proto\032\027ES"
  "ecurityIDSource.proto\"\240\t\n\023ADOrderbookSna"
  "pshot\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030"
  "\002 \001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004"
  " \001(\003\022\030\n\020TradingPhaseCode\030\005 \001(\t\022\?\n\020securi"
  "tyIDSource\030\006 \001(\0162%.com.htsc.mdc.model.ES"
  "ecurityIDSource\0227\n\014securityType\030\007 \001(\0162!."
  "com.htsc.mdc.model.ESecurityType\022\021\n\tChan"
  "nelNo\030\010 \001(\005\022\022\n\nApplSeqNum\030\t \001(\003\022\032\n\022Snaps"
  "hotMDDateTime\030\n \001(\003\022\021\n\tNumTrades\030\013 \001(\003\022\030"
  "\n\020TotalVolumeTrade\030\014 \001(\003\022\027\n\017TotalValueTr"
  "ade\030\r \001(\003\022\016\n\006LastPx\030\016 \001(\003\022\016\n\006HighPx\030\021 \001("
  "\003\022\r\n\005LowPx\030\022 \001(\003\022\023\n\013TotalBuyQty\030\023 \001(\003\022\024\n"
  "\014TotalSellQty\030\024 \001(\003\022\030\n\020WeightedAvgBuyPx\030"
  "\025 \001(\003\022\031\n\021WeightedAvgSellPx\030\026 \001(\003\022\026\n\016Tota"
  "lBuyNumber\030\027 \001(\003\022\027\n\017TotalSellNumber\030\030 \001("
  "\003\022\024\n\014NumBuyOrders\030\031 \001(\005\022\025\n\rNumSellOrders"
  "\030\032 \001(\005\022\024\n\014ExchangeDate\030\033 \001(\005\022\024\n\014Exchange"
  "Time\030\034 \001(\005\022=\n\nBuyEntries\030\036 \003(\0132).com.hts"
  "c.mdc.insight.model.ADEntryDetail\022>\n\013Sel"
  "lEntries\030\037 \003(\0132).com.htsc.mdc.insight.mo"
  "del.ADEntryDetail\022\033\n\017BuyMarketOrders\030  \003"
  "(\003B\002\020\001\022\034\n\020SellMarketOrders\030! \003(\003B\002\020\001\022I\n\026"
  "afterMatchedBuyEntries\030\" \003(\0132).com.htsc."
  "mdc.insight.model.ADEntryDetail\022J\n\027after"
  "MatchedSellEntries\030# \003(\0132).com.htsc.mdc."
  "insight.model.ADEntryDetail\022\035\n\025DataMulti"
  "plePowerOf10\030$ \001(\005\022\r\n\005MaxPx\030% \001(\003\022\r\n\005Min"
  "Px\030& \001(\003\022\022\n\nPreClosePx\030\' \001(\003\022\016\n\006OpenPx\030("
  " \001(\003\022\017\n\007ClosePx\030) \001(\003\022\014\n\004IOPV\030* \001(\003\022\017\n\007P"
  "reIOPV\030+ \001(\003\022\022\n\nDataSource\030, \001(\005\022\016\n\006Peri"
  "od\030- \001(\005\"q\n\rADEntryDetail\022\r\n\005Level\030\001 \001(\005"
  "\022\r\n\005Price\030\002 \001(\003\022\020\n\010TotalQty\030\003 \001(\005\022\026\n\016Num"
  "berOfOrders\030\004 \001(\005\022\030\n\014OrderQtyList\030\005 \003(\005B"
  "\002\020\001B<\n\032com.htsc.mdc.insight.modelB\031ADOrd"
  "erbookSnapshotProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ADOrderbookSnapshot_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_ADOrderbookSnapshot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ADOrderbookSnapshot_2eproto = {
    false, false, 1473, descriptor_table_protodef_ADOrderbookSnapshot_2eproto,
    "ADOrderbookSnapshot.proto",
    &descriptor_table_ADOrderbookSnapshot_2eproto_once, descriptor_table_ADOrderbookSnapshot_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_ADOrderbookSnapshot_2eproto::offsets,
    file_level_metadata_ADOrderbookSnapshot_2eproto, file_level_enum_descriptors_ADOrderbookSnapshot_2eproto,
    file_level_service_descriptors_ADOrderbookSnapshot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ADOrderbookSnapshot_2eproto_getter() {
  return &descriptor_table_ADOrderbookSnapshot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ADOrderbookSnapshot_2eproto(&descriptor_table_ADOrderbookSnapshot_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADOrderbookSnapshot::_Internal {
 public:
};

ADOrderbookSnapshot::ADOrderbookSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
}
ADOrderbookSnapshot::ADOrderbookSnapshot(const ADOrderbookSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADOrderbookSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buyentries_){from._impl_.buyentries_}
    , decltype(_impl_.sellentries_){from._impl_.sellentries_}
    , decltype(_impl_.buymarketorders_){from._impl_.buymarketorders_}
    , /*decltype(_impl_._buymarketorders_cached_byte_size_)*/{0}
    , decltype(_impl_.sellmarketorders_){from._impl_.sellmarketorders_}
    , /*decltype(_impl_._sellmarketorders_cached_byte_size_)*/{0}
    , decltype(_impl_.aftermatchedbuyentries_){from._impl_.aftermatchedbuyentries_}
    , decltype(_impl_.aftermatchedsellentries_){from._impl_.aftermatchedsellentries_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.applseqnum_){}
    , decltype(_impl_.snapshotmddatetime_){}
    , decltype(_impl_.numtrades_){}
    , decltype(_impl_.totalvolumetrade_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.lastpx_){}
    , decltype(_impl_.channelno_){}
    , decltype(_impl_.numbuyorders_){}
    , decltype(_impl_.highpx_){}
    , decltype(_impl_.lowpx_){}
    , decltype(_impl_.totalbuyqty_){}
    , decltype(_impl_.totalsellqty_){}
    , decltype(_impl_.weightedavgbuypx_){}
    , decltype(_impl_.weightedavgsellpx_){}
    , decltype(_impl_.totalbuynumber_){}
    , decltype(_impl_.totalsellnumber_){}
    , decltype(_impl_.numsellorders_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , decltype(_impl_.maxpx_){}
    , decltype(_impl_.minpx_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.openpx_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.iopv_){}
    , decltype(_impl_.preiopv_){}
    , decltype(_impl_.datasource_){}
    , decltype(_impl_.period_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.period_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.period_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
}

inline void ADOrderbookSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buyentries_){arena}
    , decltype(_impl_.sellentries_){arena}
    , decltype(_impl_.buymarketorders_){arena}
    , /*decltype(_impl_._buymarketorders_cached_byte_size_)*/{0}
    , decltype(_impl_.sellmarketorders_){arena}
    , /*decltype(_impl_._sellmarketorders_cached_byte_size_)*/{0}
    , decltype(_impl_.aftermatchedbuyentries_){arena}
    , decltype(_impl_.aftermatchedsellentries_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.applseqnum_){int64_t{0}}
    , decltype(_impl_.snapshotmddatetime_){int64_t{0}}
    , decltype(_impl_.numtrades_){int64_t{0}}
    , decltype(_impl_.totalvolumetrade_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.lastpx_){int64_t{0}}
    , decltype(_impl_.channelno_){0}
    , decltype(_impl_.numbuyorders_){0}
    , decltype(_impl_.highpx_){int64_t{0}}
    , decltype(_impl_.lowpx_){int64_t{0}}
    , decltype(_impl_.totalbuyqty_){int64_t{0}}
    , decltype(_impl_.totalsellqty_){int64_t{0}}
    , decltype(_impl_.weightedavgbuypx_){int64_t{0}}
    , decltype(_impl_.weightedavgsellpx_){int64_t{0}}
    , decltype(_impl_.totalbuynumber_){int64_t{0}}
    , decltype(_impl_.totalsellnumber_){int64_t{0}}
    , decltype(_impl_.numsellorders_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , decltype(_impl_.maxpx_){int64_t{0}}
    , decltype(_impl_.minpx_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.openpx_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.iopv_){int64_t{0}}
    , decltype(_impl_.preiopv_){int64_t{0}}
    , decltype(_impl_.datasource_){0}
    , decltype(_impl_.period_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADOrderbookSnapshot::~ADOrderbookSnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADOrderbookSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buyentries_.~RepeatedPtrField();
  _impl_.sellentries_.~RepeatedPtrField();
  _impl_.buymarketorders_.~RepeatedField();
  _impl_.sellmarketorders_.~RepeatedField();
  _impl_.aftermatchedbuyentries_.~RepeatedPtrField();
  _impl_.aftermatchedsellentries_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
}

void ADOrderbookSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADOrderbookSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buyentries_.Clear();
  _impl_.sellentries_.Clear();
  _impl_.buymarketorders_.Clear();
  _impl_.sellmarketorders_.Clear();
  _impl_.aftermatchedbuyentries_.Clear();
  _impl_.aftermatchedsellentries_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.period_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADOrderbookSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADOrderbookSnapshot.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADOrderbookSnapshot.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 ChannelNo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.channelno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ApplSeqNum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.applseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SnapshotMDDateTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.snapshotmddatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NumTrades = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastPx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighPx = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowPx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalBuyQty = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.totalbuyqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalSellQty = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.totalsellqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedAvgBuyPx = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.weightedavgbuypx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedAvgSellPx = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.weightedavgsellpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalBuyNumber = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.totalbuynumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalSellNumber = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.totalsellnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NumBuyOrders = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.numbuyorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NumSellOrders = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.numsellorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADEntryDetail BuyEntries = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_buyentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADEntryDetail SellEntries = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sellentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyMarketOrders = 32 [packed = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buymarketorders(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 0) {
          _internal_add_buymarketorders(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellMarketOrders = 33 [packed = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellmarketorders(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_sellmarketorders(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADEntryDetail afterMatchedBuyEntries = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_aftermatchedbuyentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADEntryDetail afterMatchedSellEntries = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_aftermatchedsellentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MaxPx = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MinPx = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.minpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenPx = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IOPV = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.iopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreIOPV = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.preiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataSource = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.datasource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Period = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADOrderbookSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADOrderbookSnapshot.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADOrderbookSnapshot.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int32 ChannelNo = 8;
  if (this->_internal_channelno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_channelno(), target);
  }

  // int64 ApplSeqNum = 9;
  if (this->_internal_applseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_applseqnum(), target);
  }

  // int64 SnapshotMDDateTime = 10;
  if (this->_internal_snapshotmddatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_snapshotmddatetime(), target);
  }

  // int64 NumTrades = 11;
  if (this->_internal_numtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_numtrades(), target);
  }

  // int64 TotalVolumeTrade = 12;
  if (this->_internal_totalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 13;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_totalvaluetrade(), target);
  }

  // int64 LastPx = 14;
  if (this->_internal_lastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_lastpx(), target);
  }

  // int64 HighPx = 17;
  if (this->_internal_highpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_highpx(), target);
  }

  // int64 LowPx = 18;
  if (this->_internal_lowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_lowpx(), target);
  }

  // int64 TotalBuyQty = 19;
  if (this->_internal_totalbuyqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_totalbuyqty(), target);
  }

  // int64 TotalSellQty = 20;
  if (this->_internal_totalsellqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(20, this->_internal_totalsellqty(), target);
  }

  // int64 WeightedAvgBuyPx = 21;
  if (this->_internal_weightedavgbuypx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_weightedavgbuypx(), target);
  }

  // int64 WeightedAvgSellPx = 22;
  if (this->_internal_weightedavgsellpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_weightedavgsellpx(), target);
  }

  // int64 TotalBuyNumber = 23;
  if (this->_internal_totalbuynumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_totalbuynumber(), target);
  }

  // int64 TotalSellNumber = 24;
  if (this->_internal_totalsellnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_totalsellnumber(), target);
  }

  // int32 NumBuyOrders = 25;
  if (this->_internal_numbuyorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_numbuyorders(), target);
  }

  // int32 NumSellOrders = 26;
  if (this->_internal_numsellorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_numsellorders(), target);
  }

  // int32 ExchangeDate = 27;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 28;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_exchangetime(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADEntryDetail BuyEntries = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buyentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_buyentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADEntryDetail SellEntries = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sellentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_sellentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 BuyMarketOrders = 32 [packed = true];
  {
    int byte_size = _impl_._buymarketorders_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          32, _internal_buymarketorders(), byte_size, target);
    }
  }

  // repeated int64 SellMarketOrders = 33 [packed = true];
  {
    int byte_size = _impl_._sellmarketorders_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          33, _internal_sellmarketorders(), byte_size, target);
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADEntryDetail afterMatchedBuyEntries = 34;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aftermatchedbuyentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_aftermatchedbuyentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADEntryDetail afterMatchedSellEntries = 35;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aftermatchedsellentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_aftermatchedsellentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 36;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_datamultiplepowerof10(), target);
  }

  // int64 MaxPx = 37;
  if (this->_internal_maxpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(37, this->_internal_maxpx(), target);
  }

  // int64 MinPx = 38;
  if (this->_internal_minpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(38, this->_internal_minpx(), target);
  }

  // int64 PreClosePx = 39;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(39, this->_internal_preclosepx(), target);
  }

  // int64 OpenPx = 40;
  if (this->_internal_openpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(40, this->_internal_openpx(), target);
  }

  // int64 ClosePx = 41;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(41, this->_internal_closepx(), target);
  }

  // int64 IOPV = 42;
  if (this->_internal_iopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(42, this->_internal_iopv(), target);
  }

  // int64 PreIOPV = 43;
  if (this->_internal_preiopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(43, this->_internal_preiopv(), target);
  }

  // int32 DataSource = 44;
  if (this->_internal_datasource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(44, this->_internal_datasource(), target);
  }

  // int32 Period = 45;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(45, this->_internal_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
  return target;
}

size_t ADOrderbookSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADEntryDetail BuyEntries = 30;
  total_size += 2UL * this->_internal_buyentries_size();
  for (const auto& msg : this->_impl_.buyentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADEntryDetail SellEntries = 31;
  total_size += 2UL * this->_internal_sellentries_size();
  for (const auto& msg : this->_impl_.sellentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 BuyMarketOrders = 32 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buymarketorders_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buymarketorders_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellMarketOrders = 33 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellmarketorders_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellmarketorders_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .com.htsc.mdc.insight.model.ADEntryDetail afterMatchedBuyEntries = 34;
  total_size += 2UL * this->_internal_aftermatchedbuyentries_size();
  for (const auto& msg : this->_impl_.aftermatchedbuyentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADEntryDetail afterMatchedSellEntries = 35;
  total_size += 2UL * this->_internal_aftermatchedsellentries_size();
  for (const auto& msg : this->_impl_.aftermatchedsellentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 ApplSeqNum = 9;
  if (this->_internal_applseqnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_applseqnum());
  }

  // int64 SnapshotMDDateTime = 10;
  if (this->_internal_snapshotmddatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_snapshotmddatetime());
  }

  // int64 NumTrades = 11;
  if (this->_internal_numtrades() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numtrades());
  }

  // int64 TotalVolumeTrade = 12;
  if (this->_internal_totalvolumetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvolumetrade());
  }

  // int64 TotalValueTrade = 13;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 LastPx = 14;
  if (this->_internal_lastpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpx());
  }

  // int32 ChannelNo = 8;
  if (this->_internal_channelno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelno());
  }

  // int32 NumBuyOrders = 25;
  if (this->_internal_numbuyorders() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_numbuyorders());
  }

  // int64 HighPx = 17;
  if (this->_internal_highpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_highpx());
  }

  // int64 LowPx = 18;
  if (this->_internal_lowpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lowpx());
  }

  // int64 TotalBuyQty = 19;
  if (this->_internal_totalbuyqty() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalbuyqty());
  }

  // int64 TotalSellQty = 20;
  if (this->_internal_totalsellqty() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalsellqty());
  }

  // int64 WeightedAvgBuyPx = 21;
  if (this->_internal_weightedavgbuypx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_weightedavgbuypx());
  }

  // int64 WeightedAvgSellPx = 22;
  if (this->_internal_weightedavgsellpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_weightedavgsellpx());
  }

  // int64 TotalBuyNumber = 23;
  if (this->_internal_totalbuynumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalbuynumber());
  }

  // int64 TotalSellNumber = 24;
  if (this->_internal_totalsellnumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalsellnumber());
  }

  // int32 NumSellOrders = 26;
  if (this->_internal_numsellorders() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_numsellorders());
  }

  // int32 ExchangeDate = 27;
  if (this->_internal_exchangedate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 28;
  if (this->_internal_exchangetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangetime());
  }

  // int32 DataMultiplePowerOf10 = 36;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  // int64 MaxPx = 37;
  if (this->_internal_maxpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_maxpx());
  }

  // int64 MinPx = 38;
  if (this->_internal_minpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_minpx());
  }

  // int64 PreClosePx = 39;
  if (this->_internal_preclosepx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preclosepx());
  }

  // int64 OpenPx = 40;
  if (this->_internal_openpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_openpx());
  }

  // int64 ClosePx = 41;
  if (this->_internal_closepx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closepx());
  }

  // int64 IOPV = 42;
  if (this->_internal_iopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_iopv());
  }

  // int64 PreIOPV = 43;
  if (this->_internal_preiopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preiopv());
  }

  // int32 DataSource = 44;
  if (this->_internal_datasource() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datasource());
  }

  // int32 Period = 45;
  if (this->_internal_period() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADOrderbookSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADOrderbookSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADOrderbookSnapshot::GetClassData() const { return &_class_data_; }


void ADOrderbookSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADOrderbookSnapshot*>(&to_msg);
  auto& from = static_cast<const ADOrderbookSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buyentries_.MergeFrom(from._impl_.buyentries_);
  _this->_impl_.sellentries_.MergeFrom(from._impl_.sellentries_);
  _this->_impl_.buymarketorders_.MergeFrom(from._impl_.buymarketorders_);
  _this->_impl_.sellmarketorders_.MergeFrom(from._impl_.sellmarketorders_);
  _this->_impl_.aftermatchedbuyentries_.MergeFrom(from._impl_.aftermatchedbuyentries_);
  _this->_impl_.aftermatchedsellentries_.MergeFrom(from._impl_.aftermatchedsellentries_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_applseqnum() != 0) {
    _this->_internal_set_applseqnum(from._internal_applseqnum());
  }
  if (from._internal_snapshotmddatetime() != 0) {
    _this->_internal_set_snapshotmddatetime(from._internal_snapshotmddatetime());
  }
  if (from._internal_numtrades() != 0) {
    _this->_internal_set_numtrades(from._internal_numtrades());
  }
  if (from._internal_totalvolumetrade() != 0) {
    _this->_internal_set_totalvolumetrade(from._internal_totalvolumetrade());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_lastpx() != 0) {
    _this->_internal_set_lastpx(from._internal_lastpx());
  }
  if (from._internal_channelno() != 0) {
    _this->_internal_set_channelno(from._internal_channelno());
  }
  if (from._internal_numbuyorders() != 0) {
    _this->_internal_set_numbuyorders(from._internal_numbuyorders());
  }
  if (from._internal_highpx() != 0) {
    _this->_internal_set_highpx(from._internal_highpx());
  }
  if (from._internal_lowpx() != 0) {
    _this->_internal_set_lowpx(from._internal_lowpx());
  }
  if (from._internal_totalbuyqty() != 0) {
    _this->_internal_set_totalbuyqty(from._internal_totalbuyqty());
  }
  if (from._internal_totalsellqty() != 0) {
    _this->_internal_set_totalsellqty(from._internal_totalsellqty());
  }
  if (from._internal_weightedavgbuypx() != 0) {
    _this->_internal_set_weightedavgbuypx(from._internal_weightedavgbuypx());
  }
  if (from._internal_weightedavgsellpx() != 0) {
    _this->_internal_set_weightedavgsellpx(from._internal_weightedavgsellpx());
  }
  if (from._internal_totalbuynumber() != 0) {
    _this->_internal_set_totalbuynumber(from._internal_totalbuynumber());
  }
  if (from._internal_totalsellnumber() != 0) {
    _this->_internal_set_totalsellnumber(from._internal_totalsellnumber());
  }
  if (from._internal_numsellorders() != 0) {
    _this->_internal_set_numsellorders(from._internal_numsellorders());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  if (from._internal_maxpx() != 0) {
    _this->_internal_set_maxpx(from._internal_maxpx());
  }
  if (from._internal_minpx() != 0) {
    _this->_internal_set_minpx(from._internal_minpx());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_openpx() != 0) {
    _this->_internal_set_openpx(from._internal_openpx());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_iopv() != 0) {
    _this->_internal_set_iopv(from._internal_iopv());
  }
  if (from._internal_preiopv() != 0) {
    _this->_internal_set_preiopv(from._internal_preiopv());
  }
  if (from._internal_datasource() != 0) {
    _this->_internal_set_datasource(from._internal_datasource());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADOrderbookSnapshot::CopyFrom(const ADOrderbookSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADOrderbookSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADOrderbookSnapshot::IsInitialized() const {
  return true;
}

void ADOrderbookSnapshot::InternalSwap(ADOrderbookSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buyentries_.InternalSwap(&other->_impl_.buyentries_);
  _impl_.sellentries_.InternalSwap(&other->_impl_.sellentries_);
  _impl_.buymarketorders_.InternalSwap(&other->_impl_.buymarketorders_);
  _impl_.sellmarketorders_.InternalSwap(&other->_impl_.sellmarketorders_);
  _impl_.aftermatchedbuyentries_.InternalSwap(&other->_impl_.aftermatchedbuyentries_);
  _impl_.aftermatchedsellentries_.InternalSwap(&other->_impl_.aftermatchedsellentries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADOrderbookSnapshot, _impl_.period_)
      + sizeof(ADOrderbookSnapshot::_impl_.period_)
      - PROTOBUF_FIELD_OFFSET(ADOrderbookSnapshot, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADOrderbookSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADOrderbookSnapshot_2eproto_getter, &descriptor_table_ADOrderbookSnapshot_2eproto_once,
      file_level_metadata_ADOrderbookSnapshot_2eproto[0]);
}

// ===================================================================

class ADEntryDetail::_Internal {
 public:
};

ADEntryDetail::ADEntryDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADEntryDetail)
}
ADEntryDetail::ADEntryDetail(const ADEntryDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADEntryDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orderqtylist_){from._impl_.orderqtylist_}
    , /*decltype(_impl_._orderqtylist_cached_byte_size_)*/{0}
    , decltype(_impl_.price_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.totalqty_){}
    , decltype(_impl_.numberoforders_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numberoforders_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.numberoforders_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADEntryDetail)
}

inline void ADEntryDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.orderqtylist_){arena}
    , /*decltype(_impl_._orderqtylist_cached_byte_size_)*/{0}
    , decltype(_impl_.price_){int64_t{0}}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.totalqty_){0}
    , decltype(_impl_.numberoforders_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADEntryDetail::~ADEntryDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADEntryDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADEntryDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orderqtylist_.~RepeatedField();
}

void ADEntryDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADEntryDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADEntryDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orderqtylist_.Clear();
  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.numberoforders_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.numberoforders_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADEntryDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TotalQty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.totalqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NumberOfOrders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.numberoforders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 OrderQtyList = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_orderqtylist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_orderqtylist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADEntryDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADEntryDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int64 Price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_price(), target);
  }

  // int32 TotalQty = 3;
  if (this->_internal_totalqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_totalqty(), target);
  }

  // int32 NumberOfOrders = 4;
  if (this->_internal_numberoforders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_numberoforders(), target);
  }

  // repeated int32 OrderQtyList = 5 [packed = true];
  {
    int byte_size = _impl_._orderqtylist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_orderqtylist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADEntryDetail)
  return target;
}

size_t ADEntryDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADEntryDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 OrderQtyList = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.orderqtylist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._orderqtylist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 Price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_price());
  }

  // int32 Level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 TotalQty = 3;
  if (this->_internal_totalqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_totalqty());
  }

  // int32 NumberOfOrders = 4;
  if (this->_internal_numberoforders() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numberoforders());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADEntryDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADEntryDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADEntryDetail::GetClassData() const { return &_class_data_; }


void ADEntryDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADEntryDetail*>(&to_msg);
  auto& from = static_cast<const ADEntryDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADEntryDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.orderqtylist_.MergeFrom(from._impl_.orderqtylist_);
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_totalqty() != 0) {
    _this->_internal_set_totalqty(from._internal_totalqty());
  }
  if (from._internal_numberoforders() != 0) {
    _this->_internal_set_numberoforders(from._internal_numberoforders());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADEntryDetail::CopyFrom(const ADEntryDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADEntryDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADEntryDetail::IsInitialized() const {
  return true;
}

void ADEntryDetail::InternalSwap(ADEntryDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.orderqtylist_.InternalSwap(&other->_impl_.orderqtylist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADEntryDetail, _impl_.numberoforders_)
      + sizeof(ADEntryDetail::_impl_.numberoforders_)
      - PROTOBUF_FIELD_OFFSET(ADEntryDetail, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADEntryDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADOrderbookSnapshot_2eproto_getter, &descriptor_table_ADOrderbookSnapshot_2eproto_once,
      file_level_metadata_ADOrderbookSnapshot_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADOrderbookSnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADOrderbookSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADOrderbookSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADEntryDetail*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADEntryDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADEntryDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
