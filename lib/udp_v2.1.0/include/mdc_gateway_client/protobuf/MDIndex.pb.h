// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDIndex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDIndex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDIndex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDIndex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDIndex_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDIndex_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDIndex;
struct MDIndexDefaultTypeInternal;
extern MDIndexDefaultTypeInternal _MDIndex_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDIndex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDIndex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDIndex) */ {
 public:
  inline MDIndex() : MDIndex(nullptr) {}
  ~MDIndex() override;
  explicit PROTOBUF_CONSTEXPR MDIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDIndex(const MDIndex& from);
  MDIndex(MDIndex&& from) noexcept
    : MDIndex() {
    *this = ::std::move(from);
  }

  inline MDIndex& operator=(const MDIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDIndex& operator=(MDIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDIndex* internal_default_instance() {
    return reinterpret_cast<const MDIndex*>(
               &_MDIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDIndex& a, MDIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(MDIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDIndex& from) {
    MDIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDIndex";
  }
  protected:
  explicit MDIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kMaxPxFieldNumber = 8,
    kMinPxFieldNumber = 9,
    kPreClosePxFieldNumber = 10,
    kNumTradesFieldNumber = 11,
    kTotalVolumeTradeFieldNumber = 12,
    kTotalValueTradeFieldNumber = 13,
    kLastPxFieldNumber = 14,
    kOpenPxFieldNumber = 15,
    kClosePxFieldNumber = 16,
    kHighPxFieldNumber = 17,
    kLowPxFieldNumber = 18,
    kChannelNoFieldNumber = 19,
    kExchangeDateFieldNumber = 20,
    kTotalBuyVolumeTradeFieldNumber = 22,
    kTotalBuyValueTradeFieldNumber = 23,
    kTotalBuyNumberFieldNumber = 24,
    kExchangeTimeFieldNumber = 21,
    kDataMultiplePowerOf10FieldNumber = 28,
    kTotalSellVolumeTradeFieldNumber = 25,
    kTotalSellValueTradeFieldNumber = 26,
    kTotalSellNumberFieldNumber = 27,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 MaxPx = 8;
  void clear_maxpx();
  int64_t maxpx() const;
  void set_maxpx(int64_t value);
  private:
  int64_t _internal_maxpx() const;
  void _internal_set_maxpx(int64_t value);
  public:

  // int64 MinPx = 9;
  void clear_minpx();
  int64_t minpx() const;
  void set_minpx(int64_t value);
  private:
  int64_t _internal_minpx() const;
  void _internal_set_minpx(int64_t value);
  public:

  // int64 PreClosePx = 10;
  void clear_preclosepx();
  int64_t preclosepx() const;
  void set_preclosepx(int64_t value);
  private:
  int64_t _internal_preclosepx() const;
  void _internal_set_preclosepx(int64_t value);
  public:

  // int64 NumTrades = 11;
  void clear_numtrades();
  int64_t numtrades() const;
  void set_numtrades(int64_t value);
  private:
  int64_t _internal_numtrades() const;
  void _internal_set_numtrades(int64_t value);
  public:

  // int64 TotalVolumeTrade = 12;
  void clear_totalvolumetrade();
  int64_t totalvolumetrade() const;
  void set_totalvolumetrade(int64_t value);
  private:
  int64_t _internal_totalvolumetrade() const;
  void _internal_set_totalvolumetrade(int64_t value);
  public:

  // int64 TotalValueTrade = 13;
  void clear_totalvaluetrade();
  int64_t totalvaluetrade() const;
  void set_totalvaluetrade(int64_t value);
  private:
  int64_t _internal_totalvaluetrade() const;
  void _internal_set_totalvaluetrade(int64_t value);
  public:

  // int64 LastPx = 14;
  void clear_lastpx();
  int64_t lastpx() const;
  void set_lastpx(int64_t value);
  private:
  int64_t _internal_lastpx() const;
  void _internal_set_lastpx(int64_t value);
  public:

  // int64 OpenPx = 15;
  void clear_openpx();
  int64_t openpx() const;
  void set_openpx(int64_t value);
  private:
  int64_t _internal_openpx() const;
  void _internal_set_openpx(int64_t value);
  public:

  // int64 ClosePx = 16;
  void clear_closepx();
  int64_t closepx() const;
  void set_closepx(int64_t value);
  private:
  int64_t _internal_closepx() const;
  void _internal_set_closepx(int64_t value);
  public:

  // int64 HighPx = 17;
  void clear_highpx();
  int64_t highpx() const;
  void set_highpx(int64_t value);
  private:
  int64_t _internal_highpx() const;
  void _internal_set_highpx(int64_t value);
  public:

  // int64 LowPx = 18;
  void clear_lowpx();
  int64_t lowpx() const;
  void set_lowpx(int64_t value);
  private:
  int64_t _internal_lowpx() const;
  void _internal_set_lowpx(int64_t value);
  public:

  // int32 ChannelNo = 19;
  void clear_channelno();
  int32_t channelno() const;
  void set_channelno(int32_t value);
  private:
  int32_t _internal_channelno() const;
  void _internal_set_channelno(int32_t value);
  public:

  // int32 ExchangeDate = 20;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int64 TotalBuyVolumeTrade = 22;
  void clear_totalbuyvolumetrade();
  int64_t totalbuyvolumetrade() const;
  void set_totalbuyvolumetrade(int64_t value);
  private:
  int64_t _internal_totalbuyvolumetrade() const;
  void _internal_set_totalbuyvolumetrade(int64_t value);
  public:

  // int64 TotalBuyValueTrade = 23;
  void clear_totalbuyvaluetrade();
  int64_t totalbuyvaluetrade() const;
  void set_totalbuyvaluetrade(int64_t value);
  private:
  int64_t _internal_totalbuyvaluetrade() const;
  void _internal_set_totalbuyvaluetrade(int64_t value);
  public:

  // int64 TotalBuyNumber = 24;
  void clear_totalbuynumber();
  int64_t totalbuynumber() const;
  void set_totalbuynumber(int64_t value);
  private:
  int64_t _internal_totalbuynumber() const;
  void _internal_set_totalbuynumber(int64_t value);
  public:

  // int32 ExchangeTime = 21;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 28;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // int64 TotalSellVolumeTrade = 25;
  void clear_totalsellvolumetrade();
  int64_t totalsellvolumetrade() const;
  void set_totalsellvolumetrade(int64_t value);
  private:
  int64_t _internal_totalsellvolumetrade() const;
  void _internal_set_totalsellvolumetrade(int64_t value);
  public:

  // int64 TotalSellValueTrade = 26;
  void clear_totalsellvaluetrade();
  int64_t totalsellvaluetrade() const;
  void set_totalsellvaluetrade(int64_t value);
  private:
  int64_t _internal_totalsellvaluetrade() const;
  void _internal_set_totalsellvaluetrade(int64_t value);
  public:

  // int64 TotalSellNumber = 27;
  void clear_totalsellnumber();
  int64_t totalsellnumber() const;
  void set_totalsellnumber(int64_t value);
  private:
  int64_t _internal_totalsellnumber() const;
  void _internal_set_totalsellnumber(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t maxpx_;
    int64_t minpx_;
    int64_t preclosepx_;
    int64_t numtrades_;
    int64_t totalvolumetrade_;
    int64_t totalvaluetrade_;
    int64_t lastpx_;
    int64_t openpx_;
    int64_t closepx_;
    int64_t highpx_;
    int64_t lowpx_;
    int32_t channelno_;
    int32_t exchangedate_;
    int64_t totalbuyvolumetrade_;
    int64_t totalbuyvaluetrade_;
    int64_t totalbuynumber_;
    int32_t exchangetime_;
    int32_t datamultiplepowerof10_;
    int64_t totalsellvolumetrade_;
    int64_t totalsellvaluetrade_;
    int64_t totalsellnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDIndex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDIndex

// string HTSCSecurityID = 1;
inline void MDIndex::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDIndex::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDIndex::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.HTSCSecurityID)
}
inline std::string* MDIndex::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDIndex.HTSCSecurityID)
  return _s;
}
inline const std::string& MDIndex::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDIndex::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDIndex::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDIndex::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDIndex.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDIndex::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDIndex.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDIndex::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDIndex::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDIndex::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.MDDate)
  return _internal_mddate();
}
inline void MDIndex::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDIndex::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.MDDate)
}

// int32 MDTime = 3;
inline void MDIndex::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDIndex::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDIndex::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.MDTime)
  return _internal_mdtime();
}
inline void MDIndex::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDIndex::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDIndex::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDIndex::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDIndex::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDIndex::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDIndex::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDIndex::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDIndex::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDIndex::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TradingPhaseCode)
}
inline std::string* MDIndex::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDIndex.TradingPhaseCode)
  return _s;
}
inline const std::string& MDIndex::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDIndex::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDIndex::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDIndex::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDIndex.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDIndex::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDIndex.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDIndex::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDIndex::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDIndex::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.securityIDSource)
  return _internal_securityidsource();
}
inline void MDIndex::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDIndex::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDIndex::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDIndex::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDIndex::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.securityType)
  return _internal_securitytype();
}
inline void MDIndex::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDIndex::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.securityType)
}

// int64 MaxPx = 8;
inline void MDIndex::clear_maxpx() {
  _impl_.maxpx_ = int64_t{0};
}
inline int64_t MDIndex::_internal_maxpx() const {
  return _impl_.maxpx_;
}
inline int64_t MDIndex::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.MaxPx)
  return _internal_maxpx();
}
inline void MDIndex::_internal_set_maxpx(int64_t value) {
  
  _impl_.maxpx_ = value;
}
inline void MDIndex::set_maxpx(int64_t value) {
  _internal_set_maxpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.MaxPx)
}

// int64 MinPx = 9;
inline void MDIndex::clear_minpx() {
  _impl_.minpx_ = int64_t{0};
}
inline int64_t MDIndex::_internal_minpx() const {
  return _impl_.minpx_;
}
inline int64_t MDIndex::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.MinPx)
  return _internal_minpx();
}
inline void MDIndex::_internal_set_minpx(int64_t value) {
  
  _impl_.minpx_ = value;
}
inline void MDIndex::set_minpx(int64_t value) {
  _internal_set_minpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.MinPx)
}

// int64 PreClosePx = 10;
inline void MDIndex::clear_preclosepx() {
  _impl_.preclosepx_ = int64_t{0};
}
inline int64_t MDIndex::_internal_preclosepx() const {
  return _impl_.preclosepx_;
}
inline int64_t MDIndex::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.PreClosePx)
  return _internal_preclosepx();
}
inline void MDIndex::_internal_set_preclosepx(int64_t value) {
  
  _impl_.preclosepx_ = value;
}
inline void MDIndex::set_preclosepx(int64_t value) {
  _internal_set_preclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.PreClosePx)
}

// int64 NumTrades = 11;
inline void MDIndex::clear_numtrades() {
  _impl_.numtrades_ = int64_t{0};
}
inline int64_t MDIndex::_internal_numtrades() const {
  return _impl_.numtrades_;
}
inline int64_t MDIndex::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.NumTrades)
  return _internal_numtrades();
}
inline void MDIndex::_internal_set_numtrades(int64_t value) {
  
  _impl_.numtrades_ = value;
}
inline void MDIndex::set_numtrades(int64_t value) {
  _internal_set_numtrades(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.NumTrades)
}

// int64 TotalVolumeTrade = 12;
inline void MDIndex::clear_totalvolumetrade() {
  _impl_.totalvolumetrade_ = int64_t{0};
}
inline int64_t MDIndex::_internal_totalvolumetrade() const {
  return _impl_.totalvolumetrade_;
}
inline int64_t MDIndex::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TotalVolumeTrade)
  return _internal_totalvolumetrade();
}
inline void MDIndex::_internal_set_totalvolumetrade(int64_t value) {
  
  _impl_.totalvolumetrade_ = value;
}
inline void MDIndex::set_totalvolumetrade(int64_t value) {
  _internal_set_totalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TotalVolumeTrade)
}

// int64 TotalValueTrade = 13;
inline void MDIndex::clear_totalvaluetrade() {
  _impl_.totalvaluetrade_ = int64_t{0};
}
inline int64_t MDIndex::_internal_totalvaluetrade() const {
  return _impl_.totalvaluetrade_;
}
inline int64_t MDIndex::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TotalValueTrade)
  return _internal_totalvaluetrade();
}
inline void MDIndex::_internal_set_totalvaluetrade(int64_t value) {
  
  _impl_.totalvaluetrade_ = value;
}
inline void MDIndex::set_totalvaluetrade(int64_t value) {
  _internal_set_totalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TotalValueTrade)
}

// int64 LastPx = 14;
inline void MDIndex::clear_lastpx() {
  _impl_.lastpx_ = int64_t{0};
}
inline int64_t MDIndex::_internal_lastpx() const {
  return _impl_.lastpx_;
}
inline int64_t MDIndex::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.LastPx)
  return _internal_lastpx();
}
inline void MDIndex::_internal_set_lastpx(int64_t value) {
  
  _impl_.lastpx_ = value;
}
inline void MDIndex::set_lastpx(int64_t value) {
  _internal_set_lastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.LastPx)
}

// int64 OpenPx = 15;
inline void MDIndex::clear_openpx() {
  _impl_.openpx_ = int64_t{0};
}
inline int64_t MDIndex::_internal_openpx() const {
  return _impl_.openpx_;
}
inline int64_t MDIndex::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.OpenPx)
  return _internal_openpx();
}
inline void MDIndex::_internal_set_openpx(int64_t value) {
  
  _impl_.openpx_ = value;
}
inline void MDIndex::set_openpx(int64_t value) {
  _internal_set_openpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.OpenPx)
}

// int64 ClosePx = 16;
inline void MDIndex::clear_closepx() {
  _impl_.closepx_ = int64_t{0};
}
inline int64_t MDIndex::_internal_closepx() const {
  return _impl_.closepx_;
}
inline int64_t MDIndex::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.ClosePx)
  return _internal_closepx();
}
inline void MDIndex::_internal_set_closepx(int64_t value) {
  
  _impl_.closepx_ = value;
}
inline void MDIndex::set_closepx(int64_t value) {
  _internal_set_closepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.ClosePx)
}

// int64 HighPx = 17;
inline void MDIndex::clear_highpx() {
  _impl_.highpx_ = int64_t{0};
}
inline int64_t MDIndex::_internal_highpx() const {
  return _impl_.highpx_;
}
inline int64_t MDIndex::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.HighPx)
  return _internal_highpx();
}
inline void MDIndex::_internal_set_highpx(int64_t value) {
  
  _impl_.highpx_ = value;
}
inline void MDIndex::set_highpx(int64_t value) {
  _internal_set_highpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.HighPx)
}

// int64 LowPx = 18;
inline void MDIndex::clear_lowpx() {
  _impl_.lowpx_ = int64_t{0};
}
inline int64_t MDIndex::_internal_lowpx() const {
  return _impl_.lowpx_;
}
inline int64_t MDIndex::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.LowPx)
  return _internal_lowpx();
}
inline void MDIndex::_internal_set_lowpx(int64_t value) {
  
  _impl_.lowpx_ = value;
}
inline void MDIndex::set_lowpx(int64_t value) {
  _internal_set_lowpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.LowPx)
}

// int32 ChannelNo = 19;
inline void MDIndex::clear_channelno() {
  _impl_.channelno_ = 0;
}
inline int32_t MDIndex::_internal_channelno() const {
  return _impl_.channelno_;
}
inline int32_t MDIndex::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.ChannelNo)
  return _internal_channelno();
}
inline void MDIndex::_internal_set_channelno(int32_t value) {
  
  _impl_.channelno_ = value;
}
inline void MDIndex::set_channelno(int32_t value) {
  _internal_set_channelno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.ChannelNo)
}

// int32 ExchangeDate = 20;
inline void MDIndex::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDIndex::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDIndex::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDIndex::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDIndex::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.ExchangeDate)
}

// int32 ExchangeTime = 21;
inline void MDIndex::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDIndex::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDIndex::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDIndex::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDIndex::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.ExchangeTime)
}

// int64 TotalBuyVolumeTrade = 22;
inline void MDIndex::clear_totalbuyvolumetrade() {
  _impl_.totalbuyvolumetrade_ = int64_t{0};
}
inline int64_t MDIndex::_internal_totalbuyvolumetrade() const {
  return _impl_.totalbuyvolumetrade_;
}
inline int64_t MDIndex::totalbuyvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TotalBuyVolumeTrade)
  return _internal_totalbuyvolumetrade();
}
inline void MDIndex::_internal_set_totalbuyvolumetrade(int64_t value) {
  
  _impl_.totalbuyvolumetrade_ = value;
}
inline void MDIndex::set_totalbuyvolumetrade(int64_t value) {
  _internal_set_totalbuyvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TotalBuyVolumeTrade)
}

// int64 TotalBuyValueTrade = 23;
inline void MDIndex::clear_totalbuyvaluetrade() {
  _impl_.totalbuyvaluetrade_ = int64_t{0};
}
inline int64_t MDIndex::_internal_totalbuyvaluetrade() const {
  return _impl_.totalbuyvaluetrade_;
}
inline int64_t MDIndex::totalbuyvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TotalBuyValueTrade)
  return _internal_totalbuyvaluetrade();
}
inline void MDIndex::_internal_set_totalbuyvaluetrade(int64_t value) {
  
  _impl_.totalbuyvaluetrade_ = value;
}
inline void MDIndex::set_totalbuyvaluetrade(int64_t value) {
  _internal_set_totalbuyvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TotalBuyValueTrade)
}

// int64 TotalBuyNumber = 24;
inline void MDIndex::clear_totalbuynumber() {
  _impl_.totalbuynumber_ = int64_t{0};
}
inline int64_t MDIndex::_internal_totalbuynumber() const {
  return _impl_.totalbuynumber_;
}
inline int64_t MDIndex::totalbuynumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TotalBuyNumber)
  return _internal_totalbuynumber();
}
inline void MDIndex::_internal_set_totalbuynumber(int64_t value) {
  
  _impl_.totalbuynumber_ = value;
}
inline void MDIndex::set_totalbuynumber(int64_t value) {
  _internal_set_totalbuynumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TotalBuyNumber)
}

// int64 TotalSellVolumeTrade = 25;
inline void MDIndex::clear_totalsellvolumetrade() {
  _impl_.totalsellvolumetrade_ = int64_t{0};
}
inline int64_t MDIndex::_internal_totalsellvolumetrade() const {
  return _impl_.totalsellvolumetrade_;
}
inline int64_t MDIndex::totalsellvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TotalSellVolumeTrade)
  return _internal_totalsellvolumetrade();
}
inline void MDIndex::_internal_set_totalsellvolumetrade(int64_t value) {
  
  _impl_.totalsellvolumetrade_ = value;
}
inline void MDIndex::set_totalsellvolumetrade(int64_t value) {
  _internal_set_totalsellvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TotalSellVolumeTrade)
}

// int64 TotalSellValueTrade = 26;
inline void MDIndex::clear_totalsellvaluetrade() {
  _impl_.totalsellvaluetrade_ = int64_t{0};
}
inline int64_t MDIndex::_internal_totalsellvaluetrade() const {
  return _impl_.totalsellvaluetrade_;
}
inline int64_t MDIndex::totalsellvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TotalSellValueTrade)
  return _internal_totalsellvaluetrade();
}
inline void MDIndex::_internal_set_totalsellvaluetrade(int64_t value) {
  
  _impl_.totalsellvaluetrade_ = value;
}
inline void MDIndex::set_totalsellvaluetrade(int64_t value) {
  _internal_set_totalsellvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TotalSellValueTrade)
}

// int64 TotalSellNumber = 27;
inline void MDIndex::clear_totalsellnumber() {
  _impl_.totalsellnumber_ = int64_t{0};
}
inline int64_t MDIndex::_internal_totalsellnumber() const {
  return _impl_.totalsellnumber_;
}
inline int64_t MDIndex::totalsellnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.TotalSellNumber)
  return _internal_totalsellnumber();
}
inline void MDIndex::_internal_set_totalsellnumber(int64_t value) {
  
  _impl_.totalsellnumber_ = value;
}
inline void MDIndex::set_totalsellnumber(int64_t value) {
  _internal_set_totalsellnumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.TotalSellNumber)
}

// int32 DataMultiplePowerOf10 = 28;
inline void MDIndex::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDIndex::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDIndex::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDIndex.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDIndex::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDIndex::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDIndex.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDIndex_2eproto
