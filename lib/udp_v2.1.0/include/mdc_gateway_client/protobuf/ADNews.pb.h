// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADNews.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADNews_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADNews_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADNews_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADNews_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADNews_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADInvolvedSecurity;
struct ADInvolvedSecurityDefaultTypeInternal;
extern ADInvolvedSecurityDefaultTypeInternal _ADInvolvedSecurity_default_instance_;
class ADNews;
struct ADNewsDefaultTypeInternal;
extern ADNewsDefaultTypeInternal _ADNews_default_instance_;
class ADNewsDataEntry;
struct ADNewsDataEntryDefaultTypeInternal;
extern ADNewsDataEntryDefaultTypeInternal _ADNewsDataEntry_default_instance_;
class ADNewsEmotion;
struct ADNewsEmotionDefaultTypeInternal;
extern ADNewsEmotionDefaultTypeInternal _ADNewsEmotion_default_instance_;
class ADRelatedCompany;
struct ADRelatedCompanyDefaultTypeInternal;
extern ADRelatedCompanyDefaultTypeInternal _ADRelatedCompany_default_instance_;
class ADRelatedPerson;
struct ADRelatedPersonDefaultTypeInternal;
extern ADRelatedPersonDefaultTypeInternal _ADRelatedPerson_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADInvolvedSecurity* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADInvolvedSecurity>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADNews* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADNews>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADNewsDataEntry* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADNewsDataEntry>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADNewsEmotion* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADNewsEmotion>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADRelatedCompany* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADRelatedCompany>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADRelatedPerson* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADRelatedPerson>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADNews final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADNews) */ {
 public:
  inline ADNews() : ADNews(nullptr) {}
  ~ADNews() override;
  explicit PROTOBUF_CONSTEXPR ADNews(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADNews(const ADNews& from);
  ADNews(ADNews&& from) noexcept
    : ADNews() {
    *this = ::std::move(from);
  }

  inline ADNews& operator=(const ADNews& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADNews& operator=(ADNews&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADNews& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADNews* internal_default_instance() {
    return reinterpret_cast<const ADNews*>(
               &_ADNews_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADNews& a, ADNews& b) {
    a.Swap(&b);
  }
  inline void Swap(ADNews* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADNews* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADNews* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADNews>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADNews& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADNews& from) {
    ADNews::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADNews* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADNews";
  }
  protected:
  explicit ADNews(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuListFieldNumber = 21,
    kPerEmListFieldNumber = 22,
    kComEmListFieldNumber = 23,
    kSentimentContentFieldNumber = 25,
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kAuthorFieldNumber = 8,
    kContentFieldNumber = 9,
    kEventCatFieldNumber = 10,
    kEventNameFieldNumber = 11,
    kIdFieldNumber = 13,
    kIndustryFieldNumber = 14,
    kNewsTimeFieldNumber = 16,
    kSummFieldNumber = 17,
    kTitleFieldNumber = 18,
    kUrlFieldNumber = 19,
    kNewsEmotionFieldNumber = 20,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kNewsHotFieldNumber = 15,
    kEventPosFieldNumber = 12,
    kDataMultiplePowerOf10FieldNumber = 24,
  };
  // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
  int seculist_size() const;
  private:
  int _internal_seculist_size() const;
  public:
  void clear_seculist();
  ::com::htsc::mdc::insight::model::ADInvolvedSecurity* mutable_seculist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >*
      mutable_seculist();
  private:
  const ::com::htsc::mdc::insight::model::ADInvolvedSecurity& _internal_seculist(int index) const;
  ::com::htsc::mdc::insight::model::ADInvolvedSecurity* _internal_add_seculist();
  public:
  const ::com::htsc::mdc::insight::model::ADInvolvedSecurity& seculist(int index) const;
  ::com::htsc::mdc::insight::model::ADInvolvedSecurity* add_seculist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >&
      seculist() const;

  // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
  int peremlist_size() const;
  private:
  int _internal_peremlist_size() const;
  public:
  void clear_peremlist();
  ::com::htsc::mdc::insight::model::ADRelatedPerson* mutable_peremlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson >*
      mutable_peremlist();
  private:
  const ::com::htsc::mdc::insight::model::ADRelatedPerson& _internal_peremlist(int index) const;
  ::com::htsc::mdc::insight::model::ADRelatedPerson* _internal_add_peremlist();
  public:
  const ::com::htsc::mdc::insight::model::ADRelatedPerson& peremlist(int index) const;
  ::com::htsc::mdc::insight::model::ADRelatedPerson* add_peremlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson >&
      peremlist() const;

  // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
  int comemlist_size() const;
  private:
  int _internal_comemlist_size() const;
  public:
  void clear_comemlist();
  ::com::htsc::mdc::insight::model::ADRelatedCompany* mutable_comemlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany >*
      mutable_comemlist();
  private:
  const ::com::htsc::mdc::insight::model::ADRelatedCompany& _internal_comemlist(int index) const;
  ::com::htsc::mdc::insight::model::ADRelatedCompany* _internal_add_comemlist();
  public:
  const ::com::htsc::mdc::insight::model::ADRelatedCompany& comemlist(int index) const;
  ::com::htsc::mdc::insight::model::ADRelatedCompany* add_comemlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany >&
      comemlist() const;

  // repeated .com.htsc.mdc.insight.model.ADNewsDataEntry sentimentContent = 25;
  int sentimentcontent_size() const;
  private:
  int _internal_sentimentcontent_size() const;
  public:
  void clear_sentimentcontent();
  ::com::htsc::mdc::insight::model::ADNewsDataEntry* mutable_sentimentcontent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADNewsDataEntry >*
      mutable_sentimentcontent();
  private:
  const ::com::htsc::mdc::insight::model::ADNewsDataEntry& _internal_sentimentcontent(int index) const;
  ::com::htsc::mdc::insight::model::ADNewsDataEntry* _internal_add_sentimentcontent();
  public:
  const ::com::htsc::mdc::insight::model::ADNewsDataEntry& sentimentcontent(int index) const;
  ::com::htsc::mdc::insight::model::ADNewsDataEntry* add_sentimentcontent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADNewsDataEntry >&
      sentimentcontent() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // string author = 8;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string content = 9;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string eventCat = 10;
  void clear_eventcat();
  const std::string& eventcat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eventcat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eventcat();
  PROTOBUF_NODISCARD std::string* release_eventcat();
  void set_allocated_eventcat(std::string* eventcat);
  private:
  const std::string& _internal_eventcat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eventcat(const std::string& value);
  std::string* _internal_mutable_eventcat();
  public:

  // string eventName = 11;
  void clear_eventname();
  const std::string& eventname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eventname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eventname();
  PROTOBUF_NODISCARD std::string* release_eventname();
  void set_allocated_eventname(std::string* eventname);
  private:
  const std::string& _internal_eventname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eventname(const std::string& value);
  std::string* _internal_mutable_eventname();
  public:

  // string id = 13;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string industry = 14;
  void clear_industry();
  const std::string& industry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_industry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_industry();
  PROTOBUF_NODISCARD std::string* release_industry();
  void set_allocated_industry(std::string* industry);
  private:
  const std::string& _internal_industry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_industry(const std::string& value);
  std::string* _internal_mutable_industry();
  public:

  // string newsTime = 16;
  void clear_newstime();
  const std::string& newstime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newstime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newstime();
  PROTOBUF_NODISCARD std::string* release_newstime();
  void set_allocated_newstime(std::string* newstime);
  private:
  const std::string& _internal_newstime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newstime(const std::string& value);
  std::string* _internal_mutable_newstime();
  public:

  // string summ = 17;
  void clear_summ();
  const std::string& summ() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_summ(ArgT0&& arg0, ArgT... args);
  std::string* mutable_summ();
  PROTOBUF_NODISCARD std::string* release_summ();
  void set_allocated_summ(std::string* summ);
  private:
  const std::string& _internal_summ() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summ(const std::string& value);
  std::string* _internal_mutable_summ();
  public:

  // string title = 18;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string url = 19;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
  bool has_newsemotion() const;
  private:
  bool _internal_has_newsemotion() const;
  public:
  void clear_newsemotion();
  const ::com::htsc::mdc::insight::model::ADNewsEmotion& newsemotion() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADNewsEmotion* release_newsemotion();
  ::com::htsc::mdc::insight::model::ADNewsEmotion* mutable_newsemotion();
  void set_allocated_newsemotion(::com::htsc::mdc::insight::model::ADNewsEmotion* newsemotion);
  private:
  const ::com::htsc::mdc::insight::model::ADNewsEmotion& _internal_newsemotion() const;
  ::com::htsc::mdc::insight::model::ADNewsEmotion* _internal_mutable_newsemotion();
  public:
  void unsafe_arena_set_allocated_newsemotion(
      ::com::htsc::mdc::insight::model::ADNewsEmotion* newsemotion);
  ::com::htsc::mdc::insight::model::ADNewsEmotion* unsafe_arena_release_newsemotion();

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // double newsHot = 15;
  void clear_newshot();
  double newshot() const;
  void set_newshot(double value);
  private:
  double _internal_newshot() const;
  void _internal_set_newshot(double value);
  public:

  // int32 eventPos = 12;
  void clear_eventpos();
  int32_t eventpos() const;
  void set_eventpos(int32_t value);
  private:
  int32_t _internal_eventpos() const;
  void _internal_set_eventpos(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 24;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADNews)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity > seculist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson > peremlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany > comemlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADNewsDataEntry > sentimentcontent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventcat_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr industry_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newstime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summ_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::com::htsc::mdc::insight::model::ADNewsEmotion* newsemotion_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    double newshot_;
    int32_t eventpos_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADNews_2eproto;
};
// -------------------------------------------------------------------

class ADNewsEmotion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADNewsEmotion) */ {
 public:
  inline ADNewsEmotion() : ADNewsEmotion(nullptr) {}
  ~ADNewsEmotion() override;
  explicit PROTOBUF_CONSTEXPR ADNewsEmotion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADNewsEmotion(const ADNewsEmotion& from);
  ADNewsEmotion(ADNewsEmotion&& from) noexcept
    : ADNewsEmotion() {
    *this = ::std::move(from);
  }

  inline ADNewsEmotion& operator=(const ADNewsEmotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADNewsEmotion& operator=(ADNewsEmotion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADNewsEmotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADNewsEmotion* internal_default_instance() {
    return reinterpret_cast<const ADNewsEmotion*>(
               &_ADNewsEmotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ADNewsEmotion& a, ADNewsEmotion& b) {
    a.Swap(&b);
  }
  inline void Swap(ADNewsEmotion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADNewsEmotion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADNewsEmotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADNewsEmotion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADNewsEmotion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADNewsEmotion& from) {
    ADNewsEmotion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADNewsEmotion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADNewsEmotion";
  }
  protected:
  explicit ADNewsEmotion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNegativeFieldNumber = 1,
    kNeutralFieldNumber = 2,
    kPositiveFieldNumber = 4,
    kPosFieldNumber = 3,
  };
  // double negative = 1;
  void clear_negative();
  double negative() const;
  void set_negative(double value);
  private:
  double _internal_negative() const;
  void _internal_set_negative(double value);
  public:

  // double neutral = 2;
  void clear_neutral();
  double neutral() const;
  void set_neutral(double value);
  private:
  double _internal_neutral() const;
  void _internal_set_neutral(double value);
  public:

  // double positive = 4;
  void clear_positive();
  double positive() const;
  void set_positive(double value);
  private:
  double _internal_positive() const;
  void _internal_set_positive(double value);
  public:

  // int32 pos = 3;
  void clear_pos();
  int32_t pos() const;
  void set_pos(int32_t value);
  private:
  int32_t _internal_pos() const;
  void _internal_set_pos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADNewsEmotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double negative_;
    double neutral_;
    double positive_;
    int32_t pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADNews_2eproto;
};
// -------------------------------------------------------------------

class ADInvolvedSecurity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADInvolvedSecurity) */ {
 public:
  inline ADInvolvedSecurity() : ADInvolvedSecurity(nullptr) {}
  ~ADInvolvedSecurity() override;
  explicit PROTOBUF_CONSTEXPR ADInvolvedSecurity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADInvolvedSecurity(const ADInvolvedSecurity& from);
  ADInvolvedSecurity(ADInvolvedSecurity&& from) noexcept
    : ADInvolvedSecurity() {
    *this = ::std::move(from);
  }

  inline ADInvolvedSecurity& operator=(const ADInvolvedSecurity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADInvolvedSecurity& operator=(ADInvolvedSecurity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADInvolvedSecurity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADInvolvedSecurity* internal_default_instance() {
    return reinterpret_cast<const ADInvolvedSecurity*>(
               &_ADInvolvedSecurity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ADInvolvedSecurity& a, ADInvolvedSecurity& b) {
    a.Swap(&b);
  }
  inline void Swap(ADInvolvedSecurity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADInvolvedSecurity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADInvolvedSecurity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADInvolvedSecurity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADInvolvedSecurity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADInvolvedSecurity& from) {
    ADInvolvedSecurity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADInvolvedSecurity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADInvolvedSecurity";
  }
  protected:
  explicit ADInvolvedSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComCodeFieldNumber = 1,
    kSecuCodeFieldNumber = 2,
    kSecuNameFieldNumber = 3,
    kHTSCSecurityIDFieldNumber = 4,
  };
  // string comCode = 1;
  void clear_comcode();
  const std::string& comcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comcode();
  PROTOBUF_NODISCARD std::string* release_comcode();
  void set_allocated_comcode(std::string* comcode);
  private:
  const std::string& _internal_comcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comcode(const std::string& value);
  std::string* _internal_mutable_comcode();
  public:

  // string secuCode = 2;
  void clear_secucode();
  const std::string& secucode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secucode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secucode();
  PROTOBUF_NODISCARD std::string* release_secucode();
  void set_allocated_secucode(std::string* secucode);
  private:
  const std::string& _internal_secucode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secucode(const std::string& value);
  std::string* _internal_mutable_secucode();
  public:

  // string secuName = 3;
  void clear_secuname();
  const std::string& secuname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secuname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secuname();
  PROTOBUF_NODISCARD std::string* release_secuname();
  void set_allocated_secuname(std::string* secuname);
  private:
  const std::string& _internal_secuname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secuname(const std::string& value);
  std::string* _internal_mutable_secuname();
  public:

  // string HTSCSecurityID = 4;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADInvolvedSecurity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secucode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secuname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADNews_2eproto;
};
// -------------------------------------------------------------------

class ADRelatedCompany final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADRelatedCompany) */ {
 public:
  inline ADRelatedCompany() : ADRelatedCompany(nullptr) {}
  ~ADRelatedCompany() override;
  explicit PROTOBUF_CONSTEXPR ADRelatedCompany(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADRelatedCompany(const ADRelatedCompany& from);
  ADRelatedCompany(ADRelatedCompany&& from) noexcept
    : ADRelatedCompany() {
    *this = ::std::move(from);
  }

  inline ADRelatedCompany& operator=(const ADRelatedCompany& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADRelatedCompany& operator=(ADRelatedCompany&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADRelatedCompany& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADRelatedCompany* internal_default_instance() {
    return reinterpret_cast<const ADRelatedCompany*>(
               &_ADRelatedCompany_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ADRelatedCompany& a, ADRelatedCompany& b) {
    a.Swap(&b);
  }
  inline void Swap(ADRelatedCompany* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADRelatedCompany* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADRelatedCompany* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADRelatedCompany>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADRelatedCompany& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADRelatedCompany& from) {
    ADRelatedCompany::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADRelatedCompany* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADRelatedCompany";
  }
  protected:
  explicit ADRelatedCompany(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChinameFieldNumber = 1,
    kComCodeFieldNumber = 2,
    kComFieldNumber = 3,
    kSecuCodeFieldNumber = 5,
    kHTSCSecurityIDFieldNumber = 6,
    kGeneralPosFieldNumber = 4,
  };
  // string chiname = 1;
  void clear_chiname();
  const std::string& chiname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chiname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chiname();
  PROTOBUF_NODISCARD std::string* release_chiname();
  void set_allocated_chiname(std::string* chiname);
  private:
  const std::string& _internal_chiname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chiname(const std::string& value);
  std::string* _internal_mutable_chiname();
  public:

  // string comCode = 2;
  void clear_comcode();
  const std::string& comcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comcode();
  PROTOBUF_NODISCARD std::string* release_comcode();
  void set_allocated_comcode(std::string* comcode);
  private:
  const std::string& _internal_comcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comcode(const std::string& value);
  std::string* _internal_mutable_comcode();
  public:

  // string com = 3;
  void clear_com();
  const std::string& com() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_com(ArgT0&& arg0, ArgT... args);
  std::string* mutable_com();
  PROTOBUF_NODISCARD std::string* release_com();
  void set_allocated_com(std::string* com);
  private:
  const std::string& _internal_com() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_com(const std::string& value);
  std::string* _internal_mutable_com();
  public:

  // string secuCode = 5;
  void clear_secucode();
  const std::string& secucode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secucode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secucode();
  PROTOBUF_NODISCARD std::string* release_secucode();
  void set_allocated_secucode(std::string* secucode);
  private:
  const std::string& _internal_secucode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secucode(const std::string& value);
  std::string* _internal_mutable_secucode();
  public:

  // string HTSCSecurityID = 6;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // int32 generalPos = 4;
  void clear_generalpos();
  int32_t generalpos() const;
  void set_generalpos(int32_t value);
  private:
  int32_t _internal_generalpos() const;
  void _internal_set_generalpos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADRelatedCompany)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chiname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr com_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secucode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    int32_t generalpos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADNews_2eproto;
};
// -------------------------------------------------------------------

class ADRelatedPerson final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADRelatedPerson) */ {
 public:
  inline ADRelatedPerson() : ADRelatedPerson(nullptr) {}
  ~ADRelatedPerson() override;
  explicit PROTOBUF_CONSTEXPR ADRelatedPerson(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADRelatedPerson(const ADRelatedPerson& from);
  ADRelatedPerson(ADRelatedPerson&& from) noexcept
    : ADRelatedPerson() {
    *this = ::std::move(from);
  }

  inline ADRelatedPerson& operator=(const ADRelatedPerson& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADRelatedPerson& operator=(ADRelatedPerson&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADRelatedPerson& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADRelatedPerson* internal_default_instance() {
    return reinterpret_cast<const ADRelatedPerson*>(
               &_ADRelatedPerson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ADRelatedPerson& a, ADRelatedPerson& b) {
    a.Swap(&b);
  }
  inline void Swap(ADRelatedPerson* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADRelatedPerson* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADRelatedPerson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADRelatedPerson>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADRelatedPerson& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADRelatedPerson& from) {
    ADRelatedPerson::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADRelatedPerson* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADRelatedPerson";
  }
  protected:
  explicit ADRelatedPerson(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerFieldNumber = 1,
    kComCodeFieldNumber = 2,
    kComFieldNumber = 3,
    kGeneralPosFieldNumber = 4,
  };
  // string per = 1;
  void clear_per();
  const std::string& per() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_per(ArgT0&& arg0, ArgT... args);
  std::string* mutable_per();
  PROTOBUF_NODISCARD std::string* release_per();
  void set_allocated_per(std::string* per);
  private:
  const std::string& _internal_per() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_per(const std::string& value);
  std::string* _internal_mutable_per();
  public:

  // string comCode = 2;
  void clear_comcode();
  const std::string& comcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comcode();
  PROTOBUF_NODISCARD std::string* release_comcode();
  void set_allocated_comcode(std::string* comcode);
  private:
  const std::string& _internal_comcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comcode(const std::string& value);
  std::string* _internal_mutable_comcode();
  public:

  // string com = 3;
  void clear_com();
  const std::string& com() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_com(ArgT0&& arg0, ArgT... args);
  std::string* mutable_com();
  PROTOBUF_NODISCARD std::string* release_com();
  void set_allocated_com(std::string* com);
  private:
  const std::string& _internal_com() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_com(const std::string& value);
  std::string* _internal_mutable_com();
  public:

  // int32 generalPos = 4;
  void clear_generalpos();
  int32_t generalpos() const;
  void set_generalpos(int32_t value);
  private:
  int32_t _internal_generalpos() const;
  void _internal_set_generalpos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADRelatedPerson)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr per_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr com_;
    int32_t generalpos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADNews_2eproto;
};
// -------------------------------------------------------------------

class ADNewsDataEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADNewsDataEntry) */ {
 public:
  inline ADNewsDataEntry() : ADNewsDataEntry(nullptr) {}
  ~ADNewsDataEntry() override;
  explicit PROTOBUF_CONSTEXPR ADNewsDataEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADNewsDataEntry(const ADNewsDataEntry& from);
  ADNewsDataEntry(ADNewsDataEntry&& from) noexcept
    : ADNewsDataEntry() {
    *this = ::std::move(from);
  }

  inline ADNewsDataEntry& operator=(const ADNewsDataEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADNewsDataEntry& operator=(ADNewsDataEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADNewsDataEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADNewsDataEntry* internal_default_instance() {
    return reinterpret_cast<const ADNewsDataEntry*>(
               &_ADNewsDataEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ADNewsDataEntry& a, ADNewsDataEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ADNewsDataEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADNewsDataEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADNewsDataEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADNewsDataEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADNewsDataEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADNewsDataEntry& from) {
    ADNewsDataEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADNewsDataEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADNewsDataEntry";
  }
  protected:
  explicit ADNewsDataEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADNewsDataEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADNews_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADNews

// string HTSCSecurityID = 1;
inline void ADNews::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADNews::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
}
inline std::string* ADNews::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
  return _s;
}
inline const std::string& ADNews::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADNews::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADNews::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADNews::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t ADNews::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t ADNews::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.MDDate)
  return _internal_mddate();
}
inline void ADNews::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void ADNews::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.MDDate)
}

// int32 MDTime = 3;
inline void ADNews::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t ADNews::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t ADNews::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.MDTime)
  return _internal_mdtime();
}
inline void ADNews::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void ADNews::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADNews::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t ADNews::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t ADNews::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.DataTimestamp)
  return _internal_datatimestamp();
}
inline void ADNews::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void ADNews::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void ADNews::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& ADNews::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
}
inline std::string* ADNews::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
  return _s;
}
inline const std::string& ADNews::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void ADNews::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void ADNews::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void ADNews::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADNews::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADNews::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.securityIDSource)
  return _internal_securityidsource();
}
inline void ADNews::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void ADNews::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void ADNews::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADNews::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType ADNews::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.securityType)
  return _internal_securitytype();
}
inline void ADNews::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void ADNews::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.securityType)
}

// string author = 8;
inline void ADNews::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& ADNews::author() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_author(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.author)
}
inline std::string* ADNews::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.author)
  return _s;
}
inline const std::string& ADNews::_internal_author() const {
  return _impl_.author_.Get();
}
inline void ADNews::_internal_set_author(const std::string& value) {
  
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_author() {
  
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_author() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.author)
  return _impl_.author_.Release();
}
inline void ADNews::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.author)
}

// string content = 9;
inline void ADNews::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ADNews::content() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.content)
}
inline std::string* ADNews::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.content)
  return _s;
}
inline const std::string& ADNews::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ADNews::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_content() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.content)
  return _impl_.content_.Release();
}
inline void ADNews::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.content)
}

// string eventCat = 10;
inline void ADNews::clear_eventcat() {
  _impl_.eventcat_.ClearToEmpty();
}
inline const std::string& ADNews::eventcat() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.eventCat)
  return _internal_eventcat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_eventcat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.eventcat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.eventCat)
}
inline std::string* ADNews::mutable_eventcat() {
  std::string* _s = _internal_mutable_eventcat();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.eventCat)
  return _s;
}
inline const std::string& ADNews::_internal_eventcat() const {
  return _impl_.eventcat_.Get();
}
inline void ADNews::_internal_set_eventcat(const std::string& value) {
  
  _impl_.eventcat_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_eventcat() {
  
  return _impl_.eventcat_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_eventcat() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.eventCat)
  return _impl_.eventcat_.Release();
}
inline void ADNews::set_allocated_eventcat(std::string* eventcat) {
  if (eventcat != nullptr) {
    
  } else {
    
  }
  _impl_.eventcat_.SetAllocated(eventcat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.eventcat_.IsDefault()) {
    _impl_.eventcat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.eventCat)
}

// string eventName = 11;
inline void ADNews::clear_eventname() {
  _impl_.eventname_.ClearToEmpty();
}
inline const std::string& ADNews::eventname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.eventName)
  return _internal_eventname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_eventname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.eventname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.eventName)
}
inline std::string* ADNews::mutable_eventname() {
  std::string* _s = _internal_mutable_eventname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.eventName)
  return _s;
}
inline const std::string& ADNews::_internal_eventname() const {
  return _impl_.eventname_.Get();
}
inline void ADNews::_internal_set_eventname(const std::string& value) {
  
  _impl_.eventname_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_eventname() {
  
  return _impl_.eventname_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_eventname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.eventName)
  return _impl_.eventname_.Release();
}
inline void ADNews::set_allocated_eventname(std::string* eventname) {
  if (eventname != nullptr) {
    
  } else {
    
  }
  _impl_.eventname_.SetAllocated(eventname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.eventname_.IsDefault()) {
    _impl_.eventname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.eventName)
}

// int32 eventPos = 12;
inline void ADNews::clear_eventpos() {
  _impl_.eventpos_ = 0;
}
inline int32_t ADNews::_internal_eventpos() const {
  return _impl_.eventpos_;
}
inline int32_t ADNews::eventpos() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.eventPos)
  return _internal_eventpos();
}
inline void ADNews::_internal_set_eventpos(int32_t value) {
  
  _impl_.eventpos_ = value;
}
inline void ADNews::set_eventpos(int32_t value) {
  _internal_set_eventpos(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.eventPos)
}

// string id = 13;
inline void ADNews::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ADNews::id() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.id)
}
inline std::string* ADNews::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.id)
  return _s;
}
inline const std::string& ADNews::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ADNews::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_id() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.id)
  return _impl_.id_.Release();
}
inline void ADNews::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.id)
}

// string industry = 14;
inline void ADNews::clear_industry() {
  _impl_.industry_.ClearToEmpty();
}
inline const std::string& ADNews::industry() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.industry)
  return _internal_industry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_industry(ArgT0&& arg0, ArgT... args) {
 
 _impl_.industry_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.industry)
}
inline std::string* ADNews::mutable_industry() {
  std::string* _s = _internal_mutable_industry();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.industry)
  return _s;
}
inline const std::string& ADNews::_internal_industry() const {
  return _impl_.industry_.Get();
}
inline void ADNews::_internal_set_industry(const std::string& value) {
  
  _impl_.industry_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_industry() {
  
  return _impl_.industry_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_industry() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.industry)
  return _impl_.industry_.Release();
}
inline void ADNews::set_allocated_industry(std::string* industry) {
  if (industry != nullptr) {
    
  } else {
    
  }
  _impl_.industry_.SetAllocated(industry, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.industry_.IsDefault()) {
    _impl_.industry_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.industry)
}

// double newsHot = 15;
inline void ADNews::clear_newshot() {
  _impl_.newshot_ = 0;
}
inline double ADNews::_internal_newshot() const {
  return _impl_.newshot_;
}
inline double ADNews::newshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.newsHot)
  return _internal_newshot();
}
inline void ADNews::_internal_set_newshot(double value) {
  
  _impl_.newshot_ = value;
}
inline void ADNews::set_newshot(double value) {
  _internal_set_newshot(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.newsHot)
}

// string newsTime = 16;
inline void ADNews::clear_newstime() {
  _impl_.newstime_.ClearToEmpty();
}
inline const std::string& ADNews::newstime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.newsTime)
  return _internal_newstime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_newstime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.newstime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.newsTime)
}
inline std::string* ADNews::mutable_newstime() {
  std::string* _s = _internal_mutable_newstime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.newsTime)
  return _s;
}
inline const std::string& ADNews::_internal_newstime() const {
  return _impl_.newstime_.Get();
}
inline void ADNews::_internal_set_newstime(const std::string& value) {
  
  _impl_.newstime_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_newstime() {
  
  return _impl_.newstime_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_newstime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.newsTime)
  return _impl_.newstime_.Release();
}
inline void ADNews::set_allocated_newstime(std::string* newstime) {
  if (newstime != nullptr) {
    
  } else {
    
  }
  _impl_.newstime_.SetAllocated(newstime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newstime_.IsDefault()) {
    _impl_.newstime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.newsTime)
}

// string summ = 17;
inline void ADNews::clear_summ() {
  _impl_.summ_.ClearToEmpty();
}
inline const std::string& ADNews::summ() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.summ)
  return _internal_summ();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_summ(ArgT0&& arg0, ArgT... args) {
 
 _impl_.summ_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.summ)
}
inline std::string* ADNews::mutable_summ() {
  std::string* _s = _internal_mutable_summ();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.summ)
  return _s;
}
inline const std::string& ADNews::_internal_summ() const {
  return _impl_.summ_.Get();
}
inline void ADNews::_internal_set_summ(const std::string& value) {
  
  _impl_.summ_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_summ() {
  
  return _impl_.summ_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_summ() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.summ)
  return _impl_.summ_.Release();
}
inline void ADNews::set_allocated_summ(std::string* summ) {
  if (summ != nullptr) {
    
  } else {
    
  }
  _impl_.summ_.SetAllocated(summ, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.summ_.IsDefault()) {
    _impl_.summ_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.summ)
}

// string title = 18;
inline void ADNews::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ADNews::title() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.title)
}
inline std::string* ADNews::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.title)
  return _s;
}
inline const std::string& ADNews::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ADNews::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_title() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.title)
  return _impl_.title_.Release();
}
inline void ADNews::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.title)
}

// string url = 19;
inline void ADNews::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& ADNews::url() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNews::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.url)
}
inline std::string* ADNews::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.url)
  return _s;
}
inline const std::string& ADNews::_internal_url() const {
  return _impl_.url_.Get();
}
inline void ADNews::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNews::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNews::release_url() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.url)
  return _impl_.url_.Release();
}
inline void ADNews::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.url)
}

// .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
inline bool ADNews::_internal_has_newsemotion() const {
  return this != internal_default_instance() && _impl_.newsemotion_ != nullptr;
}
inline bool ADNews::has_newsemotion() const {
  return _internal_has_newsemotion();
}
inline void ADNews::clear_newsemotion() {
  if (GetArenaForAllocation() == nullptr && _impl_.newsemotion_ != nullptr) {
    delete _impl_.newsemotion_;
  }
  _impl_.newsemotion_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADNewsEmotion& ADNews::_internal_newsemotion() const {
  const ::com::htsc::mdc::insight::model::ADNewsEmotion* p = _impl_.newsemotion_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADNewsEmotion&>(
      ::com::htsc::mdc::insight::model::_ADNewsEmotion_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADNewsEmotion& ADNews::newsemotion() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.newsEmotion)
  return _internal_newsemotion();
}
inline void ADNews::unsafe_arena_set_allocated_newsemotion(
    ::com::htsc::mdc::insight::model::ADNewsEmotion* newsemotion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newsemotion_);
  }
  _impl_.newsemotion_ = newsemotion;
  if (newsemotion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADNews.newsEmotion)
}
inline ::com::htsc::mdc::insight::model::ADNewsEmotion* ADNews::release_newsemotion() {
  
  ::com::htsc::mdc::insight::model::ADNewsEmotion* temp = _impl_.newsemotion_;
  _impl_.newsemotion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADNewsEmotion* ADNews::unsafe_arena_release_newsemotion() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.newsEmotion)
  
  ::com::htsc::mdc::insight::model::ADNewsEmotion* temp = _impl_.newsemotion_;
  _impl_.newsemotion_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADNewsEmotion* ADNews::_internal_mutable_newsemotion() {
  
  if (_impl_.newsemotion_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADNewsEmotion>(GetArenaForAllocation());
    _impl_.newsemotion_ = p;
  }
  return _impl_.newsemotion_;
}
inline ::com::htsc::mdc::insight::model::ADNewsEmotion* ADNews::mutable_newsemotion() {
  ::com::htsc::mdc::insight::model::ADNewsEmotion* _msg = _internal_mutable_newsemotion();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.newsEmotion)
  return _msg;
}
inline void ADNews::set_allocated_newsemotion(::com::htsc::mdc::insight::model::ADNewsEmotion* newsemotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newsemotion_;
  }
  if (newsemotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newsemotion);
    if (message_arena != submessage_arena) {
      newsemotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newsemotion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newsemotion_ = newsemotion;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.newsEmotion)
}

// repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
inline int ADNews::_internal_seculist_size() const {
  return _impl_.seculist_.size();
}
inline int ADNews::seculist_size() const {
  return _internal_seculist_size();
}
inline void ADNews::clear_seculist() {
  _impl_.seculist_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADInvolvedSecurity* ADNews::mutable_seculist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.secuList)
  return _impl_.seculist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >*
ADNews::mutable_seculist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADNews.secuList)
  return &_impl_.seculist_;
}
inline const ::com::htsc::mdc::insight::model::ADInvolvedSecurity& ADNews::_internal_seculist(int index) const {
  return _impl_.seculist_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADInvolvedSecurity& ADNews::seculist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.secuList)
  return _internal_seculist(index);
}
inline ::com::htsc::mdc::insight::model::ADInvolvedSecurity* ADNews::_internal_add_seculist() {
  return _impl_.seculist_.Add();
}
inline ::com::htsc::mdc::insight::model::ADInvolvedSecurity* ADNews::add_seculist() {
  ::com::htsc::mdc::insight::model::ADInvolvedSecurity* _add = _internal_add_seculist();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADNews.secuList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >&
ADNews::seculist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADNews.secuList)
  return _impl_.seculist_;
}

// repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
inline int ADNews::_internal_peremlist_size() const {
  return _impl_.peremlist_.size();
}
inline int ADNews::peremlist_size() const {
  return _internal_peremlist_size();
}
inline void ADNews::clear_peremlist() {
  _impl_.peremlist_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADRelatedPerson* ADNews::mutable_peremlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.perEmList)
  return _impl_.peremlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson >*
ADNews::mutable_peremlist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADNews.perEmList)
  return &_impl_.peremlist_;
}
inline const ::com::htsc::mdc::insight::model::ADRelatedPerson& ADNews::_internal_peremlist(int index) const {
  return _impl_.peremlist_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADRelatedPerson& ADNews::peremlist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.perEmList)
  return _internal_peremlist(index);
}
inline ::com::htsc::mdc::insight::model::ADRelatedPerson* ADNews::_internal_add_peremlist() {
  return _impl_.peremlist_.Add();
}
inline ::com::htsc::mdc::insight::model::ADRelatedPerson* ADNews::add_peremlist() {
  ::com::htsc::mdc::insight::model::ADRelatedPerson* _add = _internal_add_peremlist();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADNews.perEmList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson >&
ADNews::peremlist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADNews.perEmList)
  return _impl_.peremlist_;
}

// repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
inline int ADNews::_internal_comemlist_size() const {
  return _impl_.comemlist_.size();
}
inline int ADNews::comemlist_size() const {
  return _internal_comemlist_size();
}
inline void ADNews::clear_comemlist() {
  _impl_.comemlist_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADRelatedCompany* ADNews::mutable_comemlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.comEmList)
  return _impl_.comemlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany >*
ADNews::mutable_comemlist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADNews.comEmList)
  return &_impl_.comemlist_;
}
inline const ::com::htsc::mdc::insight::model::ADRelatedCompany& ADNews::_internal_comemlist(int index) const {
  return _impl_.comemlist_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADRelatedCompany& ADNews::comemlist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.comEmList)
  return _internal_comemlist(index);
}
inline ::com::htsc::mdc::insight::model::ADRelatedCompany* ADNews::_internal_add_comemlist() {
  return _impl_.comemlist_.Add();
}
inline ::com::htsc::mdc::insight::model::ADRelatedCompany* ADNews::add_comemlist() {
  ::com::htsc::mdc::insight::model::ADRelatedCompany* _add = _internal_add_comemlist();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADNews.comEmList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany >&
ADNews::comemlist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADNews.comEmList)
  return _impl_.comemlist_;
}

// int32 DataMultiplePowerOf10 = 24;
inline void ADNews::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t ADNews::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t ADNews::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void ADNews::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void ADNews::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.DataMultiplePowerOf10)
}

// repeated .com.htsc.mdc.insight.model.ADNewsDataEntry sentimentContent = 25;
inline int ADNews::_internal_sentimentcontent_size() const {
  return _impl_.sentimentcontent_.size();
}
inline int ADNews::sentimentcontent_size() const {
  return _internal_sentimentcontent_size();
}
inline void ADNews::clear_sentimentcontent() {
  _impl_.sentimentcontent_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADNewsDataEntry* ADNews::mutable_sentimentcontent(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.sentimentContent)
  return _impl_.sentimentcontent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADNewsDataEntry >*
ADNews::mutable_sentimentcontent() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADNews.sentimentContent)
  return &_impl_.sentimentcontent_;
}
inline const ::com::htsc::mdc::insight::model::ADNewsDataEntry& ADNews::_internal_sentimentcontent(int index) const {
  return _impl_.sentimentcontent_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADNewsDataEntry& ADNews::sentimentcontent(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.sentimentContent)
  return _internal_sentimentcontent(index);
}
inline ::com::htsc::mdc::insight::model::ADNewsDataEntry* ADNews::_internal_add_sentimentcontent() {
  return _impl_.sentimentcontent_.Add();
}
inline ::com::htsc::mdc::insight::model::ADNewsDataEntry* ADNews::add_sentimentcontent() {
  ::com::htsc::mdc::insight::model::ADNewsDataEntry* _add = _internal_add_sentimentcontent();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADNews.sentimentContent)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADNewsDataEntry >&
ADNews::sentimentcontent() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADNews.sentimentContent)
  return _impl_.sentimentcontent_;
}

// -------------------------------------------------------------------

// ADNewsEmotion

// double negative = 1;
inline void ADNewsEmotion::clear_negative() {
  _impl_.negative_ = 0;
}
inline double ADNewsEmotion::_internal_negative() const {
  return _impl_.negative_;
}
inline double ADNewsEmotion::negative() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsEmotion.negative)
  return _internal_negative();
}
inline void ADNewsEmotion::_internal_set_negative(double value) {
  
  _impl_.negative_ = value;
}
inline void ADNewsEmotion::set_negative(double value) {
  _internal_set_negative(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsEmotion.negative)
}

// double neutral = 2;
inline void ADNewsEmotion::clear_neutral() {
  _impl_.neutral_ = 0;
}
inline double ADNewsEmotion::_internal_neutral() const {
  return _impl_.neutral_;
}
inline double ADNewsEmotion::neutral() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsEmotion.neutral)
  return _internal_neutral();
}
inline void ADNewsEmotion::_internal_set_neutral(double value) {
  
  _impl_.neutral_ = value;
}
inline void ADNewsEmotion::set_neutral(double value) {
  _internal_set_neutral(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsEmotion.neutral)
}

// int32 pos = 3;
inline void ADNewsEmotion::clear_pos() {
  _impl_.pos_ = 0;
}
inline int32_t ADNewsEmotion::_internal_pos() const {
  return _impl_.pos_;
}
inline int32_t ADNewsEmotion::pos() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsEmotion.pos)
  return _internal_pos();
}
inline void ADNewsEmotion::_internal_set_pos(int32_t value) {
  
  _impl_.pos_ = value;
}
inline void ADNewsEmotion::set_pos(int32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsEmotion.pos)
}

// double positive = 4;
inline void ADNewsEmotion::clear_positive() {
  _impl_.positive_ = 0;
}
inline double ADNewsEmotion::_internal_positive() const {
  return _impl_.positive_;
}
inline double ADNewsEmotion::positive() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsEmotion.positive)
  return _internal_positive();
}
inline void ADNewsEmotion::_internal_set_positive(double value) {
  
  _impl_.positive_ = value;
}
inline void ADNewsEmotion::set_positive(double value) {
  _internal_set_positive(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsEmotion.positive)
}

// -------------------------------------------------------------------

// ADInvolvedSecurity

// string comCode = 1;
inline void ADInvolvedSecurity::clear_comcode() {
  _impl_.comcode_.ClearToEmpty();
}
inline const std::string& ADInvolvedSecurity::comcode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
  return _internal_comcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADInvolvedSecurity::set_comcode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
}
inline std::string* ADInvolvedSecurity::mutable_comcode() {
  std::string* _s = _internal_mutable_comcode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
  return _s;
}
inline const std::string& ADInvolvedSecurity::_internal_comcode() const {
  return _impl_.comcode_.Get();
}
inline void ADInvolvedSecurity::_internal_set_comcode(const std::string& value) {
  
  _impl_.comcode_.Set(value, GetArenaForAllocation());
}
inline std::string* ADInvolvedSecurity::_internal_mutable_comcode() {
  
  return _impl_.comcode_.Mutable(GetArenaForAllocation());
}
inline std::string* ADInvolvedSecurity::release_comcode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
  return _impl_.comcode_.Release();
}
inline void ADInvolvedSecurity::set_allocated_comcode(std::string* comcode) {
  if (comcode != nullptr) {
    
  } else {
    
  }
  _impl_.comcode_.SetAllocated(comcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comcode_.IsDefault()) {
    _impl_.comcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
}

// string secuCode = 2;
inline void ADInvolvedSecurity::clear_secucode() {
  _impl_.secucode_.ClearToEmpty();
}
inline const std::string& ADInvolvedSecurity::secucode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
  return _internal_secucode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADInvolvedSecurity::set_secucode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secucode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
}
inline std::string* ADInvolvedSecurity::mutable_secucode() {
  std::string* _s = _internal_mutable_secucode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
  return _s;
}
inline const std::string& ADInvolvedSecurity::_internal_secucode() const {
  return _impl_.secucode_.Get();
}
inline void ADInvolvedSecurity::_internal_set_secucode(const std::string& value) {
  
  _impl_.secucode_.Set(value, GetArenaForAllocation());
}
inline std::string* ADInvolvedSecurity::_internal_mutable_secucode() {
  
  return _impl_.secucode_.Mutable(GetArenaForAllocation());
}
inline std::string* ADInvolvedSecurity::release_secucode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
  return _impl_.secucode_.Release();
}
inline void ADInvolvedSecurity::set_allocated_secucode(std::string* secucode) {
  if (secucode != nullptr) {
    
  } else {
    
  }
  _impl_.secucode_.SetAllocated(secucode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secucode_.IsDefault()) {
    _impl_.secucode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
}

// string secuName = 3;
inline void ADInvolvedSecurity::clear_secuname() {
  _impl_.secuname_.ClearToEmpty();
}
inline const std::string& ADInvolvedSecurity::secuname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
  return _internal_secuname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADInvolvedSecurity::set_secuname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secuname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
}
inline std::string* ADInvolvedSecurity::mutable_secuname() {
  std::string* _s = _internal_mutable_secuname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
  return _s;
}
inline const std::string& ADInvolvedSecurity::_internal_secuname() const {
  return _impl_.secuname_.Get();
}
inline void ADInvolvedSecurity::_internal_set_secuname(const std::string& value) {
  
  _impl_.secuname_.Set(value, GetArenaForAllocation());
}
inline std::string* ADInvolvedSecurity::_internal_mutable_secuname() {
  
  return _impl_.secuname_.Mutable(GetArenaForAllocation());
}
inline std::string* ADInvolvedSecurity::release_secuname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
  return _impl_.secuname_.Release();
}
inline void ADInvolvedSecurity::set_allocated_secuname(std::string* secuname) {
  if (secuname != nullptr) {
    
  } else {
    
  }
  _impl_.secuname_.SetAllocated(secuname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secuname_.IsDefault()) {
    _impl_.secuname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
}

// string HTSCSecurityID = 4;
inline void ADInvolvedSecurity::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADInvolvedSecurity::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADInvolvedSecurity::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
}
inline std::string* ADInvolvedSecurity::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
  return _s;
}
inline const std::string& ADInvolvedSecurity::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADInvolvedSecurity::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADInvolvedSecurity::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADInvolvedSecurity::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADInvolvedSecurity::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
}

// -------------------------------------------------------------------

// ADRelatedCompany

// string chiname = 1;
inline void ADRelatedCompany::clear_chiname() {
  _impl_.chiname_.ClearToEmpty();
}
inline const std::string& ADRelatedCompany::chiname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
  return _internal_chiname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADRelatedCompany::set_chiname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chiname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
}
inline std::string* ADRelatedCompany::mutable_chiname() {
  std::string* _s = _internal_mutable_chiname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
  return _s;
}
inline const std::string& ADRelatedCompany::_internal_chiname() const {
  return _impl_.chiname_.Get();
}
inline void ADRelatedCompany::_internal_set_chiname(const std::string& value) {
  
  _impl_.chiname_.Set(value, GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::_internal_mutable_chiname() {
  
  return _impl_.chiname_.Mutable(GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::release_chiname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
  return _impl_.chiname_.Release();
}
inline void ADRelatedCompany::set_allocated_chiname(std::string* chiname) {
  if (chiname != nullptr) {
    
  } else {
    
  }
  _impl_.chiname_.SetAllocated(chiname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chiname_.IsDefault()) {
    _impl_.chiname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
}

// string comCode = 2;
inline void ADRelatedCompany::clear_comcode() {
  _impl_.comcode_.ClearToEmpty();
}
inline const std::string& ADRelatedCompany::comcode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
  return _internal_comcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADRelatedCompany::set_comcode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
}
inline std::string* ADRelatedCompany::mutable_comcode() {
  std::string* _s = _internal_mutable_comcode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
  return _s;
}
inline const std::string& ADRelatedCompany::_internal_comcode() const {
  return _impl_.comcode_.Get();
}
inline void ADRelatedCompany::_internal_set_comcode(const std::string& value) {
  
  _impl_.comcode_.Set(value, GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::_internal_mutable_comcode() {
  
  return _impl_.comcode_.Mutable(GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::release_comcode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
  return _impl_.comcode_.Release();
}
inline void ADRelatedCompany::set_allocated_comcode(std::string* comcode) {
  if (comcode != nullptr) {
    
  } else {
    
  }
  _impl_.comcode_.SetAllocated(comcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comcode_.IsDefault()) {
    _impl_.comcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
}

// string com = 3;
inline void ADRelatedCompany::clear_com() {
  _impl_.com_.ClearToEmpty();
}
inline const std::string& ADRelatedCompany::com() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.com)
  return _internal_com();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADRelatedCompany::set_com(ArgT0&& arg0, ArgT... args) {
 
 _impl_.com_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.com)
}
inline std::string* ADRelatedCompany::mutable_com() {
  std::string* _s = _internal_mutable_com();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.com)
  return _s;
}
inline const std::string& ADRelatedCompany::_internal_com() const {
  return _impl_.com_.Get();
}
inline void ADRelatedCompany::_internal_set_com(const std::string& value) {
  
  _impl_.com_.Set(value, GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::_internal_mutable_com() {
  
  return _impl_.com_.Mutable(GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::release_com() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.com)
  return _impl_.com_.Release();
}
inline void ADRelatedCompany::set_allocated_com(std::string* com) {
  if (com != nullptr) {
    
  } else {
    
  }
  _impl_.com_.SetAllocated(com, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.com_.IsDefault()) {
    _impl_.com_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.com)
}

// int32 generalPos = 4;
inline void ADRelatedCompany::clear_generalpos() {
  _impl_.generalpos_ = 0;
}
inline int32_t ADRelatedCompany::_internal_generalpos() const {
  return _impl_.generalpos_;
}
inline int32_t ADRelatedCompany::generalpos() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.generalPos)
  return _internal_generalpos();
}
inline void ADRelatedCompany::_internal_set_generalpos(int32_t value) {
  
  _impl_.generalpos_ = value;
}
inline void ADRelatedCompany::set_generalpos(int32_t value) {
  _internal_set_generalpos(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.generalPos)
}

// string secuCode = 5;
inline void ADRelatedCompany::clear_secucode() {
  _impl_.secucode_.ClearToEmpty();
}
inline const std::string& ADRelatedCompany::secucode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
  return _internal_secucode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADRelatedCompany::set_secucode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secucode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
}
inline std::string* ADRelatedCompany::mutable_secucode() {
  std::string* _s = _internal_mutable_secucode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
  return _s;
}
inline const std::string& ADRelatedCompany::_internal_secucode() const {
  return _impl_.secucode_.Get();
}
inline void ADRelatedCompany::_internal_set_secucode(const std::string& value) {
  
  _impl_.secucode_.Set(value, GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::_internal_mutable_secucode() {
  
  return _impl_.secucode_.Mutable(GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::release_secucode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
  return _impl_.secucode_.Release();
}
inline void ADRelatedCompany::set_allocated_secucode(std::string* secucode) {
  if (secucode != nullptr) {
    
  } else {
    
  }
  _impl_.secucode_.SetAllocated(secucode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secucode_.IsDefault()) {
    _impl_.secucode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
}

// string HTSCSecurityID = 6;
inline void ADRelatedCompany::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADRelatedCompany::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADRelatedCompany::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
}
inline std::string* ADRelatedCompany::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
  return _s;
}
inline const std::string& ADRelatedCompany::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADRelatedCompany::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADRelatedCompany::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADRelatedCompany::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
}

// -------------------------------------------------------------------

// ADRelatedPerson

// string per = 1;
inline void ADRelatedPerson::clear_per() {
  _impl_.per_.ClearToEmpty();
}
inline const std::string& ADRelatedPerson::per() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedPerson.per)
  return _internal_per();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADRelatedPerson::set_per(ArgT0&& arg0, ArgT... args) {
 
 _impl_.per_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedPerson.per)
}
inline std::string* ADRelatedPerson::mutable_per() {
  std::string* _s = _internal_mutable_per();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedPerson.per)
  return _s;
}
inline const std::string& ADRelatedPerson::_internal_per() const {
  return _impl_.per_.Get();
}
inline void ADRelatedPerson::_internal_set_per(const std::string& value) {
  
  _impl_.per_.Set(value, GetArenaForAllocation());
}
inline std::string* ADRelatedPerson::_internal_mutable_per() {
  
  return _impl_.per_.Mutable(GetArenaForAllocation());
}
inline std::string* ADRelatedPerson::release_per() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedPerson.per)
  return _impl_.per_.Release();
}
inline void ADRelatedPerson::set_allocated_per(std::string* per) {
  if (per != nullptr) {
    
  } else {
    
  }
  _impl_.per_.SetAllocated(per, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.per_.IsDefault()) {
    _impl_.per_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedPerson.per)
}

// string comCode = 2;
inline void ADRelatedPerson::clear_comcode() {
  _impl_.comcode_.ClearToEmpty();
}
inline const std::string& ADRelatedPerson::comcode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
  return _internal_comcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADRelatedPerson::set_comcode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
}
inline std::string* ADRelatedPerson::mutable_comcode() {
  std::string* _s = _internal_mutable_comcode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
  return _s;
}
inline const std::string& ADRelatedPerson::_internal_comcode() const {
  return _impl_.comcode_.Get();
}
inline void ADRelatedPerson::_internal_set_comcode(const std::string& value) {
  
  _impl_.comcode_.Set(value, GetArenaForAllocation());
}
inline std::string* ADRelatedPerson::_internal_mutable_comcode() {
  
  return _impl_.comcode_.Mutable(GetArenaForAllocation());
}
inline std::string* ADRelatedPerson::release_comcode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
  return _impl_.comcode_.Release();
}
inline void ADRelatedPerson::set_allocated_comcode(std::string* comcode) {
  if (comcode != nullptr) {
    
  } else {
    
  }
  _impl_.comcode_.SetAllocated(comcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comcode_.IsDefault()) {
    _impl_.comcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
}

// string com = 3;
inline void ADRelatedPerson::clear_com() {
  _impl_.com_.ClearToEmpty();
}
inline const std::string& ADRelatedPerson::com() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedPerson.com)
  return _internal_com();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADRelatedPerson::set_com(ArgT0&& arg0, ArgT... args) {
 
 _impl_.com_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedPerson.com)
}
inline std::string* ADRelatedPerson::mutable_com() {
  std::string* _s = _internal_mutable_com();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedPerson.com)
  return _s;
}
inline const std::string& ADRelatedPerson::_internal_com() const {
  return _impl_.com_.Get();
}
inline void ADRelatedPerson::_internal_set_com(const std::string& value) {
  
  _impl_.com_.Set(value, GetArenaForAllocation());
}
inline std::string* ADRelatedPerson::_internal_mutable_com() {
  
  return _impl_.com_.Mutable(GetArenaForAllocation());
}
inline std::string* ADRelatedPerson::release_com() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedPerson.com)
  return _impl_.com_.Release();
}
inline void ADRelatedPerson::set_allocated_com(std::string* com) {
  if (com != nullptr) {
    
  } else {
    
  }
  _impl_.com_.SetAllocated(com, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.com_.IsDefault()) {
    _impl_.com_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedPerson.com)
}

// int32 generalPos = 4;
inline void ADRelatedPerson::clear_generalpos() {
  _impl_.generalpos_ = 0;
}
inline int32_t ADRelatedPerson::_internal_generalpos() const {
  return _impl_.generalpos_;
}
inline int32_t ADRelatedPerson::generalpos() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedPerson.generalPos)
  return _internal_generalpos();
}
inline void ADRelatedPerson::_internal_set_generalpos(int32_t value) {
  
  _impl_.generalpos_ = value;
}
inline void ADRelatedPerson::set_generalpos(int32_t value) {
  _internal_set_generalpos(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedPerson.generalPos)
}

// -------------------------------------------------------------------

// ADNewsDataEntry

// string key = 1;
inline void ADNewsDataEntry::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ADNewsDataEntry::key() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsDataEntry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNewsDataEntry::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsDataEntry.key)
}
inline std::string* ADNewsDataEntry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNewsDataEntry.key)
  return _s;
}
inline const std::string& ADNewsDataEntry::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ADNewsDataEntry::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNewsDataEntry::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNewsDataEntry::release_key() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNewsDataEntry.key)
  return _impl_.key_.Release();
}
inline void ADNewsDataEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNewsDataEntry.key)
}

// string value = 2;
inline void ADNewsDataEntry::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ADNewsDataEntry::value() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsDataEntry.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADNewsDataEntry::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsDataEntry.value)
}
inline std::string* ADNewsDataEntry::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNewsDataEntry.value)
  return _s;
}
inline const std::string& ADNewsDataEntry::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ADNewsDataEntry::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ADNewsDataEntry::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* ADNewsDataEntry::release_value() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNewsDataEntry.value)
  return _impl_.value_.Release();
}
inline void ADNewsDataEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNewsDataEntry.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADNews_2eproto
