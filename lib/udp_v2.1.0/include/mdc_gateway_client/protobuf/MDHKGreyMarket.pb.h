// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDHKGreyMarket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDHKGreyMarket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDHKGreyMarket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDHKGreyMarket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDHKGreyMarket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDHKGreyMarket_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDHKGreyMarket;
struct MDHKGreyMarketDefaultTypeInternal;
extern MDHKGreyMarketDefaultTypeInternal _MDHKGreyMarket_default_instance_;
class MDHKGreyMarket_MarketEntry;
struct MDHKGreyMarket_MarketEntryDefaultTypeInternal;
extern MDHKGreyMarket_MarketEntryDefaultTypeInternal _MDHKGreyMarket_MarketEntry_default_instance_;
class MDHKGreyMarket_OrderEntry;
struct MDHKGreyMarket_OrderEntryDefaultTypeInternal;
extern MDHKGreyMarket_OrderEntryDefaultTypeInternal _MDHKGreyMarket_OrderEntry_default_instance_;
class MDHKGreyMarket_TradeEntry;
struct MDHKGreyMarket_TradeEntryDefaultTypeInternal;
extern MDHKGreyMarket_TradeEntryDefaultTypeInternal _MDHKGreyMarket_TradeEntry_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDHKGreyMarket* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDHKGreyMarket_MarketEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry) */ {
 public:
  inline MDHKGreyMarket_MarketEntry() : MDHKGreyMarket_MarketEntry(nullptr) {}
  ~MDHKGreyMarket_MarketEntry() override;
  explicit PROTOBUF_CONSTEXPR MDHKGreyMarket_MarketEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDHKGreyMarket_MarketEntry(const MDHKGreyMarket_MarketEntry& from);
  MDHKGreyMarket_MarketEntry(MDHKGreyMarket_MarketEntry&& from) noexcept
    : MDHKGreyMarket_MarketEntry() {
    *this = ::std::move(from);
  }

  inline MDHKGreyMarket_MarketEntry& operator=(const MDHKGreyMarket_MarketEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDHKGreyMarket_MarketEntry& operator=(MDHKGreyMarket_MarketEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDHKGreyMarket_MarketEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDHKGreyMarket_MarketEntry* internal_default_instance() {
    return reinterpret_cast<const MDHKGreyMarket_MarketEntry*>(
               &_MDHKGreyMarket_MarketEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDHKGreyMarket_MarketEntry& a, MDHKGreyMarket_MarketEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MDHKGreyMarket_MarketEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDHKGreyMarket_MarketEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDHKGreyMarket_MarketEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDHKGreyMarket_MarketEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDHKGreyMarket_MarketEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDHKGreyMarket_MarketEntry& from) {
    MDHKGreyMarket_MarketEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDHKGreyMarket_MarketEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry";
  }
  protected:
  explicit MDHKGreyMarket_MarketEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyOrderEntriesFieldNumber = 12,
    kSellOrderEntriesFieldNumber = 13,
    kTradeEntriesFieldNumber = 14,
    kChannelTypeFieldNumber = 1,
    kValidFlagFieldNumber = 2,
    kPreClosePxFieldNumber = 3,
    kNumTradesFieldNumber = 4,
    kTotalVolumeTradeFieldNumber = 5,
    kTotalValueTradeFieldNumber = 6,
    kLastPxFieldNumber = 7,
    kOpenPxFieldNumber = 8,
    kClosePxFieldNumber = 9,
    kHighPxFieldNumber = 10,
    kLowPxFieldNumber = 11,
    kExchangeDateTimeFieldNumber = 15,
  };
  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
  int buyorderentries_size() const;
  private:
  int _internal_buyorderentries_size() const;
  public:
  void clear_buyorderentries();
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* mutable_buyorderentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >*
      mutable_buyorderentries();
  private:
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& _internal_buyorderentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* _internal_add_buyorderentries();
  public:
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& buyorderentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* add_buyorderentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >&
      buyorderentries() const;

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
  int sellorderentries_size() const;
  private:
  int _internal_sellorderentries_size() const;
  public:
  void clear_sellorderentries();
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* mutable_sellorderentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >*
      mutable_sellorderentries();
  private:
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& _internal_sellorderentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* _internal_add_sellorderentries();
  public:
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& sellorderentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* add_sellorderentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >&
      sellorderentries() const;

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
  int tradeentries_size() const;
  private:
  int _internal_tradeentries_size() const;
  public:
  void clear_tradeentries();
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* mutable_tradeentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >*
      mutable_tradeentries();
  private:
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry& _internal_tradeentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* _internal_add_tradeentries();
  public:
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry& tradeentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* add_tradeentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >&
      tradeentries() const;

  // int32 ChannelType = 1;
  void clear_channeltype();
  int32_t channeltype() const;
  void set_channeltype(int32_t value);
  private:
  int32_t _internal_channeltype() const;
  void _internal_set_channeltype(int32_t value);
  public:

  // bool ValidFlag = 2;
  void clear_validflag();
  bool validflag() const;
  void set_validflag(bool value);
  private:
  bool _internal_validflag() const;
  void _internal_set_validflag(bool value);
  public:

  // int64 PreClosePx = 3;
  void clear_preclosepx();
  int64_t preclosepx() const;
  void set_preclosepx(int64_t value);
  private:
  int64_t _internal_preclosepx() const;
  void _internal_set_preclosepx(int64_t value);
  public:

  // int64 NumTrades = 4;
  void clear_numtrades();
  int64_t numtrades() const;
  void set_numtrades(int64_t value);
  private:
  int64_t _internal_numtrades() const;
  void _internal_set_numtrades(int64_t value);
  public:

  // int64 TotalVolumeTrade = 5;
  void clear_totalvolumetrade();
  int64_t totalvolumetrade() const;
  void set_totalvolumetrade(int64_t value);
  private:
  int64_t _internal_totalvolumetrade() const;
  void _internal_set_totalvolumetrade(int64_t value);
  public:

  // int64 TotalValueTrade = 6;
  void clear_totalvaluetrade();
  int64_t totalvaluetrade() const;
  void set_totalvaluetrade(int64_t value);
  private:
  int64_t _internal_totalvaluetrade() const;
  void _internal_set_totalvaluetrade(int64_t value);
  public:

  // int64 LastPx = 7;
  void clear_lastpx();
  int64_t lastpx() const;
  void set_lastpx(int64_t value);
  private:
  int64_t _internal_lastpx() const;
  void _internal_set_lastpx(int64_t value);
  public:

  // int64 OpenPx = 8;
  void clear_openpx();
  int64_t openpx() const;
  void set_openpx(int64_t value);
  private:
  int64_t _internal_openpx() const;
  void _internal_set_openpx(int64_t value);
  public:

  // int64 ClosePx = 9;
  void clear_closepx();
  int64_t closepx() const;
  void set_closepx(int64_t value);
  private:
  int64_t _internal_closepx() const;
  void _internal_set_closepx(int64_t value);
  public:

  // int64 HighPx = 10;
  void clear_highpx();
  int64_t highpx() const;
  void set_highpx(int64_t value);
  private:
  int64_t _internal_highpx() const;
  void _internal_set_highpx(int64_t value);
  public:

  // int64 LowPx = 11;
  void clear_lowpx();
  int64_t lowpx() const;
  void set_lowpx(int64_t value);
  private:
  int64_t _internal_lowpx() const;
  void _internal_set_lowpx(int64_t value);
  public:

  // int64 ExchangeDateTime = 15;
  void clear_exchangedatetime();
  int64_t exchangedatetime() const;
  void set_exchangedatetime(int64_t value);
  private:
  int64_t _internal_exchangedatetime() const;
  void _internal_set_exchangedatetime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry > buyorderentries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry > sellorderentries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry > tradeentries_;
    int32_t channeltype_;
    bool validflag_;
    int64_t preclosepx_;
    int64_t numtrades_;
    int64_t totalvolumetrade_;
    int64_t totalvaluetrade_;
    int64_t lastpx_;
    int64_t openpx_;
    int64_t closepx_;
    int64_t highpx_;
    int64_t lowpx_;
    int64_t exchangedatetime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDHKGreyMarket_2eproto;
};
// -------------------------------------------------------------------

class MDHKGreyMarket_OrderEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry) */ {
 public:
  inline MDHKGreyMarket_OrderEntry() : MDHKGreyMarket_OrderEntry(nullptr) {}
  ~MDHKGreyMarket_OrderEntry() override;
  explicit PROTOBUF_CONSTEXPR MDHKGreyMarket_OrderEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDHKGreyMarket_OrderEntry(const MDHKGreyMarket_OrderEntry& from);
  MDHKGreyMarket_OrderEntry(MDHKGreyMarket_OrderEntry&& from) noexcept
    : MDHKGreyMarket_OrderEntry() {
    *this = ::std::move(from);
  }

  inline MDHKGreyMarket_OrderEntry& operator=(const MDHKGreyMarket_OrderEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDHKGreyMarket_OrderEntry& operator=(MDHKGreyMarket_OrderEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDHKGreyMarket_OrderEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDHKGreyMarket_OrderEntry* internal_default_instance() {
    return reinterpret_cast<const MDHKGreyMarket_OrderEntry*>(
               &_MDHKGreyMarket_OrderEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MDHKGreyMarket_OrderEntry& a, MDHKGreyMarket_OrderEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MDHKGreyMarket_OrderEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDHKGreyMarket_OrderEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDHKGreyMarket_OrderEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDHKGreyMarket_OrderEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDHKGreyMarket_OrderEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDHKGreyMarket_OrderEntry& from) {
    MDHKGreyMarket_OrderEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDHKGreyMarket_OrderEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry";
  }
  protected:
  explicit MDHKGreyMarket_OrderEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderPriceFieldNumber = 2,
    kOrderQtyFieldNumber = 3,
    kNumOrdersFieldNumber = 4,
    kOrderLevelFieldNumber = 1,
  };
  // int64 OrderPrice = 2;
  void clear_orderprice();
  int64_t orderprice() const;
  void set_orderprice(int64_t value);
  private:
  int64_t _internal_orderprice() const;
  void _internal_set_orderprice(int64_t value);
  public:

  // int64 OrderQty = 3;
  void clear_orderqty();
  int64_t orderqty() const;
  void set_orderqty(int64_t value);
  private:
  int64_t _internal_orderqty() const;
  void _internal_set_orderqty(int64_t value);
  public:

  // int64 NumOrders = 4;
  void clear_numorders();
  int64_t numorders() const;
  void set_numorders(int64_t value);
  private:
  int64_t _internal_numorders() const;
  void _internal_set_numorders(int64_t value);
  public:

  // int32 OrderLevel = 1;
  void clear_orderlevel();
  int32_t orderlevel() const;
  void set_orderlevel(int32_t value);
  private:
  int32_t _internal_orderlevel() const;
  void _internal_set_orderlevel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t orderprice_;
    int64_t orderqty_;
    int64_t numorders_;
    int32_t orderlevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDHKGreyMarket_2eproto;
};
// -------------------------------------------------------------------

class MDHKGreyMarket_TradeEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry) */ {
 public:
  inline MDHKGreyMarket_TradeEntry() : MDHKGreyMarket_TradeEntry(nullptr) {}
  ~MDHKGreyMarket_TradeEntry() override;
  explicit PROTOBUF_CONSTEXPR MDHKGreyMarket_TradeEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDHKGreyMarket_TradeEntry(const MDHKGreyMarket_TradeEntry& from);
  MDHKGreyMarket_TradeEntry(MDHKGreyMarket_TradeEntry&& from) noexcept
    : MDHKGreyMarket_TradeEntry() {
    *this = ::std::move(from);
  }

  inline MDHKGreyMarket_TradeEntry& operator=(const MDHKGreyMarket_TradeEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDHKGreyMarket_TradeEntry& operator=(MDHKGreyMarket_TradeEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDHKGreyMarket_TradeEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDHKGreyMarket_TradeEntry* internal_default_instance() {
    return reinterpret_cast<const MDHKGreyMarket_TradeEntry*>(
               &_MDHKGreyMarket_TradeEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MDHKGreyMarket_TradeEntry& a, MDHKGreyMarket_TradeEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MDHKGreyMarket_TradeEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDHKGreyMarket_TradeEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDHKGreyMarket_TradeEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDHKGreyMarket_TradeEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDHKGreyMarket_TradeEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDHKGreyMarket_TradeEntry& from) {
    MDHKGreyMarket_TradeEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDHKGreyMarket_TradeEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry";
  }
  protected:
  explicit MDHKGreyMarket_TradeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradePriceFieldNumber = 2,
    kTradeQtyFieldNumber = 3,
    kTradeTimeFieldNumber = 4,
    kTradeLevelFieldNumber = 1,
  };
  // int64 TradePrice = 2;
  void clear_tradeprice();
  int64_t tradeprice() const;
  void set_tradeprice(int64_t value);
  private:
  int64_t _internal_tradeprice() const;
  void _internal_set_tradeprice(int64_t value);
  public:

  // int64 TradeQty = 3;
  void clear_tradeqty();
  int64_t tradeqty() const;
  void set_tradeqty(int64_t value);
  private:
  int64_t _internal_tradeqty() const;
  void _internal_set_tradeqty(int64_t value);
  public:

  // int64 TradeTime = 4;
  void clear_tradetime();
  int64_t tradetime() const;
  void set_tradetime(int64_t value);
  private:
  int64_t _internal_tradetime() const;
  void _internal_set_tradetime(int64_t value);
  public:

  // int32 TradeLevel = 1;
  void clear_tradelevel();
  int32_t tradelevel() const;
  void set_tradelevel(int32_t value);
  private:
  int32_t _internal_tradelevel() const;
  void _internal_set_tradelevel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t tradeprice_;
    int64_t tradeqty_;
    int64_t tradetime_;
    int32_t tradelevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDHKGreyMarket_2eproto;
};
// -------------------------------------------------------------------

class MDHKGreyMarket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDHKGreyMarket) */ {
 public:
  inline MDHKGreyMarket() : MDHKGreyMarket(nullptr) {}
  ~MDHKGreyMarket() override;
  explicit PROTOBUF_CONSTEXPR MDHKGreyMarket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDHKGreyMarket(const MDHKGreyMarket& from);
  MDHKGreyMarket(MDHKGreyMarket&& from) noexcept
    : MDHKGreyMarket() {
    *this = ::std::move(from);
  }

  inline MDHKGreyMarket& operator=(const MDHKGreyMarket& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDHKGreyMarket& operator=(MDHKGreyMarket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDHKGreyMarket& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDHKGreyMarket* internal_default_instance() {
    return reinterpret_cast<const MDHKGreyMarket*>(
               &_MDHKGreyMarket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MDHKGreyMarket& a, MDHKGreyMarket& b) {
    a.Swap(&b);
  }
  inline void Swap(MDHKGreyMarket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDHKGreyMarket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDHKGreyMarket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDHKGreyMarket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDHKGreyMarket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDHKGreyMarket& from) {
    MDHKGreyMarket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDHKGreyMarket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDHKGreyMarket";
  }
  protected:
  explicit MDHKGreyMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MDHKGreyMarket_MarketEntry MarketEntry;
  typedef MDHKGreyMarket_OrderEntry OrderEntry;
  typedef MDHKGreyMarket_TradeEntry TradeEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kMarketEntriesFieldNumber = 9,
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kApplSeqNumFieldNumber = 8,
    kDataMultiplePowerOf10FieldNumber = 10,
  };
  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
  int marketentries_size() const;
  private:
  int _internal_marketentries_size() const;
  public:
  void clear_marketentries();
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* mutable_marketentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >*
      mutable_marketentries();
  private:
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry& _internal_marketentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* _internal_add_marketentries();
  public:
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry& marketentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* add_marketentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >&
      marketentries() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 ApplSeqNum = 8;
  void clear_applseqnum();
  int64_t applseqnum() const;
  void set_applseqnum(int64_t value);
  private:
  int64_t _internal_applseqnum() const;
  void _internal_set_applseqnum(int64_t value);
  public:

  // int32 DataMultiplePowerOf10 = 10;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDHKGreyMarket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry > marketentries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t applseqnum_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDHKGreyMarket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDHKGreyMarket_MarketEntry

// int32 ChannelType = 1;
inline void MDHKGreyMarket_MarketEntry::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline int32_t MDHKGreyMarket_MarketEntry::_internal_channeltype() const {
  return _impl_.channeltype_;
}
inline int32_t MDHKGreyMarket_MarketEntry::channeltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ChannelType)
  return _internal_channeltype();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_channeltype(int32_t value) {
  
  _impl_.channeltype_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_channeltype(int32_t value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ChannelType)
}

// bool ValidFlag = 2;
inline void MDHKGreyMarket_MarketEntry::clear_validflag() {
  _impl_.validflag_ = false;
}
inline bool MDHKGreyMarket_MarketEntry::_internal_validflag() const {
  return _impl_.validflag_;
}
inline bool MDHKGreyMarket_MarketEntry::validflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ValidFlag)
  return _internal_validflag();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_validflag(bool value) {
  
  _impl_.validflag_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_validflag(bool value) {
  _internal_set_validflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ValidFlag)
}

// int64 PreClosePx = 3;
inline void MDHKGreyMarket_MarketEntry::clear_preclosepx() {
  _impl_.preclosepx_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_preclosepx() const {
  return _impl_.preclosepx_;
}
inline int64_t MDHKGreyMarket_MarketEntry::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.PreClosePx)
  return _internal_preclosepx();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_preclosepx(int64_t value) {
  
  _impl_.preclosepx_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_preclosepx(int64_t value) {
  _internal_set_preclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.PreClosePx)
}

// int64 NumTrades = 4;
inline void MDHKGreyMarket_MarketEntry::clear_numtrades() {
  _impl_.numtrades_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_numtrades() const {
  return _impl_.numtrades_;
}
inline int64_t MDHKGreyMarket_MarketEntry::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.NumTrades)
  return _internal_numtrades();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_numtrades(int64_t value) {
  
  _impl_.numtrades_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_numtrades(int64_t value) {
  _internal_set_numtrades(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.NumTrades)
}

// int64 TotalVolumeTrade = 5;
inline void MDHKGreyMarket_MarketEntry::clear_totalvolumetrade() {
  _impl_.totalvolumetrade_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_totalvolumetrade() const {
  return _impl_.totalvolumetrade_;
}
inline int64_t MDHKGreyMarket_MarketEntry::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TotalVolumeTrade)
  return _internal_totalvolumetrade();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_totalvolumetrade(int64_t value) {
  
  _impl_.totalvolumetrade_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_totalvolumetrade(int64_t value) {
  _internal_set_totalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TotalVolumeTrade)
}

// int64 TotalValueTrade = 6;
inline void MDHKGreyMarket_MarketEntry::clear_totalvaluetrade() {
  _impl_.totalvaluetrade_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_totalvaluetrade() const {
  return _impl_.totalvaluetrade_;
}
inline int64_t MDHKGreyMarket_MarketEntry::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TotalValueTrade)
  return _internal_totalvaluetrade();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_totalvaluetrade(int64_t value) {
  
  _impl_.totalvaluetrade_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_totalvaluetrade(int64_t value) {
  _internal_set_totalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TotalValueTrade)
}

// int64 LastPx = 7;
inline void MDHKGreyMarket_MarketEntry::clear_lastpx() {
  _impl_.lastpx_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_lastpx() const {
  return _impl_.lastpx_;
}
inline int64_t MDHKGreyMarket_MarketEntry::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.LastPx)
  return _internal_lastpx();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_lastpx(int64_t value) {
  
  _impl_.lastpx_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_lastpx(int64_t value) {
  _internal_set_lastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.LastPx)
}

// int64 OpenPx = 8;
inline void MDHKGreyMarket_MarketEntry::clear_openpx() {
  _impl_.openpx_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_openpx() const {
  return _impl_.openpx_;
}
inline int64_t MDHKGreyMarket_MarketEntry::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.OpenPx)
  return _internal_openpx();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_openpx(int64_t value) {
  
  _impl_.openpx_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_openpx(int64_t value) {
  _internal_set_openpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.OpenPx)
}

// int64 ClosePx = 9;
inline void MDHKGreyMarket_MarketEntry::clear_closepx() {
  _impl_.closepx_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_closepx() const {
  return _impl_.closepx_;
}
inline int64_t MDHKGreyMarket_MarketEntry::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ClosePx)
  return _internal_closepx();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_closepx(int64_t value) {
  
  _impl_.closepx_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_closepx(int64_t value) {
  _internal_set_closepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ClosePx)
}

// int64 HighPx = 10;
inline void MDHKGreyMarket_MarketEntry::clear_highpx() {
  _impl_.highpx_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_highpx() const {
  return _impl_.highpx_;
}
inline int64_t MDHKGreyMarket_MarketEntry::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.HighPx)
  return _internal_highpx();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_highpx(int64_t value) {
  
  _impl_.highpx_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_highpx(int64_t value) {
  _internal_set_highpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.HighPx)
}

// int64 LowPx = 11;
inline void MDHKGreyMarket_MarketEntry::clear_lowpx() {
  _impl_.lowpx_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_lowpx() const {
  return _impl_.lowpx_;
}
inline int64_t MDHKGreyMarket_MarketEntry::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.LowPx)
  return _internal_lowpx();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_lowpx(int64_t value) {
  
  _impl_.lowpx_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_lowpx(int64_t value) {
  _internal_set_lowpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.LowPx)
}

// repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
inline int MDHKGreyMarket_MarketEntry::_internal_buyorderentries_size() const {
  return _impl_.buyorderentries_.size();
}
inline int MDHKGreyMarket_MarketEntry::buyorderentries_size() const {
  return _internal_buyorderentries_size();
}
inline void MDHKGreyMarket_MarketEntry::clear_buyorderentries() {
  _impl_.buyorderentries_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::mutable_buyorderentries(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return _impl_.buyorderentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >*
MDHKGreyMarket_MarketEntry::mutable_buyorderentries() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return &_impl_.buyorderentries_;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& MDHKGreyMarket_MarketEntry::_internal_buyorderentries(int index) const {
  return _impl_.buyorderentries_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& MDHKGreyMarket_MarketEntry::buyorderentries(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return _internal_buyorderentries(index);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::_internal_add_buyorderentries() {
  return _impl_.buyorderentries_.Add();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::add_buyorderentries() {
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* _add = _internal_add_buyorderentries();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >&
MDHKGreyMarket_MarketEntry::buyorderentries() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return _impl_.buyorderentries_;
}

// repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
inline int MDHKGreyMarket_MarketEntry::_internal_sellorderentries_size() const {
  return _impl_.sellorderentries_.size();
}
inline int MDHKGreyMarket_MarketEntry::sellorderentries_size() const {
  return _internal_sellorderentries_size();
}
inline void MDHKGreyMarket_MarketEntry::clear_sellorderentries() {
  _impl_.sellorderentries_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::mutable_sellorderentries(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return _impl_.sellorderentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >*
MDHKGreyMarket_MarketEntry::mutable_sellorderentries() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return &_impl_.sellorderentries_;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& MDHKGreyMarket_MarketEntry::_internal_sellorderentries(int index) const {
  return _impl_.sellorderentries_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& MDHKGreyMarket_MarketEntry::sellorderentries(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return _internal_sellorderentries(index);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::_internal_add_sellorderentries() {
  return _impl_.sellorderentries_.Add();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::add_sellorderentries() {
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* _add = _internal_add_sellorderentries();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >&
MDHKGreyMarket_MarketEntry::sellorderentries() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return _impl_.sellorderentries_;
}

// repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
inline int MDHKGreyMarket_MarketEntry::_internal_tradeentries_size() const {
  return _impl_.tradeentries_.size();
}
inline int MDHKGreyMarket_MarketEntry::tradeentries_size() const {
  return _internal_tradeentries_size();
}
inline void MDHKGreyMarket_MarketEntry::clear_tradeentries() {
  _impl_.tradeentries_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* MDHKGreyMarket_MarketEntry::mutable_tradeentries(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return _impl_.tradeentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >*
MDHKGreyMarket_MarketEntry::mutable_tradeentries() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return &_impl_.tradeentries_;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry& MDHKGreyMarket_MarketEntry::_internal_tradeentries(int index) const {
  return _impl_.tradeentries_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry& MDHKGreyMarket_MarketEntry::tradeentries(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return _internal_tradeentries(index);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* MDHKGreyMarket_MarketEntry::_internal_add_tradeentries() {
  return _impl_.tradeentries_.Add();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* MDHKGreyMarket_MarketEntry::add_tradeentries() {
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* _add = _internal_add_tradeentries();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >&
MDHKGreyMarket_MarketEntry::tradeentries() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return _impl_.tradeentries_;
}

// int64 ExchangeDateTime = 15;
inline void MDHKGreyMarket_MarketEntry::clear_exchangedatetime() {
  _impl_.exchangedatetime_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_MarketEntry::_internal_exchangedatetime() const {
  return _impl_.exchangedatetime_;
}
inline int64_t MDHKGreyMarket_MarketEntry::exchangedatetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ExchangeDateTime)
  return _internal_exchangedatetime();
}
inline void MDHKGreyMarket_MarketEntry::_internal_set_exchangedatetime(int64_t value) {
  
  _impl_.exchangedatetime_ = value;
}
inline void MDHKGreyMarket_MarketEntry::set_exchangedatetime(int64_t value) {
  _internal_set_exchangedatetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ExchangeDateTime)
}

// -------------------------------------------------------------------

// MDHKGreyMarket_OrderEntry

// int32 OrderLevel = 1;
inline void MDHKGreyMarket_OrderEntry::clear_orderlevel() {
  _impl_.orderlevel_ = 0;
}
inline int32_t MDHKGreyMarket_OrderEntry::_internal_orderlevel() const {
  return _impl_.orderlevel_;
}
inline int32_t MDHKGreyMarket_OrderEntry::orderlevel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderLevel)
  return _internal_orderlevel();
}
inline void MDHKGreyMarket_OrderEntry::_internal_set_orderlevel(int32_t value) {
  
  _impl_.orderlevel_ = value;
}
inline void MDHKGreyMarket_OrderEntry::set_orderlevel(int32_t value) {
  _internal_set_orderlevel(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderLevel)
}

// int64 OrderPrice = 2;
inline void MDHKGreyMarket_OrderEntry::clear_orderprice() {
  _impl_.orderprice_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_OrderEntry::_internal_orderprice() const {
  return _impl_.orderprice_;
}
inline int64_t MDHKGreyMarket_OrderEntry::orderprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderPrice)
  return _internal_orderprice();
}
inline void MDHKGreyMarket_OrderEntry::_internal_set_orderprice(int64_t value) {
  
  _impl_.orderprice_ = value;
}
inline void MDHKGreyMarket_OrderEntry::set_orderprice(int64_t value) {
  _internal_set_orderprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderPrice)
}

// int64 OrderQty = 3;
inline void MDHKGreyMarket_OrderEntry::clear_orderqty() {
  _impl_.orderqty_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_OrderEntry::_internal_orderqty() const {
  return _impl_.orderqty_;
}
inline int64_t MDHKGreyMarket_OrderEntry::orderqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderQty)
  return _internal_orderqty();
}
inline void MDHKGreyMarket_OrderEntry::_internal_set_orderqty(int64_t value) {
  
  _impl_.orderqty_ = value;
}
inline void MDHKGreyMarket_OrderEntry::set_orderqty(int64_t value) {
  _internal_set_orderqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderQty)
}

// int64 NumOrders = 4;
inline void MDHKGreyMarket_OrderEntry::clear_numorders() {
  _impl_.numorders_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_OrderEntry::_internal_numorders() const {
  return _impl_.numorders_;
}
inline int64_t MDHKGreyMarket_OrderEntry::numorders() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.NumOrders)
  return _internal_numorders();
}
inline void MDHKGreyMarket_OrderEntry::_internal_set_numorders(int64_t value) {
  
  _impl_.numorders_ = value;
}
inline void MDHKGreyMarket_OrderEntry::set_numorders(int64_t value) {
  _internal_set_numorders(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.NumOrders)
}

// -------------------------------------------------------------------

// MDHKGreyMarket_TradeEntry

// int32 TradeLevel = 1;
inline void MDHKGreyMarket_TradeEntry::clear_tradelevel() {
  _impl_.tradelevel_ = 0;
}
inline int32_t MDHKGreyMarket_TradeEntry::_internal_tradelevel() const {
  return _impl_.tradelevel_;
}
inline int32_t MDHKGreyMarket_TradeEntry::tradelevel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeLevel)
  return _internal_tradelevel();
}
inline void MDHKGreyMarket_TradeEntry::_internal_set_tradelevel(int32_t value) {
  
  _impl_.tradelevel_ = value;
}
inline void MDHKGreyMarket_TradeEntry::set_tradelevel(int32_t value) {
  _internal_set_tradelevel(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeLevel)
}

// int64 TradePrice = 2;
inline void MDHKGreyMarket_TradeEntry::clear_tradeprice() {
  _impl_.tradeprice_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_TradeEntry::_internal_tradeprice() const {
  return _impl_.tradeprice_;
}
inline int64_t MDHKGreyMarket_TradeEntry::tradeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradePrice)
  return _internal_tradeprice();
}
inline void MDHKGreyMarket_TradeEntry::_internal_set_tradeprice(int64_t value) {
  
  _impl_.tradeprice_ = value;
}
inline void MDHKGreyMarket_TradeEntry::set_tradeprice(int64_t value) {
  _internal_set_tradeprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradePrice)
}

// int64 TradeQty = 3;
inline void MDHKGreyMarket_TradeEntry::clear_tradeqty() {
  _impl_.tradeqty_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_TradeEntry::_internal_tradeqty() const {
  return _impl_.tradeqty_;
}
inline int64_t MDHKGreyMarket_TradeEntry::tradeqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeQty)
  return _internal_tradeqty();
}
inline void MDHKGreyMarket_TradeEntry::_internal_set_tradeqty(int64_t value) {
  
  _impl_.tradeqty_ = value;
}
inline void MDHKGreyMarket_TradeEntry::set_tradeqty(int64_t value) {
  _internal_set_tradeqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeQty)
}

// int64 TradeTime = 4;
inline void MDHKGreyMarket_TradeEntry::clear_tradetime() {
  _impl_.tradetime_ = int64_t{0};
}
inline int64_t MDHKGreyMarket_TradeEntry::_internal_tradetime() const {
  return _impl_.tradetime_;
}
inline int64_t MDHKGreyMarket_TradeEntry::tradetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeTime)
  return _internal_tradetime();
}
inline void MDHKGreyMarket_TradeEntry::_internal_set_tradetime(int64_t value) {
  
  _impl_.tradetime_ = value;
}
inline void MDHKGreyMarket_TradeEntry::set_tradetime(int64_t value) {
  _internal_set_tradetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeTime)
}

// -------------------------------------------------------------------

// MDHKGreyMarket

// string HTSCSecurityID = 1;
inline void MDHKGreyMarket::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDHKGreyMarket::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDHKGreyMarket::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
}
inline std::string* MDHKGreyMarket::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
  return _s;
}
inline const std::string& MDHKGreyMarket::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDHKGreyMarket::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDHKGreyMarket::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDHKGreyMarket::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDHKGreyMarket::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDHKGreyMarket::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDHKGreyMarket::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDHKGreyMarket::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MDDate)
  return _internal_mddate();
}
inline void MDHKGreyMarket::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDHKGreyMarket::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MDDate)
}

// int32 MDTime = 3;
inline void MDHKGreyMarket::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDHKGreyMarket::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDHKGreyMarket::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MDTime)
  return _internal_mdtime();
}
inline void MDHKGreyMarket::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDHKGreyMarket::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDHKGreyMarket::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDHKGreyMarket::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDHKGreyMarket::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDHKGreyMarket::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDHKGreyMarket::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDHKGreyMarket::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDHKGreyMarket::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDHKGreyMarket::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
}
inline std::string* MDHKGreyMarket::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
  return _s;
}
inline const std::string& MDHKGreyMarket::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDHKGreyMarket::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDHKGreyMarket::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDHKGreyMarket::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDHKGreyMarket::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDHKGreyMarket::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDHKGreyMarket::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDHKGreyMarket::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.securityIDSource)
  return _internal_securityidsource();
}
inline void MDHKGreyMarket::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDHKGreyMarket::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDHKGreyMarket::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDHKGreyMarket::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDHKGreyMarket::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.securityType)
  return _internal_securitytype();
}
inline void MDHKGreyMarket::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDHKGreyMarket::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.securityType)
}

// int64 ApplSeqNum = 8;
inline void MDHKGreyMarket::clear_applseqnum() {
  _impl_.applseqnum_ = int64_t{0};
}
inline int64_t MDHKGreyMarket::_internal_applseqnum() const {
  return _impl_.applseqnum_;
}
inline int64_t MDHKGreyMarket::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.ApplSeqNum)
  return _internal_applseqnum();
}
inline void MDHKGreyMarket::_internal_set_applseqnum(int64_t value) {
  
  _impl_.applseqnum_ = value;
}
inline void MDHKGreyMarket::set_applseqnum(int64_t value) {
  _internal_set_applseqnum(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.ApplSeqNum)
}

// repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
inline int MDHKGreyMarket::_internal_marketentries_size() const {
  return _impl_.marketentries_.size();
}
inline int MDHKGreyMarket::marketentries_size() const {
  return _internal_marketentries_size();
}
inline void MDHKGreyMarket::clear_marketentries() {
  _impl_.marketentries_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* MDHKGreyMarket::mutable_marketentries(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return _impl_.marketentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >*
MDHKGreyMarket::mutable_marketentries() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return &_impl_.marketentries_;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry& MDHKGreyMarket::_internal_marketentries(int index) const {
  return _impl_.marketentries_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry& MDHKGreyMarket::marketentries(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return _internal_marketentries(index);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* MDHKGreyMarket::_internal_add_marketentries() {
  return _impl_.marketentries_.Add();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* MDHKGreyMarket::add_marketentries() {
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* _add = _internal_add_marketentries();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >&
MDHKGreyMarket::marketentries() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return _impl_.marketentries_;
}

// int32 DataMultiplePowerOf10 = 10;
inline void MDHKGreyMarket::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDHKGreyMarket::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDHKGreyMarket::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDHKGreyMarket::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDHKGreyMarket::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDHKGreyMarket_2eproto
