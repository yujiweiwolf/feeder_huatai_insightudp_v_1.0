// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDBond.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDBond_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDBond_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDBond_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDBond_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDBond_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDBond;
struct MDBondDefaultTypeInternal;
extern MDBondDefaultTypeInternal _MDBond_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDBond* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBond>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDBond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDBond) */ {
 public:
  inline MDBond() : MDBond(nullptr) {}
  ~MDBond() override;
  explicit PROTOBUF_CONSTEXPR MDBond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDBond(const MDBond& from);
  MDBond(MDBond&& from) noexcept
    : MDBond() {
    *this = ::std::move(from);
  }

  inline MDBond& operator=(const MDBond& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDBond& operator=(MDBond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDBond& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDBond* internal_default_instance() {
    return reinterpret_cast<const MDBond*>(
               &_MDBond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDBond& a, MDBond& b) {
    a.Swap(&b);
  }
  inline void Swap(MDBond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDBond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDBond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDBond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDBond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDBond& from) {
    MDBond::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDBond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDBond";
  }
  protected:
  explicit MDBond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyPriceQueueFieldNumber = 51,
    kBuyOrderQtyQueueFieldNumber = 52,
    kSellPriceQueueFieldNumber = 53,
    kSellOrderQtyQueueFieldNumber = 54,
    kBuyOrderQueueFieldNumber = 55,
    kSellOrderQueueFieldNumber = 56,
    kBuyNumOrdersQueueFieldNumber = 57,
    kSellNumOrdersQueueFieldNumber = 58,
    kBuySettlTypeQueueFieldNumber = 62,
    kSellSettlTypeQueueFieldNumber = 63,
    kBuyYieldQueueFieldNumber = 64,
    kSellYieldQueueFieldNumber = 65,
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kMarketPhaseCodeFieldNumber = 76,
    kSubTradingPhaseCode1FieldNumber = 77,
    kSubTradingPhaseCode2FieldNumber = 78,
    kSubTradingPhaseCode3FieldNumber = 79,
    kSubTradingPhaseCode4FieldNumber = 80,
    kSubTradingPhaseCode5FieldNumber = 81,
    kTradingHaltReasonFieldNumber = 88,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kMaxPxFieldNumber = 8,
    kMinPxFieldNumber = 9,
    kPreClosePxFieldNumber = 10,
    kNumTradesFieldNumber = 11,
    kTotalVolumeTradeFieldNumber = 12,
    kTotalValueTradeFieldNumber = 13,
    kLastPxFieldNumber = 14,
    kOpenPxFieldNumber = 15,
    kClosePxFieldNumber = 16,
    kHighPxFieldNumber = 17,
    kLowPxFieldNumber = 18,
    kDiffPx1FieldNumber = 19,
    kDiffPx2FieldNumber = 20,
    kTotalBuyQtyFieldNumber = 21,
    kTotalSellQtyFieldNumber = 22,
    kWeightedAvgBuyPxFieldNumber = 23,
    kWeightedAvgSellPxFieldNumber = 24,
    kWithdrawBuyNumberFieldNumber = 25,
    kWithdrawBuyAmountFieldNumber = 26,
    kWithdrawBuyMoneyFieldNumber = 27,
    kWithdrawSellNumberFieldNumber = 28,
    kWithdrawSellAmountFieldNumber = 29,
    kWithdrawSellMoneyFieldNumber = 30,
    kTotalBuyNumberFieldNumber = 31,
    kTotalSellNumberFieldNumber = 32,
    kBuyTradeMaxDurationFieldNumber = 33,
    kSellTradeMaxDurationFieldNumber = 34,
    kNumBuyOrdersFieldNumber = 35,
    kNumSellOrdersFieldNumber = 36,
    kYieldToMaturityFieldNumber = 37,
    kWeightedAvgPxFieldNumber = 38,
    kWeightedAvgPxBPFieldNumber = 39,
    kPreCloseWeightedAvgPxFieldNumber = 40,
    kExchangeDateFieldNumber = 41,
    kExchangeTimeFieldNumber = 42,
    kPreCloseYieldFieldNumber = 43,
    kPreWeightedAvgYieldFieldNumber = 44,
    kOpenYieldFieldNumber = 45,
    kHighYieldFieldNumber = 46,
    kLowYieldFieldNumber = 47,
    kLastYieldFieldNumber = 48,
    kWeightedAvgYieldFieldNumber = 49,
    kNorminalPxFieldNumber = 59,
    kShortSellSharesTradedFieldNumber = 60,
    kShortSellTurnoverFieldNumber = 61,
    kPreMarketLastPxFieldNumber = 66,
    kChannelNoFieldNumber = 50,
    kLastPxTypeFieldNumber = 82,
    kPreMarketTotalVolumeTradeFieldNumber = 67,
    kPreMarketTotalValueTradeFieldNumber = 68,
    kPreMarketHighPxFieldNumber = 69,
    kPreMarketLowPxFieldNumber = 70,
    kAfterHoursLastPxFieldNumber = 71,
    kAfterHoursTotalVolumeTradeFieldNumber = 72,
    kAfterHoursTotalValueTradeFieldNumber = 73,
    kAfterHoursHighPxFieldNumber = 74,
    kAfterHoursLowPxFieldNumber = 75,
    kAuctionLastPxFieldNumber = 83,
    kAuctionVolumeTradeFieldNumber = 84,
    kAuctionValueTradeFieldNumber = 85,
    kUSConsolidateVolumeFieldNumber = 86,
    kUSCompositeClosePxFieldNumber = 87,
    kOtcTotalVolumeTradeFieldNumber = 89,
    kOtcTotalValueTradeFieldNumber = 90,
    kOtcNumTradesFieldNumber = 91,
    kDataMultiplePowerOf10FieldNumber = 92,
  };
  // repeated int64 BuyPriceQueue = 51 [packed = true];
  int buypricequeue_size() const;
  private:
  int _internal_buypricequeue_size() const;
  public:
  void clear_buypricequeue();
  private:
  int64_t _internal_buypricequeue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buypricequeue() const;
  void _internal_add_buypricequeue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buypricequeue();
  public:
  int64_t buypricequeue(int index) const;
  void set_buypricequeue(int index, int64_t value);
  void add_buypricequeue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buypricequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buypricequeue();

  // repeated int64 BuyOrderQtyQueue = 52 [packed = true];
  int buyorderqtyqueue_size() const;
  private:
  int _internal_buyorderqtyqueue_size() const;
  public:
  void clear_buyorderqtyqueue();
  private:
  int64_t _internal_buyorderqtyqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buyorderqtyqueue() const;
  void _internal_add_buyorderqtyqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buyorderqtyqueue();
  public:
  int64_t buyorderqtyqueue(int index) const;
  void set_buyorderqtyqueue(int index, int64_t value);
  void add_buyorderqtyqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buyorderqtyqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buyorderqtyqueue();

  // repeated int64 SellPriceQueue = 53 [packed = true];
  int sellpricequeue_size() const;
  private:
  int _internal_sellpricequeue_size() const;
  public:
  void clear_sellpricequeue();
  private:
  int64_t _internal_sellpricequeue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellpricequeue() const;
  void _internal_add_sellpricequeue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellpricequeue();
  public:
  int64_t sellpricequeue(int index) const;
  void set_sellpricequeue(int index, int64_t value);
  void add_sellpricequeue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellpricequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellpricequeue();

  // repeated int64 SellOrderQtyQueue = 54 [packed = true];
  int sellorderqtyqueue_size() const;
  private:
  int _internal_sellorderqtyqueue_size() const;
  public:
  void clear_sellorderqtyqueue();
  private:
  int64_t _internal_sellorderqtyqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellorderqtyqueue() const;
  void _internal_add_sellorderqtyqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellorderqtyqueue();
  public:
  int64_t sellorderqtyqueue(int index) const;
  void set_sellorderqtyqueue(int index, int64_t value);
  void add_sellorderqtyqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellorderqtyqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellorderqtyqueue();

  // repeated int64 BuyOrderQueue = 55 [packed = true];
  int buyorderqueue_size() const;
  private:
  int _internal_buyorderqueue_size() const;
  public:
  void clear_buyorderqueue();
  private:
  int64_t _internal_buyorderqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buyorderqueue() const;
  void _internal_add_buyorderqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buyorderqueue();
  public:
  int64_t buyorderqueue(int index) const;
  void set_buyorderqueue(int index, int64_t value);
  void add_buyorderqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buyorderqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buyorderqueue();

  // repeated int64 SellOrderQueue = 56 [packed = true];
  int sellorderqueue_size() const;
  private:
  int _internal_sellorderqueue_size() const;
  public:
  void clear_sellorderqueue();
  private:
  int64_t _internal_sellorderqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellorderqueue() const;
  void _internal_add_sellorderqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellorderqueue();
  public:
  int64_t sellorderqueue(int index) const;
  void set_sellorderqueue(int index, int64_t value);
  void add_sellorderqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellorderqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellorderqueue();

  // repeated int64 BuyNumOrdersQueue = 57 [packed = true];
  int buynumordersqueue_size() const;
  private:
  int _internal_buynumordersqueue_size() const;
  public:
  void clear_buynumordersqueue();
  private:
  int64_t _internal_buynumordersqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buynumordersqueue() const;
  void _internal_add_buynumordersqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buynumordersqueue();
  public:
  int64_t buynumordersqueue(int index) const;
  void set_buynumordersqueue(int index, int64_t value);
  void add_buynumordersqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buynumordersqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buynumordersqueue();

  // repeated int64 SellNumOrdersQueue = 58 [packed = true];
  int sellnumordersqueue_size() const;
  private:
  int _internal_sellnumordersqueue_size() const;
  public:
  void clear_sellnumordersqueue();
  private:
  int64_t _internal_sellnumordersqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellnumordersqueue() const;
  void _internal_add_sellnumordersqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellnumordersqueue();
  public:
  int64_t sellnumordersqueue(int index) const;
  void set_sellnumordersqueue(int index, int64_t value);
  void add_sellnumordersqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellnumordersqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellnumordersqueue();

  // repeated int32 BuySettlTypeQueue = 62 [packed = true];
  int buysettltypequeue_size() const;
  private:
  int _internal_buysettltypequeue_size() const;
  public:
  void clear_buysettltypequeue();
  private:
  int32_t _internal_buysettltypequeue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_buysettltypequeue() const;
  void _internal_add_buysettltypequeue(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_buysettltypequeue();
  public:
  int32_t buysettltypequeue(int index) const;
  void set_buysettltypequeue(int index, int32_t value);
  void add_buysettltypequeue(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      buysettltypequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_buysettltypequeue();

  // repeated int32 SellSettlTypeQueue = 63 [packed = true];
  int sellsettltypequeue_size() const;
  private:
  int _internal_sellsettltypequeue_size() const;
  public:
  void clear_sellsettltypequeue();
  private:
  int32_t _internal_sellsettltypequeue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sellsettltypequeue() const;
  void _internal_add_sellsettltypequeue(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sellsettltypequeue();
  public:
  int32_t sellsettltypequeue(int index) const;
  void set_sellsettltypequeue(int index, int32_t value);
  void add_sellsettltypequeue(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sellsettltypequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sellsettltypequeue();

  // repeated int64 BuyYieldQueue = 64 [packed = true];
  int buyyieldqueue_size() const;
  private:
  int _internal_buyyieldqueue_size() const;
  public:
  void clear_buyyieldqueue();
  private:
  int64_t _internal_buyyieldqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buyyieldqueue() const;
  void _internal_add_buyyieldqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buyyieldqueue();
  public:
  int64_t buyyieldqueue(int index) const;
  void set_buyyieldqueue(int index, int64_t value);
  void add_buyyieldqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buyyieldqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buyyieldqueue();

  // repeated int64 SellYieldQueue = 65 [packed = true];
  int sellyieldqueue_size() const;
  private:
  int _internal_sellyieldqueue_size() const;
  public:
  void clear_sellyieldqueue();
  private:
  int64_t _internal_sellyieldqueue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sellyieldqueue() const;
  void _internal_add_sellyieldqueue(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sellyieldqueue();
  public:
  int64_t sellyieldqueue(int index) const;
  void set_sellyieldqueue(int index, int64_t value);
  void add_sellyieldqueue(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sellyieldqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sellyieldqueue();

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // string MarketPhaseCode = 76;
  void clear_marketphasecode();
  const std::string& marketphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_marketphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_marketphasecode();
  PROTOBUF_NODISCARD std::string* release_marketphasecode();
  void set_allocated_marketphasecode(std::string* marketphasecode);
  private:
  const std::string& _internal_marketphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marketphasecode(const std::string& value);
  std::string* _internal_mutable_marketphasecode();
  public:

  // string SubTradingPhaseCode1 = 77;
  void clear_subtradingphasecode1();
  const std::string& subtradingphasecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtradingphasecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtradingphasecode1();
  PROTOBUF_NODISCARD std::string* release_subtradingphasecode1();
  void set_allocated_subtradingphasecode1(std::string* subtradingphasecode1);
  private:
  const std::string& _internal_subtradingphasecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtradingphasecode1(const std::string& value);
  std::string* _internal_mutable_subtradingphasecode1();
  public:

  // string SubTradingPhaseCode2 = 78;
  void clear_subtradingphasecode2();
  const std::string& subtradingphasecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtradingphasecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtradingphasecode2();
  PROTOBUF_NODISCARD std::string* release_subtradingphasecode2();
  void set_allocated_subtradingphasecode2(std::string* subtradingphasecode2);
  private:
  const std::string& _internal_subtradingphasecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtradingphasecode2(const std::string& value);
  std::string* _internal_mutable_subtradingphasecode2();
  public:

  // string SubTradingPhaseCode3 = 79;
  void clear_subtradingphasecode3();
  const std::string& subtradingphasecode3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtradingphasecode3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtradingphasecode3();
  PROTOBUF_NODISCARD std::string* release_subtradingphasecode3();
  void set_allocated_subtradingphasecode3(std::string* subtradingphasecode3);
  private:
  const std::string& _internal_subtradingphasecode3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtradingphasecode3(const std::string& value);
  std::string* _internal_mutable_subtradingphasecode3();
  public:

  // string SubTradingPhaseCode4 = 80;
  void clear_subtradingphasecode4();
  const std::string& subtradingphasecode4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtradingphasecode4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtradingphasecode4();
  PROTOBUF_NODISCARD std::string* release_subtradingphasecode4();
  void set_allocated_subtradingphasecode4(std::string* subtradingphasecode4);
  private:
  const std::string& _internal_subtradingphasecode4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtradingphasecode4(const std::string& value);
  std::string* _internal_mutable_subtradingphasecode4();
  public:

  // string SubTradingPhaseCode5 = 81;
  void clear_subtradingphasecode5();
  const std::string& subtradingphasecode5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtradingphasecode5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtradingphasecode5();
  PROTOBUF_NODISCARD std::string* release_subtradingphasecode5();
  void set_allocated_subtradingphasecode5(std::string* subtradingphasecode5);
  private:
  const std::string& _internal_subtradingphasecode5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtradingphasecode5(const std::string& value);
  std::string* _internal_mutable_subtradingphasecode5();
  public:

  // string TradingHaltReason = 88;
  void clear_tradinghaltreason();
  const std::string& tradinghaltreason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradinghaltreason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradinghaltreason();
  PROTOBUF_NODISCARD std::string* release_tradinghaltreason();
  void set_allocated_tradinghaltreason(std::string* tradinghaltreason);
  private:
  const std::string& _internal_tradinghaltreason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradinghaltreason(const std::string& value);
  std::string* _internal_mutable_tradinghaltreason();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 MaxPx = 8;
  void clear_maxpx();
  int64_t maxpx() const;
  void set_maxpx(int64_t value);
  private:
  int64_t _internal_maxpx() const;
  void _internal_set_maxpx(int64_t value);
  public:

  // int64 MinPx = 9;
  void clear_minpx();
  int64_t minpx() const;
  void set_minpx(int64_t value);
  private:
  int64_t _internal_minpx() const;
  void _internal_set_minpx(int64_t value);
  public:

  // int64 PreClosePx = 10;
  void clear_preclosepx();
  int64_t preclosepx() const;
  void set_preclosepx(int64_t value);
  private:
  int64_t _internal_preclosepx() const;
  void _internal_set_preclosepx(int64_t value);
  public:

  // int64 NumTrades = 11;
  void clear_numtrades();
  int64_t numtrades() const;
  void set_numtrades(int64_t value);
  private:
  int64_t _internal_numtrades() const;
  void _internal_set_numtrades(int64_t value);
  public:

  // int64 TotalVolumeTrade = 12;
  void clear_totalvolumetrade();
  int64_t totalvolumetrade() const;
  void set_totalvolumetrade(int64_t value);
  private:
  int64_t _internal_totalvolumetrade() const;
  void _internal_set_totalvolumetrade(int64_t value);
  public:

  // int64 TotalValueTrade = 13;
  void clear_totalvaluetrade();
  int64_t totalvaluetrade() const;
  void set_totalvaluetrade(int64_t value);
  private:
  int64_t _internal_totalvaluetrade() const;
  void _internal_set_totalvaluetrade(int64_t value);
  public:

  // int64 LastPx = 14;
  void clear_lastpx();
  int64_t lastpx() const;
  void set_lastpx(int64_t value);
  private:
  int64_t _internal_lastpx() const;
  void _internal_set_lastpx(int64_t value);
  public:

  // int64 OpenPx = 15;
  void clear_openpx();
  int64_t openpx() const;
  void set_openpx(int64_t value);
  private:
  int64_t _internal_openpx() const;
  void _internal_set_openpx(int64_t value);
  public:

  // int64 ClosePx = 16;
  void clear_closepx();
  int64_t closepx() const;
  void set_closepx(int64_t value);
  private:
  int64_t _internal_closepx() const;
  void _internal_set_closepx(int64_t value);
  public:

  // int64 HighPx = 17;
  void clear_highpx();
  int64_t highpx() const;
  void set_highpx(int64_t value);
  private:
  int64_t _internal_highpx() const;
  void _internal_set_highpx(int64_t value);
  public:

  // int64 LowPx = 18;
  void clear_lowpx();
  int64_t lowpx() const;
  void set_lowpx(int64_t value);
  private:
  int64_t _internal_lowpx() const;
  void _internal_set_lowpx(int64_t value);
  public:

  // int64 DiffPx1 = 19;
  void clear_diffpx1();
  int64_t diffpx1() const;
  void set_diffpx1(int64_t value);
  private:
  int64_t _internal_diffpx1() const;
  void _internal_set_diffpx1(int64_t value);
  public:

  // int64 DiffPx2 = 20;
  void clear_diffpx2();
  int64_t diffpx2() const;
  void set_diffpx2(int64_t value);
  private:
  int64_t _internal_diffpx2() const;
  void _internal_set_diffpx2(int64_t value);
  public:

  // int64 TotalBuyQty = 21;
  void clear_totalbuyqty();
  int64_t totalbuyqty() const;
  void set_totalbuyqty(int64_t value);
  private:
  int64_t _internal_totalbuyqty() const;
  void _internal_set_totalbuyqty(int64_t value);
  public:

  // int64 TotalSellQty = 22;
  void clear_totalsellqty();
  int64_t totalsellqty() const;
  void set_totalsellqty(int64_t value);
  private:
  int64_t _internal_totalsellqty() const;
  void _internal_set_totalsellqty(int64_t value);
  public:

  // int64 WeightedAvgBuyPx = 23;
  void clear_weightedavgbuypx();
  int64_t weightedavgbuypx() const;
  void set_weightedavgbuypx(int64_t value);
  private:
  int64_t _internal_weightedavgbuypx() const;
  void _internal_set_weightedavgbuypx(int64_t value);
  public:

  // int64 WeightedAvgSellPx = 24;
  void clear_weightedavgsellpx();
  int64_t weightedavgsellpx() const;
  void set_weightedavgsellpx(int64_t value);
  private:
  int64_t _internal_weightedavgsellpx() const;
  void _internal_set_weightedavgsellpx(int64_t value);
  public:

  // int64 WithdrawBuyNumber = 25;
  void clear_withdrawbuynumber();
  int64_t withdrawbuynumber() const;
  void set_withdrawbuynumber(int64_t value);
  private:
  int64_t _internal_withdrawbuynumber() const;
  void _internal_set_withdrawbuynumber(int64_t value);
  public:

  // int64 WithdrawBuyAmount = 26;
  void clear_withdrawbuyamount();
  int64_t withdrawbuyamount() const;
  void set_withdrawbuyamount(int64_t value);
  private:
  int64_t _internal_withdrawbuyamount() const;
  void _internal_set_withdrawbuyamount(int64_t value);
  public:

  // int64 WithdrawBuyMoney = 27;
  void clear_withdrawbuymoney();
  int64_t withdrawbuymoney() const;
  void set_withdrawbuymoney(int64_t value);
  private:
  int64_t _internal_withdrawbuymoney() const;
  void _internal_set_withdrawbuymoney(int64_t value);
  public:

  // int64 WithdrawSellNumber = 28;
  void clear_withdrawsellnumber();
  int64_t withdrawsellnumber() const;
  void set_withdrawsellnumber(int64_t value);
  private:
  int64_t _internal_withdrawsellnumber() const;
  void _internal_set_withdrawsellnumber(int64_t value);
  public:

  // int64 WithdrawSellAmount = 29;
  void clear_withdrawsellamount();
  int64_t withdrawsellamount() const;
  void set_withdrawsellamount(int64_t value);
  private:
  int64_t _internal_withdrawsellamount() const;
  void _internal_set_withdrawsellamount(int64_t value);
  public:

  // int64 WithdrawSellMoney = 30;
  void clear_withdrawsellmoney();
  int64_t withdrawsellmoney() const;
  void set_withdrawsellmoney(int64_t value);
  private:
  int64_t _internal_withdrawsellmoney() const;
  void _internal_set_withdrawsellmoney(int64_t value);
  public:

  // int64 TotalBuyNumber = 31;
  void clear_totalbuynumber();
  int64_t totalbuynumber() const;
  void set_totalbuynumber(int64_t value);
  private:
  int64_t _internal_totalbuynumber() const;
  void _internal_set_totalbuynumber(int64_t value);
  public:

  // int64 TotalSellNumber = 32;
  void clear_totalsellnumber();
  int64_t totalsellnumber() const;
  void set_totalsellnumber(int64_t value);
  private:
  int64_t _internal_totalsellnumber() const;
  void _internal_set_totalsellnumber(int64_t value);
  public:

  // int64 BuyTradeMaxDuration = 33;
  void clear_buytrademaxduration();
  int64_t buytrademaxduration() const;
  void set_buytrademaxduration(int64_t value);
  private:
  int64_t _internal_buytrademaxduration() const;
  void _internal_set_buytrademaxduration(int64_t value);
  public:

  // int64 SellTradeMaxDuration = 34;
  void clear_selltrademaxduration();
  int64_t selltrademaxduration() const;
  void set_selltrademaxduration(int64_t value);
  private:
  int64_t _internal_selltrademaxduration() const;
  void _internal_set_selltrademaxduration(int64_t value);
  public:

  // int32 NumBuyOrders = 35;
  void clear_numbuyorders();
  int32_t numbuyorders() const;
  void set_numbuyorders(int32_t value);
  private:
  int32_t _internal_numbuyorders() const;
  void _internal_set_numbuyorders(int32_t value);
  public:

  // int32 NumSellOrders = 36;
  void clear_numsellorders();
  int32_t numsellorders() const;
  void set_numsellorders(int32_t value);
  private:
  int32_t _internal_numsellorders() const;
  void _internal_set_numsellorders(int32_t value);
  public:

  // int64 YieldToMaturity = 37;
  void clear_yieldtomaturity();
  int64_t yieldtomaturity() const;
  void set_yieldtomaturity(int64_t value);
  private:
  int64_t _internal_yieldtomaturity() const;
  void _internal_set_yieldtomaturity(int64_t value);
  public:

  // int64 WeightedAvgPx = 38;
  void clear_weightedavgpx();
  int64_t weightedavgpx() const;
  void set_weightedavgpx(int64_t value);
  private:
  int64_t _internal_weightedavgpx() const;
  void _internal_set_weightedavgpx(int64_t value);
  public:

  // int64 WeightedAvgPxBP = 39;
  void clear_weightedavgpxbp();
  int64_t weightedavgpxbp() const;
  void set_weightedavgpxbp(int64_t value);
  private:
  int64_t _internal_weightedavgpxbp() const;
  void _internal_set_weightedavgpxbp(int64_t value);
  public:

  // int64 PreCloseWeightedAvgPx = 40;
  void clear_precloseweightedavgpx();
  int64_t precloseweightedavgpx() const;
  void set_precloseweightedavgpx(int64_t value);
  private:
  int64_t _internal_precloseweightedavgpx() const;
  void _internal_set_precloseweightedavgpx(int64_t value);
  public:

  // int32 ExchangeDate = 41;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 42;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int64 PreCloseYield = 43;
  void clear_precloseyield();
  int64_t precloseyield() const;
  void set_precloseyield(int64_t value);
  private:
  int64_t _internal_precloseyield() const;
  void _internal_set_precloseyield(int64_t value);
  public:

  // int64 PreWeightedAvgYield = 44;
  void clear_preweightedavgyield();
  int64_t preweightedavgyield() const;
  void set_preweightedavgyield(int64_t value);
  private:
  int64_t _internal_preweightedavgyield() const;
  void _internal_set_preweightedavgyield(int64_t value);
  public:

  // int64 OpenYield = 45;
  void clear_openyield();
  int64_t openyield() const;
  void set_openyield(int64_t value);
  private:
  int64_t _internal_openyield() const;
  void _internal_set_openyield(int64_t value);
  public:

  // int64 HighYield = 46;
  void clear_highyield();
  int64_t highyield() const;
  void set_highyield(int64_t value);
  private:
  int64_t _internal_highyield() const;
  void _internal_set_highyield(int64_t value);
  public:

  // int64 LowYield = 47;
  void clear_lowyield();
  int64_t lowyield() const;
  void set_lowyield(int64_t value);
  private:
  int64_t _internal_lowyield() const;
  void _internal_set_lowyield(int64_t value);
  public:

  // int64 LastYield = 48;
  void clear_lastyield();
  int64_t lastyield() const;
  void set_lastyield(int64_t value);
  private:
  int64_t _internal_lastyield() const;
  void _internal_set_lastyield(int64_t value);
  public:

  // int64 WeightedAvgYield = 49;
  void clear_weightedavgyield();
  int64_t weightedavgyield() const;
  void set_weightedavgyield(int64_t value);
  private:
  int64_t _internal_weightedavgyield() const;
  void _internal_set_weightedavgyield(int64_t value);
  public:

  // int64 NorminalPx = 59;
  void clear_norminalpx();
  int64_t norminalpx() const;
  void set_norminalpx(int64_t value);
  private:
  int64_t _internal_norminalpx() const;
  void _internal_set_norminalpx(int64_t value);
  public:

  // int64 ShortSellSharesTraded = 60;
  void clear_shortsellsharestraded();
  int64_t shortsellsharestraded() const;
  void set_shortsellsharestraded(int64_t value);
  private:
  int64_t _internal_shortsellsharestraded() const;
  void _internal_set_shortsellsharestraded(int64_t value);
  public:

  // int64 ShortSellTurnover = 61;
  void clear_shortsellturnover();
  int64_t shortsellturnover() const;
  void set_shortsellturnover(int64_t value);
  private:
  int64_t _internal_shortsellturnover() const;
  void _internal_set_shortsellturnover(int64_t value);
  public:

  // int64 PreMarketLastPx = 66;
  void clear_premarketlastpx();
  int64_t premarketlastpx() const;
  void set_premarketlastpx(int64_t value);
  private:
  int64_t _internal_premarketlastpx() const;
  void _internal_set_premarketlastpx(int64_t value);
  public:

  // int32 ChannelNo = 50;
  void clear_channelno();
  int32_t channelno() const;
  void set_channelno(int32_t value);
  private:
  int32_t _internal_channelno() const;
  void _internal_set_channelno(int32_t value);
  public:

  // int32 LastPxType = 82;
  void clear_lastpxtype();
  int32_t lastpxtype() const;
  void set_lastpxtype(int32_t value);
  private:
  int32_t _internal_lastpxtype() const;
  void _internal_set_lastpxtype(int32_t value);
  public:

  // int64 PreMarketTotalVolumeTrade = 67;
  void clear_premarkettotalvolumetrade();
  int64_t premarkettotalvolumetrade() const;
  void set_premarkettotalvolumetrade(int64_t value);
  private:
  int64_t _internal_premarkettotalvolumetrade() const;
  void _internal_set_premarkettotalvolumetrade(int64_t value);
  public:

  // int64 PreMarketTotalValueTrade = 68;
  void clear_premarkettotalvaluetrade();
  int64_t premarkettotalvaluetrade() const;
  void set_premarkettotalvaluetrade(int64_t value);
  private:
  int64_t _internal_premarkettotalvaluetrade() const;
  void _internal_set_premarkettotalvaluetrade(int64_t value);
  public:

  // int64 PreMarketHighPx = 69;
  void clear_premarkethighpx();
  int64_t premarkethighpx() const;
  void set_premarkethighpx(int64_t value);
  private:
  int64_t _internal_premarkethighpx() const;
  void _internal_set_premarkethighpx(int64_t value);
  public:

  // int64 PreMarketLowPx = 70;
  void clear_premarketlowpx();
  int64_t premarketlowpx() const;
  void set_premarketlowpx(int64_t value);
  private:
  int64_t _internal_premarketlowpx() const;
  void _internal_set_premarketlowpx(int64_t value);
  public:

  // int64 AfterHoursLastPx = 71;
  void clear_afterhourslastpx();
  int64_t afterhourslastpx() const;
  void set_afterhourslastpx(int64_t value);
  private:
  int64_t _internal_afterhourslastpx() const;
  void _internal_set_afterhourslastpx(int64_t value);
  public:

  // int64 AfterHoursTotalVolumeTrade = 72;
  void clear_afterhourstotalvolumetrade();
  int64_t afterhourstotalvolumetrade() const;
  void set_afterhourstotalvolumetrade(int64_t value);
  private:
  int64_t _internal_afterhourstotalvolumetrade() const;
  void _internal_set_afterhourstotalvolumetrade(int64_t value);
  public:

  // int64 AfterHoursTotalValueTrade = 73;
  void clear_afterhourstotalvaluetrade();
  int64_t afterhourstotalvaluetrade() const;
  void set_afterhourstotalvaluetrade(int64_t value);
  private:
  int64_t _internal_afterhourstotalvaluetrade() const;
  void _internal_set_afterhourstotalvaluetrade(int64_t value);
  public:

  // int64 AfterHoursHighPx = 74;
  void clear_afterhourshighpx();
  int64_t afterhourshighpx() const;
  void set_afterhourshighpx(int64_t value);
  private:
  int64_t _internal_afterhourshighpx() const;
  void _internal_set_afterhourshighpx(int64_t value);
  public:

  // int64 AfterHoursLowPx = 75;
  void clear_afterhourslowpx();
  int64_t afterhourslowpx() const;
  void set_afterhourslowpx(int64_t value);
  private:
  int64_t _internal_afterhourslowpx() const;
  void _internal_set_afterhourslowpx(int64_t value);
  public:

  // int64 AuctionLastPx = 83;
  void clear_auctionlastpx();
  int64_t auctionlastpx() const;
  void set_auctionlastpx(int64_t value);
  private:
  int64_t _internal_auctionlastpx() const;
  void _internal_set_auctionlastpx(int64_t value);
  public:

  // int64 AuctionVolumeTrade = 84;
  void clear_auctionvolumetrade();
  int64_t auctionvolumetrade() const;
  void set_auctionvolumetrade(int64_t value);
  private:
  int64_t _internal_auctionvolumetrade() const;
  void _internal_set_auctionvolumetrade(int64_t value);
  public:

  // int64 AuctionValueTrade = 85;
  void clear_auctionvaluetrade();
  int64_t auctionvaluetrade() const;
  void set_auctionvaluetrade(int64_t value);
  private:
  int64_t _internal_auctionvaluetrade() const;
  void _internal_set_auctionvaluetrade(int64_t value);
  public:

  // int64 USConsolidateVolume = 86;
  void clear_usconsolidatevolume();
  int64_t usconsolidatevolume() const;
  void set_usconsolidatevolume(int64_t value);
  private:
  int64_t _internal_usconsolidatevolume() const;
  void _internal_set_usconsolidatevolume(int64_t value);
  public:

  // int64 USCompositeClosePx = 87;
  void clear_uscompositeclosepx();
  int64_t uscompositeclosepx() const;
  void set_uscompositeclosepx(int64_t value);
  private:
  int64_t _internal_uscompositeclosepx() const;
  void _internal_set_uscompositeclosepx(int64_t value);
  public:

  // int64 OtcTotalVolumeTrade = 89;
  void clear_otctotalvolumetrade();
  int64_t otctotalvolumetrade() const;
  void set_otctotalvolumetrade(int64_t value);
  private:
  int64_t _internal_otctotalvolumetrade() const;
  void _internal_set_otctotalvolumetrade(int64_t value);
  public:

  // int64 OtcTotalValueTrade = 90;
  void clear_otctotalvaluetrade();
  int64_t otctotalvaluetrade() const;
  void set_otctotalvaluetrade(int64_t value);
  private:
  int64_t _internal_otctotalvaluetrade() const;
  void _internal_set_otctotalvaluetrade(int64_t value);
  public:

  // int64 OtcNumTrades = 91;
  void clear_otcnumtrades();
  int64_t otcnumtrades() const;
  void set_otcnumtrades(int64_t value);
  private:
  int64_t _internal_otcnumtrades() const;
  void _internal_set_otcnumtrades(int64_t value);
  public:

  // int32 DataMultiplePowerOf10 = 92;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDBond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buypricequeue_;
    mutable std::atomic<int> _buypricequeue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buyorderqtyqueue_;
    mutable std::atomic<int> _buyorderqtyqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellpricequeue_;
    mutable std::atomic<int> _sellpricequeue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellorderqtyqueue_;
    mutable std::atomic<int> _sellorderqtyqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buyorderqueue_;
    mutable std::atomic<int> _buyorderqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellorderqueue_;
    mutable std::atomic<int> _sellorderqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buynumordersqueue_;
    mutable std::atomic<int> _buynumordersqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellnumordersqueue_;
    mutable std::atomic<int> _sellnumordersqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > buysettltypequeue_;
    mutable std::atomic<int> _buysettltypequeue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sellsettltypequeue_;
    mutable std::atomic<int> _sellsettltypequeue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buyyieldqueue_;
    mutable std::atomic<int> _buyyieldqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sellyieldqueue_;
    mutable std::atomic<int> _sellyieldqueue_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradinghaltreason_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t maxpx_;
    int64_t minpx_;
    int64_t preclosepx_;
    int64_t numtrades_;
    int64_t totalvolumetrade_;
    int64_t totalvaluetrade_;
    int64_t lastpx_;
    int64_t openpx_;
    int64_t closepx_;
    int64_t highpx_;
    int64_t lowpx_;
    int64_t diffpx1_;
    int64_t diffpx2_;
    int64_t totalbuyqty_;
    int64_t totalsellqty_;
    int64_t weightedavgbuypx_;
    int64_t weightedavgsellpx_;
    int64_t withdrawbuynumber_;
    int64_t withdrawbuyamount_;
    int64_t withdrawbuymoney_;
    int64_t withdrawsellnumber_;
    int64_t withdrawsellamount_;
    int64_t withdrawsellmoney_;
    int64_t totalbuynumber_;
    int64_t totalsellnumber_;
    int64_t buytrademaxduration_;
    int64_t selltrademaxduration_;
    int32_t numbuyorders_;
    int32_t numsellorders_;
    int64_t yieldtomaturity_;
    int64_t weightedavgpx_;
    int64_t weightedavgpxbp_;
    int64_t precloseweightedavgpx_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int64_t precloseyield_;
    int64_t preweightedavgyield_;
    int64_t openyield_;
    int64_t highyield_;
    int64_t lowyield_;
    int64_t lastyield_;
    int64_t weightedavgyield_;
    int64_t norminalpx_;
    int64_t shortsellsharestraded_;
    int64_t shortsellturnover_;
    int64_t premarketlastpx_;
    int32_t channelno_;
    int32_t lastpxtype_;
    int64_t premarkettotalvolumetrade_;
    int64_t premarkettotalvaluetrade_;
    int64_t premarkethighpx_;
    int64_t premarketlowpx_;
    int64_t afterhourslastpx_;
    int64_t afterhourstotalvolumetrade_;
    int64_t afterhourstotalvaluetrade_;
    int64_t afterhourshighpx_;
    int64_t afterhourslowpx_;
    int64_t auctionlastpx_;
    int64_t auctionvolumetrade_;
    int64_t auctionvaluetrade_;
    int64_t usconsolidatevolume_;
    int64_t uscompositeclosepx_;
    int64_t otctotalvolumetrade_;
    int64_t otctotalvaluetrade_;
    int64_t otcnumtrades_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDBond_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDBond

// string HTSCSecurityID = 1;
inline void MDBond::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDBond::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
}
inline std::string* MDBond::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
  return _s;
}
inline const std::string& MDBond::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDBond::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDBond::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDBond::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDBond::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDBond::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MDDate)
  return _internal_mddate();
}
inline void MDBond::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDBond::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MDDate)
}

// int32 MDTime = 3;
inline void MDBond::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDBond::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDBond::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MDTime)
  return _internal_mdtime();
}
inline void MDBond::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDBond::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDBond::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDBond::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDBond::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDBond::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDBond::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDBond::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDBond::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
}
inline std::string* MDBond::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
  return _s;
}
inline const std::string& MDBond::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDBond::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDBond::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDBond::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDBond::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDBond::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.securityIDSource)
  return _internal_securityidsource();
}
inline void MDBond::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDBond::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDBond::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDBond::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDBond::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.securityType)
  return _internal_securitytype();
}
inline void MDBond::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDBond::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.securityType)
}

// int64 MaxPx = 8;
inline void MDBond::clear_maxpx() {
  _impl_.maxpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_maxpx() const {
  return _impl_.maxpx_;
}
inline int64_t MDBond::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MaxPx)
  return _internal_maxpx();
}
inline void MDBond::_internal_set_maxpx(int64_t value) {
  
  _impl_.maxpx_ = value;
}
inline void MDBond::set_maxpx(int64_t value) {
  _internal_set_maxpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MaxPx)
}

// int64 MinPx = 9;
inline void MDBond::clear_minpx() {
  _impl_.minpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_minpx() const {
  return _impl_.minpx_;
}
inline int64_t MDBond::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MinPx)
  return _internal_minpx();
}
inline void MDBond::_internal_set_minpx(int64_t value) {
  
  _impl_.minpx_ = value;
}
inline void MDBond::set_minpx(int64_t value) {
  _internal_set_minpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MinPx)
}

// int64 PreClosePx = 10;
inline void MDBond::clear_preclosepx() {
  _impl_.preclosepx_ = int64_t{0};
}
inline int64_t MDBond::_internal_preclosepx() const {
  return _impl_.preclosepx_;
}
inline int64_t MDBond::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreClosePx)
  return _internal_preclosepx();
}
inline void MDBond::_internal_set_preclosepx(int64_t value) {
  
  _impl_.preclosepx_ = value;
}
inline void MDBond::set_preclosepx(int64_t value) {
  _internal_set_preclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreClosePx)
}

// int64 NumTrades = 11;
inline void MDBond::clear_numtrades() {
  _impl_.numtrades_ = int64_t{0};
}
inline int64_t MDBond::_internal_numtrades() const {
  return _impl_.numtrades_;
}
inline int64_t MDBond::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.NumTrades)
  return _internal_numtrades();
}
inline void MDBond::_internal_set_numtrades(int64_t value) {
  
  _impl_.numtrades_ = value;
}
inline void MDBond::set_numtrades(int64_t value) {
  _internal_set_numtrades(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.NumTrades)
}

// int64 TotalVolumeTrade = 12;
inline void MDBond::clear_totalvolumetrade() {
  _impl_.totalvolumetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_totalvolumetrade() const {
  return _impl_.totalvolumetrade_;
}
inline int64_t MDBond::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalVolumeTrade)
  return _internal_totalvolumetrade();
}
inline void MDBond::_internal_set_totalvolumetrade(int64_t value) {
  
  _impl_.totalvolumetrade_ = value;
}
inline void MDBond::set_totalvolumetrade(int64_t value) {
  _internal_set_totalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalVolumeTrade)
}

// int64 TotalValueTrade = 13;
inline void MDBond::clear_totalvaluetrade() {
  _impl_.totalvaluetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_totalvaluetrade() const {
  return _impl_.totalvaluetrade_;
}
inline int64_t MDBond::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalValueTrade)
  return _internal_totalvaluetrade();
}
inline void MDBond::_internal_set_totalvaluetrade(int64_t value) {
  
  _impl_.totalvaluetrade_ = value;
}
inline void MDBond::set_totalvaluetrade(int64_t value) {
  _internal_set_totalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalValueTrade)
}

// int64 LastPx = 14;
inline void MDBond::clear_lastpx() {
  _impl_.lastpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_lastpx() const {
  return _impl_.lastpx_;
}
inline int64_t MDBond::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LastPx)
  return _internal_lastpx();
}
inline void MDBond::_internal_set_lastpx(int64_t value) {
  
  _impl_.lastpx_ = value;
}
inline void MDBond::set_lastpx(int64_t value) {
  _internal_set_lastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LastPx)
}

// int64 OpenPx = 15;
inline void MDBond::clear_openpx() {
  _impl_.openpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_openpx() const {
  return _impl_.openpx_;
}
inline int64_t MDBond::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OpenPx)
  return _internal_openpx();
}
inline void MDBond::_internal_set_openpx(int64_t value) {
  
  _impl_.openpx_ = value;
}
inline void MDBond::set_openpx(int64_t value) {
  _internal_set_openpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OpenPx)
}

// int64 ClosePx = 16;
inline void MDBond::clear_closepx() {
  _impl_.closepx_ = int64_t{0};
}
inline int64_t MDBond::_internal_closepx() const {
  return _impl_.closepx_;
}
inline int64_t MDBond::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ClosePx)
  return _internal_closepx();
}
inline void MDBond::_internal_set_closepx(int64_t value) {
  
  _impl_.closepx_ = value;
}
inline void MDBond::set_closepx(int64_t value) {
  _internal_set_closepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ClosePx)
}

// int64 HighPx = 17;
inline void MDBond::clear_highpx() {
  _impl_.highpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_highpx() const {
  return _impl_.highpx_;
}
inline int64_t MDBond::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.HighPx)
  return _internal_highpx();
}
inline void MDBond::_internal_set_highpx(int64_t value) {
  
  _impl_.highpx_ = value;
}
inline void MDBond::set_highpx(int64_t value) {
  _internal_set_highpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.HighPx)
}

// int64 LowPx = 18;
inline void MDBond::clear_lowpx() {
  _impl_.lowpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_lowpx() const {
  return _impl_.lowpx_;
}
inline int64_t MDBond::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LowPx)
  return _internal_lowpx();
}
inline void MDBond::_internal_set_lowpx(int64_t value) {
  
  _impl_.lowpx_ = value;
}
inline void MDBond::set_lowpx(int64_t value) {
  _internal_set_lowpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LowPx)
}

// int64 DiffPx1 = 19;
inline void MDBond::clear_diffpx1() {
  _impl_.diffpx1_ = int64_t{0};
}
inline int64_t MDBond::_internal_diffpx1() const {
  return _impl_.diffpx1_;
}
inline int64_t MDBond::diffpx1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.DiffPx1)
  return _internal_diffpx1();
}
inline void MDBond::_internal_set_diffpx1(int64_t value) {
  
  _impl_.diffpx1_ = value;
}
inline void MDBond::set_diffpx1(int64_t value) {
  _internal_set_diffpx1(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.DiffPx1)
}

// int64 DiffPx2 = 20;
inline void MDBond::clear_diffpx2() {
  _impl_.diffpx2_ = int64_t{0};
}
inline int64_t MDBond::_internal_diffpx2() const {
  return _impl_.diffpx2_;
}
inline int64_t MDBond::diffpx2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.DiffPx2)
  return _internal_diffpx2();
}
inline void MDBond::_internal_set_diffpx2(int64_t value) {
  
  _impl_.diffpx2_ = value;
}
inline void MDBond::set_diffpx2(int64_t value) {
  _internal_set_diffpx2(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.DiffPx2)
}

// int64 TotalBuyQty = 21;
inline void MDBond::clear_totalbuyqty() {
  _impl_.totalbuyqty_ = int64_t{0};
}
inline int64_t MDBond::_internal_totalbuyqty() const {
  return _impl_.totalbuyqty_;
}
inline int64_t MDBond::totalbuyqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalBuyQty)
  return _internal_totalbuyqty();
}
inline void MDBond::_internal_set_totalbuyqty(int64_t value) {
  
  _impl_.totalbuyqty_ = value;
}
inline void MDBond::set_totalbuyqty(int64_t value) {
  _internal_set_totalbuyqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalBuyQty)
}

// int64 TotalSellQty = 22;
inline void MDBond::clear_totalsellqty() {
  _impl_.totalsellqty_ = int64_t{0};
}
inline int64_t MDBond::_internal_totalsellqty() const {
  return _impl_.totalsellqty_;
}
inline int64_t MDBond::totalsellqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalSellQty)
  return _internal_totalsellqty();
}
inline void MDBond::_internal_set_totalsellqty(int64_t value) {
  
  _impl_.totalsellqty_ = value;
}
inline void MDBond::set_totalsellqty(int64_t value) {
  _internal_set_totalsellqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalSellQty)
}

// int64 WeightedAvgBuyPx = 23;
inline void MDBond::clear_weightedavgbuypx() {
  _impl_.weightedavgbuypx_ = int64_t{0};
}
inline int64_t MDBond::_internal_weightedavgbuypx() const {
  return _impl_.weightedavgbuypx_;
}
inline int64_t MDBond::weightedavgbuypx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgBuyPx)
  return _internal_weightedavgbuypx();
}
inline void MDBond::_internal_set_weightedavgbuypx(int64_t value) {
  
  _impl_.weightedavgbuypx_ = value;
}
inline void MDBond::set_weightedavgbuypx(int64_t value) {
  _internal_set_weightedavgbuypx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgBuyPx)
}

// int64 WeightedAvgSellPx = 24;
inline void MDBond::clear_weightedavgsellpx() {
  _impl_.weightedavgsellpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_weightedavgsellpx() const {
  return _impl_.weightedavgsellpx_;
}
inline int64_t MDBond::weightedavgsellpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgSellPx)
  return _internal_weightedavgsellpx();
}
inline void MDBond::_internal_set_weightedavgsellpx(int64_t value) {
  
  _impl_.weightedavgsellpx_ = value;
}
inline void MDBond::set_weightedavgsellpx(int64_t value) {
  _internal_set_weightedavgsellpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgSellPx)
}

// int64 WithdrawBuyNumber = 25;
inline void MDBond::clear_withdrawbuynumber() {
  _impl_.withdrawbuynumber_ = int64_t{0};
}
inline int64_t MDBond::_internal_withdrawbuynumber() const {
  return _impl_.withdrawbuynumber_;
}
inline int64_t MDBond::withdrawbuynumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawBuyNumber)
  return _internal_withdrawbuynumber();
}
inline void MDBond::_internal_set_withdrawbuynumber(int64_t value) {
  
  _impl_.withdrawbuynumber_ = value;
}
inline void MDBond::set_withdrawbuynumber(int64_t value) {
  _internal_set_withdrawbuynumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawBuyNumber)
}

// int64 WithdrawBuyAmount = 26;
inline void MDBond::clear_withdrawbuyamount() {
  _impl_.withdrawbuyamount_ = int64_t{0};
}
inline int64_t MDBond::_internal_withdrawbuyamount() const {
  return _impl_.withdrawbuyamount_;
}
inline int64_t MDBond::withdrawbuyamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawBuyAmount)
  return _internal_withdrawbuyamount();
}
inline void MDBond::_internal_set_withdrawbuyamount(int64_t value) {
  
  _impl_.withdrawbuyamount_ = value;
}
inline void MDBond::set_withdrawbuyamount(int64_t value) {
  _internal_set_withdrawbuyamount(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawBuyAmount)
}

// int64 WithdrawBuyMoney = 27;
inline void MDBond::clear_withdrawbuymoney() {
  _impl_.withdrawbuymoney_ = int64_t{0};
}
inline int64_t MDBond::_internal_withdrawbuymoney() const {
  return _impl_.withdrawbuymoney_;
}
inline int64_t MDBond::withdrawbuymoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawBuyMoney)
  return _internal_withdrawbuymoney();
}
inline void MDBond::_internal_set_withdrawbuymoney(int64_t value) {
  
  _impl_.withdrawbuymoney_ = value;
}
inline void MDBond::set_withdrawbuymoney(int64_t value) {
  _internal_set_withdrawbuymoney(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawBuyMoney)
}

// int64 WithdrawSellNumber = 28;
inline void MDBond::clear_withdrawsellnumber() {
  _impl_.withdrawsellnumber_ = int64_t{0};
}
inline int64_t MDBond::_internal_withdrawsellnumber() const {
  return _impl_.withdrawsellnumber_;
}
inline int64_t MDBond::withdrawsellnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawSellNumber)
  return _internal_withdrawsellnumber();
}
inline void MDBond::_internal_set_withdrawsellnumber(int64_t value) {
  
  _impl_.withdrawsellnumber_ = value;
}
inline void MDBond::set_withdrawsellnumber(int64_t value) {
  _internal_set_withdrawsellnumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawSellNumber)
}

// int64 WithdrawSellAmount = 29;
inline void MDBond::clear_withdrawsellamount() {
  _impl_.withdrawsellamount_ = int64_t{0};
}
inline int64_t MDBond::_internal_withdrawsellamount() const {
  return _impl_.withdrawsellamount_;
}
inline int64_t MDBond::withdrawsellamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawSellAmount)
  return _internal_withdrawsellamount();
}
inline void MDBond::_internal_set_withdrawsellamount(int64_t value) {
  
  _impl_.withdrawsellamount_ = value;
}
inline void MDBond::set_withdrawsellamount(int64_t value) {
  _internal_set_withdrawsellamount(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawSellAmount)
}

// int64 WithdrawSellMoney = 30;
inline void MDBond::clear_withdrawsellmoney() {
  _impl_.withdrawsellmoney_ = int64_t{0};
}
inline int64_t MDBond::_internal_withdrawsellmoney() const {
  return _impl_.withdrawsellmoney_;
}
inline int64_t MDBond::withdrawsellmoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawSellMoney)
  return _internal_withdrawsellmoney();
}
inline void MDBond::_internal_set_withdrawsellmoney(int64_t value) {
  
  _impl_.withdrawsellmoney_ = value;
}
inline void MDBond::set_withdrawsellmoney(int64_t value) {
  _internal_set_withdrawsellmoney(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawSellMoney)
}

// int64 TotalBuyNumber = 31;
inline void MDBond::clear_totalbuynumber() {
  _impl_.totalbuynumber_ = int64_t{0};
}
inline int64_t MDBond::_internal_totalbuynumber() const {
  return _impl_.totalbuynumber_;
}
inline int64_t MDBond::totalbuynumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalBuyNumber)
  return _internal_totalbuynumber();
}
inline void MDBond::_internal_set_totalbuynumber(int64_t value) {
  
  _impl_.totalbuynumber_ = value;
}
inline void MDBond::set_totalbuynumber(int64_t value) {
  _internal_set_totalbuynumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalBuyNumber)
}

// int64 TotalSellNumber = 32;
inline void MDBond::clear_totalsellnumber() {
  _impl_.totalsellnumber_ = int64_t{0};
}
inline int64_t MDBond::_internal_totalsellnumber() const {
  return _impl_.totalsellnumber_;
}
inline int64_t MDBond::totalsellnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalSellNumber)
  return _internal_totalsellnumber();
}
inline void MDBond::_internal_set_totalsellnumber(int64_t value) {
  
  _impl_.totalsellnumber_ = value;
}
inline void MDBond::set_totalsellnumber(int64_t value) {
  _internal_set_totalsellnumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalSellNumber)
}

// int64 BuyTradeMaxDuration = 33;
inline void MDBond::clear_buytrademaxduration() {
  _impl_.buytrademaxduration_ = int64_t{0};
}
inline int64_t MDBond::_internal_buytrademaxduration() const {
  return _impl_.buytrademaxduration_;
}
inline int64_t MDBond::buytrademaxduration() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyTradeMaxDuration)
  return _internal_buytrademaxduration();
}
inline void MDBond::_internal_set_buytrademaxduration(int64_t value) {
  
  _impl_.buytrademaxduration_ = value;
}
inline void MDBond::set_buytrademaxduration(int64_t value) {
  _internal_set_buytrademaxduration(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyTradeMaxDuration)
}

// int64 SellTradeMaxDuration = 34;
inline void MDBond::clear_selltrademaxduration() {
  _impl_.selltrademaxduration_ = int64_t{0};
}
inline int64_t MDBond::_internal_selltrademaxduration() const {
  return _impl_.selltrademaxduration_;
}
inline int64_t MDBond::selltrademaxduration() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellTradeMaxDuration)
  return _internal_selltrademaxduration();
}
inline void MDBond::_internal_set_selltrademaxduration(int64_t value) {
  
  _impl_.selltrademaxduration_ = value;
}
inline void MDBond::set_selltrademaxduration(int64_t value) {
  _internal_set_selltrademaxduration(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellTradeMaxDuration)
}

// int32 NumBuyOrders = 35;
inline void MDBond::clear_numbuyorders() {
  _impl_.numbuyorders_ = 0;
}
inline int32_t MDBond::_internal_numbuyorders() const {
  return _impl_.numbuyorders_;
}
inline int32_t MDBond::numbuyorders() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.NumBuyOrders)
  return _internal_numbuyorders();
}
inline void MDBond::_internal_set_numbuyorders(int32_t value) {
  
  _impl_.numbuyorders_ = value;
}
inline void MDBond::set_numbuyorders(int32_t value) {
  _internal_set_numbuyorders(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.NumBuyOrders)
}

// int32 NumSellOrders = 36;
inline void MDBond::clear_numsellorders() {
  _impl_.numsellorders_ = 0;
}
inline int32_t MDBond::_internal_numsellorders() const {
  return _impl_.numsellorders_;
}
inline int32_t MDBond::numsellorders() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.NumSellOrders)
  return _internal_numsellorders();
}
inline void MDBond::_internal_set_numsellorders(int32_t value) {
  
  _impl_.numsellorders_ = value;
}
inline void MDBond::set_numsellorders(int32_t value) {
  _internal_set_numsellorders(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.NumSellOrders)
}

// int64 YieldToMaturity = 37;
inline void MDBond::clear_yieldtomaturity() {
  _impl_.yieldtomaturity_ = int64_t{0};
}
inline int64_t MDBond::_internal_yieldtomaturity() const {
  return _impl_.yieldtomaturity_;
}
inline int64_t MDBond::yieldtomaturity() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.YieldToMaturity)
  return _internal_yieldtomaturity();
}
inline void MDBond::_internal_set_yieldtomaturity(int64_t value) {
  
  _impl_.yieldtomaturity_ = value;
}
inline void MDBond::set_yieldtomaturity(int64_t value) {
  _internal_set_yieldtomaturity(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.YieldToMaturity)
}

// int64 WeightedAvgPx = 38;
inline void MDBond::clear_weightedavgpx() {
  _impl_.weightedavgpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_weightedavgpx() const {
  return _impl_.weightedavgpx_;
}
inline int64_t MDBond::weightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgPx)
  return _internal_weightedavgpx();
}
inline void MDBond::_internal_set_weightedavgpx(int64_t value) {
  
  _impl_.weightedavgpx_ = value;
}
inline void MDBond::set_weightedavgpx(int64_t value) {
  _internal_set_weightedavgpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgPx)
}

// int64 WeightedAvgPxBP = 39;
inline void MDBond::clear_weightedavgpxbp() {
  _impl_.weightedavgpxbp_ = int64_t{0};
}
inline int64_t MDBond::_internal_weightedavgpxbp() const {
  return _impl_.weightedavgpxbp_;
}
inline int64_t MDBond::weightedavgpxbp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgPxBP)
  return _internal_weightedavgpxbp();
}
inline void MDBond::_internal_set_weightedavgpxbp(int64_t value) {
  
  _impl_.weightedavgpxbp_ = value;
}
inline void MDBond::set_weightedavgpxbp(int64_t value) {
  _internal_set_weightedavgpxbp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgPxBP)
}

// int64 PreCloseWeightedAvgPx = 40;
inline void MDBond::clear_precloseweightedavgpx() {
  _impl_.precloseweightedavgpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_precloseweightedavgpx() const {
  return _impl_.precloseweightedavgpx_;
}
inline int64_t MDBond::precloseweightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreCloseWeightedAvgPx)
  return _internal_precloseweightedavgpx();
}
inline void MDBond::_internal_set_precloseweightedavgpx(int64_t value) {
  
  _impl_.precloseweightedavgpx_ = value;
}
inline void MDBond::set_precloseweightedavgpx(int64_t value) {
  _internal_set_precloseweightedavgpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreCloseWeightedAvgPx)
}

// int32 ExchangeDate = 41;
inline void MDBond::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDBond::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDBond::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDBond::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDBond::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ExchangeDate)
}

// int32 ExchangeTime = 42;
inline void MDBond::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDBond::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDBond::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDBond::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDBond::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ExchangeTime)
}

// int64 PreCloseYield = 43;
inline void MDBond::clear_precloseyield() {
  _impl_.precloseyield_ = int64_t{0};
}
inline int64_t MDBond::_internal_precloseyield() const {
  return _impl_.precloseyield_;
}
inline int64_t MDBond::precloseyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreCloseYield)
  return _internal_precloseyield();
}
inline void MDBond::_internal_set_precloseyield(int64_t value) {
  
  _impl_.precloseyield_ = value;
}
inline void MDBond::set_precloseyield(int64_t value) {
  _internal_set_precloseyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreCloseYield)
}

// int64 PreWeightedAvgYield = 44;
inline void MDBond::clear_preweightedavgyield() {
  _impl_.preweightedavgyield_ = int64_t{0};
}
inline int64_t MDBond::_internal_preweightedavgyield() const {
  return _impl_.preweightedavgyield_;
}
inline int64_t MDBond::preweightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreWeightedAvgYield)
  return _internal_preweightedavgyield();
}
inline void MDBond::_internal_set_preweightedavgyield(int64_t value) {
  
  _impl_.preweightedavgyield_ = value;
}
inline void MDBond::set_preweightedavgyield(int64_t value) {
  _internal_set_preweightedavgyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreWeightedAvgYield)
}

// int64 OpenYield = 45;
inline void MDBond::clear_openyield() {
  _impl_.openyield_ = int64_t{0};
}
inline int64_t MDBond::_internal_openyield() const {
  return _impl_.openyield_;
}
inline int64_t MDBond::openyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OpenYield)
  return _internal_openyield();
}
inline void MDBond::_internal_set_openyield(int64_t value) {
  
  _impl_.openyield_ = value;
}
inline void MDBond::set_openyield(int64_t value) {
  _internal_set_openyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OpenYield)
}

// int64 HighYield = 46;
inline void MDBond::clear_highyield() {
  _impl_.highyield_ = int64_t{0};
}
inline int64_t MDBond::_internal_highyield() const {
  return _impl_.highyield_;
}
inline int64_t MDBond::highyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.HighYield)
  return _internal_highyield();
}
inline void MDBond::_internal_set_highyield(int64_t value) {
  
  _impl_.highyield_ = value;
}
inline void MDBond::set_highyield(int64_t value) {
  _internal_set_highyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.HighYield)
}

// int64 LowYield = 47;
inline void MDBond::clear_lowyield() {
  _impl_.lowyield_ = int64_t{0};
}
inline int64_t MDBond::_internal_lowyield() const {
  return _impl_.lowyield_;
}
inline int64_t MDBond::lowyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LowYield)
  return _internal_lowyield();
}
inline void MDBond::_internal_set_lowyield(int64_t value) {
  
  _impl_.lowyield_ = value;
}
inline void MDBond::set_lowyield(int64_t value) {
  _internal_set_lowyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LowYield)
}

// int64 LastYield = 48;
inline void MDBond::clear_lastyield() {
  _impl_.lastyield_ = int64_t{0};
}
inline int64_t MDBond::_internal_lastyield() const {
  return _impl_.lastyield_;
}
inline int64_t MDBond::lastyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LastYield)
  return _internal_lastyield();
}
inline void MDBond::_internal_set_lastyield(int64_t value) {
  
  _impl_.lastyield_ = value;
}
inline void MDBond::set_lastyield(int64_t value) {
  _internal_set_lastyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LastYield)
}

// int64 WeightedAvgYield = 49;
inline void MDBond::clear_weightedavgyield() {
  _impl_.weightedavgyield_ = int64_t{0};
}
inline int64_t MDBond::_internal_weightedavgyield() const {
  return _impl_.weightedavgyield_;
}
inline int64_t MDBond::weightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgYield)
  return _internal_weightedavgyield();
}
inline void MDBond::_internal_set_weightedavgyield(int64_t value) {
  
  _impl_.weightedavgyield_ = value;
}
inline void MDBond::set_weightedavgyield(int64_t value) {
  _internal_set_weightedavgyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgYield)
}

// int32 ChannelNo = 50;
inline void MDBond::clear_channelno() {
  _impl_.channelno_ = 0;
}
inline int32_t MDBond::_internal_channelno() const {
  return _impl_.channelno_;
}
inline int32_t MDBond::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ChannelNo)
  return _internal_channelno();
}
inline void MDBond::_internal_set_channelno(int32_t value) {
  
  _impl_.channelno_ = value;
}
inline void MDBond::set_channelno(int32_t value) {
  _internal_set_channelno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ChannelNo)
}

// repeated int64 BuyPriceQueue = 51 [packed = true];
inline int MDBond::_internal_buypricequeue_size() const {
  return _impl_.buypricequeue_.size();
}
inline int MDBond::buypricequeue_size() const {
  return _internal_buypricequeue_size();
}
inline void MDBond::clear_buypricequeue() {
  _impl_.buypricequeue_.Clear();
}
inline int64_t MDBond::_internal_buypricequeue(int index) const {
  return _impl_.buypricequeue_.Get(index);
}
inline int64_t MDBond::buypricequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
  return _internal_buypricequeue(index);
}
inline void MDBond::set_buypricequeue(int index, int64_t value) {
  _impl_.buypricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
}
inline void MDBond::_internal_add_buypricequeue(int64_t value) {
  _impl_.buypricequeue_.Add(value);
}
inline void MDBond::add_buypricequeue(int64_t value) {
  _internal_add_buypricequeue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_buypricequeue() const {
  return _impl_.buypricequeue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::buypricequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
  return _internal_buypricequeue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_buypricequeue() {
  return &_impl_.buypricequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_buypricequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
  return _internal_mutable_buypricequeue();
}

// repeated int64 BuyOrderQtyQueue = 52 [packed = true];
inline int MDBond::_internal_buyorderqtyqueue_size() const {
  return _impl_.buyorderqtyqueue_.size();
}
inline int MDBond::buyorderqtyqueue_size() const {
  return _internal_buyorderqtyqueue_size();
}
inline void MDBond::clear_buyorderqtyqueue() {
  _impl_.buyorderqtyqueue_.Clear();
}
inline int64_t MDBond::_internal_buyorderqtyqueue(int index) const {
  return _impl_.buyorderqtyqueue_.Get(index);
}
inline int64_t MDBond::buyorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
  return _internal_buyorderqtyqueue(index);
}
inline void MDBond::set_buyorderqtyqueue(int index, int64_t value) {
  _impl_.buyorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
}
inline void MDBond::_internal_add_buyorderqtyqueue(int64_t value) {
  _impl_.buyorderqtyqueue_.Add(value);
}
inline void MDBond::add_buyorderqtyqueue(int64_t value) {
  _internal_add_buyorderqtyqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_buyorderqtyqueue() const {
  return _impl_.buyorderqtyqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::buyorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
  return _internal_buyorderqtyqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_buyorderqtyqueue() {
  return &_impl_.buyorderqtyqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_buyorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
  return _internal_mutable_buyorderqtyqueue();
}

// repeated int64 SellPriceQueue = 53 [packed = true];
inline int MDBond::_internal_sellpricequeue_size() const {
  return _impl_.sellpricequeue_.size();
}
inline int MDBond::sellpricequeue_size() const {
  return _internal_sellpricequeue_size();
}
inline void MDBond::clear_sellpricequeue() {
  _impl_.sellpricequeue_.Clear();
}
inline int64_t MDBond::_internal_sellpricequeue(int index) const {
  return _impl_.sellpricequeue_.Get(index);
}
inline int64_t MDBond::sellpricequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
  return _internal_sellpricequeue(index);
}
inline void MDBond::set_sellpricequeue(int index, int64_t value) {
  _impl_.sellpricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
}
inline void MDBond::_internal_add_sellpricequeue(int64_t value) {
  _impl_.sellpricequeue_.Add(value);
}
inline void MDBond::add_sellpricequeue(int64_t value) {
  _internal_add_sellpricequeue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_sellpricequeue() const {
  return _impl_.sellpricequeue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::sellpricequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
  return _internal_sellpricequeue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_sellpricequeue() {
  return &_impl_.sellpricequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_sellpricequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
  return _internal_mutable_sellpricequeue();
}

// repeated int64 SellOrderQtyQueue = 54 [packed = true];
inline int MDBond::_internal_sellorderqtyqueue_size() const {
  return _impl_.sellorderqtyqueue_.size();
}
inline int MDBond::sellorderqtyqueue_size() const {
  return _internal_sellorderqtyqueue_size();
}
inline void MDBond::clear_sellorderqtyqueue() {
  _impl_.sellorderqtyqueue_.Clear();
}
inline int64_t MDBond::_internal_sellorderqtyqueue(int index) const {
  return _impl_.sellorderqtyqueue_.Get(index);
}
inline int64_t MDBond::sellorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
  return _internal_sellorderqtyqueue(index);
}
inline void MDBond::set_sellorderqtyqueue(int index, int64_t value) {
  _impl_.sellorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
}
inline void MDBond::_internal_add_sellorderqtyqueue(int64_t value) {
  _impl_.sellorderqtyqueue_.Add(value);
}
inline void MDBond::add_sellorderqtyqueue(int64_t value) {
  _internal_add_sellorderqtyqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_sellorderqtyqueue() const {
  return _impl_.sellorderqtyqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::sellorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
  return _internal_sellorderqtyqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_sellorderqtyqueue() {
  return &_impl_.sellorderqtyqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_sellorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
  return _internal_mutable_sellorderqtyqueue();
}

// repeated int64 BuyOrderQueue = 55 [packed = true];
inline int MDBond::_internal_buyorderqueue_size() const {
  return _impl_.buyorderqueue_.size();
}
inline int MDBond::buyorderqueue_size() const {
  return _internal_buyorderqueue_size();
}
inline void MDBond::clear_buyorderqueue() {
  _impl_.buyorderqueue_.Clear();
}
inline int64_t MDBond::_internal_buyorderqueue(int index) const {
  return _impl_.buyorderqueue_.Get(index);
}
inline int64_t MDBond::buyorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
  return _internal_buyorderqueue(index);
}
inline void MDBond::set_buyorderqueue(int index, int64_t value) {
  _impl_.buyorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
}
inline void MDBond::_internal_add_buyorderqueue(int64_t value) {
  _impl_.buyorderqueue_.Add(value);
}
inline void MDBond::add_buyorderqueue(int64_t value) {
  _internal_add_buyorderqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_buyorderqueue() const {
  return _impl_.buyorderqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::buyorderqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
  return _internal_buyorderqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_buyorderqueue() {
  return &_impl_.buyorderqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_buyorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
  return _internal_mutable_buyorderqueue();
}

// repeated int64 SellOrderQueue = 56 [packed = true];
inline int MDBond::_internal_sellorderqueue_size() const {
  return _impl_.sellorderqueue_.size();
}
inline int MDBond::sellorderqueue_size() const {
  return _internal_sellorderqueue_size();
}
inline void MDBond::clear_sellorderqueue() {
  _impl_.sellorderqueue_.Clear();
}
inline int64_t MDBond::_internal_sellorderqueue(int index) const {
  return _impl_.sellorderqueue_.Get(index);
}
inline int64_t MDBond::sellorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
  return _internal_sellorderqueue(index);
}
inline void MDBond::set_sellorderqueue(int index, int64_t value) {
  _impl_.sellorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
}
inline void MDBond::_internal_add_sellorderqueue(int64_t value) {
  _impl_.sellorderqueue_.Add(value);
}
inline void MDBond::add_sellorderqueue(int64_t value) {
  _internal_add_sellorderqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_sellorderqueue() const {
  return _impl_.sellorderqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::sellorderqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
  return _internal_sellorderqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_sellorderqueue() {
  return &_impl_.sellorderqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_sellorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
  return _internal_mutable_sellorderqueue();
}

// repeated int64 BuyNumOrdersQueue = 57 [packed = true];
inline int MDBond::_internal_buynumordersqueue_size() const {
  return _impl_.buynumordersqueue_.size();
}
inline int MDBond::buynumordersqueue_size() const {
  return _internal_buynumordersqueue_size();
}
inline void MDBond::clear_buynumordersqueue() {
  _impl_.buynumordersqueue_.Clear();
}
inline int64_t MDBond::_internal_buynumordersqueue(int index) const {
  return _impl_.buynumordersqueue_.Get(index);
}
inline int64_t MDBond::buynumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
  return _internal_buynumordersqueue(index);
}
inline void MDBond::set_buynumordersqueue(int index, int64_t value) {
  _impl_.buynumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
}
inline void MDBond::_internal_add_buynumordersqueue(int64_t value) {
  _impl_.buynumordersqueue_.Add(value);
}
inline void MDBond::add_buynumordersqueue(int64_t value) {
  _internal_add_buynumordersqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_buynumordersqueue() const {
  return _impl_.buynumordersqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::buynumordersqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
  return _internal_buynumordersqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_buynumordersqueue() {
  return &_impl_.buynumordersqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_buynumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
  return _internal_mutable_buynumordersqueue();
}

// repeated int64 SellNumOrdersQueue = 58 [packed = true];
inline int MDBond::_internal_sellnumordersqueue_size() const {
  return _impl_.sellnumordersqueue_.size();
}
inline int MDBond::sellnumordersqueue_size() const {
  return _internal_sellnumordersqueue_size();
}
inline void MDBond::clear_sellnumordersqueue() {
  _impl_.sellnumordersqueue_.Clear();
}
inline int64_t MDBond::_internal_sellnumordersqueue(int index) const {
  return _impl_.sellnumordersqueue_.Get(index);
}
inline int64_t MDBond::sellnumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
  return _internal_sellnumordersqueue(index);
}
inline void MDBond::set_sellnumordersqueue(int index, int64_t value) {
  _impl_.sellnumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
}
inline void MDBond::_internal_add_sellnumordersqueue(int64_t value) {
  _impl_.sellnumordersqueue_.Add(value);
}
inline void MDBond::add_sellnumordersqueue(int64_t value) {
  _internal_add_sellnumordersqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_sellnumordersqueue() const {
  return _impl_.sellnumordersqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::sellnumordersqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
  return _internal_sellnumordersqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_sellnumordersqueue() {
  return &_impl_.sellnumordersqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_sellnumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
  return _internal_mutable_sellnumordersqueue();
}

// int64 NorminalPx = 59;
inline void MDBond::clear_norminalpx() {
  _impl_.norminalpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_norminalpx() const {
  return _impl_.norminalpx_;
}
inline int64_t MDBond::norminalpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.NorminalPx)
  return _internal_norminalpx();
}
inline void MDBond::_internal_set_norminalpx(int64_t value) {
  
  _impl_.norminalpx_ = value;
}
inline void MDBond::set_norminalpx(int64_t value) {
  _internal_set_norminalpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.NorminalPx)
}

// int64 ShortSellSharesTraded = 60;
inline void MDBond::clear_shortsellsharestraded() {
  _impl_.shortsellsharestraded_ = int64_t{0};
}
inline int64_t MDBond::_internal_shortsellsharestraded() const {
  return _impl_.shortsellsharestraded_;
}
inline int64_t MDBond::shortsellsharestraded() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ShortSellSharesTraded)
  return _internal_shortsellsharestraded();
}
inline void MDBond::_internal_set_shortsellsharestraded(int64_t value) {
  
  _impl_.shortsellsharestraded_ = value;
}
inline void MDBond::set_shortsellsharestraded(int64_t value) {
  _internal_set_shortsellsharestraded(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ShortSellSharesTraded)
}

// int64 ShortSellTurnover = 61;
inline void MDBond::clear_shortsellturnover() {
  _impl_.shortsellturnover_ = int64_t{0};
}
inline int64_t MDBond::_internal_shortsellturnover() const {
  return _impl_.shortsellturnover_;
}
inline int64_t MDBond::shortsellturnover() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ShortSellTurnover)
  return _internal_shortsellturnover();
}
inline void MDBond::_internal_set_shortsellturnover(int64_t value) {
  
  _impl_.shortsellturnover_ = value;
}
inline void MDBond::set_shortsellturnover(int64_t value) {
  _internal_set_shortsellturnover(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ShortSellTurnover)
}

// repeated int32 BuySettlTypeQueue = 62 [packed = true];
inline int MDBond::_internal_buysettltypequeue_size() const {
  return _impl_.buysettltypequeue_.size();
}
inline int MDBond::buysettltypequeue_size() const {
  return _internal_buysettltypequeue_size();
}
inline void MDBond::clear_buysettltypequeue() {
  _impl_.buysettltypequeue_.Clear();
}
inline int32_t MDBond::_internal_buysettltypequeue(int index) const {
  return _impl_.buysettltypequeue_.Get(index);
}
inline int32_t MDBond::buysettltypequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
  return _internal_buysettltypequeue(index);
}
inline void MDBond::set_buysettltypequeue(int index, int32_t value) {
  _impl_.buysettltypequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
}
inline void MDBond::_internal_add_buysettltypequeue(int32_t value) {
  _impl_.buysettltypequeue_.Add(value);
}
inline void MDBond::add_buysettltypequeue(int32_t value) {
  _internal_add_buysettltypequeue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MDBond::_internal_buysettltypequeue() const {
  return _impl_.buysettltypequeue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MDBond::buysettltypequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
  return _internal_buysettltypequeue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MDBond::_internal_mutable_buysettltypequeue() {
  return &_impl_.buysettltypequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MDBond::mutable_buysettltypequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
  return _internal_mutable_buysettltypequeue();
}

// repeated int32 SellSettlTypeQueue = 63 [packed = true];
inline int MDBond::_internal_sellsettltypequeue_size() const {
  return _impl_.sellsettltypequeue_.size();
}
inline int MDBond::sellsettltypequeue_size() const {
  return _internal_sellsettltypequeue_size();
}
inline void MDBond::clear_sellsettltypequeue() {
  _impl_.sellsettltypequeue_.Clear();
}
inline int32_t MDBond::_internal_sellsettltypequeue(int index) const {
  return _impl_.sellsettltypequeue_.Get(index);
}
inline int32_t MDBond::sellsettltypequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
  return _internal_sellsettltypequeue(index);
}
inline void MDBond::set_sellsettltypequeue(int index, int32_t value) {
  _impl_.sellsettltypequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
}
inline void MDBond::_internal_add_sellsettltypequeue(int32_t value) {
  _impl_.sellsettltypequeue_.Add(value);
}
inline void MDBond::add_sellsettltypequeue(int32_t value) {
  _internal_add_sellsettltypequeue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MDBond::_internal_sellsettltypequeue() const {
  return _impl_.sellsettltypequeue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MDBond::sellsettltypequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
  return _internal_sellsettltypequeue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MDBond::_internal_mutable_sellsettltypequeue() {
  return &_impl_.sellsettltypequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MDBond::mutable_sellsettltypequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
  return _internal_mutable_sellsettltypequeue();
}

// repeated int64 BuyYieldQueue = 64 [packed = true];
inline int MDBond::_internal_buyyieldqueue_size() const {
  return _impl_.buyyieldqueue_.size();
}
inline int MDBond::buyyieldqueue_size() const {
  return _internal_buyyieldqueue_size();
}
inline void MDBond::clear_buyyieldqueue() {
  _impl_.buyyieldqueue_.Clear();
}
inline int64_t MDBond::_internal_buyyieldqueue(int index) const {
  return _impl_.buyyieldqueue_.Get(index);
}
inline int64_t MDBond::buyyieldqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
  return _internal_buyyieldqueue(index);
}
inline void MDBond::set_buyyieldqueue(int index, int64_t value) {
  _impl_.buyyieldqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
}
inline void MDBond::_internal_add_buyyieldqueue(int64_t value) {
  _impl_.buyyieldqueue_.Add(value);
}
inline void MDBond::add_buyyieldqueue(int64_t value) {
  _internal_add_buyyieldqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_buyyieldqueue() const {
  return _impl_.buyyieldqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::buyyieldqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
  return _internal_buyyieldqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_buyyieldqueue() {
  return &_impl_.buyyieldqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_buyyieldqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
  return _internal_mutable_buyyieldqueue();
}

// repeated int64 SellYieldQueue = 65 [packed = true];
inline int MDBond::_internal_sellyieldqueue_size() const {
  return _impl_.sellyieldqueue_.size();
}
inline int MDBond::sellyieldqueue_size() const {
  return _internal_sellyieldqueue_size();
}
inline void MDBond::clear_sellyieldqueue() {
  _impl_.sellyieldqueue_.Clear();
}
inline int64_t MDBond::_internal_sellyieldqueue(int index) const {
  return _impl_.sellyieldqueue_.Get(index);
}
inline int64_t MDBond::sellyieldqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
  return _internal_sellyieldqueue(index);
}
inline void MDBond::set_sellyieldqueue(int index, int64_t value) {
  _impl_.sellyieldqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
}
inline void MDBond::_internal_add_sellyieldqueue(int64_t value) {
  _impl_.sellyieldqueue_.Add(value);
}
inline void MDBond::add_sellyieldqueue(int64_t value) {
  _internal_add_sellyieldqueue(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::_internal_sellyieldqueue() const {
  return _impl_.sellyieldqueue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MDBond::sellyieldqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
  return _internal_sellyieldqueue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::_internal_mutable_sellyieldqueue() {
  return &_impl_.sellyieldqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MDBond::mutable_sellyieldqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
  return _internal_mutable_sellyieldqueue();
}

// int64 PreMarketLastPx = 66;
inline void MDBond::clear_premarketlastpx() {
  _impl_.premarketlastpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_premarketlastpx() const {
  return _impl_.premarketlastpx_;
}
inline int64_t MDBond::premarketlastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketLastPx)
  return _internal_premarketlastpx();
}
inline void MDBond::_internal_set_premarketlastpx(int64_t value) {
  
  _impl_.premarketlastpx_ = value;
}
inline void MDBond::set_premarketlastpx(int64_t value) {
  _internal_set_premarketlastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketLastPx)
}

// int64 PreMarketTotalVolumeTrade = 67;
inline void MDBond::clear_premarkettotalvolumetrade() {
  _impl_.premarkettotalvolumetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_premarkettotalvolumetrade() const {
  return _impl_.premarkettotalvolumetrade_;
}
inline int64_t MDBond::premarkettotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketTotalVolumeTrade)
  return _internal_premarkettotalvolumetrade();
}
inline void MDBond::_internal_set_premarkettotalvolumetrade(int64_t value) {
  
  _impl_.premarkettotalvolumetrade_ = value;
}
inline void MDBond::set_premarkettotalvolumetrade(int64_t value) {
  _internal_set_premarkettotalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketTotalVolumeTrade)
}

// int64 PreMarketTotalValueTrade = 68;
inline void MDBond::clear_premarkettotalvaluetrade() {
  _impl_.premarkettotalvaluetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_premarkettotalvaluetrade() const {
  return _impl_.premarkettotalvaluetrade_;
}
inline int64_t MDBond::premarkettotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketTotalValueTrade)
  return _internal_premarkettotalvaluetrade();
}
inline void MDBond::_internal_set_premarkettotalvaluetrade(int64_t value) {
  
  _impl_.premarkettotalvaluetrade_ = value;
}
inline void MDBond::set_premarkettotalvaluetrade(int64_t value) {
  _internal_set_premarkettotalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketTotalValueTrade)
}

// int64 PreMarketHighPx = 69;
inline void MDBond::clear_premarkethighpx() {
  _impl_.premarkethighpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_premarkethighpx() const {
  return _impl_.premarkethighpx_;
}
inline int64_t MDBond::premarkethighpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketHighPx)
  return _internal_premarkethighpx();
}
inline void MDBond::_internal_set_premarkethighpx(int64_t value) {
  
  _impl_.premarkethighpx_ = value;
}
inline void MDBond::set_premarkethighpx(int64_t value) {
  _internal_set_premarkethighpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketHighPx)
}

// int64 PreMarketLowPx = 70;
inline void MDBond::clear_premarketlowpx() {
  _impl_.premarketlowpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_premarketlowpx() const {
  return _impl_.premarketlowpx_;
}
inline int64_t MDBond::premarketlowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketLowPx)
  return _internal_premarketlowpx();
}
inline void MDBond::_internal_set_premarketlowpx(int64_t value) {
  
  _impl_.premarketlowpx_ = value;
}
inline void MDBond::set_premarketlowpx(int64_t value) {
  _internal_set_premarketlowpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketLowPx)
}

// int64 AfterHoursLastPx = 71;
inline void MDBond::clear_afterhourslastpx() {
  _impl_.afterhourslastpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_afterhourslastpx() const {
  return _impl_.afterhourslastpx_;
}
inline int64_t MDBond::afterhourslastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursLastPx)
  return _internal_afterhourslastpx();
}
inline void MDBond::_internal_set_afterhourslastpx(int64_t value) {
  
  _impl_.afterhourslastpx_ = value;
}
inline void MDBond::set_afterhourslastpx(int64_t value) {
  _internal_set_afterhourslastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursLastPx)
}

// int64 AfterHoursTotalVolumeTrade = 72;
inline void MDBond::clear_afterhourstotalvolumetrade() {
  _impl_.afterhourstotalvolumetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_afterhourstotalvolumetrade() const {
  return _impl_.afterhourstotalvolumetrade_;
}
inline int64_t MDBond::afterhourstotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursTotalVolumeTrade)
  return _internal_afterhourstotalvolumetrade();
}
inline void MDBond::_internal_set_afterhourstotalvolumetrade(int64_t value) {
  
  _impl_.afterhourstotalvolumetrade_ = value;
}
inline void MDBond::set_afterhourstotalvolumetrade(int64_t value) {
  _internal_set_afterhourstotalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursTotalVolumeTrade)
}

// int64 AfterHoursTotalValueTrade = 73;
inline void MDBond::clear_afterhourstotalvaluetrade() {
  _impl_.afterhourstotalvaluetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_afterhourstotalvaluetrade() const {
  return _impl_.afterhourstotalvaluetrade_;
}
inline int64_t MDBond::afterhourstotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursTotalValueTrade)
  return _internal_afterhourstotalvaluetrade();
}
inline void MDBond::_internal_set_afterhourstotalvaluetrade(int64_t value) {
  
  _impl_.afterhourstotalvaluetrade_ = value;
}
inline void MDBond::set_afterhourstotalvaluetrade(int64_t value) {
  _internal_set_afterhourstotalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursTotalValueTrade)
}

// int64 AfterHoursHighPx = 74;
inline void MDBond::clear_afterhourshighpx() {
  _impl_.afterhourshighpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_afterhourshighpx() const {
  return _impl_.afterhourshighpx_;
}
inline int64_t MDBond::afterhourshighpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursHighPx)
  return _internal_afterhourshighpx();
}
inline void MDBond::_internal_set_afterhourshighpx(int64_t value) {
  
  _impl_.afterhourshighpx_ = value;
}
inline void MDBond::set_afterhourshighpx(int64_t value) {
  _internal_set_afterhourshighpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursHighPx)
}

// int64 AfterHoursLowPx = 75;
inline void MDBond::clear_afterhourslowpx() {
  _impl_.afterhourslowpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_afterhourslowpx() const {
  return _impl_.afterhourslowpx_;
}
inline int64_t MDBond::afterhourslowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursLowPx)
  return _internal_afterhourslowpx();
}
inline void MDBond::_internal_set_afterhourslowpx(int64_t value) {
  
  _impl_.afterhourslowpx_ = value;
}
inline void MDBond::set_afterhourslowpx(int64_t value) {
  _internal_set_afterhourslowpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursLowPx)
}

// string MarketPhaseCode = 76;
inline void MDBond::clear_marketphasecode() {
  _impl_.marketphasecode_.ClearToEmpty();
}
inline const std::string& MDBond::marketphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
  return _internal_marketphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_marketphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.marketphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
}
inline std::string* MDBond::mutable_marketphasecode() {
  std::string* _s = _internal_mutable_marketphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
  return _s;
}
inline const std::string& MDBond::_internal_marketphasecode() const {
  return _impl_.marketphasecode_.Get();
}
inline void MDBond::_internal_set_marketphasecode(const std::string& value) {
  
  _impl_.marketphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_marketphasecode() {
  
  return _impl_.marketphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_marketphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
  return _impl_.marketphasecode_.Release();
}
inline void MDBond::set_allocated_marketphasecode(std::string* marketphasecode) {
  if (marketphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.marketphasecode_.SetAllocated(marketphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.marketphasecode_.IsDefault()) {
    _impl_.marketphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
}

// string SubTradingPhaseCode1 = 77;
inline void MDBond::clear_subtradingphasecode1() {
  _impl_.subtradingphasecode1_.ClearToEmpty();
}
inline const std::string& MDBond::subtradingphasecode1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
  return _internal_subtradingphasecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_subtradingphasecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtradingphasecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
}
inline std::string* MDBond::mutable_subtradingphasecode1() {
  std::string* _s = _internal_mutable_subtradingphasecode1();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
  return _s;
}
inline const std::string& MDBond::_internal_subtradingphasecode1() const {
  return _impl_.subtradingphasecode1_.Get();
}
inline void MDBond::_internal_set_subtradingphasecode1(const std::string& value) {
  
  _impl_.subtradingphasecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_subtradingphasecode1() {
  
  return _impl_.subtradingphasecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_subtradingphasecode1() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
  return _impl_.subtradingphasecode1_.Release();
}
inline void MDBond::set_allocated_subtradingphasecode1(std::string* subtradingphasecode1) {
  if (subtradingphasecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.subtradingphasecode1_.SetAllocated(subtradingphasecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtradingphasecode1_.IsDefault()) {
    _impl_.subtradingphasecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
}

// string SubTradingPhaseCode2 = 78;
inline void MDBond::clear_subtradingphasecode2() {
  _impl_.subtradingphasecode2_.ClearToEmpty();
}
inline const std::string& MDBond::subtradingphasecode2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
  return _internal_subtradingphasecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_subtradingphasecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtradingphasecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
}
inline std::string* MDBond::mutable_subtradingphasecode2() {
  std::string* _s = _internal_mutable_subtradingphasecode2();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
  return _s;
}
inline const std::string& MDBond::_internal_subtradingphasecode2() const {
  return _impl_.subtradingphasecode2_.Get();
}
inline void MDBond::_internal_set_subtradingphasecode2(const std::string& value) {
  
  _impl_.subtradingphasecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_subtradingphasecode2() {
  
  return _impl_.subtradingphasecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_subtradingphasecode2() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
  return _impl_.subtradingphasecode2_.Release();
}
inline void MDBond::set_allocated_subtradingphasecode2(std::string* subtradingphasecode2) {
  if (subtradingphasecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.subtradingphasecode2_.SetAllocated(subtradingphasecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtradingphasecode2_.IsDefault()) {
    _impl_.subtradingphasecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
}

// string SubTradingPhaseCode3 = 79;
inline void MDBond::clear_subtradingphasecode3() {
  _impl_.subtradingphasecode3_.ClearToEmpty();
}
inline const std::string& MDBond::subtradingphasecode3() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
  return _internal_subtradingphasecode3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_subtradingphasecode3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtradingphasecode3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
}
inline std::string* MDBond::mutable_subtradingphasecode3() {
  std::string* _s = _internal_mutable_subtradingphasecode3();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
  return _s;
}
inline const std::string& MDBond::_internal_subtradingphasecode3() const {
  return _impl_.subtradingphasecode3_.Get();
}
inline void MDBond::_internal_set_subtradingphasecode3(const std::string& value) {
  
  _impl_.subtradingphasecode3_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_subtradingphasecode3() {
  
  return _impl_.subtradingphasecode3_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_subtradingphasecode3() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
  return _impl_.subtradingphasecode3_.Release();
}
inline void MDBond::set_allocated_subtradingphasecode3(std::string* subtradingphasecode3) {
  if (subtradingphasecode3 != nullptr) {
    
  } else {
    
  }
  _impl_.subtradingphasecode3_.SetAllocated(subtradingphasecode3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtradingphasecode3_.IsDefault()) {
    _impl_.subtradingphasecode3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
}

// string SubTradingPhaseCode4 = 80;
inline void MDBond::clear_subtradingphasecode4() {
  _impl_.subtradingphasecode4_.ClearToEmpty();
}
inline const std::string& MDBond::subtradingphasecode4() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
  return _internal_subtradingphasecode4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_subtradingphasecode4(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtradingphasecode4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
}
inline std::string* MDBond::mutable_subtradingphasecode4() {
  std::string* _s = _internal_mutable_subtradingphasecode4();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
  return _s;
}
inline const std::string& MDBond::_internal_subtradingphasecode4() const {
  return _impl_.subtradingphasecode4_.Get();
}
inline void MDBond::_internal_set_subtradingphasecode4(const std::string& value) {
  
  _impl_.subtradingphasecode4_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_subtradingphasecode4() {
  
  return _impl_.subtradingphasecode4_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_subtradingphasecode4() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
  return _impl_.subtradingphasecode4_.Release();
}
inline void MDBond::set_allocated_subtradingphasecode4(std::string* subtradingphasecode4) {
  if (subtradingphasecode4 != nullptr) {
    
  } else {
    
  }
  _impl_.subtradingphasecode4_.SetAllocated(subtradingphasecode4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtradingphasecode4_.IsDefault()) {
    _impl_.subtradingphasecode4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
}

// string SubTradingPhaseCode5 = 81;
inline void MDBond::clear_subtradingphasecode5() {
  _impl_.subtradingphasecode5_.ClearToEmpty();
}
inline const std::string& MDBond::subtradingphasecode5() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
  return _internal_subtradingphasecode5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_subtradingphasecode5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtradingphasecode5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
}
inline std::string* MDBond::mutable_subtradingphasecode5() {
  std::string* _s = _internal_mutable_subtradingphasecode5();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
  return _s;
}
inline const std::string& MDBond::_internal_subtradingphasecode5() const {
  return _impl_.subtradingphasecode5_.Get();
}
inline void MDBond::_internal_set_subtradingphasecode5(const std::string& value) {
  
  _impl_.subtradingphasecode5_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_subtradingphasecode5() {
  
  return _impl_.subtradingphasecode5_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_subtradingphasecode5() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
  return _impl_.subtradingphasecode5_.Release();
}
inline void MDBond::set_allocated_subtradingphasecode5(std::string* subtradingphasecode5) {
  if (subtradingphasecode5 != nullptr) {
    
  } else {
    
  }
  _impl_.subtradingphasecode5_.SetAllocated(subtradingphasecode5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtradingphasecode5_.IsDefault()) {
    _impl_.subtradingphasecode5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
}

// int32 LastPxType = 82;
inline void MDBond::clear_lastpxtype() {
  _impl_.lastpxtype_ = 0;
}
inline int32_t MDBond::_internal_lastpxtype() const {
  return _impl_.lastpxtype_;
}
inline int32_t MDBond::lastpxtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LastPxType)
  return _internal_lastpxtype();
}
inline void MDBond::_internal_set_lastpxtype(int32_t value) {
  
  _impl_.lastpxtype_ = value;
}
inline void MDBond::set_lastpxtype(int32_t value) {
  _internal_set_lastpxtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LastPxType)
}

// int64 AuctionLastPx = 83;
inline void MDBond::clear_auctionlastpx() {
  _impl_.auctionlastpx_ = int64_t{0};
}
inline int64_t MDBond::_internal_auctionlastpx() const {
  return _impl_.auctionlastpx_;
}
inline int64_t MDBond::auctionlastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AuctionLastPx)
  return _internal_auctionlastpx();
}
inline void MDBond::_internal_set_auctionlastpx(int64_t value) {
  
  _impl_.auctionlastpx_ = value;
}
inline void MDBond::set_auctionlastpx(int64_t value) {
  _internal_set_auctionlastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AuctionLastPx)
}

// int64 AuctionVolumeTrade = 84;
inline void MDBond::clear_auctionvolumetrade() {
  _impl_.auctionvolumetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_auctionvolumetrade() const {
  return _impl_.auctionvolumetrade_;
}
inline int64_t MDBond::auctionvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AuctionVolumeTrade)
  return _internal_auctionvolumetrade();
}
inline void MDBond::_internal_set_auctionvolumetrade(int64_t value) {
  
  _impl_.auctionvolumetrade_ = value;
}
inline void MDBond::set_auctionvolumetrade(int64_t value) {
  _internal_set_auctionvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AuctionVolumeTrade)
}

// int64 AuctionValueTrade = 85;
inline void MDBond::clear_auctionvaluetrade() {
  _impl_.auctionvaluetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_auctionvaluetrade() const {
  return _impl_.auctionvaluetrade_;
}
inline int64_t MDBond::auctionvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AuctionValueTrade)
  return _internal_auctionvaluetrade();
}
inline void MDBond::_internal_set_auctionvaluetrade(int64_t value) {
  
  _impl_.auctionvaluetrade_ = value;
}
inline void MDBond::set_auctionvaluetrade(int64_t value) {
  _internal_set_auctionvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AuctionValueTrade)
}

// int64 USConsolidateVolume = 86;
inline void MDBond::clear_usconsolidatevolume() {
  _impl_.usconsolidatevolume_ = int64_t{0};
}
inline int64_t MDBond::_internal_usconsolidatevolume() const {
  return _impl_.usconsolidatevolume_;
}
inline int64_t MDBond::usconsolidatevolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.USConsolidateVolume)
  return _internal_usconsolidatevolume();
}
inline void MDBond::_internal_set_usconsolidatevolume(int64_t value) {
  
  _impl_.usconsolidatevolume_ = value;
}
inline void MDBond::set_usconsolidatevolume(int64_t value) {
  _internal_set_usconsolidatevolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.USConsolidateVolume)
}

// int64 USCompositeClosePx = 87;
inline void MDBond::clear_uscompositeclosepx() {
  _impl_.uscompositeclosepx_ = int64_t{0};
}
inline int64_t MDBond::_internal_uscompositeclosepx() const {
  return _impl_.uscompositeclosepx_;
}
inline int64_t MDBond::uscompositeclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.USCompositeClosePx)
  return _internal_uscompositeclosepx();
}
inline void MDBond::_internal_set_uscompositeclosepx(int64_t value) {
  
  _impl_.uscompositeclosepx_ = value;
}
inline void MDBond::set_uscompositeclosepx(int64_t value) {
  _internal_set_uscompositeclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.USCompositeClosePx)
}

// string TradingHaltReason = 88;
inline void MDBond::clear_tradinghaltreason() {
  _impl_.tradinghaltreason_.ClearToEmpty();
}
inline const std::string& MDBond::tradinghaltreason() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
  return _internal_tradinghaltreason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDBond::set_tradinghaltreason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradinghaltreason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
}
inline std::string* MDBond::mutable_tradinghaltreason() {
  std::string* _s = _internal_mutable_tradinghaltreason();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
  return _s;
}
inline const std::string& MDBond::_internal_tradinghaltreason() const {
  return _impl_.tradinghaltreason_.Get();
}
inline void MDBond::_internal_set_tradinghaltreason(const std::string& value) {
  
  _impl_.tradinghaltreason_.Set(value, GetArenaForAllocation());
}
inline std::string* MDBond::_internal_mutable_tradinghaltreason() {
  
  return _impl_.tradinghaltreason_.Mutable(GetArenaForAllocation());
}
inline std::string* MDBond::release_tradinghaltreason() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
  return _impl_.tradinghaltreason_.Release();
}
inline void MDBond::set_allocated_tradinghaltreason(std::string* tradinghaltreason) {
  if (tradinghaltreason != nullptr) {
    
  } else {
    
  }
  _impl_.tradinghaltreason_.SetAllocated(tradinghaltreason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradinghaltreason_.IsDefault()) {
    _impl_.tradinghaltreason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
}

// int64 OtcTotalVolumeTrade = 89;
inline void MDBond::clear_otctotalvolumetrade() {
  _impl_.otctotalvolumetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_otctotalvolumetrade() const {
  return _impl_.otctotalvolumetrade_;
}
inline int64_t MDBond::otctotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OtcTotalVolumeTrade)
  return _internal_otctotalvolumetrade();
}
inline void MDBond::_internal_set_otctotalvolumetrade(int64_t value) {
  
  _impl_.otctotalvolumetrade_ = value;
}
inline void MDBond::set_otctotalvolumetrade(int64_t value) {
  _internal_set_otctotalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OtcTotalVolumeTrade)
}

// int64 OtcTotalValueTrade = 90;
inline void MDBond::clear_otctotalvaluetrade() {
  _impl_.otctotalvaluetrade_ = int64_t{0};
}
inline int64_t MDBond::_internal_otctotalvaluetrade() const {
  return _impl_.otctotalvaluetrade_;
}
inline int64_t MDBond::otctotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OtcTotalValueTrade)
  return _internal_otctotalvaluetrade();
}
inline void MDBond::_internal_set_otctotalvaluetrade(int64_t value) {
  
  _impl_.otctotalvaluetrade_ = value;
}
inline void MDBond::set_otctotalvaluetrade(int64_t value) {
  _internal_set_otctotalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OtcTotalValueTrade)
}

// int64 OtcNumTrades = 91;
inline void MDBond::clear_otcnumtrades() {
  _impl_.otcnumtrades_ = int64_t{0};
}
inline int64_t MDBond::_internal_otcnumtrades() const {
  return _impl_.otcnumtrades_;
}
inline int64_t MDBond::otcnumtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OtcNumTrades)
  return _internal_otcnumtrades();
}
inline void MDBond::_internal_set_otcnumtrades(int64_t value) {
  
  _impl_.otcnumtrades_ = value;
}
inline void MDBond::set_otcnumtrades(int64_t value) {
  _internal_set_otcnumtrades(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OtcNumTrades)
}

// int32 DataMultiplePowerOf10 = 92;
inline void MDBond::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDBond::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDBond::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDBond::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDBond::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDBond_2eproto
