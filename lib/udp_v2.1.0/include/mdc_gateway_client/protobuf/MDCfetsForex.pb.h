// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCfetsForex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDCfetsForex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDCfetsForex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDCfetsForex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDCfetsForex_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDCfetsForex_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ForwardForex;
struct ForwardForexDefaultTypeInternal;
extern ForwardForexDefaultTypeInternal _ForwardForex_default_instance_;
class MDCfetsForex;
struct MDCfetsForexDefaultTypeInternal;
extern MDCfetsForexDefaultTypeInternal _MDCfetsForex_default_instance_;
class NonDeliverableForwardsForex;
struct NonDeliverableForwardsForexDefaultTypeInternal;
extern NonDeliverableForwardsForexDefaultTypeInternal _NonDeliverableForwardsForex_default_instance_;
class OptionForex;
struct OptionForexDefaultTypeInternal;
extern OptionForexDefaultTypeInternal _OptionForex_default_instance_;
class SpotClosePriceForex;
struct SpotClosePriceForexDefaultTypeInternal;
extern SpotClosePriceForexDefaultTypeInternal _SpotClosePriceForex_default_instance_;
class SpotForex;
struct SpotForexDefaultTypeInternal;
extern SpotForexDefaultTypeInternal _SpotForex_default_instance_;
class SwapForex;
struct SwapForexDefaultTypeInternal;
extern SwapForexDefaultTypeInternal _SwapForex_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ForwardForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ForwardForex>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDCfetsForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCfetsForex>(Arena*);
template<> ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::NonDeliverableForwardsForex>(Arena*);
template<> ::com::htsc::mdc::insight::model::OptionForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::OptionForex>(Arena*);
template<> ::com::htsc::mdc::insight::model::SpotClosePriceForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SpotClosePriceForex>(Arena*);
template<> ::com::htsc::mdc::insight::model::SpotForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SpotForex>(Arena*);
template<> ::com::htsc::mdc::insight::model::SwapForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SwapForex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCfetsForex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCfetsForex) */ {
 public:
  inline MDCfetsForex() : MDCfetsForex(nullptr) {}
  ~MDCfetsForex() override;
  explicit PROTOBUF_CONSTEXPR MDCfetsForex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDCfetsForex(const MDCfetsForex& from);
  MDCfetsForex(MDCfetsForex&& from) noexcept
    : MDCfetsForex() {
    *this = ::std::move(from);
  }

  inline MDCfetsForex& operator=(const MDCfetsForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCfetsForex& operator=(MDCfetsForex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDCfetsForex& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDCfetsForex* internal_default_instance() {
    return reinterpret_cast<const MDCfetsForex*>(
               &_MDCfetsForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDCfetsForex& a, MDCfetsForex& b) {
    a.Swap(&b);
  }
  inline void Swap(MDCfetsForex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDCfetsForex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDCfetsForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDCfetsForex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDCfetsForex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDCfetsForex& from) {
    MDCfetsForex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCfetsForex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCfetsForex";
  }
  protected:
  explicit MDCfetsForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kSecuritySubTypeFieldNumber = 7,
    kTransactTimeFieldNumber = 16,
    kSpotForexFieldNumber = 9,
    kForwardForexFieldNumber = 10,
    kNonDeliverableForwardsForexFieldNumber = 11,
    kSwapForexFieldNumber = 12,
    kOptionForexFieldNumber = 13,
    kSpotClosePriceForexFieldNumber = 14,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kForexTypeFieldNumber = 8,
    kDataMultiplePowerOf10FieldNumber = 15,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string SecuritySubType = 7;
  void clear_securitysubtype();
  const std::string& securitysubtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitysubtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitysubtype();
  PROTOBUF_NODISCARD std::string* release_securitysubtype();
  void set_allocated_securitysubtype(std::string* securitysubtype);
  private:
  const std::string& _internal_securitysubtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitysubtype(const std::string& value);
  std::string* _internal_mutable_securitysubtype();
  public:

  // string TransactTime = 16;
  void clear_transacttime();
  const std::string& transacttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transacttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transacttime();
  PROTOBUF_NODISCARD std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // .com.htsc.mdc.insight.model.SpotForex spotForex = 9;
  bool has_spotforex() const;
  private:
  bool _internal_has_spotforex() const;
  public:
  void clear_spotforex();
  const ::com::htsc::mdc::insight::model::SpotForex& spotforex() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SpotForex* release_spotforex();
  ::com::htsc::mdc::insight::model::SpotForex* mutable_spotforex();
  void set_allocated_spotforex(::com::htsc::mdc::insight::model::SpotForex* spotforex);
  private:
  const ::com::htsc::mdc::insight::model::SpotForex& _internal_spotforex() const;
  ::com::htsc::mdc::insight::model::SpotForex* _internal_mutable_spotforex();
  public:
  void unsafe_arena_set_allocated_spotforex(
      ::com::htsc::mdc::insight::model::SpotForex* spotforex);
  ::com::htsc::mdc::insight::model::SpotForex* unsafe_arena_release_spotforex();

  // .com.htsc.mdc.insight.model.ForwardForex forwardForex = 10;
  bool has_forwardforex() const;
  private:
  bool _internal_has_forwardforex() const;
  public:
  void clear_forwardforex();
  const ::com::htsc::mdc::insight::model::ForwardForex& forwardforex() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ForwardForex* release_forwardforex();
  ::com::htsc::mdc::insight::model::ForwardForex* mutable_forwardforex();
  void set_allocated_forwardforex(::com::htsc::mdc::insight::model::ForwardForex* forwardforex);
  private:
  const ::com::htsc::mdc::insight::model::ForwardForex& _internal_forwardforex() const;
  ::com::htsc::mdc::insight::model::ForwardForex* _internal_mutable_forwardforex();
  public:
  void unsafe_arena_set_allocated_forwardforex(
      ::com::htsc::mdc::insight::model::ForwardForex* forwardforex);
  ::com::htsc::mdc::insight::model::ForwardForex* unsafe_arena_release_forwardforex();

  // .com.htsc.mdc.insight.model.NonDeliverableForwardsForex nonDeliverableForwardsForex = 11;
  bool has_nondeliverableforwardsforex() const;
  private:
  bool _internal_has_nondeliverableforwardsforex() const;
  public:
  void clear_nondeliverableforwardsforex();
  const ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex& nondeliverableforwardsforex() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* release_nondeliverableforwardsforex();
  ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* mutable_nondeliverableforwardsforex();
  void set_allocated_nondeliverableforwardsforex(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* nondeliverableforwardsforex);
  private:
  const ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex& _internal_nondeliverableforwardsforex() const;
  ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* _internal_mutable_nondeliverableforwardsforex();
  public:
  void unsafe_arena_set_allocated_nondeliverableforwardsforex(
      ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* nondeliverableforwardsforex);
  ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* unsafe_arena_release_nondeliverableforwardsforex();

  // .com.htsc.mdc.insight.model.SwapForex swapForex = 12;
  bool has_swapforex() const;
  private:
  bool _internal_has_swapforex() const;
  public:
  void clear_swapforex();
  const ::com::htsc::mdc::insight::model::SwapForex& swapforex() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SwapForex* release_swapforex();
  ::com::htsc::mdc::insight::model::SwapForex* mutable_swapforex();
  void set_allocated_swapforex(::com::htsc::mdc::insight::model::SwapForex* swapforex);
  private:
  const ::com::htsc::mdc::insight::model::SwapForex& _internal_swapforex() const;
  ::com::htsc::mdc::insight::model::SwapForex* _internal_mutable_swapforex();
  public:
  void unsafe_arena_set_allocated_swapforex(
      ::com::htsc::mdc::insight::model::SwapForex* swapforex);
  ::com::htsc::mdc::insight::model::SwapForex* unsafe_arena_release_swapforex();

  // .com.htsc.mdc.insight.model.OptionForex optionForex = 13;
  bool has_optionforex() const;
  private:
  bool _internal_has_optionforex() const;
  public:
  void clear_optionforex();
  const ::com::htsc::mdc::insight::model::OptionForex& optionforex() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::OptionForex* release_optionforex();
  ::com::htsc::mdc::insight::model::OptionForex* mutable_optionforex();
  void set_allocated_optionforex(::com::htsc::mdc::insight::model::OptionForex* optionforex);
  private:
  const ::com::htsc::mdc::insight::model::OptionForex& _internal_optionforex() const;
  ::com::htsc::mdc::insight::model::OptionForex* _internal_mutable_optionforex();
  public:
  void unsafe_arena_set_allocated_optionforex(
      ::com::htsc::mdc::insight::model::OptionForex* optionforex);
  ::com::htsc::mdc::insight::model::OptionForex* unsafe_arena_release_optionforex();

  // .com.htsc.mdc.insight.model.SpotClosePriceForex spotClosePriceForex = 14;
  bool has_spotclosepriceforex() const;
  private:
  bool _internal_has_spotclosepriceforex() const;
  public:
  void clear_spotclosepriceforex();
  const ::com::htsc::mdc::insight::model::SpotClosePriceForex& spotclosepriceforex() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SpotClosePriceForex* release_spotclosepriceforex();
  ::com::htsc::mdc::insight::model::SpotClosePriceForex* mutable_spotclosepriceforex();
  void set_allocated_spotclosepriceforex(::com::htsc::mdc::insight::model::SpotClosePriceForex* spotclosepriceforex);
  private:
  const ::com::htsc::mdc::insight::model::SpotClosePriceForex& _internal_spotclosepriceforex() const;
  ::com::htsc::mdc::insight::model::SpotClosePriceForex* _internal_mutable_spotclosepriceforex();
  public:
  void unsafe_arena_set_allocated_spotclosepriceforex(
      ::com::htsc::mdc::insight::model::SpotClosePriceForex* spotclosepriceforex);
  ::com::htsc::mdc::insight::model::SpotClosePriceForex* unsafe_arena_release_spotclosepriceforex();

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ForexType = 8;
  void clear_forextype();
  int32_t forextype() const;
  void set_forextype(int32_t value);
  private:
  int32_t _internal_forextype() const;
  void _internal_set_forextype(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 15;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCfetsForex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitysubtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
    ::com::htsc::mdc::insight::model::SpotForex* spotforex_;
    ::com::htsc::mdc::insight::model::ForwardForex* forwardforex_;
    ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* nondeliverableforwardsforex_;
    ::com::htsc::mdc::insight::model::SwapForex* swapforex_;
    ::com::htsc::mdc::insight::model::OptionForex* optionforex_;
    ::com::htsc::mdc::insight::model::SpotClosePriceForex* spotclosepriceforex_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t forextype_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsForex_2eproto;
};
// -------------------------------------------------------------------

class SpotForex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SpotForex) */ {
 public:
  inline SpotForex() : SpotForex(nullptr) {}
  ~SpotForex() override;
  explicit PROTOBUF_CONSTEXPR SpotForex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpotForex(const SpotForex& from);
  SpotForex(SpotForex&& from) noexcept
    : SpotForex() {
    *this = ::std::move(from);
  }

  inline SpotForex& operator=(const SpotForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpotForex& operator=(SpotForex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpotForex& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpotForex* internal_default_instance() {
    return reinterpret_cast<const SpotForex*>(
               &_SpotForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpotForex& a, SpotForex& b) {
    a.Swap(&b);
  }
  inline void Swap(SpotForex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpotForex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpotForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpotForex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpotForex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpotForex& from) {
    SpotForex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpotForex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SpotForex";
  }
  protected:
  explicit SpotForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueDateFieldNumber = 1,
    kBuyDateFieldNumber = 4,
    kBuyTimeFieldNumber = 5,
    kSellDateFieldNumber = 6,
    kSellTimeFieldNumber = 7,
    kNetBasisChangeFieldNumber = 2,
    kPercentageChangeFieldNumber = 3,
    kLastBuyRateFieldNumber = 8,
    kLastSellRateFieldNumber = 9,
    kLastBuyAllinFieldNumber = 10,
    kLastSellAllinFieldNumber = 11,
    kHighRateFieldNumber = 12,
    kLowRateFieldNumber = 13,
    kOpenRateFieldNumber = 14,
    kHistoryCloseRateFieldNumber = 15,
    kCloseRateFieldNumber = 16,
    kAmountLevelRateFieldNumber = 17,
    kAmountLevelAllinFieldNumber = 18,
    kRateSideFieldNumber = 19,
    kAllinSideFieldNumber = 20,
  };
  // string ValueDate = 1;
  void clear_valuedate();
  const std::string& valuedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valuedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valuedate();
  PROTOBUF_NODISCARD std::string* release_valuedate();
  void set_allocated_valuedate(std::string* valuedate);
  private:
  const std::string& _internal_valuedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valuedate(const std::string& value);
  std::string* _internal_mutable_valuedate();
  public:

  // string BuyDate = 4;
  void clear_buydate();
  const std::string& buydate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buydate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buydate();
  PROTOBUF_NODISCARD std::string* release_buydate();
  void set_allocated_buydate(std::string* buydate);
  private:
  const std::string& _internal_buydate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buydate(const std::string& value);
  std::string* _internal_mutable_buydate();
  public:

  // string BuyTime = 5;
  void clear_buytime();
  const std::string& buytime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buytime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buytime();
  PROTOBUF_NODISCARD std::string* release_buytime();
  void set_allocated_buytime(std::string* buytime);
  private:
  const std::string& _internal_buytime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buytime(const std::string& value);
  std::string* _internal_mutable_buytime();
  public:

  // string SellDate = 6;
  void clear_selldate();
  const std::string& selldate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selldate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selldate();
  PROTOBUF_NODISCARD std::string* release_selldate();
  void set_allocated_selldate(std::string* selldate);
  private:
  const std::string& _internal_selldate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selldate(const std::string& value);
  std::string* _internal_mutable_selldate();
  public:

  // string SellTime = 7;
  void clear_selltime();
  const std::string& selltime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selltime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selltime();
  PROTOBUF_NODISCARD std::string* release_selltime();
  void set_allocated_selltime(std::string* selltime);
  private:
  const std::string& _internal_selltime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selltime(const std::string& value);
  std::string* _internal_mutable_selltime();
  public:

  // int64 NetBasisChange = 2;
  void clear_netbasischange();
  int64_t netbasischange() const;
  void set_netbasischange(int64_t value);
  private:
  int64_t _internal_netbasischange() const;
  void _internal_set_netbasischange(int64_t value);
  public:

  // int64 PercentageChange = 3;
  void clear_percentagechange();
  int64_t percentagechange() const;
  void set_percentagechange(int64_t value);
  private:
  int64_t _internal_percentagechange() const;
  void _internal_set_percentagechange(int64_t value);
  public:

  // int64 LastBuyRate = 8;
  void clear_lastbuyrate();
  int64_t lastbuyrate() const;
  void set_lastbuyrate(int64_t value);
  private:
  int64_t _internal_lastbuyrate() const;
  void _internal_set_lastbuyrate(int64_t value);
  public:

  // int64 LastSellRate = 9;
  void clear_lastsellrate();
  int64_t lastsellrate() const;
  void set_lastsellrate(int64_t value);
  private:
  int64_t _internal_lastsellrate() const;
  void _internal_set_lastsellrate(int64_t value);
  public:

  // int64 LastBuyAllin = 10;
  void clear_lastbuyallin();
  int64_t lastbuyallin() const;
  void set_lastbuyallin(int64_t value);
  private:
  int64_t _internal_lastbuyallin() const;
  void _internal_set_lastbuyallin(int64_t value);
  public:

  // int64 LastSellAllin = 11;
  void clear_lastsellallin();
  int64_t lastsellallin() const;
  void set_lastsellallin(int64_t value);
  private:
  int64_t _internal_lastsellallin() const;
  void _internal_set_lastsellallin(int64_t value);
  public:

  // int64 HighRate = 12;
  void clear_highrate();
  int64_t highrate() const;
  void set_highrate(int64_t value);
  private:
  int64_t _internal_highrate() const;
  void _internal_set_highrate(int64_t value);
  public:

  // int64 LowRate = 13;
  void clear_lowrate();
  int64_t lowrate() const;
  void set_lowrate(int64_t value);
  private:
  int64_t _internal_lowrate() const;
  void _internal_set_lowrate(int64_t value);
  public:

  // int64 OpenRate = 14;
  void clear_openrate();
  int64_t openrate() const;
  void set_openrate(int64_t value);
  private:
  int64_t _internal_openrate() const;
  void _internal_set_openrate(int64_t value);
  public:

  // int64 HistoryCloseRate = 15;
  void clear_historycloserate();
  int64_t historycloserate() const;
  void set_historycloserate(int64_t value);
  private:
  int64_t _internal_historycloserate() const;
  void _internal_set_historycloserate(int64_t value);
  public:

  // int64 CloseRate = 16;
  void clear_closerate();
  int64_t closerate() const;
  void set_closerate(int64_t value);
  private:
  int64_t _internal_closerate() const;
  void _internal_set_closerate(int64_t value);
  public:

  // int32 AmountLevelRate = 17;
  void clear_amountlevelrate();
  int32_t amountlevelrate() const;
  void set_amountlevelrate(int32_t value);
  private:
  int32_t _internal_amountlevelrate() const;
  void _internal_set_amountlevelrate(int32_t value);
  public:

  // int32 AmountLevelAllin = 18;
  void clear_amountlevelallin();
  int32_t amountlevelallin() const;
  void set_amountlevelallin(int32_t value);
  private:
  int32_t _internal_amountlevelallin() const;
  void _internal_set_amountlevelallin(int32_t value);
  public:

  // int32 RateSide = 19;
  void clear_rateside();
  int32_t rateside() const;
  void set_rateside(int32_t value);
  private:
  int32_t _internal_rateside() const;
  void _internal_set_rateside(int32_t value);
  public:

  // int32 AllinSide = 20;
  void clear_allinside();
  int32_t allinside() const;
  void set_allinside(int32_t value);
  private:
  int32_t _internal_allinside() const;
  void _internal_set_allinside(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SpotForex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valuedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buydate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buytime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selldate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selltime_;
    int64_t netbasischange_;
    int64_t percentagechange_;
    int64_t lastbuyrate_;
    int64_t lastsellrate_;
    int64_t lastbuyallin_;
    int64_t lastsellallin_;
    int64_t highrate_;
    int64_t lowrate_;
    int64_t openrate_;
    int64_t historycloserate_;
    int64_t closerate_;
    int32_t amountlevelrate_;
    int32_t amountlevelallin_;
    int32_t rateside_;
    int32_t allinside_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsForex_2eproto;
};
// -------------------------------------------------------------------

class ForwardForex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ForwardForex) */ {
 public:
  inline ForwardForex() : ForwardForex(nullptr) {}
  ~ForwardForex() override;
  explicit PROTOBUF_CONSTEXPR ForwardForex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForwardForex(const ForwardForex& from);
  ForwardForex(ForwardForex&& from) noexcept
    : ForwardForex() {
    *this = ::std::move(from);
  }

  inline ForwardForex& operator=(const ForwardForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardForex& operator=(ForwardForex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardForex& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardForex* internal_default_instance() {
    return reinterpret_cast<const ForwardForex*>(
               &_ForwardForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ForwardForex& a, ForwardForex& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardForex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardForex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForwardForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForwardForex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForwardForex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForwardForex& from) {
    ForwardForex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardForex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ForwardForex";
  }
  protected:
  explicit ForwardForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueDateFieldNumber = 1,
    kBuyDateFieldNumber = 4,
    kBuyTimeFieldNumber = 5,
    kSellDateFieldNumber = 6,
    kSellTimeFieldNumber = 7,
    kNetBasisChangeFieldNumber = 2,
    kPercentageChangeFieldNumber = 3,
    kLastBuyRateFieldNumber = 8,
    kLastSellRateFieldNumber = 9,
    kLastBuyAllinFieldNumber = 10,
    kLastSellAllinFieldNumber = 11,
    kHighRateFieldNumber = 12,
    kLowRateFieldNumber = 13,
    kOpenRateFieldNumber = 14,
    kHistoryCloseRateFieldNumber = 15,
    kCloseRateFieldNumber = 16,
    kAmountLevelRateFieldNumber = 17,
    kAmountLevelAllinFieldNumber = 18,
    kRateSideFieldNumber = 19,
    kAllinSideFieldNumber = 20,
  };
  // string ValueDate = 1;
  void clear_valuedate();
  const std::string& valuedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valuedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valuedate();
  PROTOBUF_NODISCARD std::string* release_valuedate();
  void set_allocated_valuedate(std::string* valuedate);
  private:
  const std::string& _internal_valuedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valuedate(const std::string& value);
  std::string* _internal_mutable_valuedate();
  public:

  // string BuyDate = 4;
  void clear_buydate();
  const std::string& buydate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buydate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buydate();
  PROTOBUF_NODISCARD std::string* release_buydate();
  void set_allocated_buydate(std::string* buydate);
  private:
  const std::string& _internal_buydate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buydate(const std::string& value);
  std::string* _internal_mutable_buydate();
  public:

  // string BuyTime = 5;
  void clear_buytime();
  const std::string& buytime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buytime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buytime();
  PROTOBUF_NODISCARD std::string* release_buytime();
  void set_allocated_buytime(std::string* buytime);
  private:
  const std::string& _internal_buytime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buytime(const std::string& value);
  std::string* _internal_mutable_buytime();
  public:

  // string SellDate = 6;
  void clear_selldate();
  const std::string& selldate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selldate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selldate();
  PROTOBUF_NODISCARD std::string* release_selldate();
  void set_allocated_selldate(std::string* selldate);
  private:
  const std::string& _internal_selldate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selldate(const std::string& value);
  std::string* _internal_mutable_selldate();
  public:

  // string SellTime = 7;
  void clear_selltime();
  const std::string& selltime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selltime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selltime();
  PROTOBUF_NODISCARD std::string* release_selltime();
  void set_allocated_selltime(std::string* selltime);
  private:
  const std::string& _internal_selltime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selltime(const std::string& value);
  std::string* _internal_mutable_selltime();
  public:

  // int64 NetBasisChange = 2;
  void clear_netbasischange();
  int64_t netbasischange() const;
  void set_netbasischange(int64_t value);
  private:
  int64_t _internal_netbasischange() const;
  void _internal_set_netbasischange(int64_t value);
  public:

  // int64 PercentageChange = 3;
  void clear_percentagechange();
  int64_t percentagechange() const;
  void set_percentagechange(int64_t value);
  private:
  int64_t _internal_percentagechange() const;
  void _internal_set_percentagechange(int64_t value);
  public:

  // int64 LastBuyRate = 8;
  void clear_lastbuyrate();
  int64_t lastbuyrate() const;
  void set_lastbuyrate(int64_t value);
  private:
  int64_t _internal_lastbuyrate() const;
  void _internal_set_lastbuyrate(int64_t value);
  public:

  // int64 LastSellRate = 9;
  void clear_lastsellrate();
  int64_t lastsellrate() const;
  void set_lastsellrate(int64_t value);
  private:
  int64_t _internal_lastsellrate() const;
  void _internal_set_lastsellrate(int64_t value);
  public:

  // int64 LastBuyAllin = 10;
  void clear_lastbuyallin();
  int64_t lastbuyallin() const;
  void set_lastbuyallin(int64_t value);
  private:
  int64_t _internal_lastbuyallin() const;
  void _internal_set_lastbuyallin(int64_t value);
  public:

  // int64 LastSellAllin = 11;
  void clear_lastsellallin();
  int64_t lastsellallin() const;
  void set_lastsellallin(int64_t value);
  private:
  int64_t _internal_lastsellallin() const;
  void _internal_set_lastsellallin(int64_t value);
  public:

  // int64 HighRate = 12;
  void clear_highrate();
  int64_t highrate() const;
  void set_highrate(int64_t value);
  private:
  int64_t _internal_highrate() const;
  void _internal_set_highrate(int64_t value);
  public:

  // int64 LowRate = 13;
  void clear_lowrate();
  int64_t lowrate() const;
  void set_lowrate(int64_t value);
  private:
  int64_t _internal_lowrate() const;
  void _internal_set_lowrate(int64_t value);
  public:

  // int64 OpenRate = 14;
  void clear_openrate();
  int64_t openrate() const;
  void set_openrate(int64_t value);
  private:
  int64_t _internal_openrate() const;
  void _internal_set_openrate(int64_t value);
  public:

  // int64 HistoryCloseRate = 15;
  void clear_historycloserate();
  int64_t historycloserate() const;
  void set_historycloserate(int64_t value);
  private:
  int64_t _internal_historycloserate() const;
  void _internal_set_historycloserate(int64_t value);
  public:

  // int64 CloseRate = 16;
  void clear_closerate();
  int64_t closerate() const;
  void set_closerate(int64_t value);
  private:
  int64_t _internal_closerate() const;
  void _internal_set_closerate(int64_t value);
  public:

  // int32 AmountLevelRate = 17;
  void clear_amountlevelrate();
  int32_t amountlevelrate() const;
  void set_amountlevelrate(int32_t value);
  private:
  int32_t _internal_amountlevelrate() const;
  void _internal_set_amountlevelrate(int32_t value);
  public:

  // int32 AmountLevelAllin = 18;
  void clear_amountlevelallin();
  int32_t amountlevelallin() const;
  void set_amountlevelallin(int32_t value);
  private:
  int32_t _internal_amountlevelallin() const;
  void _internal_set_amountlevelallin(int32_t value);
  public:

  // int32 RateSide = 19;
  void clear_rateside();
  int32_t rateside() const;
  void set_rateside(int32_t value);
  private:
  int32_t _internal_rateside() const;
  void _internal_set_rateside(int32_t value);
  public:

  // int32 AllinSide = 20;
  void clear_allinside();
  int32_t allinside() const;
  void set_allinside(int32_t value);
  private:
  int32_t _internal_allinside() const;
  void _internal_set_allinside(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ForwardForex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valuedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buydate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buytime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selldate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selltime_;
    int64_t netbasischange_;
    int64_t percentagechange_;
    int64_t lastbuyrate_;
    int64_t lastsellrate_;
    int64_t lastbuyallin_;
    int64_t lastsellallin_;
    int64_t highrate_;
    int64_t lowrate_;
    int64_t openrate_;
    int64_t historycloserate_;
    int64_t closerate_;
    int32_t amountlevelrate_;
    int32_t amountlevelallin_;
    int32_t rateside_;
    int32_t allinside_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsForex_2eproto;
};
// -------------------------------------------------------------------

class NonDeliverableForwardsForex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.NonDeliverableForwardsForex) */ {
 public:
  inline NonDeliverableForwardsForex() : NonDeliverableForwardsForex(nullptr) {}
  ~NonDeliverableForwardsForex() override;
  explicit PROTOBUF_CONSTEXPR NonDeliverableForwardsForex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NonDeliverableForwardsForex(const NonDeliverableForwardsForex& from);
  NonDeliverableForwardsForex(NonDeliverableForwardsForex&& from) noexcept
    : NonDeliverableForwardsForex() {
    *this = ::std::move(from);
  }

  inline NonDeliverableForwardsForex& operator=(const NonDeliverableForwardsForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonDeliverableForwardsForex& operator=(NonDeliverableForwardsForex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NonDeliverableForwardsForex& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonDeliverableForwardsForex* internal_default_instance() {
    return reinterpret_cast<const NonDeliverableForwardsForex*>(
               &_NonDeliverableForwardsForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NonDeliverableForwardsForex& a, NonDeliverableForwardsForex& b) {
    a.Swap(&b);
  }
  inline void Swap(NonDeliverableForwardsForex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonDeliverableForwardsForex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonDeliverableForwardsForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NonDeliverableForwardsForex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NonDeliverableForwardsForex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NonDeliverableForwardsForex& from) {
    NonDeliverableForwardsForex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NonDeliverableForwardsForex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.NonDeliverableForwardsForex";
  }
  protected:
  explicit NonDeliverableForwardsForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueDateFieldNumber = 1,
    kBuyDateFieldNumber = 4,
    kBuyTimeFieldNumber = 5,
    kSellDateFieldNumber = 6,
    kSellTimeFieldNumber = 7,
    kNetBasisChangeFieldNumber = 2,
    kPercentageChangeFieldNumber = 3,
    kLastBuyRateFieldNumber = 8,
    kLastSellRateFieldNumber = 9,
    kLastBuyAllinFieldNumber = 10,
    kLastSellAllinFieldNumber = 11,
    kHighRateFieldNumber = 12,
    kLowRateFieldNumber = 13,
    kOpenRateFieldNumber = 14,
    kHistoryCloseRateFieldNumber = 15,
    kCloseRateFieldNumber = 16,
    kAmountLevelRateFieldNumber = 17,
    kAmountLevelAllinFieldNumber = 18,
    kRateSideFieldNumber = 19,
    kAllinSideFieldNumber = 20,
  };
  // string ValueDate = 1;
  void clear_valuedate();
  const std::string& valuedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valuedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valuedate();
  PROTOBUF_NODISCARD std::string* release_valuedate();
  void set_allocated_valuedate(std::string* valuedate);
  private:
  const std::string& _internal_valuedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valuedate(const std::string& value);
  std::string* _internal_mutable_valuedate();
  public:

  // string BuyDate = 4;
  void clear_buydate();
  const std::string& buydate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buydate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buydate();
  PROTOBUF_NODISCARD std::string* release_buydate();
  void set_allocated_buydate(std::string* buydate);
  private:
  const std::string& _internal_buydate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buydate(const std::string& value);
  std::string* _internal_mutable_buydate();
  public:

  // string BuyTime = 5;
  void clear_buytime();
  const std::string& buytime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buytime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buytime();
  PROTOBUF_NODISCARD std::string* release_buytime();
  void set_allocated_buytime(std::string* buytime);
  private:
  const std::string& _internal_buytime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buytime(const std::string& value);
  std::string* _internal_mutable_buytime();
  public:

  // string SellDate = 6;
  void clear_selldate();
  const std::string& selldate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selldate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selldate();
  PROTOBUF_NODISCARD std::string* release_selldate();
  void set_allocated_selldate(std::string* selldate);
  private:
  const std::string& _internal_selldate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selldate(const std::string& value);
  std::string* _internal_mutable_selldate();
  public:

  // string SellTime = 7;
  void clear_selltime();
  const std::string& selltime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selltime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selltime();
  PROTOBUF_NODISCARD std::string* release_selltime();
  void set_allocated_selltime(std::string* selltime);
  private:
  const std::string& _internal_selltime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selltime(const std::string& value);
  std::string* _internal_mutable_selltime();
  public:

  // int64 NetBasisChange = 2;
  void clear_netbasischange();
  int64_t netbasischange() const;
  void set_netbasischange(int64_t value);
  private:
  int64_t _internal_netbasischange() const;
  void _internal_set_netbasischange(int64_t value);
  public:

  // int64 PercentageChange = 3;
  void clear_percentagechange();
  int64_t percentagechange() const;
  void set_percentagechange(int64_t value);
  private:
  int64_t _internal_percentagechange() const;
  void _internal_set_percentagechange(int64_t value);
  public:

  // int64 LastBuyRate = 8;
  void clear_lastbuyrate();
  int64_t lastbuyrate() const;
  void set_lastbuyrate(int64_t value);
  private:
  int64_t _internal_lastbuyrate() const;
  void _internal_set_lastbuyrate(int64_t value);
  public:

  // int64 LastSellRate = 9;
  void clear_lastsellrate();
  int64_t lastsellrate() const;
  void set_lastsellrate(int64_t value);
  private:
  int64_t _internal_lastsellrate() const;
  void _internal_set_lastsellrate(int64_t value);
  public:

  // int64 LastBuyAllin = 10;
  void clear_lastbuyallin();
  int64_t lastbuyallin() const;
  void set_lastbuyallin(int64_t value);
  private:
  int64_t _internal_lastbuyallin() const;
  void _internal_set_lastbuyallin(int64_t value);
  public:

  // int64 LastSellAllin = 11;
  void clear_lastsellallin();
  int64_t lastsellallin() const;
  void set_lastsellallin(int64_t value);
  private:
  int64_t _internal_lastsellallin() const;
  void _internal_set_lastsellallin(int64_t value);
  public:

  // int64 HighRate = 12;
  void clear_highrate();
  int64_t highrate() const;
  void set_highrate(int64_t value);
  private:
  int64_t _internal_highrate() const;
  void _internal_set_highrate(int64_t value);
  public:

  // int64 LowRate = 13;
  void clear_lowrate();
  int64_t lowrate() const;
  void set_lowrate(int64_t value);
  private:
  int64_t _internal_lowrate() const;
  void _internal_set_lowrate(int64_t value);
  public:

  // int64 OpenRate = 14;
  void clear_openrate();
  int64_t openrate() const;
  void set_openrate(int64_t value);
  private:
  int64_t _internal_openrate() const;
  void _internal_set_openrate(int64_t value);
  public:

  // int64 HistoryCloseRate = 15;
  void clear_historycloserate();
  int64_t historycloserate() const;
  void set_historycloserate(int64_t value);
  private:
  int64_t _internal_historycloserate() const;
  void _internal_set_historycloserate(int64_t value);
  public:

  // int64 CloseRate = 16;
  void clear_closerate();
  int64_t closerate() const;
  void set_closerate(int64_t value);
  private:
  int64_t _internal_closerate() const;
  void _internal_set_closerate(int64_t value);
  public:

  // int32 AmountLevelRate = 17;
  void clear_amountlevelrate();
  int32_t amountlevelrate() const;
  void set_amountlevelrate(int32_t value);
  private:
  int32_t _internal_amountlevelrate() const;
  void _internal_set_amountlevelrate(int32_t value);
  public:

  // int32 AmountLevelAllin = 18;
  void clear_amountlevelallin();
  int32_t amountlevelallin() const;
  void set_amountlevelallin(int32_t value);
  private:
  int32_t _internal_amountlevelallin() const;
  void _internal_set_amountlevelallin(int32_t value);
  public:

  // int32 RateSide = 19;
  void clear_rateside();
  int32_t rateside() const;
  void set_rateside(int32_t value);
  private:
  int32_t _internal_rateside() const;
  void _internal_set_rateside(int32_t value);
  public:

  // int32 AllinSide = 20;
  void clear_allinside();
  int32_t allinside() const;
  void set_allinside(int32_t value);
  private:
  int32_t _internal_allinside() const;
  void _internal_set_allinside(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.NonDeliverableForwardsForex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valuedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buydate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buytime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selldate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selltime_;
    int64_t netbasischange_;
    int64_t percentagechange_;
    int64_t lastbuyrate_;
    int64_t lastsellrate_;
    int64_t lastbuyallin_;
    int64_t lastsellallin_;
    int64_t highrate_;
    int64_t lowrate_;
    int64_t openrate_;
    int64_t historycloserate_;
    int64_t closerate_;
    int32_t amountlevelrate_;
    int32_t amountlevelallin_;
    int32_t rateside_;
    int32_t allinside_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsForex_2eproto;
};
// -------------------------------------------------------------------

class SwapForex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SwapForex) */ {
 public:
  inline SwapForex() : SwapForex(nullptr) {}
  ~SwapForex() override;
  explicit PROTOBUF_CONSTEXPR SwapForex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapForex(const SwapForex& from);
  SwapForex(SwapForex&& from) noexcept
    : SwapForex() {
    *this = ::std::move(from);
  }

  inline SwapForex& operator=(const SwapForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapForex& operator=(SwapForex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapForex& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapForex* internal_default_instance() {
    return reinterpret_cast<const SwapForex*>(
               &_SwapForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SwapForex& a, SwapForex& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapForex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapForex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwapForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwapForex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapForex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwapForex& from) {
    SwapForex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapForex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SwapForex";
  }
  protected:
  explicit SwapForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueDateFieldNumber = 1,
    kBuyDateFieldNumber = 4,
    kBuyTimeFieldNumber = 5,
    kSellDateFieldNumber = 6,
    kSellTimeFieldNumber = 7,
    kLegSignFieldNumber = 21,
    kNetBasisChangeFieldNumber = 2,
    kPercentageChangeFieldNumber = 3,
    kLastBuyRateFieldNumber = 8,
    kLastSellRateFieldNumber = 9,
    kLastBuyAllinFieldNumber = 10,
    kLastSellAllinFieldNumber = 11,
    kHighRateFieldNumber = 12,
    kLowRateFieldNumber = 13,
    kOpenRateFieldNumber = 14,
    kHistoryCloseRateFieldNumber = 15,
    kCloseRateFieldNumber = 16,
    kAmountLevelRateFieldNumber = 17,
    kAmountLevelAllinFieldNumber = 18,
    kRateSideFieldNumber = 19,
    kAllinSideFieldNumber = 20,
  };
  // string ValueDate = 1;
  void clear_valuedate();
  const std::string& valuedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valuedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valuedate();
  PROTOBUF_NODISCARD std::string* release_valuedate();
  void set_allocated_valuedate(std::string* valuedate);
  private:
  const std::string& _internal_valuedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valuedate(const std::string& value);
  std::string* _internal_mutable_valuedate();
  public:

  // string BuyDate = 4;
  void clear_buydate();
  const std::string& buydate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buydate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buydate();
  PROTOBUF_NODISCARD std::string* release_buydate();
  void set_allocated_buydate(std::string* buydate);
  private:
  const std::string& _internal_buydate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buydate(const std::string& value);
  std::string* _internal_mutable_buydate();
  public:

  // string BuyTime = 5;
  void clear_buytime();
  const std::string& buytime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buytime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buytime();
  PROTOBUF_NODISCARD std::string* release_buytime();
  void set_allocated_buytime(std::string* buytime);
  private:
  const std::string& _internal_buytime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buytime(const std::string& value);
  std::string* _internal_mutable_buytime();
  public:

  // string SellDate = 6;
  void clear_selldate();
  const std::string& selldate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selldate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selldate();
  PROTOBUF_NODISCARD std::string* release_selldate();
  void set_allocated_selldate(std::string* selldate);
  private:
  const std::string& _internal_selldate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selldate(const std::string& value);
  std::string* _internal_mutable_selldate();
  public:

  // string SellTime = 7;
  void clear_selltime();
  const std::string& selltime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selltime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selltime();
  PROTOBUF_NODISCARD std::string* release_selltime();
  void set_allocated_selltime(std::string* selltime);
  private:
  const std::string& _internal_selltime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selltime(const std::string& value);
  std::string* _internal_mutable_selltime();
  public:

  // string LegSign = 21;
  void clear_legsign();
  const std::string& legsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legsign();
  PROTOBUF_NODISCARD std::string* release_legsign();
  void set_allocated_legsign(std::string* legsign);
  private:
  const std::string& _internal_legsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legsign(const std::string& value);
  std::string* _internal_mutable_legsign();
  public:

  // int64 NetBasisChange = 2;
  void clear_netbasischange();
  int64_t netbasischange() const;
  void set_netbasischange(int64_t value);
  private:
  int64_t _internal_netbasischange() const;
  void _internal_set_netbasischange(int64_t value);
  public:

  // int64 PercentageChange = 3;
  void clear_percentagechange();
  int64_t percentagechange() const;
  void set_percentagechange(int64_t value);
  private:
  int64_t _internal_percentagechange() const;
  void _internal_set_percentagechange(int64_t value);
  public:

  // int64 LastBuyRate = 8;
  void clear_lastbuyrate();
  int64_t lastbuyrate() const;
  void set_lastbuyrate(int64_t value);
  private:
  int64_t _internal_lastbuyrate() const;
  void _internal_set_lastbuyrate(int64_t value);
  public:

  // int64 LastSellRate = 9;
  void clear_lastsellrate();
  int64_t lastsellrate() const;
  void set_lastsellrate(int64_t value);
  private:
  int64_t _internal_lastsellrate() const;
  void _internal_set_lastsellrate(int64_t value);
  public:

  // int64 LastBuyAllin = 10;
  void clear_lastbuyallin();
  int64_t lastbuyallin() const;
  void set_lastbuyallin(int64_t value);
  private:
  int64_t _internal_lastbuyallin() const;
  void _internal_set_lastbuyallin(int64_t value);
  public:

  // int64 LastSellAllin = 11;
  void clear_lastsellallin();
  int64_t lastsellallin() const;
  void set_lastsellallin(int64_t value);
  private:
  int64_t _internal_lastsellallin() const;
  void _internal_set_lastsellallin(int64_t value);
  public:

  // int64 HighRate = 12;
  void clear_highrate();
  int64_t highrate() const;
  void set_highrate(int64_t value);
  private:
  int64_t _internal_highrate() const;
  void _internal_set_highrate(int64_t value);
  public:

  // int64 LowRate = 13;
  void clear_lowrate();
  int64_t lowrate() const;
  void set_lowrate(int64_t value);
  private:
  int64_t _internal_lowrate() const;
  void _internal_set_lowrate(int64_t value);
  public:

  // int64 OpenRate = 14;
  void clear_openrate();
  int64_t openrate() const;
  void set_openrate(int64_t value);
  private:
  int64_t _internal_openrate() const;
  void _internal_set_openrate(int64_t value);
  public:

  // int64 HistoryCloseRate = 15;
  void clear_historycloserate();
  int64_t historycloserate() const;
  void set_historycloserate(int64_t value);
  private:
  int64_t _internal_historycloserate() const;
  void _internal_set_historycloserate(int64_t value);
  public:

  // int64 CloseRate = 16;
  void clear_closerate();
  int64_t closerate() const;
  void set_closerate(int64_t value);
  private:
  int64_t _internal_closerate() const;
  void _internal_set_closerate(int64_t value);
  public:

  // int32 AmountLevelRate = 17;
  void clear_amountlevelrate();
  int32_t amountlevelrate() const;
  void set_amountlevelrate(int32_t value);
  private:
  int32_t _internal_amountlevelrate() const;
  void _internal_set_amountlevelrate(int32_t value);
  public:

  // int32 AmountLevelAllin = 18;
  void clear_amountlevelallin();
  int32_t amountlevelallin() const;
  void set_amountlevelallin(int32_t value);
  private:
  int32_t _internal_amountlevelallin() const;
  void _internal_set_amountlevelallin(int32_t value);
  public:

  // int32 RateSide = 19;
  void clear_rateside();
  int32_t rateside() const;
  void set_rateside(int32_t value);
  private:
  int32_t _internal_rateside() const;
  void _internal_set_rateside(int32_t value);
  public:

  // int32 AllinSide = 20;
  void clear_allinside();
  int32_t allinside() const;
  void set_allinside(int32_t value);
  private:
  int32_t _internal_allinside() const;
  void _internal_set_allinside(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SwapForex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valuedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buydate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buytime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selldate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selltime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legsign_;
    int64_t netbasischange_;
    int64_t percentagechange_;
    int64_t lastbuyrate_;
    int64_t lastsellrate_;
    int64_t lastbuyallin_;
    int64_t lastsellallin_;
    int64_t highrate_;
    int64_t lowrate_;
    int64_t openrate_;
    int64_t historycloserate_;
    int64_t closerate_;
    int32_t amountlevelrate_;
    int32_t amountlevelallin_;
    int32_t rateside_;
    int32_t allinside_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsForex_2eproto;
};
// -------------------------------------------------------------------

class OptionForex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.OptionForex) */ {
 public:
  inline OptionForex() : OptionForex(nullptr) {}
  ~OptionForex() override;
  explicit PROTOBUF_CONSTEXPR OptionForex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionForex(const OptionForex& from);
  OptionForex(OptionForex&& from) noexcept
    : OptionForex() {
    *this = ::std::move(from);
  }

  inline OptionForex& operator=(const OptionForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionForex& operator=(OptionForex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionForex& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionForex* internal_default_instance() {
    return reinterpret_cast<const OptionForex*>(
               &_OptionForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OptionForex& a, OptionForex& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionForex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionForex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionForex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionForex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionForex& from) {
    OptionForex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionForex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.OptionForex";
  }
  protected:
  explicit OptionForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxTermFieldNumber = 1,
    kTradeDateFieldNumber = 5,
    kTradeTimeFieldNumber = 6,
    kOptionTypeFieldNumber = 8,
    kPremiumFieldNumber = 2,
    kVolatilityFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kPremiumTypeFieldNumber = 7,
  };
  // string FxTerm = 1;
  void clear_fxterm();
  const std::string& fxterm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fxterm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fxterm();
  PROTOBUF_NODISCARD std::string* release_fxterm();
  void set_allocated_fxterm(std::string* fxterm);
  private:
  const std::string& _internal_fxterm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fxterm(const std::string& value);
  std::string* _internal_mutable_fxterm();
  public:

  // string TradeDate = 5;
  void clear_tradedate();
  const std::string& tradedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradedate();
  PROTOBUF_NODISCARD std::string* release_tradedate();
  void set_allocated_tradedate(std::string* tradedate);
  private:
  const std::string& _internal_tradedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradedate(const std::string& value);
  std::string* _internal_mutable_tradedate();
  public:

  // string TradeTime = 6;
  void clear_tradetime();
  const std::string& tradetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradetime();
  PROTOBUF_NODISCARD std::string* release_tradetime();
  void set_allocated_tradetime(std::string* tradetime);
  private:
  const std::string& _internal_tradetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradetime(const std::string& value);
  std::string* _internal_mutable_tradetime();
  public:

  // string OptionType = 8;
  void clear_optiontype();
  const std::string& optiontype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optiontype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optiontype();
  PROTOBUF_NODISCARD std::string* release_optiontype();
  void set_allocated_optiontype(std::string* optiontype);
  private:
  const std::string& _internal_optiontype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optiontype(const std::string& value);
  std::string* _internal_mutable_optiontype();
  public:

  // int64 Premium = 2;
  void clear_premium();
  int64_t premium() const;
  void set_premium(int64_t value);
  private:
  int64_t _internal_premium() const;
  void _internal_set_premium(int64_t value);
  public:

  // int64 Volatility = 3;
  void clear_volatility();
  int64_t volatility() const;
  void set_volatility(int64_t value);
  private:
  int64_t _internal_volatility() const;
  void _internal_set_volatility(int64_t value);
  public:

  // int64 Volume = 4;
  void clear_volume();
  int64_t volume() const;
  void set_volume(int64_t value);
  private:
  int64_t _internal_volume() const;
  void _internal_set_volume(int64_t value);
  public:

  // int32 PremiumType = 7;
  void clear_premiumtype();
  int32_t premiumtype() const;
  void set_premiumtype(int32_t value);
  private:
  int32_t _internal_premiumtype() const;
  void _internal_set_premiumtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.OptionForex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fxterm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradetime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optiontype_;
    int64_t premium_;
    int64_t volatility_;
    int64_t volume_;
    int32_t premiumtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsForex_2eproto;
};
// -------------------------------------------------------------------

class SpotClosePriceForex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SpotClosePriceForex) */ {
 public:
  inline SpotClosePriceForex() : SpotClosePriceForex(nullptr) {}
  ~SpotClosePriceForex() override;
  explicit PROTOBUF_CONSTEXPR SpotClosePriceForex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpotClosePriceForex(const SpotClosePriceForex& from);
  SpotClosePriceForex(SpotClosePriceForex&& from) noexcept
    : SpotClosePriceForex() {
    *this = ::std::move(from);
  }

  inline SpotClosePriceForex& operator=(const SpotClosePriceForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpotClosePriceForex& operator=(SpotClosePriceForex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpotClosePriceForex& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpotClosePriceForex* internal_default_instance() {
    return reinterpret_cast<const SpotClosePriceForex*>(
               &_SpotClosePriceForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SpotClosePriceForex& a, SpotClosePriceForex& b) {
    a.Swap(&b);
  }
  inline void Swap(SpotClosePriceForex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpotClosePriceForex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpotClosePriceForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpotClosePriceForex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpotClosePriceForex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpotClosePriceForex& from) {
    SpotClosePriceForex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpotClosePriceForex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SpotClosePriceForex";
  }
  protected:
  explicit SpotClosePriceForex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateDateFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
    kClosePxFieldNumber = 1,
  };
  // string UpdateDate = 2;
  void clear_updatedate();
  const std::string& updatedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatedate();
  PROTOBUF_NODISCARD std::string* release_updatedate();
  void set_allocated_updatedate(std::string* updatedate);
  private:
  const std::string& _internal_updatedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedate(const std::string& value);
  std::string* _internal_mutable_updatedate();
  public:

  // string UpdateTime = 3;
  void clear_updatetime();
  const std::string& updatetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatetime();
  PROTOBUF_NODISCARD std::string* release_updatetime();
  void set_allocated_updatetime(std::string* updatetime);
  private:
  const std::string& _internal_updatetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatetime(const std::string& value);
  std::string* _internal_mutable_updatetime();
  public:

  // int64 ClosePx = 1;
  void clear_closepx();
  int64_t closepx() const;
  void set_closepx(int64_t value);
  private:
  int64_t _internal_closepx() const;
  void _internal_set_closepx(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SpotClosePriceForex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatetime_;
    int64_t closepx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsForex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDCfetsForex

// string HTSCSecurityID = 1;
inline void MDCfetsForex::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDCfetsForex::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsForex::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.HTSCSecurityID)
}
inline std::string* MDCfetsForex::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.HTSCSecurityID)
  return _s;
}
inline const std::string& MDCfetsForex::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDCfetsForex::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsForex::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsForex::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDCfetsForex::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDCfetsForex::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDCfetsForex::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDCfetsForex::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.MDDate)
  return _internal_mddate();
}
inline void MDCfetsForex::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDCfetsForex::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.MDDate)
}

// int32 MDTime = 3;
inline void MDCfetsForex::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDCfetsForex::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDCfetsForex::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.MDTime)
  return _internal_mdtime();
}
inline void MDCfetsForex::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDCfetsForex::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDCfetsForex::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDCfetsForex::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDCfetsForex::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDCfetsForex::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDCfetsForex::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDCfetsForex::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCfetsForex::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCfetsForex::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.securityIDSource)
  return _internal_securityidsource();
}
inline void MDCfetsForex::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDCfetsForex::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDCfetsForex::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDCfetsForex::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDCfetsForex::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.securityType)
  return _internal_securitytype();
}
inline void MDCfetsForex::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDCfetsForex::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.securityType)
}

// string SecuritySubType = 7;
inline void MDCfetsForex::clear_securitysubtype() {
  _impl_.securitysubtype_.ClearToEmpty();
}
inline const std::string& MDCfetsForex::securitysubtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.SecuritySubType)
  return _internal_securitysubtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsForex::set_securitysubtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.securitysubtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.SecuritySubType)
}
inline std::string* MDCfetsForex::mutable_securitysubtype() {
  std::string* _s = _internal_mutable_securitysubtype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.SecuritySubType)
  return _s;
}
inline const std::string& MDCfetsForex::_internal_securitysubtype() const {
  return _impl_.securitysubtype_.Get();
}
inline void MDCfetsForex::_internal_set_securitysubtype(const std::string& value) {
  
  _impl_.securitysubtype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsForex::_internal_mutable_securitysubtype() {
  
  return _impl_.securitysubtype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsForex::release_securitysubtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.SecuritySubType)
  return _impl_.securitysubtype_.Release();
}
inline void MDCfetsForex::set_allocated_securitysubtype(std::string* securitysubtype) {
  if (securitysubtype != nullptr) {
    
  } else {
    
  }
  _impl_.securitysubtype_.SetAllocated(securitysubtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitysubtype_.IsDefault()) {
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.SecuritySubType)
}

// int32 ForexType = 8;
inline void MDCfetsForex::clear_forextype() {
  _impl_.forextype_ = 0;
}
inline int32_t MDCfetsForex::_internal_forextype() const {
  return _impl_.forextype_;
}
inline int32_t MDCfetsForex::forextype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.ForexType)
  return _internal_forextype();
}
inline void MDCfetsForex::_internal_set_forextype(int32_t value) {
  
  _impl_.forextype_ = value;
}
inline void MDCfetsForex::set_forextype(int32_t value) {
  _internal_set_forextype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.ForexType)
}

// .com.htsc.mdc.insight.model.SpotForex spotForex = 9;
inline bool MDCfetsForex::_internal_has_spotforex() const {
  return this != internal_default_instance() && _impl_.spotforex_ != nullptr;
}
inline bool MDCfetsForex::has_spotforex() const {
  return _internal_has_spotforex();
}
inline void MDCfetsForex::clear_spotforex() {
  if (GetArenaForAllocation() == nullptr && _impl_.spotforex_ != nullptr) {
    delete _impl_.spotforex_;
  }
  _impl_.spotforex_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SpotForex& MDCfetsForex::_internal_spotforex() const {
  const ::com::htsc::mdc::insight::model::SpotForex* p = _impl_.spotforex_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SpotForex&>(
      ::com::htsc::mdc::insight::model::_SpotForex_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SpotForex& MDCfetsForex::spotforex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.spotForex)
  return _internal_spotforex();
}
inline void MDCfetsForex::unsafe_arena_set_allocated_spotforex(
    ::com::htsc::mdc::insight::model::SpotForex* spotforex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spotforex_);
  }
  _impl_.spotforex_ = spotforex;
  if (spotforex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.spotForex)
}
inline ::com::htsc::mdc::insight::model::SpotForex* MDCfetsForex::release_spotforex() {
  
  ::com::htsc::mdc::insight::model::SpotForex* temp = _impl_.spotforex_;
  _impl_.spotforex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SpotForex* MDCfetsForex::unsafe_arena_release_spotforex() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.spotForex)
  
  ::com::htsc::mdc::insight::model::SpotForex* temp = _impl_.spotforex_;
  _impl_.spotforex_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SpotForex* MDCfetsForex::_internal_mutable_spotforex() {
  
  if (_impl_.spotforex_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SpotForex>(GetArenaForAllocation());
    _impl_.spotforex_ = p;
  }
  return _impl_.spotforex_;
}
inline ::com::htsc::mdc::insight::model::SpotForex* MDCfetsForex::mutable_spotforex() {
  ::com::htsc::mdc::insight::model::SpotForex* _msg = _internal_mutable_spotforex();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.spotForex)
  return _msg;
}
inline void MDCfetsForex::set_allocated_spotforex(::com::htsc::mdc::insight::model::SpotForex* spotforex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spotforex_;
  }
  if (spotforex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spotforex);
    if (message_arena != submessage_arena) {
      spotforex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spotforex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spotforex_ = spotforex;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.spotForex)
}

// .com.htsc.mdc.insight.model.ForwardForex forwardForex = 10;
inline bool MDCfetsForex::_internal_has_forwardforex() const {
  return this != internal_default_instance() && _impl_.forwardforex_ != nullptr;
}
inline bool MDCfetsForex::has_forwardforex() const {
  return _internal_has_forwardforex();
}
inline void MDCfetsForex::clear_forwardforex() {
  if (GetArenaForAllocation() == nullptr && _impl_.forwardforex_ != nullptr) {
    delete _impl_.forwardforex_;
  }
  _impl_.forwardforex_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ForwardForex& MDCfetsForex::_internal_forwardforex() const {
  const ::com::htsc::mdc::insight::model::ForwardForex* p = _impl_.forwardforex_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ForwardForex&>(
      ::com::htsc::mdc::insight::model::_ForwardForex_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ForwardForex& MDCfetsForex::forwardforex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.forwardForex)
  return _internal_forwardforex();
}
inline void MDCfetsForex::unsafe_arena_set_allocated_forwardforex(
    ::com::htsc::mdc::insight::model::ForwardForex* forwardforex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forwardforex_);
  }
  _impl_.forwardforex_ = forwardforex;
  if (forwardforex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.forwardForex)
}
inline ::com::htsc::mdc::insight::model::ForwardForex* MDCfetsForex::release_forwardforex() {
  
  ::com::htsc::mdc::insight::model::ForwardForex* temp = _impl_.forwardforex_;
  _impl_.forwardforex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ForwardForex* MDCfetsForex::unsafe_arena_release_forwardforex() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.forwardForex)
  
  ::com::htsc::mdc::insight::model::ForwardForex* temp = _impl_.forwardforex_;
  _impl_.forwardforex_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ForwardForex* MDCfetsForex::_internal_mutable_forwardforex() {
  
  if (_impl_.forwardforex_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ForwardForex>(GetArenaForAllocation());
    _impl_.forwardforex_ = p;
  }
  return _impl_.forwardforex_;
}
inline ::com::htsc::mdc::insight::model::ForwardForex* MDCfetsForex::mutable_forwardforex() {
  ::com::htsc::mdc::insight::model::ForwardForex* _msg = _internal_mutable_forwardforex();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.forwardForex)
  return _msg;
}
inline void MDCfetsForex::set_allocated_forwardforex(::com::htsc::mdc::insight::model::ForwardForex* forwardforex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forwardforex_;
  }
  if (forwardforex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forwardforex);
    if (message_arena != submessage_arena) {
      forwardforex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forwardforex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forwardforex_ = forwardforex;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.forwardForex)
}

// .com.htsc.mdc.insight.model.NonDeliverableForwardsForex nonDeliverableForwardsForex = 11;
inline bool MDCfetsForex::_internal_has_nondeliverableforwardsforex() const {
  return this != internal_default_instance() && _impl_.nondeliverableforwardsforex_ != nullptr;
}
inline bool MDCfetsForex::has_nondeliverableforwardsforex() const {
  return _internal_has_nondeliverableforwardsforex();
}
inline void MDCfetsForex::clear_nondeliverableforwardsforex() {
  if (GetArenaForAllocation() == nullptr && _impl_.nondeliverableforwardsforex_ != nullptr) {
    delete _impl_.nondeliverableforwardsforex_;
  }
  _impl_.nondeliverableforwardsforex_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex& MDCfetsForex::_internal_nondeliverableforwardsforex() const {
  const ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* p = _impl_.nondeliverableforwardsforex_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex&>(
      ::com::htsc::mdc::insight::model::_NonDeliverableForwardsForex_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex& MDCfetsForex::nondeliverableforwardsforex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.nonDeliverableForwardsForex)
  return _internal_nondeliverableforwardsforex();
}
inline void MDCfetsForex::unsafe_arena_set_allocated_nondeliverableforwardsforex(
    ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* nondeliverableforwardsforex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nondeliverableforwardsforex_);
  }
  _impl_.nondeliverableforwardsforex_ = nondeliverableforwardsforex;
  if (nondeliverableforwardsforex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.nonDeliverableForwardsForex)
}
inline ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* MDCfetsForex::release_nondeliverableforwardsforex() {
  
  ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* temp = _impl_.nondeliverableforwardsforex_;
  _impl_.nondeliverableforwardsforex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* MDCfetsForex::unsafe_arena_release_nondeliverableforwardsforex() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.nonDeliverableForwardsForex)
  
  ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* temp = _impl_.nondeliverableforwardsforex_;
  _impl_.nondeliverableforwardsforex_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* MDCfetsForex::_internal_mutable_nondeliverableforwardsforex() {
  
  if (_impl_.nondeliverableforwardsforex_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::NonDeliverableForwardsForex>(GetArenaForAllocation());
    _impl_.nondeliverableforwardsforex_ = p;
  }
  return _impl_.nondeliverableforwardsforex_;
}
inline ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* MDCfetsForex::mutable_nondeliverableforwardsforex() {
  ::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* _msg = _internal_mutable_nondeliverableforwardsforex();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.nonDeliverableForwardsForex)
  return _msg;
}
inline void MDCfetsForex::set_allocated_nondeliverableforwardsforex(::com::htsc::mdc::insight::model::NonDeliverableForwardsForex* nondeliverableforwardsforex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nondeliverableforwardsforex_;
  }
  if (nondeliverableforwardsforex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nondeliverableforwardsforex);
    if (message_arena != submessage_arena) {
      nondeliverableforwardsforex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nondeliverableforwardsforex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nondeliverableforwardsforex_ = nondeliverableforwardsforex;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.nonDeliverableForwardsForex)
}

// .com.htsc.mdc.insight.model.SwapForex swapForex = 12;
inline bool MDCfetsForex::_internal_has_swapforex() const {
  return this != internal_default_instance() && _impl_.swapforex_ != nullptr;
}
inline bool MDCfetsForex::has_swapforex() const {
  return _internal_has_swapforex();
}
inline void MDCfetsForex::clear_swapforex() {
  if (GetArenaForAllocation() == nullptr && _impl_.swapforex_ != nullptr) {
    delete _impl_.swapforex_;
  }
  _impl_.swapforex_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SwapForex& MDCfetsForex::_internal_swapforex() const {
  const ::com::htsc::mdc::insight::model::SwapForex* p = _impl_.swapforex_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SwapForex&>(
      ::com::htsc::mdc::insight::model::_SwapForex_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SwapForex& MDCfetsForex::swapforex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.swapForex)
  return _internal_swapforex();
}
inline void MDCfetsForex::unsafe_arena_set_allocated_swapforex(
    ::com::htsc::mdc::insight::model::SwapForex* swapforex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swapforex_);
  }
  _impl_.swapforex_ = swapforex;
  if (swapforex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.swapForex)
}
inline ::com::htsc::mdc::insight::model::SwapForex* MDCfetsForex::release_swapforex() {
  
  ::com::htsc::mdc::insight::model::SwapForex* temp = _impl_.swapforex_;
  _impl_.swapforex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwapForex* MDCfetsForex::unsafe_arena_release_swapforex() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.swapForex)
  
  ::com::htsc::mdc::insight::model::SwapForex* temp = _impl_.swapforex_;
  _impl_.swapforex_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SwapForex* MDCfetsForex::_internal_mutable_swapforex() {
  
  if (_impl_.swapforex_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SwapForex>(GetArenaForAllocation());
    _impl_.swapforex_ = p;
  }
  return _impl_.swapforex_;
}
inline ::com::htsc::mdc::insight::model::SwapForex* MDCfetsForex::mutable_swapforex() {
  ::com::htsc::mdc::insight::model::SwapForex* _msg = _internal_mutable_swapforex();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.swapForex)
  return _msg;
}
inline void MDCfetsForex::set_allocated_swapforex(::com::htsc::mdc::insight::model::SwapForex* swapforex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.swapforex_;
  }
  if (swapforex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(swapforex);
    if (message_arena != submessage_arena) {
      swapforex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swapforex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swapforex_ = swapforex;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.swapForex)
}

// .com.htsc.mdc.insight.model.OptionForex optionForex = 13;
inline bool MDCfetsForex::_internal_has_optionforex() const {
  return this != internal_default_instance() && _impl_.optionforex_ != nullptr;
}
inline bool MDCfetsForex::has_optionforex() const {
  return _internal_has_optionforex();
}
inline void MDCfetsForex::clear_optionforex() {
  if (GetArenaForAllocation() == nullptr && _impl_.optionforex_ != nullptr) {
    delete _impl_.optionforex_;
  }
  _impl_.optionforex_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::OptionForex& MDCfetsForex::_internal_optionforex() const {
  const ::com::htsc::mdc::insight::model::OptionForex* p = _impl_.optionforex_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::OptionForex&>(
      ::com::htsc::mdc::insight::model::_OptionForex_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::OptionForex& MDCfetsForex::optionforex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.optionForex)
  return _internal_optionforex();
}
inline void MDCfetsForex::unsafe_arena_set_allocated_optionforex(
    ::com::htsc::mdc::insight::model::OptionForex* optionforex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionforex_);
  }
  _impl_.optionforex_ = optionforex;
  if (optionforex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.optionForex)
}
inline ::com::htsc::mdc::insight::model::OptionForex* MDCfetsForex::release_optionforex() {
  
  ::com::htsc::mdc::insight::model::OptionForex* temp = _impl_.optionforex_;
  _impl_.optionforex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::OptionForex* MDCfetsForex::unsafe_arena_release_optionforex() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.optionForex)
  
  ::com::htsc::mdc::insight::model::OptionForex* temp = _impl_.optionforex_;
  _impl_.optionforex_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::OptionForex* MDCfetsForex::_internal_mutable_optionforex() {
  
  if (_impl_.optionforex_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::OptionForex>(GetArenaForAllocation());
    _impl_.optionforex_ = p;
  }
  return _impl_.optionforex_;
}
inline ::com::htsc::mdc::insight::model::OptionForex* MDCfetsForex::mutable_optionforex() {
  ::com::htsc::mdc::insight::model::OptionForex* _msg = _internal_mutable_optionforex();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.optionForex)
  return _msg;
}
inline void MDCfetsForex::set_allocated_optionforex(::com::htsc::mdc::insight::model::OptionForex* optionforex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optionforex_;
  }
  if (optionforex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionforex);
    if (message_arena != submessage_arena) {
      optionforex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionforex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionforex_ = optionforex;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.optionForex)
}

// .com.htsc.mdc.insight.model.SpotClosePriceForex spotClosePriceForex = 14;
inline bool MDCfetsForex::_internal_has_spotclosepriceforex() const {
  return this != internal_default_instance() && _impl_.spotclosepriceforex_ != nullptr;
}
inline bool MDCfetsForex::has_spotclosepriceforex() const {
  return _internal_has_spotclosepriceforex();
}
inline void MDCfetsForex::clear_spotclosepriceforex() {
  if (GetArenaForAllocation() == nullptr && _impl_.spotclosepriceforex_ != nullptr) {
    delete _impl_.spotclosepriceforex_;
  }
  _impl_.spotclosepriceforex_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SpotClosePriceForex& MDCfetsForex::_internal_spotclosepriceforex() const {
  const ::com::htsc::mdc::insight::model::SpotClosePriceForex* p = _impl_.spotclosepriceforex_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SpotClosePriceForex&>(
      ::com::htsc::mdc::insight::model::_SpotClosePriceForex_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SpotClosePriceForex& MDCfetsForex::spotclosepriceforex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.spotClosePriceForex)
  return _internal_spotclosepriceforex();
}
inline void MDCfetsForex::unsafe_arena_set_allocated_spotclosepriceforex(
    ::com::htsc::mdc::insight::model::SpotClosePriceForex* spotclosepriceforex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spotclosepriceforex_);
  }
  _impl_.spotclosepriceforex_ = spotclosepriceforex;
  if (spotclosepriceforex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.spotClosePriceForex)
}
inline ::com::htsc::mdc::insight::model::SpotClosePriceForex* MDCfetsForex::release_spotclosepriceforex() {
  
  ::com::htsc::mdc::insight::model::SpotClosePriceForex* temp = _impl_.spotclosepriceforex_;
  _impl_.spotclosepriceforex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SpotClosePriceForex* MDCfetsForex::unsafe_arena_release_spotclosepriceforex() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.spotClosePriceForex)
  
  ::com::htsc::mdc::insight::model::SpotClosePriceForex* temp = _impl_.spotclosepriceforex_;
  _impl_.spotclosepriceforex_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SpotClosePriceForex* MDCfetsForex::_internal_mutable_spotclosepriceforex() {
  
  if (_impl_.spotclosepriceforex_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SpotClosePriceForex>(GetArenaForAllocation());
    _impl_.spotclosepriceforex_ = p;
  }
  return _impl_.spotclosepriceforex_;
}
inline ::com::htsc::mdc::insight::model::SpotClosePriceForex* MDCfetsForex::mutable_spotclosepriceforex() {
  ::com::htsc::mdc::insight::model::SpotClosePriceForex* _msg = _internal_mutable_spotclosepriceforex();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.spotClosePriceForex)
  return _msg;
}
inline void MDCfetsForex::set_allocated_spotclosepriceforex(::com::htsc::mdc::insight::model::SpotClosePriceForex* spotclosepriceforex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spotclosepriceforex_;
  }
  if (spotclosepriceforex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spotclosepriceforex);
    if (message_arena != submessage_arena) {
      spotclosepriceforex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spotclosepriceforex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spotclosepriceforex_ = spotclosepriceforex;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.spotClosePriceForex)
}

// int32 DataMultiplePowerOf10 = 15;
inline void MDCfetsForex::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDCfetsForex::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDCfetsForex::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDCfetsForex::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDCfetsForex::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.DataMultiplePowerOf10)
}

// string TransactTime = 16;
inline void MDCfetsForex::clear_transacttime() {
  _impl_.transacttime_.ClearToEmpty();
}
inline const std::string& MDCfetsForex::transacttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsForex.TransactTime)
  return _internal_transacttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsForex::set_transacttime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transacttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsForex.TransactTime)
}
inline std::string* MDCfetsForex::mutable_transacttime() {
  std::string* _s = _internal_mutable_transacttime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsForex.TransactTime)
  return _s;
}
inline const std::string& MDCfetsForex::_internal_transacttime() const {
  return _impl_.transacttime_.Get();
}
inline void MDCfetsForex::_internal_set_transacttime(const std::string& value) {
  
  _impl_.transacttime_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsForex::_internal_mutable_transacttime() {
  
  return _impl_.transacttime_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsForex::release_transacttime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsForex.TransactTime)
  return _impl_.transacttime_.Release();
}
inline void MDCfetsForex::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    
  } else {
    
  }
  _impl_.transacttime_.SetAllocated(transacttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transacttime_.IsDefault()) {
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsForex.TransactTime)
}

// -------------------------------------------------------------------

// SpotForex

// string ValueDate = 1;
inline void SpotForex::clear_valuedate() {
  _impl_.valuedate_.ClearToEmpty();
}
inline const std::string& SpotForex::valuedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.ValueDate)
  return _internal_valuedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotForex::set_valuedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.valuedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.ValueDate)
}
inline std::string* SpotForex::mutable_valuedate() {
  std::string* _s = _internal_mutable_valuedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotForex.ValueDate)
  return _s;
}
inline const std::string& SpotForex::_internal_valuedate() const {
  return _impl_.valuedate_.Get();
}
inline void SpotForex::_internal_set_valuedate(const std::string& value) {
  
  _impl_.valuedate_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotForex::_internal_mutable_valuedate() {
  
  return _impl_.valuedate_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotForex::release_valuedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotForex.ValueDate)
  return _impl_.valuedate_.Release();
}
inline void SpotForex::set_allocated_valuedate(std::string* valuedate) {
  if (valuedate != nullptr) {
    
  } else {
    
  }
  _impl_.valuedate_.SetAllocated(valuedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.valuedate_.IsDefault()) {
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotForex.ValueDate)
}

// int64 NetBasisChange = 2;
inline void SpotForex::clear_netbasischange() {
  _impl_.netbasischange_ = int64_t{0};
}
inline int64_t SpotForex::_internal_netbasischange() const {
  return _impl_.netbasischange_;
}
inline int64_t SpotForex::netbasischange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.NetBasisChange)
  return _internal_netbasischange();
}
inline void SpotForex::_internal_set_netbasischange(int64_t value) {
  
  _impl_.netbasischange_ = value;
}
inline void SpotForex::set_netbasischange(int64_t value) {
  _internal_set_netbasischange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.NetBasisChange)
}

// int64 PercentageChange = 3;
inline void SpotForex::clear_percentagechange() {
  _impl_.percentagechange_ = int64_t{0};
}
inline int64_t SpotForex::_internal_percentagechange() const {
  return _impl_.percentagechange_;
}
inline int64_t SpotForex::percentagechange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.PercentageChange)
  return _internal_percentagechange();
}
inline void SpotForex::_internal_set_percentagechange(int64_t value) {
  
  _impl_.percentagechange_ = value;
}
inline void SpotForex::set_percentagechange(int64_t value) {
  _internal_set_percentagechange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.PercentageChange)
}

// string BuyDate = 4;
inline void SpotForex::clear_buydate() {
  _impl_.buydate_.ClearToEmpty();
}
inline const std::string& SpotForex::buydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.BuyDate)
  return _internal_buydate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotForex::set_buydate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buydate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.BuyDate)
}
inline std::string* SpotForex::mutable_buydate() {
  std::string* _s = _internal_mutable_buydate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotForex.BuyDate)
  return _s;
}
inline const std::string& SpotForex::_internal_buydate() const {
  return _impl_.buydate_.Get();
}
inline void SpotForex::_internal_set_buydate(const std::string& value) {
  
  _impl_.buydate_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotForex::_internal_mutable_buydate() {
  
  return _impl_.buydate_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotForex::release_buydate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotForex.BuyDate)
  return _impl_.buydate_.Release();
}
inline void SpotForex::set_allocated_buydate(std::string* buydate) {
  if (buydate != nullptr) {
    
  } else {
    
  }
  _impl_.buydate_.SetAllocated(buydate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buydate_.IsDefault()) {
    _impl_.buydate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotForex.BuyDate)
}

// string BuyTime = 5;
inline void SpotForex::clear_buytime() {
  _impl_.buytime_.ClearToEmpty();
}
inline const std::string& SpotForex::buytime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.BuyTime)
  return _internal_buytime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotForex::set_buytime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buytime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.BuyTime)
}
inline std::string* SpotForex::mutable_buytime() {
  std::string* _s = _internal_mutable_buytime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotForex.BuyTime)
  return _s;
}
inline const std::string& SpotForex::_internal_buytime() const {
  return _impl_.buytime_.Get();
}
inline void SpotForex::_internal_set_buytime(const std::string& value) {
  
  _impl_.buytime_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotForex::_internal_mutable_buytime() {
  
  return _impl_.buytime_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotForex::release_buytime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotForex.BuyTime)
  return _impl_.buytime_.Release();
}
inline void SpotForex::set_allocated_buytime(std::string* buytime) {
  if (buytime != nullptr) {
    
  } else {
    
  }
  _impl_.buytime_.SetAllocated(buytime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buytime_.IsDefault()) {
    _impl_.buytime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotForex.BuyTime)
}

// string SellDate = 6;
inline void SpotForex::clear_selldate() {
  _impl_.selldate_.ClearToEmpty();
}
inline const std::string& SpotForex::selldate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.SellDate)
  return _internal_selldate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotForex::set_selldate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selldate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.SellDate)
}
inline std::string* SpotForex::mutable_selldate() {
  std::string* _s = _internal_mutable_selldate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotForex.SellDate)
  return _s;
}
inline const std::string& SpotForex::_internal_selldate() const {
  return _impl_.selldate_.Get();
}
inline void SpotForex::_internal_set_selldate(const std::string& value) {
  
  _impl_.selldate_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotForex::_internal_mutable_selldate() {
  
  return _impl_.selldate_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotForex::release_selldate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotForex.SellDate)
  return _impl_.selldate_.Release();
}
inline void SpotForex::set_allocated_selldate(std::string* selldate) {
  if (selldate != nullptr) {
    
  } else {
    
  }
  _impl_.selldate_.SetAllocated(selldate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selldate_.IsDefault()) {
    _impl_.selldate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotForex.SellDate)
}

// string SellTime = 7;
inline void SpotForex::clear_selltime() {
  _impl_.selltime_.ClearToEmpty();
}
inline const std::string& SpotForex::selltime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.SellTime)
  return _internal_selltime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotForex::set_selltime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selltime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.SellTime)
}
inline std::string* SpotForex::mutable_selltime() {
  std::string* _s = _internal_mutable_selltime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotForex.SellTime)
  return _s;
}
inline const std::string& SpotForex::_internal_selltime() const {
  return _impl_.selltime_.Get();
}
inline void SpotForex::_internal_set_selltime(const std::string& value) {
  
  _impl_.selltime_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotForex::_internal_mutable_selltime() {
  
  return _impl_.selltime_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotForex::release_selltime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotForex.SellTime)
  return _impl_.selltime_.Release();
}
inline void SpotForex::set_allocated_selltime(std::string* selltime) {
  if (selltime != nullptr) {
    
  } else {
    
  }
  _impl_.selltime_.SetAllocated(selltime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selltime_.IsDefault()) {
    _impl_.selltime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotForex.SellTime)
}

// int64 LastBuyRate = 8;
inline void SpotForex::clear_lastbuyrate() {
  _impl_.lastbuyrate_ = int64_t{0};
}
inline int64_t SpotForex::_internal_lastbuyrate() const {
  return _impl_.lastbuyrate_;
}
inline int64_t SpotForex::lastbuyrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.LastBuyRate)
  return _internal_lastbuyrate();
}
inline void SpotForex::_internal_set_lastbuyrate(int64_t value) {
  
  _impl_.lastbuyrate_ = value;
}
inline void SpotForex::set_lastbuyrate(int64_t value) {
  _internal_set_lastbuyrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.LastBuyRate)
}

// int64 LastSellRate = 9;
inline void SpotForex::clear_lastsellrate() {
  _impl_.lastsellrate_ = int64_t{0};
}
inline int64_t SpotForex::_internal_lastsellrate() const {
  return _impl_.lastsellrate_;
}
inline int64_t SpotForex::lastsellrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.LastSellRate)
  return _internal_lastsellrate();
}
inline void SpotForex::_internal_set_lastsellrate(int64_t value) {
  
  _impl_.lastsellrate_ = value;
}
inline void SpotForex::set_lastsellrate(int64_t value) {
  _internal_set_lastsellrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.LastSellRate)
}

// int64 LastBuyAllin = 10;
inline void SpotForex::clear_lastbuyallin() {
  _impl_.lastbuyallin_ = int64_t{0};
}
inline int64_t SpotForex::_internal_lastbuyallin() const {
  return _impl_.lastbuyallin_;
}
inline int64_t SpotForex::lastbuyallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.LastBuyAllin)
  return _internal_lastbuyallin();
}
inline void SpotForex::_internal_set_lastbuyallin(int64_t value) {
  
  _impl_.lastbuyallin_ = value;
}
inline void SpotForex::set_lastbuyallin(int64_t value) {
  _internal_set_lastbuyallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.LastBuyAllin)
}

// int64 LastSellAllin = 11;
inline void SpotForex::clear_lastsellallin() {
  _impl_.lastsellallin_ = int64_t{0};
}
inline int64_t SpotForex::_internal_lastsellallin() const {
  return _impl_.lastsellallin_;
}
inline int64_t SpotForex::lastsellallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.LastSellAllin)
  return _internal_lastsellallin();
}
inline void SpotForex::_internal_set_lastsellallin(int64_t value) {
  
  _impl_.lastsellallin_ = value;
}
inline void SpotForex::set_lastsellallin(int64_t value) {
  _internal_set_lastsellallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.LastSellAllin)
}

// int64 HighRate = 12;
inline void SpotForex::clear_highrate() {
  _impl_.highrate_ = int64_t{0};
}
inline int64_t SpotForex::_internal_highrate() const {
  return _impl_.highrate_;
}
inline int64_t SpotForex::highrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.HighRate)
  return _internal_highrate();
}
inline void SpotForex::_internal_set_highrate(int64_t value) {
  
  _impl_.highrate_ = value;
}
inline void SpotForex::set_highrate(int64_t value) {
  _internal_set_highrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.HighRate)
}

// int64 LowRate = 13;
inline void SpotForex::clear_lowrate() {
  _impl_.lowrate_ = int64_t{0};
}
inline int64_t SpotForex::_internal_lowrate() const {
  return _impl_.lowrate_;
}
inline int64_t SpotForex::lowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.LowRate)
  return _internal_lowrate();
}
inline void SpotForex::_internal_set_lowrate(int64_t value) {
  
  _impl_.lowrate_ = value;
}
inline void SpotForex::set_lowrate(int64_t value) {
  _internal_set_lowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.LowRate)
}

// int64 OpenRate = 14;
inline void SpotForex::clear_openrate() {
  _impl_.openrate_ = int64_t{0};
}
inline int64_t SpotForex::_internal_openrate() const {
  return _impl_.openrate_;
}
inline int64_t SpotForex::openrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.OpenRate)
  return _internal_openrate();
}
inline void SpotForex::_internal_set_openrate(int64_t value) {
  
  _impl_.openrate_ = value;
}
inline void SpotForex::set_openrate(int64_t value) {
  _internal_set_openrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.OpenRate)
}

// int64 HistoryCloseRate = 15;
inline void SpotForex::clear_historycloserate() {
  _impl_.historycloserate_ = int64_t{0};
}
inline int64_t SpotForex::_internal_historycloserate() const {
  return _impl_.historycloserate_;
}
inline int64_t SpotForex::historycloserate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.HistoryCloseRate)
  return _internal_historycloserate();
}
inline void SpotForex::_internal_set_historycloserate(int64_t value) {
  
  _impl_.historycloserate_ = value;
}
inline void SpotForex::set_historycloserate(int64_t value) {
  _internal_set_historycloserate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.HistoryCloseRate)
}

// int64 CloseRate = 16;
inline void SpotForex::clear_closerate() {
  _impl_.closerate_ = int64_t{0};
}
inline int64_t SpotForex::_internal_closerate() const {
  return _impl_.closerate_;
}
inline int64_t SpotForex::closerate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.CloseRate)
  return _internal_closerate();
}
inline void SpotForex::_internal_set_closerate(int64_t value) {
  
  _impl_.closerate_ = value;
}
inline void SpotForex::set_closerate(int64_t value) {
  _internal_set_closerate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.CloseRate)
}

// int32 AmountLevelRate = 17;
inline void SpotForex::clear_amountlevelrate() {
  _impl_.amountlevelrate_ = 0;
}
inline int32_t SpotForex::_internal_amountlevelrate() const {
  return _impl_.amountlevelrate_;
}
inline int32_t SpotForex::amountlevelrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.AmountLevelRate)
  return _internal_amountlevelrate();
}
inline void SpotForex::_internal_set_amountlevelrate(int32_t value) {
  
  _impl_.amountlevelrate_ = value;
}
inline void SpotForex::set_amountlevelrate(int32_t value) {
  _internal_set_amountlevelrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.AmountLevelRate)
}

// int32 AmountLevelAllin = 18;
inline void SpotForex::clear_amountlevelallin() {
  _impl_.amountlevelallin_ = 0;
}
inline int32_t SpotForex::_internal_amountlevelallin() const {
  return _impl_.amountlevelallin_;
}
inline int32_t SpotForex::amountlevelallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.AmountLevelAllin)
  return _internal_amountlevelallin();
}
inline void SpotForex::_internal_set_amountlevelallin(int32_t value) {
  
  _impl_.amountlevelallin_ = value;
}
inline void SpotForex::set_amountlevelallin(int32_t value) {
  _internal_set_amountlevelallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.AmountLevelAllin)
}

// int32 RateSide = 19;
inline void SpotForex::clear_rateside() {
  _impl_.rateside_ = 0;
}
inline int32_t SpotForex::_internal_rateside() const {
  return _impl_.rateside_;
}
inline int32_t SpotForex::rateside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.RateSide)
  return _internal_rateside();
}
inline void SpotForex::_internal_set_rateside(int32_t value) {
  
  _impl_.rateside_ = value;
}
inline void SpotForex::set_rateside(int32_t value) {
  _internal_set_rateside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.RateSide)
}

// int32 AllinSide = 20;
inline void SpotForex::clear_allinside() {
  _impl_.allinside_ = 0;
}
inline int32_t SpotForex::_internal_allinside() const {
  return _impl_.allinside_;
}
inline int32_t SpotForex::allinside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotForex.AllinSide)
  return _internal_allinside();
}
inline void SpotForex::_internal_set_allinside(int32_t value) {
  
  _impl_.allinside_ = value;
}
inline void SpotForex::set_allinside(int32_t value) {
  _internal_set_allinside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotForex.AllinSide)
}

// -------------------------------------------------------------------

// ForwardForex

// string ValueDate = 1;
inline void ForwardForex::clear_valuedate() {
  _impl_.valuedate_.ClearToEmpty();
}
inline const std::string& ForwardForex::valuedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.ValueDate)
  return _internal_valuedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardForex::set_valuedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.valuedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.ValueDate)
}
inline std::string* ForwardForex::mutable_valuedate() {
  std::string* _s = _internal_mutable_valuedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ForwardForex.ValueDate)
  return _s;
}
inline const std::string& ForwardForex::_internal_valuedate() const {
  return _impl_.valuedate_.Get();
}
inline void ForwardForex::_internal_set_valuedate(const std::string& value) {
  
  _impl_.valuedate_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardForex::_internal_mutable_valuedate() {
  
  return _impl_.valuedate_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardForex::release_valuedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ForwardForex.ValueDate)
  return _impl_.valuedate_.Release();
}
inline void ForwardForex::set_allocated_valuedate(std::string* valuedate) {
  if (valuedate != nullptr) {
    
  } else {
    
  }
  _impl_.valuedate_.SetAllocated(valuedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.valuedate_.IsDefault()) {
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ForwardForex.ValueDate)
}

// int64 NetBasisChange = 2;
inline void ForwardForex::clear_netbasischange() {
  _impl_.netbasischange_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_netbasischange() const {
  return _impl_.netbasischange_;
}
inline int64_t ForwardForex::netbasischange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.NetBasisChange)
  return _internal_netbasischange();
}
inline void ForwardForex::_internal_set_netbasischange(int64_t value) {
  
  _impl_.netbasischange_ = value;
}
inline void ForwardForex::set_netbasischange(int64_t value) {
  _internal_set_netbasischange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.NetBasisChange)
}

// int64 PercentageChange = 3;
inline void ForwardForex::clear_percentagechange() {
  _impl_.percentagechange_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_percentagechange() const {
  return _impl_.percentagechange_;
}
inline int64_t ForwardForex::percentagechange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.PercentageChange)
  return _internal_percentagechange();
}
inline void ForwardForex::_internal_set_percentagechange(int64_t value) {
  
  _impl_.percentagechange_ = value;
}
inline void ForwardForex::set_percentagechange(int64_t value) {
  _internal_set_percentagechange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.PercentageChange)
}

// string BuyDate = 4;
inline void ForwardForex::clear_buydate() {
  _impl_.buydate_.ClearToEmpty();
}
inline const std::string& ForwardForex::buydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.BuyDate)
  return _internal_buydate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardForex::set_buydate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buydate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.BuyDate)
}
inline std::string* ForwardForex::mutable_buydate() {
  std::string* _s = _internal_mutable_buydate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ForwardForex.BuyDate)
  return _s;
}
inline const std::string& ForwardForex::_internal_buydate() const {
  return _impl_.buydate_.Get();
}
inline void ForwardForex::_internal_set_buydate(const std::string& value) {
  
  _impl_.buydate_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardForex::_internal_mutable_buydate() {
  
  return _impl_.buydate_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardForex::release_buydate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ForwardForex.BuyDate)
  return _impl_.buydate_.Release();
}
inline void ForwardForex::set_allocated_buydate(std::string* buydate) {
  if (buydate != nullptr) {
    
  } else {
    
  }
  _impl_.buydate_.SetAllocated(buydate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buydate_.IsDefault()) {
    _impl_.buydate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ForwardForex.BuyDate)
}

// string BuyTime = 5;
inline void ForwardForex::clear_buytime() {
  _impl_.buytime_.ClearToEmpty();
}
inline const std::string& ForwardForex::buytime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.BuyTime)
  return _internal_buytime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardForex::set_buytime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buytime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.BuyTime)
}
inline std::string* ForwardForex::mutable_buytime() {
  std::string* _s = _internal_mutable_buytime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ForwardForex.BuyTime)
  return _s;
}
inline const std::string& ForwardForex::_internal_buytime() const {
  return _impl_.buytime_.Get();
}
inline void ForwardForex::_internal_set_buytime(const std::string& value) {
  
  _impl_.buytime_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardForex::_internal_mutable_buytime() {
  
  return _impl_.buytime_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardForex::release_buytime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ForwardForex.BuyTime)
  return _impl_.buytime_.Release();
}
inline void ForwardForex::set_allocated_buytime(std::string* buytime) {
  if (buytime != nullptr) {
    
  } else {
    
  }
  _impl_.buytime_.SetAllocated(buytime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buytime_.IsDefault()) {
    _impl_.buytime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ForwardForex.BuyTime)
}

// string SellDate = 6;
inline void ForwardForex::clear_selldate() {
  _impl_.selldate_.ClearToEmpty();
}
inline const std::string& ForwardForex::selldate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.SellDate)
  return _internal_selldate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardForex::set_selldate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selldate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.SellDate)
}
inline std::string* ForwardForex::mutable_selldate() {
  std::string* _s = _internal_mutable_selldate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ForwardForex.SellDate)
  return _s;
}
inline const std::string& ForwardForex::_internal_selldate() const {
  return _impl_.selldate_.Get();
}
inline void ForwardForex::_internal_set_selldate(const std::string& value) {
  
  _impl_.selldate_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardForex::_internal_mutable_selldate() {
  
  return _impl_.selldate_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardForex::release_selldate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ForwardForex.SellDate)
  return _impl_.selldate_.Release();
}
inline void ForwardForex::set_allocated_selldate(std::string* selldate) {
  if (selldate != nullptr) {
    
  } else {
    
  }
  _impl_.selldate_.SetAllocated(selldate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selldate_.IsDefault()) {
    _impl_.selldate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ForwardForex.SellDate)
}

// string SellTime = 7;
inline void ForwardForex::clear_selltime() {
  _impl_.selltime_.ClearToEmpty();
}
inline const std::string& ForwardForex::selltime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.SellTime)
  return _internal_selltime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ForwardForex::set_selltime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selltime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.SellTime)
}
inline std::string* ForwardForex::mutable_selltime() {
  std::string* _s = _internal_mutable_selltime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ForwardForex.SellTime)
  return _s;
}
inline const std::string& ForwardForex::_internal_selltime() const {
  return _impl_.selltime_.Get();
}
inline void ForwardForex::_internal_set_selltime(const std::string& value) {
  
  _impl_.selltime_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardForex::_internal_mutable_selltime() {
  
  return _impl_.selltime_.Mutable(GetArenaForAllocation());
}
inline std::string* ForwardForex::release_selltime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ForwardForex.SellTime)
  return _impl_.selltime_.Release();
}
inline void ForwardForex::set_allocated_selltime(std::string* selltime) {
  if (selltime != nullptr) {
    
  } else {
    
  }
  _impl_.selltime_.SetAllocated(selltime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selltime_.IsDefault()) {
    _impl_.selltime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ForwardForex.SellTime)
}

// int64 LastBuyRate = 8;
inline void ForwardForex::clear_lastbuyrate() {
  _impl_.lastbuyrate_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_lastbuyrate() const {
  return _impl_.lastbuyrate_;
}
inline int64_t ForwardForex::lastbuyrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.LastBuyRate)
  return _internal_lastbuyrate();
}
inline void ForwardForex::_internal_set_lastbuyrate(int64_t value) {
  
  _impl_.lastbuyrate_ = value;
}
inline void ForwardForex::set_lastbuyrate(int64_t value) {
  _internal_set_lastbuyrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.LastBuyRate)
}

// int64 LastSellRate = 9;
inline void ForwardForex::clear_lastsellrate() {
  _impl_.lastsellrate_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_lastsellrate() const {
  return _impl_.lastsellrate_;
}
inline int64_t ForwardForex::lastsellrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.LastSellRate)
  return _internal_lastsellrate();
}
inline void ForwardForex::_internal_set_lastsellrate(int64_t value) {
  
  _impl_.lastsellrate_ = value;
}
inline void ForwardForex::set_lastsellrate(int64_t value) {
  _internal_set_lastsellrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.LastSellRate)
}

// int64 LastBuyAllin = 10;
inline void ForwardForex::clear_lastbuyallin() {
  _impl_.lastbuyallin_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_lastbuyallin() const {
  return _impl_.lastbuyallin_;
}
inline int64_t ForwardForex::lastbuyallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.LastBuyAllin)
  return _internal_lastbuyallin();
}
inline void ForwardForex::_internal_set_lastbuyallin(int64_t value) {
  
  _impl_.lastbuyallin_ = value;
}
inline void ForwardForex::set_lastbuyallin(int64_t value) {
  _internal_set_lastbuyallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.LastBuyAllin)
}

// int64 LastSellAllin = 11;
inline void ForwardForex::clear_lastsellallin() {
  _impl_.lastsellallin_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_lastsellallin() const {
  return _impl_.lastsellallin_;
}
inline int64_t ForwardForex::lastsellallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.LastSellAllin)
  return _internal_lastsellallin();
}
inline void ForwardForex::_internal_set_lastsellallin(int64_t value) {
  
  _impl_.lastsellallin_ = value;
}
inline void ForwardForex::set_lastsellallin(int64_t value) {
  _internal_set_lastsellallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.LastSellAllin)
}

// int64 HighRate = 12;
inline void ForwardForex::clear_highrate() {
  _impl_.highrate_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_highrate() const {
  return _impl_.highrate_;
}
inline int64_t ForwardForex::highrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.HighRate)
  return _internal_highrate();
}
inline void ForwardForex::_internal_set_highrate(int64_t value) {
  
  _impl_.highrate_ = value;
}
inline void ForwardForex::set_highrate(int64_t value) {
  _internal_set_highrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.HighRate)
}

// int64 LowRate = 13;
inline void ForwardForex::clear_lowrate() {
  _impl_.lowrate_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_lowrate() const {
  return _impl_.lowrate_;
}
inline int64_t ForwardForex::lowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.LowRate)
  return _internal_lowrate();
}
inline void ForwardForex::_internal_set_lowrate(int64_t value) {
  
  _impl_.lowrate_ = value;
}
inline void ForwardForex::set_lowrate(int64_t value) {
  _internal_set_lowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.LowRate)
}

// int64 OpenRate = 14;
inline void ForwardForex::clear_openrate() {
  _impl_.openrate_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_openrate() const {
  return _impl_.openrate_;
}
inline int64_t ForwardForex::openrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.OpenRate)
  return _internal_openrate();
}
inline void ForwardForex::_internal_set_openrate(int64_t value) {
  
  _impl_.openrate_ = value;
}
inline void ForwardForex::set_openrate(int64_t value) {
  _internal_set_openrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.OpenRate)
}

// int64 HistoryCloseRate = 15;
inline void ForwardForex::clear_historycloserate() {
  _impl_.historycloserate_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_historycloserate() const {
  return _impl_.historycloserate_;
}
inline int64_t ForwardForex::historycloserate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.HistoryCloseRate)
  return _internal_historycloserate();
}
inline void ForwardForex::_internal_set_historycloserate(int64_t value) {
  
  _impl_.historycloserate_ = value;
}
inline void ForwardForex::set_historycloserate(int64_t value) {
  _internal_set_historycloserate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.HistoryCloseRate)
}

// int64 CloseRate = 16;
inline void ForwardForex::clear_closerate() {
  _impl_.closerate_ = int64_t{0};
}
inline int64_t ForwardForex::_internal_closerate() const {
  return _impl_.closerate_;
}
inline int64_t ForwardForex::closerate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.CloseRate)
  return _internal_closerate();
}
inline void ForwardForex::_internal_set_closerate(int64_t value) {
  
  _impl_.closerate_ = value;
}
inline void ForwardForex::set_closerate(int64_t value) {
  _internal_set_closerate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.CloseRate)
}

// int32 AmountLevelRate = 17;
inline void ForwardForex::clear_amountlevelrate() {
  _impl_.amountlevelrate_ = 0;
}
inline int32_t ForwardForex::_internal_amountlevelrate() const {
  return _impl_.amountlevelrate_;
}
inline int32_t ForwardForex::amountlevelrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.AmountLevelRate)
  return _internal_amountlevelrate();
}
inline void ForwardForex::_internal_set_amountlevelrate(int32_t value) {
  
  _impl_.amountlevelrate_ = value;
}
inline void ForwardForex::set_amountlevelrate(int32_t value) {
  _internal_set_amountlevelrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.AmountLevelRate)
}

// int32 AmountLevelAllin = 18;
inline void ForwardForex::clear_amountlevelallin() {
  _impl_.amountlevelallin_ = 0;
}
inline int32_t ForwardForex::_internal_amountlevelallin() const {
  return _impl_.amountlevelallin_;
}
inline int32_t ForwardForex::amountlevelallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.AmountLevelAllin)
  return _internal_amountlevelallin();
}
inline void ForwardForex::_internal_set_amountlevelallin(int32_t value) {
  
  _impl_.amountlevelallin_ = value;
}
inline void ForwardForex::set_amountlevelallin(int32_t value) {
  _internal_set_amountlevelallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.AmountLevelAllin)
}

// int32 RateSide = 19;
inline void ForwardForex::clear_rateside() {
  _impl_.rateside_ = 0;
}
inline int32_t ForwardForex::_internal_rateside() const {
  return _impl_.rateside_;
}
inline int32_t ForwardForex::rateside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.RateSide)
  return _internal_rateside();
}
inline void ForwardForex::_internal_set_rateside(int32_t value) {
  
  _impl_.rateside_ = value;
}
inline void ForwardForex::set_rateside(int32_t value) {
  _internal_set_rateside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.RateSide)
}

// int32 AllinSide = 20;
inline void ForwardForex::clear_allinside() {
  _impl_.allinside_ = 0;
}
inline int32_t ForwardForex::_internal_allinside() const {
  return _impl_.allinside_;
}
inline int32_t ForwardForex::allinside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ForwardForex.AllinSide)
  return _internal_allinside();
}
inline void ForwardForex::_internal_set_allinside(int32_t value) {
  
  _impl_.allinside_ = value;
}
inline void ForwardForex::set_allinside(int32_t value) {
  _internal_set_allinside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ForwardForex.AllinSide)
}

// -------------------------------------------------------------------

// NonDeliverableForwardsForex

// string ValueDate = 1;
inline void NonDeliverableForwardsForex::clear_valuedate() {
  _impl_.valuedate_.ClearToEmpty();
}
inline const std::string& NonDeliverableForwardsForex::valuedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.ValueDate)
  return _internal_valuedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonDeliverableForwardsForex::set_valuedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.valuedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.ValueDate)
}
inline std::string* NonDeliverableForwardsForex::mutable_valuedate() {
  std::string* _s = _internal_mutable_valuedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.ValueDate)
  return _s;
}
inline const std::string& NonDeliverableForwardsForex::_internal_valuedate() const {
  return _impl_.valuedate_.Get();
}
inline void NonDeliverableForwardsForex::_internal_set_valuedate(const std::string& value) {
  
  _impl_.valuedate_.Set(value, GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::_internal_mutable_valuedate() {
  
  return _impl_.valuedate_.Mutable(GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::release_valuedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.ValueDate)
  return _impl_.valuedate_.Release();
}
inline void NonDeliverableForwardsForex::set_allocated_valuedate(std::string* valuedate) {
  if (valuedate != nullptr) {
    
  } else {
    
  }
  _impl_.valuedate_.SetAllocated(valuedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.valuedate_.IsDefault()) {
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.ValueDate)
}

// int64 NetBasisChange = 2;
inline void NonDeliverableForwardsForex::clear_netbasischange() {
  _impl_.netbasischange_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_netbasischange() const {
  return _impl_.netbasischange_;
}
inline int64_t NonDeliverableForwardsForex::netbasischange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.NetBasisChange)
  return _internal_netbasischange();
}
inline void NonDeliverableForwardsForex::_internal_set_netbasischange(int64_t value) {
  
  _impl_.netbasischange_ = value;
}
inline void NonDeliverableForwardsForex::set_netbasischange(int64_t value) {
  _internal_set_netbasischange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.NetBasisChange)
}

// int64 PercentageChange = 3;
inline void NonDeliverableForwardsForex::clear_percentagechange() {
  _impl_.percentagechange_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_percentagechange() const {
  return _impl_.percentagechange_;
}
inline int64_t NonDeliverableForwardsForex::percentagechange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.PercentageChange)
  return _internal_percentagechange();
}
inline void NonDeliverableForwardsForex::_internal_set_percentagechange(int64_t value) {
  
  _impl_.percentagechange_ = value;
}
inline void NonDeliverableForwardsForex::set_percentagechange(int64_t value) {
  _internal_set_percentagechange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.PercentageChange)
}

// string BuyDate = 4;
inline void NonDeliverableForwardsForex::clear_buydate() {
  _impl_.buydate_.ClearToEmpty();
}
inline const std::string& NonDeliverableForwardsForex::buydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyDate)
  return _internal_buydate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonDeliverableForwardsForex::set_buydate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buydate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyDate)
}
inline std::string* NonDeliverableForwardsForex::mutable_buydate() {
  std::string* _s = _internal_mutable_buydate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyDate)
  return _s;
}
inline const std::string& NonDeliverableForwardsForex::_internal_buydate() const {
  return _impl_.buydate_.Get();
}
inline void NonDeliverableForwardsForex::_internal_set_buydate(const std::string& value) {
  
  _impl_.buydate_.Set(value, GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::_internal_mutable_buydate() {
  
  return _impl_.buydate_.Mutable(GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::release_buydate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyDate)
  return _impl_.buydate_.Release();
}
inline void NonDeliverableForwardsForex::set_allocated_buydate(std::string* buydate) {
  if (buydate != nullptr) {
    
  } else {
    
  }
  _impl_.buydate_.SetAllocated(buydate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buydate_.IsDefault()) {
    _impl_.buydate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyDate)
}

// string BuyTime = 5;
inline void NonDeliverableForwardsForex::clear_buytime() {
  _impl_.buytime_.ClearToEmpty();
}
inline const std::string& NonDeliverableForwardsForex::buytime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyTime)
  return _internal_buytime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonDeliverableForwardsForex::set_buytime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buytime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyTime)
}
inline std::string* NonDeliverableForwardsForex::mutable_buytime() {
  std::string* _s = _internal_mutable_buytime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyTime)
  return _s;
}
inline const std::string& NonDeliverableForwardsForex::_internal_buytime() const {
  return _impl_.buytime_.Get();
}
inline void NonDeliverableForwardsForex::_internal_set_buytime(const std::string& value) {
  
  _impl_.buytime_.Set(value, GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::_internal_mutable_buytime() {
  
  return _impl_.buytime_.Mutable(GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::release_buytime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyTime)
  return _impl_.buytime_.Release();
}
inline void NonDeliverableForwardsForex::set_allocated_buytime(std::string* buytime) {
  if (buytime != nullptr) {
    
  } else {
    
  }
  _impl_.buytime_.SetAllocated(buytime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buytime_.IsDefault()) {
    _impl_.buytime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.BuyTime)
}

// string SellDate = 6;
inline void NonDeliverableForwardsForex::clear_selldate() {
  _impl_.selldate_.ClearToEmpty();
}
inline const std::string& NonDeliverableForwardsForex::selldate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellDate)
  return _internal_selldate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonDeliverableForwardsForex::set_selldate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selldate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellDate)
}
inline std::string* NonDeliverableForwardsForex::mutable_selldate() {
  std::string* _s = _internal_mutable_selldate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellDate)
  return _s;
}
inline const std::string& NonDeliverableForwardsForex::_internal_selldate() const {
  return _impl_.selldate_.Get();
}
inline void NonDeliverableForwardsForex::_internal_set_selldate(const std::string& value) {
  
  _impl_.selldate_.Set(value, GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::_internal_mutable_selldate() {
  
  return _impl_.selldate_.Mutable(GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::release_selldate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellDate)
  return _impl_.selldate_.Release();
}
inline void NonDeliverableForwardsForex::set_allocated_selldate(std::string* selldate) {
  if (selldate != nullptr) {
    
  } else {
    
  }
  _impl_.selldate_.SetAllocated(selldate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selldate_.IsDefault()) {
    _impl_.selldate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellDate)
}

// string SellTime = 7;
inline void NonDeliverableForwardsForex::clear_selltime() {
  _impl_.selltime_.ClearToEmpty();
}
inline const std::string& NonDeliverableForwardsForex::selltime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellTime)
  return _internal_selltime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonDeliverableForwardsForex::set_selltime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selltime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellTime)
}
inline std::string* NonDeliverableForwardsForex::mutable_selltime() {
  std::string* _s = _internal_mutable_selltime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellTime)
  return _s;
}
inline const std::string& NonDeliverableForwardsForex::_internal_selltime() const {
  return _impl_.selltime_.Get();
}
inline void NonDeliverableForwardsForex::_internal_set_selltime(const std::string& value) {
  
  _impl_.selltime_.Set(value, GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::_internal_mutable_selltime() {
  
  return _impl_.selltime_.Mutable(GetArenaForAllocation());
}
inline std::string* NonDeliverableForwardsForex::release_selltime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellTime)
  return _impl_.selltime_.Release();
}
inline void NonDeliverableForwardsForex::set_allocated_selltime(std::string* selltime) {
  if (selltime != nullptr) {
    
  } else {
    
  }
  _impl_.selltime_.SetAllocated(selltime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selltime_.IsDefault()) {
    _impl_.selltime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.SellTime)
}

// int64 LastBuyRate = 8;
inline void NonDeliverableForwardsForex::clear_lastbuyrate() {
  _impl_.lastbuyrate_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_lastbuyrate() const {
  return _impl_.lastbuyrate_;
}
inline int64_t NonDeliverableForwardsForex::lastbuyrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LastBuyRate)
  return _internal_lastbuyrate();
}
inline void NonDeliverableForwardsForex::_internal_set_lastbuyrate(int64_t value) {
  
  _impl_.lastbuyrate_ = value;
}
inline void NonDeliverableForwardsForex::set_lastbuyrate(int64_t value) {
  _internal_set_lastbuyrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LastBuyRate)
}

// int64 LastSellRate = 9;
inline void NonDeliverableForwardsForex::clear_lastsellrate() {
  _impl_.lastsellrate_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_lastsellrate() const {
  return _impl_.lastsellrate_;
}
inline int64_t NonDeliverableForwardsForex::lastsellrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LastSellRate)
  return _internal_lastsellrate();
}
inline void NonDeliverableForwardsForex::_internal_set_lastsellrate(int64_t value) {
  
  _impl_.lastsellrate_ = value;
}
inline void NonDeliverableForwardsForex::set_lastsellrate(int64_t value) {
  _internal_set_lastsellrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LastSellRate)
}

// int64 LastBuyAllin = 10;
inline void NonDeliverableForwardsForex::clear_lastbuyallin() {
  _impl_.lastbuyallin_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_lastbuyallin() const {
  return _impl_.lastbuyallin_;
}
inline int64_t NonDeliverableForwardsForex::lastbuyallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LastBuyAllin)
  return _internal_lastbuyallin();
}
inline void NonDeliverableForwardsForex::_internal_set_lastbuyallin(int64_t value) {
  
  _impl_.lastbuyallin_ = value;
}
inline void NonDeliverableForwardsForex::set_lastbuyallin(int64_t value) {
  _internal_set_lastbuyallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LastBuyAllin)
}

// int64 LastSellAllin = 11;
inline void NonDeliverableForwardsForex::clear_lastsellallin() {
  _impl_.lastsellallin_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_lastsellallin() const {
  return _impl_.lastsellallin_;
}
inline int64_t NonDeliverableForwardsForex::lastsellallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LastSellAllin)
  return _internal_lastsellallin();
}
inline void NonDeliverableForwardsForex::_internal_set_lastsellallin(int64_t value) {
  
  _impl_.lastsellallin_ = value;
}
inline void NonDeliverableForwardsForex::set_lastsellallin(int64_t value) {
  _internal_set_lastsellallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LastSellAllin)
}

// int64 HighRate = 12;
inline void NonDeliverableForwardsForex::clear_highrate() {
  _impl_.highrate_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_highrate() const {
  return _impl_.highrate_;
}
inline int64_t NonDeliverableForwardsForex::highrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.HighRate)
  return _internal_highrate();
}
inline void NonDeliverableForwardsForex::_internal_set_highrate(int64_t value) {
  
  _impl_.highrate_ = value;
}
inline void NonDeliverableForwardsForex::set_highrate(int64_t value) {
  _internal_set_highrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.HighRate)
}

// int64 LowRate = 13;
inline void NonDeliverableForwardsForex::clear_lowrate() {
  _impl_.lowrate_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_lowrate() const {
  return _impl_.lowrate_;
}
inline int64_t NonDeliverableForwardsForex::lowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LowRate)
  return _internal_lowrate();
}
inline void NonDeliverableForwardsForex::_internal_set_lowrate(int64_t value) {
  
  _impl_.lowrate_ = value;
}
inline void NonDeliverableForwardsForex::set_lowrate(int64_t value) {
  _internal_set_lowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.LowRate)
}

// int64 OpenRate = 14;
inline void NonDeliverableForwardsForex::clear_openrate() {
  _impl_.openrate_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_openrate() const {
  return _impl_.openrate_;
}
inline int64_t NonDeliverableForwardsForex::openrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.OpenRate)
  return _internal_openrate();
}
inline void NonDeliverableForwardsForex::_internal_set_openrate(int64_t value) {
  
  _impl_.openrate_ = value;
}
inline void NonDeliverableForwardsForex::set_openrate(int64_t value) {
  _internal_set_openrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.OpenRate)
}

// int64 HistoryCloseRate = 15;
inline void NonDeliverableForwardsForex::clear_historycloserate() {
  _impl_.historycloserate_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_historycloserate() const {
  return _impl_.historycloserate_;
}
inline int64_t NonDeliverableForwardsForex::historycloserate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.HistoryCloseRate)
  return _internal_historycloserate();
}
inline void NonDeliverableForwardsForex::_internal_set_historycloserate(int64_t value) {
  
  _impl_.historycloserate_ = value;
}
inline void NonDeliverableForwardsForex::set_historycloserate(int64_t value) {
  _internal_set_historycloserate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.HistoryCloseRate)
}

// int64 CloseRate = 16;
inline void NonDeliverableForwardsForex::clear_closerate() {
  _impl_.closerate_ = int64_t{0};
}
inline int64_t NonDeliverableForwardsForex::_internal_closerate() const {
  return _impl_.closerate_;
}
inline int64_t NonDeliverableForwardsForex::closerate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.CloseRate)
  return _internal_closerate();
}
inline void NonDeliverableForwardsForex::_internal_set_closerate(int64_t value) {
  
  _impl_.closerate_ = value;
}
inline void NonDeliverableForwardsForex::set_closerate(int64_t value) {
  _internal_set_closerate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.CloseRate)
}

// int32 AmountLevelRate = 17;
inline void NonDeliverableForwardsForex::clear_amountlevelrate() {
  _impl_.amountlevelrate_ = 0;
}
inline int32_t NonDeliverableForwardsForex::_internal_amountlevelrate() const {
  return _impl_.amountlevelrate_;
}
inline int32_t NonDeliverableForwardsForex::amountlevelrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.AmountLevelRate)
  return _internal_amountlevelrate();
}
inline void NonDeliverableForwardsForex::_internal_set_amountlevelrate(int32_t value) {
  
  _impl_.amountlevelrate_ = value;
}
inline void NonDeliverableForwardsForex::set_amountlevelrate(int32_t value) {
  _internal_set_amountlevelrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.AmountLevelRate)
}

// int32 AmountLevelAllin = 18;
inline void NonDeliverableForwardsForex::clear_amountlevelallin() {
  _impl_.amountlevelallin_ = 0;
}
inline int32_t NonDeliverableForwardsForex::_internal_amountlevelallin() const {
  return _impl_.amountlevelallin_;
}
inline int32_t NonDeliverableForwardsForex::amountlevelallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.AmountLevelAllin)
  return _internal_amountlevelallin();
}
inline void NonDeliverableForwardsForex::_internal_set_amountlevelallin(int32_t value) {
  
  _impl_.amountlevelallin_ = value;
}
inline void NonDeliverableForwardsForex::set_amountlevelallin(int32_t value) {
  _internal_set_amountlevelallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.AmountLevelAllin)
}

// int32 RateSide = 19;
inline void NonDeliverableForwardsForex::clear_rateside() {
  _impl_.rateside_ = 0;
}
inline int32_t NonDeliverableForwardsForex::_internal_rateside() const {
  return _impl_.rateside_;
}
inline int32_t NonDeliverableForwardsForex::rateside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.RateSide)
  return _internal_rateside();
}
inline void NonDeliverableForwardsForex::_internal_set_rateside(int32_t value) {
  
  _impl_.rateside_ = value;
}
inline void NonDeliverableForwardsForex::set_rateside(int32_t value) {
  _internal_set_rateside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.RateSide)
}

// int32 AllinSide = 20;
inline void NonDeliverableForwardsForex::clear_allinside() {
  _impl_.allinside_ = 0;
}
inline int32_t NonDeliverableForwardsForex::_internal_allinside() const {
  return _impl_.allinside_;
}
inline int32_t NonDeliverableForwardsForex::allinside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.AllinSide)
  return _internal_allinside();
}
inline void NonDeliverableForwardsForex::_internal_set_allinside(int32_t value) {
  
  _impl_.allinside_ = value;
}
inline void NonDeliverableForwardsForex::set_allinside(int32_t value) {
  _internal_set_allinside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.NonDeliverableForwardsForex.AllinSide)
}

// -------------------------------------------------------------------

// SwapForex

// string ValueDate = 1;
inline void SwapForex::clear_valuedate() {
  _impl_.valuedate_.ClearToEmpty();
}
inline const std::string& SwapForex::valuedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.ValueDate)
  return _internal_valuedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapForex::set_valuedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.valuedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.ValueDate)
}
inline std::string* SwapForex::mutable_valuedate() {
  std::string* _s = _internal_mutable_valuedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwapForex.ValueDate)
  return _s;
}
inline const std::string& SwapForex::_internal_valuedate() const {
  return _impl_.valuedate_.Get();
}
inline void SwapForex::_internal_set_valuedate(const std::string& value) {
  
  _impl_.valuedate_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapForex::_internal_mutable_valuedate() {
  
  return _impl_.valuedate_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapForex::release_valuedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwapForex.ValueDate)
  return _impl_.valuedate_.Release();
}
inline void SwapForex::set_allocated_valuedate(std::string* valuedate) {
  if (valuedate != nullptr) {
    
  } else {
    
  }
  _impl_.valuedate_.SetAllocated(valuedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.valuedate_.IsDefault()) {
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwapForex.ValueDate)
}

// int64 NetBasisChange = 2;
inline void SwapForex::clear_netbasischange() {
  _impl_.netbasischange_ = int64_t{0};
}
inline int64_t SwapForex::_internal_netbasischange() const {
  return _impl_.netbasischange_;
}
inline int64_t SwapForex::netbasischange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.NetBasisChange)
  return _internal_netbasischange();
}
inline void SwapForex::_internal_set_netbasischange(int64_t value) {
  
  _impl_.netbasischange_ = value;
}
inline void SwapForex::set_netbasischange(int64_t value) {
  _internal_set_netbasischange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.NetBasisChange)
}

// int64 PercentageChange = 3;
inline void SwapForex::clear_percentagechange() {
  _impl_.percentagechange_ = int64_t{0};
}
inline int64_t SwapForex::_internal_percentagechange() const {
  return _impl_.percentagechange_;
}
inline int64_t SwapForex::percentagechange() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.PercentageChange)
  return _internal_percentagechange();
}
inline void SwapForex::_internal_set_percentagechange(int64_t value) {
  
  _impl_.percentagechange_ = value;
}
inline void SwapForex::set_percentagechange(int64_t value) {
  _internal_set_percentagechange(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.PercentageChange)
}

// string BuyDate = 4;
inline void SwapForex::clear_buydate() {
  _impl_.buydate_.ClearToEmpty();
}
inline const std::string& SwapForex::buydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.BuyDate)
  return _internal_buydate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapForex::set_buydate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buydate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.BuyDate)
}
inline std::string* SwapForex::mutable_buydate() {
  std::string* _s = _internal_mutable_buydate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwapForex.BuyDate)
  return _s;
}
inline const std::string& SwapForex::_internal_buydate() const {
  return _impl_.buydate_.Get();
}
inline void SwapForex::_internal_set_buydate(const std::string& value) {
  
  _impl_.buydate_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapForex::_internal_mutable_buydate() {
  
  return _impl_.buydate_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapForex::release_buydate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwapForex.BuyDate)
  return _impl_.buydate_.Release();
}
inline void SwapForex::set_allocated_buydate(std::string* buydate) {
  if (buydate != nullptr) {
    
  } else {
    
  }
  _impl_.buydate_.SetAllocated(buydate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buydate_.IsDefault()) {
    _impl_.buydate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwapForex.BuyDate)
}

// string BuyTime = 5;
inline void SwapForex::clear_buytime() {
  _impl_.buytime_.ClearToEmpty();
}
inline const std::string& SwapForex::buytime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.BuyTime)
  return _internal_buytime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapForex::set_buytime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buytime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.BuyTime)
}
inline std::string* SwapForex::mutable_buytime() {
  std::string* _s = _internal_mutable_buytime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwapForex.BuyTime)
  return _s;
}
inline const std::string& SwapForex::_internal_buytime() const {
  return _impl_.buytime_.Get();
}
inline void SwapForex::_internal_set_buytime(const std::string& value) {
  
  _impl_.buytime_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapForex::_internal_mutable_buytime() {
  
  return _impl_.buytime_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapForex::release_buytime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwapForex.BuyTime)
  return _impl_.buytime_.Release();
}
inline void SwapForex::set_allocated_buytime(std::string* buytime) {
  if (buytime != nullptr) {
    
  } else {
    
  }
  _impl_.buytime_.SetAllocated(buytime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buytime_.IsDefault()) {
    _impl_.buytime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwapForex.BuyTime)
}

// string SellDate = 6;
inline void SwapForex::clear_selldate() {
  _impl_.selldate_.ClearToEmpty();
}
inline const std::string& SwapForex::selldate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.SellDate)
  return _internal_selldate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapForex::set_selldate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selldate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.SellDate)
}
inline std::string* SwapForex::mutable_selldate() {
  std::string* _s = _internal_mutable_selldate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwapForex.SellDate)
  return _s;
}
inline const std::string& SwapForex::_internal_selldate() const {
  return _impl_.selldate_.Get();
}
inline void SwapForex::_internal_set_selldate(const std::string& value) {
  
  _impl_.selldate_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapForex::_internal_mutable_selldate() {
  
  return _impl_.selldate_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapForex::release_selldate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwapForex.SellDate)
  return _impl_.selldate_.Release();
}
inline void SwapForex::set_allocated_selldate(std::string* selldate) {
  if (selldate != nullptr) {
    
  } else {
    
  }
  _impl_.selldate_.SetAllocated(selldate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selldate_.IsDefault()) {
    _impl_.selldate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwapForex.SellDate)
}

// string SellTime = 7;
inline void SwapForex::clear_selltime() {
  _impl_.selltime_.ClearToEmpty();
}
inline const std::string& SwapForex::selltime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.SellTime)
  return _internal_selltime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapForex::set_selltime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selltime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.SellTime)
}
inline std::string* SwapForex::mutable_selltime() {
  std::string* _s = _internal_mutable_selltime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwapForex.SellTime)
  return _s;
}
inline const std::string& SwapForex::_internal_selltime() const {
  return _impl_.selltime_.Get();
}
inline void SwapForex::_internal_set_selltime(const std::string& value) {
  
  _impl_.selltime_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapForex::_internal_mutable_selltime() {
  
  return _impl_.selltime_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapForex::release_selltime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwapForex.SellTime)
  return _impl_.selltime_.Release();
}
inline void SwapForex::set_allocated_selltime(std::string* selltime) {
  if (selltime != nullptr) {
    
  } else {
    
  }
  _impl_.selltime_.SetAllocated(selltime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selltime_.IsDefault()) {
    _impl_.selltime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwapForex.SellTime)
}

// int64 LastBuyRate = 8;
inline void SwapForex::clear_lastbuyrate() {
  _impl_.lastbuyrate_ = int64_t{0};
}
inline int64_t SwapForex::_internal_lastbuyrate() const {
  return _impl_.lastbuyrate_;
}
inline int64_t SwapForex::lastbuyrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.LastBuyRate)
  return _internal_lastbuyrate();
}
inline void SwapForex::_internal_set_lastbuyrate(int64_t value) {
  
  _impl_.lastbuyrate_ = value;
}
inline void SwapForex::set_lastbuyrate(int64_t value) {
  _internal_set_lastbuyrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.LastBuyRate)
}

// int64 LastSellRate = 9;
inline void SwapForex::clear_lastsellrate() {
  _impl_.lastsellrate_ = int64_t{0};
}
inline int64_t SwapForex::_internal_lastsellrate() const {
  return _impl_.lastsellrate_;
}
inline int64_t SwapForex::lastsellrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.LastSellRate)
  return _internal_lastsellrate();
}
inline void SwapForex::_internal_set_lastsellrate(int64_t value) {
  
  _impl_.lastsellrate_ = value;
}
inline void SwapForex::set_lastsellrate(int64_t value) {
  _internal_set_lastsellrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.LastSellRate)
}

// int64 LastBuyAllin = 10;
inline void SwapForex::clear_lastbuyallin() {
  _impl_.lastbuyallin_ = int64_t{0};
}
inline int64_t SwapForex::_internal_lastbuyallin() const {
  return _impl_.lastbuyallin_;
}
inline int64_t SwapForex::lastbuyallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.LastBuyAllin)
  return _internal_lastbuyallin();
}
inline void SwapForex::_internal_set_lastbuyallin(int64_t value) {
  
  _impl_.lastbuyallin_ = value;
}
inline void SwapForex::set_lastbuyallin(int64_t value) {
  _internal_set_lastbuyallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.LastBuyAllin)
}

// int64 LastSellAllin = 11;
inline void SwapForex::clear_lastsellallin() {
  _impl_.lastsellallin_ = int64_t{0};
}
inline int64_t SwapForex::_internal_lastsellallin() const {
  return _impl_.lastsellallin_;
}
inline int64_t SwapForex::lastsellallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.LastSellAllin)
  return _internal_lastsellallin();
}
inline void SwapForex::_internal_set_lastsellallin(int64_t value) {
  
  _impl_.lastsellallin_ = value;
}
inline void SwapForex::set_lastsellallin(int64_t value) {
  _internal_set_lastsellallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.LastSellAllin)
}

// int64 HighRate = 12;
inline void SwapForex::clear_highrate() {
  _impl_.highrate_ = int64_t{0};
}
inline int64_t SwapForex::_internal_highrate() const {
  return _impl_.highrate_;
}
inline int64_t SwapForex::highrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.HighRate)
  return _internal_highrate();
}
inline void SwapForex::_internal_set_highrate(int64_t value) {
  
  _impl_.highrate_ = value;
}
inline void SwapForex::set_highrate(int64_t value) {
  _internal_set_highrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.HighRate)
}

// int64 LowRate = 13;
inline void SwapForex::clear_lowrate() {
  _impl_.lowrate_ = int64_t{0};
}
inline int64_t SwapForex::_internal_lowrate() const {
  return _impl_.lowrate_;
}
inline int64_t SwapForex::lowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.LowRate)
  return _internal_lowrate();
}
inline void SwapForex::_internal_set_lowrate(int64_t value) {
  
  _impl_.lowrate_ = value;
}
inline void SwapForex::set_lowrate(int64_t value) {
  _internal_set_lowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.LowRate)
}

// int64 OpenRate = 14;
inline void SwapForex::clear_openrate() {
  _impl_.openrate_ = int64_t{0};
}
inline int64_t SwapForex::_internal_openrate() const {
  return _impl_.openrate_;
}
inline int64_t SwapForex::openrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.OpenRate)
  return _internal_openrate();
}
inline void SwapForex::_internal_set_openrate(int64_t value) {
  
  _impl_.openrate_ = value;
}
inline void SwapForex::set_openrate(int64_t value) {
  _internal_set_openrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.OpenRate)
}

// int64 HistoryCloseRate = 15;
inline void SwapForex::clear_historycloserate() {
  _impl_.historycloserate_ = int64_t{0};
}
inline int64_t SwapForex::_internal_historycloserate() const {
  return _impl_.historycloserate_;
}
inline int64_t SwapForex::historycloserate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.HistoryCloseRate)
  return _internal_historycloserate();
}
inline void SwapForex::_internal_set_historycloserate(int64_t value) {
  
  _impl_.historycloserate_ = value;
}
inline void SwapForex::set_historycloserate(int64_t value) {
  _internal_set_historycloserate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.HistoryCloseRate)
}

// int64 CloseRate = 16;
inline void SwapForex::clear_closerate() {
  _impl_.closerate_ = int64_t{0};
}
inline int64_t SwapForex::_internal_closerate() const {
  return _impl_.closerate_;
}
inline int64_t SwapForex::closerate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.CloseRate)
  return _internal_closerate();
}
inline void SwapForex::_internal_set_closerate(int64_t value) {
  
  _impl_.closerate_ = value;
}
inline void SwapForex::set_closerate(int64_t value) {
  _internal_set_closerate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.CloseRate)
}

// int32 AmountLevelRate = 17;
inline void SwapForex::clear_amountlevelrate() {
  _impl_.amountlevelrate_ = 0;
}
inline int32_t SwapForex::_internal_amountlevelrate() const {
  return _impl_.amountlevelrate_;
}
inline int32_t SwapForex::amountlevelrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.AmountLevelRate)
  return _internal_amountlevelrate();
}
inline void SwapForex::_internal_set_amountlevelrate(int32_t value) {
  
  _impl_.amountlevelrate_ = value;
}
inline void SwapForex::set_amountlevelrate(int32_t value) {
  _internal_set_amountlevelrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.AmountLevelRate)
}

// int32 AmountLevelAllin = 18;
inline void SwapForex::clear_amountlevelallin() {
  _impl_.amountlevelallin_ = 0;
}
inline int32_t SwapForex::_internal_amountlevelallin() const {
  return _impl_.amountlevelallin_;
}
inline int32_t SwapForex::amountlevelallin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.AmountLevelAllin)
  return _internal_amountlevelallin();
}
inline void SwapForex::_internal_set_amountlevelallin(int32_t value) {
  
  _impl_.amountlevelallin_ = value;
}
inline void SwapForex::set_amountlevelallin(int32_t value) {
  _internal_set_amountlevelallin(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.AmountLevelAllin)
}

// int32 RateSide = 19;
inline void SwapForex::clear_rateside() {
  _impl_.rateside_ = 0;
}
inline int32_t SwapForex::_internal_rateside() const {
  return _impl_.rateside_;
}
inline int32_t SwapForex::rateside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.RateSide)
  return _internal_rateside();
}
inline void SwapForex::_internal_set_rateside(int32_t value) {
  
  _impl_.rateside_ = value;
}
inline void SwapForex::set_rateside(int32_t value) {
  _internal_set_rateside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.RateSide)
}

// int32 AllinSide = 20;
inline void SwapForex::clear_allinside() {
  _impl_.allinside_ = 0;
}
inline int32_t SwapForex::_internal_allinside() const {
  return _impl_.allinside_;
}
inline int32_t SwapForex::allinside() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.AllinSide)
  return _internal_allinside();
}
inline void SwapForex::_internal_set_allinside(int32_t value) {
  
  _impl_.allinside_ = value;
}
inline void SwapForex::set_allinside(int32_t value) {
  _internal_set_allinside(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.AllinSide)
}

// string LegSign = 21;
inline void SwapForex::clear_legsign() {
  _impl_.legsign_.ClearToEmpty();
}
inline const std::string& SwapForex::legsign() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SwapForex.LegSign)
  return _internal_legsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapForex::set_legsign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.legsign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SwapForex.LegSign)
}
inline std::string* SwapForex::mutable_legsign() {
  std::string* _s = _internal_mutable_legsign();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SwapForex.LegSign)
  return _s;
}
inline const std::string& SwapForex::_internal_legsign() const {
  return _impl_.legsign_.Get();
}
inline void SwapForex::_internal_set_legsign(const std::string& value) {
  
  _impl_.legsign_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapForex::_internal_mutable_legsign() {
  
  return _impl_.legsign_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapForex::release_legsign() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SwapForex.LegSign)
  return _impl_.legsign_.Release();
}
inline void SwapForex::set_allocated_legsign(std::string* legsign) {
  if (legsign != nullptr) {
    
  } else {
    
  }
  _impl_.legsign_.SetAllocated(legsign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legsign_.IsDefault()) {
    _impl_.legsign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SwapForex.LegSign)
}

// -------------------------------------------------------------------

// OptionForex

// string FxTerm = 1;
inline void OptionForex::clear_fxterm() {
  _impl_.fxterm_.ClearToEmpty();
}
inline const std::string& OptionForex::fxterm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionForex.FxTerm)
  return _internal_fxterm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionForex::set_fxterm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fxterm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionForex.FxTerm)
}
inline std::string* OptionForex::mutable_fxterm() {
  std::string* _s = _internal_mutable_fxterm();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionForex.FxTerm)
  return _s;
}
inline const std::string& OptionForex::_internal_fxterm() const {
  return _impl_.fxterm_.Get();
}
inline void OptionForex::_internal_set_fxterm(const std::string& value) {
  
  _impl_.fxterm_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionForex::_internal_mutable_fxterm() {
  
  return _impl_.fxterm_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionForex::release_fxterm() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionForex.FxTerm)
  return _impl_.fxterm_.Release();
}
inline void OptionForex::set_allocated_fxterm(std::string* fxterm) {
  if (fxterm != nullptr) {
    
  } else {
    
  }
  _impl_.fxterm_.SetAllocated(fxterm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fxterm_.IsDefault()) {
    _impl_.fxterm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionForex.FxTerm)
}

// int64 Premium = 2;
inline void OptionForex::clear_premium() {
  _impl_.premium_ = int64_t{0};
}
inline int64_t OptionForex::_internal_premium() const {
  return _impl_.premium_;
}
inline int64_t OptionForex::premium() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionForex.Premium)
  return _internal_premium();
}
inline void OptionForex::_internal_set_premium(int64_t value) {
  
  _impl_.premium_ = value;
}
inline void OptionForex::set_premium(int64_t value) {
  _internal_set_premium(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionForex.Premium)
}

// int64 Volatility = 3;
inline void OptionForex::clear_volatility() {
  _impl_.volatility_ = int64_t{0};
}
inline int64_t OptionForex::_internal_volatility() const {
  return _impl_.volatility_;
}
inline int64_t OptionForex::volatility() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionForex.Volatility)
  return _internal_volatility();
}
inline void OptionForex::_internal_set_volatility(int64_t value) {
  
  _impl_.volatility_ = value;
}
inline void OptionForex::set_volatility(int64_t value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionForex.Volatility)
}

// int64 Volume = 4;
inline void OptionForex::clear_volume() {
  _impl_.volume_ = int64_t{0};
}
inline int64_t OptionForex::_internal_volume() const {
  return _impl_.volume_;
}
inline int64_t OptionForex::volume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionForex.Volume)
  return _internal_volume();
}
inline void OptionForex::_internal_set_volume(int64_t value) {
  
  _impl_.volume_ = value;
}
inline void OptionForex::set_volume(int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionForex.Volume)
}

// string TradeDate = 5;
inline void OptionForex::clear_tradedate() {
  _impl_.tradedate_.ClearToEmpty();
}
inline const std::string& OptionForex::tradedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionForex.TradeDate)
  return _internal_tradedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionForex::set_tradedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionForex.TradeDate)
}
inline std::string* OptionForex::mutable_tradedate() {
  std::string* _s = _internal_mutable_tradedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionForex.TradeDate)
  return _s;
}
inline const std::string& OptionForex::_internal_tradedate() const {
  return _impl_.tradedate_.Get();
}
inline void OptionForex::_internal_set_tradedate(const std::string& value) {
  
  _impl_.tradedate_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionForex::_internal_mutable_tradedate() {
  
  return _impl_.tradedate_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionForex::release_tradedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionForex.TradeDate)
  return _impl_.tradedate_.Release();
}
inline void OptionForex::set_allocated_tradedate(std::string* tradedate) {
  if (tradedate != nullptr) {
    
  } else {
    
  }
  _impl_.tradedate_.SetAllocated(tradedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradedate_.IsDefault()) {
    _impl_.tradedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionForex.TradeDate)
}

// string TradeTime = 6;
inline void OptionForex::clear_tradetime() {
  _impl_.tradetime_.ClearToEmpty();
}
inline const std::string& OptionForex::tradetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionForex.TradeTime)
  return _internal_tradetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionForex::set_tradetime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradetime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionForex.TradeTime)
}
inline std::string* OptionForex::mutable_tradetime() {
  std::string* _s = _internal_mutable_tradetime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionForex.TradeTime)
  return _s;
}
inline const std::string& OptionForex::_internal_tradetime() const {
  return _impl_.tradetime_.Get();
}
inline void OptionForex::_internal_set_tradetime(const std::string& value) {
  
  _impl_.tradetime_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionForex::_internal_mutable_tradetime() {
  
  return _impl_.tradetime_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionForex::release_tradetime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionForex.TradeTime)
  return _impl_.tradetime_.Release();
}
inline void OptionForex::set_allocated_tradetime(std::string* tradetime) {
  if (tradetime != nullptr) {
    
  } else {
    
  }
  _impl_.tradetime_.SetAllocated(tradetime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradetime_.IsDefault()) {
    _impl_.tradetime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionForex.TradeTime)
}

// int32 PremiumType = 7;
inline void OptionForex::clear_premiumtype() {
  _impl_.premiumtype_ = 0;
}
inline int32_t OptionForex::_internal_premiumtype() const {
  return _impl_.premiumtype_;
}
inline int32_t OptionForex::premiumtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionForex.PremiumType)
  return _internal_premiumtype();
}
inline void OptionForex::_internal_set_premiumtype(int32_t value) {
  
  _impl_.premiumtype_ = value;
}
inline void OptionForex::set_premiumtype(int32_t value) {
  _internal_set_premiumtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionForex.PremiumType)
}

// string OptionType = 8;
inline void OptionForex::clear_optiontype() {
  _impl_.optiontype_.ClearToEmpty();
}
inline const std::string& OptionForex::optiontype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OptionForex.OptionType)
  return _internal_optiontype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionForex::set_optiontype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.optiontype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OptionForex.OptionType)
}
inline std::string* OptionForex::mutable_optiontype() {
  std::string* _s = _internal_mutable_optiontype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.OptionForex.OptionType)
  return _s;
}
inline const std::string& OptionForex::_internal_optiontype() const {
  return _impl_.optiontype_.Get();
}
inline void OptionForex::_internal_set_optiontype(const std::string& value) {
  
  _impl_.optiontype_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionForex::_internal_mutable_optiontype() {
  
  return _impl_.optiontype_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionForex::release_optiontype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.OptionForex.OptionType)
  return _impl_.optiontype_.Release();
}
inline void OptionForex::set_allocated_optiontype(std::string* optiontype) {
  if (optiontype != nullptr) {
    
  } else {
    
  }
  _impl_.optiontype_.SetAllocated(optiontype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optiontype_.IsDefault()) {
    _impl_.optiontype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.OptionForex.OptionType)
}

// -------------------------------------------------------------------

// SpotClosePriceForex

// int64 ClosePx = 1;
inline void SpotClosePriceForex::clear_closepx() {
  _impl_.closepx_ = int64_t{0};
}
inline int64_t SpotClosePriceForex::_internal_closepx() const {
  return _impl_.closepx_;
}
inline int64_t SpotClosePriceForex::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotClosePriceForex.ClosePx)
  return _internal_closepx();
}
inline void SpotClosePriceForex::_internal_set_closepx(int64_t value) {
  
  _impl_.closepx_ = value;
}
inline void SpotClosePriceForex::set_closepx(int64_t value) {
  _internal_set_closepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotClosePriceForex.ClosePx)
}

// string UpdateDate = 2;
inline void SpotClosePriceForex::clear_updatedate() {
  _impl_.updatedate_.ClearToEmpty();
}
inline const std::string& SpotClosePriceForex::updatedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateDate)
  return _internal_updatedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotClosePriceForex::set_updatedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updatedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateDate)
}
inline std::string* SpotClosePriceForex::mutable_updatedate() {
  std::string* _s = _internal_mutable_updatedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateDate)
  return _s;
}
inline const std::string& SpotClosePriceForex::_internal_updatedate() const {
  return _impl_.updatedate_.Get();
}
inline void SpotClosePriceForex::_internal_set_updatedate(const std::string& value) {
  
  _impl_.updatedate_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotClosePriceForex::_internal_mutable_updatedate() {
  
  return _impl_.updatedate_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotClosePriceForex::release_updatedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateDate)
  return _impl_.updatedate_.Release();
}
inline void SpotClosePriceForex::set_allocated_updatedate(std::string* updatedate) {
  if (updatedate != nullptr) {
    
  } else {
    
  }
  _impl_.updatedate_.SetAllocated(updatedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updatedate_.IsDefault()) {
    _impl_.updatedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateDate)
}

// string UpdateTime = 3;
inline void SpotClosePriceForex::clear_updatetime() {
  _impl_.updatetime_.ClearToEmpty();
}
inline const std::string& SpotClosePriceForex::updatetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateTime)
  return _internal_updatetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotClosePriceForex::set_updatetime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updatetime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateTime)
}
inline std::string* SpotClosePriceForex::mutable_updatetime() {
  std::string* _s = _internal_mutable_updatetime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateTime)
  return _s;
}
inline const std::string& SpotClosePriceForex::_internal_updatetime() const {
  return _impl_.updatetime_.Get();
}
inline void SpotClosePriceForex::_internal_set_updatetime(const std::string& value) {
  
  _impl_.updatetime_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotClosePriceForex::_internal_mutable_updatetime() {
  
  return _impl_.updatetime_.Mutable(GetArenaForAllocation());
}
inline std::string* SpotClosePriceForex::release_updatetime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateTime)
  return _impl_.updatetime_.Release();
}
inline void SpotClosePriceForex::set_allocated_updatetime(std::string* updatetime) {
  if (updatetime != nullptr) {
    
  } else {
    
  }
  _impl_.updatetime_.SetAllocated(updatetime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updatetime_.IsDefault()) {
    _impl_.updatetime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SpotClosePriceForex.UpdateTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDCfetsForex_2eproto
