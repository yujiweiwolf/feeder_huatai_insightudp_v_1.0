// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADNews.proto

#include "ADNews.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR ADNews::ADNews(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seculist_)*/{}
  , /*decltype(_impl_.peremlist_)*/{}
  , /*decltype(_impl_.comemlist_)*/{}
  , /*decltype(_impl_.sentimentcontent_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventcat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.industry_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newstime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.summ_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newsemotion_)*/nullptr
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.newshot_)*/0
  , /*decltype(_impl_.eventpos_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADNewsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADNewsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADNewsDefaultTypeInternal() {}
  union {
    ADNews _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADNewsDefaultTypeInternal _ADNews_default_instance_;
PROTOBUF_CONSTEXPR ADNewsEmotion::ADNewsEmotion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.negative_)*/0
  , /*decltype(_impl_.neutral_)*/0
  , /*decltype(_impl_.positive_)*/0
  , /*decltype(_impl_.pos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADNewsEmotionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADNewsEmotionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADNewsEmotionDefaultTypeInternal() {}
  union {
    ADNewsEmotion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADNewsEmotionDefaultTypeInternal _ADNewsEmotion_default_instance_;
PROTOBUF_CONSTEXPR ADInvolvedSecurity::ADInvolvedSecurity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secucode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secuname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADInvolvedSecurityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADInvolvedSecurityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADInvolvedSecurityDefaultTypeInternal() {}
  union {
    ADInvolvedSecurity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADInvolvedSecurityDefaultTypeInternal _ADInvolvedSecurity_default_instance_;
PROTOBUF_CONSTEXPR ADRelatedCompany::ADRelatedCompany(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chiname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.com_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secucode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generalpos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADRelatedCompanyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADRelatedCompanyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADRelatedCompanyDefaultTypeInternal() {}
  union {
    ADRelatedCompany _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADRelatedCompanyDefaultTypeInternal _ADRelatedCompany_default_instance_;
PROTOBUF_CONSTEXPR ADRelatedPerson::ADRelatedPerson(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.per_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.com_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generalpos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADRelatedPersonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADRelatedPersonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADRelatedPersonDefaultTypeInternal() {}
  union {
    ADRelatedPerson _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADRelatedPersonDefaultTypeInternal _ADRelatedPerson_default_instance_;
PROTOBUF_CONSTEXPR ADNewsDataEntry::ADNewsDataEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADNewsDataEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADNewsDataEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADNewsDataEntryDefaultTypeInternal() {}
  union {
    ADNewsDataEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADNewsDataEntryDefaultTypeInternal _ADNewsDataEntry_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_ADNews_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ADNews_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ADNews_2eproto = nullptr;

const uint32_t TableStruct_ADNews_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.eventcat_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.eventname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.eventpos_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.industry_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.newshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.newstime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.summ_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.newsemotion_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.seculist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.peremlist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.comemlist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _impl_.sentimentcontent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, _impl_.negative_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, _impl_.neutral_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, _impl_.positive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, _impl_.comcode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, _impl_.secucode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, _impl_.secuname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, _impl_.htscsecurityid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, _impl_.chiname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, _impl_.comcode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, _impl_.com_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, _impl_.generalpos_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, _impl_.secucode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, _impl_.htscsecurityid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, _impl_.per_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, _impl_.comcode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, _impl_.com_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, _impl_.generalpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsDataEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsDataEntry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsDataEntry, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADNews)},
  { 31, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADNewsEmotion)},
  { 41, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADInvolvedSecurity)},
  { 51, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADRelatedCompany)},
  { 63, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADRelatedPerson)},
  { 73, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADNewsDataEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_ADNews_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADNewsEmotion_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADInvolvedSecurity_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADRelatedCompany_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADRelatedPerson_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADNewsDataEntry_default_instance_._instance,
};

const char descriptor_table_protodef_ADNews_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014ADNews.proto\022\032com.htsc.mdc.insight.mod"
  "el\032\023ESecurityType.proto\032\027ESecurityIDSour"
  "ce.proto\"\227\006\n\006ADNews\022\026\n\016HTSCSecurityID\030\001 "
  "\001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rD"
  "ataTimestamp\030\004 \001(\003\022\030\n\020TradingPhaseCode\030\005"
  " \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%.com.hts"
  "c.mdc.model.ESecurityIDSource\0227\n\014securit"
  "yType\030\007 \001(\0162!.com.htsc.mdc.model.ESecuri"
  "tyType\022\016\n\006author\030\010 \001(\t\022\017\n\007content\030\t \001(\t\022"
  "\020\n\010eventCat\030\n \001(\t\022\021\n\teventName\030\013 \001(\t\022\020\n\010"
  "eventPos\030\014 \001(\005\022\n\n\002id\030\r \001(\t\022\020\n\010industry\030\016"
  " \001(\t\022\017\n\007newsHot\030\017 \001(\001\022\020\n\010newsTime\030\020 \001(\t\022"
  "\014\n\004summ\030\021 \001(\t\022\r\n\005title\030\022 \001(\t\022\013\n\003url\030\023 \001("
  "\t\022>\n\013newsEmotion\030\024 \001(\0132).com.htsc.mdc.in"
  "sight.model.ADNewsEmotion\022@\n\010secuList\030\025 "
  "\003(\0132..com.htsc.mdc.insight.model.ADInvol"
  "vedSecurity\022>\n\tperEmList\030\026 \003(\0132+.com.hts"
  "c.mdc.insight.model.ADRelatedPerson\022\?\n\tc"
  "omEmList\030\027 \003(\0132,.com.htsc.mdc.insight.mo"
  "del.ADRelatedCompany\022\035\n\025DataMultiplePowe"
  "rOf10\030\030 \001(\005\022E\n\020sentimentContent\030\031 \003(\0132+."
  "com.htsc.mdc.insight.model.ADNewsDataEnt"
  "ry\"Q\n\rADNewsEmotion\022\020\n\010negative\030\001 \001(\001\022\017\n"
  "\007neutral\030\002 \001(\001\022\013\n\003pos\030\003 \001(\005\022\020\n\010positive\030"
  "\004 \001(\001\"a\n\022ADInvolvedSecurity\022\017\n\007comCode\030\001"
  " \001(\t\022\020\n\010secuCode\030\002 \001(\t\022\020\n\010secuName\030\003 \001(\t"
  "\022\026\n\016HTSCSecurityID\030\004 \001(\t\"\177\n\020ADRelatedCom"
  "pany\022\017\n\007chiname\030\001 \001(\t\022\017\n\007comCode\030\002 \001(\t\022\013"
  "\n\003com\030\003 \001(\t\022\022\n\ngeneralPos\030\004 \001(\005\022\020\n\010secuC"
  "ode\030\005 \001(\t\022\026\n\016HTSCSecurityID\030\006 \001(\t\"P\n\017ADR"
  "elatedPerson\022\013\n\003per\030\001 \001(\t\022\017\n\007comCode\030\002 \001"
  "(\t\022\013\n\003com\030\003 \001(\t\022\022\n\ngeneralPos\030\004 \001(\005\"-\n\017A"
  "DNewsDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\tB/\n\032com.htsc.mdc.insight.modelB\014ADNews"
  "ProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ADNews_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_ADNews_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ADNews_2eproto = {
    false, false, 1379, descriptor_table_protodef_ADNews_2eproto,
    "ADNews.proto",
    &descriptor_table_ADNews_2eproto_once, descriptor_table_ADNews_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_ADNews_2eproto::offsets,
    file_level_metadata_ADNews_2eproto, file_level_enum_descriptors_ADNews_2eproto,
    file_level_service_descriptors_ADNews_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ADNews_2eproto_getter() {
  return &descriptor_table_ADNews_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ADNews_2eproto(&descriptor_table_ADNews_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADNews::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::ADNewsEmotion& newsemotion(const ADNews* msg);
};

const ::com::htsc::mdc::insight::model::ADNewsEmotion&
ADNews::_Internal::newsemotion(const ADNews* msg) {
  return *msg->_impl_.newsemotion_;
}
ADNews::ADNews(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADNews)
}
ADNews::ADNews(const ADNews& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADNews* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seculist_){from._impl_.seculist_}
    , decltype(_impl_.peremlist_){from._impl_.peremlist_}
    , decltype(_impl_.comemlist_){from._impl_.comemlist_}
    , decltype(_impl_.sentimentcontent_){from._impl_.sentimentcontent_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.author_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.eventcat_){}
    , decltype(_impl_.eventname_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.industry_){}
    , decltype(_impl_.newstime_){}
    , decltype(_impl_.summ_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.newsemotion_){nullptr}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.newshot_){}
    , decltype(_impl_.eventpos_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author().empty()) {
    _this->_impl_.author_.Set(from._internal_author(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eventcat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventcat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eventcat().empty()) {
    _this->_impl_.eventcat_.Set(from._internal_eventcat(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eventname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eventname().empty()) {
    _this->_impl_.eventname_.Set(from._internal_eventname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.industry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.industry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_industry().empty()) {
    _this->_impl_.industry_.Set(from._internal_industry(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newstime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newstime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newstime().empty()) {
    _this->_impl_.newstime_.Set(from._internal_newstime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.summ_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summ_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summ().empty()) {
    _this->_impl_.summ_.Set(from._internal_summ(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_newsemotion()) {
    _this->_impl_.newsemotion_ = new ::com::htsc::mdc::insight::model::ADNewsEmotion(*from._impl_.newsemotion_);
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADNews)
}

inline void ADNews::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seculist_){arena}
    , decltype(_impl_.peremlist_){arena}
    , decltype(_impl_.comemlist_){arena}
    , decltype(_impl_.sentimentcontent_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.author_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.eventcat_){}
    , decltype(_impl_.eventname_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.industry_){}
    , decltype(_impl_.newstime_){}
    , decltype(_impl_.summ_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.newsemotion_){nullptr}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.newshot_){0}
    , decltype(_impl_.eventpos_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eventcat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventcat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eventname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.industry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.industry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newstime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newstime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summ_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summ_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADNews::~ADNews() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADNews)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADNews::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seculist_.~RepeatedPtrField();
  _impl_.peremlist_.~RepeatedPtrField();
  _impl_.comemlist_.~RepeatedPtrField();
  _impl_.sentimentcontent_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
  _impl_.author_.Destroy();
  _impl_.content_.Destroy();
  _impl_.eventcat_.Destroy();
  _impl_.eventname_.Destroy();
  _impl_.id_.Destroy();
  _impl_.industry_.Destroy();
  _impl_.newstime_.Destroy();
  _impl_.summ_.Destroy();
  _impl_.title_.Destroy();
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.newsemotion_;
}

void ADNews::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADNews::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADNews)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seculist_.Clear();
  _impl_.peremlist_.Clear();
  _impl_.comemlist_.Clear();
  _impl_.sentimentcontent_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  _impl_.author_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.eventcat_.ClearToEmpty();
  _impl_.eventname_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.industry_.ClearToEmpty();
  _impl_.newstime_.ClearToEmpty();
  _impl_.summ_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.newsemotion_ != nullptr) {
    delete _impl_.newsemotion_;
  }
  _impl_.newsemotion_ = nullptr;
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADNews::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string author = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_author();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.author"));
        } else
          goto handle_unusual;
        continue;
      // string content = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.content"));
        } else
          goto handle_unusual;
        continue;
      // string eventCat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_eventcat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.eventCat"));
        } else
          goto handle_unusual;
        continue;
      // string eventName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_eventname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.eventName"));
        } else
          goto handle_unusual;
        continue;
      // int32 eventPos = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.eventpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.id"));
        } else
          goto handle_unusual;
        continue;
      // string industry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_industry();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.industry"));
        } else
          goto handle_unusual;
        continue;
      // double newsHot = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.newshot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string newsTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_newstime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.newsTime"));
        } else
          goto handle_unusual;
        continue;
      // string summ = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_summ();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.summ"));
        } else
          goto handle_unusual;
        continue;
      // string title = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.title"));
        } else
          goto handle_unusual;
        continue;
      // string url = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNews.url"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_newsemotion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_seculist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_peremlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_comemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADNewsDataEntry sentimentContent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sentimentcontent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADNews::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADNews)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // string author = 8;
  if (!this->_internal_author().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.author");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_author(), target);
  }

  // string content = 9;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.content");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_content(), target);
  }

  // string eventCat = 10;
  if (!this->_internal_eventcat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eventcat().data(), static_cast<int>(this->_internal_eventcat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.eventCat");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_eventcat(), target);
  }

  // string eventName = 11;
  if (!this->_internal_eventname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eventname().data(), static_cast<int>(this->_internal_eventname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.eventName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_eventname(), target);
  }

  // int32 eventPos = 12;
  if (this->_internal_eventpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_eventpos(), target);
  }

  // string id = 13;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_id(), target);
  }

  // string industry = 14;
  if (!this->_internal_industry().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_industry().data(), static_cast<int>(this->_internal_industry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.industry");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_industry(), target);
  }

  // double newsHot = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_newshot = this->_internal_newshot();
  uint64_t raw_newshot;
  memcpy(&raw_newshot, &tmp_newshot, sizeof(tmp_newshot));
  if (raw_newshot != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_newshot(), target);
  }

  // string newsTime = 16;
  if (!this->_internal_newstime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newstime().data(), static_cast<int>(this->_internal_newstime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.newsTime");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_newstime(), target);
  }

  // string summ = 17;
  if (!this->_internal_summ().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summ().data(), static_cast<int>(this->_internal_summ().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.summ");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_summ(), target);
  }

  // string title = 18;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.title");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_title(), target);
  }

  // string url = 19;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.url");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_url(), target);
  }

  // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
  if (this->_internal_has_newsemotion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::newsemotion(this),
        _Internal::newsemotion(this).GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_seculist_size()); i < n; i++) {
    const auto& repfield = this->_internal_seculist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peremlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_peremlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_comemlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_comemlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 24;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_datamultiplepowerof10(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADNewsDataEntry sentimentContent = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sentimentcontent_size()); i < n; i++) {
    const auto& repfield = this->_internal_sentimentcontent(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADNews)
  return target;
}

size_t ADNews::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADNews)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
  total_size += 2UL * this->_internal_seculist_size();
  for (const auto& msg : this->_impl_.seculist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
  total_size += 2UL * this->_internal_peremlist_size();
  for (const auto& msg : this->_impl_.peremlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
  total_size += 2UL * this->_internal_comemlist_size();
  for (const auto& msg : this->_impl_.comemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.ADNewsDataEntry sentimentContent = 25;
  total_size += 2UL * this->_internal_sentimentcontent_size();
  for (const auto& msg : this->_impl_.sentimentcontent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // string author = 8;
  if (!this->_internal_author().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // string content = 9;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string eventCat = 10;
  if (!this->_internal_eventcat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eventcat());
  }

  // string eventName = 11;
  if (!this->_internal_eventname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eventname());
  }

  // string id = 13;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string industry = 14;
  if (!this->_internal_industry().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_industry());
  }

  // string newsTime = 16;
  if (!this->_internal_newstime().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newstime());
  }

  // string summ = 17;
  if (!this->_internal_summ().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summ());
  }

  // string title = 18;
  if (!this->_internal_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string url = 19;
  if (!this->_internal_url().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
  if (this->_internal_has_newsemotion()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newsemotion_);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // double newsHot = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_newshot = this->_internal_newshot();
  uint64_t raw_newshot;
  memcpy(&raw_newshot, &tmp_newshot, sizeof(tmp_newshot));
  if (raw_newshot != 0) {
    total_size += 1 + 8;
  }

  // int32 eventPos = 12;
  if (this->_internal_eventpos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventpos());
  }

  // int32 DataMultiplePowerOf10 = 24;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADNews::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADNews::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADNews::GetClassData() const { return &_class_data_; }


void ADNews::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADNews*>(&to_msg);
  auto& from = static_cast<const ADNews&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADNews)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.seculist_.MergeFrom(from._impl_.seculist_);
  _this->_impl_.peremlist_.MergeFrom(from._impl_.peremlist_);
  _this->_impl_.comemlist_.MergeFrom(from._impl_.comemlist_);
  _this->_impl_.sentimentcontent_.MergeFrom(from._impl_.sentimentcontent_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (!from._internal_author().empty()) {
    _this->_internal_set_author(from._internal_author());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_eventcat().empty()) {
    _this->_internal_set_eventcat(from._internal_eventcat());
  }
  if (!from._internal_eventname().empty()) {
    _this->_internal_set_eventname(from._internal_eventname());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_industry().empty()) {
    _this->_internal_set_industry(from._internal_industry());
  }
  if (!from._internal_newstime().empty()) {
    _this->_internal_set_newstime(from._internal_newstime());
  }
  if (!from._internal_summ().empty()) {
    _this->_internal_set_summ(from._internal_summ());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_newsemotion()) {
    _this->_internal_mutable_newsemotion()->::com::htsc::mdc::insight::model::ADNewsEmotion::MergeFrom(
        from._internal_newsemotion());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_newshot = from._internal_newshot();
  uint64_t raw_newshot;
  memcpy(&raw_newshot, &tmp_newshot, sizeof(tmp_newshot));
  if (raw_newshot != 0) {
    _this->_internal_set_newshot(from._internal_newshot());
  }
  if (from._internal_eventpos() != 0) {
    _this->_internal_set_eventpos(from._internal_eventpos());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADNews::CopyFrom(const ADNews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADNews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADNews::IsInitialized() const {
  return true;
}

void ADNews::InternalSwap(ADNews* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.seculist_.InternalSwap(&other->_impl_.seculist_);
  _impl_.peremlist_.InternalSwap(&other->_impl_.peremlist_);
  _impl_.comemlist_.InternalSwap(&other->_impl_.comemlist_);
  _impl_.sentimentcontent_.InternalSwap(&other->_impl_.sentimentcontent_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_, lhs_arena,
      &other->_impl_.author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eventcat_, lhs_arena,
      &other->_impl_.eventcat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eventname_, lhs_arena,
      &other->_impl_.eventname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.industry_, lhs_arena,
      &other->_impl_.industry_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newstime_, lhs_arena,
      &other->_impl_.newstime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.summ_, lhs_arena,
      &other->_impl_.summ_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADNews, _impl_.datamultiplepowerof10_)
      + sizeof(ADNews::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(ADNews, _impl_.newsemotion_)>(
          reinterpret_cast<char*>(&_impl_.newsemotion_),
          reinterpret_cast<char*>(&other->_impl_.newsemotion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADNews::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADNews_2eproto_getter, &descriptor_table_ADNews_2eproto_once,
      file_level_metadata_ADNews_2eproto[0]);
}

// ===================================================================

class ADNewsEmotion::_Internal {
 public:
};

ADNewsEmotion::ADNewsEmotion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADNewsEmotion)
}
ADNewsEmotion::ADNewsEmotion(const ADNewsEmotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADNewsEmotion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.negative_){}
    , decltype(_impl_.neutral_){}
    , decltype(_impl_.positive_){}
    , decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.negative_, &from._impl_.negative_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pos_) -
    reinterpret_cast<char*>(&_impl_.negative_)) + sizeof(_impl_.pos_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADNewsEmotion)
}

inline void ADNewsEmotion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.negative_){0}
    , decltype(_impl_.neutral_){0}
    , decltype(_impl_.positive_){0}
    , decltype(_impl_.pos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADNewsEmotion::~ADNewsEmotion() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADNewsEmotion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADNewsEmotion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADNewsEmotion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADNewsEmotion::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.negative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pos_) -
      reinterpret_cast<char*>(&_impl_.negative_)) + sizeof(_impl_.pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADNewsEmotion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double negative = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.negative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double neutral = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.neutral_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double positive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.positive_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADNewsEmotion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double negative = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_negative = this->_internal_negative();
  uint64_t raw_negative;
  memcpy(&raw_negative, &tmp_negative, sizeof(tmp_negative));
  if (raw_negative != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_negative(), target);
  }

  // double neutral = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_neutral = this->_internal_neutral();
  uint64_t raw_neutral;
  memcpy(&raw_neutral, &tmp_neutral, sizeof(tmp_neutral));
  if (raw_neutral != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_neutral(), target);
  }

  // int32 pos = 3;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pos(), target);
  }

  // double positive = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_positive = this->_internal_positive();
  uint64_t raw_positive;
  memcpy(&raw_positive, &tmp_positive, sizeof(tmp_positive));
  if (raw_positive != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_positive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADNewsEmotion)
  return target;
}

size_t ADNewsEmotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double negative = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_negative = this->_internal_negative();
  uint64_t raw_negative;
  memcpy(&raw_negative, &tmp_negative, sizeof(tmp_negative));
  if (raw_negative != 0) {
    total_size += 1 + 8;
  }

  // double neutral = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_neutral = this->_internal_neutral();
  uint64_t raw_neutral;
  memcpy(&raw_neutral, &tmp_neutral, sizeof(tmp_neutral));
  if (raw_neutral != 0) {
    total_size += 1 + 8;
  }

  // double positive = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_positive = this->_internal_positive();
  uint64_t raw_positive;
  memcpy(&raw_positive, &tmp_positive, sizeof(tmp_positive));
  if (raw_positive != 0) {
    total_size += 1 + 8;
  }

  // int32 pos = 3;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADNewsEmotion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADNewsEmotion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADNewsEmotion::GetClassData() const { return &_class_data_; }


void ADNewsEmotion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADNewsEmotion*>(&to_msg);
  auto& from = static_cast<const ADNewsEmotion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_negative = from._internal_negative();
  uint64_t raw_negative;
  memcpy(&raw_negative, &tmp_negative, sizeof(tmp_negative));
  if (raw_negative != 0) {
    _this->_internal_set_negative(from._internal_negative());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_neutral = from._internal_neutral();
  uint64_t raw_neutral;
  memcpy(&raw_neutral, &tmp_neutral, sizeof(tmp_neutral));
  if (raw_neutral != 0) {
    _this->_internal_set_neutral(from._internal_neutral());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_positive = from._internal_positive();
  uint64_t raw_positive;
  memcpy(&raw_positive, &tmp_positive, sizeof(tmp_positive));
  if (raw_positive != 0) {
    _this->_internal_set_positive(from._internal_positive());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADNewsEmotion::CopyFrom(const ADNewsEmotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADNewsEmotion::IsInitialized() const {
  return true;
}

void ADNewsEmotion::InternalSwap(ADNewsEmotion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADNewsEmotion, _impl_.pos_)
      + sizeof(ADNewsEmotion::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(ADNewsEmotion, _impl_.negative_)>(
          reinterpret_cast<char*>(&_impl_.negative_),
          reinterpret_cast<char*>(&other->_impl_.negative_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADNewsEmotion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADNews_2eproto_getter, &descriptor_table_ADNews_2eproto_once,
      file_level_metadata_ADNews_2eproto[1]);
}

// ===================================================================

class ADInvolvedSecurity::_Internal {
 public:
};

ADInvolvedSecurity::ADInvolvedSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADInvolvedSecurity)
}
ADInvolvedSecurity::ADInvolvedSecurity(const ADInvolvedSecurity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADInvolvedSecurity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comcode_){}
    , decltype(_impl_.secucode_){}
    , decltype(_impl_.secuname_){}
    , decltype(_impl_.htscsecurityid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comcode().empty()) {
    _this->_impl_.comcode_.Set(from._internal_comcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secucode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secucode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secucode().empty()) {
    _this->_impl_.secucode_.Set(from._internal_secucode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secuname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secuname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secuname().empty()) {
    _this->_impl_.secuname_.Set(from._internal_secuname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADInvolvedSecurity)
}

inline void ADInvolvedSecurity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comcode_){}
    , decltype(_impl_.secucode_){}
    , decltype(_impl_.secuname_){}
    , decltype(_impl_.htscsecurityid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secucode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secucode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secuname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secuname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADInvolvedSecurity::~ADInvolvedSecurity() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADInvolvedSecurity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comcode_.Destroy();
  _impl_.secucode_.Destroy();
  _impl_.secuname_.Destroy();
  _impl_.htscsecurityid_.Destroy();
}

void ADInvolvedSecurity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADInvolvedSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comcode_.ClearToEmpty();
  _impl_.secucode_.ClearToEmpty();
  _impl_.secuname_.ClearToEmpty();
  _impl_.htscsecurityid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADInvolvedSecurity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string comCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_comcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode"));
        } else
          goto handle_unusual;
        continue;
      // string secuCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secucode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode"));
        } else
          goto handle_unusual;
        continue;
      // string secuName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secuname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName"));
        } else
          goto handle_unusual;
        continue;
      // string HTSCSecurityID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADInvolvedSecurity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string comCode = 1;
  if (!this->_internal_comcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comcode().data(), static_cast<int>(this->_internal_comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comcode(), target);
  }

  // string secuCode = 2;
  if (!this->_internal_secucode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secucode().data(), static_cast<int>(this->_internal_secucode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secucode(), target);
  }

  // string secuName = 3;
  if (!this->_internal_secuname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secuname().data(), static_cast<int>(this->_internal_secuname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secuname(), target);
  }

  // string HTSCSecurityID = 4;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_htscsecurityid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  return target;
}

size_t ADInvolvedSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comCode = 1;
  if (!this->_internal_comcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comcode());
  }

  // string secuCode = 2;
  if (!this->_internal_secucode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secucode());
  }

  // string secuName = 3;
  if (!this->_internal_secuname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secuname());
  }

  // string HTSCSecurityID = 4;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADInvolvedSecurity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADInvolvedSecurity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADInvolvedSecurity::GetClassData() const { return &_class_data_; }


void ADInvolvedSecurity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADInvolvedSecurity*>(&to_msg);
  auto& from = static_cast<const ADInvolvedSecurity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_comcode().empty()) {
    _this->_internal_set_comcode(from._internal_comcode());
  }
  if (!from._internal_secucode().empty()) {
    _this->_internal_set_secucode(from._internal_secucode());
  }
  if (!from._internal_secuname().empty()) {
    _this->_internal_set_secuname(from._internal_secuname());
  }
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADInvolvedSecurity::CopyFrom(const ADInvolvedSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADInvolvedSecurity::IsInitialized() const {
  return true;
}

void ADInvolvedSecurity::InternalSwap(ADInvolvedSecurity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comcode_, lhs_arena,
      &other->_impl_.comcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secucode_, lhs_arena,
      &other->_impl_.secucode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secuname_, lhs_arena,
      &other->_impl_.secuname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ADInvolvedSecurity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADNews_2eproto_getter, &descriptor_table_ADNews_2eproto_once,
      file_level_metadata_ADNews_2eproto[2]);
}

// ===================================================================

class ADRelatedCompany::_Internal {
 public:
};

ADRelatedCompany::ADRelatedCompany(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADRelatedCompany)
}
ADRelatedCompany::ADRelatedCompany(const ADRelatedCompany& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADRelatedCompany* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chiname_){}
    , decltype(_impl_.comcode_){}
    , decltype(_impl_.com_){}
    , decltype(_impl_.secucode_){}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.generalpos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chiname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chiname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chiname().empty()) {
    _this->_impl_.chiname_.Set(from._internal_chiname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comcode().empty()) {
    _this->_impl_.comcode_.Set(from._internal_comcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.com_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.com_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_com().empty()) {
    _this->_impl_.com_.Set(from._internal_com(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secucode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secucode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secucode().empty()) {
    _this->_impl_.secucode_.Set(from._internal_secucode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.generalpos_ = from._impl_.generalpos_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADRelatedCompany)
}

inline void ADRelatedCompany::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chiname_){}
    , decltype(_impl_.comcode_){}
    , decltype(_impl_.com_){}
    , decltype(_impl_.secucode_){}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.generalpos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chiname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chiname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.com_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.com_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secucode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secucode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADRelatedCompany::~ADRelatedCompany() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADRelatedCompany)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADRelatedCompany::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chiname_.Destroy();
  _impl_.comcode_.Destroy();
  _impl_.com_.Destroy();
  _impl_.secucode_.Destroy();
  _impl_.htscsecurityid_.Destroy();
}

void ADRelatedCompany::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADRelatedCompany::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chiname_.ClearToEmpty();
  _impl_.comcode_.ClearToEmpty();
  _impl_.com_.ClearToEmpty();
  _impl_.secucode_.ClearToEmpty();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.generalpos_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADRelatedCompany::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chiname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chiname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADRelatedCompany.chiname"));
        } else
          goto handle_unusual;
        continue;
      // string comCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADRelatedCompany.comCode"));
        } else
          goto handle_unusual;
        continue;
      // string com = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_com();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADRelatedCompany.com"));
        } else
          goto handle_unusual;
        continue;
      // int32 generalPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.generalpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secuCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_secucode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADRelatedCompany.secuCode"));
        } else
          goto handle_unusual;
        continue;
      // string HTSCSecurityID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADRelatedCompany::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chiname = 1;
  if (!this->_internal_chiname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chiname().data(), static_cast<int>(this->_internal_chiname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.chiname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chiname(), target);
  }

  // string comCode = 2;
  if (!this->_internal_comcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comcode().data(), static_cast<int>(this->_internal_comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.comCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comcode(), target);
  }

  // string com = 3;
  if (!this->_internal_com().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_com().data(), static_cast<int>(this->_internal_com().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.com");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_com(), target);
  }

  // int32 generalPos = 4;
  if (this->_internal_generalpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_generalpos(), target);
  }

  // string secuCode = 5;
  if (!this->_internal_secucode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secucode().data(), static_cast<int>(this->_internal_secucode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.secuCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secucode(), target);
  }

  // string HTSCSecurityID = 6;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_htscsecurityid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADRelatedCompany)
  return target;
}

size_t ADRelatedCompany::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chiname = 1;
  if (!this->_internal_chiname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chiname());
  }

  // string comCode = 2;
  if (!this->_internal_comcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comcode());
  }

  // string com = 3;
  if (!this->_internal_com().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_com());
  }

  // string secuCode = 5;
  if (!this->_internal_secucode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secucode());
  }

  // string HTSCSecurityID = 6;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // int32 generalPos = 4;
  if (this->_internal_generalpos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_generalpos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADRelatedCompany::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADRelatedCompany::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADRelatedCompany::GetClassData() const { return &_class_data_; }


void ADRelatedCompany::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADRelatedCompany*>(&to_msg);
  auto& from = static_cast<const ADRelatedCompany&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chiname().empty()) {
    _this->_internal_set_chiname(from._internal_chiname());
  }
  if (!from._internal_comcode().empty()) {
    _this->_internal_set_comcode(from._internal_comcode());
  }
  if (!from._internal_com().empty()) {
    _this->_internal_set_com(from._internal_com());
  }
  if (!from._internal_secucode().empty()) {
    _this->_internal_set_secucode(from._internal_secucode());
  }
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (from._internal_generalpos() != 0) {
    _this->_internal_set_generalpos(from._internal_generalpos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADRelatedCompany::CopyFrom(const ADRelatedCompany& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADRelatedCompany::IsInitialized() const {
  return true;
}

void ADRelatedCompany::InternalSwap(ADRelatedCompany* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chiname_, lhs_arena,
      &other->_impl_.chiname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comcode_, lhs_arena,
      &other->_impl_.comcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.com_, lhs_arena,
      &other->_impl_.com_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secucode_, lhs_arena,
      &other->_impl_.secucode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  swap(_impl_.generalpos_, other->_impl_.generalpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADRelatedCompany::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADNews_2eproto_getter, &descriptor_table_ADNews_2eproto_once,
      file_level_metadata_ADNews_2eproto[3]);
}

// ===================================================================

class ADRelatedPerson::_Internal {
 public:
};

ADRelatedPerson::ADRelatedPerson(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADRelatedPerson)
}
ADRelatedPerson::ADRelatedPerson(const ADRelatedPerson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADRelatedPerson* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.per_){}
    , decltype(_impl_.comcode_){}
    , decltype(_impl_.com_){}
    , decltype(_impl_.generalpos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.per_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.per_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_per().empty()) {
    _this->_impl_.per_.Set(from._internal_per(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comcode().empty()) {
    _this->_impl_.comcode_.Set(from._internal_comcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.com_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.com_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_com().empty()) {
    _this->_impl_.com_.Set(from._internal_com(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.generalpos_ = from._impl_.generalpos_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADRelatedPerson)
}

inline void ADRelatedPerson::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.per_){}
    , decltype(_impl_.comcode_){}
    , decltype(_impl_.com_){}
    , decltype(_impl_.generalpos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.per_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.per_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.com_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.com_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADRelatedPerson::~ADRelatedPerson() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADRelatedPerson)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADRelatedPerson::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.per_.Destroy();
  _impl_.comcode_.Destroy();
  _impl_.com_.Destroy();
}

void ADRelatedPerson::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADRelatedPerson::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.per_.ClearToEmpty();
  _impl_.comcode_.ClearToEmpty();
  _impl_.com_.ClearToEmpty();
  _impl_.generalpos_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADRelatedPerson::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string per = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_per();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADRelatedPerson.per"));
        } else
          goto handle_unusual;
        continue;
      // string comCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADRelatedPerson.comCode"));
        } else
          goto handle_unusual;
        continue;
      // string com = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_com();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADRelatedPerson.com"));
        } else
          goto handle_unusual;
        continue;
      // int32 generalPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.generalpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADRelatedPerson::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string per = 1;
  if (!this->_internal_per().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_per().data(), static_cast<int>(this->_internal_per().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.per");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_per(), target);
  }

  // string comCode = 2;
  if (!this->_internal_comcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comcode().data(), static_cast<int>(this->_internal_comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.comCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comcode(), target);
  }

  // string com = 3;
  if (!this->_internal_com().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_com().data(), static_cast<int>(this->_internal_com().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.com");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_com(), target);
  }

  // int32 generalPos = 4;
  if (this->_internal_generalpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_generalpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADRelatedPerson)
  return target;
}

size_t ADRelatedPerson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string per = 1;
  if (!this->_internal_per().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_per());
  }

  // string comCode = 2;
  if (!this->_internal_comcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comcode());
  }

  // string com = 3;
  if (!this->_internal_com().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_com());
  }

  // int32 generalPos = 4;
  if (this->_internal_generalpos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_generalpos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADRelatedPerson::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADRelatedPerson::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADRelatedPerson::GetClassData() const { return &_class_data_; }


void ADRelatedPerson::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADRelatedPerson*>(&to_msg);
  auto& from = static_cast<const ADRelatedPerson&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_per().empty()) {
    _this->_internal_set_per(from._internal_per());
  }
  if (!from._internal_comcode().empty()) {
    _this->_internal_set_comcode(from._internal_comcode());
  }
  if (!from._internal_com().empty()) {
    _this->_internal_set_com(from._internal_com());
  }
  if (from._internal_generalpos() != 0) {
    _this->_internal_set_generalpos(from._internal_generalpos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADRelatedPerson::CopyFrom(const ADRelatedPerson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADRelatedPerson::IsInitialized() const {
  return true;
}

void ADRelatedPerson::InternalSwap(ADRelatedPerson* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.per_, lhs_arena,
      &other->_impl_.per_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comcode_, lhs_arena,
      &other->_impl_.comcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.com_, lhs_arena,
      &other->_impl_.com_, rhs_arena
  );
  swap(_impl_.generalpos_, other->_impl_.generalpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADRelatedPerson::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADNews_2eproto_getter, &descriptor_table_ADNews_2eproto_once,
      file_level_metadata_ADNews_2eproto[4]);
}

// ===================================================================

class ADNewsDataEntry::_Internal {
 public:
};

ADNewsDataEntry::ADNewsDataEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADNewsDataEntry)
}
ADNewsDataEntry::ADNewsDataEntry(const ADNewsDataEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADNewsDataEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADNewsDataEntry)
}

inline void ADNewsDataEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADNewsDataEntry::~ADNewsDataEntry() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADNewsDataEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADNewsDataEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void ADNewsDataEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADNewsDataEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADNewsDataEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADNewsDataEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNewsDataEntry.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADNewsDataEntry.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADNewsDataEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADNewsDataEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNewsDataEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNewsDataEntry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADNewsDataEntry)
  return target;
}

size_t ADNewsDataEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADNewsDataEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADNewsDataEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADNewsDataEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADNewsDataEntry::GetClassData() const { return &_class_data_; }


void ADNewsDataEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADNewsDataEntry*>(&to_msg);
  auto& from = static_cast<const ADNewsDataEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADNewsDataEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADNewsDataEntry::CopyFrom(const ADNewsDataEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADNewsDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADNewsDataEntry::IsInitialized() const {
  return true;
}

void ADNewsDataEntry::InternalSwap(ADNewsDataEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ADNewsDataEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADNews_2eproto_getter, &descriptor_table_ADNews_2eproto_once,
      file_level_metadata_ADNews_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADNews*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADNews >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADNews >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADNewsEmotion*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADNewsEmotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADNewsEmotion >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADInvolvedSecurity*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADRelatedCompany*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADRelatedCompany >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADRelatedCompany >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADRelatedPerson*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADRelatedPerson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADRelatedPerson >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADNewsDataEntry*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADNewsDataEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADNewsDataEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
