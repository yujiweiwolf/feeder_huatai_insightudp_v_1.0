// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCfetsCurrencySnapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDCfetsCurrencySnapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDCfetsCurrencySnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDCfetsCurrencySnapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDCfetsCurrencySnapshot_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDCfetsCurrencySnapshot_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class CollateralRepoSnapshot;
struct CollateralRepoSnapshotDefaultTypeInternal;
extern CollateralRepoSnapshotDefaultTypeInternal _CollateralRepoSnapshot_default_instance_;
class InterBankOfferingSnapshot;
struct InterBankOfferingSnapshotDefaultTypeInternal;
extern InterBankOfferingSnapshotDefaultTypeInternal _InterBankOfferingSnapshot_default_instance_;
class MDCfetsCurrencySnapshot;
struct MDCfetsCurrencySnapshotDefaultTypeInternal;
extern MDCfetsCurrencySnapshotDefaultTypeInternal _MDCfetsCurrencySnapshot_default_instance_;
class OutrightRepoSnapshot;
struct OutrightRepoSnapshotDefaultTypeInternal;
extern OutrightRepoSnapshotDefaultTypeInternal _OutrightRepoSnapshot_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::CollateralRepoSnapshot>(Arena*);
template<> ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::InterBankOfferingSnapshot>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCfetsCurrencySnapshot>(Arena*);
template<> ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::OutrightRepoSnapshot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCfetsCurrencySnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot) */ {
 public:
  inline MDCfetsCurrencySnapshot() : MDCfetsCurrencySnapshot(nullptr) {}
  ~MDCfetsCurrencySnapshot() override;
  explicit PROTOBUF_CONSTEXPR MDCfetsCurrencySnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDCfetsCurrencySnapshot(const MDCfetsCurrencySnapshot& from);
  MDCfetsCurrencySnapshot(MDCfetsCurrencySnapshot&& from) noexcept
    : MDCfetsCurrencySnapshot() {
    *this = ::std::move(from);
  }

  inline MDCfetsCurrencySnapshot& operator=(const MDCfetsCurrencySnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCfetsCurrencySnapshot& operator=(MDCfetsCurrencySnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDCfetsCurrencySnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDCfetsCurrencySnapshot* internal_default_instance() {
    return reinterpret_cast<const MDCfetsCurrencySnapshot*>(
               &_MDCfetsCurrencySnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDCfetsCurrencySnapshot& a, MDCfetsCurrencySnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(MDCfetsCurrencySnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDCfetsCurrencySnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDCfetsCurrencySnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDCfetsCurrencySnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDCfetsCurrencySnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDCfetsCurrencySnapshot& from) {
    MDCfetsCurrencySnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCfetsCurrencySnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot";
  }
  protected:
  explicit MDCfetsCurrencySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kTransactTimeFieldNumber = 7,
    kMarketIndicatorFieldNumber = 8,
    kInterBankOfferingSnapshotFieldNumber = 10,
    kCollateralRepoSnapshotFieldNumber = 11,
    kOutrightRepoSnapshotFieldNumber = 12,
    kSecurityTypeFieldNumber = 2,
    kSecurityIDSourceFieldNumber = 3,
    kMDDateFieldNumber = 4,
    kMDTimeFieldNumber = 5,
    kDataTimestampFieldNumber = 6,
    kCurrencySnapshotTypeFieldNumber = 9,
    kDataMultiplePowerOf10FieldNumber = 13,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TransactTime = 7;
  void clear_transacttime();
  const std::string& transacttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transacttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transacttime();
  PROTOBUF_NODISCARD std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // string MarketIndicator = 8;
  void clear_marketindicator();
  const std::string& marketindicator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_marketindicator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_marketindicator();
  PROTOBUF_NODISCARD std::string* release_marketindicator();
  void set_allocated_marketindicator(std::string* marketindicator);
  private:
  const std::string& _internal_marketindicator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marketindicator(const std::string& value);
  std::string* _internal_mutable_marketindicator();
  public:

  // .com.htsc.mdc.insight.model.InterBankOfferingSnapshot interBankOfferingSnapshot = 10;
  bool has_interbankofferingsnapshot() const;
  private:
  bool _internal_has_interbankofferingsnapshot() const;
  public:
  void clear_interbankofferingsnapshot();
  const ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot& interbankofferingsnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* release_interbankofferingsnapshot();
  ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* mutable_interbankofferingsnapshot();
  void set_allocated_interbankofferingsnapshot(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* interbankofferingsnapshot);
  private:
  const ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot& _internal_interbankofferingsnapshot() const;
  ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* _internal_mutable_interbankofferingsnapshot();
  public:
  void unsafe_arena_set_allocated_interbankofferingsnapshot(
      ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* interbankofferingsnapshot);
  ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* unsafe_arena_release_interbankofferingsnapshot();

  // .com.htsc.mdc.insight.model.CollateralRepoSnapshot collateralRepoSnapshot = 11;
  bool has_collateralreposnapshot() const;
  private:
  bool _internal_has_collateralreposnapshot() const;
  public:
  void clear_collateralreposnapshot();
  const ::com::htsc::mdc::insight::model::CollateralRepoSnapshot& collateralreposnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* release_collateralreposnapshot();
  ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* mutable_collateralreposnapshot();
  void set_allocated_collateralreposnapshot(::com::htsc::mdc::insight::model::CollateralRepoSnapshot* collateralreposnapshot);
  private:
  const ::com::htsc::mdc::insight::model::CollateralRepoSnapshot& _internal_collateralreposnapshot() const;
  ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* _internal_mutable_collateralreposnapshot();
  public:
  void unsafe_arena_set_allocated_collateralreposnapshot(
      ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* collateralreposnapshot);
  ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* unsafe_arena_release_collateralreposnapshot();

  // .com.htsc.mdc.insight.model.OutrightRepoSnapshot outrightRepoSnapshot = 12;
  bool has_outrightreposnapshot() const;
  private:
  bool _internal_has_outrightreposnapshot() const;
  public:
  void clear_outrightreposnapshot();
  const ::com::htsc::mdc::insight::model::OutrightRepoSnapshot& outrightreposnapshot() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* release_outrightreposnapshot();
  ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* mutable_outrightreposnapshot();
  void set_allocated_outrightreposnapshot(::com::htsc::mdc::insight::model::OutrightRepoSnapshot* outrightreposnapshot);
  private:
  const ::com::htsc::mdc::insight::model::OutrightRepoSnapshot& _internal_outrightreposnapshot() const;
  ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* _internal_mutable_outrightreposnapshot();
  public:
  void unsafe_arena_set_allocated_outrightreposnapshot(
      ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* outrightreposnapshot);
  ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* unsafe_arena_release_outrightreposnapshot();

  // .com.htsc.mdc.model.ESecurityType SecurityType = 2;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource SecurityIDSource = 3;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // int32 MDDate = 4;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 5;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 6;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // int32 CurrencySnapshotType = 9;
  void clear_currencysnapshottype();
  int32_t currencysnapshottype() const;
  void set_currencysnapshottype(int32_t value);
  private:
  int32_t _internal_currencysnapshottype() const;
  void _internal_set_currencysnapshottype(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 13;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketindicator_;
    ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* interbankofferingsnapshot_;
    ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* collateralreposnapshot_;
    ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* outrightreposnapshot_;
    int securitytype_;
    int securityidsource_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int32_t currencysnapshottype_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsCurrencySnapshot_2eproto;
};
// -------------------------------------------------------------------

class InterBankOfferingSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.InterBankOfferingSnapshot) */ {
 public:
  inline InterBankOfferingSnapshot() : InterBankOfferingSnapshot(nullptr) {}
  ~InterBankOfferingSnapshot() override;
  explicit PROTOBUF_CONSTEXPR InterBankOfferingSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterBankOfferingSnapshot(const InterBankOfferingSnapshot& from);
  InterBankOfferingSnapshot(InterBankOfferingSnapshot&& from) noexcept
    : InterBankOfferingSnapshot() {
    *this = ::std::move(from);
  }

  inline InterBankOfferingSnapshot& operator=(const InterBankOfferingSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterBankOfferingSnapshot& operator=(InterBankOfferingSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InterBankOfferingSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterBankOfferingSnapshot* internal_default_instance() {
    return reinterpret_cast<const InterBankOfferingSnapshot*>(
               &_InterBankOfferingSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InterBankOfferingSnapshot& a, InterBankOfferingSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(InterBankOfferingSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterBankOfferingSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InterBankOfferingSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InterBankOfferingSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InterBankOfferingSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InterBankOfferingSnapshot& from) {
    InterBankOfferingSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterBankOfferingSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.InterBankOfferingSnapshot";
  }
  protected:
  explicit InterBankOfferingSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreCloseRateFieldNumber = 1,
    kPreWeightedRateFieldNumber = 2,
    kOpenRateFieldNumber = 3,
    kLastRateFieldNumber = 4,
    kHighRateFieldNumber = 5,
    kLowRateFieldNumber = 6,
    kCloseRateFieldNumber = 7,
    kWeightedRateFieldNumber = 8,
    kTotalValueTradeFieldNumber = 9,
    kAverageTermFieldNumber = 11,
    kNumTradesFieldNumber = 10,
  };
  // int64 PreCloseRate = 1;
  void clear_precloserate();
  int64_t precloserate() const;
  void set_precloserate(int64_t value);
  private:
  int64_t _internal_precloserate() const;
  void _internal_set_precloserate(int64_t value);
  public:

  // int64 PreWeightedRate = 2;
  void clear_preweightedrate();
  int64_t preweightedrate() const;
  void set_preweightedrate(int64_t value);
  private:
  int64_t _internal_preweightedrate() const;
  void _internal_set_preweightedrate(int64_t value);
  public:

  // int64 OpenRate = 3;
  void clear_openrate();
  int64_t openrate() const;
  void set_openrate(int64_t value);
  private:
  int64_t _internal_openrate() const;
  void _internal_set_openrate(int64_t value);
  public:

  // int64 LastRate = 4;
  void clear_lastrate();
  int64_t lastrate() const;
  void set_lastrate(int64_t value);
  private:
  int64_t _internal_lastrate() const;
  void _internal_set_lastrate(int64_t value);
  public:

  // int64 HighRate = 5;
  void clear_highrate();
  int64_t highrate() const;
  void set_highrate(int64_t value);
  private:
  int64_t _internal_highrate() const;
  void _internal_set_highrate(int64_t value);
  public:

  // int64 LowRate = 6;
  void clear_lowrate();
  int64_t lowrate() const;
  void set_lowrate(int64_t value);
  private:
  int64_t _internal_lowrate() const;
  void _internal_set_lowrate(int64_t value);
  public:

  // int64 CloseRate = 7;
  void clear_closerate();
  int64_t closerate() const;
  void set_closerate(int64_t value);
  private:
  int64_t _internal_closerate() const;
  void _internal_set_closerate(int64_t value);
  public:

  // int64 WeightedRate = 8;
  void clear_weightedrate();
  int64_t weightedrate() const;
  void set_weightedrate(int64_t value);
  private:
  int64_t _internal_weightedrate() const;
  void _internal_set_weightedrate(int64_t value);
  public:

  // int64 TotalValueTrade = 9;
  void clear_totalvaluetrade();
  int64_t totalvaluetrade() const;
  void set_totalvaluetrade(int64_t value);
  private:
  int64_t _internal_totalvaluetrade() const;
  void _internal_set_totalvaluetrade(int64_t value);
  public:

  // int64 AverageTerm = 11;
  void clear_averageterm();
  int64_t averageterm() const;
  void set_averageterm(int64_t value);
  private:
  int64_t _internal_averageterm() const;
  void _internal_set_averageterm(int64_t value);
  public:

  // int32 NumTrades = 10;
  void clear_numtrades();
  int32_t numtrades() const;
  void set_numtrades(int32_t value);
  private:
  int32_t _internal_numtrades() const;
  void _internal_set_numtrades(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.InterBankOfferingSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t precloserate_;
    int64_t preweightedrate_;
    int64_t openrate_;
    int64_t lastrate_;
    int64_t highrate_;
    int64_t lowrate_;
    int64_t closerate_;
    int64_t weightedrate_;
    int64_t totalvaluetrade_;
    int64_t averageterm_;
    int32_t numtrades_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsCurrencySnapshot_2eproto;
};
// -------------------------------------------------------------------

class CollateralRepoSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.CollateralRepoSnapshot) */ {
 public:
  inline CollateralRepoSnapshot() : CollateralRepoSnapshot(nullptr) {}
  ~CollateralRepoSnapshot() override;
  explicit PROTOBUF_CONSTEXPR CollateralRepoSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollateralRepoSnapshot(const CollateralRepoSnapshot& from);
  CollateralRepoSnapshot(CollateralRepoSnapshot&& from) noexcept
    : CollateralRepoSnapshot() {
    *this = ::std::move(from);
  }

  inline CollateralRepoSnapshot& operator=(const CollateralRepoSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollateralRepoSnapshot& operator=(CollateralRepoSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollateralRepoSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollateralRepoSnapshot* internal_default_instance() {
    return reinterpret_cast<const CollateralRepoSnapshot*>(
               &_CollateralRepoSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CollateralRepoSnapshot& a, CollateralRepoSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(CollateralRepoSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollateralRepoSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollateralRepoSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollateralRepoSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollateralRepoSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollateralRepoSnapshot& from) {
    CollateralRepoSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollateralRepoSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.CollateralRepoSnapshot";
  }
  protected:
  explicit CollateralRepoSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreCloseRateFieldNumber = 2,
    kPreWeightedRateFieldNumber = 3,
    kOpenRateFieldNumber = 4,
    kLastRateFieldNumber = 5,
    kHighRateFieldNumber = 6,
    kTradeMethodFieldNumber = 1,
    kNumTradesFieldNumber = 11,
    kLowRateFieldNumber = 7,
    kCloseRateFieldNumber = 8,
    kWeightedRateFieldNumber = 9,
    kTotalValueTradeFieldNumber = 10,
    kAverageTermFieldNumber = 12,
    kIRBondWeightedRateFieldNumber = 13,
  };
  // int64 PreCloseRate = 2;
  void clear_precloserate();
  int64_t precloserate() const;
  void set_precloserate(int64_t value);
  private:
  int64_t _internal_precloserate() const;
  void _internal_set_precloserate(int64_t value);
  public:

  // int64 PreWeightedRate = 3;
  void clear_preweightedrate();
  int64_t preweightedrate() const;
  void set_preweightedrate(int64_t value);
  private:
  int64_t _internal_preweightedrate() const;
  void _internal_set_preweightedrate(int64_t value);
  public:

  // int64 OpenRate = 4;
  void clear_openrate();
  int64_t openrate() const;
  void set_openrate(int64_t value);
  private:
  int64_t _internal_openrate() const;
  void _internal_set_openrate(int64_t value);
  public:

  // int64 LastRate = 5;
  void clear_lastrate();
  int64_t lastrate() const;
  void set_lastrate(int64_t value);
  private:
  int64_t _internal_lastrate() const;
  void _internal_set_lastrate(int64_t value);
  public:

  // int64 HighRate = 6;
  void clear_highrate();
  int64_t highrate() const;
  void set_highrate(int64_t value);
  private:
  int64_t _internal_highrate() const;
  void _internal_set_highrate(int64_t value);
  public:

  // int32 TradeMethod = 1;
  void clear_trademethod();
  int32_t trademethod() const;
  void set_trademethod(int32_t value);
  private:
  int32_t _internal_trademethod() const;
  void _internal_set_trademethod(int32_t value);
  public:

  // int32 NumTrades = 11;
  void clear_numtrades();
  int32_t numtrades() const;
  void set_numtrades(int32_t value);
  private:
  int32_t _internal_numtrades() const;
  void _internal_set_numtrades(int32_t value);
  public:

  // int64 LowRate = 7;
  void clear_lowrate();
  int64_t lowrate() const;
  void set_lowrate(int64_t value);
  private:
  int64_t _internal_lowrate() const;
  void _internal_set_lowrate(int64_t value);
  public:

  // int64 CloseRate = 8;
  void clear_closerate();
  int64_t closerate() const;
  void set_closerate(int64_t value);
  private:
  int64_t _internal_closerate() const;
  void _internal_set_closerate(int64_t value);
  public:

  // int64 WeightedRate = 9;
  void clear_weightedrate();
  int64_t weightedrate() const;
  void set_weightedrate(int64_t value);
  private:
  int64_t _internal_weightedrate() const;
  void _internal_set_weightedrate(int64_t value);
  public:

  // int64 TotalValueTrade = 10;
  void clear_totalvaluetrade();
  int64_t totalvaluetrade() const;
  void set_totalvaluetrade(int64_t value);
  private:
  int64_t _internal_totalvaluetrade() const;
  void _internal_set_totalvaluetrade(int64_t value);
  public:

  // int64 AverageTerm = 12;
  void clear_averageterm();
  int64_t averageterm() const;
  void set_averageterm(int64_t value);
  private:
  int64_t _internal_averageterm() const;
  void _internal_set_averageterm(int64_t value);
  public:

  // int64 IRBondWeightedRate = 13;
  void clear_irbondweightedrate();
  int64_t irbondweightedrate() const;
  void set_irbondweightedrate(int64_t value);
  private:
  int64_t _internal_irbondweightedrate() const;
  void _internal_set_irbondweightedrate(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.CollateralRepoSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t precloserate_;
    int64_t preweightedrate_;
    int64_t openrate_;
    int64_t lastrate_;
    int64_t highrate_;
    int32_t trademethod_;
    int32_t numtrades_;
    int64_t lowrate_;
    int64_t closerate_;
    int64_t weightedrate_;
    int64_t totalvaluetrade_;
    int64_t averageterm_;
    int64_t irbondweightedrate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsCurrencySnapshot_2eproto;
};
// -------------------------------------------------------------------

class OutrightRepoSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.OutrightRepoSnapshot) */ {
 public:
  inline OutrightRepoSnapshot() : OutrightRepoSnapshot(nullptr) {}
  ~OutrightRepoSnapshot() override;
  explicit PROTOBUF_CONSTEXPR OutrightRepoSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutrightRepoSnapshot(const OutrightRepoSnapshot& from);
  OutrightRepoSnapshot(OutrightRepoSnapshot&& from) noexcept
    : OutrightRepoSnapshot() {
    *this = ::std::move(from);
  }

  inline OutrightRepoSnapshot& operator=(const OutrightRepoSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutrightRepoSnapshot& operator=(OutrightRepoSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutrightRepoSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutrightRepoSnapshot* internal_default_instance() {
    return reinterpret_cast<const OutrightRepoSnapshot*>(
               &_OutrightRepoSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OutrightRepoSnapshot& a, OutrightRepoSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(OutrightRepoSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutrightRepoSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutrightRepoSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutrightRepoSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutrightRepoSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutrightRepoSnapshot& from) {
    OutrightRepoSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutrightRepoSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.OutrightRepoSnapshot";
  }
  protected:
  explicit OutrightRepoSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreCloseRateFieldNumber = 1,
    kPreWeightedRateFieldNumber = 2,
    kOpenRateFieldNumber = 3,
    kLastRateFieldNumber = 4,
    kHighRateFieldNumber = 5,
    kLowRateFieldNumber = 6,
    kCloseRateFieldNumber = 7,
    kWeightedRateFieldNumber = 8,
    kTotalValueTradeFieldNumber = 9,
  };
  // int64 PreCloseRate = 1;
  void clear_precloserate();
  int64_t precloserate() const;
  void set_precloserate(int64_t value);
  private:
  int64_t _internal_precloserate() const;
  void _internal_set_precloserate(int64_t value);
  public:

  // int64 PreWeightedRate = 2;
  void clear_preweightedrate();
  int64_t preweightedrate() const;
  void set_preweightedrate(int64_t value);
  private:
  int64_t _internal_preweightedrate() const;
  void _internal_set_preweightedrate(int64_t value);
  public:

  // int64 OpenRate = 3;
  void clear_openrate();
  int64_t openrate() const;
  void set_openrate(int64_t value);
  private:
  int64_t _internal_openrate() const;
  void _internal_set_openrate(int64_t value);
  public:

  // int64 LastRate = 4;
  void clear_lastrate();
  int64_t lastrate() const;
  void set_lastrate(int64_t value);
  private:
  int64_t _internal_lastrate() const;
  void _internal_set_lastrate(int64_t value);
  public:

  // int64 HighRate = 5;
  void clear_highrate();
  int64_t highrate() const;
  void set_highrate(int64_t value);
  private:
  int64_t _internal_highrate() const;
  void _internal_set_highrate(int64_t value);
  public:

  // int64 LowRate = 6;
  void clear_lowrate();
  int64_t lowrate() const;
  void set_lowrate(int64_t value);
  private:
  int64_t _internal_lowrate() const;
  void _internal_set_lowrate(int64_t value);
  public:

  // int64 CloseRate = 7;
  void clear_closerate();
  int64_t closerate() const;
  void set_closerate(int64_t value);
  private:
  int64_t _internal_closerate() const;
  void _internal_set_closerate(int64_t value);
  public:

  // int64 WeightedRate = 8;
  void clear_weightedrate();
  int64_t weightedrate() const;
  void set_weightedrate(int64_t value);
  private:
  int64_t _internal_weightedrate() const;
  void _internal_set_weightedrate(int64_t value);
  public:

  // int64 TotalValueTrade = 9;
  void clear_totalvaluetrade();
  int64_t totalvaluetrade() const;
  void set_totalvaluetrade(int64_t value);
  private:
  int64_t _internal_totalvaluetrade() const;
  void _internal_set_totalvaluetrade(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.OutrightRepoSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t precloserate_;
    int64_t preweightedrate_;
    int64_t openrate_;
    int64_t lastrate_;
    int64_t highrate_;
    int64_t lowrate_;
    int64_t closerate_;
    int64_t weightedrate_;
    int64_t totalvaluetrade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCfetsCurrencySnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDCfetsCurrencySnapshot

// string HTSCSecurityID = 1;
inline void MDCfetsCurrencySnapshot::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDCfetsCurrencySnapshot::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsCurrencySnapshot::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.HTSCSecurityID)
}
inline std::string* MDCfetsCurrencySnapshot::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.HTSCSecurityID)
  return _s;
}
inline const std::string& MDCfetsCurrencySnapshot::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDCfetsCurrencySnapshot::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsCurrencySnapshot::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsCurrencySnapshot::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDCfetsCurrencySnapshot::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.HTSCSecurityID)
}

// .com.htsc.mdc.model.ESecurityType SecurityType = 2;
inline void MDCfetsCurrencySnapshot::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDCfetsCurrencySnapshot::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDCfetsCurrencySnapshot::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.SecurityType)
  return _internal_securitytype();
}
inline void MDCfetsCurrencySnapshot::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDCfetsCurrencySnapshot::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.SecurityType)
}

// .com.htsc.mdc.model.ESecurityIDSource SecurityIDSource = 3;
inline void MDCfetsCurrencySnapshot::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCfetsCurrencySnapshot::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCfetsCurrencySnapshot::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.SecurityIDSource)
  return _internal_securityidsource();
}
inline void MDCfetsCurrencySnapshot::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDCfetsCurrencySnapshot::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.SecurityIDSource)
}

// int32 MDDate = 4;
inline void MDCfetsCurrencySnapshot::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDCfetsCurrencySnapshot::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDCfetsCurrencySnapshot::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MDDate)
  return _internal_mddate();
}
inline void MDCfetsCurrencySnapshot::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDCfetsCurrencySnapshot::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MDDate)
}

// int32 MDTime = 5;
inline void MDCfetsCurrencySnapshot::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDCfetsCurrencySnapshot::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDCfetsCurrencySnapshot::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MDTime)
  return _internal_mdtime();
}
inline void MDCfetsCurrencySnapshot::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDCfetsCurrencySnapshot::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MDTime)
}

// int64 DataTimestamp = 6;
inline void MDCfetsCurrencySnapshot::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDCfetsCurrencySnapshot::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDCfetsCurrencySnapshot::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDCfetsCurrencySnapshot::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDCfetsCurrencySnapshot::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.DataTimestamp)
}

// string TransactTime = 7;
inline void MDCfetsCurrencySnapshot::clear_transacttime() {
  _impl_.transacttime_.ClearToEmpty();
}
inline const std::string& MDCfetsCurrencySnapshot::transacttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.TransactTime)
  return _internal_transacttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsCurrencySnapshot::set_transacttime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transacttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.TransactTime)
}
inline std::string* MDCfetsCurrencySnapshot::mutable_transacttime() {
  std::string* _s = _internal_mutable_transacttime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.TransactTime)
  return _s;
}
inline const std::string& MDCfetsCurrencySnapshot::_internal_transacttime() const {
  return _impl_.transacttime_.Get();
}
inline void MDCfetsCurrencySnapshot::_internal_set_transacttime(const std::string& value) {
  
  _impl_.transacttime_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsCurrencySnapshot::_internal_mutable_transacttime() {
  
  return _impl_.transacttime_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsCurrencySnapshot::release_transacttime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.TransactTime)
  return _impl_.transacttime_.Release();
}
inline void MDCfetsCurrencySnapshot::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    
  } else {
    
  }
  _impl_.transacttime_.SetAllocated(transacttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transacttime_.IsDefault()) {
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.TransactTime)
}

// string MarketIndicator = 8;
inline void MDCfetsCurrencySnapshot::clear_marketindicator() {
  _impl_.marketindicator_.ClearToEmpty();
}
inline const std::string& MDCfetsCurrencySnapshot::marketindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MarketIndicator)
  return _internal_marketindicator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCfetsCurrencySnapshot::set_marketindicator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.marketindicator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MarketIndicator)
}
inline std::string* MDCfetsCurrencySnapshot::mutable_marketindicator() {
  std::string* _s = _internal_mutable_marketindicator();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MarketIndicator)
  return _s;
}
inline const std::string& MDCfetsCurrencySnapshot::_internal_marketindicator() const {
  return _impl_.marketindicator_.Get();
}
inline void MDCfetsCurrencySnapshot::_internal_set_marketindicator(const std::string& value) {
  
  _impl_.marketindicator_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCfetsCurrencySnapshot::_internal_mutable_marketindicator() {
  
  return _impl_.marketindicator_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCfetsCurrencySnapshot::release_marketindicator() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MarketIndicator)
  return _impl_.marketindicator_.Release();
}
inline void MDCfetsCurrencySnapshot::set_allocated_marketindicator(std::string* marketindicator) {
  if (marketindicator != nullptr) {
    
  } else {
    
  }
  _impl_.marketindicator_.SetAllocated(marketindicator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.marketindicator_.IsDefault()) {
    _impl_.marketindicator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.MarketIndicator)
}

// int32 CurrencySnapshotType = 9;
inline void MDCfetsCurrencySnapshot::clear_currencysnapshottype() {
  _impl_.currencysnapshottype_ = 0;
}
inline int32_t MDCfetsCurrencySnapshot::_internal_currencysnapshottype() const {
  return _impl_.currencysnapshottype_;
}
inline int32_t MDCfetsCurrencySnapshot::currencysnapshottype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.CurrencySnapshotType)
  return _internal_currencysnapshottype();
}
inline void MDCfetsCurrencySnapshot::_internal_set_currencysnapshottype(int32_t value) {
  
  _impl_.currencysnapshottype_ = value;
}
inline void MDCfetsCurrencySnapshot::set_currencysnapshottype(int32_t value) {
  _internal_set_currencysnapshottype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.CurrencySnapshotType)
}

// .com.htsc.mdc.insight.model.InterBankOfferingSnapshot interBankOfferingSnapshot = 10;
inline bool MDCfetsCurrencySnapshot::_internal_has_interbankofferingsnapshot() const {
  return this != internal_default_instance() && _impl_.interbankofferingsnapshot_ != nullptr;
}
inline bool MDCfetsCurrencySnapshot::has_interbankofferingsnapshot() const {
  return _internal_has_interbankofferingsnapshot();
}
inline void MDCfetsCurrencySnapshot::clear_interbankofferingsnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.interbankofferingsnapshot_ != nullptr) {
    delete _impl_.interbankofferingsnapshot_;
  }
  _impl_.interbankofferingsnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot& MDCfetsCurrencySnapshot::_internal_interbankofferingsnapshot() const {
  const ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* p = _impl_.interbankofferingsnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot&>(
      ::com::htsc::mdc::insight::model::_InterBankOfferingSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot& MDCfetsCurrencySnapshot::interbankofferingsnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.interBankOfferingSnapshot)
  return _internal_interbankofferingsnapshot();
}
inline void MDCfetsCurrencySnapshot::unsafe_arena_set_allocated_interbankofferingsnapshot(
    ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* interbankofferingsnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interbankofferingsnapshot_);
  }
  _impl_.interbankofferingsnapshot_ = interbankofferingsnapshot;
  if (interbankofferingsnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.interBankOfferingSnapshot)
}
inline ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* MDCfetsCurrencySnapshot::release_interbankofferingsnapshot() {
  
  ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* temp = _impl_.interbankofferingsnapshot_;
  _impl_.interbankofferingsnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* MDCfetsCurrencySnapshot::unsafe_arena_release_interbankofferingsnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.interBankOfferingSnapshot)
  
  ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* temp = _impl_.interbankofferingsnapshot_;
  _impl_.interbankofferingsnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* MDCfetsCurrencySnapshot::_internal_mutable_interbankofferingsnapshot() {
  
  if (_impl_.interbankofferingsnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InterBankOfferingSnapshot>(GetArenaForAllocation());
    _impl_.interbankofferingsnapshot_ = p;
  }
  return _impl_.interbankofferingsnapshot_;
}
inline ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* MDCfetsCurrencySnapshot::mutable_interbankofferingsnapshot() {
  ::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* _msg = _internal_mutable_interbankofferingsnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.interBankOfferingSnapshot)
  return _msg;
}
inline void MDCfetsCurrencySnapshot::set_allocated_interbankofferingsnapshot(::com::htsc::mdc::insight::model::InterBankOfferingSnapshot* interbankofferingsnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.interbankofferingsnapshot_;
  }
  if (interbankofferingsnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interbankofferingsnapshot);
    if (message_arena != submessage_arena) {
      interbankofferingsnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interbankofferingsnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interbankofferingsnapshot_ = interbankofferingsnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.interBankOfferingSnapshot)
}

// .com.htsc.mdc.insight.model.CollateralRepoSnapshot collateralRepoSnapshot = 11;
inline bool MDCfetsCurrencySnapshot::_internal_has_collateralreposnapshot() const {
  return this != internal_default_instance() && _impl_.collateralreposnapshot_ != nullptr;
}
inline bool MDCfetsCurrencySnapshot::has_collateralreposnapshot() const {
  return _internal_has_collateralreposnapshot();
}
inline void MDCfetsCurrencySnapshot::clear_collateralreposnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.collateralreposnapshot_ != nullptr) {
    delete _impl_.collateralreposnapshot_;
  }
  _impl_.collateralreposnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::CollateralRepoSnapshot& MDCfetsCurrencySnapshot::_internal_collateralreposnapshot() const {
  const ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* p = _impl_.collateralreposnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::CollateralRepoSnapshot&>(
      ::com::htsc::mdc::insight::model::_CollateralRepoSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::CollateralRepoSnapshot& MDCfetsCurrencySnapshot::collateralreposnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.collateralRepoSnapshot)
  return _internal_collateralreposnapshot();
}
inline void MDCfetsCurrencySnapshot::unsafe_arena_set_allocated_collateralreposnapshot(
    ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* collateralreposnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collateralreposnapshot_);
  }
  _impl_.collateralreposnapshot_ = collateralreposnapshot;
  if (collateralreposnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.collateralRepoSnapshot)
}
inline ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* MDCfetsCurrencySnapshot::release_collateralreposnapshot() {
  
  ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* temp = _impl_.collateralreposnapshot_;
  _impl_.collateralreposnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* MDCfetsCurrencySnapshot::unsafe_arena_release_collateralreposnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.collateralRepoSnapshot)
  
  ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* temp = _impl_.collateralreposnapshot_;
  _impl_.collateralreposnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* MDCfetsCurrencySnapshot::_internal_mutable_collateralreposnapshot() {
  
  if (_impl_.collateralreposnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::CollateralRepoSnapshot>(GetArenaForAllocation());
    _impl_.collateralreposnapshot_ = p;
  }
  return _impl_.collateralreposnapshot_;
}
inline ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* MDCfetsCurrencySnapshot::mutable_collateralreposnapshot() {
  ::com::htsc::mdc::insight::model::CollateralRepoSnapshot* _msg = _internal_mutable_collateralreposnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.collateralRepoSnapshot)
  return _msg;
}
inline void MDCfetsCurrencySnapshot::set_allocated_collateralreposnapshot(::com::htsc::mdc::insight::model::CollateralRepoSnapshot* collateralreposnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collateralreposnapshot_;
  }
  if (collateralreposnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collateralreposnapshot);
    if (message_arena != submessage_arena) {
      collateralreposnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collateralreposnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.collateralreposnapshot_ = collateralreposnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.collateralRepoSnapshot)
}

// .com.htsc.mdc.insight.model.OutrightRepoSnapshot outrightRepoSnapshot = 12;
inline bool MDCfetsCurrencySnapshot::_internal_has_outrightreposnapshot() const {
  return this != internal_default_instance() && _impl_.outrightreposnapshot_ != nullptr;
}
inline bool MDCfetsCurrencySnapshot::has_outrightreposnapshot() const {
  return _internal_has_outrightreposnapshot();
}
inline void MDCfetsCurrencySnapshot::clear_outrightreposnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.outrightreposnapshot_ != nullptr) {
    delete _impl_.outrightreposnapshot_;
  }
  _impl_.outrightreposnapshot_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::OutrightRepoSnapshot& MDCfetsCurrencySnapshot::_internal_outrightreposnapshot() const {
  const ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* p = _impl_.outrightreposnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::OutrightRepoSnapshot&>(
      ::com::htsc::mdc::insight::model::_OutrightRepoSnapshot_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::OutrightRepoSnapshot& MDCfetsCurrencySnapshot::outrightreposnapshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.outrightRepoSnapshot)
  return _internal_outrightreposnapshot();
}
inline void MDCfetsCurrencySnapshot::unsafe_arena_set_allocated_outrightreposnapshot(
    ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* outrightreposnapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.outrightreposnapshot_);
  }
  _impl_.outrightreposnapshot_ = outrightreposnapshot;
  if (outrightreposnapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.outrightRepoSnapshot)
}
inline ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* MDCfetsCurrencySnapshot::release_outrightreposnapshot() {
  
  ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* temp = _impl_.outrightreposnapshot_;
  _impl_.outrightreposnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* MDCfetsCurrencySnapshot::unsafe_arena_release_outrightreposnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.outrightRepoSnapshot)
  
  ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* temp = _impl_.outrightreposnapshot_;
  _impl_.outrightreposnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* MDCfetsCurrencySnapshot::_internal_mutable_outrightreposnapshot() {
  
  if (_impl_.outrightreposnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::OutrightRepoSnapshot>(GetArenaForAllocation());
    _impl_.outrightreposnapshot_ = p;
  }
  return _impl_.outrightreposnapshot_;
}
inline ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* MDCfetsCurrencySnapshot::mutable_outrightreposnapshot() {
  ::com::htsc::mdc::insight::model::OutrightRepoSnapshot* _msg = _internal_mutable_outrightreposnapshot();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.outrightRepoSnapshot)
  return _msg;
}
inline void MDCfetsCurrencySnapshot::set_allocated_outrightreposnapshot(::com::htsc::mdc::insight::model::OutrightRepoSnapshot* outrightreposnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.outrightreposnapshot_;
  }
  if (outrightreposnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(outrightreposnapshot);
    if (message_arena != submessage_arena) {
      outrightreposnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outrightreposnapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.outrightreposnapshot_ = outrightreposnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.outrightRepoSnapshot)
}

// int32 DataMultiplePowerOf10 = 13;
inline void MDCfetsCurrencySnapshot::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDCfetsCurrencySnapshot::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDCfetsCurrencySnapshot::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDCfetsCurrencySnapshot::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDCfetsCurrencySnapshot::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCfetsCurrencySnapshot.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// InterBankOfferingSnapshot

// int64 PreCloseRate = 1;
inline void InterBankOfferingSnapshot::clear_precloserate() {
  _impl_.precloserate_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_precloserate() const {
  return _impl_.precloserate_;
}
inline int64_t InterBankOfferingSnapshot::precloserate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.PreCloseRate)
  return _internal_precloserate();
}
inline void InterBankOfferingSnapshot::_internal_set_precloserate(int64_t value) {
  
  _impl_.precloserate_ = value;
}
inline void InterBankOfferingSnapshot::set_precloserate(int64_t value) {
  _internal_set_precloserate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.PreCloseRate)
}

// int64 PreWeightedRate = 2;
inline void InterBankOfferingSnapshot::clear_preweightedrate() {
  _impl_.preweightedrate_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_preweightedrate() const {
  return _impl_.preweightedrate_;
}
inline int64_t InterBankOfferingSnapshot::preweightedrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.PreWeightedRate)
  return _internal_preweightedrate();
}
inline void InterBankOfferingSnapshot::_internal_set_preweightedrate(int64_t value) {
  
  _impl_.preweightedrate_ = value;
}
inline void InterBankOfferingSnapshot::set_preweightedrate(int64_t value) {
  _internal_set_preweightedrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.PreWeightedRate)
}

// int64 OpenRate = 3;
inline void InterBankOfferingSnapshot::clear_openrate() {
  _impl_.openrate_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_openrate() const {
  return _impl_.openrate_;
}
inline int64_t InterBankOfferingSnapshot::openrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.OpenRate)
  return _internal_openrate();
}
inline void InterBankOfferingSnapshot::_internal_set_openrate(int64_t value) {
  
  _impl_.openrate_ = value;
}
inline void InterBankOfferingSnapshot::set_openrate(int64_t value) {
  _internal_set_openrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.OpenRate)
}

// int64 LastRate = 4;
inline void InterBankOfferingSnapshot::clear_lastrate() {
  _impl_.lastrate_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_lastrate() const {
  return _impl_.lastrate_;
}
inline int64_t InterBankOfferingSnapshot::lastrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.LastRate)
  return _internal_lastrate();
}
inline void InterBankOfferingSnapshot::_internal_set_lastrate(int64_t value) {
  
  _impl_.lastrate_ = value;
}
inline void InterBankOfferingSnapshot::set_lastrate(int64_t value) {
  _internal_set_lastrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.LastRate)
}

// int64 HighRate = 5;
inline void InterBankOfferingSnapshot::clear_highrate() {
  _impl_.highrate_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_highrate() const {
  return _impl_.highrate_;
}
inline int64_t InterBankOfferingSnapshot::highrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.HighRate)
  return _internal_highrate();
}
inline void InterBankOfferingSnapshot::_internal_set_highrate(int64_t value) {
  
  _impl_.highrate_ = value;
}
inline void InterBankOfferingSnapshot::set_highrate(int64_t value) {
  _internal_set_highrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.HighRate)
}

// int64 LowRate = 6;
inline void InterBankOfferingSnapshot::clear_lowrate() {
  _impl_.lowrate_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_lowrate() const {
  return _impl_.lowrate_;
}
inline int64_t InterBankOfferingSnapshot::lowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.LowRate)
  return _internal_lowrate();
}
inline void InterBankOfferingSnapshot::_internal_set_lowrate(int64_t value) {
  
  _impl_.lowrate_ = value;
}
inline void InterBankOfferingSnapshot::set_lowrate(int64_t value) {
  _internal_set_lowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.LowRate)
}

// int64 CloseRate = 7;
inline void InterBankOfferingSnapshot::clear_closerate() {
  _impl_.closerate_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_closerate() const {
  return _impl_.closerate_;
}
inline int64_t InterBankOfferingSnapshot::closerate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.CloseRate)
  return _internal_closerate();
}
inline void InterBankOfferingSnapshot::_internal_set_closerate(int64_t value) {
  
  _impl_.closerate_ = value;
}
inline void InterBankOfferingSnapshot::set_closerate(int64_t value) {
  _internal_set_closerate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.CloseRate)
}

// int64 WeightedRate = 8;
inline void InterBankOfferingSnapshot::clear_weightedrate() {
  _impl_.weightedrate_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_weightedrate() const {
  return _impl_.weightedrate_;
}
inline int64_t InterBankOfferingSnapshot::weightedrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.WeightedRate)
  return _internal_weightedrate();
}
inline void InterBankOfferingSnapshot::_internal_set_weightedrate(int64_t value) {
  
  _impl_.weightedrate_ = value;
}
inline void InterBankOfferingSnapshot::set_weightedrate(int64_t value) {
  _internal_set_weightedrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.WeightedRate)
}

// int64 TotalValueTrade = 9;
inline void InterBankOfferingSnapshot::clear_totalvaluetrade() {
  _impl_.totalvaluetrade_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_totalvaluetrade() const {
  return _impl_.totalvaluetrade_;
}
inline int64_t InterBankOfferingSnapshot::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.TotalValueTrade)
  return _internal_totalvaluetrade();
}
inline void InterBankOfferingSnapshot::_internal_set_totalvaluetrade(int64_t value) {
  
  _impl_.totalvaluetrade_ = value;
}
inline void InterBankOfferingSnapshot::set_totalvaluetrade(int64_t value) {
  _internal_set_totalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.TotalValueTrade)
}

// int32 NumTrades = 10;
inline void InterBankOfferingSnapshot::clear_numtrades() {
  _impl_.numtrades_ = 0;
}
inline int32_t InterBankOfferingSnapshot::_internal_numtrades() const {
  return _impl_.numtrades_;
}
inline int32_t InterBankOfferingSnapshot::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.NumTrades)
  return _internal_numtrades();
}
inline void InterBankOfferingSnapshot::_internal_set_numtrades(int32_t value) {
  
  _impl_.numtrades_ = value;
}
inline void InterBankOfferingSnapshot::set_numtrades(int32_t value) {
  _internal_set_numtrades(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.NumTrades)
}

// int64 AverageTerm = 11;
inline void InterBankOfferingSnapshot::clear_averageterm() {
  _impl_.averageterm_ = int64_t{0};
}
inline int64_t InterBankOfferingSnapshot::_internal_averageterm() const {
  return _impl_.averageterm_;
}
inline int64_t InterBankOfferingSnapshot::averageterm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.AverageTerm)
  return _internal_averageterm();
}
inline void InterBankOfferingSnapshot::_internal_set_averageterm(int64_t value) {
  
  _impl_.averageterm_ = value;
}
inline void InterBankOfferingSnapshot::set_averageterm(int64_t value) {
  _internal_set_averageterm(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.InterBankOfferingSnapshot.AverageTerm)
}

// -------------------------------------------------------------------

// CollateralRepoSnapshot

// int32 TradeMethod = 1;
inline void CollateralRepoSnapshot::clear_trademethod() {
  _impl_.trademethod_ = 0;
}
inline int32_t CollateralRepoSnapshot::_internal_trademethod() const {
  return _impl_.trademethod_;
}
inline int32_t CollateralRepoSnapshot::trademethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.TradeMethod)
  return _internal_trademethod();
}
inline void CollateralRepoSnapshot::_internal_set_trademethod(int32_t value) {
  
  _impl_.trademethod_ = value;
}
inline void CollateralRepoSnapshot::set_trademethod(int32_t value) {
  _internal_set_trademethod(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.TradeMethod)
}

// int64 PreCloseRate = 2;
inline void CollateralRepoSnapshot::clear_precloserate() {
  _impl_.precloserate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_precloserate() const {
  return _impl_.precloserate_;
}
inline int64_t CollateralRepoSnapshot::precloserate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.PreCloseRate)
  return _internal_precloserate();
}
inline void CollateralRepoSnapshot::_internal_set_precloserate(int64_t value) {
  
  _impl_.precloserate_ = value;
}
inline void CollateralRepoSnapshot::set_precloserate(int64_t value) {
  _internal_set_precloserate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.PreCloseRate)
}

// int64 PreWeightedRate = 3;
inline void CollateralRepoSnapshot::clear_preweightedrate() {
  _impl_.preweightedrate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_preweightedrate() const {
  return _impl_.preweightedrate_;
}
inline int64_t CollateralRepoSnapshot::preweightedrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.PreWeightedRate)
  return _internal_preweightedrate();
}
inline void CollateralRepoSnapshot::_internal_set_preweightedrate(int64_t value) {
  
  _impl_.preweightedrate_ = value;
}
inline void CollateralRepoSnapshot::set_preweightedrate(int64_t value) {
  _internal_set_preweightedrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.PreWeightedRate)
}

// int64 OpenRate = 4;
inline void CollateralRepoSnapshot::clear_openrate() {
  _impl_.openrate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_openrate() const {
  return _impl_.openrate_;
}
inline int64_t CollateralRepoSnapshot::openrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.OpenRate)
  return _internal_openrate();
}
inline void CollateralRepoSnapshot::_internal_set_openrate(int64_t value) {
  
  _impl_.openrate_ = value;
}
inline void CollateralRepoSnapshot::set_openrate(int64_t value) {
  _internal_set_openrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.OpenRate)
}

// int64 LastRate = 5;
inline void CollateralRepoSnapshot::clear_lastrate() {
  _impl_.lastrate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_lastrate() const {
  return _impl_.lastrate_;
}
inline int64_t CollateralRepoSnapshot::lastrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.LastRate)
  return _internal_lastrate();
}
inline void CollateralRepoSnapshot::_internal_set_lastrate(int64_t value) {
  
  _impl_.lastrate_ = value;
}
inline void CollateralRepoSnapshot::set_lastrate(int64_t value) {
  _internal_set_lastrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.LastRate)
}

// int64 HighRate = 6;
inline void CollateralRepoSnapshot::clear_highrate() {
  _impl_.highrate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_highrate() const {
  return _impl_.highrate_;
}
inline int64_t CollateralRepoSnapshot::highrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.HighRate)
  return _internal_highrate();
}
inline void CollateralRepoSnapshot::_internal_set_highrate(int64_t value) {
  
  _impl_.highrate_ = value;
}
inline void CollateralRepoSnapshot::set_highrate(int64_t value) {
  _internal_set_highrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.HighRate)
}

// int64 LowRate = 7;
inline void CollateralRepoSnapshot::clear_lowrate() {
  _impl_.lowrate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_lowrate() const {
  return _impl_.lowrate_;
}
inline int64_t CollateralRepoSnapshot::lowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.LowRate)
  return _internal_lowrate();
}
inline void CollateralRepoSnapshot::_internal_set_lowrate(int64_t value) {
  
  _impl_.lowrate_ = value;
}
inline void CollateralRepoSnapshot::set_lowrate(int64_t value) {
  _internal_set_lowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.LowRate)
}

// int64 CloseRate = 8;
inline void CollateralRepoSnapshot::clear_closerate() {
  _impl_.closerate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_closerate() const {
  return _impl_.closerate_;
}
inline int64_t CollateralRepoSnapshot::closerate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.CloseRate)
  return _internal_closerate();
}
inline void CollateralRepoSnapshot::_internal_set_closerate(int64_t value) {
  
  _impl_.closerate_ = value;
}
inline void CollateralRepoSnapshot::set_closerate(int64_t value) {
  _internal_set_closerate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.CloseRate)
}

// int64 WeightedRate = 9;
inline void CollateralRepoSnapshot::clear_weightedrate() {
  _impl_.weightedrate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_weightedrate() const {
  return _impl_.weightedrate_;
}
inline int64_t CollateralRepoSnapshot::weightedrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.WeightedRate)
  return _internal_weightedrate();
}
inline void CollateralRepoSnapshot::_internal_set_weightedrate(int64_t value) {
  
  _impl_.weightedrate_ = value;
}
inline void CollateralRepoSnapshot::set_weightedrate(int64_t value) {
  _internal_set_weightedrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.WeightedRate)
}

// int64 TotalValueTrade = 10;
inline void CollateralRepoSnapshot::clear_totalvaluetrade() {
  _impl_.totalvaluetrade_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_totalvaluetrade() const {
  return _impl_.totalvaluetrade_;
}
inline int64_t CollateralRepoSnapshot::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.TotalValueTrade)
  return _internal_totalvaluetrade();
}
inline void CollateralRepoSnapshot::_internal_set_totalvaluetrade(int64_t value) {
  
  _impl_.totalvaluetrade_ = value;
}
inline void CollateralRepoSnapshot::set_totalvaluetrade(int64_t value) {
  _internal_set_totalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.TotalValueTrade)
}

// int32 NumTrades = 11;
inline void CollateralRepoSnapshot::clear_numtrades() {
  _impl_.numtrades_ = 0;
}
inline int32_t CollateralRepoSnapshot::_internal_numtrades() const {
  return _impl_.numtrades_;
}
inline int32_t CollateralRepoSnapshot::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.NumTrades)
  return _internal_numtrades();
}
inline void CollateralRepoSnapshot::_internal_set_numtrades(int32_t value) {
  
  _impl_.numtrades_ = value;
}
inline void CollateralRepoSnapshot::set_numtrades(int32_t value) {
  _internal_set_numtrades(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.NumTrades)
}

// int64 AverageTerm = 12;
inline void CollateralRepoSnapshot::clear_averageterm() {
  _impl_.averageterm_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_averageterm() const {
  return _impl_.averageterm_;
}
inline int64_t CollateralRepoSnapshot::averageterm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.AverageTerm)
  return _internal_averageterm();
}
inline void CollateralRepoSnapshot::_internal_set_averageterm(int64_t value) {
  
  _impl_.averageterm_ = value;
}
inline void CollateralRepoSnapshot::set_averageterm(int64_t value) {
  _internal_set_averageterm(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.AverageTerm)
}

// int64 IRBondWeightedRate = 13;
inline void CollateralRepoSnapshot::clear_irbondweightedrate() {
  _impl_.irbondweightedrate_ = int64_t{0};
}
inline int64_t CollateralRepoSnapshot::_internal_irbondweightedrate() const {
  return _impl_.irbondweightedrate_;
}
inline int64_t CollateralRepoSnapshot::irbondweightedrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.CollateralRepoSnapshot.IRBondWeightedRate)
  return _internal_irbondweightedrate();
}
inline void CollateralRepoSnapshot::_internal_set_irbondweightedrate(int64_t value) {
  
  _impl_.irbondweightedrate_ = value;
}
inline void CollateralRepoSnapshot::set_irbondweightedrate(int64_t value) {
  _internal_set_irbondweightedrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.CollateralRepoSnapshot.IRBondWeightedRate)
}

// -------------------------------------------------------------------

// OutrightRepoSnapshot

// int64 PreCloseRate = 1;
inline void OutrightRepoSnapshot::clear_precloserate() {
  _impl_.precloserate_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_precloserate() const {
  return _impl_.precloserate_;
}
inline int64_t OutrightRepoSnapshot::precloserate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.PreCloseRate)
  return _internal_precloserate();
}
inline void OutrightRepoSnapshot::_internal_set_precloserate(int64_t value) {
  
  _impl_.precloserate_ = value;
}
inline void OutrightRepoSnapshot::set_precloserate(int64_t value) {
  _internal_set_precloserate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.PreCloseRate)
}

// int64 PreWeightedRate = 2;
inline void OutrightRepoSnapshot::clear_preweightedrate() {
  _impl_.preweightedrate_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_preweightedrate() const {
  return _impl_.preweightedrate_;
}
inline int64_t OutrightRepoSnapshot::preweightedrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.PreWeightedRate)
  return _internal_preweightedrate();
}
inline void OutrightRepoSnapshot::_internal_set_preweightedrate(int64_t value) {
  
  _impl_.preweightedrate_ = value;
}
inline void OutrightRepoSnapshot::set_preweightedrate(int64_t value) {
  _internal_set_preweightedrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.PreWeightedRate)
}

// int64 OpenRate = 3;
inline void OutrightRepoSnapshot::clear_openrate() {
  _impl_.openrate_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_openrate() const {
  return _impl_.openrate_;
}
inline int64_t OutrightRepoSnapshot::openrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.OpenRate)
  return _internal_openrate();
}
inline void OutrightRepoSnapshot::_internal_set_openrate(int64_t value) {
  
  _impl_.openrate_ = value;
}
inline void OutrightRepoSnapshot::set_openrate(int64_t value) {
  _internal_set_openrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.OpenRate)
}

// int64 LastRate = 4;
inline void OutrightRepoSnapshot::clear_lastrate() {
  _impl_.lastrate_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_lastrate() const {
  return _impl_.lastrate_;
}
inline int64_t OutrightRepoSnapshot::lastrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.LastRate)
  return _internal_lastrate();
}
inline void OutrightRepoSnapshot::_internal_set_lastrate(int64_t value) {
  
  _impl_.lastrate_ = value;
}
inline void OutrightRepoSnapshot::set_lastrate(int64_t value) {
  _internal_set_lastrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.LastRate)
}

// int64 HighRate = 5;
inline void OutrightRepoSnapshot::clear_highrate() {
  _impl_.highrate_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_highrate() const {
  return _impl_.highrate_;
}
inline int64_t OutrightRepoSnapshot::highrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.HighRate)
  return _internal_highrate();
}
inline void OutrightRepoSnapshot::_internal_set_highrate(int64_t value) {
  
  _impl_.highrate_ = value;
}
inline void OutrightRepoSnapshot::set_highrate(int64_t value) {
  _internal_set_highrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.HighRate)
}

// int64 LowRate = 6;
inline void OutrightRepoSnapshot::clear_lowrate() {
  _impl_.lowrate_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_lowrate() const {
  return _impl_.lowrate_;
}
inline int64_t OutrightRepoSnapshot::lowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.LowRate)
  return _internal_lowrate();
}
inline void OutrightRepoSnapshot::_internal_set_lowrate(int64_t value) {
  
  _impl_.lowrate_ = value;
}
inline void OutrightRepoSnapshot::set_lowrate(int64_t value) {
  _internal_set_lowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.LowRate)
}

// int64 CloseRate = 7;
inline void OutrightRepoSnapshot::clear_closerate() {
  _impl_.closerate_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_closerate() const {
  return _impl_.closerate_;
}
inline int64_t OutrightRepoSnapshot::closerate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.CloseRate)
  return _internal_closerate();
}
inline void OutrightRepoSnapshot::_internal_set_closerate(int64_t value) {
  
  _impl_.closerate_ = value;
}
inline void OutrightRepoSnapshot::set_closerate(int64_t value) {
  _internal_set_closerate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.CloseRate)
}

// int64 WeightedRate = 8;
inline void OutrightRepoSnapshot::clear_weightedrate() {
  _impl_.weightedrate_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_weightedrate() const {
  return _impl_.weightedrate_;
}
inline int64_t OutrightRepoSnapshot::weightedrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.WeightedRate)
  return _internal_weightedrate();
}
inline void OutrightRepoSnapshot::_internal_set_weightedrate(int64_t value) {
  
  _impl_.weightedrate_ = value;
}
inline void OutrightRepoSnapshot::set_weightedrate(int64_t value) {
  _internal_set_weightedrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.WeightedRate)
}

// int64 TotalValueTrade = 9;
inline void OutrightRepoSnapshot::clear_totalvaluetrade() {
  _impl_.totalvaluetrade_ = int64_t{0};
}
inline int64_t OutrightRepoSnapshot::_internal_totalvaluetrade() const {
  return _impl_.totalvaluetrade_;
}
inline int64_t OutrightRepoSnapshot::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.OutrightRepoSnapshot.TotalValueTrade)
  return _internal_totalvaluetrade();
}
inline void OutrightRepoSnapshot::_internal_set_totalvaluetrade(int64_t value) {
  
  _impl_.totalvaluetrade_ = value;
}
inline void OutrightRepoSnapshot::set_totalvaluetrade(int64_t value) {
  _internal_set_totalvaluetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.OutrightRepoSnapshot.TotalValueTrade)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDCfetsCurrencySnapshot_2eproto
