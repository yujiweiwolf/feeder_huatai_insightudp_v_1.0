// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDUSAQuote.proto

#include "MDUSAQuote.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDUSAQuote::MDUSAQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.nanosecond_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_.bidprice_)*/int64_t{0}
  , /*decltype(_impl_.bidsize_)*/int64_t{0}
  , /*decltype(_impl_.bidsizenav_)*/int64_t{0}
  , /*decltype(_impl_.timeindex_)*/0
  , /*decltype(_impl_.bidmarket_)*/0
  , /*decltype(_impl_.askprice_)*/int64_t{0}
  , /*decltype(_impl_.asksize_)*/int64_t{0}
  , /*decltype(_impl_.asksizenav_)*/int64_t{0}
  , /*decltype(_impl_.bidtime_)*/int64_t{0}
  , /*decltype(_impl_.asktime_)*/int64_t{0}
  , /*decltype(_impl_.dataindex_)*/int64_t{0}
  , /*decltype(_impl_.askmarket_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDUSAQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDUSAQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDUSAQuoteDefaultTypeInternal() {}
  union {
    MDUSAQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDUSAQuoteDefaultTypeInternal _MDUSAQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDUSAQuote_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDUSAQuote_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDUSAQuote_2eproto = nullptr;

const uint32_t TableStruct_MDUSAQuote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.nanosecond_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.timeindex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.bidprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.bidsize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.bidsizenav_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.askprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.asksize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.asksizenav_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.bidmarket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.bidtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.askmarket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.asktime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDUSAQuote, _impl_.dataindex_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDUSAQuote)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDUSAQuote_default_instance_._instance,
};

const char descriptor_table_protodef_MDUSAQuote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020MDUSAQuote.proto\022\032com.htsc.mdc.insight"
  ".model\032\023ESecurityType.proto\032\027ESecurityID"
  "Source.proto\"\220\004\n\nMDUSAQuote\022\026\n\016HTSCSecur"
  "ityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 "
  "\001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020securityID"
  "Source\030\005 \001(\0162%.com.htsc.mdc.model.ESecur"
  "ityIDSource\0227\n\014securityType\030\006 \001(\0162!.com."
  "htsc.mdc.model.ESecurityType\022\024\n\014Exchange"
  "Date\030\007 \001(\005\022\024\n\014ExchangeTime\030\010 \001(\005\022\022\n\nNano"
  "second\030\t \001(\005\022\035\n\025DataMultiplePowerOf10\030\n "
  "\001(\005\022\021\n\tTimeIndex\030\013 \001(\005\022\020\n\010BidPrice\030\014 \001(\003"
  "\022\017\n\007BidSize\030\r \001(\003\022\022\n\nBidSizeNAV\030\016 \001(\003\022\020\n"
  "\010AskPrice\030\017 \001(\003\022\017\n\007AskSize\030\020 \001(\003\022\022\n\nAskS"
  "izeNAV\030\021 \001(\003\022\021\n\tBidMarket\030\022 \001(\005\022\017\n\007BidTi"
  "me\030\023 \001(\003\022\021\n\tAskMarket\030\024 \001(\005\022\017\n\007AskTime\030\025"
  " \001(\003\022\021\n\tDataIndex\030\026 \001(\003B3\n\032com.htsc.mdc."
  "insight.modelB\020MDUSAQuoteProtosH\001\240\001\001b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDUSAQuote_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDUSAQuote_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDUSAQuote_2eproto = {
    false, false, 684, descriptor_table_protodef_MDUSAQuote_2eproto,
    "MDUSAQuote.proto",
    &descriptor_table_MDUSAQuote_2eproto_once, descriptor_table_MDUSAQuote_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_MDUSAQuote_2eproto::offsets,
    file_level_metadata_MDUSAQuote_2eproto, file_level_enum_descriptors_MDUSAQuote_2eproto,
    file_level_service_descriptors_MDUSAQuote_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDUSAQuote_2eproto_getter() {
  return &descriptor_table_MDUSAQuote_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDUSAQuote_2eproto(&descriptor_table_MDUSAQuote_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDUSAQuote::_Internal {
 public:
};

MDUSAQuote::MDUSAQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDUSAQuote)
}
MDUSAQuote::MDUSAQuote(const MDUSAQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDUSAQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.nanosecond_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , decltype(_impl_.bidprice_){}
    , decltype(_impl_.bidsize_){}
    , decltype(_impl_.bidsizenav_){}
    , decltype(_impl_.timeindex_){}
    , decltype(_impl_.bidmarket_){}
    , decltype(_impl_.askprice_){}
    , decltype(_impl_.asksize_){}
    , decltype(_impl_.asksizenav_){}
    , decltype(_impl_.bidtime_){}
    , decltype(_impl_.asktime_){}
    , decltype(_impl_.dataindex_){}
    , decltype(_impl_.askmarket_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.askmarket_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.askmarket_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDUSAQuote)
}

inline void MDUSAQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.nanosecond_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , decltype(_impl_.bidprice_){int64_t{0}}
    , decltype(_impl_.bidsize_){int64_t{0}}
    , decltype(_impl_.bidsizenav_){int64_t{0}}
    , decltype(_impl_.timeindex_){0}
    , decltype(_impl_.bidmarket_){0}
    , decltype(_impl_.askprice_){int64_t{0}}
    , decltype(_impl_.asksize_){int64_t{0}}
    , decltype(_impl_.asksizenav_){int64_t{0}}
    , decltype(_impl_.bidtime_){int64_t{0}}
    , decltype(_impl_.asktime_){int64_t{0}}
    , decltype(_impl_.dataindex_){int64_t{0}}
    , decltype(_impl_.askmarket_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDUSAQuote::~MDUSAQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDUSAQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDUSAQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
}

void MDUSAQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDUSAQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDUSAQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.askmarket_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.askmarket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDUSAQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Nanosecond = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.nanosecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TimeIndex = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.timeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidPrice = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.bidprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidSize = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.bidsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidSizeNAV = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.bidsizenav_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AskPrice = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.askprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AskSize = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.asksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AskSizeNAV = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.asksizenav_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BidMarket = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.bidmarket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BidTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.bidtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AskMarket = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.askmarket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AskTime = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.asktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataIndex = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.dataindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDUSAQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDUSAQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // int32 ExchangeDate = 7;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 8;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_exchangetime(), target);
  }

  // int32 Nanosecond = 9;
  if (this->_internal_nanosecond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_nanosecond(), target);
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_datamultiplepowerof10(), target);
  }

  // int32 TimeIndex = 11;
  if (this->_internal_timeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_timeindex(), target);
  }

  // int64 BidPrice = 12;
  if (this->_internal_bidprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_bidprice(), target);
  }

  // int64 BidSize = 13;
  if (this->_internal_bidsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_bidsize(), target);
  }

  // int64 BidSizeNAV = 14;
  if (this->_internal_bidsizenav() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_bidsizenav(), target);
  }

  // int64 AskPrice = 15;
  if (this->_internal_askprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_askprice(), target);
  }

  // int64 AskSize = 16;
  if (this->_internal_asksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_asksize(), target);
  }

  // int64 AskSizeNAV = 17;
  if (this->_internal_asksizenav() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_asksizenav(), target);
  }

  // int32 BidMarket = 18;
  if (this->_internal_bidmarket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_bidmarket(), target);
  }

  // int64 BidTime = 19;
  if (this->_internal_bidtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_bidtime(), target);
  }

  // int32 AskMarket = 20;
  if (this->_internal_askmarket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_askmarket(), target);
  }

  // int64 AskTime = 21;
  if (this->_internal_asktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_asktime(), target);
  }

  // int64 DataIndex = 22;
  if (this->_internal_dataindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_dataindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDUSAQuote)
  return target;
}

size_t MDUSAQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDUSAQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ExchangeDate = 7;
  if (this->_internal_exchangedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 8;
  if (this->_internal_exchangetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangetime());
  }

  // int32 Nanosecond = 9;
  if (this->_internal_nanosecond() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nanosecond());
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  // int64 BidPrice = 12;
  if (this->_internal_bidprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bidprice());
  }

  // int64 BidSize = 13;
  if (this->_internal_bidsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bidsize());
  }

  // int64 BidSizeNAV = 14;
  if (this->_internal_bidsizenav() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bidsizenav());
  }

  // int32 TimeIndex = 11;
  if (this->_internal_timeindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeindex());
  }

  // int32 BidMarket = 18;
  if (this->_internal_bidmarket() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bidmarket());
  }

  // int64 AskPrice = 15;
  if (this->_internal_askprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_askprice());
  }

  // int64 AskSize = 16;
  if (this->_internal_asksize() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_asksize());
  }

  // int64 AskSizeNAV = 17;
  if (this->_internal_asksizenav() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_asksizenav());
  }

  // int64 BidTime = 19;
  if (this->_internal_bidtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_bidtime());
  }

  // int64 AskTime = 21;
  if (this->_internal_asktime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_asktime());
  }

  // int64 DataIndex = 22;
  if (this->_internal_dataindex() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_dataindex());
  }

  // int32 AskMarket = 20;
  if (this->_internal_askmarket() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_askmarket());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDUSAQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDUSAQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDUSAQuote::GetClassData() const { return &_class_data_; }


void MDUSAQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDUSAQuote*>(&to_msg);
  auto& from = static_cast<const MDUSAQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDUSAQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_nanosecond() != 0) {
    _this->_internal_set_nanosecond(from._internal_nanosecond());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  if (from._internal_bidprice() != 0) {
    _this->_internal_set_bidprice(from._internal_bidprice());
  }
  if (from._internal_bidsize() != 0) {
    _this->_internal_set_bidsize(from._internal_bidsize());
  }
  if (from._internal_bidsizenav() != 0) {
    _this->_internal_set_bidsizenav(from._internal_bidsizenav());
  }
  if (from._internal_timeindex() != 0) {
    _this->_internal_set_timeindex(from._internal_timeindex());
  }
  if (from._internal_bidmarket() != 0) {
    _this->_internal_set_bidmarket(from._internal_bidmarket());
  }
  if (from._internal_askprice() != 0) {
    _this->_internal_set_askprice(from._internal_askprice());
  }
  if (from._internal_asksize() != 0) {
    _this->_internal_set_asksize(from._internal_asksize());
  }
  if (from._internal_asksizenav() != 0) {
    _this->_internal_set_asksizenav(from._internal_asksizenav());
  }
  if (from._internal_bidtime() != 0) {
    _this->_internal_set_bidtime(from._internal_bidtime());
  }
  if (from._internal_asktime() != 0) {
    _this->_internal_set_asktime(from._internal_asktime());
  }
  if (from._internal_dataindex() != 0) {
    _this->_internal_set_dataindex(from._internal_dataindex());
  }
  if (from._internal_askmarket() != 0) {
    _this->_internal_set_askmarket(from._internal_askmarket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDUSAQuote::CopyFrom(const MDUSAQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDUSAQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDUSAQuote::IsInitialized() const {
  return true;
}

void MDUSAQuote::InternalSwap(MDUSAQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDUSAQuote, _impl_.askmarket_)
      + sizeof(MDUSAQuote::_impl_.askmarket_)
      - PROTOBUF_FIELD_OFFSET(MDUSAQuote, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDUSAQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDUSAQuote_2eproto_getter, &descriptor_table_MDUSAQuote_2eproto_once,
      file_level_metadata_MDUSAQuote_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDUSAQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDUSAQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDUSAQuote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
