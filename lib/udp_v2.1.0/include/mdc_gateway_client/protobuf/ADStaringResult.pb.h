// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADStaringResult.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADStaringResult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADStaringResult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADStaringResult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADStaringResult_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADStaringResult_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADStaringResult;
struct ADStaringResultDefaultTypeInternal;
extern ADStaringResultDefaultTypeInternal _ADStaringResult_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADStaringResult* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADStaringResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADStaringResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADStaringResult) */ {
 public:
  inline ADStaringResult() : ADStaringResult(nullptr) {}
  ~ADStaringResult() override;
  explicit PROTOBUF_CONSTEXPR ADStaringResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADStaringResult(const ADStaringResult& from);
  ADStaringResult(ADStaringResult&& from) noexcept
    : ADStaringResult() {
    *this = ::std::move(from);
  }

  inline ADStaringResult& operator=(const ADStaringResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADStaringResult& operator=(ADStaringResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADStaringResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADStaringResult* internal_default_instance() {
    return reinterpret_cast<const ADStaringResult*>(
               &_ADStaringResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADStaringResult& a, ADStaringResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ADStaringResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADStaringResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADStaringResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADStaringResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADStaringResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADStaringResult& from) {
    ADStaringResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADStaringResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADStaringResult";
  }
  protected:
  explicit ADStaringResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kStaringResultIDFieldNumber = 9,
    kStrategyIDFieldNumber = 10,
    kAlgorithmIDFieldNumber = 11,
    kAlgorithmNameFieldNumber = 12,
    kCustomerIDFieldNumber = 13,
    kSystemIDFieldNumber = 14,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kExchangeDateFieldNumber = 7,
    kExchangeTimeFieldNumber = 8,
    kRmindValueFieldNumber = 15,
    kRealCalValueFieldNumber = 16,
    kDataMultiplePowerOf10FieldNumber = 17,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string StaringResultID = 9;
  void clear_staringresultid();
  const std::string& staringresultid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_staringresultid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_staringresultid();
  PROTOBUF_NODISCARD std::string* release_staringresultid();
  void set_allocated_staringresultid(std::string* staringresultid);
  private:
  const std::string& _internal_staringresultid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_staringresultid(const std::string& value);
  std::string* _internal_mutable_staringresultid();
  public:

  // string StrategyID = 10;
  void clear_strategyid();
  const std::string& strategyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strategyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strategyid();
  PROTOBUF_NODISCARD std::string* release_strategyid();
  void set_allocated_strategyid(std::string* strategyid);
  private:
  const std::string& _internal_strategyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategyid(const std::string& value);
  std::string* _internal_mutable_strategyid();
  public:

  // string AlgorithmID = 11;
  void clear_algorithmid();
  const std::string& algorithmid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_algorithmid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_algorithmid();
  PROTOBUF_NODISCARD std::string* release_algorithmid();
  void set_allocated_algorithmid(std::string* algorithmid);
  private:
  const std::string& _internal_algorithmid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algorithmid(const std::string& value);
  std::string* _internal_mutable_algorithmid();
  public:

  // string AlgorithmName = 12;
  void clear_algorithmname();
  const std::string& algorithmname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_algorithmname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_algorithmname();
  PROTOBUF_NODISCARD std::string* release_algorithmname();
  void set_allocated_algorithmname(std::string* algorithmname);
  private:
  const std::string& _internal_algorithmname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algorithmname(const std::string& value);
  std::string* _internal_mutable_algorithmname();
  public:

  // string CustomerID = 13;
  void clear_customerid();
  const std::string& customerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customerid();
  PROTOBUF_NODISCARD std::string* release_customerid();
  void set_allocated_customerid(std::string* customerid);
  private:
  const std::string& _internal_customerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customerid(const std::string& value);
  std::string* _internal_mutable_customerid();
  public:

  // string SystemID = 14;
  void clear_systemid();
  const std::string& systemid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_systemid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_systemid();
  PROTOBUF_NODISCARD std::string* release_systemid();
  void set_allocated_systemid(std::string* systemid);
  private:
  const std::string& _internal_systemid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_systemid(const std::string& value);
  std::string* _internal_mutable_systemid();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 7;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 8;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int64 RmindValue = 15;
  void clear_rmindvalue();
  int64_t rmindvalue() const;
  void set_rmindvalue(int64_t value);
  private:
  int64_t _internal_rmindvalue() const;
  void _internal_set_rmindvalue(int64_t value);
  public:

  // int64 RealCalValue = 16;
  void clear_realcalvalue();
  int64_t realcalvalue() const;
  void set_realcalvalue(int64_t value);
  private:
  int64_t _internal_realcalvalue() const;
  void _internal_set_realcalvalue(int64_t value);
  public:

  // int32 DataMultiplePowerOf10 = 17;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADStaringResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staringresultid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithmid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithmname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemid_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int64_t rmindvalue_;
    int64_t realcalvalue_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADStaringResult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADStaringResult

// string HTSCSecurityID = 1;
inline void ADStaringResult::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADStaringResult::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADStaringResult::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.HTSCSecurityID)
}
inline std::string* ADStaringResult::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADStaringResult.HTSCSecurityID)
  return _s;
}
inline const std::string& ADStaringResult::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADStaringResult::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADStaringResult::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADStaringResult::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADStaringResult.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADStaringResult::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADStaringResult.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADStaringResult::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t ADStaringResult::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t ADStaringResult::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.MDDate)
  return _internal_mddate();
}
inline void ADStaringResult::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void ADStaringResult::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.MDDate)
}

// int32 MDTime = 3;
inline void ADStaringResult::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t ADStaringResult::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t ADStaringResult::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.MDTime)
  return _internal_mdtime();
}
inline void ADStaringResult::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void ADStaringResult::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADStaringResult::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t ADStaringResult::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t ADStaringResult::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.DataTimestamp)
  return _internal_datatimestamp();
}
inline void ADStaringResult::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void ADStaringResult::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADStaringResult::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADStaringResult::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADStaringResult::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.securityIDSource)
  return _internal_securityidsource();
}
inline void ADStaringResult::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void ADStaringResult::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADStaringResult::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADStaringResult::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType ADStaringResult::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.securityType)
  return _internal_securitytype();
}
inline void ADStaringResult::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void ADStaringResult::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.securityType)
}

// int32 ExchangeDate = 7;
inline void ADStaringResult::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t ADStaringResult::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t ADStaringResult::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.ExchangeDate)
  return _internal_exchangedate();
}
inline void ADStaringResult::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void ADStaringResult::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.ExchangeDate)
}

// int32 ExchangeTime = 8;
inline void ADStaringResult::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t ADStaringResult::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t ADStaringResult::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.ExchangeTime)
  return _internal_exchangetime();
}
inline void ADStaringResult::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void ADStaringResult::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.ExchangeTime)
}

// string StaringResultID = 9;
inline void ADStaringResult::clear_staringresultid() {
  _impl_.staringresultid_.ClearToEmpty();
}
inline const std::string& ADStaringResult::staringresultid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.StaringResultID)
  return _internal_staringresultid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADStaringResult::set_staringresultid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.staringresultid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.StaringResultID)
}
inline std::string* ADStaringResult::mutable_staringresultid() {
  std::string* _s = _internal_mutable_staringresultid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADStaringResult.StaringResultID)
  return _s;
}
inline const std::string& ADStaringResult::_internal_staringresultid() const {
  return _impl_.staringresultid_.Get();
}
inline void ADStaringResult::_internal_set_staringresultid(const std::string& value) {
  
  _impl_.staringresultid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADStaringResult::_internal_mutable_staringresultid() {
  
  return _impl_.staringresultid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADStaringResult::release_staringresultid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADStaringResult.StaringResultID)
  return _impl_.staringresultid_.Release();
}
inline void ADStaringResult::set_allocated_staringresultid(std::string* staringresultid) {
  if (staringresultid != nullptr) {
    
  } else {
    
  }
  _impl_.staringresultid_.SetAllocated(staringresultid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.staringresultid_.IsDefault()) {
    _impl_.staringresultid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADStaringResult.StaringResultID)
}

// string StrategyID = 10;
inline void ADStaringResult::clear_strategyid() {
  _impl_.strategyid_.ClearToEmpty();
}
inline const std::string& ADStaringResult::strategyid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.StrategyID)
  return _internal_strategyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADStaringResult::set_strategyid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.strategyid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.StrategyID)
}
inline std::string* ADStaringResult::mutable_strategyid() {
  std::string* _s = _internal_mutable_strategyid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADStaringResult.StrategyID)
  return _s;
}
inline const std::string& ADStaringResult::_internal_strategyid() const {
  return _impl_.strategyid_.Get();
}
inline void ADStaringResult::_internal_set_strategyid(const std::string& value) {
  
  _impl_.strategyid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADStaringResult::_internal_mutable_strategyid() {
  
  return _impl_.strategyid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADStaringResult::release_strategyid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADStaringResult.StrategyID)
  return _impl_.strategyid_.Release();
}
inline void ADStaringResult::set_allocated_strategyid(std::string* strategyid) {
  if (strategyid != nullptr) {
    
  } else {
    
  }
  _impl_.strategyid_.SetAllocated(strategyid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strategyid_.IsDefault()) {
    _impl_.strategyid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADStaringResult.StrategyID)
}

// string AlgorithmID = 11;
inline void ADStaringResult::clear_algorithmid() {
  _impl_.algorithmid_.ClearToEmpty();
}
inline const std::string& ADStaringResult::algorithmid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmID)
  return _internal_algorithmid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADStaringResult::set_algorithmid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.algorithmid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmID)
}
inline std::string* ADStaringResult::mutable_algorithmid() {
  std::string* _s = _internal_mutable_algorithmid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmID)
  return _s;
}
inline const std::string& ADStaringResult::_internal_algorithmid() const {
  return _impl_.algorithmid_.Get();
}
inline void ADStaringResult::_internal_set_algorithmid(const std::string& value) {
  
  _impl_.algorithmid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADStaringResult::_internal_mutable_algorithmid() {
  
  return _impl_.algorithmid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADStaringResult::release_algorithmid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmID)
  return _impl_.algorithmid_.Release();
}
inline void ADStaringResult::set_allocated_algorithmid(std::string* algorithmid) {
  if (algorithmid != nullptr) {
    
  } else {
    
  }
  _impl_.algorithmid_.SetAllocated(algorithmid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.algorithmid_.IsDefault()) {
    _impl_.algorithmid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmID)
}

// string AlgorithmName = 12;
inline void ADStaringResult::clear_algorithmname() {
  _impl_.algorithmname_.ClearToEmpty();
}
inline const std::string& ADStaringResult::algorithmname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmName)
  return _internal_algorithmname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADStaringResult::set_algorithmname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.algorithmname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmName)
}
inline std::string* ADStaringResult::mutable_algorithmname() {
  std::string* _s = _internal_mutable_algorithmname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmName)
  return _s;
}
inline const std::string& ADStaringResult::_internal_algorithmname() const {
  return _impl_.algorithmname_.Get();
}
inline void ADStaringResult::_internal_set_algorithmname(const std::string& value) {
  
  _impl_.algorithmname_.Set(value, GetArenaForAllocation());
}
inline std::string* ADStaringResult::_internal_mutable_algorithmname() {
  
  return _impl_.algorithmname_.Mutable(GetArenaForAllocation());
}
inline std::string* ADStaringResult::release_algorithmname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmName)
  return _impl_.algorithmname_.Release();
}
inline void ADStaringResult::set_allocated_algorithmname(std::string* algorithmname) {
  if (algorithmname != nullptr) {
    
  } else {
    
  }
  _impl_.algorithmname_.SetAllocated(algorithmname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.algorithmname_.IsDefault()) {
    _impl_.algorithmname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADStaringResult.AlgorithmName)
}

// string CustomerID = 13;
inline void ADStaringResult::clear_customerid() {
  _impl_.customerid_.ClearToEmpty();
}
inline const std::string& ADStaringResult::customerid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.CustomerID)
  return _internal_customerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADStaringResult::set_customerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.customerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.CustomerID)
}
inline std::string* ADStaringResult::mutable_customerid() {
  std::string* _s = _internal_mutable_customerid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADStaringResult.CustomerID)
  return _s;
}
inline const std::string& ADStaringResult::_internal_customerid() const {
  return _impl_.customerid_.Get();
}
inline void ADStaringResult::_internal_set_customerid(const std::string& value) {
  
  _impl_.customerid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADStaringResult::_internal_mutable_customerid() {
  
  return _impl_.customerid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADStaringResult::release_customerid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADStaringResult.CustomerID)
  return _impl_.customerid_.Release();
}
inline void ADStaringResult::set_allocated_customerid(std::string* customerid) {
  if (customerid != nullptr) {
    
  } else {
    
  }
  _impl_.customerid_.SetAllocated(customerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.customerid_.IsDefault()) {
    _impl_.customerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADStaringResult.CustomerID)
}

// string SystemID = 14;
inline void ADStaringResult::clear_systemid() {
  _impl_.systemid_.ClearToEmpty();
}
inline const std::string& ADStaringResult::systemid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.SystemID)
  return _internal_systemid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADStaringResult::set_systemid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.systemid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.SystemID)
}
inline std::string* ADStaringResult::mutable_systemid() {
  std::string* _s = _internal_mutable_systemid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADStaringResult.SystemID)
  return _s;
}
inline const std::string& ADStaringResult::_internal_systemid() const {
  return _impl_.systemid_.Get();
}
inline void ADStaringResult::_internal_set_systemid(const std::string& value) {
  
  _impl_.systemid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADStaringResult::_internal_mutable_systemid() {
  
  return _impl_.systemid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADStaringResult::release_systemid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADStaringResult.SystemID)
  return _impl_.systemid_.Release();
}
inline void ADStaringResult::set_allocated_systemid(std::string* systemid) {
  if (systemid != nullptr) {
    
  } else {
    
  }
  _impl_.systemid_.SetAllocated(systemid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.systemid_.IsDefault()) {
    _impl_.systemid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADStaringResult.SystemID)
}

// int64 RmindValue = 15;
inline void ADStaringResult::clear_rmindvalue() {
  _impl_.rmindvalue_ = int64_t{0};
}
inline int64_t ADStaringResult::_internal_rmindvalue() const {
  return _impl_.rmindvalue_;
}
inline int64_t ADStaringResult::rmindvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.RmindValue)
  return _internal_rmindvalue();
}
inline void ADStaringResult::_internal_set_rmindvalue(int64_t value) {
  
  _impl_.rmindvalue_ = value;
}
inline void ADStaringResult::set_rmindvalue(int64_t value) {
  _internal_set_rmindvalue(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.RmindValue)
}

// int64 RealCalValue = 16;
inline void ADStaringResult::clear_realcalvalue() {
  _impl_.realcalvalue_ = int64_t{0};
}
inline int64_t ADStaringResult::_internal_realcalvalue() const {
  return _impl_.realcalvalue_;
}
inline int64_t ADStaringResult::realcalvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.RealCalValue)
  return _internal_realcalvalue();
}
inline void ADStaringResult::_internal_set_realcalvalue(int64_t value) {
  
  _impl_.realcalvalue_ = value;
}
inline void ADStaringResult::set_realcalvalue(int64_t value) {
  _internal_set_realcalvalue(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.RealCalValue)
}

// int32 DataMultiplePowerOf10 = 17;
inline void ADStaringResult::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t ADStaringResult::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t ADStaringResult::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADStaringResult.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void ADStaringResult::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void ADStaringResult::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADStaringResult.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADStaringResult_2eproto
