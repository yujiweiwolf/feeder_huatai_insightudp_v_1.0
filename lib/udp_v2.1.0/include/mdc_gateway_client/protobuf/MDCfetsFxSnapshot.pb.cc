// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCfetsFxSnapshot.proto

#include "MDCfetsFxSnapshot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDCfetsFxSnapshot::MDCfetsFxSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securitysubtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transacttime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spotfxsnapshot_)*/nullptr
  , /*decltype(_impl_.forwardfxsnapshot_)*/nullptr
  , /*decltype(_impl_.nondeliverableforwardsfxsnapshot_)*/nullptr
  , /*decltype(_impl_.swapfxsnapshot_)*/nullptr
  , /*decltype(_impl_.optionfxsnapshot_)*/nullptr
  , /*decltype(_impl_.spotclosepricefxsnapshot_)*/nullptr
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.forexsnapshottype_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDCfetsFxSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDCfetsFxSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDCfetsFxSnapshotDefaultTypeInternal() {}
  union {
    MDCfetsFxSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDCfetsFxSnapshotDefaultTypeInternal _MDCfetsFxSnapshot_default_instance_;
PROTOBUF_CONSTEXPR SwpSptNdfFowFxSnapshot::SwpSptNdfFowFxSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valuedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datebuy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timebuy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datesell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timesell_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legsign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.netbasischange_)*/int64_t{0}
  , /*decltype(_impl_.percentagechange_)*/int64_t{0}
  , /*decltype(_impl_.lastratebuy_)*/int64_t{0}
  , /*decltype(_impl_.lastratesell_)*/int64_t{0}
  , /*decltype(_impl_.lastallinbuy_)*/int64_t{0}
  , /*decltype(_impl_.lastallinsell_)*/int64_t{0}
  , /*decltype(_impl_.highrate_)*/int64_t{0}
  , /*decltype(_impl_.lowrate_)*/int64_t{0}
  , /*decltype(_impl_.openrate_)*/int64_t{0}
  , /*decltype(_impl_.historycloserate_)*/int64_t{0}
  , /*decltype(_impl_.closerate_)*/int64_t{0}
  , /*decltype(_impl_.amountlevelrate_)*/0
  , /*decltype(_impl_.amountlevelallin_)*/0
  , /*decltype(_impl_.rateside_)*/0
  , /*decltype(_impl_.allinside_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwpSptNdfFowFxSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwpSptNdfFowFxSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwpSptNdfFowFxSnapshotDefaultTypeInternal() {}
  union {
    SwpSptNdfFowFxSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwpSptNdfFowFxSnapshotDefaultTypeInternal _SwpSptNdfFowFxSnapshot_default_instance_;
PROTOBUF_CONSTEXPR OptionFxSnapshot::OptionFxSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fxterm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optiontype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.premium_)*/int64_t{0}
  , /*decltype(_impl_.volatility_)*/int64_t{0}
  , /*decltype(_impl_.volume_)*/int64_t{0}
  , /*decltype(_impl_.premiumtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionFxSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionFxSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionFxSnapshotDefaultTypeInternal() {}
  union {
    OptionFxSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionFxSnapshotDefaultTypeInternal _OptionFxSnapshot_default_instance_;
PROTOBUF_CONSTEXPR SpotClosePriceFxSnapshot::SpotClosePriceFxSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.updatedate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updatetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpotClosePriceFxSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotClosePriceFxSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotClosePriceFxSnapshotDefaultTypeInternal() {}
  union {
    SpotClosePriceFxSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotClosePriceFxSnapshotDefaultTypeInternal _SpotClosePriceFxSnapshot_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDCfetsFxSnapshot_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDCfetsFxSnapshot_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDCfetsFxSnapshot_2eproto = nullptr;

const uint32_t TableStruct_MDCfetsFxSnapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.securitysubtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.forexsnapshottype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.spotfxsnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.forwardfxsnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.nondeliverableforwardsfxsnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.swapfxsnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.optionfxsnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.spotclosepricefxsnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot, _impl_.transacttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.valuedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.netbasischange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.percentagechange_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.datebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.timebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.datesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.timesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.lastratebuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.lastratesell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.lastallinbuy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.lastallinsell_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.highrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.lowrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.openrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.historycloserate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.closerate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.amountlevelrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.amountlevelallin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.rateside_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.allinside_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot, _impl_.legsign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _impl_.fxterm_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _impl_.premium_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _impl_.volatility_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _impl_.tradedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _impl_.tradetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _impl_.premiumtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::OptionFxSnapshot, _impl_.optiontype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot, _impl_.updatedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot, _impl_.updatetime_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDCfetsFxSnapshot)},
  { 22, -1, -1, sizeof(::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot)},
  { 49, -1, -1, sizeof(::com::htsc::mdc::insight::model::OptionFxSnapshot)},
  { 63, -1, -1, sizeof(::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDCfetsFxSnapshot_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SwpSptNdfFowFxSnapshot_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_OptionFxSnapshot_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_SpotClosePriceFxSnapshot_default_instance_._instance,
};

const char descriptor_table_protodef_MDCfetsFxSnapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027MDCfetsFxSnapshot.proto\022\032com.htsc.mdc."
  "insight.model\032\027ESecurityIDSource.proto\032\023"
  "ESecurityType.proto\"\252\006\n\021MDCfetsFxSnapsho"
  "t\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001("
  "\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003"
  "\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc.md"
  "c.model.ESecurityIDSource\0227\n\014securityTyp"
  "e\030\006 \001(\0162!.com.htsc.mdc.model.ESecurityTy"
  "pe\022\027\n\017SecuritySubType\030\007 \001(\t\022\031\n\021ForexSnap"
  "shotType\030\010 \001(\005\022J\n\016spotFxSnapshot\030\t \001(\01322"
  ".com.htsc.mdc.insight.model.SwpSptNdfFow"
  "FxSnapshot\022M\n\021forwardFxSnapshot\030\n \001(\01322."
  "com.htsc.mdc.insight.model.SwpSptNdfFowF"
  "xSnapshot\022\\\n nonDeliverableForwardsFxSna"
  "pshot\030\013 \001(\01322.com.htsc.mdc.insight.model"
  ".SwpSptNdfFowFxSnapshot\022J\n\016swapFxSnapsho"
  "t\030\014 \001(\01322.com.htsc.mdc.insight.model.Swp"
  "SptNdfFowFxSnapshot\022F\n\020optionFxSnapshot\030"
  "\r \001(\0132,.com.htsc.mdc.insight.model.Optio"
  "nFxSnapshot\022V\n\030spotClosePriceFxSnapshot\030"
  "\016 \001(\01324.com.htsc.mdc.insight.model.SpotC"
  "losePriceFxSnapshot\022\035\n\025DataMultiplePower"
  "Of10\030\017 \001(\005\022\024\n\014TransactTime\030\020 \001(\t\"\306\003\n\026Swp"
  "SptNdfFowFxSnapshot\022\021\n\tValueDate\030\001 \001(\t\022\026"
  "\n\016NetBasisChange\030\002 \001(\003\022\030\n\020PercentageChan"
  "ge\030\003 \001(\003\022\017\n\007DateBuy\030\004 \001(\t\022\017\n\007TimeBuy\030\005 \001"
  "(\t\022\020\n\010DateSell\030\006 \001(\t\022\020\n\010TimeSell\030\007 \001(\t\022\023"
  "\n\013LastRateBuy\030\010 \001(\003\022\024\n\014LastRateSell\030\t \001("
  "\003\022\024\n\014LastAllinBuy\030\n \001(\003\022\025\n\rLastAllinSell"
  "\030\013 \001(\003\022\020\n\010HighRate\030\014 \001(\003\022\017\n\007LowRate\030\r \001("
  "\003\022\020\n\010OpenRate\030\016 \001(\003\022\030\n\020HistoryCloseRate\030"
  "\017 \001(\003\022\021\n\tCloseRate\030\020 \001(\003\022\027\n\017AmountLevelR"
  "ate\030\021 \001(\005\022\030\n\020AmountLevelAllin\030\022 \001(\005\022\020\n\010R"
  "ateSide\030\023 \001(\005\022\021\n\tAllinSide\030\024 \001(\005\022\017\n\007LegS"
  "ign\030\025 \001(\t\"\246\001\n\020OptionFxSnapshot\022\016\n\006FxTerm"
  "\030\001 \001(\t\022\017\n\007Premium\030\002 \001(\003\022\022\n\nVolatility\030\003 "
  "\001(\003\022\016\n\006Volume\030\004 \001(\003\022\021\n\tTradeDate\030\005 \001(\t\022\021"
  "\n\tTradeTime\030\006 \001(\t\022\023\n\013PremiumType\030\007 \001(\005\022\022"
  "\n\nOptionType\030\010 \001(\t\"S\n\030SpotClosePriceFxSn"
  "apshot\022\017\n\007ClosePx\030\001 \001(\003\022\022\n\nUpdateDate\030\002 "
  "\001(\t\022\022\n\nUpdateTime\030\003 \001(\tB:\n\032com.htsc.mdc."
  "insight.modelB\027MDCfetsFxSnapshotProtosH\001"
  "\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDCfetsFxSnapshot_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDCfetsFxSnapshot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDCfetsFxSnapshot_2eproto = {
    false, false, 1691, descriptor_table_protodef_MDCfetsFxSnapshot_2eproto,
    "MDCfetsFxSnapshot.proto",
    &descriptor_table_MDCfetsFxSnapshot_2eproto_once, descriptor_table_MDCfetsFxSnapshot_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_MDCfetsFxSnapshot_2eproto::offsets,
    file_level_metadata_MDCfetsFxSnapshot_2eproto, file_level_enum_descriptors_MDCfetsFxSnapshot_2eproto,
    file_level_service_descriptors_MDCfetsFxSnapshot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDCfetsFxSnapshot_2eproto_getter() {
  return &descriptor_table_MDCfetsFxSnapshot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDCfetsFxSnapshot_2eproto(&descriptor_table_MDCfetsFxSnapshot_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCfetsFxSnapshot::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& spotfxsnapshot(const MDCfetsFxSnapshot* msg);
  static const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& forwardfxsnapshot(const MDCfetsFxSnapshot* msg);
  static const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& nondeliverableforwardsfxsnapshot(const MDCfetsFxSnapshot* msg);
  static const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot& swapfxsnapshot(const MDCfetsFxSnapshot* msg);
  static const ::com::htsc::mdc::insight::model::OptionFxSnapshot& optionfxsnapshot(const MDCfetsFxSnapshot* msg);
  static const ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot& spotclosepricefxsnapshot(const MDCfetsFxSnapshot* msg);
};

const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot&
MDCfetsFxSnapshot::_Internal::spotfxsnapshot(const MDCfetsFxSnapshot* msg) {
  return *msg->_impl_.spotfxsnapshot_;
}
const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot&
MDCfetsFxSnapshot::_Internal::forwardfxsnapshot(const MDCfetsFxSnapshot* msg) {
  return *msg->_impl_.forwardfxsnapshot_;
}
const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot&
MDCfetsFxSnapshot::_Internal::nondeliverableforwardsfxsnapshot(const MDCfetsFxSnapshot* msg) {
  return *msg->_impl_.nondeliverableforwardsfxsnapshot_;
}
const ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot&
MDCfetsFxSnapshot::_Internal::swapfxsnapshot(const MDCfetsFxSnapshot* msg) {
  return *msg->_impl_.swapfxsnapshot_;
}
const ::com::htsc::mdc::insight::model::OptionFxSnapshot&
MDCfetsFxSnapshot::_Internal::optionfxsnapshot(const MDCfetsFxSnapshot* msg) {
  return *msg->_impl_.optionfxsnapshot_;
}
const ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot&
MDCfetsFxSnapshot::_Internal::spotclosepricefxsnapshot(const MDCfetsFxSnapshot* msg) {
  return *msg->_impl_.spotclosepricefxsnapshot_;
}
MDCfetsFxSnapshot::MDCfetsFxSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
}
MDCfetsFxSnapshot::MDCfetsFxSnapshot(const MDCfetsFxSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDCfetsFxSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securitysubtype_){}
    , decltype(_impl_.transacttime_){}
    , decltype(_impl_.spotfxsnapshot_){nullptr}
    , decltype(_impl_.forwardfxsnapshot_){nullptr}
    , decltype(_impl_.nondeliverableforwardsfxsnapshot_){nullptr}
    , decltype(_impl_.swapfxsnapshot_){nullptr}
    , decltype(_impl_.optionfxsnapshot_){nullptr}
    , decltype(_impl_.spotclosepricefxsnapshot_){nullptr}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.forexsnapshottype_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securitysubtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_securitysubtype().empty()) {
    _this->_impl_.securitysubtype_.Set(from._internal_securitysubtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transacttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transacttime().empty()) {
    _this->_impl_.transacttime_.Set(from._internal_transacttime(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spotfxsnapshot()) {
    _this->_impl_.spotfxsnapshot_ = new ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot(*from._impl_.spotfxsnapshot_);
  }
  if (from._internal_has_forwardfxsnapshot()) {
    _this->_impl_.forwardfxsnapshot_ = new ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot(*from._impl_.forwardfxsnapshot_);
  }
  if (from._internal_has_nondeliverableforwardsfxsnapshot()) {
    _this->_impl_.nondeliverableforwardsfxsnapshot_ = new ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot(*from._impl_.nondeliverableforwardsfxsnapshot_);
  }
  if (from._internal_has_swapfxsnapshot()) {
    _this->_impl_.swapfxsnapshot_ = new ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot(*from._impl_.swapfxsnapshot_);
  }
  if (from._internal_has_optionfxsnapshot()) {
    _this->_impl_.optionfxsnapshot_ = new ::com::htsc::mdc::insight::model::OptionFxSnapshot(*from._impl_.optionfxsnapshot_);
  }
  if (from._internal_has_spotclosepricefxsnapshot()) {
    _this->_impl_.spotclosepricefxsnapshot_ = new ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot(*from._impl_.spotclosepricefxsnapshot_);
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
}

inline void MDCfetsFxSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.securitysubtype_){}
    , decltype(_impl_.transacttime_){}
    , decltype(_impl_.spotfxsnapshot_){nullptr}
    , decltype(_impl_.forwardfxsnapshot_){nullptr}
    , decltype(_impl_.nondeliverableforwardsfxsnapshot_){nullptr}
    , decltype(_impl_.swapfxsnapshot_){nullptr}
    , decltype(_impl_.optionfxsnapshot_){nullptr}
    , decltype(_impl_.spotclosepricefxsnapshot_){nullptr}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.forexsnapshottype_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securitysubtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitysubtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transacttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transacttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDCfetsFxSnapshot::~MDCfetsFxSnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDCfetsFxSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.securitysubtype_.Destroy();
  _impl_.transacttime_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spotfxsnapshot_;
  if (this != internal_default_instance()) delete _impl_.forwardfxsnapshot_;
  if (this != internal_default_instance()) delete _impl_.nondeliverableforwardsfxsnapshot_;
  if (this != internal_default_instance()) delete _impl_.swapfxsnapshot_;
  if (this != internal_default_instance()) delete _impl_.optionfxsnapshot_;
  if (this != internal_default_instance()) delete _impl_.spotclosepricefxsnapshot_;
}

void MDCfetsFxSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDCfetsFxSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.securitysubtype_.ClearToEmpty();
  _impl_.transacttime_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spotfxsnapshot_ != nullptr) {
    delete _impl_.spotfxsnapshot_;
  }
  _impl_.spotfxsnapshot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forwardfxsnapshot_ != nullptr) {
    delete _impl_.forwardfxsnapshot_;
  }
  _impl_.forwardfxsnapshot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nondeliverableforwardsfxsnapshot_ != nullptr) {
    delete _impl_.nondeliverableforwardsfxsnapshot_;
  }
  _impl_.nondeliverableforwardsfxsnapshot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.swapfxsnapshot_ != nullptr) {
    delete _impl_.swapfxsnapshot_;
  }
  _impl_.swapfxsnapshot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.optionfxsnapshot_ != nullptr) {
    delete _impl_.optionfxsnapshot_;
  }
  _impl_.optionfxsnapshot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spotclosepricefxsnapshot_ != nullptr) {
    delete _impl_.spotclosepricefxsnapshot_;
  }
  _impl_.spotclosepricefxsnapshot_ = nullptr;
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDCfetsFxSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsFxSnapshot.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string SecuritySubType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_securitysubtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsFxSnapshot.SecuritySubType"));
        } else
          goto handle_unusual;
        continue;
      // int32 ForexSnapshotType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.forexsnapshottype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot spotFxSnapshot = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_spotfxsnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot forwardFxSnapshot = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_forwardfxsnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot nonDeliverableForwardsFxSnapshot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_nondeliverableforwardsfxsnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot swapFxSnapshot = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapfxsnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.OptionFxSnapshot optionFxSnapshot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_optionfxsnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot spotClosePriceFxSnapshot = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_spotclosepricefxsnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TransactTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCfetsFxSnapshot.TransactTime"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDCfetsFxSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsFxSnapshot.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // string SecuritySubType = 7;
  if (!this->_internal_securitysubtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securitysubtype().data(), static_cast<int>(this->_internal_securitysubtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsFxSnapshot.SecuritySubType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_securitysubtype(), target);
  }

  // int32 ForexSnapshotType = 8;
  if (this->_internal_forexsnapshottype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_forexsnapshottype(), target);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot spotFxSnapshot = 9;
  if (this->_internal_has_spotfxsnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::spotfxsnapshot(this),
        _Internal::spotfxsnapshot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot forwardFxSnapshot = 10;
  if (this->_internal_has_forwardfxsnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::forwardfxsnapshot(this),
        _Internal::forwardfxsnapshot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot nonDeliverableForwardsFxSnapshot = 11;
  if (this->_internal_has_nondeliverableforwardsfxsnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::nondeliverableforwardsfxsnapshot(this),
        _Internal::nondeliverableforwardsfxsnapshot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot swapFxSnapshot = 12;
  if (this->_internal_has_swapfxsnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::swapfxsnapshot(this),
        _Internal::swapfxsnapshot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.OptionFxSnapshot optionFxSnapshot = 13;
  if (this->_internal_has_optionfxsnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::optionfxsnapshot(this),
        _Internal::optionfxsnapshot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot spotClosePriceFxSnapshot = 14;
  if (this->_internal_has_spotclosepricefxsnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::spotclosepricefxsnapshot(this),
        _Internal::spotclosepricefxsnapshot(this).GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 15;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_datamultiplepowerof10(), target);
  }

  // string TransactTime = 16;
  if (!this->_internal_transacttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCfetsFxSnapshot.TransactTime");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_transacttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
  return target;
}

size_t MDCfetsFxSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string SecuritySubType = 7;
  if (!this->_internal_securitysubtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securitysubtype());
  }

  // string TransactTime = 16;
  if (!this->_internal_transacttime().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot spotFxSnapshot = 9;
  if (this->_internal_has_spotfxsnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spotfxsnapshot_);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot forwardFxSnapshot = 10;
  if (this->_internal_has_forwardfxsnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forwardfxsnapshot_);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot nonDeliverableForwardsFxSnapshot = 11;
  if (this->_internal_has_nondeliverableforwardsfxsnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nondeliverableforwardsfxsnapshot_);
  }

  // .com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot swapFxSnapshot = 12;
  if (this->_internal_has_swapfxsnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.swapfxsnapshot_);
  }

  // .com.htsc.mdc.insight.model.OptionFxSnapshot optionFxSnapshot = 13;
  if (this->_internal_has_optionfxsnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optionfxsnapshot_);
  }

  // .com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot spotClosePriceFxSnapshot = 14;
  if (this->_internal_has_spotclosepricefxsnapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spotclosepricefxsnapshot_);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ForexSnapshotType = 8;
  if (this->_internal_forexsnapshottype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_forexsnapshottype());
  }

  // int32 DataMultiplePowerOf10 = 15;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDCfetsFxSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDCfetsFxSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDCfetsFxSnapshot::GetClassData() const { return &_class_data_; }


void MDCfetsFxSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDCfetsFxSnapshot*>(&to_msg);
  auto& from = static_cast<const MDCfetsFxSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_securitysubtype().empty()) {
    _this->_internal_set_securitysubtype(from._internal_securitysubtype());
  }
  if (!from._internal_transacttime().empty()) {
    _this->_internal_set_transacttime(from._internal_transacttime());
  }
  if (from._internal_has_spotfxsnapshot()) {
    _this->_internal_mutable_spotfxsnapshot()->::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot::MergeFrom(
        from._internal_spotfxsnapshot());
  }
  if (from._internal_has_forwardfxsnapshot()) {
    _this->_internal_mutable_forwardfxsnapshot()->::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot::MergeFrom(
        from._internal_forwardfxsnapshot());
  }
  if (from._internal_has_nondeliverableforwardsfxsnapshot()) {
    _this->_internal_mutable_nondeliverableforwardsfxsnapshot()->::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot::MergeFrom(
        from._internal_nondeliverableforwardsfxsnapshot());
  }
  if (from._internal_has_swapfxsnapshot()) {
    _this->_internal_mutable_swapfxsnapshot()->::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot::MergeFrom(
        from._internal_swapfxsnapshot());
  }
  if (from._internal_has_optionfxsnapshot()) {
    _this->_internal_mutable_optionfxsnapshot()->::com::htsc::mdc::insight::model::OptionFxSnapshot::MergeFrom(
        from._internal_optionfxsnapshot());
  }
  if (from._internal_has_spotclosepricefxsnapshot()) {
    _this->_internal_mutable_spotclosepricefxsnapshot()->::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot::MergeFrom(
        from._internal_spotclosepricefxsnapshot());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_forexsnapshottype() != 0) {
    _this->_internal_set_forexsnapshottype(from._internal_forexsnapshottype());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDCfetsFxSnapshot::CopyFrom(const MDCfetsFxSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCfetsFxSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDCfetsFxSnapshot::IsInitialized() const {
  return true;
}

void MDCfetsFxSnapshot::InternalSwap(MDCfetsFxSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securitysubtype_, lhs_arena,
      &other->_impl_.securitysubtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transacttime_, lhs_arena,
      &other->_impl_.transacttime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDCfetsFxSnapshot, _impl_.datamultiplepowerof10_)
      + sizeof(MDCfetsFxSnapshot::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDCfetsFxSnapshot, _impl_.spotfxsnapshot_)>(
          reinterpret_cast<char*>(&_impl_.spotfxsnapshot_),
          reinterpret_cast<char*>(&other->_impl_.spotfxsnapshot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDCfetsFxSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsFxSnapshot_2eproto_getter, &descriptor_table_MDCfetsFxSnapshot_2eproto_once,
      file_level_metadata_MDCfetsFxSnapshot_2eproto[0]);
}

// ===================================================================

class SwpSptNdfFowFxSnapshot::_Internal {
 public:
};

SwpSptNdfFowFxSnapshot::SwpSptNdfFowFxSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
}
SwpSptNdfFowFxSnapshot::SwpSptNdfFowFxSnapshot(const SwpSptNdfFowFxSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwpSptNdfFowFxSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.datebuy_){}
    , decltype(_impl_.timebuy_){}
    , decltype(_impl_.datesell_){}
    , decltype(_impl_.timesell_){}
    , decltype(_impl_.legsign_){}
    , decltype(_impl_.netbasischange_){}
    , decltype(_impl_.percentagechange_){}
    , decltype(_impl_.lastratebuy_){}
    , decltype(_impl_.lastratesell_){}
    , decltype(_impl_.lastallinbuy_){}
    , decltype(_impl_.lastallinsell_){}
    , decltype(_impl_.highrate_){}
    , decltype(_impl_.lowrate_){}
    , decltype(_impl_.openrate_){}
    , decltype(_impl_.historycloserate_){}
    , decltype(_impl_.closerate_){}
    , decltype(_impl_.amountlevelrate_){}
    , decltype(_impl_.amountlevelallin_){}
    , decltype(_impl_.rateside_){}
    , decltype(_impl_.allinside_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valuedate().empty()) {
    _this->_impl_.valuedate_.Set(from._internal_valuedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.datebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_datebuy().empty()) {
    _this->_impl_.datebuy_.Set(from._internal_datebuy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timebuy().empty()) {
    _this->_impl_.timebuy_.Set(from._internal_timebuy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.datesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_datesell().empty()) {
    _this->_impl_.datesell_.Set(from._internal_datesell(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timesell().empty()) {
    _this->_impl_.timesell_.Set(from._internal_timesell(), 
      _this->GetArenaForAllocation());
  }
  _impl_.legsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_legsign().empty()) {
    _this->_impl_.legsign_.Set(from._internal_legsign(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.netbasischange_, &from._impl_.netbasischange_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allinside_) -
    reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
}

inline void SwpSptNdfFowFxSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.valuedate_){}
    , decltype(_impl_.datebuy_){}
    , decltype(_impl_.timebuy_){}
    , decltype(_impl_.datesell_){}
    , decltype(_impl_.timesell_){}
    , decltype(_impl_.legsign_){}
    , decltype(_impl_.netbasischange_){int64_t{0}}
    , decltype(_impl_.percentagechange_){int64_t{0}}
    , decltype(_impl_.lastratebuy_){int64_t{0}}
    , decltype(_impl_.lastratesell_){int64_t{0}}
    , decltype(_impl_.lastallinbuy_){int64_t{0}}
    , decltype(_impl_.lastallinsell_){int64_t{0}}
    , decltype(_impl_.highrate_){int64_t{0}}
    , decltype(_impl_.lowrate_){int64_t{0}}
    , decltype(_impl_.openrate_){int64_t{0}}
    , decltype(_impl_.historycloserate_){int64_t{0}}
    , decltype(_impl_.closerate_){int64_t{0}}
    , decltype(_impl_.amountlevelrate_){0}
    , decltype(_impl_.amountlevelallin_){0}
    , decltype(_impl_.rateside_){0}
    , decltype(_impl_.allinside_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.valuedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.datebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timebuy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timebuy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.datesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timesell_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timesell_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.legsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SwpSptNdfFowFxSnapshot::~SwpSptNdfFowFxSnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwpSptNdfFowFxSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.valuedate_.Destroy();
  _impl_.datebuy_.Destroy();
  _impl_.timebuy_.Destroy();
  _impl_.datesell_.Destroy();
  _impl_.timesell_.Destroy();
  _impl_.legsign_.Destroy();
}

void SwpSptNdfFowFxSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwpSptNdfFowFxSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valuedate_.ClearToEmpty();
  _impl_.datebuy_.ClearToEmpty();
  _impl_.timebuy_.ClearToEmpty();
  _impl_.datesell_.ClearToEmpty();
  _impl_.timesell_.ClearToEmpty();
  _impl_.legsign_.ClearToEmpty();
  ::memset(&_impl_.netbasischange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allinside_) -
      reinterpret_cast<char*>(&_impl_.netbasischange_)) + sizeof(_impl_.allinside_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwpSptNdfFowFxSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ValueDate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_valuedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.ValueDate"));
        } else
          goto handle_unusual;
        continue;
      // int64 NetBasisChange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.netbasischange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PercentageChange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.percentagechange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string DateBuy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_datebuy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateBuy"));
        } else
          goto handle_unusual;
        continue;
      // string TimeBuy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timebuy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeBuy"));
        } else
          goto handle_unusual;
        continue;
      // string DateSell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_datesell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateSell"));
        } else
          goto handle_unusual;
        continue;
      // string TimeSell = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_timesell();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeSell"));
        } else
          goto handle_unusual;
        continue;
      // int64 LastRateBuy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lastratebuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastRateSell = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.lastratesell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastAllinBuy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lastallinbuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastAllinSell = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.lastallinsell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.highrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowRate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lowrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.openrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HistoryCloseRate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.historycloserate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseRate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.closerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelRate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.amountlevelrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmountLevelAllin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.amountlevelallin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RateSide = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.rateside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AllinSide = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.allinside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LegSign = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_legsign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LegSign"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwpSptNdfFowFxSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuedate().data(), static_cast<int>(this->_internal_valuedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.ValueDate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_valuedate(), target);
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_netbasischange(), target);
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_percentagechange(), target);
  }

  // string DateBuy = 4;
  if (!this->_internal_datebuy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datebuy().data(), static_cast<int>(this->_internal_datebuy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateBuy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_datebuy(), target);
  }

  // string TimeBuy = 5;
  if (!this->_internal_timebuy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timebuy().data(), static_cast<int>(this->_internal_timebuy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeBuy");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_timebuy(), target);
  }

  // string DateSell = 6;
  if (!this->_internal_datesell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datesell().data(), static_cast<int>(this->_internal_datesell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.DateSell");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_datesell(), target);
  }

  // string TimeSell = 7;
  if (!this->_internal_timesell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timesell().data(), static_cast<int>(this->_internal_timesell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.TimeSell");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_timesell(), target);
  }

  // int64 LastRateBuy = 8;
  if (this->_internal_lastratebuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_lastratebuy(), target);
  }

  // int64 LastRateSell = 9;
  if (this->_internal_lastratesell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_lastratesell(), target);
  }

  // int64 LastAllinBuy = 10;
  if (this->_internal_lastallinbuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_lastallinbuy(), target);
  }

  // int64 LastAllinSell = 11;
  if (this->_internal_lastallinsell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_lastallinsell(), target);
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_highrate(), target);
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_lowrate(), target);
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_openrate(), target);
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_historycloserate(), target);
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_closerate(), target);
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_amountlevelrate(), target);
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_amountlevelallin(), target);
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_rateside(), target);
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_allinside(), target);
  }

  // string LegSign = 21;
  if (!this->_internal_legsign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_legsign().data(), static_cast<int>(this->_internal_legsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot.LegSign");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_legsign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
  return target;
}

size_t SwpSptNdfFowFxSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ValueDate = 1;
  if (!this->_internal_valuedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuedate());
  }

  // string DateBuy = 4;
  if (!this->_internal_datebuy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datebuy());
  }

  // string TimeBuy = 5;
  if (!this->_internal_timebuy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timebuy());
  }

  // string DateSell = 6;
  if (!this->_internal_datesell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datesell());
  }

  // string TimeSell = 7;
  if (!this->_internal_timesell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timesell());
  }

  // string LegSign = 21;
  if (!this->_internal_legsign().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_legsign());
  }

  // int64 NetBasisChange = 2;
  if (this->_internal_netbasischange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_netbasischange());
  }

  // int64 PercentageChange = 3;
  if (this->_internal_percentagechange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_percentagechange());
  }

  // int64 LastRateBuy = 8;
  if (this->_internal_lastratebuy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastratebuy());
  }

  // int64 LastRateSell = 9;
  if (this->_internal_lastratesell() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastratesell());
  }

  // int64 LastAllinBuy = 10;
  if (this->_internal_lastallinbuy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastallinbuy());
  }

  // int64 LastAllinSell = 11;
  if (this->_internal_lastallinsell() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastallinsell());
  }

  // int64 HighRate = 12;
  if (this->_internal_highrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highrate());
  }

  // int64 LowRate = 13;
  if (this->_internal_lowrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowrate());
  }

  // int64 OpenRate = 14;
  if (this->_internal_openrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openrate());
  }

  // int64 HistoryCloseRate = 15;
  if (this->_internal_historycloserate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_historycloserate());
  }

  // int64 CloseRate = 16;
  if (this->_internal_closerate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closerate());
  }

  // int32 AmountLevelRate = 17;
  if (this->_internal_amountlevelrate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelrate());
  }

  // int32 AmountLevelAllin = 18;
  if (this->_internal_amountlevelallin() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_amountlevelallin());
  }

  // int32 RateSide = 19;
  if (this->_internal_rateside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_rateside());
  }

  // int32 AllinSide = 20;
  if (this->_internal_allinside() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_allinside());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwpSptNdfFowFxSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwpSptNdfFowFxSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwpSptNdfFowFxSnapshot::GetClassData() const { return &_class_data_; }


void SwpSptNdfFowFxSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwpSptNdfFowFxSnapshot*>(&to_msg);
  auto& from = static_cast<const SwpSptNdfFowFxSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_valuedate().empty()) {
    _this->_internal_set_valuedate(from._internal_valuedate());
  }
  if (!from._internal_datebuy().empty()) {
    _this->_internal_set_datebuy(from._internal_datebuy());
  }
  if (!from._internal_timebuy().empty()) {
    _this->_internal_set_timebuy(from._internal_timebuy());
  }
  if (!from._internal_datesell().empty()) {
    _this->_internal_set_datesell(from._internal_datesell());
  }
  if (!from._internal_timesell().empty()) {
    _this->_internal_set_timesell(from._internal_timesell());
  }
  if (!from._internal_legsign().empty()) {
    _this->_internal_set_legsign(from._internal_legsign());
  }
  if (from._internal_netbasischange() != 0) {
    _this->_internal_set_netbasischange(from._internal_netbasischange());
  }
  if (from._internal_percentagechange() != 0) {
    _this->_internal_set_percentagechange(from._internal_percentagechange());
  }
  if (from._internal_lastratebuy() != 0) {
    _this->_internal_set_lastratebuy(from._internal_lastratebuy());
  }
  if (from._internal_lastratesell() != 0) {
    _this->_internal_set_lastratesell(from._internal_lastratesell());
  }
  if (from._internal_lastallinbuy() != 0) {
    _this->_internal_set_lastallinbuy(from._internal_lastallinbuy());
  }
  if (from._internal_lastallinsell() != 0) {
    _this->_internal_set_lastallinsell(from._internal_lastallinsell());
  }
  if (from._internal_highrate() != 0) {
    _this->_internal_set_highrate(from._internal_highrate());
  }
  if (from._internal_lowrate() != 0) {
    _this->_internal_set_lowrate(from._internal_lowrate());
  }
  if (from._internal_openrate() != 0) {
    _this->_internal_set_openrate(from._internal_openrate());
  }
  if (from._internal_historycloserate() != 0) {
    _this->_internal_set_historycloserate(from._internal_historycloserate());
  }
  if (from._internal_closerate() != 0) {
    _this->_internal_set_closerate(from._internal_closerate());
  }
  if (from._internal_amountlevelrate() != 0) {
    _this->_internal_set_amountlevelrate(from._internal_amountlevelrate());
  }
  if (from._internal_amountlevelallin() != 0) {
    _this->_internal_set_amountlevelallin(from._internal_amountlevelallin());
  }
  if (from._internal_rateside() != 0) {
    _this->_internal_set_rateside(from._internal_rateside());
  }
  if (from._internal_allinside() != 0) {
    _this->_internal_set_allinside(from._internal_allinside());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwpSptNdfFowFxSnapshot::CopyFrom(const SwpSptNdfFowFxSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SwpSptNdfFowFxSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwpSptNdfFowFxSnapshot::IsInitialized() const {
  return true;
}

void SwpSptNdfFowFxSnapshot::InternalSwap(SwpSptNdfFowFxSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valuedate_, lhs_arena,
      &other->_impl_.valuedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.datebuy_, lhs_arena,
      &other->_impl_.datebuy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timebuy_, lhs_arena,
      &other->_impl_.timebuy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.datesell_, lhs_arena,
      &other->_impl_.datesell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timesell_, lhs_arena,
      &other->_impl_.timesell_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.legsign_, lhs_arena,
      &other->_impl_.legsign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwpSptNdfFowFxSnapshot, _impl_.allinside_)
      + sizeof(SwpSptNdfFowFxSnapshot::_impl_.allinside_)
      - PROTOBUF_FIELD_OFFSET(SwpSptNdfFowFxSnapshot, _impl_.netbasischange_)>(
          reinterpret_cast<char*>(&_impl_.netbasischange_),
          reinterpret_cast<char*>(&other->_impl_.netbasischange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwpSptNdfFowFxSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsFxSnapshot_2eproto_getter, &descriptor_table_MDCfetsFxSnapshot_2eproto_once,
      file_level_metadata_MDCfetsFxSnapshot_2eproto[1]);
}

// ===================================================================

class OptionFxSnapshot::_Internal {
 public:
};

OptionFxSnapshot::OptionFxSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.OptionFxSnapshot)
}
OptionFxSnapshot::OptionFxSnapshot(const OptionFxSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionFxSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fxterm_){}
    , decltype(_impl_.tradedate_){}
    , decltype(_impl_.tradetime_){}
    , decltype(_impl_.optiontype_){}
    , decltype(_impl_.premium_){}
    , decltype(_impl_.volatility_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.premiumtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fxterm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fxterm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fxterm().empty()) {
    _this->_impl_.fxterm_.Set(from._internal_fxterm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradedate().empty()) {
    _this->_impl_.tradedate_.Set(from._internal_tradedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradetime().empty()) {
    _this->_impl_.tradetime_.Set(from._internal_tradetime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optiontype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optiontype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optiontype().empty()) {
    _this->_impl_.optiontype_.Set(from._internal_optiontype(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.premium_, &from._impl_.premium_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.premiumtype_) -
    reinterpret_cast<char*>(&_impl_.premium_)) + sizeof(_impl_.premiumtype_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.OptionFxSnapshot)
}

inline void OptionFxSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fxterm_){}
    , decltype(_impl_.tradedate_){}
    , decltype(_impl_.tradetime_){}
    , decltype(_impl_.optiontype_){}
    , decltype(_impl_.premium_){int64_t{0}}
    , decltype(_impl_.volatility_){int64_t{0}}
    , decltype(_impl_.volume_){int64_t{0}}
    , decltype(_impl_.premiumtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fxterm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fxterm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optiontype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optiontype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OptionFxSnapshot::~OptionFxSnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.OptionFxSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionFxSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fxterm_.Destroy();
  _impl_.tradedate_.Destroy();
  _impl_.tradetime_.Destroy();
  _impl_.optiontype_.Destroy();
}

void OptionFxSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionFxSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.OptionFxSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fxterm_.ClearToEmpty();
  _impl_.tradedate_.ClearToEmpty();
  _impl_.tradetime_.ClearToEmpty();
  _impl_.optiontype_.ClearToEmpty();
  ::memset(&_impl_.premium_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.premiumtype_) -
      reinterpret_cast<char*>(&_impl_.premium_)) + sizeof(_impl_.premiumtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionFxSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FxTerm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fxterm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxSnapshot.FxTerm"));
        } else
          goto handle_unusual;
        continue;
      // int64 Premium = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.premium_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Volatility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradeDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxSnapshot.TradeDate"));
        } else
          goto handle_unusual;
        continue;
      // string TradeTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_tradetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxSnapshot.TradeTime"));
        } else
          goto handle_unusual;
        continue;
      // int32 PremiumType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.premiumtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OptionType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_optiontype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.OptionFxSnapshot.OptionType"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionFxSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.OptionFxSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string FxTerm = 1;
  if (!this->_internal_fxterm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fxterm().data(), static_cast<int>(this->_internal_fxterm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxSnapshot.FxTerm");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fxterm(), target);
  }

  // int64 Premium = 2;
  if (this->_internal_premium() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_premium(), target);
  }

  // int64 Volatility = 3;
  if (this->_internal_volatility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_volatility(), target);
  }

  // int64 Volume = 4;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_volume(), target);
  }

  // string TradeDate = 5;
  if (!this->_internal_tradedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradedate().data(), static_cast<int>(this->_internal_tradedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxSnapshot.TradeDate");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradedate(), target);
  }

  // string TradeTime = 6;
  if (!this->_internal_tradetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradetime().data(), static_cast<int>(this->_internal_tradetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxSnapshot.TradeTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_tradetime(), target);
  }

  // int32 PremiumType = 7;
  if (this->_internal_premiumtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_premiumtype(), target);
  }

  // string OptionType = 8;
  if (!this->_internal_optiontype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optiontype().data(), static_cast<int>(this->_internal_optiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.OptionFxSnapshot.OptionType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_optiontype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.OptionFxSnapshot)
  return target;
}

size_t OptionFxSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.OptionFxSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FxTerm = 1;
  if (!this->_internal_fxterm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fxterm());
  }

  // string TradeDate = 5;
  if (!this->_internal_tradedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradedate());
  }

  // string TradeTime = 6;
  if (!this->_internal_tradetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradetime());
  }

  // string OptionType = 8;
  if (!this->_internal_optiontype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optiontype());
  }

  // int64 Premium = 2;
  if (this->_internal_premium() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_premium());
  }

  // int64 Volatility = 3;
  if (this->_internal_volatility() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_volatility());
  }

  // int64 Volume = 4;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_volume());
  }

  // int32 PremiumType = 7;
  if (this->_internal_premiumtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_premiumtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionFxSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionFxSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionFxSnapshot::GetClassData() const { return &_class_data_; }


void OptionFxSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionFxSnapshot*>(&to_msg);
  auto& from = static_cast<const OptionFxSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.OptionFxSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fxterm().empty()) {
    _this->_internal_set_fxterm(from._internal_fxterm());
  }
  if (!from._internal_tradedate().empty()) {
    _this->_internal_set_tradedate(from._internal_tradedate());
  }
  if (!from._internal_tradetime().empty()) {
    _this->_internal_set_tradetime(from._internal_tradetime());
  }
  if (!from._internal_optiontype().empty()) {
    _this->_internal_set_optiontype(from._internal_optiontype());
  }
  if (from._internal_premium() != 0) {
    _this->_internal_set_premium(from._internal_premium());
  }
  if (from._internal_volatility() != 0) {
    _this->_internal_set_volatility(from._internal_volatility());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_premiumtype() != 0) {
    _this->_internal_set_premiumtype(from._internal_premiumtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionFxSnapshot::CopyFrom(const OptionFxSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.OptionFxSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionFxSnapshot::IsInitialized() const {
  return true;
}

void OptionFxSnapshot::InternalSwap(OptionFxSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fxterm_, lhs_arena,
      &other->_impl_.fxterm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradedate_, lhs_arena,
      &other->_impl_.tradedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradetime_, lhs_arena,
      &other->_impl_.tradetime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optiontype_, lhs_arena,
      &other->_impl_.optiontype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionFxSnapshot, _impl_.premiumtype_)
      + sizeof(OptionFxSnapshot::_impl_.premiumtype_)
      - PROTOBUF_FIELD_OFFSET(OptionFxSnapshot, _impl_.premium_)>(
          reinterpret_cast<char*>(&_impl_.premium_),
          reinterpret_cast<char*>(&other->_impl_.premium_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionFxSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsFxSnapshot_2eproto_getter, &descriptor_table_MDCfetsFxSnapshot_2eproto_once,
      file_level_metadata_MDCfetsFxSnapshot_2eproto[2]);
}

// ===================================================================

class SpotClosePriceFxSnapshot::_Internal {
 public:
};

SpotClosePriceFxSnapshot::SpotClosePriceFxSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
}
SpotClosePriceFxSnapshot::SpotClosePriceFxSnapshot(const SpotClosePriceFxSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpotClosePriceFxSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.updatedate_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.closepx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.updatedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updatedate().empty()) {
    _this->_impl_.updatedate_.Set(from._internal_updatedate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updatetime().empty()) {
    _this->_impl_.updatetime_.Set(from._internal_updatetime(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.closepx_ = from._impl_.closepx_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
}

inline void SpotClosePriceFxSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.updatedate_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.closepx_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.updatedate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatedate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpotClosePriceFxSnapshot::~SpotClosePriceFxSnapshot() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotClosePriceFxSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.updatedate_.Destroy();
  _impl_.updatetime_.Destroy();
}

void SpotClosePriceFxSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotClosePriceFxSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updatedate_.ClearToEmpty();
  _impl_.updatetime_.ClearToEmpty();
  _impl_.closepx_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotClosePriceFxSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ClosePx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UpdateDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_updatedate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateDate"));
        } else
          goto handle_unusual;
        continue;
      // string UpdateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_updatetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateTime"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpotClosePriceFxSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ClosePx = 1;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_closepx(), target);
  }

  // string UpdateDate = 2;
  if (!this->_internal_updatedate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatedate().data(), static_cast<int>(this->_internal_updatedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateDate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_updatedate(), target);
  }

  // string UpdateTime = 3;
  if (!this->_internal_updatetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatetime().data(), static_cast<int>(this->_internal_updatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot.UpdateTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_updatetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
  return target;
}

size_t SpotClosePriceFxSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UpdateDate = 2;
  if (!this->_internal_updatedate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatedate());
  }

  // string UpdateTime = 3;
  if (!this->_internal_updatetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatetime());
  }

  // int64 ClosePx = 1;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpotClosePriceFxSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpotClosePriceFxSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpotClosePriceFxSnapshot::GetClassData() const { return &_class_data_; }


void SpotClosePriceFxSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpotClosePriceFxSnapshot*>(&to_msg);
  auto& from = static_cast<const SpotClosePriceFxSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_updatedate().empty()) {
    _this->_internal_set_updatedate(from._internal_updatedate());
  }
  if (!from._internal_updatetime().empty()) {
    _this->_internal_set_updatetime(from._internal_updatetime());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpotClosePriceFxSnapshot::CopyFrom(const SpotClosePriceFxSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SpotClosePriceFxSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotClosePriceFxSnapshot::IsInitialized() const {
  return true;
}

void SpotClosePriceFxSnapshot::InternalSwap(SpotClosePriceFxSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updatedate_, lhs_arena,
      &other->_impl_.updatedate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updatetime_, lhs_arena,
      &other->_impl_.updatetime_, rhs_arena
  );
  swap(_impl_.closepx_, other->_impl_.closepx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotClosePriceFxSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCfetsFxSnapshot_2eproto_getter, &descriptor_table_MDCfetsFxSnapshot_2eproto_once,
      file_level_metadata_MDCfetsFxSnapshot_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDCfetsFxSnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDCfetsFxSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDCfetsFxSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SwpSptNdfFowFxSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::OptionFxSnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::OptionFxSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::OptionFxSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::SpotClosePriceFxSnapshot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
