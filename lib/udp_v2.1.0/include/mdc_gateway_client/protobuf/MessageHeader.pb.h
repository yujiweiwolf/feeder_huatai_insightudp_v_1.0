// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageHeader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageHeader_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MessageHeader;
struct MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MessageHeader* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MessageHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MessageHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  ~MessageHeader() override;
  explicit PROTOBUF_CONSTEXPR MessageHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageHeader& from) {
    MessageHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 5,
    kTargetIdFieldNumber = 6,
    kTraceIdFieldNumber = 7,
    kAppTypeFieldNumber = 1,
    kMessageClassificationFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kSendingTimeFieldNumber = 4,
  };
  // string senderId = 5;
  void clear_senderid();
  const std::string& senderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_senderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_senderid();
  PROTOBUF_NODISCARD std::string* release_senderid();
  void set_allocated_senderid(std::string* senderid);
  private:
  const std::string& _internal_senderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderid(const std::string& value);
  std::string* _internal_mutable_senderid();
  public:

  // string targetId = 6;
  void clear_targetid();
  const std::string& targetid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetid();
  PROTOBUF_NODISCARD std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // string traceId = 7;
  void clear_traceid();
  const std::string& traceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traceid();
  PROTOBUF_NODISCARD std::string* release_traceid();
  void set_allocated_traceid(std::string* traceid);
  private:
  const std::string& _internal_traceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traceid(const std::string& value);
  std::string* _internal_mutable_traceid();
  public:

  // int32 appType = 1;
  void clear_apptype();
  int32_t apptype() const;
  void set_apptype(int32_t value);
  private:
  int32_t _internal_apptype() const;
  void _internal_set_apptype(int32_t value);
  public:

  // int32 messageClassification = 2;
  void clear_messageclassification();
  int32_t messageclassification() const;
  void set_messageclassification(int32_t value);
  private:
  int32_t _internal_messageclassification() const;
  void _internal_set_messageclassification(int32_t value);
  public:

  // int64 messageId = 3;
  void clear_messageid();
  int64_t messageid() const;
  void set_messageid(int64_t value);
  private:
  int64_t _internal_messageid() const;
  void _internal_set_messageid(int64_t value);
  public:

  // int64 sendingTime = 4;
  void clear_sendingtime();
  int64_t sendingtime() const;
  void set_sendingtime(int64_t value);
  private:
  int64_t _internal_sendingtime() const;
  void _internal_set_sendingtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traceid_;
    int32_t apptype_;
    int32_t messageclassification_;
    int64_t messageid_;
    int64_t sendingtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// int32 appType = 1;
inline void MessageHeader::clear_apptype() {
  _impl_.apptype_ = 0;
}
inline int32_t MessageHeader::_internal_apptype() const {
  return _impl_.apptype_;
}
inline int32_t MessageHeader::apptype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.appType)
  return _internal_apptype();
}
inline void MessageHeader::_internal_set_apptype(int32_t value) {
  
  _impl_.apptype_ = value;
}
inline void MessageHeader::set_apptype(int32_t value) {
  _internal_set_apptype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.appType)
}

// int32 messageClassification = 2;
inline void MessageHeader::clear_messageclassification() {
  _impl_.messageclassification_ = 0;
}
inline int32_t MessageHeader::_internal_messageclassification() const {
  return _impl_.messageclassification_;
}
inline int32_t MessageHeader::messageclassification() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.messageClassification)
  return _internal_messageclassification();
}
inline void MessageHeader::_internal_set_messageclassification(int32_t value) {
  
  _impl_.messageclassification_ = value;
}
inline void MessageHeader::set_messageclassification(int32_t value) {
  _internal_set_messageclassification(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.messageClassification)
}

// int64 messageId = 3;
inline void MessageHeader::clear_messageid() {
  _impl_.messageid_ = int64_t{0};
}
inline int64_t MessageHeader::_internal_messageid() const {
  return _impl_.messageid_;
}
inline int64_t MessageHeader::messageid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.messageId)
  return _internal_messageid();
}
inline void MessageHeader::_internal_set_messageid(int64_t value) {
  
  _impl_.messageid_ = value;
}
inline void MessageHeader::set_messageid(int64_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.messageId)
}

// int64 sendingTime = 4;
inline void MessageHeader::clear_sendingtime() {
  _impl_.sendingtime_ = int64_t{0};
}
inline int64_t MessageHeader::_internal_sendingtime() const {
  return _impl_.sendingtime_;
}
inline int64_t MessageHeader::sendingtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.sendingTime)
  return _internal_sendingtime();
}
inline void MessageHeader::_internal_set_sendingtime(int64_t value) {
  
  _impl_.sendingtime_ = value;
}
inline void MessageHeader::set_sendingtime(int64_t value) {
  _internal_set_sendingtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.sendingTime)
}

// string senderId = 5;
inline void MessageHeader::clear_senderid() {
  _impl_.senderid_.ClearToEmpty();
}
inline const std::string& MessageHeader::senderid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.senderId)
  return _internal_senderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageHeader::set_senderid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.senderid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.senderId)
}
inline std::string* MessageHeader::mutable_senderid() {
  std::string* _s = _internal_mutable_senderid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageHeader.senderId)
  return _s;
}
inline const std::string& MessageHeader::_internal_senderid() const {
  return _impl_.senderid_.Get();
}
inline void MessageHeader::_internal_set_senderid(const std::string& value) {
  
  _impl_.senderid_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageHeader::_internal_mutable_senderid() {
  
  return _impl_.senderid_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageHeader::release_senderid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageHeader.senderId)
  return _impl_.senderid_.Release();
}
inline void MessageHeader::set_allocated_senderid(std::string* senderid) {
  if (senderid != nullptr) {
    
  } else {
    
  }
  _impl_.senderid_.SetAllocated(senderid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.senderid_.IsDefault()) {
    _impl_.senderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageHeader.senderId)
}

// string targetId = 6;
inline void MessageHeader::clear_targetid() {
  _impl_.targetid_.ClearToEmpty();
}
inline const std::string& MessageHeader::targetid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.targetId)
  return _internal_targetid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageHeader::set_targetid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.targetId)
}
inline std::string* MessageHeader::mutable_targetid() {
  std::string* _s = _internal_mutable_targetid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageHeader.targetId)
  return _s;
}
inline const std::string& MessageHeader::_internal_targetid() const {
  return _impl_.targetid_.Get();
}
inline void MessageHeader::_internal_set_targetid(const std::string& value) {
  
  _impl_.targetid_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageHeader::_internal_mutable_targetid() {
  
  return _impl_.targetid_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageHeader::release_targetid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageHeader.targetId)
  return _impl_.targetid_.Release();
}
inline void MessageHeader::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  _impl_.targetid_.SetAllocated(targetid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetid_.IsDefault()) {
    _impl_.targetid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageHeader.targetId)
}

// string traceId = 7;
inline void MessageHeader::clear_traceid() {
  _impl_.traceid_.ClearToEmpty();
}
inline const std::string& MessageHeader::traceid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.traceId)
  return _internal_traceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageHeader::set_traceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.traceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.traceId)
}
inline std::string* MessageHeader::mutable_traceid() {
  std::string* _s = _internal_mutable_traceid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageHeader.traceId)
  return _s;
}
inline const std::string& MessageHeader::_internal_traceid() const {
  return _impl_.traceid_.Get();
}
inline void MessageHeader::_internal_set_traceid(const std::string& value) {
  
  _impl_.traceid_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageHeader::_internal_mutable_traceid() {
  
  return _impl_.traceid_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageHeader::release_traceid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageHeader.traceId)
  return _impl_.traceid_.Release();
}
inline void MessageHeader::set_allocated_traceid(std::string* traceid) {
  if (traceid != nullptr) {
    
  } else {
    
  }
  _impl_.traceid_.SetAllocated(traceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.traceid_.IsDefault()) {
    _impl_.traceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageHeader.traceId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto
