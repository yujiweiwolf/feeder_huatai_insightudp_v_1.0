// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDHKGreyMarket.proto

#include "MDHKGreyMarket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MDHKGreyMarket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MDHKGreyMarket_MarketEntry_MDHKGreyMarket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDHKGreyMarket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDHKGreyMarket_OrderEntry_MDHKGreyMarket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDHKGreyMarket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDHKGreyMarket_TradeEntry_MDHKGreyMarket_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDHKGreyMarket_MarketEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDHKGreyMarket_MarketEntry> _instance;
} _MDHKGreyMarket_MarketEntry_default_instance_;
class MDHKGreyMarket_OrderEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDHKGreyMarket_OrderEntry> _instance;
} _MDHKGreyMarket_OrderEntry_default_instance_;
class MDHKGreyMarket_TradeEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDHKGreyMarket_TradeEntry> _instance;
} _MDHKGreyMarket_TradeEntry_default_instance_;
class MDHKGreyMarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDHKGreyMarket> _instance;
} _MDHKGreyMarket_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_MDHKGreyMarket_MDHKGreyMarket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDHKGreyMarket_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDHKGreyMarket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDHKGreyMarket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDHKGreyMarket_MDHKGreyMarket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MDHKGreyMarket_MDHKGreyMarket_2eproto}, {
      &scc_info_MDHKGreyMarket_MarketEntry_MDHKGreyMarket_2eproto.base,}};

static void InitDefaultsscc_info_MDHKGreyMarket_MarketEntry_MDHKGreyMarket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDHKGreyMarket_MarketEntry_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MDHKGreyMarket_MarketEntry_MDHKGreyMarket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MDHKGreyMarket_MarketEntry_MDHKGreyMarket_2eproto}, {
      &scc_info_MDHKGreyMarket_OrderEntry_MDHKGreyMarket_2eproto.base,
      &scc_info_MDHKGreyMarket_TradeEntry_MDHKGreyMarket_2eproto.base,}};

static void InitDefaultsscc_info_MDHKGreyMarket_OrderEntry_MDHKGreyMarket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDHKGreyMarket_OrderEntry_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDHKGreyMarket_OrderEntry_MDHKGreyMarket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MDHKGreyMarket_OrderEntry_MDHKGreyMarket_2eproto}, {}};

static void InitDefaultsscc_info_MDHKGreyMarket_TradeEntry_MDHKGreyMarket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDHKGreyMarket_TradeEntry_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDHKGreyMarket_TradeEntry_MDHKGreyMarket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MDHKGreyMarket_TradeEntry_MDHKGreyMarket_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MDHKGreyMarket_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MDHKGreyMarket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MDHKGreyMarket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MDHKGreyMarket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, channeltype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, validflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, buyorderentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, sellorderentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, tradeentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, exchangedatetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, orderlevel_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, orderprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, orderqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, numorders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, tradelevel_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, tradeprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, tradeqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, tradetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, applseqnum_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, marketentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, datamultiplepowerof10_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry)},
  { 20, -1, sizeof(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry)},
  { 29, -1, sizeof(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry)},
  { 38, -1, sizeof(::com::htsc::mdc::insight::model::MDHKGreyMarket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDHKGreyMarket_MarketEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDHKGreyMarket_OrderEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDHKGreyMarket_TradeEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDHKGreyMarket_default_instance_),
};

const char descriptor_table_protodef_MDHKGreyMarket_2eproto[] =
  "\n\024MDHKGreyMarket.proto\022\032com.htsc.mdc.ins"
  "ight.model\032\023ESecurityType.proto\032\027ESecuri"
  "tyIDSource.proto\"\225\010\n\016MDHKGreyMarket\022\026\n\016H"
  "TSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006M"
  "DTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\030\n\020Tr"
  "adingPhaseCode\030\005 \001(\t\022\?\n\020securityIDSource"
  "\030\006 \001(\0162%.com.htsc.mdc.model.ESecurityIDS"
  "ource\0227\n\014securityType\030\007 \001(\0162!.com.htsc.m"
  "dc.model.ESecurityType\022\022\n\nApplSeqNum\030\010 \001"
  "(\003\022M\n\rMarketEntries\030\t \003(\01326.com.htsc.mdc"
  ".insight.model.MDHKGreyMarket.MarketEntr"
  "y\022\035\n\025DataMultiplePowerOf10\030\n \001(\005\032\347\003\n\013Mar"
  "ketEntry\022\023\n\013ChannelType\030\001 \001(\005\022\021\n\tValidFl"
  "ag\030\002 \001(\010\022\022\n\nPreClosePx\030\003 \001(\003\022\021\n\tNumTrade"
  "s\030\004 \001(\003\022\030\n\020TotalVolumeTrade\030\005 \001(\003\022\027\n\017Tot"
  "alValueTrade\030\006 \001(\003\022\016\n\006LastPx\030\007 \001(\003\022\016\n\006Op"
  "enPx\030\010 \001(\003\022\017\n\007ClosePx\030\t \001(\003\022\016\n\006HighPx\030\n "
  "\001(\003\022\r\n\005LowPx\030\013 \001(\003\022N\n\017BuyOrderEntries\030\014 "
  "\003(\01325.com.htsc.mdc.insight.model.MDHKGre"
  "yMarket.OrderEntry\022O\n\020SellOrderEntries\030\r"
  " \003(\01325.com.htsc.mdc.insight.model.MDHKGr"
  "eyMarket.OrderEntry\022K\n\014TradeEntries\030\016 \003("
  "\01325.com.htsc.mdc.insight.model.MDHKGreyM"
  "arket.TradeEntry\022\030\n\020ExchangeDateTime\030\017 \001"
  "(\003\032Y\n\nOrderEntry\022\022\n\nOrderLevel\030\001 \001(\005\022\022\n\n"
  "OrderPrice\030\002 \001(\003\022\020\n\010OrderQty\030\003 \001(\003\022\021\n\tNu"
  "mOrders\030\004 \001(\003\032Y\n\nTradeEntry\022\022\n\nTradeLeve"
  "l\030\001 \001(\005\022\022\n\nTradePrice\030\002 \001(\003\022\020\n\010TradeQty\030"
  "\003 \001(\003\022\021\n\tTradeTime\030\004 \001(\003B7\n\032com.htsc.mdc"
  ".insight.modelB\024MDHKGreyMarketProtosH\001\240\001"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MDHKGreyMarket_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MDHKGreyMarket_2eproto_sccs[4] = {
  &scc_info_MDHKGreyMarket_MDHKGreyMarket_2eproto.base,
  &scc_info_MDHKGreyMarket_MarketEntry_MDHKGreyMarket_2eproto.base,
  &scc_info_MDHKGreyMarket_OrderEntry_MDHKGreyMarket_2eproto.base,
  &scc_info_MDHKGreyMarket_TradeEntry_MDHKGreyMarket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MDHKGreyMarket_2eproto_once;
static bool descriptor_table_MDHKGreyMarket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDHKGreyMarket_2eproto = {
  &descriptor_table_MDHKGreyMarket_2eproto_initialized, descriptor_table_protodef_MDHKGreyMarket_2eproto, "MDHKGreyMarket.proto", 1209,
  &descriptor_table_MDHKGreyMarket_2eproto_once, descriptor_table_MDHKGreyMarket_2eproto_sccs, descriptor_table_MDHKGreyMarket_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_MDHKGreyMarket_2eproto::offsets,
  file_level_metadata_MDHKGreyMarket_2eproto, 4, file_level_enum_descriptors_MDHKGreyMarket_2eproto, file_level_service_descriptors_MDHKGreyMarket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MDHKGreyMarket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MDHKGreyMarket_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void MDHKGreyMarket_MarketEntry::InitAsDefaultInstance() {
}
class MDHKGreyMarket_MarketEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDHKGreyMarket_MarketEntry::kChannelTypeFieldNumber;
const int MDHKGreyMarket_MarketEntry::kValidFlagFieldNumber;
const int MDHKGreyMarket_MarketEntry::kPreClosePxFieldNumber;
const int MDHKGreyMarket_MarketEntry::kNumTradesFieldNumber;
const int MDHKGreyMarket_MarketEntry::kTotalVolumeTradeFieldNumber;
const int MDHKGreyMarket_MarketEntry::kTotalValueTradeFieldNumber;
const int MDHKGreyMarket_MarketEntry::kLastPxFieldNumber;
const int MDHKGreyMarket_MarketEntry::kOpenPxFieldNumber;
const int MDHKGreyMarket_MarketEntry::kClosePxFieldNumber;
const int MDHKGreyMarket_MarketEntry::kHighPxFieldNumber;
const int MDHKGreyMarket_MarketEntry::kLowPxFieldNumber;
const int MDHKGreyMarket_MarketEntry::kBuyOrderEntriesFieldNumber;
const int MDHKGreyMarket_MarketEntry::kSellOrderEntriesFieldNumber;
const int MDHKGreyMarket_MarketEntry::kTradeEntriesFieldNumber;
const int MDHKGreyMarket_MarketEntry::kExchangeDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDHKGreyMarket_MarketEntry::MDHKGreyMarket_MarketEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
}
MDHKGreyMarket_MarketEntry::MDHKGreyMarket_MarketEntry(const MDHKGreyMarket_MarketEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buyorderentries_(from.buyorderentries_),
      sellorderentries_(from.sellorderentries_),
      tradeentries_(from.tradeentries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channeltype_, &from.channeltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchangedatetime_) -
    reinterpret_cast<char*>(&channeltype_)) + sizeof(exchangedatetime_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
}

void MDHKGreyMarket_MarketEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDHKGreyMarket_MarketEntry_MDHKGreyMarket_2eproto.base);
  ::memset(&channeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchangedatetime_) -
      reinterpret_cast<char*>(&channeltype_)) + sizeof(exchangedatetime_));
}

MDHKGreyMarket_MarketEntry::~MDHKGreyMarket_MarketEntry() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  SharedDtor();
}

void MDHKGreyMarket_MarketEntry::SharedDtor() {
}

void MDHKGreyMarket_MarketEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDHKGreyMarket_MarketEntry& MDHKGreyMarket_MarketEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDHKGreyMarket_MarketEntry_MDHKGreyMarket_2eproto.base);
  return *internal_default_instance();
}


void MDHKGreyMarket_MarketEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buyorderentries_.Clear();
  sellorderentries_.Clear();
  tradeentries_.Clear();
  ::memset(&channeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchangedatetime_) -
      reinterpret_cast<char*>(&channeltype_)) + sizeof(exchangedatetime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDHKGreyMarket_MarketEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ChannelType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channeltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ValidFlag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          validflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PreClosePx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NumTrades = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LastPx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OpenPx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ClosePx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 HighPx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LowPx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_buyorderentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sellorderentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tradeentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // int64 ExchangeDateTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          exchangedatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDHKGreyMarket_MarketEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ChannelType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &channeltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ValidFlag = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PreClosePx = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclosepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 NumTrades = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TotalVolumeTrade = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvolumetrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TotalValueTrade = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvaluetrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LastPx = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OpenPx = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &openpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ClosePx = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &closepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 HighPx = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &highpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LowPx = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_buyorderentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sellorderentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tradeentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ExchangeDateTime = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchangedatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDHKGreyMarket_MarketEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ChannelType = 1;
  if (this->channeltype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->channeltype(), output);
  }

  // bool ValidFlag = 2;
  if (this->validflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->validflag(), output);
  }

  // int64 PreClosePx = 3;
  if (this->preclosepx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->preclosepx(), output);
  }

  // int64 NumTrades = 4;
  if (this->numtrades() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->numtrades(), output);
  }

  // int64 TotalVolumeTrade = 5;
  if (this->totalvolumetrade() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->totalvolumetrade(), output);
  }

  // int64 TotalValueTrade = 6;
  if (this->totalvaluetrade() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->totalvaluetrade(), output);
  }

  // int64 LastPx = 7;
  if (this->lastpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->lastpx(), output);
  }

  // int64 OpenPx = 8;
  if (this->openpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->openpx(), output);
  }

  // int64 ClosePx = 9;
  if (this->closepx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->closepx(), output);
  }

  // int64 HighPx = 10;
  if (this->highpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->highpx(), output);
  }

  // int64 LowPx = 11;
  if (this->lowpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->lowpx(), output);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buyorderentries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->buyorderentries(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sellorderentries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->sellorderentries(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tradeentries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->tradeentries(static_cast<int>(i)),
      output);
  }

  // int64 ExchangeDateTime = 15;
  if (this->exchangedatetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->exchangedatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDHKGreyMarket_MarketEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ChannelType = 1;
  if (this->channeltype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->channeltype(), target);
  }

  // bool ValidFlag = 2;
  if (this->validflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->validflag(), target);
  }

  // int64 PreClosePx = 3;
  if (this->preclosepx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->preclosepx(), target);
  }

  // int64 NumTrades = 4;
  if (this->numtrades() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->numtrades(), target);
  }

  // int64 TotalVolumeTrade = 5;
  if (this->totalvolumetrade() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 6;
  if (this->totalvaluetrade() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->totalvaluetrade(), target);
  }

  // int64 LastPx = 7;
  if (this->lastpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->lastpx(), target);
  }

  // int64 OpenPx = 8;
  if (this->openpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->openpx(), target);
  }

  // int64 ClosePx = 9;
  if (this->closepx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->closepx(), target);
  }

  // int64 HighPx = 10;
  if (this->highpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->highpx(), target);
  }

  // int64 LowPx = 11;
  if (this->lowpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->lowpx(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buyorderentries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->buyorderentries(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sellorderentries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->sellorderentries(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tradeentries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->tradeentries(static_cast<int>(i)), target);
  }

  // int64 ExchangeDateTime = 15;
  if (this->exchangedatetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->exchangedatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  return target;
}

size_t MDHKGreyMarket_MarketEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->buyorderentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->buyorderentries(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->sellorderentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sellorderentries(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->tradeentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tradeentries(static_cast<int>(i)));
    }
  }

  // int32 ChannelType = 1;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->channeltype());
  }

  // bool ValidFlag = 2;
  if (this->validflag() != 0) {
    total_size += 1 + 1;
  }

  // int64 PreClosePx = 3;
  if (this->preclosepx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->preclosepx());
  }

  // int64 NumTrades = 4;
  if (this->numtrades() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->numtrades());
  }

  // int64 TotalVolumeTrade = 5;
  if (this->totalvolumetrade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalvolumetrade());
  }

  // int64 TotalValueTrade = 6;
  if (this->totalvaluetrade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalvaluetrade());
  }

  // int64 LastPx = 7;
  if (this->lastpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lastpx());
  }

  // int64 OpenPx = 8;
  if (this->openpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->openpx());
  }

  // int64 ClosePx = 9;
  if (this->closepx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->closepx());
  }

  // int64 HighPx = 10;
  if (this->highpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->highpx());
  }

  // int64 LowPx = 11;
  if (this->lowpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lowpx());
  }

  // int64 ExchangeDateTime = 15;
  if (this->exchangedatetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchangedatetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDHKGreyMarket_MarketEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MDHKGreyMarket_MarketEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDHKGreyMarket_MarketEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
    MergeFrom(*source);
  }
}

void MDHKGreyMarket_MarketEntry::MergeFrom(const MDHKGreyMarket_MarketEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buyorderentries_.MergeFrom(from.buyorderentries_);
  sellorderentries_.MergeFrom(from.sellorderentries_);
  tradeentries_.MergeFrom(from.tradeentries_);
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
  if (from.validflag() != 0) {
    set_validflag(from.validflag());
  }
  if (from.preclosepx() != 0) {
    set_preclosepx(from.preclosepx());
  }
  if (from.numtrades() != 0) {
    set_numtrades(from.numtrades());
  }
  if (from.totalvolumetrade() != 0) {
    set_totalvolumetrade(from.totalvolumetrade());
  }
  if (from.totalvaluetrade() != 0) {
    set_totalvaluetrade(from.totalvaluetrade());
  }
  if (from.lastpx() != 0) {
    set_lastpx(from.lastpx());
  }
  if (from.openpx() != 0) {
    set_openpx(from.openpx());
  }
  if (from.closepx() != 0) {
    set_closepx(from.closepx());
  }
  if (from.highpx() != 0) {
    set_highpx(from.highpx());
  }
  if (from.lowpx() != 0) {
    set_lowpx(from.lowpx());
  }
  if (from.exchangedatetime() != 0) {
    set_exchangedatetime(from.exchangedatetime());
  }
}

void MDHKGreyMarket_MarketEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDHKGreyMarket_MarketEntry::CopyFrom(const MDHKGreyMarket_MarketEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDHKGreyMarket_MarketEntry::IsInitialized() const {
  return true;
}

void MDHKGreyMarket_MarketEntry::Swap(MDHKGreyMarket_MarketEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDHKGreyMarket_MarketEntry::InternalSwap(MDHKGreyMarket_MarketEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&buyorderentries_)->InternalSwap(CastToBase(&other->buyorderentries_));
  CastToBase(&sellorderentries_)->InternalSwap(CastToBase(&other->sellorderentries_));
  CastToBase(&tradeentries_)->InternalSwap(CastToBase(&other->tradeentries_));
  swap(channeltype_, other->channeltype_);
  swap(validflag_, other->validflag_);
  swap(preclosepx_, other->preclosepx_);
  swap(numtrades_, other->numtrades_);
  swap(totalvolumetrade_, other->totalvolumetrade_);
  swap(totalvaluetrade_, other->totalvaluetrade_);
  swap(lastpx_, other->lastpx_);
  swap(openpx_, other->openpx_);
  swap(closepx_, other->closepx_);
  swap(highpx_, other->highpx_);
  swap(lowpx_, other->lowpx_);
  swap(exchangedatetime_, other->exchangedatetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDHKGreyMarket_MarketEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MDHKGreyMarket_OrderEntry::InitAsDefaultInstance() {
}
class MDHKGreyMarket_OrderEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDHKGreyMarket_OrderEntry::kOrderLevelFieldNumber;
const int MDHKGreyMarket_OrderEntry::kOrderPriceFieldNumber;
const int MDHKGreyMarket_OrderEntry::kOrderQtyFieldNumber;
const int MDHKGreyMarket_OrderEntry::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDHKGreyMarket_OrderEntry::MDHKGreyMarket_OrderEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
}
MDHKGreyMarket_OrderEntry::MDHKGreyMarket_OrderEntry(const MDHKGreyMarket_OrderEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&orderprice_, &from.orderprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderlevel_) -
    reinterpret_cast<char*>(&orderprice_)) + sizeof(orderlevel_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
}

void MDHKGreyMarket_OrderEntry::SharedCtor() {
  ::memset(&orderprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderlevel_) -
      reinterpret_cast<char*>(&orderprice_)) + sizeof(orderlevel_));
}

MDHKGreyMarket_OrderEntry::~MDHKGreyMarket_OrderEntry() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  SharedDtor();
}

void MDHKGreyMarket_OrderEntry::SharedDtor() {
}

void MDHKGreyMarket_OrderEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDHKGreyMarket_OrderEntry& MDHKGreyMarket_OrderEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDHKGreyMarket_OrderEntry_MDHKGreyMarket_2eproto.base);
  return *internal_default_instance();
}


void MDHKGreyMarket_OrderEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&orderprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderlevel_) -
      reinterpret_cast<char*>(&orderprice_)) + sizeof(orderlevel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDHKGreyMarket_OrderEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 OrderLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          orderlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OrderPrice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          orderprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OrderQty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          orderqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NumOrders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          numorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDHKGreyMarket_OrderEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 OrderLevel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OrderPrice = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OrderQty = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 NumOrders = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDHKGreyMarket_OrderEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 OrderLevel = 1;
  if (this->orderlevel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->orderlevel(), output);
  }

  // int64 OrderPrice = 2;
  if (this->orderprice() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->orderprice(), output);
  }

  // int64 OrderQty = 3;
  if (this->orderqty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->orderqty(), output);
  }

  // int64 NumOrders = 4;
  if (this->numorders() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->numorders(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDHKGreyMarket_OrderEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 OrderLevel = 1;
  if (this->orderlevel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->orderlevel(), target);
  }

  // int64 OrderPrice = 2;
  if (this->orderprice() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->orderprice(), target);
  }

  // int64 OrderQty = 3;
  if (this->orderqty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->orderqty(), target);
  }

  // int64 NumOrders = 4;
  if (this->numorders() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->numorders(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  return target;
}

size_t MDHKGreyMarket_OrderEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 OrderPrice = 2;
  if (this->orderprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->orderprice());
  }

  // int64 OrderQty = 3;
  if (this->orderqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->orderqty());
  }

  // int64 NumOrders = 4;
  if (this->numorders() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->numorders());
  }

  // int32 OrderLevel = 1;
  if (this->orderlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->orderlevel());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDHKGreyMarket_OrderEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MDHKGreyMarket_OrderEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDHKGreyMarket_OrderEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
    MergeFrom(*source);
  }
}

void MDHKGreyMarket_OrderEntry::MergeFrom(const MDHKGreyMarket_OrderEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderprice() != 0) {
    set_orderprice(from.orderprice());
  }
  if (from.orderqty() != 0) {
    set_orderqty(from.orderqty());
  }
  if (from.numorders() != 0) {
    set_numorders(from.numorders());
  }
  if (from.orderlevel() != 0) {
    set_orderlevel(from.orderlevel());
  }
}

void MDHKGreyMarket_OrderEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDHKGreyMarket_OrderEntry::CopyFrom(const MDHKGreyMarket_OrderEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDHKGreyMarket_OrderEntry::IsInitialized() const {
  return true;
}

void MDHKGreyMarket_OrderEntry::Swap(MDHKGreyMarket_OrderEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDHKGreyMarket_OrderEntry::InternalSwap(MDHKGreyMarket_OrderEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(orderprice_, other->orderprice_);
  swap(orderqty_, other->orderqty_);
  swap(numorders_, other->numorders_);
  swap(orderlevel_, other->orderlevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDHKGreyMarket_OrderEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MDHKGreyMarket_TradeEntry::InitAsDefaultInstance() {
}
class MDHKGreyMarket_TradeEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDHKGreyMarket_TradeEntry::kTradeLevelFieldNumber;
const int MDHKGreyMarket_TradeEntry::kTradePriceFieldNumber;
const int MDHKGreyMarket_TradeEntry::kTradeQtyFieldNumber;
const int MDHKGreyMarket_TradeEntry::kTradeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDHKGreyMarket_TradeEntry::MDHKGreyMarket_TradeEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
}
MDHKGreyMarket_TradeEntry::MDHKGreyMarket_TradeEntry(const MDHKGreyMarket_TradeEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tradeprice_, &from.tradeprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradelevel_) -
    reinterpret_cast<char*>(&tradeprice_)) + sizeof(tradelevel_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
}

void MDHKGreyMarket_TradeEntry::SharedCtor() {
  ::memset(&tradeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradelevel_) -
      reinterpret_cast<char*>(&tradeprice_)) + sizeof(tradelevel_));
}

MDHKGreyMarket_TradeEntry::~MDHKGreyMarket_TradeEntry() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  SharedDtor();
}

void MDHKGreyMarket_TradeEntry::SharedDtor() {
}

void MDHKGreyMarket_TradeEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDHKGreyMarket_TradeEntry& MDHKGreyMarket_TradeEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDHKGreyMarket_TradeEntry_MDHKGreyMarket_2eproto.base);
  return *internal_default_instance();
}


void MDHKGreyMarket_TradeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tradeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradelevel_) -
      reinterpret_cast<char*>(&tradeprice_)) + sizeof(tradelevel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDHKGreyMarket_TradeEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TradeLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tradelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradePrice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tradeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradeQty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tradeqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradeTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tradetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDHKGreyMarket_TradeEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 TradeLevel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradelevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradePrice = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradeQty = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradeqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradeTime = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDHKGreyMarket_TradeEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TradeLevel = 1;
  if (this->tradelevel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->tradelevel(), output);
  }

  // int64 TradePrice = 2;
  if (this->tradeprice() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->tradeprice(), output);
  }

  // int64 TradeQty = 3;
  if (this->tradeqty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->tradeqty(), output);
  }

  // int64 TradeTime = 4;
  if (this->tradetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->tradetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDHKGreyMarket_TradeEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TradeLevel = 1;
  if (this->tradelevel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->tradelevel(), target);
  }

  // int64 TradePrice = 2;
  if (this->tradeprice() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->tradeprice(), target);
  }

  // int64 TradeQty = 3;
  if (this->tradeqty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->tradeqty(), target);
  }

  // int64 TradeTime = 4;
  if (this->tradetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->tradetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  return target;
}

size_t MDHKGreyMarket_TradeEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 TradePrice = 2;
  if (this->tradeprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradeprice());
  }

  // int64 TradeQty = 3;
  if (this->tradeqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradeqty());
  }

  // int64 TradeTime = 4;
  if (this->tradetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradetime());
  }

  // int32 TradeLevel = 1;
  if (this->tradelevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->tradelevel());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDHKGreyMarket_TradeEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MDHKGreyMarket_TradeEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDHKGreyMarket_TradeEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
    MergeFrom(*source);
  }
}

void MDHKGreyMarket_TradeEntry::MergeFrom(const MDHKGreyMarket_TradeEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradeprice() != 0) {
    set_tradeprice(from.tradeprice());
  }
  if (from.tradeqty() != 0) {
    set_tradeqty(from.tradeqty());
  }
  if (from.tradetime() != 0) {
    set_tradetime(from.tradetime());
  }
  if (from.tradelevel() != 0) {
    set_tradelevel(from.tradelevel());
  }
}

void MDHKGreyMarket_TradeEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDHKGreyMarket_TradeEntry::CopyFrom(const MDHKGreyMarket_TradeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDHKGreyMarket_TradeEntry::IsInitialized() const {
  return true;
}

void MDHKGreyMarket_TradeEntry::Swap(MDHKGreyMarket_TradeEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDHKGreyMarket_TradeEntry::InternalSwap(MDHKGreyMarket_TradeEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tradeprice_, other->tradeprice_);
  swap(tradeqty_, other->tradeqty_);
  swap(tradetime_, other->tradetime_);
  swap(tradelevel_, other->tradelevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDHKGreyMarket_TradeEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MDHKGreyMarket::InitAsDefaultInstance() {
}
class MDHKGreyMarket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDHKGreyMarket::kHTSCSecurityIDFieldNumber;
const int MDHKGreyMarket::kMDDateFieldNumber;
const int MDHKGreyMarket::kMDTimeFieldNumber;
const int MDHKGreyMarket::kDataTimestampFieldNumber;
const int MDHKGreyMarket::kTradingPhaseCodeFieldNumber;
const int MDHKGreyMarket::kSecurityIDSourceFieldNumber;
const int MDHKGreyMarket::kSecurityTypeFieldNumber;
const int MDHKGreyMarket::kApplSeqNumFieldNumber;
const int MDHKGreyMarket::kMarketEntriesFieldNumber;
const int MDHKGreyMarket::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDHKGreyMarket::MDHKGreyMarket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDHKGreyMarket)
}
MDHKGreyMarket::MDHKGreyMarket(const MDHKGreyMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      marketentries_(from.marketentries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  tradingphasecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tradingphasecode().size() > 0) {
    tradingphasecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  ::memcpy(&mddate_, &from.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket)
}

void MDHKGreyMarket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDHKGreyMarket_MDHKGreyMarket_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
}

MDHKGreyMarket::~MDHKGreyMarket() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDHKGreyMarket)
  SharedDtor();
}

void MDHKGreyMarket::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MDHKGreyMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDHKGreyMarket& MDHKGreyMarket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDHKGreyMarket_MDHKGreyMarket_2eproto.base);
  return *internal_default_instance();
}


void MDHKGreyMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketentries_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDHKGreyMarket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tradingphasecode(), ptr, ctx, "com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else goto handle_unusual;
        continue;
      // int64 ApplSeqNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          applseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_marketentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDHKGreyMarket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 DataTimestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradingPhaseCode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingphasecode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ApplSeqNum = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &applseqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_marketentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataMultiplePowerOf10 = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDHKGreyMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDHKGreyMarket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDHKGreyMarket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tradingphasecode(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->securityidsource(), output);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->securitytype(), output);
  }

  // int64 ApplSeqNum = 8;
  if (this->applseqnum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->applseqnum(), output);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->marketentries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->marketentries(static_cast<int>(i)),
      output);
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->datamultiplepowerof10() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->datamultiplepowerof10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDHKGreyMarket)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDHKGreyMarket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->securitytype(), target);
  }

  // int64 ApplSeqNum = 8;
  if (this->applseqnum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->applseqnum(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->marketentries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->marketentries(static_cast<int>(i)), target);
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->datamultiplepowerof10() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->datamultiplepowerof10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDHKGreyMarket)
  return target;
}

size_t MDHKGreyMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->marketentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->marketentries(static_cast<int>(i)));
    }
  }

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tradingphasecode());
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // int64 ApplSeqNum = 8;
  if (this->applseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->applseqnum());
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDHKGreyMarket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const MDHKGreyMarket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDHKGreyMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDHKGreyMarket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDHKGreyMarket)
    MergeFrom(*source);
  }
}

void MDHKGreyMarket::MergeFrom(const MDHKGreyMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketentries_.MergeFrom(from.marketentries_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.tradingphasecode().size() > 0) {

    tradingphasecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.applseqnum() != 0) {
    set_applseqnum(from.applseqnum());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void MDHKGreyMarket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDHKGreyMarket::CopyFrom(const MDHKGreyMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDHKGreyMarket::IsInitialized() const {
  return true;
}

void MDHKGreyMarket::Swap(MDHKGreyMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDHKGreyMarket::InternalSwap(MDHKGreyMarket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&marketentries_)->InternalSwap(CastToBase(&other->marketentries_));
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradingphasecode_.Swap(&other->tradingphasecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mddate_, other->mddate_);
  swap(mdtime_, other->mdtime_);
  swap(datatimestamp_, other->datatimestamp_);
  swap(securityidsource_, other->securityidsource_);
  swap(securitytype_, other->securitytype_);
  swap(applseqnum_, other->applseqnum_);
  swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDHKGreyMarket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDHKGreyMarket* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDHKGreyMarket >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDHKGreyMarket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
