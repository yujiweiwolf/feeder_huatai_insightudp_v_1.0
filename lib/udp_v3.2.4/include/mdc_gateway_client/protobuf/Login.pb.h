// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ServiceDiscovery.pb.h"
#include "InsightErrorContext.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class AccountInfo;
class AccountInfoDefaultTypeInternal;
extern AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class UserWithPassword;
class UserWithPasswordDefaultTypeInternal;
extern UserWithPasswordDefaultTypeInternal _UserWithPassword_default_instance_;
class UserWithToken;
class UserWithTokenDefaultTypeInternal;
extern UserWithTokenDefaultTypeInternal _UserWithToken_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::AccountInfo* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::AccountInfo>(Arena*);
template<> ::com::htsc::mdc::insight::model::DeviceInfo* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::DeviceInfo>(Arena*);
template<> ::com::htsc::mdc::insight::model::LoginRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::LoginRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::LoginResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::LoginResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::UserWithPassword* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::UserWithPassword>(Arena*);
template<> ::com::htsc::mdc::insight::model::UserWithToken* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::UserWithToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

enum ELoginType : int {
  DEFAULT_LOGIN_TYPE = 0,
  INSIGHT_LOGIN_FOR_DISCOVERY = 1,
  THRID_PARTY_LOGIN_FOR_DISCOVERY = 2,
  LOGIN_FOR_SERVICE = 3,
  ELoginType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ELoginType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ELoginType_IsValid(int value);
constexpr ELoginType ELoginType_MIN = DEFAULT_LOGIN_TYPE;
constexpr ELoginType ELoginType_MAX = LOGIN_FOR_SERVICE;
constexpr int ELoginType_ARRAYSIZE = ELoginType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELoginType_descriptor();
template<typename T>
inline const std::string& ELoginType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELoginType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELoginType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELoginType_descriptor(), enum_t_value);
}
inline bool ELoginType_Parse(
    const std::string& name, ELoginType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELoginType>(
    ELoginType_descriptor(), name, value);
}
// ===================================================================

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appVersion = 2;
  void clear_appversion();
  static const int kAppVersionFieldNumber = 2;
  const std::string& appversion() const;
  void set_appversion(const std::string& value);
  void set_appversion(std::string&& value);
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  std::string* mutable_appversion();
  std::string* release_appversion();
  void set_allocated_appversion(std::string* appversion);

  // string connectServerIP = 8;
  void clear_connectserverip();
  static const int kConnectServerIPFieldNumber = 8;
  const std::string& connectserverip() const;
  void set_connectserverip(const std::string& value);
  void set_connectserverip(std::string&& value);
  void set_connectserverip(const char* value);
  void set_connectserverip(const char* value, size_t size);
  std::string* mutable_connectserverip();
  std::string* release_connectserverip();
  void set_allocated_connectserverip(std::string* connectserverip);

  // .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
  bool has_uwp() const;
  void clear_uwp();
  static const int kUwpFieldNumber = 4;
  const ::com::htsc::mdc::insight::model::UserWithPassword& uwp() const;
  ::com::htsc::mdc::insight::model::UserWithPassword* release_uwp();
  ::com::htsc::mdc::insight::model::UserWithPassword* mutable_uwp();
  void set_allocated_uwp(::com::htsc::mdc::insight::model::UserWithPassword* uwp);

  // .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
  bool has_uwt() const;
  void clear_uwt();
  static const int kUwtFieldNumber = 5;
  const ::com::htsc::mdc::insight::model::UserWithToken& uwt() const;
  ::com::htsc::mdc::insight::model::UserWithToken* release_uwt();
  ::com::htsc::mdc::insight::model::UserWithToken* mutable_uwt();
  void set_allocated_uwt(::com::htsc::mdc::insight::model::UserWithToken* uwt);

  // .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
  bool has_deviceinfo() const;
  void clear_deviceinfo();
  static const int kDeviceInfoFieldNumber = 6;
  const ::com::htsc::mdc::insight::model::DeviceInfo& deviceinfo() const;
  ::com::htsc::mdc::insight::model::DeviceInfo* release_deviceinfo();
  ::com::htsc::mdc::insight::model::DeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::com::htsc::mdc::insight::model::DeviceInfo* deviceinfo);

  // int32 appType = 1;
  void clear_apptype();
  static const int kAppTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 apptype() const;
  void set_apptype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .com.htsc.mdc.insight.model.ELoginType loginType = 3;
  void clear_logintype();
  static const int kLoginTypeFieldNumber = 3;
  ::com::htsc::mdc::insight::model::ELoginType logintype() const;
  void set_logintype(::com::htsc::mdc::insight::model::ELoginType value);

  // bool isSupportCompressed = 7;
  void clear_issupportcompressed();
  static const int kIsSupportCompressedFieldNumber = 7;
  bool issupportcompressed() const;
  void set_issupportcompressed(bool value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.LoginRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectserverip_;
  ::com::htsc::mdc::insight::model::UserWithPassword* uwp_;
  ::com::htsc::mdc::insight::model::UserWithToken* uwt_;
  ::com::htsc::mdc::insight::model::DeviceInfo* deviceinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 apptype_;
  int logintype_;
  bool issupportcompressed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // string lastLoginIp = 5;
  void clear_lastloginip();
  static const int kLastLoginIpFieldNumber = 5;
  const std::string& lastloginip() const;
  void set_lastloginip(const std::string& value);
  void set_lastloginip(std::string&& value);
  void set_lastloginip(const char* value);
  void set_lastloginip(const char* value, size_t size);
  std::string* mutable_lastloginip();
  std::string* release_lastloginip();
  void set_allocated_lastloginip(std::string* lastloginip);

  // string reservedInfo = 6;
  void clear_reservedinfo();
  static const int kReservedInfoFieldNumber = 6;
  const std::string& reservedinfo() const;
  void set_reservedinfo(const std::string& value);
  void set_reservedinfo(std::string&& value);
  void set_reservedinfo(const char* value);
  void set_reservedinfo(const char* value, size_t size);
  std::string* mutable_reservedinfo();
  std::string* release_reservedinfo();
  void set_allocated_reservedinfo(std::string* reservedinfo);

  // string dataSource = 7;
  void clear_datasource();
  static const int kDataSourceFieldNumber = 7;
  const std::string& datasource() const;
  void set_datasource(const std::string& value);
  void set_datasource(std::string&& value);
  void set_datasource(const char* value);
  void set_datasource(const char* value, size_t size);
  std::string* mutable_datasource();
  std::string* release_datasource();
  void set_allocated_datasource(std::string* datasource);

  // string site = 8;
  void clear_site();
  static const int kSiteFieldNumber = 8;
  const std::string& site() const;
  void set_site(const std::string& value);
  void set_site(std::string&& value);
  void set_site(const char* value);
  void set_site(const char* value, size_t size);
  std::string* mutable_site();
  std::string* release_site();
  void set_allocated_site(std::string* site);

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  bool has_errorcontext() const;
  void clear_errorcontext();
  static const int kErrorContextFieldNumber = 2;
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);

  // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
  bool has_servicediscoveryresponse() const;
  void clear_servicediscoveryresponse();
  static const int kServiceDiscoveryResponseFieldNumber = 9;
  const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& servicediscoveryresponse() const;
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* release_servicediscoveryresponse();
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* mutable_servicediscoveryresponse();
  void set_allocated_servicediscoveryresponse(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse);

  // .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
  bool has_accountinfo() const;
  void clear_accountinfo();
  static const int kAccountInfoFieldNumber = 10;
  const ::com::htsc::mdc::insight::model::AccountInfo& accountinfo() const;
  ::com::htsc::mdc::insight::model::AccountInfo* release_accountinfo();
  ::com::htsc::mdc::insight::model::AccountInfo* mutable_accountinfo();
  void set_allocated_accountinfo(::com::htsc::mdc::insight::model::AccountInfo* accountinfo);

  // int64 lastLoginTime = 4;
  void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 lastlogintime() const;
  void set_lastlogintime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool isSuccess = 1;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  bool issuccess() const;
  void set_issuccess(bool value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.LoginResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastloginip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reservedinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_;
  ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse_;
  ::com::htsc::mdc::insight::model::AccountInfo* accountinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastlogintime_;
  bool issuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class UserWithPassword :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.UserWithPassword) */ {
 public:
  UserWithPassword();
  virtual ~UserWithPassword();

  UserWithPassword(const UserWithPassword& from);
  UserWithPassword(UserWithPassword&& from) noexcept
    : UserWithPassword() {
    *this = ::std::move(from);
  }

  inline UserWithPassword& operator=(const UserWithPassword& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserWithPassword& operator=(UserWithPassword&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserWithPassword& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWithPassword* internal_default_instance() {
    return reinterpret_cast<const UserWithPassword*>(
               &_UserWithPassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserWithPassword* other);
  friend void swap(UserWithPassword& a, UserWithPassword& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserWithPassword* New() const final {
    return CreateMaybeMessage<UserWithPassword>(nullptr);
  }

  UserWithPassword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserWithPassword>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserWithPassword& from);
  void MergeFrom(const UserWithPassword& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWithPassword* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.UserWithPassword";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // string otp = 3;
  void clear_otp();
  static const int kOtpFieldNumber = 3;
  const std::string& otp() const;
  void set_otp(const std::string& value);
  void set_otp(std::string&& value);
  void set_otp(const char* value);
  void set_otp(const char* value, size_t size);
  std::string* mutable_otp();
  std::string* release_otp();
  void set_allocated_otp(std::string* otp);

  // string captcha = 4;
  void clear_captcha();
  static const int kCaptchaFieldNumber = 4;
  const std::string& captcha() const;
  void set_captcha(const std::string& value);
  void set_captcha(std::string&& value);
  void set_captcha(const char* value);
  void set_captcha(const char* value, size_t size);
  std::string* mutable_captcha();
  std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);

  // string sms = 5;
  void clear_sms();
  static const int kSmsFieldNumber = 5;
  const std::string& sms() const;
  void set_sms(const std::string& value);
  void set_sms(std::string&& value);
  void set_sms(const char* value);
  void set_sms(const char* value, size_t size);
  std::string* mutable_sms();
  std::string* release_sms();
  void set_allocated_sms(std::string* sms);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.UserWithPassword)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr otp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class UserWithToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.UserWithToken) */ {
 public:
  UserWithToken();
  virtual ~UserWithToken();

  UserWithToken(const UserWithToken& from);
  UserWithToken(UserWithToken&& from) noexcept
    : UserWithToken() {
    *this = ::std::move(from);
  }

  inline UserWithToken& operator=(const UserWithToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserWithToken& operator=(UserWithToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserWithToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWithToken* internal_default_instance() {
    return reinterpret_cast<const UserWithToken*>(
               &_UserWithToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserWithToken* other);
  friend void swap(UserWithToken& a, UserWithToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserWithToken* New() const final {
    return CreateMaybeMessage<UserWithToken>(nullptr);
  }

  UserWithToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserWithToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserWithToken& from);
  void MergeFrom(const UserWithToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWithToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.UserWithToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.UserWithToken)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.DeviceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);

  // string deviceMac = 2;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 2;
  const std::string& devicemac() const;
  void set_devicemac(const std::string& value);
  void set_devicemac(std::string&& value);
  void set_devicemac(const char* value);
  void set_devicemac(const char* value, size_t size);
  std::string* mutable_devicemac();
  std::string* release_devicemac();
  void set_allocated_devicemac(std::string* devicemac);

  // string deviceHarddisk = 3;
  void clear_deviceharddisk();
  static const int kDeviceHarddiskFieldNumber = 3;
  const std::string& deviceharddisk() const;
  void set_deviceharddisk(const std::string& value);
  void set_deviceharddisk(std::string&& value);
  void set_deviceharddisk(const char* value);
  void set_deviceharddisk(const char* value, size_t size);
  std::string* mutable_deviceharddisk();
  std::string* release_deviceharddisk();
  void set_allocated_deviceharddisk(std::string* deviceharddisk);

  // string deviceCPU = 4;
  void clear_devicecpu();
  static const int kDeviceCPUFieldNumber = 4;
  const std::string& devicecpu() const;
  void set_devicecpu(const std::string& value);
  void set_devicecpu(std::string&& value);
  void set_devicecpu(const char* value);
  void set_devicecpu(const char* value, size_t size);
  std::string* mutable_devicecpu();
  std::string* release_devicecpu();
  void set_allocated_devicecpu(std::string* devicecpu);

  // string cellphoneNumber = 5;
  void clear_cellphonenumber();
  static const int kCellphoneNumberFieldNumber = 5;
  const std::string& cellphonenumber() const;
  void set_cellphonenumber(const std::string& value);
  void set_cellphonenumber(std::string&& value);
  void set_cellphonenumber(const char* value);
  void set_cellphonenumber(const char* value, size_t size);
  std::string* mutable_cellphonenumber();
  std::string* release_cellphonenumber();
  void set_allocated_cellphonenumber(std::string* cellphonenumber);

  // string cellphoneImei = 6;
  void clear_cellphoneimei();
  static const int kCellphoneImeiFieldNumber = 6;
  const std::string& cellphoneimei() const;
  void set_cellphoneimei(const std::string& value);
  void set_cellphoneimei(std::string&& value);
  void set_cellphoneimei(const char* value);
  void set_cellphoneimei(const char* value, size_t size);
  std::string* mutable_cellphoneimei();
  std::string* release_cellphoneimei();
  void set_allocated_cellphoneimei(std::string* cellphoneimei);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.DeviceInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicemac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceharddisk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicecpu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cellphonenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cellphoneimei_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class AccountInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.AccountInfo) */ {
 public:
  AccountInfo();
  virtual ~AccountInfo();

  AccountInfo(const AccountInfo& from);
  AccountInfo(AccountInfo&& from) noexcept
    : AccountInfo() {
    *this = ::std::move(from);
  }

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountInfo& operator=(AccountInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountInfo* internal_default_instance() {
    return reinterpret_cast<const AccountInfo*>(
               &_AccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AccountInfo* other);
  friend void swap(AccountInfo& a, AccountInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountInfo* New() const final {
    return CreateMaybeMessage<AccountInfo>(nullptr);
  }

  AccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.AccountInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string startDate = 2;
  void clear_startdate();
  static const int kStartDateFieldNumber = 2;
  const std::string& startdate() const;
  void set_startdate(const std::string& value);
  void set_startdate(std::string&& value);
  void set_startdate(const char* value);
  void set_startdate(const char* value, size_t size);
  std::string* mutable_startdate();
  std::string* release_startdate();
  void set_allocated_startdate(std::string* startdate);

  // string stopDate = 3;
  void clear_stopdate();
  static const int kStopDateFieldNumber = 3;
  const std::string& stopdate() const;
  void set_stopdate(const std::string& value);
  void set_stopdate(std::string&& value);
  void set_stopdate(const char* value);
  void set_stopdate(const char* value, size_t size);
  std::string* mutable_stopdate();
  std::string* release_stopdate();
  void set_allocated_stopdate(std::string* stopdate);

  // string customerName = 4;
  void clear_customername();
  static const int kCustomerNameFieldNumber = 4;
  const std::string& customername() const;
  void set_customername(const std::string& value);
  void set_customername(std::string&& value);
  void set_customername(const char* value);
  void set_customername(const char* value, size_t size);
  std::string* mutable_customername();
  std::string* release_customername();
  void set_allocated_customername(std::string* customername);

  // string contactPerson = 5;
  void clear_contactperson();
  static const int kContactPersonFieldNumber = 5;
  const std::string& contactperson() const;
  void set_contactperson(const std::string& value);
  void set_contactperson(std::string&& value);
  void set_contactperson(const char* value);
  void set_contactperson(const char* value, size_t size);
  std::string* mutable_contactperson();
  std::string* release_contactperson();
  void set_allocated_contactperson(std::string* contactperson);

  // string contactAddress = 6;
  void clear_contactaddress();
  static const int kContactAddressFieldNumber = 6;
  const std::string& contactaddress() const;
  void set_contactaddress(const std::string& value);
  void set_contactaddress(std::string&& value);
  void set_contactaddress(const char* value);
  void set_contactaddress(const char* value, size_t size);
  std::string* mutable_contactaddress();
  std::string* release_contactaddress();
  void set_allocated_contactaddress(std::string* contactaddress);

  // string contactTel = 7;
  void clear_contacttel();
  static const int kContactTelFieldNumber = 7;
  const std::string& contacttel() const;
  void set_contacttel(const std::string& value);
  void set_contacttel(std::string&& value);
  void set_contacttel(const char* value);
  void set_contacttel(const char* value, size_t size);
  std::string* mutable_contacttel();
  std::string* release_contacttel();
  void set_allocated_contacttel(std::string* contacttel);

  // string contactEmail = 8;
  void clear_contactemail();
  static const int kContactEmailFieldNumber = 8;
  const std::string& contactemail() const;
  void set_contactemail(const std::string& value);
  void set_contactemail(std::string&& value);
  void set_contactemail(const char* value);
  void set_contactemail(const char* value, size_t size);
  std::string* mutable_contactemail();
  std::string* release_contactemail();
  void set_allocated_contactemail(std::string* contactemail);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.AccountInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stopdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contactperson_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contactaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contacttel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contactemail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// int32 appType = 1;
inline void LoginRequest::clear_apptype() {
  apptype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::apptype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.appType)
  return apptype_;
}
inline void LoginRequest::set_apptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  apptype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.appType)
}

// string appVersion = 2;
inline void LoginRequest::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::appversion() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.appVersion)
  return appversion_.GetNoArena();
}
inline void LoginRequest::set_appversion(const std::string& value) {
  
  appversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}
inline void LoginRequest::set_appversion(std::string&& value) {
  
  appversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}
inline void LoginRequest::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}
inline void LoginRequest::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}
inline std::string* LoginRequest::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.appVersion)
  return appversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_appversion() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.appVersion)
  
  return appversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_appversion(std::string* appversion) {
  if (appversion != nullptr) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}

// .com.htsc.mdc.insight.model.ELoginType loginType = 3;
inline void LoginRequest::clear_logintype() {
  logintype_ = 0;
}
inline ::com::htsc::mdc::insight::model::ELoginType LoginRequest::logintype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.loginType)
  return static_cast< ::com::htsc::mdc::insight::model::ELoginType >(logintype_);
}
inline void LoginRequest::set_logintype(::com::htsc::mdc::insight::model::ELoginType value) {
  
  logintype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.loginType)
}

// .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
inline bool LoginRequest::has_uwp() const {
  return this != internal_default_instance() && uwp_ != nullptr;
}
inline void LoginRequest::clear_uwp() {
  if (GetArenaNoVirtual() == nullptr && uwp_ != nullptr) {
    delete uwp_;
  }
  uwp_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::UserWithPassword& LoginRequest::uwp() const {
  const ::com::htsc::mdc::insight::model::UserWithPassword* p = uwp_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.uwp)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::UserWithPassword*>(
      &::com::htsc::mdc::insight::model::_UserWithPassword_default_instance_);
}
inline ::com::htsc::mdc::insight::model::UserWithPassword* LoginRequest::release_uwp() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.uwp)
  
  ::com::htsc::mdc::insight::model::UserWithPassword* temp = uwp_;
  uwp_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::UserWithPassword* LoginRequest::mutable_uwp() {
  
  if (uwp_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::UserWithPassword>(GetArenaNoVirtual());
    uwp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.uwp)
  return uwp_;
}
inline void LoginRequest::set_allocated_uwp(::com::htsc::mdc::insight::model::UserWithPassword* uwp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uwp_;
  }
  if (uwp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uwp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uwp, submessage_arena);
    }
    
  } else {
    
  }
  uwp_ = uwp;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.uwp)
}

// .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
inline bool LoginRequest::has_uwt() const {
  return this != internal_default_instance() && uwt_ != nullptr;
}
inline void LoginRequest::clear_uwt() {
  if (GetArenaNoVirtual() == nullptr && uwt_ != nullptr) {
    delete uwt_;
  }
  uwt_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::UserWithToken& LoginRequest::uwt() const {
  const ::com::htsc::mdc::insight::model::UserWithToken* p = uwt_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.uwt)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::UserWithToken*>(
      &::com::htsc::mdc::insight::model::_UserWithToken_default_instance_);
}
inline ::com::htsc::mdc::insight::model::UserWithToken* LoginRequest::release_uwt() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.uwt)
  
  ::com::htsc::mdc::insight::model::UserWithToken* temp = uwt_;
  uwt_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::UserWithToken* LoginRequest::mutable_uwt() {
  
  if (uwt_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::UserWithToken>(GetArenaNoVirtual());
    uwt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.uwt)
  return uwt_;
}
inline void LoginRequest::set_allocated_uwt(::com::htsc::mdc::insight::model::UserWithToken* uwt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uwt_;
  }
  if (uwt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uwt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uwt, submessage_arena);
    }
    
  } else {
    
  }
  uwt_ = uwt;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.uwt)
}

// .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
inline bool LoginRequest::has_deviceinfo() const {
  return this != internal_default_instance() && deviceinfo_ != nullptr;
}
inline void LoginRequest::clear_deviceinfo() {
  if (GetArenaNoVirtual() == nullptr && deviceinfo_ != nullptr) {
    delete deviceinfo_;
  }
  deviceinfo_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::DeviceInfo& LoginRequest::deviceinfo() const {
  const ::com::htsc::mdc::insight::model::DeviceInfo* p = deviceinfo_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.deviceInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::DeviceInfo*>(
      &::com::htsc::mdc::insight::model::_DeviceInfo_default_instance_);
}
inline ::com::htsc::mdc::insight::model::DeviceInfo* LoginRequest::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.deviceInfo)
  
  ::com::htsc::mdc::insight::model::DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::DeviceInfo* LoginRequest::mutable_deviceinfo() {
  
  if (deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::DeviceInfo>(GetArenaNoVirtual());
    deviceinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.deviceInfo)
  return deviceinfo_;
}
inline void LoginRequest::set_allocated_deviceinfo(::com::htsc::mdc::insight::model::DeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    
  } else {
    
  }
  deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.deviceInfo)
}

// bool isSupportCompressed = 7;
inline void LoginRequest::clear_issupportcompressed() {
  issupportcompressed_ = false;
}
inline bool LoginRequest::issupportcompressed() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.isSupportCompressed)
  return issupportcompressed_;
}
inline void LoginRequest::set_issupportcompressed(bool value) {
  
  issupportcompressed_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.isSupportCompressed)
}

// string connectServerIP = 8;
inline void LoginRequest::clear_connectserverip() {
  connectserverip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::connectserverip() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
  return connectserverip_.GetNoArena();
}
inline void LoginRequest::set_connectserverip(const std::string& value) {
  
  connectserverip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}
inline void LoginRequest::set_connectserverip(std::string&& value) {
  
  connectserverip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}
inline void LoginRequest::set_connectserverip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connectserverip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}
inline void LoginRequest::set_connectserverip(const char* value, size_t size) {
  
  connectserverip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}
inline std::string* LoginRequest::mutable_connectserverip() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
  return connectserverip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_connectserverip() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
  
  return connectserverip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_connectserverip(std::string* connectserverip) {
  if (connectserverip != nullptr) {
    
  } else {
    
  }
  connectserverip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectserverip);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}

// -------------------------------------------------------------------

// LoginResponse

// bool isSuccess = 1;
inline void LoginResponse::clear_issuccess() {
  issuccess_ = false;
}
inline bool LoginResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.isSuccess)
  return issuccess_;
}
inline void LoginResponse::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
inline bool LoginResponse::has_errorcontext() const {
  return this != internal_default_instance() && errorcontext_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& LoginResponse::errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = errorcontext_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.errorContext)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      &::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* LoginResponse::release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = errorcontext_;
  errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* LoginResponse::mutable_errorcontext() {
  
  if (errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaNoVirtual());
    errorcontext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.errorContext)
  return errorcontext_;
}
inline void LoginResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.errorContext)
}

// string token = 3;
inline void LoginResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.token)
  return token_.GetNoArena();
}
inline void LoginResponse::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.token)
}
inline void LoginResponse::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.LoginResponse.token)
}
inline void LoginResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.token)
}
inline void LoginResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.token)
}
inline std::string* LoginResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.token)
}

// int64 lastLoginTime = 4;
inline void LoginResponse::clear_lastlogintime() {
  lastlogintime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginResponse::lastlogintime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.lastLoginTime)
  return lastlogintime_;
}
inline void LoginResponse::set_lastlogintime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastlogintime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.lastLoginTime)
}

// string lastLoginIp = 5;
inline void LoginResponse::clear_lastloginip() {
  lastloginip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResponse::lastloginip() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
  return lastloginip_.GetNoArena();
}
inline void LoginResponse::set_lastloginip(const std::string& value) {
  
  lastloginip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}
inline void LoginResponse::set_lastloginip(std::string&& value) {
  
  lastloginip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}
inline void LoginResponse::set_lastloginip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastloginip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}
inline void LoginResponse::set_lastloginip(const char* value, size_t size) {
  
  lastloginip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}
inline std::string* LoginResponse::mutable_lastloginip() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
  return lastloginip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResponse::release_lastloginip() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
  
  return lastloginip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_lastloginip(std::string* lastloginip) {
  if (lastloginip != nullptr) {
    
  } else {
    
  }
  lastloginip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastloginip);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}

// string reservedInfo = 6;
inline void LoginResponse::clear_reservedinfo() {
  reservedinfo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResponse::reservedinfo() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
  return reservedinfo_.GetNoArena();
}
inline void LoginResponse::set_reservedinfo(const std::string& value) {
  
  reservedinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}
inline void LoginResponse::set_reservedinfo(std::string&& value) {
  
  reservedinfo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}
inline void LoginResponse::set_reservedinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reservedinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}
inline void LoginResponse::set_reservedinfo(const char* value, size_t size) {
  
  reservedinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}
inline std::string* LoginResponse::mutable_reservedinfo() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
  return reservedinfo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResponse::release_reservedinfo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
  
  return reservedinfo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_reservedinfo(std::string* reservedinfo) {
  if (reservedinfo != nullptr) {
    
  } else {
    
  }
  reservedinfo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reservedinfo);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}

// string dataSource = 7;
inline void LoginResponse::clear_datasource() {
  datasource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResponse::datasource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.dataSource)
  return datasource_.GetNoArena();
}
inline void LoginResponse::set_datasource(const std::string& value) {
  
  datasource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}
inline void LoginResponse::set_datasource(std::string&& value) {
  
  datasource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}
inline void LoginResponse::set_datasource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}
inline void LoginResponse::set_datasource(const char* value, size_t size) {
  
  datasource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}
inline std::string* LoginResponse::mutable_datasource() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.dataSource)
  return datasource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResponse::release_datasource() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.dataSource)
  
  return datasource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_datasource(std::string* datasource) {
  if (datasource != nullptr) {
    
  } else {
    
  }
  datasource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasource);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}

// string site = 8;
inline void LoginResponse::clear_site() {
  site_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResponse::site() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.site)
  return site_.GetNoArena();
}
inline void LoginResponse::set_site(const std::string& value) {
  
  site_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.site)
}
inline void LoginResponse::set_site(std::string&& value) {
  
  site_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.LoginResponse.site)
}
inline void LoginResponse::set_site(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.site)
}
inline void LoginResponse::set_site(const char* value, size_t size) {
  
  site_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.site)
}
inline std::string* LoginResponse::mutable_site() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.site)
  return site_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResponse::release_site() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.site)
  
  return site_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_site(std::string* site) {
  if (site != nullptr) {
    
  } else {
    
  }
  site_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.site)
}

// .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
inline bool LoginResponse::has_servicediscoveryresponse() const {
  return this != internal_default_instance() && servicediscoveryresponse_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& LoginResponse::servicediscoveryresponse() const {
  const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* p = servicediscoveryresponse_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.serviceDiscoveryResponse)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse*>(
      &::com::htsc::mdc::insight::model::_ServiceDiscoveryResponse_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* LoginResponse::release_servicediscoveryresponse() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.serviceDiscoveryResponse)
  
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* temp = servicediscoveryresponse_;
  servicediscoveryresponse_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* LoginResponse::mutable_servicediscoveryresponse() {
  
  if (servicediscoveryresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ServiceDiscoveryResponse>(GetArenaNoVirtual());
    servicediscoveryresponse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.serviceDiscoveryResponse)
  return servicediscoveryresponse_;
}
inline void LoginResponse::set_allocated_servicediscoveryresponse(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(servicediscoveryresponse_);
  }
  if (servicediscoveryresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      servicediscoveryresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servicediscoveryresponse, submessage_arena);
    }
    
  } else {
    
  }
  servicediscoveryresponse_ = servicediscoveryresponse;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.serviceDiscoveryResponse)
}

// .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
inline bool LoginResponse::has_accountinfo() const {
  return this != internal_default_instance() && accountinfo_ != nullptr;
}
inline void LoginResponse::clear_accountinfo() {
  if (GetArenaNoVirtual() == nullptr && accountinfo_ != nullptr) {
    delete accountinfo_;
  }
  accountinfo_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::AccountInfo& LoginResponse::accountinfo() const {
  const ::com::htsc::mdc::insight::model::AccountInfo* p = accountinfo_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.accountInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::AccountInfo*>(
      &::com::htsc::mdc::insight::model::_AccountInfo_default_instance_);
}
inline ::com::htsc::mdc::insight::model::AccountInfo* LoginResponse::release_accountinfo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.accountInfo)
  
  ::com::htsc::mdc::insight::model::AccountInfo* temp = accountinfo_;
  accountinfo_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::AccountInfo* LoginResponse::mutable_accountinfo() {
  
  if (accountinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::AccountInfo>(GetArenaNoVirtual());
    accountinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.accountInfo)
  return accountinfo_;
}
inline void LoginResponse::set_allocated_accountinfo(::com::htsc::mdc::insight::model::AccountInfo* accountinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete accountinfo_;
  }
  if (accountinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accountinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountinfo, submessage_arena);
    }
    
  } else {
    
  }
  accountinfo_ = accountinfo;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.accountInfo)
}

// -------------------------------------------------------------------

// UserWithPassword

// string userName = 1;
inline void UserWithPassword::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserWithPassword::username() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.userName)
  return username_.GetNoArena();
}
inline void UserWithPassword::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.userName)
}
inline void UserWithPassword::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.UserWithPassword.userName)
}
inline void UserWithPassword::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.userName)
}
inline void UserWithPassword::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.userName)
}
inline std::string* UserWithPassword::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.userName)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserWithPassword::release_username() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserWithPassword::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.userName)
}

// string password = 2;
inline void UserWithPassword::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserWithPassword::password() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.password)
  return password_.GetNoArena();
}
inline void UserWithPassword::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.password)
}
inline void UserWithPassword::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.UserWithPassword.password)
}
inline void UserWithPassword::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.password)
}
inline void UserWithPassword::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.password)
}
inline std::string* UserWithPassword::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserWithPassword::release_password() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserWithPassword::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.password)
}

// string otp = 3;
inline void UserWithPassword::clear_otp() {
  otp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserWithPassword::otp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.otp)
  return otp_.GetNoArena();
}
inline void UserWithPassword::set_otp(const std::string& value) {
  
  otp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.otp)
}
inline void UserWithPassword::set_otp(std::string&& value) {
  
  otp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.UserWithPassword.otp)
}
inline void UserWithPassword::set_otp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  otp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.otp)
}
inline void UserWithPassword::set_otp(const char* value, size_t size) {
  
  otp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.otp)
}
inline std::string* UserWithPassword::mutable_otp() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.otp)
  return otp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserWithPassword::release_otp() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.otp)
  
  return otp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserWithPassword::set_allocated_otp(std::string* otp) {
  if (otp != nullptr) {
    
  } else {
    
  }
  otp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), otp);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.otp)
}

// string captcha = 4;
inline void UserWithPassword::clear_captcha() {
  captcha_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserWithPassword::captcha() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.captcha)
  return captcha_.GetNoArena();
}
inline void UserWithPassword::set_captcha(const std::string& value) {
  
  captcha_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}
inline void UserWithPassword::set_captcha(std::string&& value) {
  
  captcha_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}
inline void UserWithPassword::set_captcha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}
inline void UserWithPassword::set_captcha(const char* value, size_t size) {
  
  captcha_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}
inline std::string* UserWithPassword::mutable_captcha() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.captcha)
  return captcha_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserWithPassword::release_captcha() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.captcha)
  
  return captcha_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserWithPassword::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    
  } else {
    
  }
  captcha_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}

// string sms = 5;
inline void UserWithPassword::clear_sms() {
  sms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserWithPassword::sms() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.sms)
  return sms_.GetNoArena();
}
inline void UserWithPassword::set_sms(const std::string& value) {
  
  sms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.sms)
}
inline void UserWithPassword::set_sms(std::string&& value) {
  
  sms_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.UserWithPassword.sms)
}
inline void UserWithPassword::set_sms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.sms)
}
inline void UserWithPassword::set_sms(const char* value, size_t size) {
  
  sms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.sms)
}
inline std::string* UserWithPassword::mutable_sms() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.sms)
  return sms_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserWithPassword::release_sms() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.sms)
  
  return sms_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserWithPassword::set_allocated_sms(std::string* sms) {
  if (sms != nullptr) {
    
  } else {
    
  }
  sms_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sms);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.sms)
}

// -------------------------------------------------------------------

// UserWithToken

// string userName = 1;
inline void UserWithToken::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserWithToken::username() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithToken.userName)
  return username_.GetNoArena();
}
inline void UserWithToken::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithToken.userName)
}
inline void UserWithToken::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.UserWithToken.userName)
}
inline void UserWithToken::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithToken.userName)
}
inline void UserWithToken::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithToken.userName)
}
inline std::string* UserWithToken::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithToken.userName)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserWithToken::release_username() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithToken.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserWithToken::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithToken.userName)
}

// string token = 2;
inline void UserWithToken::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserWithToken::token() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithToken.token)
  return token_.GetNoArena();
}
inline void UserWithToken::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithToken.token)
}
inline void UserWithToken::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.UserWithToken.token)
}
inline void UserWithToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithToken.token)
}
inline void UserWithToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithToken.token)
}
inline std::string* UserWithToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithToken.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserWithToken::release_token() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithToken.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserWithToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithToken.token)
}

// -------------------------------------------------------------------

// DeviceInfo

// string deviceId = 1;
inline void DeviceInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
  return deviceid_.GetNoArena();
}
inline void DeviceInfo::set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}
inline void DeviceInfo::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}
inline void DeviceInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}
inline void DeviceInfo::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}
inline std::string* DeviceInfo::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}

// string deviceMac = 2;
inline void DeviceInfo::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::devicemac() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
  return devicemac_.GetNoArena();
}
inline void DeviceInfo::set_devicemac(const std::string& value) {
  
  devicemac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}
inline void DeviceInfo::set_devicemac(std::string&& value) {
  
  devicemac_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}
inline void DeviceInfo::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicemac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}
inline void DeviceInfo::set_devicemac(const char* value, size_t size) {
  
  devicemac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}
inline std::string* DeviceInfo::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
  return devicemac_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_devicemac() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
  
  return devicemac_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_devicemac(std::string* devicemac) {
  if (devicemac != nullptr) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}

// string deviceHarddisk = 3;
inline void DeviceInfo::clear_deviceharddisk() {
  deviceharddisk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::deviceharddisk() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
  return deviceharddisk_.GetNoArena();
}
inline void DeviceInfo::set_deviceharddisk(const std::string& value) {
  
  deviceharddisk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}
inline void DeviceInfo::set_deviceharddisk(std::string&& value) {
  
  deviceharddisk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}
inline void DeviceInfo::set_deviceharddisk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceharddisk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}
inline void DeviceInfo::set_deviceharddisk(const char* value, size_t size) {
  
  deviceharddisk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}
inline std::string* DeviceInfo::mutable_deviceharddisk() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
  return deviceharddisk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_deviceharddisk() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
  
  return deviceharddisk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_deviceharddisk(std::string* deviceharddisk) {
  if (deviceharddisk != nullptr) {
    
  } else {
    
  }
  deviceharddisk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceharddisk);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}

// string deviceCPU = 4;
inline void DeviceInfo::clear_devicecpu() {
  devicecpu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::devicecpu() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
  return devicecpu_.GetNoArena();
}
inline void DeviceInfo::set_devicecpu(const std::string& value) {
  
  devicecpu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}
inline void DeviceInfo::set_devicecpu(std::string&& value) {
  
  devicecpu_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}
inline void DeviceInfo::set_devicecpu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicecpu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}
inline void DeviceInfo::set_devicecpu(const char* value, size_t size) {
  
  devicecpu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}
inline std::string* DeviceInfo::mutable_devicecpu() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
  return devicecpu_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_devicecpu() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
  
  return devicecpu_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_devicecpu(std::string* devicecpu) {
  if (devicecpu != nullptr) {
    
  } else {
    
  }
  devicecpu_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicecpu);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}

// string cellphoneNumber = 5;
inline void DeviceInfo::clear_cellphonenumber() {
  cellphonenumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::cellphonenumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
  return cellphonenumber_.GetNoArena();
}
inline void DeviceInfo::set_cellphonenumber(const std::string& value) {
  
  cellphonenumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}
inline void DeviceInfo::set_cellphonenumber(std::string&& value) {
  
  cellphonenumber_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}
inline void DeviceInfo::set_cellphonenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cellphonenumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}
inline void DeviceInfo::set_cellphonenumber(const char* value, size_t size) {
  
  cellphonenumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}
inline std::string* DeviceInfo::mutable_cellphonenumber() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
  return cellphonenumber_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_cellphonenumber() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
  
  return cellphonenumber_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_cellphonenumber(std::string* cellphonenumber) {
  if (cellphonenumber != nullptr) {
    
  } else {
    
  }
  cellphonenumber_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cellphonenumber);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}

// string cellphoneImei = 6;
inline void DeviceInfo::clear_cellphoneimei() {
  cellphoneimei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::cellphoneimei() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
  return cellphoneimei_.GetNoArena();
}
inline void DeviceInfo::set_cellphoneimei(const std::string& value) {
  
  cellphoneimei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}
inline void DeviceInfo::set_cellphoneimei(std::string&& value) {
  
  cellphoneimei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}
inline void DeviceInfo::set_cellphoneimei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cellphoneimei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}
inline void DeviceInfo::set_cellphoneimei(const char* value, size_t size) {
  
  cellphoneimei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}
inline std::string* DeviceInfo::mutable_cellphoneimei() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
  return cellphoneimei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_cellphoneimei() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
  
  return cellphoneimei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_cellphoneimei(std::string* cellphoneimei) {
  if (cellphoneimei != nullptr) {
    
  } else {
    
  }
  cellphoneimei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cellphoneimei);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}

// -------------------------------------------------------------------

// AccountInfo

// string userName = 1;
inline void AccountInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::username() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.userName)
  return username_.GetNoArena();
}
inline void AccountInfo::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.userName)
}
inline void AccountInfo::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.AccountInfo.userName)
}
inline void AccountInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.userName)
}
inline void AccountInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.userName)
}
inline std::string* AccountInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.userName)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_username() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.userName)
}

// string startDate = 2;
inline void AccountInfo::clear_startdate() {
  startdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::startdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.startDate)
  return startdate_.GetNoArena();
}
inline void AccountInfo::set_startdate(const std::string& value) {
  
  startdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.startDate)
}
inline void AccountInfo::set_startdate(std::string&& value) {
  
  startdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.AccountInfo.startDate)
}
inline void AccountInfo::set_startdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.startDate)
}
inline void AccountInfo::set_startdate(const char* value, size_t size) {
  
  startdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.startDate)
}
inline std::string* AccountInfo::mutable_startdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.startDate)
  return startdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_startdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.startDate)
  
  return startdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_startdate(std::string* startdate) {
  if (startdate != nullptr) {
    
  } else {
    
  }
  startdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.startDate)
}

// string stopDate = 3;
inline void AccountInfo::clear_stopdate() {
  stopdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::stopdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.stopDate)
  return stopdate_.GetNoArena();
}
inline void AccountInfo::set_stopdate(const std::string& value) {
  
  stopdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}
inline void AccountInfo::set_stopdate(std::string&& value) {
  
  stopdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}
inline void AccountInfo::set_stopdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stopdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}
inline void AccountInfo::set_stopdate(const char* value, size_t size) {
  
  stopdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}
inline std::string* AccountInfo::mutable_stopdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.stopDate)
  return stopdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_stopdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.stopDate)
  
  return stopdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_stopdate(std::string* stopdate) {
  if (stopdate != nullptr) {
    
  } else {
    
  }
  stopdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stopdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}

// string customerName = 4;
inline void AccountInfo::clear_customername() {
  customername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::customername() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.customerName)
  return customername_.GetNoArena();
}
inline void AccountInfo::set_customername(const std::string& value) {
  
  customername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.customerName)
}
inline void AccountInfo::set_customername(std::string&& value) {
  
  customername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.AccountInfo.customerName)
}
inline void AccountInfo::set_customername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.customerName)
}
inline void AccountInfo::set_customername(const char* value, size_t size) {
  
  customername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.customerName)
}
inline std::string* AccountInfo::mutable_customername() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.customerName)
  return customername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_customername() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.customerName)
  
  return customername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_customername(std::string* customername) {
  if (customername != nullptr) {
    
  } else {
    
  }
  customername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customername);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.customerName)
}

// string contactPerson = 5;
inline void AccountInfo::clear_contactperson() {
  contactperson_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::contactperson() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
  return contactperson_.GetNoArena();
}
inline void AccountInfo::set_contactperson(const std::string& value) {
  
  contactperson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}
inline void AccountInfo::set_contactperson(std::string&& value) {
  
  contactperson_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}
inline void AccountInfo::set_contactperson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contactperson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}
inline void AccountInfo::set_contactperson(const char* value, size_t size) {
  
  contactperson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}
inline std::string* AccountInfo::mutable_contactperson() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
  return contactperson_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_contactperson() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
  
  return contactperson_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_contactperson(std::string* contactperson) {
  if (contactperson != nullptr) {
    
  } else {
    
  }
  contactperson_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contactperson);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}

// string contactAddress = 6;
inline void AccountInfo::clear_contactaddress() {
  contactaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::contactaddress() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
  return contactaddress_.GetNoArena();
}
inline void AccountInfo::set_contactaddress(const std::string& value) {
  
  contactaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}
inline void AccountInfo::set_contactaddress(std::string&& value) {
  
  contactaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}
inline void AccountInfo::set_contactaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contactaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}
inline void AccountInfo::set_contactaddress(const char* value, size_t size) {
  
  contactaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}
inline std::string* AccountInfo::mutable_contactaddress() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
  return contactaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_contactaddress() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
  
  return contactaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_contactaddress(std::string* contactaddress) {
  if (contactaddress != nullptr) {
    
  } else {
    
  }
  contactaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contactaddress);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}

// string contactTel = 7;
inline void AccountInfo::clear_contacttel() {
  contacttel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::contacttel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.contactTel)
  return contacttel_.GetNoArena();
}
inline void AccountInfo::set_contacttel(const std::string& value) {
  
  contacttel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}
inline void AccountInfo::set_contacttel(std::string&& value) {
  
  contacttel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}
inline void AccountInfo::set_contacttel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contacttel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}
inline void AccountInfo::set_contacttel(const char* value, size_t size) {
  
  contacttel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}
inline std::string* AccountInfo::mutable_contacttel() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.contactTel)
  return contacttel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_contacttel() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.contactTel)
  
  return contacttel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_contacttel(std::string* contacttel) {
  if (contacttel != nullptr) {
    
  } else {
    
  }
  contacttel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contacttel);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}

// string contactEmail = 8;
inline void AccountInfo::clear_contactemail() {
  contactemail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::contactemail() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
  return contactemail_.GetNoArena();
}
inline void AccountInfo::set_contactemail(const std::string& value) {
  
  contactemail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}
inline void AccountInfo::set_contactemail(std::string&& value) {
  
  contactemail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}
inline void AccountInfo::set_contactemail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contactemail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}
inline void AccountInfo::set_contactemail(const char* value, size_t size) {
  
  contactemail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}
inline std::string* AccountInfo::mutable_contactemail() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
  return contactemail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_contactemail() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
  
  return contactemail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_contactemail(std::string* contactemail) {
  if (contactemail != nullptr) {
    
  } else {
    
  }
  contactemail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contactemail);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::ELoginType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::ELoginType>() {
  return ::com::htsc::mdc::insight::model::ELoginType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
