// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDBasicInfo.proto

#include "MDBasicInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MDBasicInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDBasicInfo_ConstantParam_MDBasicInfo_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDBasicInfo_ConstantParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDBasicInfo_ConstantParam> _instance;
} _MDBasicInfo_ConstantParam_default_instance_;
class MDBasicInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDBasicInfo> _instance;
} _MDBasicInfo_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_MDBasicInfo_MDBasicInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDBasicInfo_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDBasicInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDBasicInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDBasicInfo_MDBasicInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MDBasicInfo_MDBasicInfo_2eproto}, {
      &scc_info_MDBasicInfo_ConstantParam_MDBasicInfo_2eproto.base,}};

static void InitDefaultsscc_info_MDBasicInfo_ConstantParam_MDBasicInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDBasicInfo_ConstantParam_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDBasicInfo_ConstantParam_MDBasicInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MDBasicInfo_ConstantParam_MDBasicInfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MDBasicInfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MDBasicInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MDBasicInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MDBasicInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam, paramname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam, paramvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, securityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, symbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, chispelling_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, englishname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, securitysubtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, listdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, currency_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, outstandingshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, publicfloatsharequantity_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, maxpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, minpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, lotsize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, shortsellflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, exchangesymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, ticksize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, loanmarginindicator_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, pxaccuracy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, ipoprofitable_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, diffrightsindicator_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, hkspreadtablecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, presettlepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, preiopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, shhkconnect_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, szhkconnect_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optioncontractid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optioncontractsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionunderlyingsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionunderlyingsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionunderlyingtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionoptiontype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optioncallorput_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optioncontractmultiplierunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionexerciseprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionstartdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionenddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionexercisedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optiondeliverydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionexpiredate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionupdateversion_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optiontotallongposition_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionsecurityclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionsettlprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionunderlyingclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionpricelimittype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optiondailypriceuplimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optiondailypricedownlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionmarginunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionmarginratioparam1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionmarginratioparam2_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionroundlot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionlmtordminfloor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionlmtordmaxfloor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionmktordminfloor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionmktordmaxfloor_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionticksize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionsecuritystatusflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optioncarryinterestdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionearlyexpiredate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionstrategysecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fitradeproducttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fisecurityproperty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fisecuritystatus_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fipledgedsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiopentime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, ficlosetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiissuemode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fifaceamount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiissueprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiinteresttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiinterestfrequency_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, figuaranteedinterestrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fibaseinterestrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiquotedmargin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fitimelimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fitotalissuance_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiissuestartdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiissueenddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, filistdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiexpiredate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, finationaldebttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fiissuemethod_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, ficrossmarket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fishortsellflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fitotalshortsellquota_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fidealershortsellquota_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fipreclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, fipreweightedpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionlisttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optiondeliverytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionadjusttimes_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optioncontractposition_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionbuyqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionsellqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionmarketorderbuyqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionmarketordersellqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionquoteorderbuyqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionquoteordersellqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionbuyqtyunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionsellqtyunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionlastsellmargin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionsellmargin_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optionmarketmakerflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, optioncombinationstrategy_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, deliveryyear_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, deliverymonth_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, instrumentid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, instrumentname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, exchangeinstid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, productid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, maxmarketordervolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, minmarketordervolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, maxlimitordervolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, minlimitordervolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, volumemultiple_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, createdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, expiredate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, startdelivdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, enddelivdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, positiontype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, longmarginratio_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, shortmarginratio_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, maxmarginsidealgorithm_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, strikeprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, preopeninterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, formersymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, delistdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, buyqtyunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, sellqtyunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, buyqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, sellqtyupperlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, buyqtylowerlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, sellqtylowerlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, vcmflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, casflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, posflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, posupperlimitpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, poslowerlimitpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, basecontractid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, constantparams_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBasicInfo, interestaccrualdate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam)},
  { 7, -1, sizeof(::com::htsc::mdc::insight::model::MDBasicInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDBasicInfo_ConstantParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDBasicInfo_default_instance_),
};

const char descriptor_table_protodef_MDBasicInfo_2eproto[] =
  "\n\021MDBasicInfo.proto\022\032com.htsc.mdc.insigh"
  "t.model\032\027ESecurityIDSource.proto\032\023ESecur"
  "ityType.proto\"\372\037\n\013MDBasicInfo\022\026\n\016HTSCSec"
  "urityID\030\001 \001(\t\022\022\n\nSecurityID\030\002 \001(\t\022\016\n\006Sym"
  "bol\030\003 \001(\t\022\023\n\013ChiSpelling\030\004 \001(\t\022\023\n\013Englis"
  "hName\030\005 \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%."
  "com.htsc.mdc.model.ESecurityIDSource\0227\n\014"
  "securityType\030\007 \001(\0162!.com.htsc.mdc.model."
  "ESecurityType\022\027\n\017SecuritySubType\030\010 \001(\t\022\020"
  "\n\010ListDate\030\t \001(\t\022\020\n\010Currency\030\n \001(\t\022\030\n\020Ou"
  "tstandingShare\030\013 \001(\003\022 \n\030PublicFloatShare"
  "Quantity\030\014 \001(\003\022\016\n\006MDDate\030\r \001(\005\022\030\n\020Tradin"
  "gPhaseCode\030\016 \001(\t\022\022\n\nPreClosePx\030\017 \001(\003\022\r\n\005"
  "MaxPx\030\020 \001(\003\022\r\n\005MinPx\030\021 \001(\003\022\017\n\007LotSize\030\022 "
  "\001(\003\022\025\n\rShortSellFlag\030\023 \001(\010\022\024\n\014ExchangeDa"
  "te\030\024 \001(\t\022\026\n\016ExchangeSymbol\030\025 \001(\t\022\020\n\010Tick"
  "Size\030\026 \001(\001\022\033\n\023LoanMarginIndicator\030\027 \001(\005\022"
  "\022\n\nPxAccuracy\030\030 \001(\005\022\025\n\rIPOProfitable\030\031 \001"
  "(\005\022\033\n\023DiffRightsIndicator\030\032 \001(\005\022\031\n\021HKSpr"
  "eadTableCode\030\033 \001(\t\022\023\n\013PreSettlePx\030\034 \001(\001\022"
  "\017\n\007PreIOPV\030\035 \001(\001\022\023\n\013ShHkConnect\030\036 \001(\005\022\023\n"
  "\013SzHkConnect\030\037 \001(\005\022\030\n\020OptionContractID\030("
  " \001(\t\022\034\n\024OptionContractSymbol\030) \001(\t\022\"\n\032Op"
  "tionUnderlyingSecurityID\030* \001(\t\022\036\n\026Option"
  "UnderlyingSymbol\030+ \001(\t\022\034\n\024OptionUnderlyi"
  "ngType\030, \001(\t\022\030\n\020OptionOptionType\030- \001(\t\022\027"
  "\n\017OptionCallOrPut\030. \001(\t\022$\n\034OptionContrac"
  "tMultiplierUnit\030/ \001(\003\022\033\n\023OptionExerciseP"
  "rice\0300 \001(\001\022\027\n\017OptionStartDate\0301 \001(\t\022\025\n\rO"
  "ptionEndDate\0302 \001(\t\022\032\n\022OptionExerciseDate"
  "\0303 \001(\t\022\032\n\022OptionDeliveryDate\0304 \001(\t\022\030\n\020Op"
  "tionExpireDate\0305 \001(\t\022\033\n\023OptionUpdateVers"
  "ion\0306 \001(\t\022\037\n\027OptionTotalLongPosition\0307 \001"
  "(\003\022\035\n\025OptionSecurityClosePx\0308 \001(\001\022\030\n\020Opt"
  "ionSettlPrice\0309 \001(\001\022\037\n\027OptionUnderlyingC"
  "losePx\030: \001(\001\022\034\n\024OptionPriceLimitType\030; \001"
  "(\t\022\037\n\027OptionDailyPriceUpLimit\030< \001(\001\022!\n\031O"
  "ptionDailyPriceDownLimit\030= \001(\001\022\030\n\020Option"
  "MarginUnit\030> \001(\001\022\037\n\027OptionMarginRatioPar"
  "am1\030\? \001(\001\022\037\n\027OptionMarginRatioParam2\030@ \001"
  "(\001\022\026\n\016OptionRoundLot\030A \001(\003\022\034\n\024OptionLmtO"
  "rdMinFloor\030B \001(\003\022\034\n\024OptionLmtOrdMaxFloor"
  "\030C \001(\003\022\034\n\024OptionMktOrdMinFloor\030D \001(\003\022\034\n\024"
  "OptionMktOrdMaxFloor\030E \001(\003\022\026\n\016OptionTick"
  "Size\030F \001(\001\022 \n\030OptionSecurityStatusFlag\030G"
  " \001(\t\022\037\n\027OptionCarryInterestDate\030H \001(\t\022\035\n"
  "\025OptionEarlyExpireDate\030I \001(\t\022 \n\030OptionSt"
  "rategySecurityID\030J \001(\t\022\032\n\022FITradeProduct"
  "Type\030P \001(\t\022\032\n\022FISecurityProperty\030Q \001(\t\022\030"
  "\n\020FISecurityStatus\030R \001(\t\022\033\n\023FIPledgedSec"
  "urityID\030S \001(\t\022\022\n\nFIOpenTime\030T \001(\t\022\023\n\013FIC"
  "loseTime\030U \001(\t\022\023\n\013FIIssueMode\030V \001(\t\022\024\n\014F"
  "IFaceAmount\030W \001(\001\022\024\n\014FIIssuePrice\030X \001(\001\022"
  "\026\n\016FIInterestType\030Y \001(\t\022\033\n\023FIInterestFre"
  "quency\030Z \001(\t\022 \n\030FIGuaranteedInterestRate"
  "\030[ \001(\001\022\032\n\022FIBaseInterestRate\030\\ \001(\001\022\026\n\016FI"
  "QuotedMargin\030] \001(\001\022\023\n\013FITimeLimit\030^ \001(\005\022"
  "\027\n\017FITotalIssuance\030_ \001(\001\022\030\n\020FIIssueStart"
  "Date\030` \001(\t\022\026\n\016FIIssueEndDate\030a \001(\t\022\022\n\nFI"
  "ListDate\030b \001(\t\022\024\n\014FIExpireDate\030c \001(\t\022\032\n\022"
  "FINationalDebtType\030d \001(\t\022\025\n\rFIIssueMetho"
  "d\030e \001(\t\022\025\n\rFICrossMarket\030f \001(\010\022\027\n\017FIShor"
  "tSellFlag\030g \001(\010\022\035\n\025FITotalShortSellQuota"
  "\030h \001(\001\022\036\n\026FIDealerShortSellQuota\030i \001(\001\022\024"
  "\n\014FIPreClosePx\030j \001(\001\022\027\n\017FIPreWeightedPx\030"
  "k \001(\001\022\026\n\016OptionListType\030n \001(\t\022\032\n\022OptionD"
  "eliveryType\030o \001(\t\022\031\n\021OptionAdjustTimes\030p"
  " \001(\005\022\036\n\026OptionContractPosition\030q \001(\003\022\036\n\026"
  "OptionBuyQtyUpperLimit\030r \001(\003\022\037\n\027OptionSe"
  "llQtyUpperLimit\030s \001(\003\022)\n!OptionMarketOrd"
  "erBuyQtyUpperLimit\030t \001(\003\022*\n\"OptionMarket"
  "OrderSellQtyUpperLimit\030u \001(\003\022(\n OptionQu"
  "oteOrderBuyQtyUpperLimit\030v \001(\003\022)\n!Option"
  "QuoteOrderSellQtyUpperLimit\030w \001(\003\022\030\n\020Opt"
  "ionBuyQtyUnit\030x \001(\003\022\031\n\021OptionSellQtyUnit"
  "\030y \001(\003\022\034\n\024OptionLastSellMargin\030z \001(\001\022\030\n\020"
  "OptionSellMargin\030{ \001(\001\022\035\n\025OptionMarketMa"
  "kerFlag\030| \001(\t\022!\n\031OptionCombinationStrate"
  "gy\030} \001(\t\022\024\n\014DeliveryYear\030~ \001(\t\022\025\n\rDelive"
  "ryMonth\030\177 \001(\t\022\025\n\014InstrumentID\030\200\001 \001(\t\022\027\n\016"
  "InstrumentName\030\201\001 \001(\t\022\027\n\016ExchangeInstID\030"
  "\202\001 \001(\t\022\022\n\tProductID\030\203\001 \001(\t\022\035\n\024MaxMarketO"
  "rderVolume\030\204\001 \001(\003\022\035\n\024MinMarketOrderVolum"
  "e\030\205\001 \001(\003\022\034\n\023MaxLimitOrderVolume\030\206\001 \001(\003\022\034"
  "\n\023MinLimitOrderVolume\030\207\001 \001(\003\022\027\n\016VolumeMu"
  "ltiple\030\210\001 \001(\003\022\023\n\nCreateDate\030\211\001 \001(\t\022\023\n\nEx"
  "pireDate\030\212\001 \001(\t\022\027\n\016StartDelivDate\030\213\001 \001(\t"
  "\022\025\n\014EndDelivDate\030\214\001 \001(\t\022\025\n\014PositionType\030"
  "\215\001 \001(\t\022\030\n\017LongMarginRatio\030\216\001 \001(\001\022\031\n\020Shor"
  "tMarginRatio\030\217\001 \001(\001\022\037\n\026MaxMarginSideAlgo"
  "rithm\030\220\001 \001(\t\022\024\n\013StrikePrice\030\221\001 \001(\001\022\030\n\017Pr"
  "eOpenInterest\030\222\001 \001(\001\022\025\n\014FormerSymbol\030\223\001 "
  "\001(\t\022\023\n\nDelistDate\030\224\001 \001(\t\022\023\n\nBuyQtyUnit\030\225"
  "\001 \001(\003\022\024\n\013SellQtyUnit\030\226\001 \001(\003\022\031\n\020BuyQtyUpp"
  "erLimit\030\241\001 \001(\003\022\032\n\021SellQtyUpperLimit\030\242\001 \001"
  "(\003\022\031\n\020BuyQtyLowerLimit\030\243\001 \001(\003\022\032\n\021SellQty"
  "LowerLimit\030\244\001 \001(\003\022\020\n\007VCMFlag\030\245\001 \001(\005\022\020\n\007C"
  "ASFlag\030\246\001 \001(\005\022\020\n\007POSFlag\030\247\001 \001(\005\022\030\n\017POSUp"
  "perLimitPx\030\250\001 \001(\001\022\030\n\017POSLowerLimitPx\030\251\001 "
  "\001(\001\022\027\n\016BaseContractID\030\252\001 \001(\t\022N\n\016constant"
  "Params\030\253\001 \003(\01325.com.htsc.mdc.insight.mod"
  "el.MDBasicInfo.ConstantParam\022\036\n\025DataMult"
  "iplePowerOf10\030\254\001 \001(\005\022\034\n\023InterestAccrualD"
  "ate\030\255\001 \001(\t\0326\n\rConstantParam\022\021\n\tParamName"
  "\030\001 \001(\t\022\022\n\nParamValue\030\002 \001(\tB4\n\032com.htsc.m"
  "dc.insight.modelB\021MDBasicInfoProtosH\001\240\001\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MDBasicInfo_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MDBasicInfo_2eproto_sccs[2] = {
  &scc_info_MDBasicInfo_MDBasicInfo_2eproto.base,
  &scc_info_MDBasicInfo_ConstantParam_MDBasicInfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MDBasicInfo_2eproto_once;
static bool descriptor_table_MDBasicInfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDBasicInfo_2eproto = {
  &descriptor_table_MDBasicInfo_2eproto_initialized, descriptor_table_protodef_MDBasicInfo_2eproto, "MDBasicInfo.proto", 4248,
  &descriptor_table_MDBasicInfo_2eproto_once, descriptor_table_MDBasicInfo_2eproto_sccs, descriptor_table_MDBasicInfo_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_MDBasicInfo_2eproto::offsets,
  file_level_metadata_MDBasicInfo_2eproto, 2, file_level_enum_descriptors_MDBasicInfo_2eproto, file_level_service_descriptors_MDBasicInfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MDBasicInfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MDBasicInfo_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void MDBasicInfo_ConstantParam::InitAsDefaultInstance() {
}
class MDBasicInfo_ConstantParam::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDBasicInfo_ConstantParam::kParamNameFieldNumber;
const int MDBasicInfo_ConstantParam::kParamValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDBasicInfo_ConstantParam::MDBasicInfo_ConstantParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
}
MDBasicInfo_ConstantParam::MDBasicInfo_ConstantParam(const MDBasicInfo_ConstantParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paramname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.paramname().size() > 0) {
    paramname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paramname_);
  }
  paramvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.paramvalue().size() > 0) {
    paramvalue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paramvalue_);
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
}

void MDBasicInfo_ConstantParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDBasicInfo_ConstantParam_MDBasicInfo_2eproto.base);
  paramname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MDBasicInfo_ConstantParam::~MDBasicInfo_ConstantParam() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  SharedDtor();
}

void MDBasicInfo_ConstantParam::SharedDtor() {
  paramname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MDBasicInfo_ConstantParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDBasicInfo_ConstantParam& MDBasicInfo_ConstantParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDBasicInfo_ConstantParam_MDBasicInfo_2eproto.base);
  return *internal_default_instance();
}


void MDBasicInfo_ConstantParam::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paramname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDBasicInfo_ConstantParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ParamName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_paramname(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ParamValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_paramvalue(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDBasicInfo_ConstantParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ParamName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_paramname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->paramname().data(), static_cast<int>(this->paramname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ParamValue = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_paramvalue()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->paramvalue().data(), static_cast<int>(this->paramvalue().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDBasicInfo_ConstantParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ParamName = 1;
  if (this->paramname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->paramname().data(), static_cast<int>(this->paramname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->paramname(), output);
  }

  // string ParamValue = 2;
  if (this->paramvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->paramvalue().data(), static_cast<int>(this->paramvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->paramvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDBasicInfo_ConstantParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ParamName = 1;
  if (this->paramname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->paramname().data(), static_cast<int>(this->paramname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->paramname(), target);
  }

  // string ParamValue = 2;
  if (this->paramvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->paramvalue().data(), static_cast<int>(this->paramvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->paramvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  return target;
}

size_t MDBasicInfo_ConstantParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ParamName = 1;
  if (this->paramname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->paramname());
  }

  // string ParamValue = 2;
  if (this->paramvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->paramvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDBasicInfo_ConstantParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MDBasicInfo_ConstantParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDBasicInfo_ConstantParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
    MergeFrom(*source);
  }
}

void MDBasicInfo_ConstantParam::MergeFrom(const MDBasicInfo_ConstantParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paramname().size() > 0) {

    paramname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paramname_);
  }
  if (from.paramvalue().size() > 0) {

    paramvalue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paramvalue_);
  }
}

void MDBasicInfo_ConstantParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDBasicInfo_ConstantParam::CopyFrom(const MDBasicInfo_ConstantParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDBasicInfo_ConstantParam::IsInitialized() const {
  return true;
}

void MDBasicInfo_ConstantParam::Swap(MDBasicInfo_ConstantParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDBasicInfo_ConstantParam::InternalSwap(MDBasicInfo_ConstantParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paramname_.Swap(&other->paramname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paramvalue_.Swap(&other->paramvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MDBasicInfo_ConstantParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MDBasicInfo::InitAsDefaultInstance() {
}
class MDBasicInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDBasicInfo::kHTSCSecurityIDFieldNumber;
const int MDBasicInfo::kSecurityIDFieldNumber;
const int MDBasicInfo::kSymbolFieldNumber;
const int MDBasicInfo::kChiSpellingFieldNumber;
const int MDBasicInfo::kEnglishNameFieldNumber;
const int MDBasicInfo::kSecurityIDSourceFieldNumber;
const int MDBasicInfo::kSecurityTypeFieldNumber;
const int MDBasicInfo::kSecuritySubTypeFieldNumber;
const int MDBasicInfo::kListDateFieldNumber;
const int MDBasicInfo::kCurrencyFieldNumber;
const int MDBasicInfo::kOutstandingShareFieldNumber;
const int MDBasicInfo::kPublicFloatShareQuantityFieldNumber;
const int MDBasicInfo::kMDDateFieldNumber;
const int MDBasicInfo::kTradingPhaseCodeFieldNumber;
const int MDBasicInfo::kPreClosePxFieldNumber;
const int MDBasicInfo::kMaxPxFieldNumber;
const int MDBasicInfo::kMinPxFieldNumber;
const int MDBasicInfo::kLotSizeFieldNumber;
const int MDBasicInfo::kShortSellFlagFieldNumber;
const int MDBasicInfo::kExchangeDateFieldNumber;
const int MDBasicInfo::kExchangeSymbolFieldNumber;
const int MDBasicInfo::kTickSizeFieldNumber;
const int MDBasicInfo::kLoanMarginIndicatorFieldNumber;
const int MDBasicInfo::kPxAccuracyFieldNumber;
const int MDBasicInfo::kIPOProfitableFieldNumber;
const int MDBasicInfo::kDiffRightsIndicatorFieldNumber;
const int MDBasicInfo::kHKSpreadTableCodeFieldNumber;
const int MDBasicInfo::kPreSettlePxFieldNumber;
const int MDBasicInfo::kPreIOPVFieldNumber;
const int MDBasicInfo::kShHkConnectFieldNumber;
const int MDBasicInfo::kSzHkConnectFieldNumber;
const int MDBasicInfo::kOptionContractIDFieldNumber;
const int MDBasicInfo::kOptionContractSymbolFieldNumber;
const int MDBasicInfo::kOptionUnderlyingSecurityIDFieldNumber;
const int MDBasicInfo::kOptionUnderlyingSymbolFieldNumber;
const int MDBasicInfo::kOptionUnderlyingTypeFieldNumber;
const int MDBasicInfo::kOptionOptionTypeFieldNumber;
const int MDBasicInfo::kOptionCallOrPutFieldNumber;
const int MDBasicInfo::kOptionContractMultiplierUnitFieldNumber;
const int MDBasicInfo::kOptionExercisePriceFieldNumber;
const int MDBasicInfo::kOptionStartDateFieldNumber;
const int MDBasicInfo::kOptionEndDateFieldNumber;
const int MDBasicInfo::kOptionExerciseDateFieldNumber;
const int MDBasicInfo::kOptionDeliveryDateFieldNumber;
const int MDBasicInfo::kOptionExpireDateFieldNumber;
const int MDBasicInfo::kOptionUpdateVersionFieldNumber;
const int MDBasicInfo::kOptionTotalLongPositionFieldNumber;
const int MDBasicInfo::kOptionSecurityClosePxFieldNumber;
const int MDBasicInfo::kOptionSettlPriceFieldNumber;
const int MDBasicInfo::kOptionUnderlyingClosePxFieldNumber;
const int MDBasicInfo::kOptionPriceLimitTypeFieldNumber;
const int MDBasicInfo::kOptionDailyPriceUpLimitFieldNumber;
const int MDBasicInfo::kOptionDailyPriceDownLimitFieldNumber;
const int MDBasicInfo::kOptionMarginUnitFieldNumber;
const int MDBasicInfo::kOptionMarginRatioParam1FieldNumber;
const int MDBasicInfo::kOptionMarginRatioParam2FieldNumber;
const int MDBasicInfo::kOptionRoundLotFieldNumber;
const int MDBasicInfo::kOptionLmtOrdMinFloorFieldNumber;
const int MDBasicInfo::kOptionLmtOrdMaxFloorFieldNumber;
const int MDBasicInfo::kOptionMktOrdMinFloorFieldNumber;
const int MDBasicInfo::kOptionMktOrdMaxFloorFieldNumber;
const int MDBasicInfo::kOptionTickSizeFieldNumber;
const int MDBasicInfo::kOptionSecurityStatusFlagFieldNumber;
const int MDBasicInfo::kOptionCarryInterestDateFieldNumber;
const int MDBasicInfo::kOptionEarlyExpireDateFieldNumber;
const int MDBasicInfo::kOptionStrategySecurityIDFieldNumber;
const int MDBasicInfo::kFITradeProductTypeFieldNumber;
const int MDBasicInfo::kFISecurityPropertyFieldNumber;
const int MDBasicInfo::kFISecurityStatusFieldNumber;
const int MDBasicInfo::kFIPledgedSecurityIDFieldNumber;
const int MDBasicInfo::kFIOpenTimeFieldNumber;
const int MDBasicInfo::kFICloseTimeFieldNumber;
const int MDBasicInfo::kFIIssueModeFieldNumber;
const int MDBasicInfo::kFIFaceAmountFieldNumber;
const int MDBasicInfo::kFIIssuePriceFieldNumber;
const int MDBasicInfo::kFIInterestTypeFieldNumber;
const int MDBasicInfo::kFIInterestFrequencyFieldNumber;
const int MDBasicInfo::kFIGuaranteedInterestRateFieldNumber;
const int MDBasicInfo::kFIBaseInterestRateFieldNumber;
const int MDBasicInfo::kFIQuotedMarginFieldNumber;
const int MDBasicInfo::kFITimeLimitFieldNumber;
const int MDBasicInfo::kFITotalIssuanceFieldNumber;
const int MDBasicInfo::kFIIssueStartDateFieldNumber;
const int MDBasicInfo::kFIIssueEndDateFieldNumber;
const int MDBasicInfo::kFIListDateFieldNumber;
const int MDBasicInfo::kFIExpireDateFieldNumber;
const int MDBasicInfo::kFINationalDebtTypeFieldNumber;
const int MDBasicInfo::kFIIssueMethodFieldNumber;
const int MDBasicInfo::kFICrossMarketFieldNumber;
const int MDBasicInfo::kFIShortSellFlagFieldNumber;
const int MDBasicInfo::kFITotalShortSellQuotaFieldNumber;
const int MDBasicInfo::kFIDealerShortSellQuotaFieldNumber;
const int MDBasicInfo::kFIPreClosePxFieldNumber;
const int MDBasicInfo::kFIPreWeightedPxFieldNumber;
const int MDBasicInfo::kOptionListTypeFieldNumber;
const int MDBasicInfo::kOptionDeliveryTypeFieldNumber;
const int MDBasicInfo::kOptionAdjustTimesFieldNumber;
const int MDBasicInfo::kOptionContractPositionFieldNumber;
const int MDBasicInfo::kOptionBuyQtyUpperLimitFieldNumber;
const int MDBasicInfo::kOptionSellQtyUpperLimitFieldNumber;
const int MDBasicInfo::kOptionMarketOrderBuyQtyUpperLimitFieldNumber;
const int MDBasicInfo::kOptionMarketOrderSellQtyUpperLimitFieldNumber;
const int MDBasicInfo::kOptionQuoteOrderBuyQtyUpperLimitFieldNumber;
const int MDBasicInfo::kOptionQuoteOrderSellQtyUpperLimitFieldNumber;
const int MDBasicInfo::kOptionBuyQtyUnitFieldNumber;
const int MDBasicInfo::kOptionSellQtyUnitFieldNumber;
const int MDBasicInfo::kOptionLastSellMarginFieldNumber;
const int MDBasicInfo::kOptionSellMarginFieldNumber;
const int MDBasicInfo::kOptionMarketMakerFlagFieldNumber;
const int MDBasicInfo::kOptionCombinationStrategyFieldNumber;
const int MDBasicInfo::kDeliveryYearFieldNumber;
const int MDBasicInfo::kDeliveryMonthFieldNumber;
const int MDBasicInfo::kInstrumentIDFieldNumber;
const int MDBasicInfo::kInstrumentNameFieldNumber;
const int MDBasicInfo::kExchangeInstIDFieldNumber;
const int MDBasicInfo::kProductIDFieldNumber;
const int MDBasicInfo::kMaxMarketOrderVolumeFieldNumber;
const int MDBasicInfo::kMinMarketOrderVolumeFieldNumber;
const int MDBasicInfo::kMaxLimitOrderVolumeFieldNumber;
const int MDBasicInfo::kMinLimitOrderVolumeFieldNumber;
const int MDBasicInfo::kVolumeMultipleFieldNumber;
const int MDBasicInfo::kCreateDateFieldNumber;
const int MDBasicInfo::kExpireDateFieldNumber;
const int MDBasicInfo::kStartDelivDateFieldNumber;
const int MDBasicInfo::kEndDelivDateFieldNumber;
const int MDBasicInfo::kPositionTypeFieldNumber;
const int MDBasicInfo::kLongMarginRatioFieldNumber;
const int MDBasicInfo::kShortMarginRatioFieldNumber;
const int MDBasicInfo::kMaxMarginSideAlgorithmFieldNumber;
const int MDBasicInfo::kStrikePriceFieldNumber;
const int MDBasicInfo::kPreOpenInterestFieldNumber;
const int MDBasicInfo::kFormerSymbolFieldNumber;
const int MDBasicInfo::kDelistDateFieldNumber;
const int MDBasicInfo::kBuyQtyUnitFieldNumber;
const int MDBasicInfo::kSellQtyUnitFieldNumber;
const int MDBasicInfo::kBuyQtyUpperLimitFieldNumber;
const int MDBasicInfo::kSellQtyUpperLimitFieldNumber;
const int MDBasicInfo::kBuyQtyLowerLimitFieldNumber;
const int MDBasicInfo::kSellQtyLowerLimitFieldNumber;
const int MDBasicInfo::kVCMFlagFieldNumber;
const int MDBasicInfo::kCASFlagFieldNumber;
const int MDBasicInfo::kPOSFlagFieldNumber;
const int MDBasicInfo::kPOSUpperLimitPxFieldNumber;
const int MDBasicInfo::kPOSLowerLimitPxFieldNumber;
const int MDBasicInfo::kBaseContractIDFieldNumber;
const int MDBasicInfo::kConstantParamsFieldNumber;
const int MDBasicInfo::kDataMultiplePowerOf10FieldNumber;
const int MDBasicInfo::kInterestAccrualDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDBasicInfo::MDBasicInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDBasicInfo)
}
MDBasicInfo::MDBasicInfo(const MDBasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      constantparams_(from.constantparams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.securityid().size() > 0) {
    securityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securityid_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  chispelling_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.chispelling().size() > 0) {
    chispelling_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chispelling_);
  }
  englishname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.englishname().size() > 0) {
    englishname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.englishname_);
  }
  securitysubtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.securitysubtype().size() > 0) {
    securitysubtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securitysubtype_);
  }
  listdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.listdate().size() > 0) {
    listdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listdate_);
  }
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.currency().size() > 0) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  tradingphasecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tradingphasecode().size() > 0) {
    tradingphasecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  exchangedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exchangedate().size() > 0) {
    exchangedate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangedate_);
  }
  exchangesymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exchangesymbol().size() > 0) {
    exchangesymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangesymbol_);
  }
  hkspreadtablecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hkspreadtablecode().size() > 0) {
    hkspreadtablecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hkspreadtablecode_);
  }
  optioncontractid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optioncontractid().size() > 0) {
    optioncontractid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncontractid_);
  }
  optioncontractsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optioncontractsymbol().size() > 0) {
    optioncontractsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncontractsymbol_);
  }
  optionunderlyingsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionunderlyingsecurityid().size() > 0) {
    optionunderlyingsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionunderlyingsecurityid_);
  }
  optionunderlyingsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionunderlyingsymbol().size() > 0) {
    optionunderlyingsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionunderlyingsymbol_);
  }
  optionunderlyingtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionunderlyingtype().size() > 0) {
    optionunderlyingtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionunderlyingtype_);
  }
  optionoptiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionoptiontype().size() > 0) {
    optionoptiontype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionoptiontype_);
  }
  optioncallorput_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optioncallorput().size() > 0) {
    optioncallorput_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncallorput_);
  }
  optionstartdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionstartdate().size() > 0) {
    optionstartdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionstartdate_);
  }
  optionenddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionenddate().size() > 0) {
    optionenddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionenddate_);
  }
  optionexercisedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionexercisedate().size() > 0) {
    optionexercisedate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionexercisedate_);
  }
  optiondeliverydate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optiondeliverydate().size() > 0) {
    optiondeliverydate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optiondeliverydate_);
  }
  optionexpiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionexpiredate().size() > 0) {
    optionexpiredate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionexpiredate_);
  }
  optionupdateversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionupdateversion().size() > 0) {
    optionupdateversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionupdateversion_);
  }
  optionpricelimittype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionpricelimittype().size() > 0) {
    optionpricelimittype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionpricelimittype_);
  }
  optionsecuritystatusflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionsecuritystatusflag().size() > 0) {
    optionsecuritystatusflag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionsecuritystatusflag_);
  }
  optioncarryinterestdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optioncarryinterestdate().size() > 0) {
    optioncarryinterestdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncarryinterestdate_);
  }
  optionearlyexpiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionearlyexpiredate().size() > 0) {
    optionearlyexpiredate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionearlyexpiredate_);
  }
  optionstrategysecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionstrategysecurityid().size() > 0) {
    optionstrategysecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionstrategysecurityid_);
  }
  fitradeproducttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fitradeproducttype().size() > 0) {
    fitradeproducttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fitradeproducttype_);
  }
  fisecurityproperty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fisecurityproperty().size() > 0) {
    fisecurityproperty_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fisecurityproperty_);
  }
  fisecuritystatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fisecuritystatus().size() > 0) {
    fisecuritystatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fisecuritystatus_);
  }
  fipledgedsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fipledgedsecurityid().size() > 0) {
    fipledgedsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fipledgedsecurityid_);
  }
  fiopentime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fiopentime().size() > 0) {
    fiopentime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiopentime_);
  }
  ficlosetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ficlosetime().size() > 0) {
    ficlosetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ficlosetime_);
  }
  fiissuemode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fiissuemode().size() > 0) {
    fiissuemode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiissuemode_);
  }
  fiinteresttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fiinteresttype().size() > 0) {
    fiinteresttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiinteresttype_);
  }
  fiinterestfrequency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fiinterestfrequency().size() > 0) {
    fiinterestfrequency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiinterestfrequency_);
  }
  fiissuestartdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fiissuestartdate().size() > 0) {
    fiissuestartdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiissuestartdate_);
  }
  fiissueenddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fiissueenddate().size() > 0) {
    fiissueenddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiissueenddate_);
  }
  filistdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filistdate().size() > 0) {
    filistdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filistdate_);
  }
  fiexpiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fiexpiredate().size() > 0) {
    fiexpiredate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiexpiredate_);
  }
  finationaldebttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.finationaldebttype().size() > 0) {
    finationaldebttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.finationaldebttype_);
  }
  fiissuemethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fiissuemethod().size() > 0) {
    fiissuemethod_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiissuemethod_);
  }
  optionlisttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionlisttype().size() > 0) {
    optionlisttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionlisttype_);
  }
  optiondeliverytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optiondeliverytype().size() > 0) {
    optiondeliverytype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optiondeliverytype_);
  }
  optionmarketmakerflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optionmarketmakerflag().size() > 0) {
    optionmarketmakerflag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionmarketmakerflag_);
  }
  optioncombinationstrategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.optioncombinationstrategy().size() > 0) {
    optioncombinationstrategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncombinationstrategy_);
  }
  deliveryyear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.deliveryyear().size() > 0) {
    deliveryyear_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deliveryyear_);
  }
  deliverymonth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.deliverymonth().size() > 0) {
    deliverymonth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deliverymonth_);
  }
  instrumentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentid().size() > 0) {
    instrumentid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  instrumentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentname().size() > 0) {
    instrumentname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrumentname_);
  }
  exchangeinstid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeinstid().size() > 0) {
    exchangeinstid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
  }
  productid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.productid().size() > 0) {
    productid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  createdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.createdate().size() > 0) {
    createdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  expiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.expiredate().size() > 0) {
    expiredate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expiredate_);
  }
  startdelivdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.startdelivdate().size() > 0) {
    startdelivdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.startdelivdate_);
  }
  enddelivdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.enddelivdate().size() > 0) {
    enddelivdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enddelivdate_);
  }
  positiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.positiontype().size() > 0) {
    positiontype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.positiontype_);
  }
  maxmarginsidealgorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.maxmarginsidealgorithm().size() > 0) {
    maxmarginsidealgorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maxmarginsidealgorithm_);
  }
  formersymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.formersymbol().size() > 0) {
    formersymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formersymbol_);
  }
  delistdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.delistdate().size() > 0) {
    delistdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delistdate_);
  }
  basecontractid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.basecontractid().size() > 0) {
    basecontractid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.basecontractid_);
  }
  interestaccrualdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.interestaccrualdate().size() > 0) {
    interestaccrualdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interestaccrualdate_);
  }
  ::memcpy(&securityidsource_, &from.securityidsource_,
    static_cast<size_t>(reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&securityidsource_)) + sizeof(datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDBasicInfo)
}

void MDBasicInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDBasicInfo_MDBasicInfo_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chispelling_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  englishname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitysubtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangesymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hkspreadtablecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncontractid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncontractsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionoptiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncallorput_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionstartdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionenddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionexercisedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optiondeliverydate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionexpiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionupdateversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionpricelimittype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionsecuritystatusflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncarryinterestdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionearlyexpiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionstrategysecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fitradeproducttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fisecurityproperty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fisecuritystatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fipledgedsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiopentime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ficlosetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuemode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiinteresttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiinterestfrequency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuestartdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissueenddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filistdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiexpiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  finationaldebttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuemethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionlisttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optiondeliverytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionmarketmakerflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncombinationstrategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deliveryyear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deliverymonth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxmarginsidealgorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formersymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delistdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basecontractid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interestaccrualdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&securityidsource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&securityidsource_)) + sizeof(datamultiplepowerof10_));
}

MDBasicInfo::~MDBasicInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDBasicInfo)
  SharedDtor();
}

void MDBasicInfo::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chispelling_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  englishname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitysubtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangedate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangesymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hkspreadtablecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncontractid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncontractsymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingsymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionoptiontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncallorput_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionstartdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionenddate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionexercisedate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optiondeliverydate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionexpiredate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionupdateversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionpricelimittype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionsecuritystatusflag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncarryinterestdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionearlyexpiredate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionstrategysecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fitradeproducttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fisecurityproperty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fisecuritystatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fipledgedsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiopentime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ficlosetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuemode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiinteresttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiinterestfrequency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuestartdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissueenddate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filistdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiexpiredate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  finationaldebttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuemethod_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionlisttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optiondeliverytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionmarketmakerflag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncombinationstrategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deliveryyear_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deliverymonth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiredate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positiontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxmarginsidealgorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formersymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delistdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basecontractid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interestaccrualdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MDBasicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDBasicInfo& MDBasicInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDBasicInfo_MDBasicInfo_2eproto.base);
  return *internal_default_instance();
}


void MDBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDBasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constantparams_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chispelling_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  englishname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitysubtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangedate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangesymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hkspreadtablecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncontractid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncontractsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionunderlyingtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionoptiontype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncallorput_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionstartdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionenddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionexercisedate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optiondeliverydate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionexpiredate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionupdateversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionpricelimittype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionsecuritystatusflag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncarryinterestdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionearlyexpiredate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionstrategysecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fitradeproducttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fisecurityproperty_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fisecuritystatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fipledgedsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiopentime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ficlosetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuemode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiinteresttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiinterestfrequency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuestartdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissueenddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filistdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiexpiredate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  finationaldebttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fiissuemethod_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionlisttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optiondeliverytype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optionmarketmakerflag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optioncombinationstrategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deliveryyear_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deliverymonth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiredate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positiontype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxmarginsidealgorithm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formersymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delistdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basecontractid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interestaccrualdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&securityidsource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&securityidsource_)) + sizeof(datamultiplepowerof10_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDBasicInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SecurityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_securityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.SecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_symbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.Symbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ChiSpelling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_chispelling(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EnglishName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_englishname(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.EnglishName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else goto handle_unusual;
        continue;
      // string SecuritySubType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_securitysubtype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ListDate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_listdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ListDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Currency = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_currency(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.Currency");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OutstandingShare = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          outstandingshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PublicFloatShareQuantity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          publicfloatsharequantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TradingPhaseCode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tradingphasecode(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PreClosePx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 MaxPx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          maxpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 MinPx = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          minpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LotSize = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          lotsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ShortSellFlag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          shortsellflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ExchangeDate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exchangedate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ExchangeSymbol = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exchangesymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double TickSize = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          ticksize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 LoanMarginIndicator = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          loanmarginindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PxAccuracy = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          pxaccuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 IPOProfitable = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ipoprofitable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DiffRightsIndicator = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          diffrightsindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string HKSpreadTableCode = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hkspreadtablecode(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double PreSettlePx = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          presettlepx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PreIOPV = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          preiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ShHkConnect = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          shhkconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SzHkConnect = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          szhkconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionContractID = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optioncontractid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionContractSymbol = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optioncontractsymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionUnderlyingSecurityID = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionunderlyingsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionUnderlyingSymbol = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionunderlyingsymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionUnderlyingType = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionunderlyingtype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionOptionType = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionoptiontype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionCallOrPut = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optioncallorput(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionContractMultiplierUnit = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          optioncontractmultiplierunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double OptionExercisePrice = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          optionexerciseprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string OptionStartDate = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionstartdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionEndDate = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionenddate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionExerciseDate = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionexercisedate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionDeliveryDate = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optiondeliverydate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionExpireDate = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionexpiredate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionUpdateVersion = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionupdateversion(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionTotalLongPosition = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          optiontotallongposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double OptionSecurityClosePx = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          optionsecurityclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OptionSettlPrice = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          optionsettlprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OptionUnderlyingClosePx = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          optionunderlyingclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string OptionPriceLimitType = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionpricelimittype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double OptionDailyPriceUpLimit = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          optiondailypriceuplimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OptionDailyPriceDownLimit = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          optiondailypricedownlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OptionMarginUnit = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          optionmarginunit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OptionMarginRatioParam1 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          optionmarginratioparam1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OptionMarginRatioParam2 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          optionmarginratioparam2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 OptionRoundLot = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          optionroundlot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionLmtOrdMinFloor = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          optionlmtordminfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionLmtOrdMaxFloor = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          optionlmtordmaxfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionMktOrdMinFloor = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          optionmktordminfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionMktOrdMaxFloor = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          optionmktordmaxfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double OptionTickSize = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          optionticksize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string OptionSecurityStatusFlag = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionsecuritystatusflag(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionCarryInterestDate = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optioncarryinterestdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionEarlyExpireDate = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionearlyexpiredate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionStrategySecurityID = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionstrategysecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FITradeProductType = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fitradeproducttype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FISecurityProperty = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fisecurityproperty(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FISecurityStatus = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fisecuritystatus(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FIPledgedSecurityID = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fipledgedsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FIOpenTime = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fiopentime(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FICloseTime = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ficlosetime(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FIIssueMode = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fiissuemode(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double FIFaceAmount = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          fifaceamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FIIssuePrice = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          fiissueprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string FIInterestType = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fiinteresttype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FIInterestFrequency = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fiinterestfrequency(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double FIGuaranteedInterestRate = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          figuaranteedinterestrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FIBaseInterestRate = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          fibaseinterestrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FIQuotedMargin = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          fiquotedmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 FITimeLimit = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          fitimelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double FITotalIssuance = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          fitotalissuance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string FIIssueStartDate = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fiissuestartdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FIIssueEndDate = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fiissueenddate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FIListDate = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filistdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIListDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FIExpireDate = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fiexpiredate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FINationalDebtType = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_finationaldebttype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FIIssueMethod = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fiissuemethod(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool FICrossMarket = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ficrossmarket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool FIShortSellFlag = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fishortsellflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double FITotalShortSellQuota = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          fitotalshortsellquota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FIDealerShortSellQuota = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          fidealershortsellquota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FIPreClosePx = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          fipreclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FIPreWeightedPx = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          fipreweightedpx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string OptionListType = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionlisttype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionListType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionDeliveryType = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optiondeliverytype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OptionAdjustTimes = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          optionadjusttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionContractPosition = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          optioncontractposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionBuyQtyUpperLimit = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          optionbuyqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionSellQtyUpperLimit = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          optionsellqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          optionmarketorderbuyqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionMarketOrderSellQtyUpperLimit = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          optionmarketordersellqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          optionquoteorderbuyqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          optionquoteordersellqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionBuyQtyUnit = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          optionbuyqtyunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OptionSellQtyUnit = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          optionsellqtyunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double OptionLastSellMargin = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          optionlastsellmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OptionSellMargin = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          optionsellmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string OptionMarketMakerFlag = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optionmarketmakerflag(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OptionCombinationStrategy = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_optioncombinationstrategy(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DeliveryYear = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deliveryyear(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DeliveryMonth = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deliverymonth(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstrumentID = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_instrumentid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstrumentName = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_instrumentname(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ExchangeInstID = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exchangeinstid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ProductID = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_productid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ProductID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 MaxMarketOrderVolume = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxmarketordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 MinMarketOrderVolume = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          minmarketordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 MaxLimitOrderVolume = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxlimitordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 MinLimitOrderVolume = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          minlimitordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 VolumeMultiple = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          volumemultiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CreateDate = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_createdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.CreateDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ExpireDate = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_expiredate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string StartDelivDate = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_startdelivdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EndDelivDate = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_enddelivdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PositionType = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_positiontype(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.PositionType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double LongMarginRatio = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          longmarginratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ShortMarginRatio = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          shortmarginratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string MaxMarginSideAlgorithm = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_maxmarginsidealgorithm(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double StrikePrice = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          strikeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PreOpenInterest = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          preopeninterest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string FormerSymbol = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_formersymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DelistDate = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_delistdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.DelistDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 BuyQtyUnit = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          buyqtyunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 SellQtyUnit = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          sellqtyunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 BuyQtyUpperLimit = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buyqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 SellQtyUpperLimit = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sellqtyupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 BuyQtyLowerLimit = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          buyqtylowerlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 SellQtyLowerLimit = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sellqtylowerlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 VCMFlag = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vcmflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CASFlag = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          casflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 POSFlag = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          posflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double POSUpperLimitPx = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          posupperlimitpx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double POSLowerLimitPx = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          poslowerlimitpx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string BaseContractID = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_basecontractid(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_constantparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 2778);
        } else goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InterestAccrualDate = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_interestaccrualdate(), ptr, ctx, "com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDBasicInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDBasicInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SecurityID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_securityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->securityid().data(), static_cast<int>(this->securityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.SecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ChiSpelling = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_chispelling()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->chispelling().data(), static_cast<int>(this->chispelling().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string EnglishName = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_englishname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->englishname().data(), static_cast<int>(this->englishname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.EnglishName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SecuritySubType = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_securitysubtype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->securitysubtype().data(), static_cast<int>(this->securitysubtype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ListDate = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_listdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->listdate().data(), static_cast<int>(this->listdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ListDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Currency = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->currency().data(), static_cast<int>(this->currency().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.Currency"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OutstandingShare = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &outstandingshare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PublicFloatShareQuantity = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &publicfloatsharequantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradingPhaseCode = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingphasecode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PreClosePx = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclosepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MaxPx = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MinPx = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &minpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LotSize = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lotsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShortSellFlag = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shortsellflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ExchangeDate = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangedate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exchangedate().data(), static_cast<int>(this->exchangedate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ExchangeSymbol = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangesymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TickSize = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (177 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ticksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LoanMarginIndicator = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &loanmarginindicator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PxAccuracy = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pxaccuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 IPOProfitable = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipoprofitable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DiffRightsIndicator = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &diffrightsindicator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HKSpreadTableCode = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hkspreadtablecode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hkspreadtablecode().data(), static_cast<int>(this->hkspreadtablecode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PreSettlePx = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (225 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PreIOPV = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (233 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preiopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ShHkConnect = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &shhkconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SzHkConnect = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &szhkconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionContractID = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optioncontractid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optioncontractid().data(), static_cast<int>(this->optioncontractid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionContractSymbol = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optioncontractsymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optioncontractsymbol().data(), static_cast<int>(this->optioncontractsymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionUnderlyingSecurityID = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionunderlyingsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionunderlyingsecurityid().data(), static_cast<int>(this->optionunderlyingsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionUnderlyingSymbol = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionunderlyingsymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionunderlyingsymbol().data(), static_cast<int>(this->optionunderlyingsymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionUnderlyingType = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionunderlyingtype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionunderlyingtype().data(), static_cast<int>(this->optionunderlyingtype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionOptionType = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionoptiontype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionoptiontype().data(), static_cast<int>(this->optionoptiontype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionCallOrPut = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optioncallorput()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optioncallorput().data(), static_cast<int>(this->optioncallorput().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionContractMultiplierUnit = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (376 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optioncontractmultiplierunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionExercisePrice = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (385 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionexerciseprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionStartDate = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionstartdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionstartdate().data(), static_cast<int>(this->optionstartdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionEndDate = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionenddate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionenddate().data(), static_cast<int>(this->optionenddate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionExerciseDate = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionexercisedate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionexercisedate().data(), static_cast<int>(this->optionexercisedate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionDeliveryDate = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optiondeliverydate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optiondeliverydate().data(), static_cast<int>(this->optiondeliverydate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionExpireDate = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionexpiredate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionexpiredate().data(), static_cast<int>(this->optionexpiredate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionUpdateVersion = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionupdateversion()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionupdateversion().data(), static_cast<int>(this->optionupdateversion().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionTotalLongPosition = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (440 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optiontotallongposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionSecurityClosePx = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (449 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionsecurityclosepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionSettlPrice = 57;
      case 57: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (457 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionsettlprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionUnderlyingClosePx = 58;
      case 58: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (465 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionunderlyingclosepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionPriceLimitType = 59;
      case 59: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (474 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionpricelimittype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionpricelimittype().data(), static_cast<int>(this->optionpricelimittype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionDailyPriceUpLimit = 60;
      case 60: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (481 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optiondailypriceuplimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionDailyPriceDownLimit = 61;
      case 61: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (489 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optiondailypricedownlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionMarginUnit = 62;
      case 62: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (497 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionmarginunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionMarginRatioParam1 = 63;
      case 63: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (505 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionmarginratioparam1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionMarginRatioParam2 = 64;
      case 64: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (513 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionmarginratioparam2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionRoundLot = 65;
      case 65: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (520 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionroundlot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionLmtOrdMinFloor = 66;
      case 66: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (528 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionlmtordminfloor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionLmtOrdMaxFloor = 67;
      case 67: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (536 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionlmtordmaxfloor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionMktOrdMinFloor = 68;
      case 68: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (544 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionmktordminfloor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionMktOrdMaxFloor = 69;
      case 69: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (552 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionmktordmaxfloor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionTickSize = 70;
      case 70: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (561 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionticksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionSecurityStatusFlag = 71;
      case 71: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (570 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionsecuritystatusflag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionsecuritystatusflag().data(), static_cast<int>(this->optionsecuritystatusflag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionCarryInterestDate = 72;
      case 72: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optioncarryinterestdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optioncarryinterestdate().data(), static_cast<int>(this->optioncarryinterestdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionEarlyExpireDate = 73;
      case 73: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionearlyexpiredate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionearlyexpiredate().data(), static_cast<int>(this->optionearlyexpiredate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionStrategySecurityID = 74;
      case 74: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionstrategysecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionstrategysecurityid().data(), static_cast<int>(this->optionstrategysecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FITradeProductType = 80;
      case 80: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fitradeproducttype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fitradeproducttype().data(), static_cast<int>(this->fitradeproducttype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FISecurityProperty = 81;
      case 81: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fisecurityproperty()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fisecurityproperty().data(), static_cast<int>(this->fisecurityproperty().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FISecurityStatus = 82;
      case 82: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fisecuritystatus()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fisecuritystatus().data(), static_cast<int>(this->fisecuritystatus().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIPledgedSecurityID = 83;
      case 83: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fipledgedsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fipledgedsecurityid().data(), static_cast<int>(this->fipledgedsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIOpenTime = 84;
      case 84: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fiopentime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fiopentime().data(), static_cast<int>(this->fiopentime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FICloseTime = 85;
      case 85: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ficlosetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ficlosetime().data(), static_cast<int>(this->ficlosetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIIssueMode = 86;
      case 86: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fiissuemode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fiissuemode().data(), static_cast<int>(this->fiissuemode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FIFaceAmount = 87;
      case 87: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (697 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fifaceamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FIIssuePrice = 88;
      case 88: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (705 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fiissueprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIInterestType = 89;
      case 89: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (714 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fiinteresttype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fiinteresttype().data(), static_cast<int>(this->fiinteresttype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIInterestFrequency = 90;
      case 90: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fiinterestfrequency()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fiinterestfrequency().data(), static_cast<int>(this->fiinterestfrequency().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FIGuaranteedInterestRate = 91;
      case 91: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (729 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &figuaranteedinterestrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FIBaseInterestRate = 92;
      case 92: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (737 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fibaseinterestrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FIQuotedMargin = 93;
      case 93: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (745 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fiquotedmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FITimeLimit = 94;
      case 94: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (752 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fitimelimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FITotalIssuance = 95;
      case 95: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (761 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fitotalissuance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIIssueStartDate = 96;
      case 96: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (770 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fiissuestartdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fiissuestartdate().data(), static_cast<int>(this->fiissuestartdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIIssueEndDate = 97;
      case 97: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (778 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fiissueenddate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fiissueenddate().data(), static_cast<int>(this->fiissueenddate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIListDate = 98;
      case 98: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (786 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filistdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filistdate().data(), static_cast<int>(this->filistdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIListDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIExpireDate = 99;
      case 99: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (794 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fiexpiredate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fiexpiredate().data(), static_cast<int>(this->fiexpiredate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FINationalDebtType = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_finationaldebttype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->finationaldebttype().data(), static_cast<int>(this->finationaldebttype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FIIssueMethod = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fiissuemethod()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fiissuemethod().data(), static_cast<int>(this->fiissuemethod().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool FICrossMarket = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (816 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ficrossmarket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool FIShortSellFlag = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (824 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fishortsellflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FITotalShortSellQuota = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (833 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fitotalshortsellquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FIDealerShortSellQuota = 105;
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (841 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fidealershortsellquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FIPreClosePx = 106;
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (849 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fipreclosepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FIPreWeightedPx = 107;
      case 107: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (857 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fipreweightedpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionListType = 110;
      case 110: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionlisttype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionlisttype().data(), static_cast<int>(this->optionlisttype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionListType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionDeliveryType = 111;
      case 111: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (890 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optiondeliverytype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optiondeliverytype().data(), static_cast<int>(this->optiondeliverytype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 OptionAdjustTimes = 112;
      case 112: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (896 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &optionadjusttimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionContractPosition = 113;
      case 113: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (904 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optioncontractposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionBuyQtyUpperLimit = 114;
      case 114: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (912 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionbuyqtyupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionSellQtyUpperLimit = 115;
      case 115: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (920 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionsellqtyupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
      case 116: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (928 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionmarketorderbuyqtyupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionMarketOrderSellQtyUpperLimit = 117;
      case 117: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (936 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionmarketordersellqtyupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
      case 118: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (944 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionquoteorderbuyqtyupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
      case 119: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (952 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionquoteordersellqtyupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionBuyQtyUnit = 120;
      case 120: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (960 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionbuyqtyunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OptionSellQtyUnit = 121;
      case 121: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (968 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optionsellqtyunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionLastSellMargin = 122;
      case 122: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (977 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionlastsellmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionSellMargin = 123;
      case 123: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (985 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionsellmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionMarketMakerFlag = 124;
      case 124: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (994 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optionmarketmakerflag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optionmarketmakerflag().data(), static_cast<int>(this->optionmarketmakerflag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OptionCombinationStrategy = 125;
      case 125: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_optioncombinationstrategy()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optioncombinationstrategy().data(), static_cast<int>(this->optioncombinationstrategy().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DeliveryYear = 126;
      case 126: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deliveryyear()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deliveryyear().data(), static_cast<int>(this->deliveryyear().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DeliveryMonth = 127;
      case 127: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1018 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deliverymonth()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deliverymonth().data(), static_cast<int>(this->deliverymonth().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InstrumentID = 128;
      case 128: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InstrumentName = 129;
      case 129: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1034 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentname().data(), static_cast<int>(this->instrumentname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ExchangeInstID = 130;
      case 130: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1042 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeinstid().data(), static_cast<int>(this->exchangeinstid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ProductID = 131;
      case 131: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1050 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->productid().data(), static_cast<int>(this->productid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ProductID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MaxMarketOrderVolume = 132;
      case 132: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1056 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxmarketordervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MinMarketOrderVolume = 133;
      case 133: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1064 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &minmarketordervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MaxLimitOrderVolume = 134;
      case 134: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1072 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxlimitordervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MinLimitOrderVolume = 135;
      case 135: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1080 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &minlimitordervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 VolumeMultiple = 136;
      case 136: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1088 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &volumemultiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CreateDate = 137;
      case 137: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1098 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->createdate().data(), static_cast<int>(this->createdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.CreateDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ExpireDate = 138;
      case 138: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_expiredate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->expiredate().data(), static_cast<int>(this->expiredate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string StartDelivDate = 139;
      case 139: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_startdelivdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->startdelivdate().data(), static_cast<int>(this->startdelivdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string EndDelivDate = 140;
      case 140: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_enddelivdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->enddelivdate().data(), static_cast<int>(this->enddelivdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PositionType = 141;
      case 141: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_positiontype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->positiontype().data(), static_cast<int>(this->positiontype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.PositionType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LongMarginRatio = 142;
      case 142: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1137 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longmarginratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ShortMarginRatio = 143;
      case 143: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1145 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortmarginratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string MaxMarginSideAlgorithm = 144;
      case 144: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_maxmarginsidealgorithm()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->maxmarginsidealgorithm().data(), static_cast<int>(this->maxmarginsidealgorithm().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double StrikePrice = 145;
      case 145: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1161 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PreOpenInterest = 146;
      case 146: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1169 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preopeninterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FormerSymbol = 147;
      case 147: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_formersymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->formersymbol().data(), static_cast<int>(this->formersymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DelistDate = 148;
      case 148: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_delistdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->delistdate().data(), static_cast<int>(this->delistdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.DelistDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BuyQtyUnit = 149;
      case 149: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyqtyunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SellQtyUnit = 150;
      case 150: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sellqtyunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BuyQtyUpperLimit = 161;
      case 161: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1288 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyqtyupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SellQtyUpperLimit = 162;
      case 162: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1296 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sellqtyupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BuyQtyLowerLimit = 163;
      case 163: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1304 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyqtylowerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SellQtyLowerLimit = 164;
      case 164: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1312 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sellqtylowerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 VCMFlag = 165;
      case 165: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1320 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcmflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CASFlag = 166;
      case 166: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1328 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &casflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 POSFlag = 167;
      case 167: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1336 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &posflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double POSUpperLimitPx = 168;
      case 168: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1345 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posupperlimitpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double POSLowerLimitPx = 169;
      case 169: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1353 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poslowerlimitpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string BaseContractID = 170;
      case 170: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_basecontractid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->basecontractid().data(), static_cast<int>(this->basecontractid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
      case 171: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_constantparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataMultiplePowerOf10 = 172;
      case 172: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1376 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InterestAccrualDate = 173;
      case 173: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_interestaccrualdate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->interestaccrualdate().data(), static_cast<int>(this->interestaccrualdate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDBasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDBasicInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDBasicInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDBasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securityid().data(), static_cast<int>(this->securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.SecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->securityid(), output);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.Symbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // string ChiSpelling = 4;
  if (this->chispelling().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->chispelling().data(), static_cast<int>(this->chispelling().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chispelling(), output);
  }

  // string EnglishName = 5;
  if (this->englishname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->englishname().data(), static_cast<int>(this->englishname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.EnglishName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->englishname(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->securityidsource(), output);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->securitytype(), output);
  }

  // string SecuritySubType = 8;
  if (this->securitysubtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securitysubtype().data(), static_cast<int>(this->securitysubtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->securitysubtype(), output);
  }

  // string ListDate = 9;
  if (this->listdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->listdate().data(), static_cast<int>(this->listdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ListDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->listdate(), output);
  }

  // string Currency = 10;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.Currency");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->currency(), output);
  }

  // int64 OutstandingShare = 11;
  if (this->outstandingshare() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->outstandingshare(), output);
  }

  // int64 PublicFloatShareQuantity = 12;
  if (this->publicfloatsharequantity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->publicfloatsharequantity(), output);
  }

  // int32 MDDate = 13;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->mddate(), output);
  }

  // string TradingPhaseCode = 14;
  if (this->tradingphasecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->tradingphasecode(), output);
  }

  // int64 PreClosePx = 15;
  if (this->preclosepx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->preclosepx(), output);
  }

  // int64 MaxPx = 16;
  if (this->maxpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->maxpx(), output);
  }

  // int64 MinPx = 17;
  if (this->minpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->minpx(), output);
  }

  // int64 LotSize = 18;
  if (this->lotsize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->lotsize(), output);
  }

  // bool ShortSellFlag = 19;
  if (this->shortsellflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->shortsellflag(), output);
  }

  // string ExchangeDate = 20;
  if (this->exchangedate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangedate().data(), static_cast<int>(this->exchangedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->exchangedate(), output);
  }

  // string ExchangeSymbol = 21;
  if (this->exchangesymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->exchangesymbol(), output);
  }

  // double TickSize = 22;
  if (!(this->ticksize() <= 0 && this->ticksize() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(22, this->ticksize(), output);
  }

  // int32 LoanMarginIndicator = 23;
  if (this->loanmarginindicator() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(23, this->loanmarginindicator(), output);
  }

  // int32 PxAccuracy = 24;
  if (this->pxaccuracy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->pxaccuracy(), output);
  }

  // int32 IPOProfitable = 25;
  if (this->ipoprofitable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(25, this->ipoprofitable(), output);
  }

  // int32 DiffRightsIndicator = 26;
  if (this->diffrightsindicator() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(26, this->diffrightsindicator(), output);
  }

  // string HKSpreadTableCode = 27;
  if (this->hkspreadtablecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hkspreadtablecode().data(), static_cast<int>(this->hkspreadtablecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->hkspreadtablecode(), output);
  }

  // double PreSettlePx = 28;
  if (!(this->presettlepx() <= 0 && this->presettlepx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(28, this->presettlepx(), output);
  }

  // double PreIOPV = 29;
  if (!(this->preiopv() <= 0 && this->preiopv() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(29, this->preiopv(), output);
  }

  // int32 ShHkConnect = 30;
  if (this->shhkconnect() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(30, this->shhkconnect(), output);
  }

  // int32 SzHkConnect = 31;
  if (this->szhkconnect() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(31, this->szhkconnect(), output);
  }

  // string OptionContractID = 40;
  if (this->optioncontractid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncontractid().data(), static_cast<int>(this->optioncontractid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->optioncontractid(), output);
  }

  // string OptionContractSymbol = 41;
  if (this->optioncontractsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncontractsymbol().data(), static_cast<int>(this->optioncontractsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->optioncontractsymbol(), output);
  }

  // string OptionUnderlyingSecurityID = 42;
  if (this->optionunderlyingsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionunderlyingsecurityid().data(), static_cast<int>(this->optionunderlyingsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->optionunderlyingsecurityid(), output);
  }

  // string OptionUnderlyingSymbol = 43;
  if (this->optionunderlyingsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionunderlyingsymbol().data(), static_cast<int>(this->optionunderlyingsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->optionunderlyingsymbol(), output);
  }

  // string OptionUnderlyingType = 44;
  if (this->optionunderlyingtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionunderlyingtype().data(), static_cast<int>(this->optionunderlyingtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->optionunderlyingtype(), output);
  }

  // string OptionOptionType = 45;
  if (this->optionoptiontype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionoptiontype().data(), static_cast<int>(this->optionoptiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->optionoptiontype(), output);
  }

  // string OptionCallOrPut = 46;
  if (this->optioncallorput().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncallorput().data(), static_cast<int>(this->optioncallorput().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->optioncallorput(), output);
  }

  // int64 OptionContractMultiplierUnit = 47;
  if (this->optioncontractmultiplierunit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(47, this->optioncontractmultiplierunit(), output);
  }

  // double OptionExercisePrice = 48;
  if (!(this->optionexerciseprice() <= 0 && this->optionexerciseprice() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(48, this->optionexerciseprice(), output);
  }

  // string OptionStartDate = 49;
  if (this->optionstartdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionstartdate().data(), static_cast<int>(this->optionstartdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      49, this->optionstartdate(), output);
  }

  // string OptionEndDate = 50;
  if (this->optionenddate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionenddate().data(), static_cast<int>(this->optionenddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->optionenddate(), output);
  }

  // string OptionExerciseDate = 51;
  if (this->optionexercisedate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionexercisedate().data(), static_cast<int>(this->optionexercisedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->optionexercisedate(), output);
  }

  // string OptionDeliveryDate = 52;
  if (this->optiondeliverydate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optiondeliverydate().data(), static_cast<int>(this->optiondeliverydate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->optiondeliverydate(), output);
  }

  // string OptionExpireDate = 53;
  if (this->optionexpiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionexpiredate().data(), static_cast<int>(this->optionexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      53, this->optionexpiredate(), output);
  }

  // string OptionUpdateVersion = 54;
  if (this->optionupdateversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionupdateversion().data(), static_cast<int>(this->optionupdateversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->optionupdateversion(), output);
  }

  // int64 OptionTotalLongPosition = 55;
  if (this->optiontotallongposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(55, this->optiontotallongposition(), output);
  }

  // double OptionSecurityClosePx = 56;
  if (!(this->optionsecurityclosepx() <= 0 && this->optionsecurityclosepx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(56, this->optionsecurityclosepx(), output);
  }

  // double OptionSettlPrice = 57;
  if (!(this->optionsettlprice() <= 0 && this->optionsettlprice() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(57, this->optionsettlprice(), output);
  }

  // double OptionUnderlyingClosePx = 58;
  if (!(this->optionunderlyingclosepx() <= 0 && this->optionunderlyingclosepx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(58, this->optionunderlyingclosepx(), output);
  }

  // string OptionPriceLimitType = 59;
  if (this->optionpricelimittype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionpricelimittype().data(), static_cast<int>(this->optionpricelimittype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->optionpricelimittype(), output);
  }

  // double OptionDailyPriceUpLimit = 60;
  if (!(this->optiondailypriceuplimit() <= 0 && this->optiondailypriceuplimit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(60, this->optiondailypriceuplimit(), output);
  }

  // double OptionDailyPriceDownLimit = 61;
  if (!(this->optiondailypricedownlimit() <= 0 && this->optiondailypricedownlimit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(61, this->optiondailypricedownlimit(), output);
  }

  // double OptionMarginUnit = 62;
  if (!(this->optionmarginunit() <= 0 && this->optionmarginunit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(62, this->optionmarginunit(), output);
  }

  // double OptionMarginRatioParam1 = 63;
  if (!(this->optionmarginratioparam1() <= 0 && this->optionmarginratioparam1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(63, this->optionmarginratioparam1(), output);
  }

  // double OptionMarginRatioParam2 = 64;
  if (!(this->optionmarginratioparam2() <= 0 && this->optionmarginratioparam2() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(64, this->optionmarginratioparam2(), output);
  }

  // int64 OptionRoundLot = 65;
  if (this->optionroundlot() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(65, this->optionroundlot(), output);
  }

  // int64 OptionLmtOrdMinFloor = 66;
  if (this->optionlmtordminfloor() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(66, this->optionlmtordminfloor(), output);
  }

  // int64 OptionLmtOrdMaxFloor = 67;
  if (this->optionlmtordmaxfloor() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(67, this->optionlmtordmaxfloor(), output);
  }

  // int64 OptionMktOrdMinFloor = 68;
  if (this->optionmktordminfloor() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(68, this->optionmktordminfloor(), output);
  }

  // int64 OptionMktOrdMaxFloor = 69;
  if (this->optionmktordmaxfloor() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(69, this->optionmktordmaxfloor(), output);
  }

  // double OptionTickSize = 70;
  if (!(this->optionticksize() <= 0 && this->optionticksize() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(70, this->optionticksize(), output);
  }

  // string OptionSecurityStatusFlag = 71;
  if (this->optionsecuritystatusflag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionsecuritystatusflag().data(), static_cast<int>(this->optionsecuritystatusflag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      71, this->optionsecuritystatusflag(), output);
  }

  // string OptionCarryInterestDate = 72;
  if (this->optioncarryinterestdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncarryinterestdate().data(), static_cast<int>(this->optioncarryinterestdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      72, this->optioncarryinterestdate(), output);
  }

  // string OptionEarlyExpireDate = 73;
  if (this->optionearlyexpiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionearlyexpiredate().data(), static_cast<int>(this->optionearlyexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      73, this->optionearlyexpiredate(), output);
  }

  // string OptionStrategySecurityID = 74;
  if (this->optionstrategysecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionstrategysecurityid().data(), static_cast<int>(this->optionstrategysecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      74, this->optionstrategysecurityid(), output);
  }

  // string FITradeProductType = 80;
  if (this->fitradeproducttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fitradeproducttype().data(), static_cast<int>(this->fitradeproducttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->fitradeproducttype(), output);
  }

  // string FISecurityProperty = 81;
  if (this->fisecurityproperty().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fisecurityproperty().data(), static_cast<int>(this->fisecurityproperty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      81, this->fisecurityproperty(), output);
  }

  // string FISecurityStatus = 82;
  if (this->fisecuritystatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fisecuritystatus().data(), static_cast<int>(this->fisecuritystatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      82, this->fisecuritystatus(), output);
  }

  // string FIPledgedSecurityID = 83;
  if (this->fipledgedsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fipledgedsecurityid().data(), static_cast<int>(this->fipledgedsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      83, this->fipledgedsecurityid(), output);
  }

  // string FIOpenTime = 84;
  if (this->fiopentime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiopentime().data(), static_cast<int>(this->fiopentime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      84, this->fiopentime(), output);
  }

  // string FICloseTime = 85;
  if (this->ficlosetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ficlosetime().data(), static_cast<int>(this->ficlosetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      85, this->ficlosetime(), output);
  }

  // string FIIssueMode = 86;
  if (this->fiissuemode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiissuemode().data(), static_cast<int>(this->fiissuemode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      86, this->fiissuemode(), output);
  }

  // double FIFaceAmount = 87;
  if (!(this->fifaceamount() <= 0 && this->fifaceamount() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(87, this->fifaceamount(), output);
  }

  // double FIIssuePrice = 88;
  if (!(this->fiissueprice() <= 0 && this->fiissueprice() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(88, this->fiissueprice(), output);
  }

  // string FIInterestType = 89;
  if (this->fiinteresttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiinteresttype().data(), static_cast<int>(this->fiinteresttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      89, this->fiinteresttype(), output);
  }

  // string FIInterestFrequency = 90;
  if (this->fiinterestfrequency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiinterestfrequency().data(), static_cast<int>(this->fiinterestfrequency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      90, this->fiinterestfrequency(), output);
  }

  // double FIGuaranteedInterestRate = 91;
  if (!(this->figuaranteedinterestrate() <= 0 && this->figuaranteedinterestrate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(91, this->figuaranteedinterestrate(), output);
  }

  // double FIBaseInterestRate = 92;
  if (!(this->fibaseinterestrate() <= 0 && this->fibaseinterestrate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(92, this->fibaseinterestrate(), output);
  }

  // double FIQuotedMargin = 93;
  if (!(this->fiquotedmargin() <= 0 && this->fiquotedmargin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(93, this->fiquotedmargin(), output);
  }

  // int32 FITimeLimit = 94;
  if (this->fitimelimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(94, this->fitimelimit(), output);
  }

  // double FITotalIssuance = 95;
  if (!(this->fitotalissuance() <= 0 && this->fitotalissuance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(95, this->fitotalissuance(), output);
  }

  // string FIIssueStartDate = 96;
  if (this->fiissuestartdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiissuestartdate().data(), static_cast<int>(this->fiissuestartdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      96, this->fiissuestartdate(), output);
  }

  // string FIIssueEndDate = 97;
  if (this->fiissueenddate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiissueenddate().data(), static_cast<int>(this->fiissueenddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      97, this->fiissueenddate(), output);
  }

  // string FIListDate = 98;
  if (this->filistdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filistdate().data(), static_cast<int>(this->filistdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIListDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      98, this->filistdate(), output);
  }

  // string FIExpireDate = 99;
  if (this->fiexpiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiexpiredate().data(), static_cast<int>(this->fiexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      99, this->fiexpiredate(), output);
  }

  // string FINationalDebtType = 100;
  if (this->finationaldebttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->finationaldebttype().data(), static_cast<int>(this->finationaldebttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->finationaldebttype(), output);
  }

  // string FIIssueMethod = 101;
  if (this->fiissuemethod().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiissuemethod().data(), static_cast<int>(this->fiissuemethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->fiissuemethod(), output);
  }

  // bool FICrossMarket = 102;
  if (this->ficrossmarket() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(102, this->ficrossmarket(), output);
  }

  // bool FIShortSellFlag = 103;
  if (this->fishortsellflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(103, this->fishortsellflag(), output);
  }

  // double FITotalShortSellQuota = 104;
  if (!(this->fitotalshortsellquota() <= 0 && this->fitotalshortsellquota() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(104, this->fitotalshortsellquota(), output);
  }

  // double FIDealerShortSellQuota = 105;
  if (!(this->fidealershortsellquota() <= 0 && this->fidealershortsellquota() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(105, this->fidealershortsellquota(), output);
  }

  // double FIPreClosePx = 106;
  if (!(this->fipreclosepx() <= 0 && this->fipreclosepx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(106, this->fipreclosepx(), output);
  }

  // double FIPreWeightedPx = 107;
  if (!(this->fipreweightedpx() <= 0 && this->fipreweightedpx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(107, this->fipreweightedpx(), output);
  }

  // string OptionListType = 110;
  if (this->optionlisttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionlisttype().data(), static_cast<int>(this->optionlisttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionListType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      110, this->optionlisttype(), output);
  }

  // string OptionDeliveryType = 111;
  if (this->optiondeliverytype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optiondeliverytype().data(), static_cast<int>(this->optiondeliverytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      111, this->optiondeliverytype(), output);
  }

  // int32 OptionAdjustTimes = 112;
  if (this->optionadjusttimes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(112, this->optionadjusttimes(), output);
  }

  // int64 OptionContractPosition = 113;
  if (this->optioncontractposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(113, this->optioncontractposition(), output);
  }

  // int64 OptionBuyQtyUpperLimit = 114;
  if (this->optionbuyqtyupperlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(114, this->optionbuyqtyupperlimit(), output);
  }

  // int64 OptionSellQtyUpperLimit = 115;
  if (this->optionsellqtyupperlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(115, this->optionsellqtyupperlimit(), output);
  }

  // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
  if (this->optionmarketorderbuyqtyupperlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(116, this->optionmarketorderbuyqtyupperlimit(), output);
  }

  // int64 OptionMarketOrderSellQtyUpperLimit = 117;
  if (this->optionmarketordersellqtyupperlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(117, this->optionmarketordersellqtyupperlimit(), output);
  }

  // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
  if (this->optionquoteorderbuyqtyupperlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(118, this->optionquoteorderbuyqtyupperlimit(), output);
  }

  // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
  if (this->optionquoteordersellqtyupperlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(119, this->optionquoteordersellqtyupperlimit(), output);
  }

  // int64 OptionBuyQtyUnit = 120;
  if (this->optionbuyqtyunit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(120, this->optionbuyqtyunit(), output);
  }

  // int64 OptionSellQtyUnit = 121;
  if (this->optionsellqtyunit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(121, this->optionsellqtyunit(), output);
  }

  // double OptionLastSellMargin = 122;
  if (!(this->optionlastsellmargin() <= 0 && this->optionlastsellmargin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(122, this->optionlastsellmargin(), output);
  }

  // double OptionSellMargin = 123;
  if (!(this->optionsellmargin() <= 0 && this->optionsellmargin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(123, this->optionsellmargin(), output);
  }

  // string OptionMarketMakerFlag = 124;
  if (this->optionmarketmakerflag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionmarketmakerflag().data(), static_cast<int>(this->optionmarketmakerflag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      124, this->optionmarketmakerflag(), output);
  }

  // string OptionCombinationStrategy = 125;
  if (this->optioncombinationstrategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncombinationstrategy().data(), static_cast<int>(this->optioncombinationstrategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      125, this->optioncombinationstrategy(), output);
  }

  // string DeliveryYear = 126;
  if (this->deliveryyear().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deliveryyear().data(), static_cast<int>(this->deliveryyear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      126, this->deliveryyear(), output);
  }

  // string DeliveryMonth = 127;
  if (this->deliverymonth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deliverymonth().data(), static_cast<int>(this->deliverymonth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      127, this->deliverymonth(), output);
  }

  // string InstrumentID = 128;
  if (this->instrumentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      128, this->instrumentid(), output);
  }

  // string InstrumentName = 129;
  if (this->instrumentname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentname().data(), static_cast<int>(this->instrumentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      129, this->instrumentname(), output);
  }

  // string ExchangeInstID = 130;
  if (this->exchangeinstid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), static_cast<int>(this->exchangeinstid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      130, this->exchangeinstid(), output);
  }

  // string ProductID = 131;
  if (this->productid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ProductID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      131, this->productid(), output);
  }

  // int64 MaxMarketOrderVolume = 132;
  if (this->maxmarketordervolume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(132, this->maxmarketordervolume(), output);
  }

  // int64 MinMarketOrderVolume = 133;
  if (this->minmarketordervolume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(133, this->minmarketordervolume(), output);
  }

  // int64 MaxLimitOrderVolume = 134;
  if (this->maxlimitordervolume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(134, this->maxlimitordervolume(), output);
  }

  // int64 MinLimitOrderVolume = 135;
  if (this->minlimitordervolume() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(135, this->minlimitordervolume(), output);
  }

  // int64 VolumeMultiple = 136;
  if (this->volumemultiple() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(136, this->volumemultiple(), output);
  }

  // string CreateDate = 137;
  if (this->createdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.CreateDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      137, this->createdate(), output);
  }

  // string ExpireDate = 138;
  if (this->expiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->expiredate().data(), static_cast<int>(this->expiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      138, this->expiredate(), output);
  }

  // string StartDelivDate = 139;
  if (this->startdelivdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->startdelivdate().data(), static_cast<int>(this->startdelivdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      139, this->startdelivdate(), output);
  }

  // string EndDelivDate = 140;
  if (this->enddelivdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->enddelivdate().data(), static_cast<int>(this->enddelivdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      140, this->enddelivdate(), output);
  }

  // string PositionType = 141;
  if (this->positiontype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->positiontype().data(), static_cast<int>(this->positiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.PositionType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      141, this->positiontype(), output);
  }

  // double LongMarginRatio = 142;
  if (!(this->longmarginratio() <= 0 && this->longmarginratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(142, this->longmarginratio(), output);
  }

  // double ShortMarginRatio = 143;
  if (!(this->shortmarginratio() <= 0 && this->shortmarginratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(143, this->shortmarginratio(), output);
  }

  // string MaxMarginSideAlgorithm = 144;
  if (this->maxmarginsidealgorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->maxmarginsidealgorithm().data(), static_cast<int>(this->maxmarginsidealgorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      144, this->maxmarginsidealgorithm(), output);
  }

  // double StrikePrice = 145;
  if (!(this->strikeprice() <= 0 && this->strikeprice() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(145, this->strikeprice(), output);
  }

  // double PreOpenInterest = 146;
  if (!(this->preopeninterest() <= 0 && this->preopeninterest() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(146, this->preopeninterest(), output);
  }

  // string FormerSymbol = 147;
  if (this->formersymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->formersymbol().data(), static_cast<int>(this->formersymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      147, this->formersymbol(), output);
  }

  // string DelistDate = 148;
  if (this->delistdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->delistdate().data(), static_cast<int>(this->delistdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DelistDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      148, this->delistdate(), output);
  }

  // int64 BuyQtyUnit = 149;
  if (this->buyqtyunit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(149, this->buyqtyunit(), output);
  }

  // int64 SellQtyUnit = 150;
  if (this->sellqtyunit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(150, this->sellqtyunit(), output);
  }

  // int64 BuyQtyUpperLimit = 161;
  if (this->buyqtyupperlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(161, this->buyqtyupperlimit(), output);
  }

  // int64 SellQtyUpperLimit = 162;
  if (this->sellqtyupperlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(162, this->sellqtyupperlimit(), output);
  }

  // int64 BuyQtyLowerLimit = 163;
  if (this->buyqtylowerlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(163, this->buyqtylowerlimit(), output);
  }

  // int64 SellQtyLowerLimit = 164;
  if (this->sellqtylowerlimit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(164, this->sellqtylowerlimit(), output);
  }

  // int32 VCMFlag = 165;
  if (this->vcmflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(165, this->vcmflag(), output);
  }

  // int32 CASFlag = 166;
  if (this->casflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(166, this->casflag(), output);
  }

  // int32 POSFlag = 167;
  if (this->posflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(167, this->posflag(), output);
  }

  // double POSUpperLimitPx = 168;
  if (!(this->posupperlimitpx() <= 0 && this->posupperlimitpx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(168, this->posupperlimitpx(), output);
  }

  // double POSLowerLimitPx = 169;
  if (!(this->poslowerlimitpx() <= 0 && this->poslowerlimitpx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(169, this->poslowerlimitpx(), output);
  }

  // string BaseContractID = 170;
  if (this->basecontractid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->basecontractid().data(), static_cast<int>(this->basecontractid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      170, this->basecontractid(), output);
  }

  // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constantparams_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      171,
      this->constantparams(static_cast<int>(i)),
      output);
  }

  // int32 DataMultiplePowerOf10 = 172;
  if (this->datamultiplepowerof10() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(172, this->datamultiplepowerof10(), output);
  }

  // string InterestAccrualDate = 173;
  if (this->interestaccrualdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->interestaccrualdate().data(), static_cast<int>(this->interestaccrualdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      173, this->interestaccrualdate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDBasicInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDBasicInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDBasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securityid().data(), static_cast<int>(this->securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.SecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->securityid(), target);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.Symbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // string ChiSpelling = 4;
  if (this->chispelling().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->chispelling().data(), static_cast<int>(this->chispelling().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->chispelling(), target);
  }

  // string EnglishName = 5;
  if (this->englishname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->englishname().data(), static_cast<int>(this->englishname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.EnglishName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->englishname(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->securitytype(), target);
  }

  // string SecuritySubType = 8;
  if (this->securitysubtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securitysubtype().data(), static_cast<int>(this->securitysubtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->securitysubtype(), target);
  }

  // string ListDate = 9;
  if (this->listdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->listdate().data(), static_cast<int>(this->listdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ListDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->listdate(), target);
  }

  // string Currency = 10;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.Currency");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->currency(), target);
  }

  // int64 OutstandingShare = 11;
  if (this->outstandingshare() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->outstandingshare(), target);
  }

  // int64 PublicFloatShareQuantity = 12;
  if (this->publicfloatsharequantity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->publicfloatsharequantity(), target);
  }

  // int32 MDDate = 13;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->mddate(), target);
  }

  // string TradingPhaseCode = 14;
  if (this->tradingphasecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->tradingphasecode(), target);
  }

  // int64 PreClosePx = 15;
  if (this->preclosepx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->preclosepx(), target);
  }

  // int64 MaxPx = 16;
  if (this->maxpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->maxpx(), target);
  }

  // int64 MinPx = 17;
  if (this->minpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->minpx(), target);
  }

  // int64 LotSize = 18;
  if (this->lotsize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->lotsize(), target);
  }

  // bool ShortSellFlag = 19;
  if (this->shortsellflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->shortsellflag(), target);
  }

  // string ExchangeDate = 20;
  if (this->exchangedate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangedate().data(), static_cast<int>(this->exchangedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        20, this->exchangedate(), target);
  }

  // string ExchangeSymbol = 21;
  if (this->exchangesymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        21, this->exchangesymbol(), target);
  }

  // double TickSize = 22;
  if (!(this->ticksize() <= 0 && this->ticksize() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->ticksize(), target);
  }

  // int32 LoanMarginIndicator = 23;
  if (this->loanmarginindicator() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->loanmarginindicator(), target);
  }

  // int32 PxAccuracy = 24;
  if (this->pxaccuracy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->pxaccuracy(), target);
  }

  // int32 IPOProfitable = 25;
  if (this->ipoprofitable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->ipoprofitable(), target);
  }

  // int32 DiffRightsIndicator = 26;
  if (this->diffrightsindicator() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->diffrightsindicator(), target);
  }

  // string HKSpreadTableCode = 27;
  if (this->hkspreadtablecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hkspreadtablecode().data(), static_cast<int>(this->hkspreadtablecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        27, this->hkspreadtablecode(), target);
  }

  // double PreSettlePx = 28;
  if (!(this->presettlepx() <= 0 && this->presettlepx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->presettlepx(), target);
  }

  // double PreIOPV = 29;
  if (!(this->preiopv() <= 0 && this->preiopv() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->preiopv(), target);
  }

  // int32 ShHkConnect = 30;
  if (this->shhkconnect() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->shhkconnect(), target);
  }

  // int32 SzHkConnect = 31;
  if (this->szhkconnect() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->szhkconnect(), target);
  }

  // string OptionContractID = 40;
  if (this->optioncontractid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncontractid().data(), static_cast<int>(this->optioncontractid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        40, this->optioncontractid(), target);
  }

  // string OptionContractSymbol = 41;
  if (this->optioncontractsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncontractsymbol().data(), static_cast<int>(this->optioncontractsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        41, this->optioncontractsymbol(), target);
  }

  // string OptionUnderlyingSecurityID = 42;
  if (this->optionunderlyingsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionunderlyingsecurityid().data(), static_cast<int>(this->optionunderlyingsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        42, this->optionunderlyingsecurityid(), target);
  }

  // string OptionUnderlyingSymbol = 43;
  if (this->optionunderlyingsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionunderlyingsymbol().data(), static_cast<int>(this->optionunderlyingsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        43, this->optionunderlyingsymbol(), target);
  }

  // string OptionUnderlyingType = 44;
  if (this->optionunderlyingtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionunderlyingtype().data(), static_cast<int>(this->optionunderlyingtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        44, this->optionunderlyingtype(), target);
  }

  // string OptionOptionType = 45;
  if (this->optionoptiontype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionoptiontype().data(), static_cast<int>(this->optionoptiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        45, this->optionoptiontype(), target);
  }

  // string OptionCallOrPut = 46;
  if (this->optioncallorput().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncallorput().data(), static_cast<int>(this->optioncallorput().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        46, this->optioncallorput(), target);
  }

  // int64 OptionContractMultiplierUnit = 47;
  if (this->optioncontractmultiplierunit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(47, this->optioncontractmultiplierunit(), target);
  }

  // double OptionExercisePrice = 48;
  if (!(this->optionexerciseprice() <= 0 && this->optionexerciseprice() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->optionexerciseprice(), target);
  }

  // string OptionStartDate = 49;
  if (this->optionstartdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionstartdate().data(), static_cast<int>(this->optionstartdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        49, this->optionstartdate(), target);
  }

  // string OptionEndDate = 50;
  if (this->optionenddate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionenddate().data(), static_cast<int>(this->optionenddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        50, this->optionenddate(), target);
  }

  // string OptionExerciseDate = 51;
  if (this->optionexercisedate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionexercisedate().data(), static_cast<int>(this->optionexercisedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        51, this->optionexercisedate(), target);
  }

  // string OptionDeliveryDate = 52;
  if (this->optiondeliverydate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optiondeliverydate().data(), static_cast<int>(this->optiondeliverydate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        52, this->optiondeliverydate(), target);
  }

  // string OptionExpireDate = 53;
  if (this->optionexpiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionexpiredate().data(), static_cast<int>(this->optionexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        53, this->optionexpiredate(), target);
  }

  // string OptionUpdateVersion = 54;
  if (this->optionupdateversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionupdateversion().data(), static_cast<int>(this->optionupdateversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        54, this->optionupdateversion(), target);
  }

  // int64 OptionTotalLongPosition = 55;
  if (this->optiontotallongposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(55, this->optiontotallongposition(), target);
  }

  // double OptionSecurityClosePx = 56;
  if (!(this->optionsecurityclosepx() <= 0 && this->optionsecurityclosepx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(56, this->optionsecurityclosepx(), target);
  }

  // double OptionSettlPrice = 57;
  if (!(this->optionsettlprice() <= 0 && this->optionsettlprice() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(57, this->optionsettlprice(), target);
  }

  // double OptionUnderlyingClosePx = 58;
  if (!(this->optionunderlyingclosepx() <= 0 && this->optionunderlyingclosepx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(58, this->optionunderlyingclosepx(), target);
  }

  // string OptionPriceLimitType = 59;
  if (this->optionpricelimittype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionpricelimittype().data(), static_cast<int>(this->optionpricelimittype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        59, this->optionpricelimittype(), target);
  }

  // double OptionDailyPriceUpLimit = 60;
  if (!(this->optiondailypriceuplimit() <= 0 && this->optiondailypriceuplimit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(60, this->optiondailypriceuplimit(), target);
  }

  // double OptionDailyPriceDownLimit = 61;
  if (!(this->optiondailypricedownlimit() <= 0 && this->optiondailypricedownlimit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(61, this->optiondailypricedownlimit(), target);
  }

  // double OptionMarginUnit = 62;
  if (!(this->optionmarginunit() <= 0 && this->optionmarginunit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(62, this->optionmarginunit(), target);
  }

  // double OptionMarginRatioParam1 = 63;
  if (!(this->optionmarginratioparam1() <= 0 && this->optionmarginratioparam1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(63, this->optionmarginratioparam1(), target);
  }

  // double OptionMarginRatioParam2 = 64;
  if (!(this->optionmarginratioparam2() <= 0 && this->optionmarginratioparam2() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(64, this->optionmarginratioparam2(), target);
  }

  // int64 OptionRoundLot = 65;
  if (this->optionroundlot() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(65, this->optionroundlot(), target);
  }

  // int64 OptionLmtOrdMinFloor = 66;
  if (this->optionlmtordminfloor() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(66, this->optionlmtordminfloor(), target);
  }

  // int64 OptionLmtOrdMaxFloor = 67;
  if (this->optionlmtordmaxfloor() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(67, this->optionlmtordmaxfloor(), target);
  }

  // int64 OptionMktOrdMinFloor = 68;
  if (this->optionmktordminfloor() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(68, this->optionmktordminfloor(), target);
  }

  // int64 OptionMktOrdMaxFloor = 69;
  if (this->optionmktordmaxfloor() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(69, this->optionmktordmaxfloor(), target);
  }

  // double OptionTickSize = 70;
  if (!(this->optionticksize() <= 0 && this->optionticksize() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(70, this->optionticksize(), target);
  }

  // string OptionSecurityStatusFlag = 71;
  if (this->optionsecuritystatusflag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionsecuritystatusflag().data(), static_cast<int>(this->optionsecuritystatusflag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        71, this->optionsecuritystatusflag(), target);
  }

  // string OptionCarryInterestDate = 72;
  if (this->optioncarryinterestdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncarryinterestdate().data(), static_cast<int>(this->optioncarryinterestdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        72, this->optioncarryinterestdate(), target);
  }

  // string OptionEarlyExpireDate = 73;
  if (this->optionearlyexpiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionearlyexpiredate().data(), static_cast<int>(this->optionearlyexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        73, this->optionearlyexpiredate(), target);
  }

  // string OptionStrategySecurityID = 74;
  if (this->optionstrategysecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionstrategysecurityid().data(), static_cast<int>(this->optionstrategysecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        74, this->optionstrategysecurityid(), target);
  }

  // string FITradeProductType = 80;
  if (this->fitradeproducttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fitradeproducttype().data(), static_cast<int>(this->fitradeproducttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        80, this->fitradeproducttype(), target);
  }

  // string FISecurityProperty = 81;
  if (this->fisecurityproperty().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fisecurityproperty().data(), static_cast<int>(this->fisecurityproperty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        81, this->fisecurityproperty(), target);
  }

  // string FISecurityStatus = 82;
  if (this->fisecuritystatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fisecuritystatus().data(), static_cast<int>(this->fisecuritystatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        82, this->fisecuritystatus(), target);
  }

  // string FIPledgedSecurityID = 83;
  if (this->fipledgedsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fipledgedsecurityid().data(), static_cast<int>(this->fipledgedsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        83, this->fipledgedsecurityid(), target);
  }

  // string FIOpenTime = 84;
  if (this->fiopentime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiopentime().data(), static_cast<int>(this->fiopentime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        84, this->fiopentime(), target);
  }

  // string FICloseTime = 85;
  if (this->ficlosetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ficlosetime().data(), static_cast<int>(this->ficlosetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        85, this->ficlosetime(), target);
  }

  // string FIIssueMode = 86;
  if (this->fiissuemode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiissuemode().data(), static_cast<int>(this->fiissuemode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        86, this->fiissuemode(), target);
  }

  // double FIFaceAmount = 87;
  if (!(this->fifaceamount() <= 0 && this->fifaceamount() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(87, this->fifaceamount(), target);
  }

  // double FIIssuePrice = 88;
  if (!(this->fiissueprice() <= 0 && this->fiissueprice() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(88, this->fiissueprice(), target);
  }

  // string FIInterestType = 89;
  if (this->fiinteresttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiinteresttype().data(), static_cast<int>(this->fiinteresttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        89, this->fiinteresttype(), target);
  }

  // string FIInterestFrequency = 90;
  if (this->fiinterestfrequency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiinterestfrequency().data(), static_cast<int>(this->fiinterestfrequency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        90, this->fiinterestfrequency(), target);
  }

  // double FIGuaranteedInterestRate = 91;
  if (!(this->figuaranteedinterestrate() <= 0 && this->figuaranteedinterestrate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(91, this->figuaranteedinterestrate(), target);
  }

  // double FIBaseInterestRate = 92;
  if (!(this->fibaseinterestrate() <= 0 && this->fibaseinterestrate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(92, this->fibaseinterestrate(), target);
  }

  // double FIQuotedMargin = 93;
  if (!(this->fiquotedmargin() <= 0 && this->fiquotedmargin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(93, this->fiquotedmargin(), target);
  }

  // int32 FITimeLimit = 94;
  if (this->fitimelimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(94, this->fitimelimit(), target);
  }

  // double FITotalIssuance = 95;
  if (!(this->fitotalissuance() <= 0 && this->fitotalissuance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(95, this->fitotalissuance(), target);
  }

  // string FIIssueStartDate = 96;
  if (this->fiissuestartdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiissuestartdate().data(), static_cast<int>(this->fiissuestartdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        96, this->fiissuestartdate(), target);
  }

  // string FIIssueEndDate = 97;
  if (this->fiissueenddate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiissueenddate().data(), static_cast<int>(this->fiissueenddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        97, this->fiissueenddate(), target);
  }

  // string FIListDate = 98;
  if (this->filistdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filistdate().data(), static_cast<int>(this->filistdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIListDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        98, this->filistdate(), target);
  }

  // string FIExpireDate = 99;
  if (this->fiexpiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiexpiredate().data(), static_cast<int>(this->fiexpiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        99, this->fiexpiredate(), target);
  }

  // string FINationalDebtType = 100;
  if (this->finationaldebttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->finationaldebttype().data(), static_cast<int>(this->finationaldebttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->finationaldebttype(), target);
  }

  // string FIIssueMethod = 101;
  if (this->fiissuemethod().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fiissuemethod().data(), static_cast<int>(this->fiissuemethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        101, this->fiissuemethod(), target);
  }

  // bool FICrossMarket = 102;
  if (this->ficrossmarket() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->ficrossmarket(), target);
  }

  // bool FIShortSellFlag = 103;
  if (this->fishortsellflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(103, this->fishortsellflag(), target);
  }

  // double FITotalShortSellQuota = 104;
  if (!(this->fitotalshortsellquota() <= 0 && this->fitotalshortsellquota() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(104, this->fitotalshortsellquota(), target);
  }

  // double FIDealerShortSellQuota = 105;
  if (!(this->fidealershortsellquota() <= 0 && this->fidealershortsellquota() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(105, this->fidealershortsellquota(), target);
  }

  // double FIPreClosePx = 106;
  if (!(this->fipreclosepx() <= 0 && this->fipreclosepx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(106, this->fipreclosepx(), target);
  }

  // double FIPreWeightedPx = 107;
  if (!(this->fipreweightedpx() <= 0 && this->fipreweightedpx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(107, this->fipreweightedpx(), target);
  }

  // string OptionListType = 110;
  if (this->optionlisttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionlisttype().data(), static_cast<int>(this->optionlisttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionListType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        110, this->optionlisttype(), target);
  }

  // string OptionDeliveryType = 111;
  if (this->optiondeliverytype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optiondeliverytype().data(), static_cast<int>(this->optiondeliverytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        111, this->optiondeliverytype(), target);
  }

  // int32 OptionAdjustTimes = 112;
  if (this->optionadjusttimes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(112, this->optionadjusttimes(), target);
  }

  // int64 OptionContractPosition = 113;
  if (this->optioncontractposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(113, this->optioncontractposition(), target);
  }

  // int64 OptionBuyQtyUpperLimit = 114;
  if (this->optionbuyqtyupperlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(114, this->optionbuyqtyupperlimit(), target);
  }

  // int64 OptionSellQtyUpperLimit = 115;
  if (this->optionsellqtyupperlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(115, this->optionsellqtyupperlimit(), target);
  }

  // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
  if (this->optionmarketorderbuyqtyupperlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(116, this->optionmarketorderbuyqtyupperlimit(), target);
  }

  // int64 OptionMarketOrderSellQtyUpperLimit = 117;
  if (this->optionmarketordersellqtyupperlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(117, this->optionmarketordersellqtyupperlimit(), target);
  }

  // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
  if (this->optionquoteorderbuyqtyupperlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(118, this->optionquoteorderbuyqtyupperlimit(), target);
  }

  // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
  if (this->optionquoteordersellqtyupperlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(119, this->optionquoteordersellqtyupperlimit(), target);
  }

  // int64 OptionBuyQtyUnit = 120;
  if (this->optionbuyqtyunit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(120, this->optionbuyqtyunit(), target);
  }

  // int64 OptionSellQtyUnit = 121;
  if (this->optionsellqtyunit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(121, this->optionsellqtyunit(), target);
  }

  // double OptionLastSellMargin = 122;
  if (!(this->optionlastsellmargin() <= 0 && this->optionlastsellmargin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(122, this->optionlastsellmargin(), target);
  }

  // double OptionSellMargin = 123;
  if (!(this->optionsellmargin() <= 0 && this->optionsellmargin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(123, this->optionsellmargin(), target);
  }

  // string OptionMarketMakerFlag = 124;
  if (this->optionmarketmakerflag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optionmarketmakerflag().data(), static_cast<int>(this->optionmarketmakerflag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        124, this->optionmarketmakerflag(), target);
  }

  // string OptionCombinationStrategy = 125;
  if (this->optioncombinationstrategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optioncombinationstrategy().data(), static_cast<int>(this->optioncombinationstrategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        125, this->optioncombinationstrategy(), target);
  }

  // string DeliveryYear = 126;
  if (this->deliveryyear().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deliveryyear().data(), static_cast<int>(this->deliveryyear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        126, this->deliveryyear(), target);
  }

  // string DeliveryMonth = 127;
  if (this->deliverymonth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deliverymonth().data(), static_cast<int>(this->deliverymonth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        127, this->deliverymonth(), target);
  }

  // string InstrumentID = 128;
  if (this->instrumentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        128, this->instrumentid(), target);
  }

  // string InstrumentName = 129;
  if (this->instrumentname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentname().data(), static_cast<int>(this->instrumentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        129, this->instrumentname(), target);
  }

  // string ExchangeInstID = 130;
  if (this->exchangeinstid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), static_cast<int>(this->exchangeinstid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        130, this->exchangeinstid(), target);
  }

  // string ProductID = 131;
  if (this->productid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ProductID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        131, this->productid(), target);
  }

  // int64 MaxMarketOrderVolume = 132;
  if (this->maxmarketordervolume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(132, this->maxmarketordervolume(), target);
  }

  // int64 MinMarketOrderVolume = 133;
  if (this->minmarketordervolume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(133, this->minmarketordervolume(), target);
  }

  // int64 MaxLimitOrderVolume = 134;
  if (this->maxlimitordervolume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(134, this->maxlimitordervolume(), target);
  }

  // int64 MinLimitOrderVolume = 135;
  if (this->minlimitordervolume() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(135, this->minlimitordervolume(), target);
  }

  // int64 VolumeMultiple = 136;
  if (this->volumemultiple() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(136, this->volumemultiple(), target);
  }

  // string CreateDate = 137;
  if (this->createdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.CreateDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        137, this->createdate(), target);
  }

  // string ExpireDate = 138;
  if (this->expiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->expiredate().data(), static_cast<int>(this->expiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        138, this->expiredate(), target);
  }

  // string StartDelivDate = 139;
  if (this->startdelivdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->startdelivdate().data(), static_cast<int>(this->startdelivdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        139, this->startdelivdate(), target);
  }

  // string EndDelivDate = 140;
  if (this->enddelivdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->enddelivdate().data(), static_cast<int>(this->enddelivdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        140, this->enddelivdate(), target);
  }

  // string PositionType = 141;
  if (this->positiontype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->positiontype().data(), static_cast<int>(this->positiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.PositionType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        141, this->positiontype(), target);
  }

  // double LongMarginRatio = 142;
  if (!(this->longmarginratio() <= 0 && this->longmarginratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(142, this->longmarginratio(), target);
  }

  // double ShortMarginRatio = 143;
  if (!(this->shortmarginratio() <= 0 && this->shortmarginratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(143, this->shortmarginratio(), target);
  }

  // string MaxMarginSideAlgorithm = 144;
  if (this->maxmarginsidealgorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->maxmarginsidealgorithm().data(), static_cast<int>(this->maxmarginsidealgorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        144, this->maxmarginsidealgorithm(), target);
  }

  // double StrikePrice = 145;
  if (!(this->strikeprice() <= 0 && this->strikeprice() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(145, this->strikeprice(), target);
  }

  // double PreOpenInterest = 146;
  if (!(this->preopeninterest() <= 0 && this->preopeninterest() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(146, this->preopeninterest(), target);
  }

  // string FormerSymbol = 147;
  if (this->formersymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->formersymbol().data(), static_cast<int>(this->formersymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        147, this->formersymbol(), target);
  }

  // string DelistDate = 148;
  if (this->delistdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->delistdate().data(), static_cast<int>(this->delistdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.DelistDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        148, this->delistdate(), target);
  }

  // int64 BuyQtyUnit = 149;
  if (this->buyqtyunit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(149, this->buyqtyunit(), target);
  }

  // int64 SellQtyUnit = 150;
  if (this->sellqtyunit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(150, this->sellqtyunit(), target);
  }

  // int64 BuyQtyUpperLimit = 161;
  if (this->buyqtyupperlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(161, this->buyqtyupperlimit(), target);
  }

  // int64 SellQtyUpperLimit = 162;
  if (this->sellqtyupperlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(162, this->sellqtyupperlimit(), target);
  }

  // int64 BuyQtyLowerLimit = 163;
  if (this->buyqtylowerlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(163, this->buyqtylowerlimit(), target);
  }

  // int64 SellQtyLowerLimit = 164;
  if (this->sellqtylowerlimit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(164, this->sellqtylowerlimit(), target);
  }

  // int32 VCMFlag = 165;
  if (this->vcmflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(165, this->vcmflag(), target);
  }

  // int32 CASFlag = 166;
  if (this->casflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(166, this->casflag(), target);
  }

  // int32 POSFlag = 167;
  if (this->posflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(167, this->posflag(), target);
  }

  // double POSUpperLimitPx = 168;
  if (!(this->posupperlimitpx() <= 0 && this->posupperlimitpx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(168, this->posupperlimitpx(), target);
  }

  // double POSLowerLimitPx = 169;
  if (!(this->poslowerlimitpx() <= 0 && this->poslowerlimitpx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(169, this->poslowerlimitpx(), target);
  }

  // string BaseContractID = 170;
  if (this->basecontractid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->basecontractid().data(), static_cast<int>(this->basecontractid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        170, this->basecontractid(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constantparams_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        171, this->constantparams(static_cast<int>(i)), target);
  }

  // int32 DataMultiplePowerOf10 = 172;
  if (this->datamultiplepowerof10() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(172, this->datamultiplepowerof10(), target);
  }

  // string InterestAccrualDate = 173;
  if (this->interestaccrualdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->interestaccrualdate().data(), static_cast<int>(this->interestaccrualdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        173, this->interestaccrualdate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDBasicInfo)
  return target;
}

size_t MDBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDBasicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
  {
    unsigned int count = static_cast<unsigned int>(this->constantparams_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->constantparams(static_cast<int>(i)));
    }
  }

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->securityid());
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string ChiSpelling = 4;
  if (this->chispelling().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->chispelling());
  }

  // string EnglishName = 5;
  if (this->englishname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->englishname());
  }

  // string SecuritySubType = 8;
  if (this->securitysubtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->securitysubtype());
  }

  // string ListDate = 9;
  if (this->listdate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->listdate());
  }

  // string Currency = 10;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->currency());
  }

  // string TradingPhaseCode = 14;
  if (this->tradingphasecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tradingphasecode());
  }

  // string ExchangeDate = 20;
  if (this->exchangedate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exchangedate());
  }

  // string ExchangeSymbol = 21;
  if (this->exchangesymbol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exchangesymbol());
  }

  // string HKSpreadTableCode = 27;
  if (this->hkspreadtablecode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hkspreadtablecode());
  }

  // string OptionContractID = 40;
  if (this->optioncontractid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optioncontractid());
  }

  // string OptionContractSymbol = 41;
  if (this->optioncontractsymbol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optioncontractsymbol());
  }

  // string OptionUnderlyingSecurityID = 42;
  if (this->optionunderlyingsecurityid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionunderlyingsecurityid());
  }

  // string OptionUnderlyingSymbol = 43;
  if (this->optionunderlyingsymbol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionunderlyingsymbol());
  }

  // string OptionUnderlyingType = 44;
  if (this->optionunderlyingtype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionunderlyingtype());
  }

  // string OptionOptionType = 45;
  if (this->optionoptiontype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionoptiontype());
  }

  // string OptionCallOrPut = 46;
  if (this->optioncallorput().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optioncallorput());
  }

  // string OptionStartDate = 49;
  if (this->optionstartdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionstartdate());
  }

  // string OptionEndDate = 50;
  if (this->optionenddate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionenddate());
  }

  // string OptionExerciseDate = 51;
  if (this->optionexercisedate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionexercisedate());
  }

  // string OptionDeliveryDate = 52;
  if (this->optiondeliverydate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optiondeliverydate());
  }

  // string OptionExpireDate = 53;
  if (this->optionexpiredate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionexpiredate());
  }

  // string OptionUpdateVersion = 54;
  if (this->optionupdateversion().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionupdateversion());
  }

  // string OptionPriceLimitType = 59;
  if (this->optionpricelimittype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionpricelimittype());
  }

  // string OptionSecurityStatusFlag = 71;
  if (this->optionsecuritystatusflag().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionsecuritystatusflag());
  }

  // string OptionCarryInterestDate = 72;
  if (this->optioncarryinterestdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optioncarryinterestdate());
  }

  // string OptionEarlyExpireDate = 73;
  if (this->optionearlyexpiredate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionearlyexpiredate());
  }

  // string OptionStrategySecurityID = 74;
  if (this->optionstrategysecurityid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionstrategysecurityid());
  }

  // string FITradeProductType = 80;
  if (this->fitradeproducttype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fitradeproducttype());
  }

  // string FISecurityProperty = 81;
  if (this->fisecurityproperty().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fisecurityproperty());
  }

  // string FISecurityStatus = 82;
  if (this->fisecuritystatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fisecuritystatus());
  }

  // string FIPledgedSecurityID = 83;
  if (this->fipledgedsecurityid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fipledgedsecurityid());
  }

  // string FIOpenTime = 84;
  if (this->fiopentime().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fiopentime());
  }

  // string FICloseTime = 85;
  if (this->ficlosetime().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ficlosetime());
  }

  // string FIIssueMode = 86;
  if (this->fiissuemode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fiissuemode());
  }

  // string FIInterestType = 89;
  if (this->fiinteresttype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fiinteresttype());
  }

  // string FIInterestFrequency = 90;
  if (this->fiinterestfrequency().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fiinterestfrequency());
  }

  // string FIIssueStartDate = 96;
  if (this->fiissuestartdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fiissuestartdate());
  }

  // string FIIssueEndDate = 97;
  if (this->fiissueenddate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fiissueenddate());
  }

  // string FIListDate = 98;
  if (this->filistdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filistdate());
  }

  // string FIExpireDate = 99;
  if (this->fiexpiredate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fiexpiredate());
  }

  // string FINationalDebtType = 100;
  if (this->finationaldebttype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->finationaldebttype());
  }

  // string FIIssueMethod = 101;
  if (this->fiissuemethod().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fiissuemethod());
  }

  // string OptionListType = 110;
  if (this->optionlisttype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionlisttype());
  }

  // string OptionDeliveryType = 111;
  if (this->optiondeliverytype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optiondeliverytype());
  }

  // string OptionMarketMakerFlag = 124;
  if (this->optionmarketmakerflag().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optionmarketmakerflag());
  }

  // string OptionCombinationStrategy = 125;
  if (this->optioncombinationstrategy().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->optioncombinationstrategy());
  }

  // string DeliveryYear = 126;
  if (this->deliveryyear().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deliveryyear());
  }

  // string DeliveryMonth = 127;
  if (this->deliverymonth().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deliverymonth());
  }

  // string InstrumentID = 128;
  if (this->instrumentid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // string InstrumentName = 129;
  if (this->instrumentname().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->instrumentname());
  }

  // string ExchangeInstID = 130;
  if (this->exchangeinstid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exchangeinstid());
  }

  // string ProductID = 131;
  if (this->productid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->productid());
  }

  // string CreateDate = 137;
  if (this->createdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->createdate());
  }

  // string ExpireDate = 138;
  if (this->expiredate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->expiredate());
  }

  // string StartDelivDate = 139;
  if (this->startdelivdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->startdelivdate());
  }

  // string EndDelivDate = 140;
  if (this->enddelivdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->enddelivdate());
  }

  // string PositionType = 141;
  if (this->positiontype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->positiontype());
  }

  // string MaxMarginSideAlgorithm = 144;
  if (this->maxmarginsidealgorithm().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->maxmarginsidealgorithm());
  }

  // string FormerSymbol = 147;
  if (this->formersymbol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->formersymbol());
  }

  // string DelistDate = 148;
  if (this->delistdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->delistdate());
  }

  // string BaseContractID = 170;
  if (this->basecontractid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->basecontractid());
  }

  // string InterestAccrualDate = 173;
  if (this->interestaccrualdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->interestaccrualdate());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // int64 OutstandingShare = 11;
  if (this->outstandingshare() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->outstandingshare());
  }

  // int64 PublicFloatShareQuantity = 12;
  if (this->publicfloatsharequantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->publicfloatsharequantity());
  }

  // int64 PreClosePx = 15;
  if (this->preclosepx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->preclosepx());
  }

  // int64 MaxPx = 16;
  if (this->maxpx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->maxpx());
  }

  // int64 MinPx = 17;
  if (this->minpx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->minpx());
  }

  // int64 LotSize = 18;
  if (this->lotsize() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lotsize());
  }

  // int32 MDDate = 13;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // int32 LoanMarginIndicator = 23;
  if (this->loanmarginindicator() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->loanmarginindicator());
  }

  // double TickSize = 22;
  if (!(this->ticksize() <= 0 && this->ticksize() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 PxAccuracy = 24;
  if (this->pxaccuracy() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pxaccuracy());
  }

  // int32 IPOProfitable = 25;
  if (this->ipoprofitable() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ipoprofitable());
  }

  // double PreSettlePx = 28;
  if (!(this->presettlepx() <= 0 && this->presettlepx() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 DiffRightsIndicator = 26;
  if (this->diffrightsindicator() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->diffrightsindicator());
  }

  // int32 ShHkConnect = 30;
  if (this->shhkconnect() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->shhkconnect());
  }

  // double PreIOPV = 29;
  if (!(this->preiopv() <= 0 && this->preiopv() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 OptionContractMultiplierUnit = 47;
  if (this->optioncontractmultiplierunit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optioncontractmultiplierunit());
  }

  // double OptionExercisePrice = 48;
  if (!(this->optionexerciseprice() <= 0 && this->optionexerciseprice() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 OptionTotalLongPosition = 55;
  if (this->optiontotallongposition() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optiontotallongposition());
  }

  // double OptionSecurityClosePx = 56;
  if (!(this->optionsecurityclosepx() <= 0 && this->optionsecurityclosepx() >= 0)) {
    total_size += 2 + 8;
  }

  // double OptionSettlPrice = 57;
  if (!(this->optionsettlprice() <= 0 && this->optionsettlprice() >= 0)) {
    total_size += 2 + 8;
  }

  // double OptionUnderlyingClosePx = 58;
  if (!(this->optionunderlyingclosepx() <= 0 && this->optionunderlyingclosepx() >= 0)) {
    total_size += 2 + 8;
  }

  // double OptionDailyPriceUpLimit = 60;
  if (!(this->optiondailypriceuplimit() <= 0 && this->optiondailypriceuplimit() >= 0)) {
    total_size += 2 + 8;
  }

  // double OptionDailyPriceDownLimit = 61;
  if (!(this->optiondailypricedownlimit() <= 0 && this->optiondailypricedownlimit() >= 0)) {
    total_size += 2 + 8;
  }

  // double OptionMarginUnit = 62;
  if (!(this->optionmarginunit() <= 0 && this->optionmarginunit() >= 0)) {
    total_size += 2 + 8;
  }

  // double OptionMarginRatioParam1 = 63;
  if (!(this->optionmarginratioparam1() <= 0 && this->optionmarginratioparam1() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 SzHkConnect = 31;
  if (this->szhkconnect() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->szhkconnect());
  }

  // bool ShortSellFlag = 19;
  if (this->shortsellflag() != 0) {
    total_size += 2 + 1;
  }

  // bool FICrossMarket = 102;
  if (this->ficrossmarket() != 0) {
    total_size += 2 + 1;
  }

  // bool FIShortSellFlag = 103;
  if (this->fishortsellflag() != 0) {
    total_size += 2 + 1;
  }

  // double OptionMarginRatioParam2 = 64;
  if (!(this->optionmarginratioparam2() <= 0 && this->optionmarginratioparam2() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 OptionRoundLot = 65;
  if (this->optionroundlot() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionroundlot());
  }

  // int64 OptionLmtOrdMinFloor = 66;
  if (this->optionlmtordminfloor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionlmtordminfloor());
  }

  // int64 OptionLmtOrdMaxFloor = 67;
  if (this->optionlmtordmaxfloor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionlmtordmaxfloor());
  }

  // int64 OptionMktOrdMinFloor = 68;
  if (this->optionmktordminfloor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionmktordminfloor());
  }

  // int64 OptionMktOrdMaxFloor = 69;
  if (this->optionmktordmaxfloor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionmktordmaxfloor());
  }

  // double OptionTickSize = 70;
  if (!(this->optionticksize() <= 0 && this->optionticksize() >= 0)) {
    total_size += 2 + 8;
  }

  // double FIFaceAmount = 87;
  if (!(this->fifaceamount() <= 0 && this->fifaceamount() >= 0)) {
    total_size += 2 + 8;
  }

  // double FIIssuePrice = 88;
  if (!(this->fiissueprice() <= 0 && this->fiissueprice() >= 0)) {
    total_size += 2 + 8;
  }

  // double FIGuaranteedInterestRate = 91;
  if (!(this->figuaranteedinterestrate() <= 0 && this->figuaranteedinterestrate() >= 0)) {
    total_size += 2 + 8;
  }

  // double FIBaseInterestRate = 92;
  if (!(this->fibaseinterestrate() <= 0 && this->fibaseinterestrate() >= 0)) {
    total_size += 2 + 8;
  }

  // double FIQuotedMargin = 93;
  if (!(this->fiquotedmargin() <= 0 && this->fiquotedmargin() >= 0)) {
    total_size += 2 + 8;
  }

  // double FITotalIssuance = 95;
  if (!(this->fitotalissuance() <= 0 && this->fitotalissuance() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 FITimeLimit = 94;
  if (this->fitimelimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fitimelimit());
  }

  // int32 OptionAdjustTimes = 112;
  if (this->optionadjusttimes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->optionadjusttimes());
  }

  // double FITotalShortSellQuota = 104;
  if (!(this->fitotalshortsellquota() <= 0 && this->fitotalshortsellquota() >= 0)) {
    total_size += 2 + 8;
  }

  // double FIDealerShortSellQuota = 105;
  if (!(this->fidealershortsellquota() <= 0 && this->fidealershortsellquota() >= 0)) {
    total_size += 2 + 8;
  }

  // double FIPreClosePx = 106;
  if (!(this->fipreclosepx() <= 0 && this->fipreclosepx() >= 0)) {
    total_size += 2 + 8;
  }

  // double FIPreWeightedPx = 107;
  if (!(this->fipreweightedpx() <= 0 && this->fipreweightedpx() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 OptionContractPosition = 113;
  if (this->optioncontractposition() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optioncontractposition());
  }

  // int64 OptionBuyQtyUpperLimit = 114;
  if (this->optionbuyqtyupperlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionbuyqtyupperlimit());
  }

  // int64 OptionSellQtyUpperLimit = 115;
  if (this->optionsellqtyupperlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionsellqtyupperlimit());
  }

  // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
  if (this->optionmarketorderbuyqtyupperlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionmarketorderbuyqtyupperlimit());
  }

  // int64 OptionMarketOrderSellQtyUpperLimit = 117;
  if (this->optionmarketordersellqtyupperlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionmarketordersellqtyupperlimit());
  }

  // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
  if (this->optionquoteorderbuyqtyupperlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionquoteorderbuyqtyupperlimit());
  }

  // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
  if (this->optionquoteordersellqtyupperlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionquoteordersellqtyupperlimit());
  }

  // int64 OptionBuyQtyUnit = 120;
  if (this->optionbuyqtyunit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionbuyqtyunit());
  }

  // int64 OptionSellQtyUnit = 121;
  if (this->optionsellqtyunit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->optionsellqtyunit());
  }

  // double OptionLastSellMargin = 122;
  if (!(this->optionlastsellmargin() <= 0 && this->optionlastsellmargin() >= 0)) {
    total_size += 2 + 8;
  }

  // double OptionSellMargin = 123;
  if (!(this->optionsellmargin() <= 0 && this->optionsellmargin() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 MaxMarketOrderVolume = 132;
  if (this->maxmarketordervolume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->maxmarketordervolume());
  }

  // int64 MinMarketOrderVolume = 133;
  if (this->minmarketordervolume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->minmarketordervolume());
  }

  // int64 MaxLimitOrderVolume = 134;
  if (this->maxlimitordervolume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->maxlimitordervolume());
  }

  // int64 MinLimitOrderVolume = 135;
  if (this->minlimitordervolume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->minlimitordervolume());
  }

  // int64 VolumeMultiple = 136;
  if (this->volumemultiple() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->volumemultiple());
  }

  // double LongMarginRatio = 142;
  if (!(this->longmarginratio() <= 0 && this->longmarginratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double ShortMarginRatio = 143;
  if (!(this->shortmarginratio() <= 0 && this->shortmarginratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double StrikePrice = 145;
  if (!(this->strikeprice() <= 0 && this->strikeprice() >= 0)) {
    total_size += 2 + 8;
  }

  // double PreOpenInterest = 146;
  if (!(this->preopeninterest() <= 0 && this->preopeninterest() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 BuyQtyUnit = 149;
  if (this->buyqtyunit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->buyqtyunit());
  }

  // int64 SellQtyUnit = 150;
  if (this->sellqtyunit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sellqtyunit());
  }

  // int64 BuyQtyUpperLimit = 161;
  if (this->buyqtyupperlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->buyqtyupperlimit());
  }

  // int64 SellQtyUpperLimit = 162;
  if (this->sellqtyupperlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sellqtyupperlimit());
  }

  // int64 BuyQtyLowerLimit = 163;
  if (this->buyqtylowerlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->buyqtylowerlimit());
  }

  // int64 SellQtyLowerLimit = 164;
  if (this->sellqtylowerlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sellqtylowerlimit());
  }

  // int32 VCMFlag = 165;
  if (this->vcmflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->vcmflag());
  }

  // int32 CASFlag = 166;
  if (this->casflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->casflag());
  }

  // double POSUpperLimitPx = 168;
  if (!(this->posupperlimitpx() <= 0 && this->posupperlimitpx() >= 0)) {
    total_size += 2 + 8;
  }

  // double POSLowerLimitPx = 169;
  if (!(this->poslowerlimitpx() <= 0 && this->poslowerlimitpx() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 POSFlag = 167;
  if (this->posflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->posflag());
  }

  // int32 DataMultiplePowerOf10 = 172;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDBasicInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MDBasicInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDBasicInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDBasicInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDBasicInfo)
    MergeFrom(*source);
  }
}

void MDBasicInfo::MergeFrom(const MDBasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constantparams_.MergeFrom(from.constantparams_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.securityid().size() > 0) {

    securityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securityid_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.chispelling().size() > 0) {

    chispelling_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chispelling_);
  }
  if (from.englishname().size() > 0) {

    englishname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.englishname_);
  }
  if (from.securitysubtype().size() > 0) {

    securitysubtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securitysubtype_);
  }
  if (from.listdate().size() > 0) {

    listdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listdate_);
  }
  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.tradingphasecode().size() > 0) {

    tradingphasecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  if (from.exchangedate().size() > 0) {

    exchangedate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangedate_);
  }
  if (from.exchangesymbol().size() > 0) {

    exchangesymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangesymbol_);
  }
  if (from.hkspreadtablecode().size() > 0) {

    hkspreadtablecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hkspreadtablecode_);
  }
  if (from.optioncontractid().size() > 0) {

    optioncontractid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncontractid_);
  }
  if (from.optioncontractsymbol().size() > 0) {

    optioncontractsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncontractsymbol_);
  }
  if (from.optionunderlyingsecurityid().size() > 0) {

    optionunderlyingsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionunderlyingsecurityid_);
  }
  if (from.optionunderlyingsymbol().size() > 0) {

    optionunderlyingsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionunderlyingsymbol_);
  }
  if (from.optionunderlyingtype().size() > 0) {

    optionunderlyingtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionunderlyingtype_);
  }
  if (from.optionoptiontype().size() > 0) {

    optionoptiontype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionoptiontype_);
  }
  if (from.optioncallorput().size() > 0) {

    optioncallorput_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncallorput_);
  }
  if (from.optionstartdate().size() > 0) {

    optionstartdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionstartdate_);
  }
  if (from.optionenddate().size() > 0) {

    optionenddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionenddate_);
  }
  if (from.optionexercisedate().size() > 0) {

    optionexercisedate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionexercisedate_);
  }
  if (from.optiondeliverydate().size() > 0) {

    optiondeliverydate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optiondeliverydate_);
  }
  if (from.optionexpiredate().size() > 0) {

    optionexpiredate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionexpiredate_);
  }
  if (from.optionupdateversion().size() > 0) {

    optionupdateversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionupdateversion_);
  }
  if (from.optionpricelimittype().size() > 0) {

    optionpricelimittype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionpricelimittype_);
  }
  if (from.optionsecuritystatusflag().size() > 0) {

    optionsecuritystatusflag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionsecuritystatusflag_);
  }
  if (from.optioncarryinterestdate().size() > 0) {

    optioncarryinterestdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncarryinterestdate_);
  }
  if (from.optionearlyexpiredate().size() > 0) {

    optionearlyexpiredate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionearlyexpiredate_);
  }
  if (from.optionstrategysecurityid().size() > 0) {

    optionstrategysecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionstrategysecurityid_);
  }
  if (from.fitradeproducttype().size() > 0) {

    fitradeproducttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fitradeproducttype_);
  }
  if (from.fisecurityproperty().size() > 0) {

    fisecurityproperty_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fisecurityproperty_);
  }
  if (from.fisecuritystatus().size() > 0) {

    fisecuritystatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fisecuritystatus_);
  }
  if (from.fipledgedsecurityid().size() > 0) {

    fipledgedsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fipledgedsecurityid_);
  }
  if (from.fiopentime().size() > 0) {

    fiopentime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiopentime_);
  }
  if (from.ficlosetime().size() > 0) {

    ficlosetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ficlosetime_);
  }
  if (from.fiissuemode().size() > 0) {

    fiissuemode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiissuemode_);
  }
  if (from.fiinteresttype().size() > 0) {

    fiinteresttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiinteresttype_);
  }
  if (from.fiinterestfrequency().size() > 0) {

    fiinterestfrequency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiinterestfrequency_);
  }
  if (from.fiissuestartdate().size() > 0) {

    fiissuestartdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiissuestartdate_);
  }
  if (from.fiissueenddate().size() > 0) {

    fiissueenddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiissueenddate_);
  }
  if (from.filistdate().size() > 0) {

    filistdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filistdate_);
  }
  if (from.fiexpiredate().size() > 0) {

    fiexpiredate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiexpiredate_);
  }
  if (from.finationaldebttype().size() > 0) {

    finationaldebttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.finationaldebttype_);
  }
  if (from.fiissuemethod().size() > 0) {

    fiissuemethod_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fiissuemethod_);
  }
  if (from.optionlisttype().size() > 0) {

    optionlisttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionlisttype_);
  }
  if (from.optiondeliverytype().size() > 0) {

    optiondeliverytype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optiondeliverytype_);
  }
  if (from.optionmarketmakerflag().size() > 0) {

    optionmarketmakerflag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optionmarketmakerflag_);
  }
  if (from.optioncombinationstrategy().size() > 0) {

    optioncombinationstrategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.optioncombinationstrategy_);
  }
  if (from.deliveryyear().size() > 0) {

    deliveryyear_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deliveryyear_);
  }
  if (from.deliverymonth().size() > 0) {

    deliverymonth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deliverymonth_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.instrumentname().size() > 0) {

    instrumentname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrumentname_);
  }
  if (from.exchangeinstid().size() > 0) {

    exchangeinstid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
  }
  if (from.productid().size() > 0) {

    productid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.createdate().size() > 0) {

    createdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  if (from.expiredate().size() > 0) {

    expiredate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expiredate_);
  }
  if (from.startdelivdate().size() > 0) {

    startdelivdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.startdelivdate_);
  }
  if (from.enddelivdate().size() > 0) {

    enddelivdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enddelivdate_);
  }
  if (from.positiontype().size() > 0) {

    positiontype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.positiontype_);
  }
  if (from.maxmarginsidealgorithm().size() > 0) {

    maxmarginsidealgorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maxmarginsidealgorithm_);
  }
  if (from.formersymbol().size() > 0) {

    formersymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formersymbol_);
  }
  if (from.delistdate().size() > 0) {

    delistdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delistdate_);
  }
  if (from.basecontractid().size() > 0) {

    basecontractid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.basecontractid_);
  }
  if (from.interestaccrualdate().size() > 0) {

    interestaccrualdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interestaccrualdate_);
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.outstandingshare() != 0) {
    set_outstandingshare(from.outstandingshare());
  }
  if (from.publicfloatsharequantity() != 0) {
    set_publicfloatsharequantity(from.publicfloatsharequantity());
  }
  if (from.preclosepx() != 0) {
    set_preclosepx(from.preclosepx());
  }
  if (from.maxpx() != 0) {
    set_maxpx(from.maxpx());
  }
  if (from.minpx() != 0) {
    set_minpx(from.minpx());
  }
  if (from.lotsize() != 0) {
    set_lotsize(from.lotsize());
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.loanmarginindicator() != 0) {
    set_loanmarginindicator(from.loanmarginindicator());
  }
  if (!(from.ticksize() <= 0 && from.ticksize() >= 0)) {
    set_ticksize(from.ticksize());
  }
  if (from.pxaccuracy() != 0) {
    set_pxaccuracy(from.pxaccuracy());
  }
  if (from.ipoprofitable() != 0) {
    set_ipoprofitable(from.ipoprofitable());
  }
  if (!(from.presettlepx() <= 0 && from.presettlepx() >= 0)) {
    set_presettlepx(from.presettlepx());
  }
  if (from.diffrightsindicator() != 0) {
    set_diffrightsindicator(from.diffrightsindicator());
  }
  if (from.shhkconnect() != 0) {
    set_shhkconnect(from.shhkconnect());
  }
  if (!(from.preiopv() <= 0 && from.preiopv() >= 0)) {
    set_preiopv(from.preiopv());
  }
  if (from.optioncontractmultiplierunit() != 0) {
    set_optioncontractmultiplierunit(from.optioncontractmultiplierunit());
  }
  if (!(from.optionexerciseprice() <= 0 && from.optionexerciseprice() >= 0)) {
    set_optionexerciseprice(from.optionexerciseprice());
  }
  if (from.optiontotallongposition() != 0) {
    set_optiontotallongposition(from.optiontotallongposition());
  }
  if (!(from.optionsecurityclosepx() <= 0 && from.optionsecurityclosepx() >= 0)) {
    set_optionsecurityclosepx(from.optionsecurityclosepx());
  }
  if (!(from.optionsettlprice() <= 0 && from.optionsettlprice() >= 0)) {
    set_optionsettlprice(from.optionsettlprice());
  }
  if (!(from.optionunderlyingclosepx() <= 0 && from.optionunderlyingclosepx() >= 0)) {
    set_optionunderlyingclosepx(from.optionunderlyingclosepx());
  }
  if (!(from.optiondailypriceuplimit() <= 0 && from.optiondailypriceuplimit() >= 0)) {
    set_optiondailypriceuplimit(from.optiondailypriceuplimit());
  }
  if (!(from.optiondailypricedownlimit() <= 0 && from.optiondailypricedownlimit() >= 0)) {
    set_optiondailypricedownlimit(from.optiondailypricedownlimit());
  }
  if (!(from.optionmarginunit() <= 0 && from.optionmarginunit() >= 0)) {
    set_optionmarginunit(from.optionmarginunit());
  }
  if (!(from.optionmarginratioparam1() <= 0 && from.optionmarginratioparam1() >= 0)) {
    set_optionmarginratioparam1(from.optionmarginratioparam1());
  }
  if (from.szhkconnect() != 0) {
    set_szhkconnect(from.szhkconnect());
  }
  if (from.shortsellflag() != 0) {
    set_shortsellflag(from.shortsellflag());
  }
  if (from.ficrossmarket() != 0) {
    set_ficrossmarket(from.ficrossmarket());
  }
  if (from.fishortsellflag() != 0) {
    set_fishortsellflag(from.fishortsellflag());
  }
  if (!(from.optionmarginratioparam2() <= 0 && from.optionmarginratioparam2() >= 0)) {
    set_optionmarginratioparam2(from.optionmarginratioparam2());
  }
  if (from.optionroundlot() != 0) {
    set_optionroundlot(from.optionroundlot());
  }
  if (from.optionlmtordminfloor() != 0) {
    set_optionlmtordminfloor(from.optionlmtordminfloor());
  }
  if (from.optionlmtordmaxfloor() != 0) {
    set_optionlmtordmaxfloor(from.optionlmtordmaxfloor());
  }
  if (from.optionmktordminfloor() != 0) {
    set_optionmktordminfloor(from.optionmktordminfloor());
  }
  if (from.optionmktordmaxfloor() != 0) {
    set_optionmktordmaxfloor(from.optionmktordmaxfloor());
  }
  if (!(from.optionticksize() <= 0 && from.optionticksize() >= 0)) {
    set_optionticksize(from.optionticksize());
  }
  if (!(from.fifaceamount() <= 0 && from.fifaceamount() >= 0)) {
    set_fifaceamount(from.fifaceamount());
  }
  if (!(from.fiissueprice() <= 0 && from.fiissueprice() >= 0)) {
    set_fiissueprice(from.fiissueprice());
  }
  if (!(from.figuaranteedinterestrate() <= 0 && from.figuaranteedinterestrate() >= 0)) {
    set_figuaranteedinterestrate(from.figuaranteedinterestrate());
  }
  if (!(from.fibaseinterestrate() <= 0 && from.fibaseinterestrate() >= 0)) {
    set_fibaseinterestrate(from.fibaseinterestrate());
  }
  if (!(from.fiquotedmargin() <= 0 && from.fiquotedmargin() >= 0)) {
    set_fiquotedmargin(from.fiquotedmargin());
  }
  if (!(from.fitotalissuance() <= 0 && from.fitotalissuance() >= 0)) {
    set_fitotalissuance(from.fitotalissuance());
  }
  if (from.fitimelimit() != 0) {
    set_fitimelimit(from.fitimelimit());
  }
  if (from.optionadjusttimes() != 0) {
    set_optionadjusttimes(from.optionadjusttimes());
  }
  if (!(from.fitotalshortsellquota() <= 0 && from.fitotalshortsellquota() >= 0)) {
    set_fitotalshortsellquota(from.fitotalshortsellquota());
  }
  if (!(from.fidealershortsellquota() <= 0 && from.fidealershortsellquota() >= 0)) {
    set_fidealershortsellquota(from.fidealershortsellquota());
  }
  if (!(from.fipreclosepx() <= 0 && from.fipreclosepx() >= 0)) {
    set_fipreclosepx(from.fipreclosepx());
  }
  if (!(from.fipreweightedpx() <= 0 && from.fipreweightedpx() >= 0)) {
    set_fipreweightedpx(from.fipreweightedpx());
  }
  if (from.optioncontractposition() != 0) {
    set_optioncontractposition(from.optioncontractposition());
  }
  if (from.optionbuyqtyupperlimit() != 0) {
    set_optionbuyqtyupperlimit(from.optionbuyqtyupperlimit());
  }
  if (from.optionsellqtyupperlimit() != 0) {
    set_optionsellqtyupperlimit(from.optionsellqtyupperlimit());
  }
  if (from.optionmarketorderbuyqtyupperlimit() != 0) {
    set_optionmarketorderbuyqtyupperlimit(from.optionmarketorderbuyqtyupperlimit());
  }
  if (from.optionmarketordersellqtyupperlimit() != 0) {
    set_optionmarketordersellqtyupperlimit(from.optionmarketordersellqtyupperlimit());
  }
  if (from.optionquoteorderbuyqtyupperlimit() != 0) {
    set_optionquoteorderbuyqtyupperlimit(from.optionquoteorderbuyqtyupperlimit());
  }
  if (from.optionquoteordersellqtyupperlimit() != 0) {
    set_optionquoteordersellqtyupperlimit(from.optionquoteordersellqtyupperlimit());
  }
  if (from.optionbuyqtyunit() != 0) {
    set_optionbuyqtyunit(from.optionbuyqtyunit());
  }
  if (from.optionsellqtyunit() != 0) {
    set_optionsellqtyunit(from.optionsellqtyunit());
  }
  if (!(from.optionlastsellmargin() <= 0 && from.optionlastsellmargin() >= 0)) {
    set_optionlastsellmargin(from.optionlastsellmargin());
  }
  if (!(from.optionsellmargin() <= 0 && from.optionsellmargin() >= 0)) {
    set_optionsellmargin(from.optionsellmargin());
  }
  if (from.maxmarketordervolume() != 0) {
    set_maxmarketordervolume(from.maxmarketordervolume());
  }
  if (from.minmarketordervolume() != 0) {
    set_minmarketordervolume(from.minmarketordervolume());
  }
  if (from.maxlimitordervolume() != 0) {
    set_maxlimitordervolume(from.maxlimitordervolume());
  }
  if (from.minlimitordervolume() != 0) {
    set_minlimitordervolume(from.minlimitordervolume());
  }
  if (from.volumemultiple() != 0) {
    set_volumemultiple(from.volumemultiple());
  }
  if (!(from.longmarginratio() <= 0 && from.longmarginratio() >= 0)) {
    set_longmarginratio(from.longmarginratio());
  }
  if (!(from.shortmarginratio() <= 0 && from.shortmarginratio() >= 0)) {
    set_shortmarginratio(from.shortmarginratio());
  }
  if (!(from.strikeprice() <= 0 && from.strikeprice() >= 0)) {
    set_strikeprice(from.strikeprice());
  }
  if (!(from.preopeninterest() <= 0 && from.preopeninterest() >= 0)) {
    set_preopeninterest(from.preopeninterest());
  }
  if (from.buyqtyunit() != 0) {
    set_buyqtyunit(from.buyqtyunit());
  }
  if (from.sellqtyunit() != 0) {
    set_sellqtyunit(from.sellqtyunit());
  }
  if (from.buyqtyupperlimit() != 0) {
    set_buyqtyupperlimit(from.buyqtyupperlimit());
  }
  if (from.sellqtyupperlimit() != 0) {
    set_sellqtyupperlimit(from.sellqtyupperlimit());
  }
  if (from.buyqtylowerlimit() != 0) {
    set_buyqtylowerlimit(from.buyqtylowerlimit());
  }
  if (from.sellqtylowerlimit() != 0) {
    set_sellqtylowerlimit(from.sellqtylowerlimit());
  }
  if (from.vcmflag() != 0) {
    set_vcmflag(from.vcmflag());
  }
  if (from.casflag() != 0) {
    set_casflag(from.casflag());
  }
  if (!(from.posupperlimitpx() <= 0 && from.posupperlimitpx() >= 0)) {
    set_posupperlimitpx(from.posupperlimitpx());
  }
  if (!(from.poslowerlimitpx() <= 0 && from.poslowerlimitpx() >= 0)) {
    set_poslowerlimitpx(from.poslowerlimitpx());
  }
  if (from.posflag() != 0) {
    set_posflag(from.posflag());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void MDBasicInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDBasicInfo::CopyFrom(const MDBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDBasicInfo::IsInitialized() const {
  return true;
}

void MDBasicInfo::Swap(MDBasicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDBasicInfo::InternalSwap(MDBasicInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&constantparams_)->InternalSwap(CastToBase(&other->constantparams_));
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chispelling_.Swap(&other->chispelling_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  englishname_.Swap(&other->englishname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  securitysubtype_.Swap(&other->securitysubtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  listdate_.Swap(&other->listdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradingphasecode_.Swap(&other->tradingphasecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchangedate_.Swap(&other->exchangedate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchangesymbol_.Swap(&other->exchangesymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hkspreadtablecode_.Swap(&other->hkspreadtablecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optioncontractid_.Swap(&other->optioncontractid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optioncontractsymbol_.Swap(&other->optioncontractsymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionunderlyingsecurityid_.Swap(&other->optionunderlyingsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionunderlyingsymbol_.Swap(&other->optionunderlyingsymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionunderlyingtype_.Swap(&other->optionunderlyingtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionoptiontype_.Swap(&other->optionoptiontype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optioncallorput_.Swap(&other->optioncallorput_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionstartdate_.Swap(&other->optionstartdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionenddate_.Swap(&other->optionenddate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionexercisedate_.Swap(&other->optionexercisedate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optiondeliverydate_.Swap(&other->optiondeliverydate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionexpiredate_.Swap(&other->optionexpiredate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionupdateversion_.Swap(&other->optionupdateversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionpricelimittype_.Swap(&other->optionpricelimittype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionsecuritystatusflag_.Swap(&other->optionsecuritystatusflag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optioncarryinterestdate_.Swap(&other->optioncarryinterestdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionearlyexpiredate_.Swap(&other->optionearlyexpiredate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionstrategysecurityid_.Swap(&other->optionstrategysecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fitradeproducttype_.Swap(&other->fitradeproducttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fisecurityproperty_.Swap(&other->fisecurityproperty_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fisecuritystatus_.Swap(&other->fisecuritystatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fipledgedsecurityid_.Swap(&other->fipledgedsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fiopentime_.Swap(&other->fiopentime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ficlosetime_.Swap(&other->ficlosetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fiissuemode_.Swap(&other->fiissuemode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fiinteresttype_.Swap(&other->fiinteresttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fiinterestfrequency_.Swap(&other->fiinterestfrequency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fiissuestartdate_.Swap(&other->fiissuestartdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fiissueenddate_.Swap(&other->fiissueenddate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filistdate_.Swap(&other->filistdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fiexpiredate_.Swap(&other->fiexpiredate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  finationaldebttype_.Swap(&other->finationaldebttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fiissuemethod_.Swap(&other->fiissuemethod_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionlisttype_.Swap(&other->optionlisttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optiondeliverytype_.Swap(&other->optiondeliverytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optionmarketmakerflag_.Swap(&other->optionmarketmakerflag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optioncombinationstrategy_.Swap(&other->optioncombinationstrategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deliveryyear_.Swap(&other->deliveryyear_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deliverymonth_.Swap(&other->deliverymonth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrumentid_.Swap(&other->instrumentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrumentname_.Swap(&other->instrumentname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchangeinstid_.Swap(&other->exchangeinstid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  productid_.Swap(&other->productid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdate_.Swap(&other->createdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expiredate_.Swap(&other->expiredate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  startdelivdate_.Swap(&other->startdelivdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enddelivdate_.Swap(&other->enddelivdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  positiontype_.Swap(&other->positiontype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  maxmarginsidealgorithm_.Swap(&other->maxmarginsidealgorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  formersymbol_.Swap(&other->formersymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  delistdate_.Swap(&other->delistdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  basecontractid_.Swap(&other->basecontractid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interestaccrualdate_.Swap(&other->interestaccrualdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(securityidsource_, other->securityidsource_);
  swap(securitytype_, other->securitytype_);
  swap(outstandingshare_, other->outstandingshare_);
  swap(publicfloatsharequantity_, other->publicfloatsharequantity_);
  swap(preclosepx_, other->preclosepx_);
  swap(maxpx_, other->maxpx_);
  swap(minpx_, other->minpx_);
  swap(lotsize_, other->lotsize_);
  swap(mddate_, other->mddate_);
  swap(loanmarginindicator_, other->loanmarginindicator_);
  swap(ticksize_, other->ticksize_);
  swap(pxaccuracy_, other->pxaccuracy_);
  swap(ipoprofitable_, other->ipoprofitable_);
  swap(presettlepx_, other->presettlepx_);
  swap(diffrightsindicator_, other->diffrightsindicator_);
  swap(shhkconnect_, other->shhkconnect_);
  swap(preiopv_, other->preiopv_);
  swap(optioncontractmultiplierunit_, other->optioncontractmultiplierunit_);
  swap(optionexerciseprice_, other->optionexerciseprice_);
  swap(optiontotallongposition_, other->optiontotallongposition_);
  swap(optionsecurityclosepx_, other->optionsecurityclosepx_);
  swap(optionsettlprice_, other->optionsettlprice_);
  swap(optionunderlyingclosepx_, other->optionunderlyingclosepx_);
  swap(optiondailypriceuplimit_, other->optiondailypriceuplimit_);
  swap(optiondailypricedownlimit_, other->optiondailypricedownlimit_);
  swap(optionmarginunit_, other->optionmarginunit_);
  swap(optionmarginratioparam1_, other->optionmarginratioparam1_);
  swap(szhkconnect_, other->szhkconnect_);
  swap(shortsellflag_, other->shortsellflag_);
  swap(ficrossmarket_, other->ficrossmarket_);
  swap(fishortsellflag_, other->fishortsellflag_);
  swap(optionmarginratioparam2_, other->optionmarginratioparam2_);
  swap(optionroundlot_, other->optionroundlot_);
  swap(optionlmtordminfloor_, other->optionlmtordminfloor_);
  swap(optionlmtordmaxfloor_, other->optionlmtordmaxfloor_);
  swap(optionmktordminfloor_, other->optionmktordminfloor_);
  swap(optionmktordmaxfloor_, other->optionmktordmaxfloor_);
  swap(optionticksize_, other->optionticksize_);
  swap(fifaceamount_, other->fifaceamount_);
  swap(fiissueprice_, other->fiissueprice_);
  swap(figuaranteedinterestrate_, other->figuaranteedinterestrate_);
  swap(fibaseinterestrate_, other->fibaseinterestrate_);
  swap(fiquotedmargin_, other->fiquotedmargin_);
  swap(fitotalissuance_, other->fitotalissuance_);
  swap(fitimelimit_, other->fitimelimit_);
  swap(optionadjusttimes_, other->optionadjusttimes_);
  swap(fitotalshortsellquota_, other->fitotalshortsellquota_);
  swap(fidealershortsellquota_, other->fidealershortsellquota_);
  swap(fipreclosepx_, other->fipreclosepx_);
  swap(fipreweightedpx_, other->fipreweightedpx_);
  swap(optioncontractposition_, other->optioncontractposition_);
  swap(optionbuyqtyupperlimit_, other->optionbuyqtyupperlimit_);
  swap(optionsellqtyupperlimit_, other->optionsellqtyupperlimit_);
  swap(optionmarketorderbuyqtyupperlimit_, other->optionmarketorderbuyqtyupperlimit_);
  swap(optionmarketordersellqtyupperlimit_, other->optionmarketordersellqtyupperlimit_);
  swap(optionquoteorderbuyqtyupperlimit_, other->optionquoteorderbuyqtyupperlimit_);
  swap(optionquoteordersellqtyupperlimit_, other->optionquoteordersellqtyupperlimit_);
  swap(optionbuyqtyunit_, other->optionbuyqtyunit_);
  swap(optionsellqtyunit_, other->optionsellqtyunit_);
  swap(optionlastsellmargin_, other->optionlastsellmargin_);
  swap(optionsellmargin_, other->optionsellmargin_);
  swap(maxmarketordervolume_, other->maxmarketordervolume_);
  swap(minmarketordervolume_, other->minmarketordervolume_);
  swap(maxlimitordervolume_, other->maxlimitordervolume_);
  swap(minlimitordervolume_, other->minlimitordervolume_);
  swap(volumemultiple_, other->volumemultiple_);
  swap(longmarginratio_, other->longmarginratio_);
  swap(shortmarginratio_, other->shortmarginratio_);
  swap(strikeprice_, other->strikeprice_);
  swap(preopeninterest_, other->preopeninterest_);
  swap(buyqtyunit_, other->buyqtyunit_);
  swap(sellqtyunit_, other->sellqtyunit_);
  swap(buyqtyupperlimit_, other->buyqtyupperlimit_);
  swap(sellqtyupperlimit_, other->sellqtyupperlimit_);
  swap(buyqtylowerlimit_, other->buyqtylowerlimit_);
  swap(sellqtylowerlimit_, other->sellqtylowerlimit_);
  swap(vcmflag_, other->vcmflag_);
  swap(casflag_, other->casflag_);
  swap(posupperlimitpx_, other->posupperlimitpx_);
  swap(poslowerlimitpx_, other->poslowerlimitpx_);
  swap(posflag_, other->posflag_);
  swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDBasicInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDBasicInfo* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDBasicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDBasicInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
