// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQuery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDQuery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDQuery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SecuritySourceType.pb.h"
#include "InsightErrorContext.pb.h"
#include "MarketData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDQuery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDQuery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDQuery_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDQueryRequest;
class MDQueryRequestDefaultTypeInternal;
extern MDQueryRequestDefaultTypeInternal _MDQueryRequest_default_instance_;
class MDQueryResponse;
class MDQueryResponseDefaultTypeInternal;
extern MDQueryResponseDefaultTypeInternal _MDQueryResponse_default_instance_;
class QueryParam;
class QueryParamDefaultTypeInternal;
extern QueryParamDefaultTypeInternal _QueryParam_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDQueryRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQueryRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDQueryResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQueryResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::QueryParam* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::QueryParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDQueryRequest) */ {
 public:
  MDQueryRequest();
  virtual ~MDQueryRequest();

  MDQueryRequest(const MDQueryRequest& from);
  MDQueryRequest(MDQueryRequest&& from) noexcept
    : MDQueryRequest() {
    *this = ::std::move(from);
  }

  inline MDQueryRequest& operator=(const MDQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDQueryRequest& operator=(MDQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDQueryRequest* internal_default_instance() {
    return reinterpret_cast<const MDQueryRequest*>(
               &_MDQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDQueryRequest* other);
  friend void swap(MDQueryRequest& a, MDQueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDQueryRequest* New() const final {
    return CreateMaybeMessage<MDQueryRequest>(nullptr);
  }

  MDQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDQueryRequest& from);
  void MergeFrom(const MDQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDQueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDQuery_2eproto);
    return ::descriptor_table_MDQuery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
  int securitysourcetype_size() const;
  void clear_securitysourcetype();
  static const int kSecuritySourceTypeFieldNumber = 2;
  ::com::htsc::mdc::insight::model::SecuritySourceType* mutable_securitysourcetype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >*
      mutable_securitysourcetype();
  const ::com::htsc::mdc::insight::model::SecuritySourceType& securitysourcetype(int index) const;
  ::com::htsc::mdc::insight::model::SecuritySourceType* add_securitysourcetype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >&
      securitysourcetype() const;

  // repeated string htscSecurityIDs = 3;
  int htscsecurityids_size() const;
  void clear_htscsecurityids();
  static const int kHtscSecurityIDsFieldNumber = 3;
  const std::string& htscsecurityids(int index) const;
  std::string* mutable_htscsecurityids(int index);
  void set_htscsecurityids(int index, const std::string& value);
  void set_htscsecurityids(int index, std::string&& value);
  void set_htscsecurityids(int index, const char* value);
  void set_htscsecurityids(int index, const char* value, size_t size);
  std::string* add_htscsecurityids();
  void add_htscsecurityids(const std::string& value);
  void add_htscsecurityids(std::string&& value);
  void add_htscsecurityids(const char* value);
  void add_htscsecurityids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& htscsecurityids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_htscsecurityids();

  // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
  int queryparams_size() const;
  void clear_queryparams();
  static const int kQueryParamsFieldNumber = 4;
  ::com::htsc::mdc::insight::model::QueryParam* mutable_queryparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam >*
      mutable_queryparams();
  const ::com::htsc::mdc::insight::model::QueryParam& queryparams(int index) const;
  ::com::htsc::mdc::insight::model::QueryParam* add_queryparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam >&
      queryparams() const;

  // int32 queryType = 1;
  void clear_querytype();
  static const int kQueryTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 querytype() const;
  void set_querytype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDQueryRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType > securitysourcetype_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> htscsecurityids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam > queryparams_;
  ::PROTOBUF_NAMESPACE_ID::int32 querytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDQuery_2eproto;
};
// -------------------------------------------------------------------

class QueryParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.QueryParam) */ {
 public:
  QueryParam();
  virtual ~QueryParam();

  QueryParam(const QueryParam& from);
  QueryParam(QueryParam&& from) noexcept
    : QueryParam() {
    *this = ::std::move(from);
  }

  inline QueryParam& operator=(const QueryParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParam& operator=(QueryParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryParam* internal_default_instance() {
    return reinterpret_cast<const QueryParam*>(
               &_QueryParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(QueryParam* other);
  friend void swap(QueryParam& a, QueryParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryParam* New() const final {
    return CreateMaybeMessage<QueryParam>(nullptr);
  }

  QueryParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryParam& from);
  void MergeFrom(const QueryParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.QueryParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDQuery_2eproto);
    return ::descriptor_table_MDQuery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string paramType = 1;
  void clear_paramtype();
  static const int kParamTypeFieldNumber = 1;
  const std::string& paramtype() const;
  void set_paramtype(const std::string& value);
  void set_paramtype(std::string&& value);
  void set_paramtype(const char* value);
  void set_paramtype(const char* value, size_t size);
  std::string* mutable_paramtype();
  std::string* release_paramtype();
  void set_allocated_paramtype(std::string* paramtype);

  // string paramValue = 2;
  void clear_paramvalue();
  static const int kParamValueFieldNumber = 2;
  const std::string& paramvalue() const;
  void set_paramvalue(const std::string& value);
  void set_paramvalue(std::string&& value);
  void set_paramvalue(const char* value);
  void set_paramvalue(const char* value, size_t size);
  std::string* mutable_paramvalue();
  std::string* release_paramvalue();
  void set_allocated_paramvalue(std::string* paramvalue);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.QueryParam)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDQuery_2eproto;
};
// -------------------------------------------------------------------

class MDQueryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDQueryResponse) */ {
 public:
  MDQueryResponse();
  virtual ~MDQueryResponse();

  MDQueryResponse(const MDQueryResponse& from);
  MDQueryResponse(MDQueryResponse&& from) noexcept
    : MDQueryResponse() {
    *this = ::std::move(from);
  }

  inline MDQueryResponse& operator=(const MDQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDQueryResponse& operator=(MDQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDQueryResponse* internal_default_instance() {
    return reinterpret_cast<const MDQueryResponse*>(
               &_MDQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MDQueryResponse* other);
  friend void swap(MDQueryResponse& a, MDQueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDQueryResponse* New() const final {
    return CreateMaybeMessage<MDQueryResponse>(nullptr);
  }

  MDQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDQueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDQueryResponse& from);
  void MergeFrom(const MDQueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDQueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDQueryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDQuery_2eproto);
    return ::descriptor_table_MDQuery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  bool has_errorcontext() const;
  void clear_errorcontext();
  static const int kErrorContextFieldNumber = 3;
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
  bool has_marketdatastream() const;
  void clear_marketdatastream();
  static const int kMarketDataStreamFieldNumber = 4;
  const ::com::htsc::mdc::insight::model::MarketDataStream& marketdatastream() const;
  ::com::htsc::mdc::insight::model::MarketDataStream* release_marketdatastream();
  ::com::htsc::mdc::insight::model::MarketDataStream* mutable_marketdatastream();
  void set_allocated_marketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream);

  // int32 queryType = 1;
  void clear_querytype();
  static const int kQueryTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 querytype() const;
  void set_querytype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool isSuccess = 2;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 2;
  bool issuccess() const;
  void set_issuccess(bool value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDQueryResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
  ::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream_;
  ::PROTOBUF_NAMESPACE_ID::int32 querytype_;
  bool issuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDQuery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDQueryRequest

// int32 queryType = 1;
inline void MDQueryRequest::clear_querytype() {
  querytype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQueryRequest::querytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryRequest.queryType)
  return querytype_;
}
inline void MDQueryRequest::set_querytype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  querytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryRequest.queryType)
}

// repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
inline int MDQueryRequest::securitysourcetype_size() const {
  return securitysourcetype_.size();
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* MDQueryRequest::mutable_securitysourcetype(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return securitysourcetype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >*
MDQueryRequest::mutable_securitysourcetype() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return &securitysourcetype_;
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& MDQueryRequest::securitysourcetype(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return securitysourcetype_.Get(index);
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* MDQueryRequest::add_securitysourcetype() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return securitysourcetype_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >&
MDQueryRequest::securitysourcetype() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return securitysourcetype_;
}

// repeated string htscSecurityIDs = 3;
inline int MDQueryRequest::htscsecurityids_size() const {
  return htscsecurityids_.size();
}
inline void MDQueryRequest::clear_htscsecurityids() {
  htscsecurityids_.Clear();
}
inline const std::string& MDQueryRequest::htscsecurityids(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return htscsecurityids_.Get(index);
}
inline std::string* MDQueryRequest::mutable_htscsecurityids(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return htscsecurityids_.Mutable(index);
}
inline void MDQueryRequest::set_htscsecurityids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  htscsecurityids_.Mutable(index)->assign(value);
}
inline void MDQueryRequest::set_htscsecurityids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  htscsecurityids_.Mutable(index)->assign(std::move(value));
}
inline void MDQueryRequest::set_htscsecurityids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  htscsecurityids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::set_htscsecurityids(int index, const char* value, size_t size) {
  htscsecurityids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline std::string* MDQueryRequest::add_htscsecurityids() {
  // @@protoc_insertion_point(field_add_mutable:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return htscsecurityids_.Add();
}
inline void MDQueryRequest::add_htscsecurityids(const std::string& value) {
  htscsecurityids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::add_htscsecurityids(std::string&& value) {
  htscsecurityids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::add_htscsecurityids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  htscsecurityids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::add_htscsecurityids(const char* value, size_t size) {
  htscsecurityids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MDQueryRequest::htscsecurityids() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return htscsecurityids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MDQueryRequest::mutable_htscsecurityids() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return &htscsecurityids_;
}

// repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
inline int MDQueryRequest::queryparams_size() const {
  return queryparams_.size();
}
inline void MDQueryRequest::clear_queryparams() {
  queryparams_.Clear();
}
inline ::com::htsc::mdc::insight::model::QueryParam* MDQueryRequest::mutable_queryparams(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return queryparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam >*
MDQueryRequest::mutable_queryparams() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return &queryparams_;
}
inline const ::com::htsc::mdc::insight::model::QueryParam& MDQueryRequest::queryparams(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return queryparams_.Get(index);
}
inline ::com::htsc::mdc::insight::model::QueryParam* MDQueryRequest::add_queryparams() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return queryparams_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam >&
MDQueryRequest::queryparams() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return queryparams_;
}

// -------------------------------------------------------------------

// QueryParam

// string paramType = 1;
inline void QueryParam::clear_paramtype() {
  paramtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryParam::paramtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.QueryParam.paramType)
  return paramtype_.GetNoArena();
}
inline void QueryParam::set_paramtype(const std::string& value) {
  
  paramtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.QueryParam.paramType)
}
inline void QueryParam::set_paramtype(std::string&& value) {
  
  paramtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.QueryParam.paramType)
}
inline void QueryParam::set_paramtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paramtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.QueryParam.paramType)
}
inline void QueryParam::set_paramtype(const char* value, size_t size) {
  
  paramtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.QueryParam.paramType)
}
inline std::string* QueryParam::mutable_paramtype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.QueryParam.paramType)
  return paramtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryParam::release_paramtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.QueryParam.paramType)
  
  return paramtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryParam::set_allocated_paramtype(std::string* paramtype) {
  if (paramtype != nullptr) {
    
  } else {
    
  }
  paramtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramtype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.QueryParam.paramType)
}

// string paramValue = 2;
inline void QueryParam::clear_paramvalue() {
  paramvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryParam::paramvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.QueryParam.paramValue)
  return paramvalue_.GetNoArena();
}
inline void QueryParam::set_paramvalue(const std::string& value) {
  
  paramvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.QueryParam.paramValue)
}
inline void QueryParam::set_paramvalue(std::string&& value) {
  
  paramvalue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.QueryParam.paramValue)
}
inline void QueryParam::set_paramvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paramvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.QueryParam.paramValue)
}
inline void QueryParam::set_paramvalue(const char* value, size_t size) {
  
  paramvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.QueryParam.paramValue)
}
inline std::string* QueryParam::mutable_paramvalue() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.QueryParam.paramValue)
  return paramvalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryParam::release_paramvalue() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.QueryParam.paramValue)
  
  return paramvalue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryParam::set_allocated_paramvalue(std::string* paramvalue) {
  if (paramvalue != nullptr) {
    
  } else {
    
  }
  paramvalue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramvalue);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.QueryParam.paramValue)
}

// -------------------------------------------------------------------

// MDQueryResponse

// int32 queryType = 1;
inline void MDQueryResponse::clear_querytype() {
  querytype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQueryResponse::querytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryResponse.queryType)
  return querytype_;
}
inline void MDQueryResponse::set_querytype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  querytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryResponse.queryType)
}

// bool isSuccess = 2;
inline void MDQueryResponse::clear_issuccess() {
  issuccess_ = false;
}
inline bool MDQueryResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryResponse.isSuccess)
  return issuccess_;
}
inline void MDQueryResponse::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
inline bool MDQueryResponse::has_errorcontext() const {
  return this != internal_default_instance() && errorcontext_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& MDQueryResponse::errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = errorcontext_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      &::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDQueryResponse::release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = errorcontext_;
  errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDQueryResponse::mutable_errorcontext() {
  
  if (errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaNoVirtual());
    errorcontext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
  return errorcontext_;
}
inline void MDQueryResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
}

// .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
inline bool MDQueryResponse::has_marketdatastream() const {
  return this != internal_default_instance() && marketdatastream_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MarketDataStream& MDQueryResponse::marketdatastream() const {
  const ::com::htsc::mdc::insight::model::MarketDataStream* p = marketdatastream_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MarketDataStream*>(
      &::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MDQueryResponse::release_marketdatastream() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
  
  ::com::htsc::mdc::insight::model::MarketDataStream* temp = marketdatastream_;
  marketdatastream_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MDQueryResponse::mutable_marketdatastream() {
  
  if (marketdatastream_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketDataStream>(GetArenaNoVirtual());
    marketdatastream_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
  return marketdatastream_;
}
inline void MDQueryResponse::set_allocated_marketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdatastream_);
  }
  if (marketdatastream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marketdatastream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketdatastream, submessage_arena);
    }
    
  } else {
    
  }
  marketdatastream_ = marketdatastream;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDQuery_2eproto
