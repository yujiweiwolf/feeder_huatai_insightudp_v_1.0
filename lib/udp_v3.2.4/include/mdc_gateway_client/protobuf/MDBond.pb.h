// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDBond.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDBond_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDBond_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDBond_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDBond_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDBond_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDBond;
class MDBondDefaultTypeInternal;
extern MDBondDefaultTypeInternal _MDBond_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDBond* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBond>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDBond :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDBond) */ {
 public:
  MDBond();
  virtual ~MDBond();

  MDBond(const MDBond& from);
  MDBond(MDBond&& from) noexcept
    : MDBond() {
    *this = ::std::move(from);
  }

  inline MDBond& operator=(const MDBond& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDBond& operator=(MDBond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDBond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDBond* internal_default_instance() {
    return reinterpret_cast<const MDBond*>(
               &_MDBond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDBond* other);
  friend void swap(MDBond& a, MDBond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDBond* New() const final {
    return CreateMaybeMessage<MDBond>(nullptr);
  }

  MDBond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDBond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDBond& from);
  void MergeFrom(const MDBond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDBond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDBond";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDBond_2eproto);
    return ::descriptor_table_MDBond_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 BuyPriceQueue = 51 [packed = true];
  int buypricequeue_size() const;
  void clear_buypricequeue();
  static const int kBuyPriceQueueFieldNumber = 51;
  ::PROTOBUF_NAMESPACE_ID::int64 buypricequeue(int index) const;
  void set_buypricequeue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buypricequeue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buypricequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buypricequeue();

  // repeated int64 BuyOrderQtyQueue = 52 [packed = true];
  int buyorderqtyqueue_size() const;
  void clear_buyorderqtyqueue();
  static const int kBuyOrderQtyQueueFieldNumber = 52;
  ::PROTOBUF_NAMESPACE_ID::int64 buyorderqtyqueue(int index) const;
  void set_buyorderqtyqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buyorderqtyqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buyorderqtyqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buyorderqtyqueue();

  // repeated int64 SellPriceQueue = 53 [packed = true];
  int sellpricequeue_size() const;
  void clear_sellpricequeue();
  static const int kSellPriceQueueFieldNumber = 53;
  ::PROTOBUF_NAMESPACE_ID::int64 sellpricequeue(int index) const;
  void set_sellpricequeue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellpricequeue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellpricequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellpricequeue();

  // repeated int64 SellOrderQtyQueue = 54 [packed = true];
  int sellorderqtyqueue_size() const;
  void clear_sellorderqtyqueue();
  static const int kSellOrderQtyQueueFieldNumber = 54;
  ::PROTOBUF_NAMESPACE_ID::int64 sellorderqtyqueue(int index) const;
  void set_sellorderqtyqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellorderqtyqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellorderqtyqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellorderqtyqueue();

  // repeated int64 BuyOrderQueue = 55 [packed = true];
  int buyorderqueue_size() const;
  void clear_buyorderqueue();
  static const int kBuyOrderQueueFieldNumber = 55;
  ::PROTOBUF_NAMESPACE_ID::int64 buyorderqueue(int index) const;
  void set_buyorderqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buyorderqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buyorderqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buyorderqueue();

  // repeated int64 SellOrderQueue = 56 [packed = true];
  int sellorderqueue_size() const;
  void clear_sellorderqueue();
  static const int kSellOrderQueueFieldNumber = 56;
  ::PROTOBUF_NAMESPACE_ID::int64 sellorderqueue(int index) const;
  void set_sellorderqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellorderqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellorderqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellorderqueue();

  // repeated int64 BuyNumOrdersQueue = 57 [packed = true];
  int buynumordersqueue_size() const;
  void clear_buynumordersqueue();
  static const int kBuyNumOrdersQueueFieldNumber = 57;
  ::PROTOBUF_NAMESPACE_ID::int64 buynumordersqueue(int index) const;
  void set_buynumordersqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buynumordersqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buynumordersqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buynumordersqueue();

  // repeated int64 SellNumOrdersQueue = 58 [packed = true];
  int sellnumordersqueue_size() const;
  void clear_sellnumordersqueue();
  static const int kSellNumOrdersQueueFieldNumber = 58;
  ::PROTOBUF_NAMESPACE_ID::int64 sellnumordersqueue(int index) const;
  void set_sellnumordersqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellnumordersqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellnumordersqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellnumordersqueue();

  // repeated int32 BuySettlTypeQueue = 62 [packed = true];
  int buysettltypequeue_size() const;
  void clear_buysettltypequeue();
  static const int kBuySettlTypeQueueFieldNumber = 62;
  ::PROTOBUF_NAMESPACE_ID::int32 buysettltypequeue(int index) const;
  void set_buysettltypequeue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buysettltypequeue(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buysettltypequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buysettltypequeue();

  // repeated int32 SellSettlTypeQueue = 63 [packed = true];
  int sellsettltypequeue_size() const;
  void clear_sellsettltypequeue();
  static const int kSellSettlTypeQueueFieldNumber = 63;
  ::PROTOBUF_NAMESPACE_ID::int32 sellsettltypequeue(int index) const;
  void set_sellsettltypequeue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sellsettltypequeue(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sellsettltypequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sellsettltypequeue();

  // repeated int64 BuyYieldQueue = 64 [packed = true];
  int buyyieldqueue_size() const;
  void clear_buyyieldqueue();
  static const int kBuyYieldQueueFieldNumber = 64;
  ::PROTOBUF_NAMESPACE_ID::int64 buyyieldqueue(int index) const;
  void set_buyyieldqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buyyieldqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buyyieldqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buyyieldqueue();

  // repeated int64 SellYieldQueue = 65 [packed = true];
  int sellyieldqueue_size() const;
  void clear_sellyieldqueue();
  static const int kSellYieldQueueFieldNumber = 65;
  ::PROTOBUF_NAMESPACE_ID::int64 sellyieldqueue(int index) const;
  void set_sellyieldqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellyieldqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellyieldqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellyieldqueue();

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 5;
  const std::string& tradingphasecode() const;
  void set_tradingphasecode(const std::string& value);
  void set_tradingphasecode(std::string&& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  std::string* mutable_tradingphasecode();
  std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);

  // string MarketPhaseCode = 76;
  void clear_marketphasecode();
  static const int kMarketPhaseCodeFieldNumber = 76;
  const std::string& marketphasecode() const;
  void set_marketphasecode(const std::string& value);
  void set_marketphasecode(std::string&& value);
  void set_marketphasecode(const char* value);
  void set_marketphasecode(const char* value, size_t size);
  std::string* mutable_marketphasecode();
  std::string* release_marketphasecode();
  void set_allocated_marketphasecode(std::string* marketphasecode);

  // string SubTradingPhaseCode1 = 77;
  void clear_subtradingphasecode1();
  static const int kSubTradingPhaseCode1FieldNumber = 77;
  const std::string& subtradingphasecode1() const;
  void set_subtradingphasecode1(const std::string& value);
  void set_subtradingphasecode1(std::string&& value);
  void set_subtradingphasecode1(const char* value);
  void set_subtradingphasecode1(const char* value, size_t size);
  std::string* mutable_subtradingphasecode1();
  std::string* release_subtradingphasecode1();
  void set_allocated_subtradingphasecode1(std::string* subtradingphasecode1);

  // string SubTradingPhaseCode2 = 78;
  void clear_subtradingphasecode2();
  static const int kSubTradingPhaseCode2FieldNumber = 78;
  const std::string& subtradingphasecode2() const;
  void set_subtradingphasecode2(const std::string& value);
  void set_subtradingphasecode2(std::string&& value);
  void set_subtradingphasecode2(const char* value);
  void set_subtradingphasecode2(const char* value, size_t size);
  std::string* mutable_subtradingphasecode2();
  std::string* release_subtradingphasecode2();
  void set_allocated_subtradingphasecode2(std::string* subtradingphasecode2);

  // string SubTradingPhaseCode3 = 79;
  void clear_subtradingphasecode3();
  static const int kSubTradingPhaseCode3FieldNumber = 79;
  const std::string& subtradingphasecode3() const;
  void set_subtradingphasecode3(const std::string& value);
  void set_subtradingphasecode3(std::string&& value);
  void set_subtradingphasecode3(const char* value);
  void set_subtradingphasecode3(const char* value, size_t size);
  std::string* mutable_subtradingphasecode3();
  std::string* release_subtradingphasecode3();
  void set_allocated_subtradingphasecode3(std::string* subtradingphasecode3);

  // string SubTradingPhaseCode4 = 80;
  void clear_subtradingphasecode4();
  static const int kSubTradingPhaseCode4FieldNumber = 80;
  const std::string& subtradingphasecode4() const;
  void set_subtradingphasecode4(const std::string& value);
  void set_subtradingphasecode4(std::string&& value);
  void set_subtradingphasecode4(const char* value);
  void set_subtradingphasecode4(const char* value, size_t size);
  std::string* mutable_subtradingphasecode4();
  std::string* release_subtradingphasecode4();
  void set_allocated_subtradingphasecode4(std::string* subtradingphasecode4);

  // string SubTradingPhaseCode5 = 81;
  void clear_subtradingphasecode5();
  static const int kSubTradingPhaseCode5FieldNumber = 81;
  const std::string& subtradingphasecode5() const;
  void set_subtradingphasecode5(const std::string& value);
  void set_subtradingphasecode5(std::string&& value);
  void set_subtradingphasecode5(const char* value);
  void set_subtradingphasecode5(const char* value, size_t size);
  std::string* mutable_subtradingphasecode5();
  std::string* release_subtradingphasecode5();
  void set_allocated_subtradingphasecode5(std::string* subtradingphasecode5);

  // string TradingHaltReason = 88;
  void clear_tradinghaltreason();
  static const int kTradingHaltReasonFieldNumber = 88;
  const std::string& tradinghaltreason() const;
  void set_tradinghaltreason(const std::string& value);
  void set_tradinghaltreason(std::string&& value);
  void set_tradinghaltreason(const char* value);
  void set_tradinghaltreason(const char* value, size_t size);
  std::string* mutable_tradinghaltreason();
  std::string* release_tradinghaltreason();
  void set_allocated_tradinghaltreason(std::string* tradinghaltreason);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int64 MaxPx = 8;
  void clear_maxpx();
  static const int kMaxPxFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 maxpx() const;
  void set_maxpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MinPx = 9;
  void clear_minpx();
  static const int kMinPxFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 minpx() const;
  void set_minpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreClosePx = 10;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx() const;
  void set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 NumTrades = 11;
  void clear_numtrades();
  static const int kNumTradesFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 numtrades() const;
  void set_numtrades(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalVolumeTrade = 12;
  void clear_totalvolumetrade();
  static const int kTotalVolumeTradeFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolumetrade() const;
  void set_totalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalValueTrade = 13;
  void clear_totalvaluetrade();
  static const int kTotalValueTradeFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvaluetrade() const;
  void set_totalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LastPx = 14;
  void clear_lastpx();
  static const int kLastPxFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx() const;
  void set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OpenPx = 15;
  void clear_openpx();
  static const int kOpenPxFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 openpx() const;
  void set_openpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ClosePx = 16;
  void clear_closepx();
  static const int kClosePxFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int64 closepx() const;
  void set_closepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HighPx = 17;
  void clear_highpx();
  static const int kHighPxFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int64 highpx() const;
  void set_highpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LowPx = 18;
  void clear_lowpx();
  static const int kLowPxFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int64 lowpx() const;
  void set_lowpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 DiffPx1 = 19;
  void clear_diffpx1();
  static const int kDiffPx1FieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int64 diffpx1() const;
  void set_diffpx1(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 DiffPx2 = 20;
  void clear_diffpx2();
  static const int kDiffPx2FieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int64 diffpx2() const;
  void set_diffpx2(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalBuyQty = 21;
  void clear_totalbuyqty();
  static const int kTotalBuyQtyFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int64 totalbuyqty() const;
  void set_totalbuyqty(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalSellQty = 22;
  void clear_totalsellqty();
  static const int kTotalSellQtyFieldNumber = 22;
  ::PROTOBUF_NAMESPACE_ID::int64 totalsellqty() const;
  void set_totalsellqty(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WeightedAvgBuyPx = 23;
  void clear_weightedavgbuypx();
  static const int kWeightedAvgBuyPxFieldNumber = 23;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgbuypx() const;
  void set_weightedavgbuypx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WeightedAvgSellPx = 24;
  void clear_weightedavgsellpx();
  static const int kWeightedAvgSellPxFieldNumber = 24;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgsellpx() const;
  void set_weightedavgsellpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WithdrawBuyNumber = 25;
  void clear_withdrawbuynumber();
  static const int kWithdrawBuyNumberFieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawbuynumber() const;
  void set_withdrawbuynumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WithdrawBuyAmount = 26;
  void clear_withdrawbuyamount();
  static const int kWithdrawBuyAmountFieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawbuyamount() const;
  void set_withdrawbuyamount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WithdrawBuyMoney = 27;
  void clear_withdrawbuymoney();
  static const int kWithdrawBuyMoneyFieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawbuymoney() const;
  void set_withdrawbuymoney(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WithdrawSellNumber = 28;
  void clear_withdrawsellnumber();
  static const int kWithdrawSellNumberFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawsellnumber() const;
  void set_withdrawsellnumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WithdrawSellAmount = 29;
  void clear_withdrawsellamount();
  static const int kWithdrawSellAmountFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawsellamount() const;
  void set_withdrawsellamount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WithdrawSellMoney = 30;
  void clear_withdrawsellmoney();
  static const int kWithdrawSellMoneyFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawsellmoney() const;
  void set_withdrawsellmoney(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalBuyNumber = 31;
  void clear_totalbuynumber();
  static const int kTotalBuyNumberFieldNumber = 31;
  ::PROTOBUF_NAMESPACE_ID::int64 totalbuynumber() const;
  void set_totalbuynumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalSellNumber = 32;
  void clear_totalsellnumber();
  static const int kTotalSellNumberFieldNumber = 32;
  ::PROTOBUF_NAMESPACE_ID::int64 totalsellnumber() const;
  void set_totalsellnumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 BuyTradeMaxDuration = 33;
  void clear_buytrademaxduration();
  static const int kBuyTradeMaxDurationFieldNumber = 33;
  ::PROTOBUF_NAMESPACE_ID::int64 buytrademaxduration() const;
  void set_buytrademaxduration(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 SellTradeMaxDuration = 34;
  void clear_selltrademaxduration();
  static const int kSellTradeMaxDurationFieldNumber = 34;
  ::PROTOBUF_NAMESPACE_ID::int64 selltrademaxduration() const;
  void set_selltrademaxduration(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 NumBuyOrders = 35;
  void clear_numbuyorders();
  static const int kNumBuyOrdersFieldNumber = 35;
  ::PROTOBUF_NAMESPACE_ID::int32 numbuyorders() const;
  void set_numbuyorders(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 NumSellOrders = 36;
  void clear_numsellorders();
  static const int kNumSellOrdersFieldNumber = 36;
  ::PROTOBUF_NAMESPACE_ID::int32 numsellorders() const;
  void set_numsellorders(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 YieldToMaturity = 37;
  void clear_yieldtomaturity();
  static const int kYieldToMaturityFieldNumber = 37;
  ::PROTOBUF_NAMESPACE_ID::int64 yieldtomaturity() const;
  void set_yieldtomaturity(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WeightedAvgPx = 38;
  void clear_weightedavgpx();
  static const int kWeightedAvgPxFieldNumber = 38;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgpx() const;
  void set_weightedavgpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WeightedAvgPxBP = 39;
  void clear_weightedavgpxbp();
  static const int kWeightedAvgPxBPFieldNumber = 39;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgpxbp() const;
  void set_weightedavgpxbp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreCloseWeightedAvgPx = 40;
  void clear_precloseweightedavgpx();
  static const int kPreCloseWeightedAvgPxFieldNumber = 40;
  ::PROTOBUF_NAMESPACE_ID::int64 precloseweightedavgpx() const;
  void set_precloseweightedavgpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ExchangeDate = 41;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 41;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate() const;
  void set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ExchangeTime = 42;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 42;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime() const;
  void set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 PreCloseYield = 43;
  void clear_precloseyield();
  static const int kPreCloseYieldFieldNumber = 43;
  ::PROTOBUF_NAMESPACE_ID::int64 precloseyield() const;
  void set_precloseyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreWeightedAvgYield = 44;
  void clear_preweightedavgyield();
  static const int kPreWeightedAvgYieldFieldNumber = 44;
  ::PROTOBUF_NAMESPACE_ID::int64 preweightedavgyield() const;
  void set_preweightedavgyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OpenYield = 45;
  void clear_openyield();
  static const int kOpenYieldFieldNumber = 45;
  ::PROTOBUF_NAMESPACE_ID::int64 openyield() const;
  void set_openyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HighYield = 46;
  void clear_highyield();
  static const int kHighYieldFieldNumber = 46;
  ::PROTOBUF_NAMESPACE_ID::int64 highyield() const;
  void set_highyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LowYield = 47;
  void clear_lowyield();
  static const int kLowYieldFieldNumber = 47;
  ::PROTOBUF_NAMESPACE_ID::int64 lowyield() const;
  void set_lowyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LastYield = 48;
  void clear_lastyield();
  static const int kLastYieldFieldNumber = 48;
  ::PROTOBUF_NAMESPACE_ID::int64 lastyield() const;
  void set_lastyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 WeightedAvgYield = 49;
  void clear_weightedavgyield();
  static const int kWeightedAvgYieldFieldNumber = 49;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgyield() const;
  void set_weightedavgyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 NorminalPx = 59;
  void clear_norminalpx();
  static const int kNorminalPxFieldNumber = 59;
  ::PROTOBUF_NAMESPACE_ID::int64 norminalpx() const;
  void set_norminalpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ShortSellSharesTraded = 60;
  void clear_shortsellsharestraded();
  static const int kShortSellSharesTradedFieldNumber = 60;
  ::PROTOBUF_NAMESPACE_ID::int64 shortsellsharestraded() const;
  void set_shortsellsharestraded(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ShortSellTurnover = 61;
  void clear_shortsellturnover();
  static const int kShortSellTurnoverFieldNumber = 61;
  ::PROTOBUF_NAMESPACE_ID::int64 shortsellturnover() const;
  void set_shortsellturnover(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreMarketLastPx = 66;
  void clear_premarketlastpx();
  static const int kPreMarketLastPxFieldNumber = 66;
  ::PROTOBUF_NAMESPACE_ID::int64 premarketlastpx() const;
  void set_premarketlastpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ChannelNo = 50;
  void clear_channelno();
  static const int kChannelNoFieldNumber = 50;
  ::PROTOBUF_NAMESPACE_ID::int32 channelno() const;
  void set_channelno(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 LastPxType = 82;
  void clear_lastpxtype();
  static const int kLastPxTypeFieldNumber = 82;
  ::PROTOBUF_NAMESPACE_ID::int32 lastpxtype() const;
  void set_lastpxtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 PreMarketTotalVolumeTrade = 67;
  void clear_premarkettotalvolumetrade();
  static const int kPreMarketTotalVolumeTradeFieldNumber = 67;
  ::PROTOBUF_NAMESPACE_ID::int64 premarkettotalvolumetrade() const;
  void set_premarkettotalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreMarketTotalValueTrade = 68;
  void clear_premarkettotalvaluetrade();
  static const int kPreMarketTotalValueTradeFieldNumber = 68;
  ::PROTOBUF_NAMESPACE_ID::int64 premarkettotalvaluetrade() const;
  void set_premarkettotalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreMarketHighPx = 69;
  void clear_premarkethighpx();
  static const int kPreMarketHighPxFieldNumber = 69;
  ::PROTOBUF_NAMESPACE_ID::int64 premarkethighpx() const;
  void set_premarkethighpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreMarketLowPx = 70;
  void clear_premarketlowpx();
  static const int kPreMarketLowPxFieldNumber = 70;
  ::PROTOBUF_NAMESPACE_ID::int64 premarketlowpx() const;
  void set_premarketlowpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AfterHoursLastPx = 71;
  void clear_afterhourslastpx();
  static const int kAfterHoursLastPxFieldNumber = 71;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourslastpx() const;
  void set_afterhourslastpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AfterHoursTotalVolumeTrade = 72;
  void clear_afterhourstotalvolumetrade();
  static const int kAfterHoursTotalVolumeTradeFieldNumber = 72;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourstotalvolumetrade() const;
  void set_afterhourstotalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AfterHoursTotalValueTrade = 73;
  void clear_afterhourstotalvaluetrade();
  static const int kAfterHoursTotalValueTradeFieldNumber = 73;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourstotalvaluetrade() const;
  void set_afterhourstotalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AfterHoursHighPx = 74;
  void clear_afterhourshighpx();
  static const int kAfterHoursHighPxFieldNumber = 74;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourshighpx() const;
  void set_afterhourshighpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AfterHoursLowPx = 75;
  void clear_afterhourslowpx();
  static const int kAfterHoursLowPxFieldNumber = 75;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourslowpx() const;
  void set_afterhourslowpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AuctionLastPx = 83;
  void clear_auctionlastpx();
  static const int kAuctionLastPxFieldNumber = 83;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionlastpx() const;
  void set_auctionlastpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AuctionVolumeTrade = 84;
  void clear_auctionvolumetrade();
  static const int kAuctionVolumeTradeFieldNumber = 84;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionvolumetrade() const;
  void set_auctionvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AuctionValueTrade = 85;
  void clear_auctionvaluetrade();
  static const int kAuctionValueTradeFieldNumber = 85;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionvaluetrade() const;
  void set_auctionvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 USConsolidateVolume = 86;
  void clear_usconsolidatevolume();
  static const int kUSConsolidateVolumeFieldNumber = 86;
  ::PROTOBUF_NAMESPACE_ID::int64 usconsolidatevolume() const;
  void set_usconsolidatevolume(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 USCompositeClosePx = 87;
  void clear_uscompositeclosepx();
  static const int kUSCompositeClosePxFieldNumber = 87;
  ::PROTOBUF_NAMESPACE_ID::int64 uscompositeclosepx() const;
  void set_uscompositeclosepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OtcTotalVolumeTrade = 89;
  void clear_otctotalvolumetrade();
  static const int kOtcTotalVolumeTradeFieldNumber = 89;
  ::PROTOBUF_NAMESPACE_ID::int64 otctotalvolumetrade() const;
  void set_otctotalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OtcTotalValueTrade = 90;
  void clear_otctotalvaluetrade();
  static const int kOtcTotalValueTradeFieldNumber = 90;
  ::PROTOBUF_NAMESPACE_ID::int64 otctotalvaluetrade() const;
  void set_otctotalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OtcNumTrades = 91;
  void clear_otcnumtrades();
  static const int kOtcNumTradesFieldNumber = 91;
  ::PROTOBUF_NAMESPACE_ID::int64 otcnumtrades() const;
  void set_otcnumtrades(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 DataMultiplePowerOf10 = 92;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 92;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDBond)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buypricequeue_;
  mutable std::atomic<int> _buypricequeue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buyorderqtyqueue_;
  mutable std::atomic<int> _buyorderqtyqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellpricequeue_;
  mutable std::atomic<int> _sellpricequeue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellorderqtyqueue_;
  mutable std::atomic<int> _sellorderqtyqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buyorderqueue_;
  mutable std::atomic<int> _buyorderqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellorderqueue_;
  mutable std::atomic<int> _sellorderqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buynumordersqueue_;
  mutable std::atomic<int> _buynumordersqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellnumordersqueue_;
  mutable std::atomic<int> _sellnumordersqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buysettltypequeue_;
  mutable std::atomic<int> _buysettltypequeue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sellsettltypequeue_;
  mutable std::atomic<int> _sellsettltypequeue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buyyieldqueue_;
  mutable std::atomic<int> _buyyieldqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellyieldqueue_;
  mutable std::atomic<int> _sellyieldqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketphasecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtradingphasecode5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradinghaltreason_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 minpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 numtrades_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 openpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 closepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 highpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 lowpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 diffpx1_;
  ::PROTOBUF_NAMESPACE_ID::int64 diffpx2_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalbuyqty_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalsellqty_;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgbuypx_;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgsellpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawbuynumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawbuyamount_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawbuymoney_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawsellnumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawsellamount_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawsellmoney_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalbuynumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalsellnumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 buytrademaxduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 selltrademaxduration_;
  ::PROTOBUF_NAMESPACE_ID::int32 numbuyorders_;
  ::PROTOBUF_NAMESPACE_ID::int32 numsellorders_;
  ::PROTOBUF_NAMESPACE_ID::int64 yieldtomaturity_;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgpxbp_;
  ::PROTOBUF_NAMESPACE_ID::int64 precloseweightedavgpx_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 precloseyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 preweightedavgyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 openyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 highyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 lowyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 weightedavgyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 norminalpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 shortsellsharestraded_;
  ::PROTOBUF_NAMESPACE_ID::int64 shortsellturnover_;
  ::PROTOBUF_NAMESPACE_ID::int64 premarketlastpx_;
  ::PROTOBUF_NAMESPACE_ID::int32 channelno_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastpxtype_;
  ::PROTOBUF_NAMESPACE_ID::int64 premarkettotalvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 premarkettotalvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 premarkethighpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 premarketlowpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourslastpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourstotalvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourstotalvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourshighpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourslowpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionlastpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 usconsolidatevolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 uscompositeclosepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 otctotalvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 otctotalvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 otcnumtrades_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDBond_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDBond

// string HTSCSecurityID = 1;
inline void MDBond::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void MDBond::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
}
inline void MDBond::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
}
inline void MDBond::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
}
inline void MDBond::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
}
inline std::string* MDBond::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDBond::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MDDate)
  return mddate_;
}
inline void MDBond::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MDDate)
}

// int32 MDTime = 3;
inline void MDBond::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MDTime)
  return mdtime_;
}
inline void MDBond::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDBond::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.DataTimestamp)
  return datatimestamp_;
}
inline void MDBond::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDBond::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
  return tradingphasecode_.GetNoArena();
}
inline void MDBond::set_tradingphasecode(const std::string& value) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
}
inline void MDBond::set_tradingphasecode(std::string&& value) {
  
  tradingphasecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
}
inline void MDBond::set_tradingphasecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
}
inline void MDBond::set_tradingphasecode(const char* value, size_t size) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
}
inline std::string* MDBond::mutable_tradingphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
  
  return tradingphasecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  tradingphasecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDBond::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDBond::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void MDBond::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDBond::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDBond::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void MDBond::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.securityType)
}

// int64 MaxPx = 8;
inline void MDBond::clear_maxpx() {
  maxpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MaxPx)
  return maxpx_;
}
inline void MDBond::set_maxpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MaxPx)
}

// int64 MinPx = 9;
inline void MDBond::clear_minpx() {
  minpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MinPx)
  return minpx_;
}
inline void MDBond::set_minpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MinPx)
}

// int64 PreClosePx = 10;
inline void MDBond::clear_preclosepx() {
  preclosepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreClosePx)
  return preclosepx_;
}
inline void MDBond::set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreClosePx)
}

// int64 NumTrades = 11;
inline void MDBond::clear_numtrades() {
  numtrades_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.NumTrades)
  return numtrades_;
}
inline void MDBond::set_numtrades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.NumTrades)
}

// int64 TotalVolumeTrade = 12;
inline void MDBond::clear_totalvolumetrade() {
  totalvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalVolumeTrade)
  return totalvolumetrade_;
}
inline void MDBond::set_totalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalVolumeTrade)
}

// int64 TotalValueTrade = 13;
inline void MDBond::clear_totalvaluetrade() {
  totalvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalValueTrade)
  return totalvaluetrade_;
}
inline void MDBond::set_totalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalValueTrade)
}

// int64 LastPx = 14;
inline void MDBond::clear_lastpx() {
  lastpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LastPx)
  return lastpx_;
}
inline void MDBond::set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LastPx)
}

// int64 OpenPx = 15;
inline void MDBond::clear_openpx() {
  openpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OpenPx)
  return openpx_;
}
inline void MDBond::set_openpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OpenPx)
}

// int64 ClosePx = 16;
inline void MDBond::clear_closepx() {
  closepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ClosePx)
  return closepx_;
}
inline void MDBond::set_closepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ClosePx)
}

// int64 HighPx = 17;
inline void MDBond::clear_highpx() {
  highpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.HighPx)
  return highpx_;
}
inline void MDBond::set_highpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  highpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.HighPx)
}

// int64 LowPx = 18;
inline void MDBond::clear_lowpx() {
  lowpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LowPx)
  return lowpx_;
}
inline void MDBond::set_lowpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LowPx)
}

// int64 DiffPx1 = 19;
inline void MDBond::clear_diffpx1() {
  diffpx1_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::diffpx1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.DiffPx1)
  return diffpx1_;
}
inline void MDBond::set_diffpx1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  diffpx1_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.DiffPx1)
}

// int64 DiffPx2 = 20;
inline void MDBond::clear_diffpx2() {
  diffpx2_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::diffpx2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.DiffPx2)
  return diffpx2_;
}
inline void MDBond::set_diffpx2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  diffpx2_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.DiffPx2)
}

// int64 TotalBuyQty = 21;
inline void MDBond::clear_totalbuyqty() {
  totalbuyqty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::totalbuyqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalBuyQty)
  return totalbuyqty_;
}
inline void MDBond::set_totalbuyqty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalbuyqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalBuyQty)
}

// int64 TotalSellQty = 22;
inline void MDBond::clear_totalsellqty() {
  totalsellqty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::totalsellqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalSellQty)
  return totalsellqty_;
}
inline void MDBond::set_totalsellqty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalsellqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalSellQty)
}

// int64 WeightedAvgBuyPx = 23;
inline void MDBond::clear_weightedavgbuypx() {
  weightedavgbuypx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::weightedavgbuypx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgBuyPx)
  return weightedavgbuypx_;
}
inline void MDBond::set_weightedavgbuypx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weightedavgbuypx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgBuyPx)
}

// int64 WeightedAvgSellPx = 24;
inline void MDBond::clear_weightedavgsellpx() {
  weightedavgsellpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::weightedavgsellpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgSellPx)
  return weightedavgsellpx_;
}
inline void MDBond::set_weightedavgsellpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weightedavgsellpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgSellPx)
}

// int64 WithdrawBuyNumber = 25;
inline void MDBond::clear_withdrawbuynumber() {
  withdrawbuynumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::withdrawbuynumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawBuyNumber)
  return withdrawbuynumber_;
}
inline void MDBond::set_withdrawbuynumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  withdrawbuynumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawBuyNumber)
}

// int64 WithdrawBuyAmount = 26;
inline void MDBond::clear_withdrawbuyamount() {
  withdrawbuyamount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::withdrawbuyamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawBuyAmount)
  return withdrawbuyamount_;
}
inline void MDBond::set_withdrawbuyamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  withdrawbuyamount_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawBuyAmount)
}

// int64 WithdrawBuyMoney = 27;
inline void MDBond::clear_withdrawbuymoney() {
  withdrawbuymoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::withdrawbuymoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawBuyMoney)
  return withdrawbuymoney_;
}
inline void MDBond::set_withdrawbuymoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  withdrawbuymoney_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawBuyMoney)
}

// int64 WithdrawSellNumber = 28;
inline void MDBond::clear_withdrawsellnumber() {
  withdrawsellnumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::withdrawsellnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawSellNumber)
  return withdrawsellnumber_;
}
inline void MDBond::set_withdrawsellnumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  withdrawsellnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawSellNumber)
}

// int64 WithdrawSellAmount = 29;
inline void MDBond::clear_withdrawsellamount() {
  withdrawsellamount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::withdrawsellamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawSellAmount)
  return withdrawsellamount_;
}
inline void MDBond::set_withdrawsellamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  withdrawsellamount_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawSellAmount)
}

// int64 WithdrawSellMoney = 30;
inline void MDBond::clear_withdrawsellmoney() {
  withdrawsellmoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::withdrawsellmoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WithdrawSellMoney)
  return withdrawsellmoney_;
}
inline void MDBond::set_withdrawsellmoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  withdrawsellmoney_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WithdrawSellMoney)
}

// int64 TotalBuyNumber = 31;
inline void MDBond::clear_totalbuynumber() {
  totalbuynumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::totalbuynumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalBuyNumber)
  return totalbuynumber_;
}
inline void MDBond::set_totalbuynumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalbuynumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalBuyNumber)
}

// int64 TotalSellNumber = 32;
inline void MDBond::clear_totalsellnumber() {
  totalsellnumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::totalsellnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TotalSellNumber)
  return totalsellnumber_;
}
inline void MDBond::set_totalsellnumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalsellnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TotalSellNumber)
}

// int64 BuyTradeMaxDuration = 33;
inline void MDBond::clear_buytrademaxduration() {
  buytrademaxduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::buytrademaxduration() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyTradeMaxDuration)
  return buytrademaxduration_;
}
inline void MDBond::set_buytrademaxduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buytrademaxduration_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyTradeMaxDuration)
}

// int64 SellTradeMaxDuration = 34;
inline void MDBond::clear_selltrademaxduration() {
  selltrademaxduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::selltrademaxduration() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellTradeMaxDuration)
  return selltrademaxduration_;
}
inline void MDBond::set_selltrademaxduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  selltrademaxduration_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellTradeMaxDuration)
}

// int32 NumBuyOrders = 35;
inline void MDBond::clear_numbuyorders() {
  numbuyorders_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::numbuyorders() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.NumBuyOrders)
  return numbuyorders_;
}
inline void MDBond::set_numbuyorders(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numbuyorders_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.NumBuyOrders)
}

// int32 NumSellOrders = 36;
inline void MDBond::clear_numsellorders() {
  numsellorders_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::numsellorders() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.NumSellOrders)
  return numsellorders_;
}
inline void MDBond::set_numsellorders(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numsellorders_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.NumSellOrders)
}

// int64 YieldToMaturity = 37;
inline void MDBond::clear_yieldtomaturity() {
  yieldtomaturity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::yieldtomaturity() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.YieldToMaturity)
  return yieldtomaturity_;
}
inline void MDBond::set_yieldtomaturity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  yieldtomaturity_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.YieldToMaturity)
}

// int64 WeightedAvgPx = 38;
inline void MDBond::clear_weightedavgpx() {
  weightedavgpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::weightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgPx)
  return weightedavgpx_;
}
inline void MDBond::set_weightedavgpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weightedavgpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgPx)
}

// int64 WeightedAvgPxBP = 39;
inline void MDBond::clear_weightedavgpxbp() {
  weightedavgpxbp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::weightedavgpxbp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgPxBP)
  return weightedavgpxbp_;
}
inline void MDBond::set_weightedavgpxbp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weightedavgpxbp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgPxBP)
}

// int64 PreCloseWeightedAvgPx = 40;
inline void MDBond::clear_precloseweightedavgpx() {
  precloseweightedavgpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::precloseweightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreCloseWeightedAvgPx)
  return precloseweightedavgpx_;
}
inline void MDBond::set_precloseweightedavgpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  precloseweightedavgpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreCloseWeightedAvgPx)
}

// int32 ExchangeDate = 41;
inline void MDBond::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ExchangeDate)
  return exchangedate_;
}
inline void MDBond::set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ExchangeDate)
}

// int32 ExchangeTime = 42;
inline void MDBond::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ExchangeTime)
  return exchangetime_;
}
inline void MDBond::set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ExchangeTime)
}

// int64 PreCloseYield = 43;
inline void MDBond::clear_precloseyield() {
  precloseyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::precloseyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreCloseYield)
  return precloseyield_;
}
inline void MDBond::set_precloseyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  precloseyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreCloseYield)
}

// int64 PreWeightedAvgYield = 44;
inline void MDBond::clear_preweightedavgyield() {
  preweightedavgyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::preweightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreWeightedAvgYield)
  return preweightedavgyield_;
}
inline void MDBond::set_preweightedavgyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preweightedavgyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreWeightedAvgYield)
}

// int64 OpenYield = 45;
inline void MDBond::clear_openyield() {
  openyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::openyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OpenYield)
  return openyield_;
}
inline void MDBond::set_openyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OpenYield)
}

// int64 HighYield = 46;
inline void MDBond::clear_highyield() {
  highyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::highyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.HighYield)
  return highyield_;
}
inline void MDBond::set_highyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  highyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.HighYield)
}

// int64 LowYield = 47;
inline void MDBond::clear_lowyield() {
  lowyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::lowyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LowYield)
  return lowyield_;
}
inline void MDBond::set_lowyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lowyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LowYield)
}

// int64 LastYield = 48;
inline void MDBond::clear_lastyield() {
  lastyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::lastyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LastYield)
  return lastyield_;
}
inline void MDBond::set_lastyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LastYield)
}

// int64 WeightedAvgYield = 49;
inline void MDBond::clear_weightedavgyield() {
  weightedavgyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::weightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.WeightedAvgYield)
  return weightedavgyield_;
}
inline void MDBond::set_weightedavgyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weightedavgyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.WeightedAvgYield)
}

// int32 ChannelNo = 50;
inline void MDBond::clear_channelno() {
  channelno_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ChannelNo)
  return channelno_;
}
inline void MDBond::set_channelno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channelno_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ChannelNo)
}

// repeated int64 BuyPriceQueue = 51 [packed = true];
inline int MDBond::buypricequeue_size() const {
  return buypricequeue_.size();
}
inline void MDBond::clear_buypricequeue() {
  buypricequeue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::buypricequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
  return buypricequeue_.Get(index);
}
inline void MDBond::set_buypricequeue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buypricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
}
inline void MDBond::add_buypricequeue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buypricequeue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::buypricequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
  return buypricequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_buypricequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyPriceQueue)
  return &buypricequeue_;
}

// repeated int64 BuyOrderQtyQueue = 52 [packed = true];
inline int MDBond::buyorderqtyqueue_size() const {
  return buyorderqtyqueue_.size();
}
inline void MDBond::clear_buyorderqtyqueue() {
  buyorderqtyqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::buyorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
  return buyorderqtyqueue_.Get(index);
}
inline void MDBond::set_buyorderqtyqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
}
inline void MDBond::add_buyorderqtyqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyorderqtyqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::buyorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
  return buyorderqtyqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_buyorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyOrderQtyQueue)
  return &buyorderqtyqueue_;
}

// repeated int64 SellPriceQueue = 53 [packed = true];
inline int MDBond::sellpricequeue_size() const {
  return sellpricequeue_.size();
}
inline void MDBond::clear_sellpricequeue() {
  sellpricequeue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::sellpricequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
  return sellpricequeue_.Get(index);
}
inline void MDBond::set_sellpricequeue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellpricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
}
inline void MDBond::add_sellpricequeue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellpricequeue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::sellpricequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
  return sellpricequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_sellpricequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellPriceQueue)
  return &sellpricequeue_;
}

// repeated int64 SellOrderQtyQueue = 54 [packed = true];
inline int MDBond::sellorderqtyqueue_size() const {
  return sellorderqtyqueue_.size();
}
inline void MDBond::clear_sellorderqtyqueue() {
  sellorderqtyqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::sellorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
  return sellorderqtyqueue_.Get(index);
}
inline void MDBond::set_sellorderqtyqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
}
inline void MDBond::add_sellorderqtyqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellorderqtyqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::sellorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
  return sellorderqtyqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_sellorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellOrderQtyQueue)
  return &sellorderqtyqueue_;
}

// repeated int64 BuyOrderQueue = 55 [packed = true];
inline int MDBond::buyorderqueue_size() const {
  return buyorderqueue_.size();
}
inline void MDBond::clear_buyorderqueue() {
  buyorderqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::buyorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
  return buyorderqueue_.Get(index);
}
inline void MDBond::set_buyorderqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
}
inline void MDBond::add_buyorderqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyorderqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::buyorderqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
  return buyorderqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_buyorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyOrderQueue)
  return &buyorderqueue_;
}

// repeated int64 SellOrderQueue = 56 [packed = true];
inline int MDBond::sellorderqueue_size() const {
  return sellorderqueue_.size();
}
inline void MDBond::clear_sellorderqueue() {
  sellorderqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::sellorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
  return sellorderqueue_.Get(index);
}
inline void MDBond::set_sellorderqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
}
inline void MDBond::add_sellorderqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellorderqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::sellorderqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
  return sellorderqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_sellorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellOrderQueue)
  return &sellorderqueue_;
}

// repeated int64 BuyNumOrdersQueue = 57 [packed = true];
inline int MDBond::buynumordersqueue_size() const {
  return buynumordersqueue_.size();
}
inline void MDBond::clear_buynumordersqueue() {
  buynumordersqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::buynumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
  return buynumordersqueue_.Get(index);
}
inline void MDBond::set_buynumordersqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buynumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
}
inline void MDBond::add_buynumordersqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buynumordersqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::buynumordersqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
  return buynumordersqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_buynumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyNumOrdersQueue)
  return &buynumordersqueue_;
}

// repeated int64 SellNumOrdersQueue = 58 [packed = true];
inline int MDBond::sellnumordersqueue_size() const {
  return sellnumordersqueue_.size();
}
inline void MDBond::clear_sellnumordersqueue() {
  sellnumordersqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::sellnumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
  return sellnumordersqueue_.Get(index);
}
inline void MDBond::set_sellnumordersqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellnumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
}
inline void MDBond::add_sellnumordersqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellnumordersqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::sellnumordersqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
  return sellnumordersqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_sellnumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellNumOrdersQueue)
  return &sellnumordersqueue_;
}

// int64 NorminalPx = 59;
inline void MDBond::clear_norminalpx() {
  norminalpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::norminalpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.NorminalPx)
  return norminalpx_;
}
inline void MDBond::set_norminalpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  norminalpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.NorminalPx)
}

// int64 ShortSellSharesTraded = 60;
inline void MDBond::clear_shortsellsharestraded() {
  shortsellsharestraded_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::shortsellsharestraded() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ShortSellSharesTraded)
  return shortsellsharestraded_;
}
inline void MDBond::set_shortsellsharestraded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shortsellsharestraded_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ShortSellSharesTraded)
}

// int64 ShortSellTurnover = 61;
inline void MDBond::clear_shortsellturnover() {
  shortsellturnover_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::shortsellturnover() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.ShortSellTurnover)
  return shortsellturnover_;
}
inline void MDBond::set_shortsellturnover(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shortsellturnover_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.ShortSellTurnover)
}

// repeated int32 BuySettlTypeQueue = 62 [packed = true];
inline int MDBond::buysettltypequeue_size() const {
  return buysettltypequeue_.size();
}
inline void MDBond::clear_buysettltypequeue() {
  buysettltypequeue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::buysettltypequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
  return buysettltypequeue_.Get(index);
}
inline void MDBond::set_buysettltypequeue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buysettltypequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
}
inline void MDBond::add_buysettltypequeue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buysettltypequeue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MDBond::buysettltypequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
  return buysettltypequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MDBond::mutable_buysettltypequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuySettlTypeQueue)
  return &buysettltypequeue_;
}

// repeated int32 SellSettlTypeQueue = 63 [packed = true];
inline int MDBond::sellsettltypequeue_size() const {
  return sellsettltypequeue_.size();
}
inline void MDBond::clear_sellsettltypequeue() {
  sellsettltypequeue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::sellsettltypequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
  return sellsettltypequeue_.Get(index);
}
inline void MDBond::set_sellsettltypequeue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sellsettltypequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
}
inline void MDBond::add_sellsettltypequeue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sellsettltypequeue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MDBond::sellsettltypequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
  return sellsettltypequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MDBond::mutable_sellsettltypequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellSettlTypeQueue)
  return &sellsettltypequeue_;
}

// repeated int64 BuyYieldQueue = 64 [packed = true];
inline int MDBond::buyyieldqueue_size() const {
  return buyyieldqueue_.size();
}
inline void MDBond::clear_buyyieldqueue() {
  buyyieldqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::buyyieldqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
  return buyyieldqueue_.Get(index);
}
inline void MDBond::set_buyyieldqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyyieldqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
}
inline void MDBond::add_buyyieldqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyyieldqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::buyyieldqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
  return buyyieldqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_buyyieldqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.BuyYieldQueue)
  return &buyyieldqueue_;
}

// repeated int64 SellYieldQueue = 65 [packed = true];
inline int MDBond::sellyieldqueue_size() const {
  return sellyieldqueue_.size();
}
inline void MDBond::clear_sellyieldqueue() {
  sellyieldqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::sellyieldqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
  return sellyieldqueue_.Get(index);
}
inline void MDBond::set_sellyieldqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellyieldqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
}
inline void MDBond::add_sellyieldqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellyieldqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDBond::sellyieldqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
  return sellyieldqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDBond::mutable_sellyieldqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBond.SellYieldQueue)
  return &sellyieldqueue_;
}

// int64 PreMarketLastPx = 66;
inline void MDBond::clear_premarketlastpx() {
  premarketlastpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::premarketlastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketLastPx)
  return premarketlastpx_;
}
inline void MDBond::set_premarketlastpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  premarketlastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketLastPx)
}

// int64 PreMarketTotalVolumeTrade = 67;
inline void MDBond::clear_premarkettotalvolumetrade() {
  premarkettotalvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::premarkettotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketTotalVolumeTrade)
  return premarkettotalvolumetrade_;
}
inline void MDBond::set_premarkettotalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  premarkettotalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketTotalVolumeTrade)
}

// int64 PreMarketTotalValueTrade = 68;
inline void MDBond::clear_premarkettotalvaluetrade() {
  premarkettotalvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::premarkettotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketTotalValueTrade)
  return premarkettotalvaluetrade_;
}
inline void MDBond::set_premarkettotalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  premarkettotalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketTotalValueTrade)
}

// int64 PreMarketHighPx = 69;
inline void MDBond::clear_premarkethighpx() {
  premarkethighpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::premarkethighpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketHighPx)
  return premarkethighpx_;
}
inline void MDBond::set_premarkethighpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  premarkethighpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketHighPx)
}

// int64 PreMarketLowPx = 70;
inline void MDBond::clear_premarketlowpx() {
  premarketlowpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::premarketlowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.PreMarketLowPx)
  return premarketlowpx_;
}
inline void MDBond::set_premarketlowpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  premarketlowpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.PreMarketLowPx)
}

// int64 AfterHoursLastPx = 71;
inline void MDBond::clear_afterhourslastpx() {
  afterhourslastpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::afterhourslastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursLastPx)
  return afterhourslastpx_;
}
inline void MDBond::set_afterhourslastpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  afterhourslastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursLastPx)
}

// int64 AfterHoursTotalVolumeTrade = 72;
inline void MDBond::clear_afterhourstotalvolumetrade() {
  afterhourstotalvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::afterhourstotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursTotalVolumeTrade)
  return afterhourstotalvolumetrade_;
}
inline void MDBond::set_afterhourstotalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  afterhourstotalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursTotalVolumeTrade)
}

// int64 AfterHoursTotalValueTrade = 73;
inline void MDBond::clear_afterhourstotalvaluetrade() {
  afterhourstotalvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::afterhourstotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursTotalValueTrade)
  return afterhourstotalvaluetrade_;
}
inline void MDBond::set_afterhourstotalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  afterhourstotalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursTotalValueTrade)
}

// int64 AfterHoursHighPx = 74;
inline void MDBond::clear_afterhourshighpx() {
  afterhourshighpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::afterhourshighpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursHighPx)
  return afterhourshighpx_;
}
inline void MDBond::set_afterhourshighpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  afterhourshighpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursHighPx)
}

// int64 AfterHoursLowPx = 75;
inline void MDBond::clear_afterhourslowpx() {
  afterhourslowpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::afterhourslowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AfterHoursLowPx)
  return afterhourslowpx_;
}
inline void MDBond::set_afterhourslowpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  afterhourslowpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AfterHoursLowPx)
}

// string MarketPhaseCode = 76;
inline void MDBond::clear_marketphasecode() {
  marketphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::marketphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
  return marketphasecode_.GetNoArena();
}
inline void MDBond::set_marketphasecode(const std::string& value) {
  
  marketphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
}
inline void MDBond::set_marketphasecode(std::string&& value) {
  
  marketphasecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
}
inline void MDBond::set_marketphasecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marketphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
}
inline void MDBond::set_marketphasecode(const char* value, size_t size) {
  
  marketphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
}
inline std::string* MDBond::mutable_marketphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
  return marketphasecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_marketphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
  
  return marketphasecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_marketphasecode(std::string* marketphasecode) {
  if (marketphasecode != nullptr) {
    
  } else {
    
  }
  marketphasecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.MarketPhaseCode)
}

// string SubTradingPhaseCode1 = 77;
inline void MDBond::clear_subtradingphasecode1() {
  subtradingphasecode1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::subtradingphasecode1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
  return subtradingphasecode1_.GetNoArena();
}
inline void MDBond::set_subtradingphasecode1(const std::string& value) {
  
  subtradingphasecode1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
}
inline void MDBond::set_subtradingphasecode1(std::string&& value) {
  
  subtradingphasecode1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
}
inline void MDBond::set_subtradingphasecode1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtradingphasecode1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
}
inline void MDBond::set_subtradingphasecode1(const char* value, size_t size) {
  
  subtradingphasecode1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
}
inline std::string* MDBond::mutable_subtradingphasecode1() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
  return subtradingphasecode1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_subtradingphasecode1() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
  
  return subtradingphasecode1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_subtradingphasecode1(std::string* subtradingphasecode1) {
  if (subtradingphasecode1 != nullptr) {
    
  } else {
    
  }
  subtradingphasecode1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtradingphasecode1);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode1)
}

// string SubTradingPhaseCode2 = 78;
inline void MDBond::clear_subtradingphasecode2() {
  subtradingphasecode2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::subtradingphasecode2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
  return subtradingphasecode2_.GetNoArena();
}
inline void MDBond::set_subtradingphasecode2(const std::string& value) {
  
  subtradingphasecode2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
}
inline void MDBond::set_subtradingphasecode2(std::string&& value) {
  
  subtradingphasecode2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
}
inline void MDBond::set_subtradingphasecode2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtradingphasecode2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
}
inline void MDBond::set_subtradingphasecode2(const char* value, size_t size) {
  
  subtradingphasecode2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
}
inline std::string* MDBond::mutable_subtradingphasecode2() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
  return subtradingphasecode2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_subtradingphasecode2() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
  
  return subtradingphasecode2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_subtradingphasecode2(std::string* subtradingphasecode2) {
  if (subtradingphasecode2 != nullptr) {
    
  } else {
    
  }
  subtradingphasecode2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtradingphasecode2);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode2)
}

// string SubTradingPhaseCode3 = 79;
inline void MDBond::clear_subtradingphasecode3() {
  subtradingphasecode3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::subtradingphasecode3() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
  return subtradingphasecode3_.GetNoArena();
}
inline void MDBond::set_subtradingphasecode3(const std::string& value) {
  
  subtradingphasecode3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
}
inline void MDBond::set_subtradingphasecode3(std::string&& value) {
  
  subtradingphasecode3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
}
inline void MDBond::set_subtradingphasecode3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtradingphasecode3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
}
inline void MDBond::set_subtradingphasecode3(const char* value, size_t size) {
  
  subtradingphasecode3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
}
inline std::string* MDBond::mutable_subtradingphasecode3() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
  return subtradingphasecode3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_subtradingphasecode3() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
  
  return subtradingphasecode3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_subtradingphasecode3(std::string* subtradingphasecode3) {
  if (subtradingphasecode3 != nullptr) {
    
  } else {
    
  }
  subtradingphasecode3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtradingphasecode3);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode3)
}

// string SubTradingPhaseCode4 = 80;
inline void MDBond::clear_subtradingphasecode4() {
  subtradingphasecode4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::subtradingphasecode4() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
  return subtradingphasecode4_.GetNoArena();
}
inline void MDBond::set_subtradingphasecode4(const std::string& value) {
  
  subtradingphasecode4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
}
inline void MDBond::set_subtradingphasecode4(std::string&& value) {
  
  subtradingphasecode4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
}
inline void MDBond::set_subtradingphasecode4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtradingphasecode4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
}
inline void MDBond::set_subtradingphasecode4(const char* value, size_t size) {
  
  subtradingphasecode4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
}
inline std::string* MDBond::mutable_subtradingphasecode4() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
  return subtradingphasecode4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_subtradingphasecode4() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
  
  return subtradingphasecode4_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_subtradingphasecode4(std::string* subtradingphasecode4) {
  if (subtradingphasecode4 != nullptr) {
    
  } else {
    
  }
  subtradingphasecode4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtradingphasecode4);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode4)
}

// string SubTradingPhaseCode5 = 81;
inline void MDBond::clear_subtradingphasecode5() {
  subtradingphasecode5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::subtradingphasecode5() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
  return subtradingphasecode5_.GetNoArena();
}
inline void MDBond::set_subtradingphasecode5(const std::string& value) {
  
  subtradingphasecode5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
}
inline void MDBond::set_subtradingphasecode5(std::string&& value) {
  
  subtradingphasecode5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
}
inline void MDBond::set_subtradingphasecode5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtradingphasecode5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
}
inline void MDBond::set_subtradingphasecode5(const char* value, size_t size) {
  
  subtradingphasecode5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
}
inline std::string* MDBond::mutable_subtradingphasecode5() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
  return subtradingphasecode5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_subtradingphasecode5() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
  
  return subtradingphasecode5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_subtradingphasecode5(std::string* subtradingphasecode5) {
  if (subtradingphasecode5 != nullptr) {
    
  } else {
    
  }
  subtradingphasecode5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtradingphasecode5);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.SubTradingPhaseCode5)
}

// int32 LastPxType = 82;
inline void MDBond::clear_lastpxtype() {
  lastpxtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::lastpxtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.LastPxType)
  return lastpxtype_;
}
inline void MDBond::set_lastpxtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastpxtype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.LastPxType)
}

// int64 AuctionLastPx = 83;
inline void MDBond::clear_auctionlastpx() {
  auctionlastpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::auctionlastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AuctionLastPx)
  return auctionlastpx_;
}
inline void MDBond::set_auctionlastpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auctionlastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AuctionLastPx)
}

// int64 AuctionVolumeTrade = 84;
inline void MDBond::clear_auctionvolumetrade() {
  auctionvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::auctionvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AuctionVolumeTrade)
  return auctionvolumetrade_;
}
inline void MDBond::set_auctionvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auctionvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AuctionVolumeTrade)
}

// int64 AuctionValueTrade = 85;
inline void MDBond::clear_auctionvaluetrade() {
  auctionvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::auctionvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.AuctionValueTrade)
  return auctionvaluetrade_;
}
inline void MDBond::set_auctionvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auctionvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.AuctionValueTrade)
}

// int64 USConsolidateVolume = 86;
inline void MDBond::clear_usconsolidatevolume() {
  usconsolidatevolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::usconsolidatevolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.USConsolidateVolume)
  return usconsolidatevolume_;
}
inline void MDBond::set_usconsolidatevolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  usconsolidatevolume_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.USConsolidateVolume)
}

// int64 USCompositeClosePx = 87;
inline void MDBond::clear_uscompositeclosepx() {
  uscompositeclosepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::uscompositeclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.USCompositeClosePx)
  return uscompositeclosepx_;
}
inline void MDBond::set_uscompositeclosepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uscompositeclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.USCompositeClosePx)
}

// string TradingHaltReason = 88;
inline void MDBond::clear_tradinghaltreason() {
  tradinghaltreason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBond::tradinghaltreason() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
  return tradinghaltreason_.GetNoArena();
}
inline void MDBond::set_tradinghaltreason(const std::string& value) {
  
  tradinghaltreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
}
inline void MDBond::set_tradinghaltreason(std::string&& value) {
  
  tradinghaltreason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
}
inline void MDBond::set_tradinghaltreason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradinghaltreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
}
inline void MDBond::set_tradinghaltreason(const char* value, size_t size) {
  
  tradinghaltreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
}
inline std::string* MDBond::mutable_tradinghaltreason() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
  return tradinghaltreason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBond::release_tradinghaltreason() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
  
  return tradinghaltreason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBond::set_allocated_tradinghaltreason(std::string* tradinghaltreason) {
  if (tradinghaltreason != nullptr) {
    
  } else {
    
  }
  tradinghaltreason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradinghaltreason);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBond.TradingHaltReason)
}

// int64 OtcTotalVolumeTrade = 89;
inline void MDBond::clear_otctotalvolumetrade() {
  otctotalvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::otctotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OtcTotalVolumeTrade)
  return otctotalvolumetrade_;
}
inline void MDBond::set_otctotalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  otctotalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OtcTotalVolumeTrade)
}

// int64 OtcTotalValueTrade = 90;
inline void MDBond::clear_otctotalvaluetrade() {
  otctotalvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::otctotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OtcTotalValueTrade)
  return otctotalvaluetrade_;
}
inline void MDBond::set_otctotalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  otctotalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OtcTotalValueTrade)
}

// int64 OtcNumTrades = 91;
inline void MDBond::clear_otcnumtrades() {
  otcnumtrades_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBond::otcnumtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.OtcNumTrades)
  return otcnumtrades_;
}
inline void MDBond::set_otcnumtrades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  otcnumtrades_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.OtcNumTrades)
}

// int32 DataMultiplePowerOf10 = 92;
inline void MDBond::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBond::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBond.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void MDBond::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBond.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDBond_2eproto
