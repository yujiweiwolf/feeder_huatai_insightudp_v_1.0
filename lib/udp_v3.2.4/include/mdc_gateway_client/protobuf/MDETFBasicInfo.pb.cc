// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDETFBasicInfo.proto

#include "MDETFBasicInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MDETFBasicInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDETFComponentDetail_MDETFBasicInfo_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDETFBasicInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDETFBasicInfo> _instance;
} _MDETFBasicInfo_default_instance_;
class MDETFComponentDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDETFComponentDetail> _instance;
} _MDETFComponentDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_MDETFBasicInfo_MDETFBasicInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDETFBasicInfo_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDETFBasicInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDETFBasicInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDETFBasicInfo_MDETFBasicInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MDETFBasicInfo_MDETFBasicInfo_2eproto}, {
      &scc_info_MDETFComponentDetail_MDETFBasicInfo_2eproto.base,}};

static void InitDefaultsscc_info_MDETFComponentDetail_MDETFBasicInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDETFComponentDetail_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDETFComponentDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDETFComponentDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDETFComponentDetail_MDETFBasicInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MDETFComponentDetail_MDETFBasicInfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MDETFBasicInfo_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MDETFBasicInfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MDETFBasicInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MDETFBasicInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, securityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, symbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, creationid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, creationsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, redemptionid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, redemptionsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, creationredemptioncapitalid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, creationredemptioncapitalsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, crosssourcecapitalid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, crosssourcecapitalsymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, fundmanagementcompany_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, underlyingsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, underlyingsecurityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, creationredemptionunit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, estimatecashcomponent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, maxcashratio_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, ispublish_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, isallowcreation_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, isallowredemption_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, recordnum_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, tradingday_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, pretradingday_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, cashcomponent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, navpercu_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, nav_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, dividendpercu_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, creationlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, redemptionlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, creationlimitperuser_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, redemptionlimitperuser_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, netcreationlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, netredemptionlimit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, netcreationlimitperuser_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, netredemptionlimitperuser_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, etfcomponents_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, formersymbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, crossmarket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFBasicInfo, datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, securityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, symbol_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, componentshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, substituteflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, premiumratio_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, creationcashsubstitute_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, redemptioncashsubstitute_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, totalcashsubstitute_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDETFComponentDetail, discountratio_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::MDETFBasicInfo)},
  { 48, -1, sizeof(::com::htsc::mdc::insight::model::MDETFComponentDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDETFBasicInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDETFComponentDetail_default_instance_),
};

const char descriptor_table_protodef_MDETFBasicInfo_2eproto[] =
  "\n\024MDETFBasicInfo.proto\022\032com.htsc.mdc.ins"
  "ight.model\032\027ESecurityIDSource.proto\032\023ESe"
  "curityType.proto\"\372\t\n\016MDETFBasicInfo\022\026\n\016H"
  "TSCSecurityID\030\001 \001(\t\022\022\n\nSecurityID\030\002 \001(\t\022"
  "\016\n\006Symbol\030\003 \001(\t\022\016\n\006MDDate\030\004 \001(\005\022\016\n\006MDTim"
  "e\030\005 \001(\005\022\?\n\020securityIDSource\030\006 \001(\0162%.com."
  "htsc.mdc.model.ESecurityIDSource\0227\n\014secu"
  "rityType\030\007 \001(\0162!.com.htsc.mdc.model.ESec"
  "urityType\022\022\n\nCreationID\030\013 \001(\t\022\026\n\016Creatio"
  "nSymbol\030\014 \001(\t\022\024\n\014RedemptionID\030\r \001(\t\022\030\n\020R"
  "edemptionSymbol\030\016 \001(\t\022#\n\033CreationRedempt"
  "ionCapitalID\030\017 \001(\t\022\'\n\037CreationRedemption"
  "CapitalSymbol\030\020 \001(\t\022\034\n\024CrossSourceCapita"
  "lID\030\021 \001(\t\022 \n\030CrossSourceCapitalSymbol\030\022 "
  "\001(\t\022\035\n\025FundManagementCompany\030\023 \001(\t\022\034\n\024Un"
  "derlyingSecurityID\030\024 \001(\t\022I\n\032UnderlyingSe"
  "curityIDSource\030\025 \001(\0162%.com.htsc.mdc.mode"
  "l.ESecurityIDSource\022\036\n\026CreationRedemptio"
  "nUnit\030\026 \001(\001\022\035\n\025EstimateCashComponent\030\027 \001"
  "(\001\022\024\n\014MaxCashRatio\030\030 \001(\001\022\021\n\tIsPublish\030\031 "
  "\001(\010\022\027\n\017IsAllowCreation\030\032 \001(\010\022\031\n\021IsAllowR"
  "edemption\030\033 \001(\010\022\021\n\tRecordNum\030\034 \001(\003\022\022\n\nTr"
  "adingDay\030\035 \001(\t\022\025\n\rPreTradingDay\030\036 \001(\t\022\025\n"
  "\rCashComponent\030\037 \001(\001\022\020\n\010NAVperCU\030  \001(\001\022\013"
  "\n\003NAV\030! \001(\001\022\025\n\rDividendPerCU\030\" \001(\001\022\025\n\rCr"
  "eationLimit\030# \001(\001\022\027\n\017RedemptionLimit\030$ \001"
  "(\001\022\034\n\024CreationLimitPerUser\030% \001(\001\022\036\n\026Rede"
  "mptionLimitPerUser\030& \001(\001\022\030\n\020NetCreationL"
  "imit\030\' \001(\001\022\032\n\022NetRedemptionLimit\030( \001(\001\022\037"
  "\n\027NetCreationLimitPerUser\030) \001(\001\022!\n\031NetRe"
  "demptionLimitPerUser\030* \001(\001\022G\n\rETFCompone"
  "nts\030+ \003(\01320.com.htsc.mdc.insight.model.M"
  "DETFComponentDetail\022\024\n\014FormerSymbol\030, \001("
  "\t\022\023\n\013CrossMarket\030- \001(\010\022\035\n\025DataMultiplePo"
  "werOf10\030. \001(\005\"\200\003\n\024MDETFComponentDetail\022\026"
  "\n\016HTSCSecurityID\030\001 \001(\t\022\022\n\nSecurityID\030\002 \001"
  "(\t\022\016\n\006Symbol\030\003 \001(\t\022\?\n\020securityIDSource\030\004"
  " \001(\0162%.com.htsc.mdc.model.ESecurityIDSou"
  "rce\022\026\n\016ComponentShare\030\005 \001(\001\022G\n\016Substitut"
  "eFlag\030\006 \001(\0162/.com.htsc.mdc.insight.model"
  ".MDETFSubstituteFlag\022\024\n\014PremiumRatio\030\007 \001"
  "(\001\022\036\n\026CreationCashSubstitute\030\010 \001(\001\022 \n\030Re"
  "demptionCashSubstitute\030\t \001(\001\022\033\n\023TotalCas"
  "hSubstitute\030\n \001(\001\022\025\n\rDiscountRatio\030\013 \001(\001"
  "*v\n\023MDETFSubstituteFlag\022\033\n\027DEFAULT_SUBST"
  "ITUTE_FLAG\020\000\022\027\n\023DISALLOW_SUBSTITUTE\020\001\022\024\n"
  "\020ALLOW_SUBSTITUTE\020\002\022\023\n\017MUST_SUBSTITUTE\020\003"
  "B7\n\032com.htsc.mdc.insight.modelB\024MDETFBas"
  "icInfoProtosH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MDETFBasicInfo_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MDETFBasicInfo_2eproto_sccs[2] = {
  &scc_info_MDETFBasicInfo_MDETFBasicInfo_2eproto.base,
  &scc_info_MDETFComponentDetail_MDETFBasicInfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MDETFBasicInfo_2eproto_once;
static bool descriptor_table_MDETFBasicInfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDETFBasicInfo_2eproto = {
  &descriptor_table_MDETFBasicInfo_2eproto_initialized, descriptor_table_protodef_MDETFBasicInfo_2eproto, "MDETFBasicInfo.proto", 1945,
  &descriptor_table_MDETFBasicInfo_2eproto_once, descriptor_table_MDETFBasicInfo_2eproto_sccs, descriptor_table_MDETFBasicInfo_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_MDETFBasicInfo_2eproto::offsets,
  file_level_metadata_MDETFBasicInfo_2eproto, 2, file_level_enum_descriptors_MDETFBasicInfo_2eproto, file_level_service_descriptors_MDETFBasicInfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MDETFBasicInfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MDETFBasicInfo_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MDETFSubstituteFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDETFBasicInfo_2eproto);
  return file_level_enum_descriptors_MDETFBasicInfo_2eproto[0];
}
bool MDETFSubstituteFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MDETFBasicInfo::InitAsDefaultInstance() {
}
class MDETFBasicInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDETFBasicInfo::kHTSCSecurityIDFieldNumber;
const int MDETFBasicInfo::kSecurityIDFieldNumber;
const int MDETFBasicInfo::kSymbolFieldNumber;
const int MDETFBasicInfo::kMDDateFieldNumber;
const int MDETFBasicInfo::kMDTimeFieldNumber;
const int MDETFBasicInfo::kSecurityIDSourceFieldNumber;
const int MDETFBasicInfo::kSecurityTypeFieldNumber;
const int MDETFBasicInfo::kCreationIDFieldNumber;
const int MDETFBasicInfo::kCreationSymbolFieldNumber;
const int MDETFBasicInfo::kRedemptionIDFieldNumber;
const int MDETFBasicInfo::kRedemptionSymbolFieldNumber;
const int MDETFBasicInfo::kCreationRedemptionCapitalIDFieldNumber;
const int MDETFBasicInfo::kCreationRedemptionCapitalSymbolFieldNumber;
const int MDETFBasicInfo::kCrossSourceCapitalIDFieldNumber;
const int MDETFBasicInfo::kCrossSourceCapitalSymbolFieldNumber;
const int MDETFBasicInfo::kFundManagementCompanyFieldNumber;
const int MDETFBasicInfo::kUnderlyingSecurityIDFieldNumber;
const int MDETFBasicInfo::kUnderlyingSecurityIDSourceFieldNumber;
const int MDETFBasicInfo::kCreationRedemptionUnitFieldNumber;
const int MDETFBasicInfo::kEstimateCashComponentFieldNumber;
const int MDETFBasicInfo::kMaxCashRatioFieldNumber;
const int MDETFBasicInfo::kIsPublishFieldNumber;
const int MDETFBasicInfo::kIsAllowCreationFieldNumber;
const int MDETFBasicInfo::kIsAllowRedemptionFieldNumber;
const int MDETFBasicInfo::kRecordNumFieldNumber;
const int MDETFBasicInfo::kTradingDayFieldNumber;
const int MDETFBasicInfo::kPreTradingDayFieldNumber;
const int MDETFBasicInfo::kCashComponentFieldNumber;
const int MDETFBasicInfo::kNAVperCUFieldNumber;
const int MDETFBasicInfo::kNAVFieldNumber;
const int MDETFBasicInfo::kDividendPerCUFieldNumber;
const int MDETFBasicInfo::kCreationLimitFieldNumber;
const int MDETFBasicInfo::kRedemptionLimitFieldNumber;
const int MDETFBasicInfo::kCreationLimitPerUserFieldNumber;
const int MDETFBasicInfo::kRedemptionLimitPerUserFieldNumber;
const int MDETFBasicInfo::kNetCreationLimitFieldNumber;
const int MDETFBasicInfo::kNetRedemptionLimitFieldNumber;
const int MDETFBasicInfo::kNetCreationLimitPerUserFieldNumber;
const int MDETFBasicInfo::kNetRedemptionLimitPerUserFieldNumber;
const int MDETFBasicInfo::kETFComponentsFieldNumber;
const int MDETFBasicInfo::kFormerSymbolFieldNumber;
const int MDETFBasicInfo::kCrossMarketFieldNumber;
const int MDETFBasicInfo::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDETFBasicInfo::MDETFBasicInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDETFBasicInfo)
}
MDETFBasicInfo::MDETFBasicInfo(const MDETFBasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      etfcomponents_(from.etfcomponents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.securityid().size() > 0) {
    securityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securityid_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  creationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.creationid().size() > 0) {
    creationid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationid_);
  }
  creationsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.creationsymbol().size() > 0) {
    creationsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationsymbol_);
  }
  redemptionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.redemptionid().size() > 0) {
    redemptionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.redemptionid_);
  }
  redemptionsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.redemptionsymbol().size() > 0) {
    redemptionsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.redemptionsymbol_);
  }
  creationredemptioncapitalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.creationredemptioncapitalid().size() > 0) {
    creationredemptioncapitalid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationredemptioncapitalid_);
  }
  creationredemptioncapitalsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.creationredemptioncapitalsymbol().size() > 0) {
    creationredemptioncapitalsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationredemptioncapitalsymbol_);
  }
  crosssourcecapitalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.crosssourcecapitalid().size() > 0) {
    crosssourcecapitalid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crosssourcecapitalid_);
  }
  crosssourcecapitalsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.crosssourcecapitalsymbol().size() > 0) {
    crosssourcecapitalsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crosssourcecapitalsymbol_);
  }
  fundmanagementcompany_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fundmanagementcompany().size() > 0) {
    fundmanagementcompany_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundmanagementcompany_);
  }
  underlyingsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.underlyingsecurityid().size() > 0) {
    underlyingsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.underlyingsecurityid_);
  }
  tradingday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tradingday().size() > 0) {
    tradingday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  pretradingday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.pretradingday().size() > 0) {
    pretradingday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pretradingday_);
  }
  formersymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.formersymbol().size() > 0) {
    formersymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formersymbol_);
  }
  ::memcpy(&mddate_, &from.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDETFBasicInfo)
}

void MDETFBasicInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDETFBasicInfo_MDETFBasicInfo_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redemptionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redemptionsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationredemptioncapitalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationredemptioncapitalsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crosssourcecapitalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crosssourcecapitalsymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundmanagementcompany_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlyingsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pretradingday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formersymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
}

MDETFBasicInfo::~MDETFBasicInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDETFBasicInfo)
  SharedDtor();
}

void MDETFBasicInfo::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationsymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redemptionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redemptionsymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationredemptioncapitalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationredemptioncapitalsymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crosssourcecapitalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crosssourcecapitalsymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundmanagementcompany_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlyingsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pretradingday_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formersymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MDETFBasicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDETFBasicInfo& MDETFBasicInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDETFBasicInfo_MDETFBasicInfo_2eproto.base);
  return *internal_default_instance();
}


void MDETFBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  etfcomponents_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redemptionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redemptionsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationredemptioncapitalid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creationredemptioncapitalsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crosssourcecapitalid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crosssourcecapitalsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundmanagementcompany_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlyingsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingday_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pretradingday_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formersymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDETFBasicInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SecurityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_securityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_symbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else goto handle_unusual;
        continue;
      // string CreationID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_creationid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CreationSymbol = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_creationsymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RedemptionID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_redemptionid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RedemptionSymbol = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_redemptionsymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CreationRedemptionCapitalID = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_creationredemptioncapitalid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CreationRedemptionCapitalSymbol = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_creationredemptioncapitalsymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CrossSourceCapitalID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_crosssourcecapitalid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CrossSourceCapitalSymbol = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_crosssourcecapitalsymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FundManagementCompany = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fundmanagementcompany(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UnderlyingSecurityID = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_underlyingsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_underlyingsecurityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // double CreationRedemptionUnit = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          creationredemptionunit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double EstimateCashComponent = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          estimatecashcomponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MaxCashRatio = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          maxcashratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool IsPublish = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ispublish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsAllowCreation = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          isallowcreation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsAllowRedemption = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          isallowredemption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 RecordNum = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          recordnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TradingDay = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tradingday(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PreTradingDay = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_pretradingday(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double CashComponent = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          cashcomponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double NAVperCU = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          navpercu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double NAV = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          nav_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double DividendPerCU = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dividendpercu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CreationLimit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          creationlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RedemptionLimit = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          redemptionlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CreationLimitPerUser = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          creationlimitperuser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RedemptionLimitPerUser = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          redemptionlimitperuser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double NetCreationLimit = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          netcreationlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double NetRedemptionLimit = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          netredemptionlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double NetCreationLimitPerUser = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          netcreationlimitperuser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double NetRedemptionLimitPerUser = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          netredemptionlimitperuser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_etfcomponents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 730);
        } else goto handle_unusual;
        continue;
      // string FormerSymbol = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_formersymbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool CrossMarket = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          crossmarket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDETFBasicInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SecurityID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_securityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->securityid().data(), static_cast<int>(this->securityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDTime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CreationID = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_creationid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->creationid().data(), static_cast<int>(this->creationid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CreationSymbol = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_creationsymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->creationsymbol().data(), static_cast<int>(this->creationsymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RedemptionID = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_redemptionid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->redemptionid().data(), static_cast<int>(this->redemptionid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RedemptionSymbol = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_redemptionsymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->redemptionsymbol().data(), static_cast<int>(this->redemptionsymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CreationRedemptionCapitalID = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_creationredemptioncapitalid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->creationredemptioncapitalid().data(), static_cast<int>(this->creationredemptioncapitalid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CreationRedemptionCapitalSymbol = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_creationredemptioncapitalsymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->creationredemptioncapitalsymbol().data(), static_cast<int>(this->creationredemptioncapitalsymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CrossSourceCapitalID = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crosssourcecapitalid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->crosssourcecapitalid().data(), static_cast<int>(this->crosssourcecapitalid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CrossSourceCapitalSymbol = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crosssourcecapitalsymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->crosssourcecapitalsymbol().data(), static_cast<int>(this->crosssourcecapitalsymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FundManagementCompany = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fundmanagementcompany()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fundmanagementcompany().data(), static_cast<int>(this->fundmanagementcompany().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UnderlyingSecurityID = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyingsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->underlyingsecurityid().data(), static_cast<int>(this->underlyingsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_underlyingsecurityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CreationRedemptionUnit = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (177 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &creationredemptionunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double EstimateCashComponent = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (185 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimatecashcomponent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MaxCashRatio = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (193 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxcashratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsPublish = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispublish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsAllowCreation = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isallowcreation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsAllowRedemption = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isallowredemption_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 RecordNum = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &recordnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradingDay = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), static_cast<int>(this->tradingday().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PreTradingDay = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pretradingday()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->pretradingday().data(), static_cast<int>(this->pretradingday().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CashComponent = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (249 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashcomponent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double NAVperCU = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (257 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &navpercu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double NAV = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (265 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DividendPerCU = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (273 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dividendpercu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CreationLimit = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (281 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &creationlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double RedemptionLimit = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (289 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redemptionlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CreationLimitPerUser = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (297 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &creationlimitperuser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double RedemptionLimitPerUser = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (305 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redemptionlimitperuser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double NetCreationLimit = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (313 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &netcreationlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double NetRedemptionLimit = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (321 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &netredemptionlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double NetCreationLimitPerUser = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (329 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &netcreationlimitperuser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double NetRedemptionLimitPerUser = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (337 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &netredemptionlimitperuser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_etfcomponents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FormerSymbol = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_formersymbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->formersymbol().data(), static_cast<int>(this->formersymbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool CrossMarket = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (360 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crossmarket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataMultiplePowerOf10 = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (368 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDETFBasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDETFBasicInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDETFBasicInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securityid().data(), static_cast<int>(this->securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->securityid(), output);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // int32 MDDate = 4;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->mddate(), output);
  }

  // int32 MDTime = 5;
  if (this->mdtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->mdtime(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->securityidsource(), output);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->securitytype(), output);
  }

  // string CreationID = 11;
  if (this->creationid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->creationid().data(), static_cast<int>(this->creationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->creationid(), output);
  }

  // string CreationSymbol = 12;
  if (this->creationsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->creationsymbol().data(), static_cast<int>(this->creationsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->creationsymbol(), output);
  }

  // string RedemptionID = 13;
  if (this->redemptionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->redemptionid().data(), static_cast<int>(this->redemptionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->redemptionid(), output);
  }

  // string RedemptionSymbol = 14;
  if (this->redemptionsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->redemptionsymbol().data(), static_cast<int>(this->redemptionsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->redemptionsymbol(), output);
  }

  // string CreationRedemptionCapitalID = 15;
  if (this->creationredemptioncapitalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->creationredemptioncapitalid().data(), static_cast<int>(this->creationredemptioncapitalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->creationredemptioncapitalid(), output);
  }

  // string CreationRedemptionCapitalSymbol = 16;
  if (this->creationredemptioncapitalsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->creationredemptioncapitalsymbol().data(), static_cast<int>(this->creationredemptioncapitalsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->creationredemptioncapitalsymbol(), output);
  }

  // string CrossSourceCapitalID = 17;
  if (this->crosssourcecapitalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crosssourcecapitalid().data(), static_cast<int>(this->crosssourcecapitalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->crosssourcecapitalid(), output);
  }

  // string CrossSourceCapitalSymbol = 18;
  if (this->crosssourcecapitalsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crosssourcecapitalsymbol().data(), static_cast<int>(this->crosssourcecapitalsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->crosssourcecapitalsymbol(), output);
  }

  // string FundManagementCompany = 19;
  if (this->fundmanagementcompany().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fundmanagementcompany().data(), static_cast<int>(this->fundmanagementcompany().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->fundmanagementcompany(), output);
  }

  // string UnderlyingSecurityID = 20;
  if (this->underlyingsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->underlyingsecurityid().data(), static_cast<int>(this->underlyingsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->underlyingsecurityid(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
  if (this->underlyingsecurityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->underlyingsecurityidsource(), output);
  }

  // double CreationRedemptionUnit = 22;
  if (!(this->creationredemptionunit() <= 0 && this->creationredemptionunit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(22, this->creationredemptionunit(), output);
  }

  // double EstimateCashComponent = 23;
  if (!(this->estimatecashcomponent() <= 0 && this->estimatecashcomponent() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(23, this->estimatecashcomponent(), output);
  }

  // double MaxCashRatio = 24;
  if (!(this->maxcashratio() <= 0 && this->maxcashratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(24, this->maxcashratio(), output);
  }

  // bool IsPublish = 25;
  if (this->ispublish() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->ispublish(), output);
  }

  // bool IsAllowCreation = 26;
  if (this->isallowcreation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->isallowcreation(), output);
  }

  // bool IsAllowRedemption = 27;
  if (this->isallowredemption() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->isallowredemption(), output);
  }

  // int64 RecordNum = 28;
  if (this->recordnum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(28, this->recordnum(), output);
  }

  // string TradingDay = 29;
  if (this->tradingday().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->tradingday(), output);
  }

  // string PreTradingDay = 30;
  if (this->pretradingday().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pretradingday().data(), static_cast<int>(this->pretradingday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->pretradingday(), output);
  }

  // double CashComponent = 31;
  if (!(this->cashcomponent() <= 0 && this->cashcomponent() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(31, this->cashcomponent(), output);
  }

  // double NAVperCU = 32;
  if (!(this->navpercu() <= 0 && this->navpercu() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(32, this->navpercu(), output);
  }

  // double NAV = 33;
  if (!(this->nav() <= 0 && this->nav() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(33, this->nav(), output);
  }

  // double DividendPerCU = 34;
  if (!(this->dividendpercu() <= 0 && this->dividendpercu() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(34, this->dividendpercu(), output);
  }

  // double CreationLimit = 35;
  if (!(this->creationlimit() <= 0 && this->creationlimit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(35, this->creationlimit(), output);
  }

  // double RedemptionLimit = 36;
  if (!(this->redemptionlimit() <= 0 && this->redemptionlimit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(36, this->redemptionlimit(), output);
  }

  // double CreationLimitPerUser = 37;
  if (!(this->creationlimitperuser() <= 0 && this->creationlimitperuser() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(37, this->creationlimitperuser(), output);
  }

  // double RedemptionLimitPerUser = 38;
  if (!(this->redemptionlimitperuser() <= 0 && this->redemptionlimitperuser() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(38, this->redemptionlimitperuser(), output);
  }

  // double NetCreationLimit = 39;
  if (!(this->netcreationlimit() <= 0 && this->netcreationlimit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(39, this->netcreationlimit(), output);
  }

  // double NetRedemptionLimit = 40;
  if (!(this->netredemptionlimit() <= 0 && this->netredemptionlimit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(40, this->netredemptionlimit(), output);
  }

  // double NetCreationLimitPerUser = 41;
  if (!(this->netcreationlimitperuser() <= 0 && this->netcreationlimitperuser() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(41, this->netcreationlimitperuser(), output);
  }

  // double NetRedemptionLimitPerUser = 42;
  if (!(this->netredemptionlimitperuser() <= 0 && this->netredemptionlimitperuser() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(42, this->netredemptionlimitperuser(), output);
  }

  // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->etfcomponents_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      43,
      this->etfcomponents(static_cast<int>(i)),
      output);
  }

  // string FormerSymbol = 44;
  if (this->formersymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->formersymbol().data(), static_cast<int>(this->formersymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->formersymbol(), output);
  }

  // bool CrossMarket = 45;
  if (this->crossmarket() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(45, this->crossmarket(), output);
  }

  // int32 DataMultiplePowerOf10 = 46;
  if (this->datamultiplepowerof10() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(46, this->datamultiplepowerof10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDETFBasicInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDETFBasicInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securityid().data(), static_cast<int>(this->securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->securityid(), target);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // int32 MDDate = 4;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->mddate(), target);
  }

  // int32 MDTime = 5;
  if (this->mdtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->mdtime(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->securitytype(), target);
  }

  // string CreationID = 11;
  if (this->creationid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->creationid().data(), static_cast<int>(this->creationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->creationid(), target);
  }

  // string CreationSymbol = 12;
  if (this->creationsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->creationsymbol().data(), static_cast<int>(this->creationsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->creationsymbol(), target);
  }

  // string RedemptionID = 13;
  if (this->redemptionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->redemptionid().data(), static_cast<int>(this->redemptionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->redemptionid(), target);
  }

  // string RedemptionSymbol = 14;
  if (this->redemptionsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->redemptionsymbol().data(), static_cast<int>(this->redemptionsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->redemptionsymbol(), target);
  }

  // string CreationRedemptionCapitalID = 15;
  if (this->creationredemptioncapitalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->creationredemptioncapitalid().data(), static_cast<int>(this->creationredemptioncapitalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->creationredemptioncapitalid(), target);
  }

  // string CreationRedemptionCapitalSymbol = 16;
  if (this->creationredemptioncapitalsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->creationredemptioncapitalsymbol().data(), static_cast<int>(this->creationredemptioncapitalsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->creationredemptioncapitalsymbol(), target);
  }

  // string CrossSourceCapitalID = 17;
  if (this->crosssourcecapitalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crosssourcecapitalid().data(), static_cast<int>(this->crosssourcecapitalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->crosssourcecapitalid(), target);
  }

  // string CrossSourceCapitalSymbol = 18;
  if (this->crosssourcecapitalsymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crosssourcecapitalsymbol().data(), static_cast<int>(this->crosssourcecapitalsymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->crosssourcecapitalsymbol(), target);
  }

  // string FundManagementCompany = 19;
  if (this->fundmanagementcompany().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fundmanagementcompany().data(), static_cast<int>(this->fundmanagementcompany().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        19, this->fundmanagementcompany(), target);
  }

  // string UnderlyingSecurityID = 20;
  if (this->underlyingsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->underlyingsecurityid().data(), static_cast<int>(this->underlyingsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        20, this->underlyingsecurityid(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
  if (this->underlyingsecurityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->underlyingsecurityidsource(), target);
  }

  // double CreationRedemptionUnit = 22;
  if (!(this->creationredemptionunit() <= 0 && this->creationredemptionunit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->creationredemptionunit(), target);
  }

  // double EstimateCashComponent = 23;
  if (!(this->estimatecashcomponent() <= 0 && this->estimatecashcomponent() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->estimatecashcomponent(), target);
  }

  // double MaxCashRatio = 24;
  if (!(this->maxcashratio() <= 0 && this->maxcashratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->maxcashratio(), target);
  }

  // bool IsPublish = 25;
  if (this->ispublish() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->ispublish(), target);
  }

  // bool IsAllowCreation = 26;
  if (this->isallowcreation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->isallowcreation(), target);
  }

  // bool IsAllowRedemption = 27;
  if (this->isallowredemption() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->isallowredemption(), target);
  }

  // int64 RecordNum = 28;
  if (this->recordnum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(28, this->recordnum(), target);
  }

  // string TradingDay = 29;
  if (this->tradingday().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        29, this->tradingday(), target);
  }

  // string PreTradingDay = 30;
  if (this->pretradingday().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pretradingday().data(), static_cast<int>(this->pretradingday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        30, this->pretradingday(), target);
  }

  // double CashComponent = 31;
  if (!(this->cashcomponent() <= 0 && this->cashcomponent() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->cashcomponent(), target);
  }

  // double NAVperCU = 32;
  if (!(this->navpercu() <= 0 && this->navpercu() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->navpercu(), target);
  }

  // double NAV = 33;
  if (!(this->nav() <= 0 && this->nav() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->nav(), target);
  }

  // double DividendPerCU = 34;
  if (!(this->dividendpercu() <= 0 && this->dividendpercu() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->dividendpercu(), target);
  }

  // double CreationLimit = 35;
  if (!(this->creationlimit() <= 0 && this->creationlimit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->creationlimit(), target);
  }

  // double RedemptionLimit = 36;
  if (!(this->redemptionlimit() <= 0 && this->redemptionlimit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->redemptionlimit(), target);
  }

  // double CreationLimitPerUser = 37;
  if (!(this->creationlimitperuser() <= 0 && this->creationlimitperuser() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->creationlimitperuser(), target);
  }

  // double RedemptionLimitPerUser = 38;
  if (!(this->redemptionlimitperuser() <= 0 && this->redemptionlimitperuser() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->redemptionlimitperuser(), target);
  }

  // double NetCreationLimit = 39;
  if (!(this->netcreationlimit() <= 0 && this->netcreationlimit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->netcreationlimit(), target);
  }

  // double NetRedemptionLimit = 40;
  if (!(this->netredemptionlimit() <= 0 && this->netredemptionlimit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->netredemptionlimit(), target);
  }

  // double NetCreationLimitPerUser = 41;
  if (!(this->netcreationlimitperuser() <= 0 && this->netcreationlimitperuser() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->netcreationlimitperuser(), target);
  }

  // double NetRedemptionLimitPerUser = 42;
  if (!(this->netredemptionlimitperuser() <= 0 && this->netredemptionlimitperuser() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->netredemptionlimitperuser(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->etfcomponents_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, this->etfcomponents(static_cast<int>(i)), target);
  }

  // string FormerSymbol = 44;
  if (this->formersymbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->formersymbol().data(), static_cast<int>(this->formersymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        44, this->formersymbol(), target);
  }

  // bool CrossMarket = 45;
  if (this->crossmarket() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->crossmarket(), target);
  }

  // int32 DataMultiplePowerOf10 = 46;
  if (this->datamultiplepowerof10() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->datamultiplepowerof10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDETFBasicInfo)
  return target;
}

size_t MDETFBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->etfcomponents_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->etfcomponents(static_cast<int>(i)));
    }
  }

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->securityid());
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string CreationID = 11;
  if (this->creationid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->creationid());
  }

  // string CreationSymbol = 12;
  if (this->creationsymbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->creationsymbol());
  }

  // string RedemptionID = 13;
  if (this->redemptionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->redemptionid());
  }

  // string RedemptionSymbol = 14;
  if (this->redemptionsymbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->redemptionsymbol());
  }

  // string CreationRedemptionCapitalID = 15;
  if (this->creationredemptioncapitalid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->creationredemptioncapitalid());
  }

  // string CreationRedemptionCapitalSymbol = 16;
  if (this->creationredemptioncapitalsymbol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->creationredemptioncapitalsymbol());
  }

  // string CrossSourceCapitalID = 17;
  if (this->crosssourcecapitalid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->crosssourcecapitalid());
  }

  // string CrossSourceCapitalSymbol = 18;
  if (this->crosssourcecapitalsymbol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->crosssourcecapitalsymbol());
  }

  // string FundManagementCompany = 19;
  if (this->fundmanagementcompany().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fundmanagementcompany());
  }

  // string UnderlyingSecurityID = 20;
  if (this->underlyingsecurityid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->underlyingsecurityid());
  }

  // string TradingDay = 29;
  if (this->tradingday().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // string PreTradingDay = 30;
  if (this->pretradingday().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->pretradingday());
  }

  // string FormerSymbol = 44;
  if (this->formersymbol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->formersymbol());
  }

  // int32 MDDate = 4;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // int32 MDTime = 5;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // double CreationRedemptionUnit = 22;
  if (!(this->creationredemptionunit() <= 0 && this->creationredemptionunit() >= 0)) {
    total_size += 2 + 8;
  }

  // double EstimateCashComponent = 23;
  if (!(this->estimatecashcomponent() <= 0 && this->estimatecashcomponent() >= 0)) {
    total_size += 2 + 8;
  }

  // double MaxCashRatio = 24;
  if (!(this->maxcashratio() <= 0 && this->maxcashratio() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 RecordNum = 28;
  if (this->recordnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->recordnum());
  }

  // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
  if (this->underlyingsecurityidsource() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->underlyingsecurityidsource());
  }

  // bool IsPublish = 25;
  if (this->ispublish() != 0) {
    total_size += 2 + 1;
  }

  // bool IsAllowCreation = 26;
  if (this->isallowcreation() != 0) {
    total_size += 2 + 1;
  }

  // bool IsAllowRedemption = 27;
  if (this->isallowredemption() != 0) {
    total_size += 2 + 1;
  }

  // bool CrossMarket = 45;
  if (this->crossmarket() != 0) {
    total_size += 2 + 1;
  }

  // double CashComponent = 31;
  if (!(this->cashcomponent() <= 0 && this->cashcomponent() >= 0)) {
    total_size += 2 + 8;
  }

  // double NAVperCU = 32;
  if (!(this->navpercu() <= 0 && this->navpercu() >= 0)) {
    total_size += 2 + 8;
  }

  // double NAV = 33;
  if (!(this->nav() <= 0 && this->nav() >= 0)) {
    total_size += 2 + 8;
  }

  // double DividendPerCU = 34;
  if (!(this->dividendpercu() <= 0 && this->dividendpercu() >= 0)) {
    total_size += 2 + 8;
  }

  // double CreationLimit = 35;
  if (!(this->creationlimit() <= 0 && this->creationlimit() >= 0)) {
    total_size += 2 + 8;
  }

  // double RedemptionLimit = 36;
  if (!(this->redemptionlimit() <= 0 && this->redemptionlimit() >= 0)) {
    total_size += 2 + 8;
  }

  // double CreationLimitPerUser = 37;
  if (!(this->creationlimitperuser() <= 0 && this->creationlimitperuser() >= 0)) {
    total_size += 2 + 8;
  }

  // double RedemptionLimitPerUser = 38;
  if (!(this->redemptionlimitperuser() <= 0 && this->redemptionlimitperuser() >= 0)) {
    total_size += 2 + 8;
  }

  // double NetCreationLimit = 39;
  if (!(this->netcreationlimit() <= 0 && this->netcreationlimit() >= 0)) {
    total_size += 2 + 8;
  }

  // double NetRedemptionLimit = 40;
  if (!(this->netredemptionlimit() <= 0 && this->netredemptionlimit() >= 0)) {
    total_size += 2 + 8;
  }

  // double NetCreationLimitPerUser = 41;
  if (!(this->netcreationlimitperuser() <= 0 && this->netcreationlimitperuser() >= 0)) {
    total_size += 2 + 8;
  }

  // double NetRedemptionLimitPerUser = 42;
  if (!(this->netredemptionlimitperuser() <= 0 && this->netredemptionlimitperuser() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 DataMultiplePowerOf10 = 46;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDETFBasicInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MDETFBasicInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDETFBasicInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDETFBasicInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDETFBasicInfo)
    MergeFrom(*source);
  }
}

void MDETFBasicInfo::MergeFrom(const MDETFBasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  etfcomponents_.MergeFrom(from.etfcomponents_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.securityid().size() > 0) {

    securityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securityid_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.creationid().size() > 0) {

    creationid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationid_);
  }
  if (from.creationsymbol().size() > 0) {

    creationsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationsymbol_);
  }
  if (from.redemptionid().size() > 0) {

    redemptionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.redemptionid_);
  }
  if (from.redemptionsymbol().size() > 0) {

    redemptionsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.redemptionsymbol_);
  }
  if (from.creationredemptioncapitalid().size() > 0) {

    creationredemptioncapitalid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationredemptioncapitalid_);
  }
  if (from.creationredemptioncapitalsymbol().size() > 0) {

    creationredemptioncapitalsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationredemptioncapitalsymbol_);
  }
  if (from.crosssourcecapitalid().size() > 0) {

    crosssourcecapitalid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crosssourcecapitalid_);
  }
  if (from.crosssourcecapitalsymbol().size() > 0) {

    crosssourcecapitalsymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crosssourcecapitalsymbol_);
  }
  if (from.fundmanagementcompany().size() > 0) {

    fundmanagementcompany_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundmanagementcompany_);
  }
  if (from.underlyingsecurityid().size() > 0) {

    underlyingsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.underlyingsecurityid_);
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.pretradingday().size() > 0) {

    pretradingday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pretradingday_);
  }
  if (from.formersymbol().size() > 0) {

    formersymbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formersymbol_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (!(from.creationredemptionunit() <= 0 && from.creationredemptionunit() >= 0)) {
    set_creationredemptionunit(from.creationredemptionunit());
  }
  if (!(from.estimatecashcomponent() <= 0 && from.estimatecashcomponent() >= 0)) {
    set_estimatecashcomponent(from.estimatecashcomponent());
  }
  if (!(from.maxcashratio() <= 0 && from.maxcashratio() >= 0)) {
    set_maxcashratio(from.maxcashratio());
  }
  if (from.recordnum() != 0) {
    set_recordnum(from.recordnum());
  }
  if (from.underlyingsecurityidsource() != 0) {
    set_underlyingsecurityidsource(from.underlyingsecurityidsource());
  }
  if (from.ispublish() != 0) {
    set_ispublish(from.ispublish());
  }
  if (from.isallowcreation() != 0) {
    set_isallowcreation(from.isallowcreation());
  }
  if (from.isallowredemption() != 0) {
    set_isallowredemption(from.isallowredemption());
  }
  if (from.crossmarket() != 0) {
    set_crossmarket(from.crossmarket());
  }
  if (!(from.cashcomponent() <= 0 && from.cashcomponent() >= 0)) {
    set_cashcomponent(from.cashcomponent());
  }
  if (!(from.navpercu() <= 0 && from.navpercu() >= 0)) {
    set_navpercu(from.navpercu());
  }
  if (!(from.nav() <= 0 && from.nav() >= 0)) {
    set_nav(from.nav());
  }
  if (!(from.dividendpercu() <= 0 && from.dividendpercu() >= 0)) {
    set_dividendpercu(from.dividendpercu());
  }
  if (!(from.creationlimit() <= 0 && from.creationlimit() >= 0)) {
    set_creationlimit(from.creationlimit());
  }
  if (!(from.redemptionlimit() <= 0 && from.redemptionlimit() >= 0)) {
    set_redemptionlimit(from.redemptionlimit());
  }
  if (!(from.creationlimitperuser() <= 0 && from.creationlimitperuser() >= 0)) {
    set_creationlimitperuser(from.creationlimitperuser());
  }
  if (!(from.redemptionlimitperuser() <= 0 && from.redemptionlimitperuser() >= 0)) {
    set_redemptionlimitperuser(from.redemptionlimitperuser());
  }
  if (!(from.netcreationlimit() <= 0 && from.netcreationlimit() >= 0)) {
    set_netcreationlimit(from.netcreationlimit());
  }
  if (!(from.netredemptionlimit() <= 0 && from.netredemptionlimit() >= 0)) {
    set_netredemptionlimit(from.netredemptionlimit());
  }
  if (!(from.netcreationlimitperuser() <= 0 && from.netcreationlimitperuser() >= 0)) {
    set_netcreationlimitperuser(from.netcreationlimitperuser());
  }
  if (!(from.netredemptionlimitperuser() <= 0 && from.netredemptionlimitperuser() >= 0)) {
    set_netredemptionlimitperuser(from.netredemptionlimitperuser());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void MDETFBasicInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDETFBasicInfo::CopyFrom(const MDETFBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDETFBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDETFBasicInfo::IsInitialized() const {
  return true;
}

void MDETFBasicInfo::Swap(MDETFBasicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDETFBasicInfo::InternalSwap(MDETFBasicInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&etfcomponents_)->InternalSwap(CastToBase(&other->etfcomponents_));
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  creationid_.Swap(&other->creationid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  creationsymbol_.Swap(&other->creationsymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  redemptionid_.Swap(&other->redemptionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  redemptionsymbol_.Swap(&other->redemptionsymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  creationredemptioncapitalid_.Swap(&other->creationredemptioncapitalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  creationredemptioncapitalsymbol_.Swap(&other->creationredemptioncapitalsymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crosssourcecapitalid_.Swap(&other->crosssourcecapitalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crosssourcecapitalsymbol_.Swap(&other->crosssourcecapitalsymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fundmanagementcompany_.Swap(&other->fundmanagementcompany_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlyingsecurityid_.Swap(&other->underlyingsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradingday_.Swap(&other->tradingday_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pretradingday_.Swap(&other->pretradingday_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  formersymbol_.Swap(&other->formersymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mddate_, other->mddate_);
  swap(mdtime_, other->mdtime_);
  swap(securityidsource_, other->securityidsource_);
  swap(securitytype_, other->securitytype_);
  swap(creationredemptionunit_, other->creationredemptionunit_);
  swap(estimatecashcomponent_, other->estimatecashcomponent_);
  swap(maxcashratio_, other->maxcashratio_);
  swap(recordnum_, other->recordnum_);
  swap(underlyingsecurityidsource_, other->underlyingsecurityidsource_);
  swap(ispublish_, other->ispublish_);
  swap(isallowcreation_, other->isallowcreation_);
  swap(isallowredemption_, other->isallowredemption_);
  swap(crossmarket_, other->crossmarket_);
  swap(cashcomponent_, other->cashcomponent_);
  swap(navpercu_, other->navpercu_);
  swap(nav_, other->nav_);
  swap(dividendpercu_, other->dividendpercu_);
  swap(creationlimit_, other->creationlimit_);
  swap(redemptionlimit_, other->redemptionlimit_);
  swap(creationlimitperuser_, other->creationlimitperuser_);
  swap(redemptionlimitperuser_, other->redemptionlimitperuser_);
  swap(netcreationlimit_, other->netcreationlimit_);
  swap(netredemptionlimit_, other->netredemptionlimit_);
  swap(netcreationlimitperuser_, other->netcreationlimitperuser_);
  swap(netredemptionlimitperuser_, other->netredemptionlimitperuser_);
  swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDETFBasicInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MDETFComponentDetail::InitAsDefaultInstance() {
}
class MDETFComponentDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDETFComponentDetail::kHTSCSecurityIDFieldNumber;
const int MDETFComponentDetail::kSecurityIDFieldNumber;
const int MDETFComponentDetail::kSymbolFieldNumber;
const int MDETFComponentDetail::kSecurityIDSourceFieldNumber;
const int MDETFComponentDetail::kComponentShareFieldNumber;
const int MDETFComponentDetail::kSubstituteFlagFieldNumber;
const int MDETFComponentDetail::kPremiumRatioFieldNumber;
const int MDETFComponentDetail::kCreationCashSubstituteFieldNumber;
const int MDETFComponentDetail::kRedemptionCashSubstituteFieldNumber;
const int MDETFComponentDetail::kTotalCashSubstituteFieldNumber;
const int MDETFComponentDetail::kDiscountRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDETFComponentDetail::MDETFComponentDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDETFComponentDetail)
}
MDETFComponentDetail::MDETFComponentDetail(const MDETFComponentDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.securityid().size() > 0) {
    securityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securityid_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  ::memcpy(&componentshare_, &from.componentshare_,
    static_cast<size_t>(reinterpret_cast<char*>(&discountratio_) -
    reinterpret_cast<char*>(&componentshare_)) + sizeof(discountratio_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDETFComponentDetail)
}

void MDETFComponentDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDETFComponentDetail_MDETFBasicInfo_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&componentshare_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discountratio_) -
      reinterpret_cast<char*>(&componentshare_)) + sizeof(discountratio_));
}

MDETFComponentDetail::~MDETFComponentDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDETFComponentDetail)
  SharedDtor();
}

void MDETFComponentDetail::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MDETFComponentDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDETFComponentDetail& MDETFComponentDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDETFComponentDetail_MDETFBasicInfo_2eproto.base);
  return *internal_default_instance();
}


void MDETFComponentDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&componentshare_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discountratio_) -
      reinterpret_cast<char*>(&componentshare_)) + sizeof(discountratio_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDETFComponentDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SecurityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_securityid(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_symbol(), ptr, ctx, "com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // double ComponentShare = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          componentshare_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_substituteflag(static_cast<::com::htsc::mdc::insight::model::MDETFSubstituteFlag>(val));
        } else goto handle_unusual;
        continue;
      // double PremiumRatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          premiumratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CreationCashSubstitute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          creationcashsubstitute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RedemptionCashSubstitute = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          redemptioncashsubstitute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TotalCashSubstitute = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          totalcashsubstitute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double DiscountRatio = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          discountratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDETFComponentDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SecurityID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_securityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->securityid().data(), static_cast<int>(this->securityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ComponentShare = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &componentshare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_substituteflag(static_cast< ::com::htsc::mdc::insight::model::MDETFSubstituteFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PremiumRatio = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premiumratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CreationCashSubstitute = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &creationcashsubstitute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double RedemptionCashSubstitute = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redemptioncashsubstitute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TotalCashSubstitute = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalcashsubstitute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DiscountRatio = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discountratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDETFComponentDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDETFComponentDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDETFComponentDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securityid().data(), static_cast<int>(this->securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->securityid(), output);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->securityidsource(), output);
  }

  // double ComponentShare = 5;
  if (!(this->componentshare() <= 0 && this->componentshare() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->componentshare(), output);
  }

  // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
  if (this->substituteflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->substituteflag(), output);
  }

  // double PremiumRatio = 7;
  if (!(this->premiumratio() <= 0 && this->premiumratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->premiumratio(), output);
  }

  // double CreationCashSubstitute = 8;
  if (!(this->creationcashsubstitute() <= 0 && this->creationcashsubstitute() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->creationcashsubstitute(), output);
  }

  // double RedemptionCashSubstitute = 9;
  if (!(this->redemptioncashsubstitute() <= 0 && this->redemptioncashsubstitute() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->redemptioncashsubstitute(), output);
  }

  // double TotalCashSubstitute = 10;
  if (!(this->totalcashsubstitute() <= 0 && this->totalcashsubstitute() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->totalcashsubstitute(), output);
  }

  // double DiscountRatio = 11;
  if (!(this->discountratio() <= 0 && this->discountratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->discountratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDETFComponentDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDETFComponentDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securityid().data(), static_cast<int>(this->securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->securityid(), target);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->securityidsource(), target);
  }

  // double ComponentShare = 5;
  if (!(this->componentshare() <= 0 && this->componentshare() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->componentshare(), target);
  }

  // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
  if (this->substituteflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->substituteflag(), target);
  }

  // double PremiumRatio = 7;
  if (!(this->premiumratio() <= 0 && this->premiumratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->premiumratio(), target);
  }

  // double CreationCashSubstitute = 8;
  if (!(this->creationcashsubstitute() <= 0 && this->creationcashsubstitute() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->creationcashsubstitute(), target);
  }

  // double RedemptionCashSubstitute = 9;
  if (!(this->redemptioncashsubstitute() <= 0 && this->redemptioncashsubstitute() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->redemptioncashsubstitute(), target);
  }

  // double TotalCashSubstitute = 10;
  if (!(this->totalcashsubstitute() <= 0 && this->totalcashsubstitute() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->totalcashsubstitute(), target);
  }

  // double DiscountRatio = 11;
  if (!(this->discountratio() <= 0 && this->discountratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->discountratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDETFComponentDetail)
  return target;
}

size_t MDETFComponentDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // string SecurityID = 2;
  if (this->securityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->securityid());
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // double ComponentShare = 5;
  if (!(this->componentshare() <= 0 && this->componentshare() >= 0)) {
    total_size += 1 + 8;
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
  if (this->substituteflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->substituteflag());
  }

  // double PremiumRatio = 7;
  if (!(this->premiumratio() <= 0 && this->premiumratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double CreationCashSubstitute = 8;
  if (!(this->creationcashsubstitute() <= 0 && this->creationcashsubstitute() >= 0)) {
    total_size += 1 + 8;
  }

  // double RedemptionCashSubstitute = 9;
  if (!(this->redemptioncashsubstitute() <= 0 && this->redemptioncashsubstitute() >= 0)) {
    total_size += 1 + 8;
  }

  // double TotalCashSubstitute = 10;
  if (!(this->totalcashsubstitute() <= 0 && this->totalcashsubstitute() >= 0)) {
    total_size += 1 + 8;
  }

  // double DiscountRatio = 11;
  if (!(this->discountratio() <= 0 && this->discountratio() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDETFComponentDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const MDETFComponentDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDETFComponentDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDETFComponentDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDETFComponentDetail)
    MergeFrom(*source);
  }
}

void MDETFComponentDetail::MergeFrom(const MDETFComponentDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.securityid().size() > 0) {

    securityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securityid_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (!(from.componentshare() <= 0 && from.componentshare() >= 0)) {
    set_componentshare(from.componentshare());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.substituteflag() != 0) {
    set_substituteflag(from.substituteflag());
  }
  if (!(from.premiumratio() <= 0 && from.premiumratio() >= 0)) {
    set_premiumratio(from.premiumratio());
  }
  if (!(from.creationcashsubstitute() <= 0 && from.creationcashsubstitute() >= 0)) {
    set_creationcashsubstitute(from.creationcashsubstitute());
  }
  if (!(from.redemptioncashsubstitute() <= 0 && from.redemptioncashsubstitute() >= 0)) {
    set_redemptioncashsubstitute(from.redemptioncashsubstitute());
  }
  if (!(from.totalcashsubstitute() <= 0 && from.totalcashsubstitute() >= 0)) {
    set_totalcashsubstitute(from.totalcashsubstitute());
  }
  if (!(from.discountratio() <= 0 && from.discountratio() >= 0)) {
    set_discountratio(from.discountratio());
  }
}

void MDETFComponentDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDETFComponentDetail::CopyFrom(const MDETFComponentDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDETFComponentDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDETFComponentDetail::IsInitialized() const {
  return true;
}

void MDETFComponentDetail::Swap(MDETFComponentDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDETFComponentDetail::InternalSwap(MDETFComponentDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(componentshare_, other->componentshare_);
  swap(securityidsource_, other->securityidsource_);
  swap(substituteflag_, other->substituteflag_);
  swap(premiumratio_, other->premiumratio_);
  swap(creationcashsubstitute_, other->creationcashsubstitute_);
  swap(redemptioncashsubstitute_, other->redemptioncashsubstitute_);
  swap(totalcashsubstitute_, other->totalcashsubstitute_);
  swap(discountratio_, other->discountratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDETFComponentDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDETFBasicInfo* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDETFBasicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDETFBasicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDETFComponentDetail* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDETFComponentDetail >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDETFComponentDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
