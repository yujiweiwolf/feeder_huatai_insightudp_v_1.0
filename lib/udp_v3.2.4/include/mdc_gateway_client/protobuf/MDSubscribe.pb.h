// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDSubscribe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDSubscribe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDSubscribe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "SecuritySourceType.pb.h"
#include "EMarketDataType.pb.h"
#include "InsightErrorContext.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDSubscribe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDSubscribe_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDSubscribeRequest;
class MDSubscribeRequestDefaultTypeInternal;
extern MDSubscribeRequestDefaultTypeInternal _MDSubscribeRequest_default_instance_;
class MDSubscribeResponse;
class MDSubscribeResponseDefaultTypeInternal;
extern MDSubscribeResponseDefaultTypeInternal _MDSubscribeResponse_default_instance_;
class SubscribeAll;
class SubscribeAllDefaultTypeInternal;
extern SubscribeAllDefaultTypeInternal _SubscribeAll_default_instance_;
class SubscribeByID;
class SubscribeByIDDefaultTypeInternal;
extern SubscribeByIDDefaultTypeInternal _SubscribeByID_default_instance_;
class SubscribeByIDDetail;
class SubscribeByIDDetailDefaultTypeInternal;
extern SubscribeByIDDetailDefaultTypeInternal _SubscribeByIDDetail_default_instance_;
class SubscribeBySourceType;
class SubscribeBySourceTypeDefaultTypeInternal;
extern SubscribeBySourceTypeDefaultTypeInternal _SubscribeBySourceType_default_instance_;
class SubscribeBySourceTypeDetail;
class SubscribeBySourceTypeDetailDefaultTypeInternal;
extern SubscribeBySourceTypeDetailDefaultTypeInternal _SubscribeBySourceTypeDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDSubscribeRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSubscribeRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDSubscribeResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSubscribeResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeAll* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeAll>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeByID* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeByID>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeByIDDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeByIDDetail>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeBySourceType* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeBySourceType>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

enum ESubscribeActionType : int {
  COVERAGE = 0,
  ADD = 1,
  DECREASE = 2,
  CANCEL = 3,
  ESubscribeActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ESubscribeActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ESubscribeActionType_IsValid(int value);
constexpr ESubscribeActionType ESubscribeActionType_MIN = COVERAGE;
constexpr ESubscribeActionType ESubscribeActionType_MAX = CANCEL;
constexpr int ESubscribeActionType_ARRAYSIZE = ESubscribeActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESubscribeActionType_descriptor();
template<typename T>
inline const std::string& ESubscribeActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESubscribeActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESubscribeActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESubscribeActionType_descriptor(), enum_t_value);
}
inline bool ESubscribeActionType_Parse(
    const std::string& name, ESubscribeActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESubscribeActionType>(
    ESubscribeActionType_descriptor(), name, value);
}
// ===================================================================

class MDSubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDSubscribeRequest) */ {
 public:
  MDSubscribeRequest();
  virtual ~MDSubscribeRequest();

  MDSubscribeRequest(const MDSubscribeRequest& from);
  MDSubscribeRequest(MDSubscribeRequest&& from) noexcept
    : MDSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MDSubscribeRequest& operator=(const MDSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDSubscribeRequest& operator=(MDSubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDSubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MDSubscribeRequest*>(
               &_MDSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDSubscribeRequest* other);
  friend void swap(MDSubscribeRequest& a, MDSubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDSubscribeRequest* New() const final {
    return CreateMaybeMessage<MDSubscribeRequest>(nullptr);
  }

  MDSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDSubscribeRequest& from);
  void MergeFrom(const MDSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDSubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDSubscribe_2eproto);
    return ::descriptor_table_MDSubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
  bool has_subscribeall() const;
  void clear_subscribeall();
  static const int kSubscribeAllFieldNumber = 2;
  const ::com::htsc::mdc::insight::model::SubscribeAll& subscribeall() const;
  ::com::htsc::mdc::insight::model::SubscribeAll* release_subscribeall();
  ::com::htsc::mdc::insight::model::SubscribeAll* mutable_subscribeall();
  void set_allocated_subscribeall(::com::htsc::mdc::insight::model::SubscribeAll* subscribeall);

  // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
  bool has_subscribebysourcetype() const;
  void clear_subscribebysourcetype();
  static const int kSubscribeBySourceTypeFieldNumber = 3;
  const ::com::htsc::mdc::insight::model::SubscribeBySourceType& subscribebysourcetype() const;
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* release_subscribebysourcetype();
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* mutable_subscribebysourcetype();
  void set_allocated_subscribebysourcetype(::com::htsc::mdc::insight::model::SubscribeBySourceType* subscribebysourcetype);

  // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
  bool has_subscribebyid() const;
  void clear_subscribebyid();
  static const int kSubscribeByIDFieldNumber = 4;
  const ::com::htsc::mdc::insight::model::SubscribeByID& subscribebyid() const;
  ::com::htsc::mdc::insight::model::SubscribeByID* release_subscribebyid();
  ::com::htsc::mdc::insight::model::SubscribeByID* mutable_subscribebyid();
  void set_allocated_subscribebyid(::com::htsc::mdc::insight::model::SubscribeByID* subscribebyid);

  // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
  void clear_subscribeactiontype();
  static const int kSubscribeActionTypeFieldNumber = 1;
  ::com::htsc::mdc::insight::model::ESubscribeActionType subscribeactiontype() const;
  void set_subscribeactiontype(::com::htsc::mdc::insight::model::ESubscribeActionType value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDSubscribeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::htsc::mdc::insight::model::SubscribeAll* subscribeall_;
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* subscribebysourcetype_;
  ::com::htsc::mdc::insight::model::SubscribeByID* subscribebyid_;
  int subscribeactiontype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAll :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeAll) */ {
 public:
  SubscribeAll();
  virtual ~SubscribeAll();

  SubscribeAll(const SubscribeAll& from);
  SubscribeAll(SubscribeAll&& from) noexcept
    : SubscribeAll() {
    *this = ::std::move(from);
  }

  inline SubscribeAll& operator=(const SubscribeAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAll& operator=(SubscribeAll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeAll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeAll* internal_default_instance() {
    return reinterpret_cast<const SubscribeAll*>(
               &_SubscribeAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SubscribeAll* other);
  friend void swap(SubscribeAll& a, SubscribeAll& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeAll* New() const final {
    return CreateMaybeMessage<SubscribeAll>(nullptr);
  }

  SubscribeAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeAll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeAll& from);
  void MergeFrom(const SubscribeAll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeAll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeAll";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDSubscribe_2eproto);
    return ::descriptor_table_MDSubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
  int marketdatatypes_size() const;
  void clear_marketdatatypes();
  static const int kMarketDataTypesFieldNumber = 1;
  ::com::htsc::mdc::insight::model::EMarketDataType marketdatatypes(int index) const;
  void set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value);
  void add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& marketdatatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_marketdatatypes();

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeAll)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> marketdatatypes_;
  mutable std::atomic<int> _marketdatatypes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeByID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeByID) */ {
 public:
  SubscribeByID();
  virtual ~SubscribeByID();

  SubscribeByID(const SubscribeByID& from);
  SubscribeByID(SubscribeByID&& from) noexcept
    : SubscribeByID() {
    *this = ::std::move(from);
  }

  inline SubscribeByID& operator=(const SubscribeByID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeByID& operator=(SubscribeByID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeByID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeByID* internal_default_instance() {
    return reinterpret_cast<const SubscribeByID*>(
               &_SubscribeByID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SubscribeByID* other);
  friend void swap(SubscribeByID& a, SubscribeByID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeByID* New() const final {
    return CreateMaybeMessage<SubscribeByID>(nullptr);
  }

  SubscribeByID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeByID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeByID& from);
  void MergeFrom(const SubscribeByID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeByID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeByID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDSubscribe_2eproto);
    return ::descriptor_table_MDSubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
  int subscribebyiddetails_size() const;
  void clear_subscribebyiddetails();
  static const int kSubscribeByIDDetailsFieldNumber = 1;
  ::com::htsc::mdc::insight::model::SubscribeByIDDetail* mutable_subscribebyiddetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >*
      mutable_subscribebyiddetails();
  const ::com::htsc::mdc::insight::model::SubscribeByIDDetail& subscribebyiddetails(int index) const;
  ::com::htsc::mdc::insight::model::SubscribeByIDDetail* add_subscribebyiddetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >&
      subscribebyiddetails() const;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
  int globalmarketdatatypes_size() const;
  void clear_globalmarketdatatypes();
  static const int kGlobalMarketDataTypesFieldNumber = 2;
  ::com::htsc::mdc::insight::model::EMarketDataType globalmarketdatatypes(int index) const;
  void set_globalmarketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value);
  void add_globalmarketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& globalmarketdatatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_globalmarketdatatypes();

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeByID)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail > subscribebyiddetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> globalmarketdatatypes_;
  mutable std::atomic<int> _globalmarketdatatypes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeByIDDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeByIDDetail) */ {
 public:
  SubscribeByIDDetail();
  virtual ~SubscribeByIDDetail();

  SubscribeByIDDetail(const SubscribeByIDDetail& from);
  SubscribeByIDDetail(SubscribeByIDDetail&& from) noexcept
    : SubscribeByIDDetail() {
    *this = ::std::move(from);
  }

  inline SubscribeByIDDetail& operator=(const SubscribeByIDDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeByIDDetail& operator=(SubscribeByIDDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeByIDDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeByIDDetail* internal_default_instance() {
    return reinterpret_cast<const SubscribeByIDDetail*>(
               &_SubscribeByIDDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SubscribeByIDDetail* other);
  friend void swap(SubscribeByIDDetail& a, SubscribeByIDDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeByIDDetail* New() const final {
    return CreateMaybeMessage<SubscribeByIDDetail>(nullptr);
  }

  SubscribeByIDDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeByIDDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeByIDDetail& from);
  void MergeFrom(const SubscribeByIDDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeByIDDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeByIDDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDSubscribe_2eproto);
    return ::descriptor_table_MDSubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  int marketdatatypes_size() const;
  void clear_marketdatatypes();
  static const int kMarketDataTypesFieldNumber = 2;
  ::com::htsc::mdc::insight::model::EMarketDataType marketdatatypes(int index) const;
  void set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value);
  void add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& marketdatatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_marketdatatypes();

  // string htscSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHtscSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeByIDDetail)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> marketdatatypes_;
  mutable std::atomic<int> _marketdatatypes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeBySourceType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeBySourceType) */ {
 public:
  SubscribeBySourceType();
  virtual ~SubscribeBySourceType();

  SubscribeBySourceType(const SubscribeBySourceType& from);
  SubscribeBySourceType(SubscribeBySourceType&& from) noexcept
    : SubscribeBySourceType() {
    *this = ::std::move(from);
  }

  inline SubscribeBySourceType& operator=(const SubscribeBySourceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeBySourceType& operator=(SubscribeBySourceType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeBySourceType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeBySourceType* internal_default_instance() {
    return reinterpret_cast<const SubscribeBySourceType*>(
               &_SubscribeBySourceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SubscribeBySourceType* other);
  friend void swap(SubscribeBySourceType& a, SubscribeBySourceType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeBySourceType* New() const final {
    return CreateMaybeMessage<SubscribeBySourceType>(nullptr);
  }

  SubscribeBySourceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeBySourceType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeBySourceType& from);
  void MergeFrom(const SubscribeBySourceType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeBySourceType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeBySourceType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDSubscribe_2eproto);
    return ::descriptor_table_MDSubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
  int subscribebysourcetypedetail_size() const;
  void clear_subscribebysourcetypedetail();
  static const int kSubscribeBySourceTypeDetailFieldNumber = 1;
  ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* mutable_subscribebysourcetypedetail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >*
      mutable_subscribebysourcetypedetail();
  const ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail& subscribebysourcetypedetail(int index) const;
  ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* add_subscribebysourcetypedetail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >&
      subscribebysourcetypedetail() const;

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeBySourceType)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail > subscribebysourcetypedetail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeBySourceTypeDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail) */ {
 public:
  SubscribeBySourceTypeDetail();
  virtual ~SubscribeBySourceTypeDetail();

  SubscribeBySourceTypeDetail(const SubscribeBySourceTypeDetail& from);
  SubscribeBySourceTypeDetail(SubscribeBySourceTypeDetail&& from) noexcept
    : SubscribeBySourceTypeDetail() {
    *this = ::std::move(from);
  }

  inline SubscribeBySourceTypeDetail& operator=(const SubscribeBySourceTypeDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeBySourceTypeDetail& operator=(SubscribeBySourceTypeDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeBySourceTypeDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeBySourceTypeDetail* internal_default_instance() {
    return reinterpret_cast<const SubscribeBySourceTypeDetail*>(
               &_SubscribeBySourceTypeDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SubscribeBySourceTypeDetail* other);
  friend void swap(SubscribeBySourceTypeDetail& a, SubscribeBySourceTypeDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeBySourceTypeDetail* New() const final {
    return CreateMaybeMessage<SubscribeBySourceTypeDetail>(nullptr);
  }

  SubscribeBySourceTypeDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeBySourceTypeDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeBySourceTypeDetail& from);
  void MergeFrom(const SubscribeBySourceTypeDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeBySourceTypeDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDSubscribe_2eproto);
    return ::descriptor_table_MDSubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  int marketdatatypes_size() const;
  void clear_marketdatatypes();
  static const int kMarketDataTypesFieldNumber = 2;
  ::com::htsc::mdc::insight::model::EMarketDataType marketdatatypes(int index) const;
  void set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value);
  void add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& marketdatatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_marketdatatypes();

  // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
  bool has_securitysourcetypes() const;
  void clear_securitysourcetypes();
  static const int kSecuritySourceTypesFieldNumber = 1;
  const ::com::htsc::mdc::insight::model::SecuritySourceType& securitysourcetypes() const;
  ::com::htsc::mdc::insight::model::SecuritySourceType* release_securitysourcetypes();
  ::com::htsc::mdc::insight::model::SecuritySourceType* mutable_securitysourcetypes();
  void set_allocated_securitysourcetypes(::com::htsc::mdc::insight::model::SecuritySourceType* securitysourcetypes);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> marketdatatypes_;
  mutable std::atomic<int> _marketdatatypes_cached_byte_size_;
  ::com::htsc::mdc::insight::model::SecuritySourceType* securitysourcetypes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class MDSubscribeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDSubscribeResponse) */ {
 public:
  MDSubscribeResponse();
  virtual ~MDSubscribeResponse();

  MDSubscribeResponse(const MDSubscribeResponse& from);
  MDSubscribeResponse(MDSubscribeResponse&& from) noexcept
    : MDSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline MDSubscribeResponse& operator=(const MDSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDSubscribeResponse& operator=(MDSubscribeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDSubscribeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const MDSubscribeResponse*>(
               &_MDSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MDSubscribeResponse* other);
  friend void swap(MDSubscribeResponse& a, MDSubscribeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDSubscribeResponse* New() const final {
    return CreateMaybeMessage<MDSubscribeResponse>(nullptr);
  }

  MDSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDSubscribeResponse& from);
  void MergeFrom(const MDSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDSubscribeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDSubscribe_2eproto);
    return ::descriptor_table_MDSubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  bool has_errorcontext() const;
  void clear_errorcontext();
  static const int kErrorContextFieldNumber = 2;
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);

  // bool isSuccess = 1;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  bool issuccess() const;
  void set_issuccess(bool value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDSubscribeResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
  bool issuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDSubscribeRequest

// .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
inline void MDSubscribeRequest::clear_subscribeactiontype() {
  subscribeactiontype_ = 0;
}
inline ::com::htsc::mdc::insight::model::ESubscribeActionType MDSubscribeRequest::subscribeactiontype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeActionType)
  return static_cast< ::com::htsc::mdc::insight::model::ESubscribeActionType >(subscribeactiontype_);
}
inline void MDSubscribeRequest::set_subscribeactiontype(::com::htsc::mdc::insight::model::ESubscribeActionType value) {
  
  subscribeactiontype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeActionType)
}

// .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
inline bool MDSubscribeRequest::has_subscribeall() const {
  return this != internal_default_instance() && subscribeall_ != nullptr;
}
inline void MDSubscribeRequest::clear_subscribeall() {
  if (GetArenaNoVirtual() == nullptr && subscribeall_ != nullptr) {
    delete subscribeall_;
  }
  subscribeall_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SubscribeAll& MDSubscribeRequest::subscribeall() const {
  const ::com::htsc::mdc::insight::model::SubscribeAll* p = subscribeall_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::SubscribeAll*>(
      &::com::htsc::mdc::insight::model::_SubscribeAll_default_instance_);
}
inline ::com::htsc::mdc::insight::model::SubscribeAll* MDSubscribeRequest::release_subscribeall() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
  
  ::com::htsc::mdc::insight::model::SubscribeAll* temp = subscribeall_;
  subscribeall_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeAll* MDSubscribeRequest::mutable_subscribeall() {
  
  if (subscribeall_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeAll>(GetArenaNoVirtual());
    subscribeall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
  return subscribeall_;
}
inline void MDSubscribeRequest::set_allocated_subscribeall(::com::htsc::mdc::insight::model::SubscribeAll* subscribeall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subscribeall_;
  }
  if (subscribeall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscribeall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribeall, submessage_arena);
    }
    
  } else {
    
  }
  subscribeall_ = subscribeall;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
}

// .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
inline bool MDSubscribeRequest::has_subscribebysourcetype() const {
  return this != internal_default_instance() && subscribebysourcetype_ != nullptr;
}
inline void MDSubscribeRequest::clear_subscribebysourcetype() {
  if (GetArenaNoVirtual() == nullptr && subscribebysourcetype_ != nullptr) {
    delete subscribebysourcetype_;
  }
  subscribebysourcetype_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SubscribeBySourceType& MDSubscribeRequest::subscribebysourcetype() const {
  const ::com::htsc::mdc::insight::model::SubscribeBySourceType* p = subscribebysourcetype_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::SubscribeBySourceType*>(
      &::com::htsc::mdc::insight::model::_SubscribeBySourceType_default_instance_);
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceType* MDSubscribeRequest::release_subscribebysourcetype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
  
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* temp = subscribebysourcetype_;
  subscribebysourcetype_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceType* MDSubscribeRequest::mutable_subscribebysourcetype() {
  
  if (subscribebysourcetype_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeBySourceType>(GetArenaNoVirtual());
    subscribebysourcetype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
  return subscribebysourcetype_;
}
inline void MDSubscribeRequest::set_allocated_subscribebysourcetype(::com::htsc::mdc::insight::model::SubscribeBySourceType* subscribebysourcetype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subscribebysourcetype_;
  }
  if (subscribebysourcetype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscribebysourcetype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribebysourcetype, submessage_arena);
    }
    
  } else {
    
  }
  subscribebysourcetype_ = subscribebysourcetype;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
}

// .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
inline bool MDSubscribeRequest::has_subscribebyid() const {
  return this != internal_default_instance() && subscribebyid_ != nullptr;
}
inline void MDSubscribeRequest::clear_subscribebyid() {
  if (GetArenaNoVirtual() == nullptr && subscribebyid_ != nullptr) {
    delete subscribebyid_;
  }
  subscribebyid_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SubscribeByID& MDSubscribeRequest::subscribebyid() const {
  const ::com::htsc::mdc::insight::model::SubscribeByID* p = subscribebyid_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::SubscribeByID*>(
      &::com::htsc::mdc::insight::model::_SubscribeByID_default_instance_);
}
inline ::com::htsc::mdc::insight::model::SubscribeByID* MDSubscribeRequest::release_subscribebyid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
  
  ::com::htsc::mdc::insight::model::SubscribeByID* temp = subscribebyid_;
  subscribebyid_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeByID* MDSubscribeRequest::mutable_subscribebyid() {
  
  if (subscribebyid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeByID>(GetArenaNoVirtual());
    subscribebyid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
  return subscribebyid_;
}
inline void MDSubscribeRequest::set_allocated_subscribebyid(::com::htsc::mdc::insight::model::SubscribeByID* subscribebyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subscribebyid_;
  }
  if (subscribebyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscribebyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribebyid, submessage_arena);
    }
    
  } else {
    
  }
  subscribebyid_ = subscribebyid;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
}

// -------------------------------------------------------------------

// SubscribeAll

// repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
inline int SubscribeAll::marketdatatypes_size() const {
  return marketdatatypes_.size();
}
inline void SubscribeAll::clear_marketdatatypes() {
  marketdatatypes_.Clear();
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeAll::marketdatatypes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(marketdatatypes_.Get(index));
}
inline void SubscribeAll::set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value) {
  marketdatatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
}
inline void SubscribeAll::add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  marketdatatypes_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubscribeAll::marketdatatypes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
  return marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeAll::mutable_marketdatatypes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
  return &marketdatatypes_;
}

// -------------------------------------------------------------------

// SubscribeByID

// repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
inline int SubscribeByID::subscribebyiddetails_size() const {
  return subscribebyiddetails_.size();
}
inline void SubscribeByID::clear_subscribebyiddetails() {
  subscribebyiddetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::SubscribeByIDDetail* SubscribeByID::mutable_subscribebyiddetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return subscribebyiddetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >*
SubscribeByID::mutable_subscribebyiddetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return &subscribebyiddetails_;
}
inline const ::com::htsc::mdc::insight::model::SubscribeByIDDetail& SubscribeByID::subscribebyiddetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return subscribebyiddetails_.Get(index);
}
inline ::com::htsc::mdc::insight::model::SubscribeByIDDetail* SubscribeByID::add_subscribebyiddetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return subscribebyiddetails_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >&
SubscribeByID::subscribebyiddetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return subscribebyiddetails_;
}

// repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
inline int SubscribeByID::globalmarketdatatypes_size() const {
  return globalmarketdatatypes_.size();
}
inline void SubscribeByID::clear_globalmarketdatatypes() {
  globalmarketdatatypes_.Clear();
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeByID::globalmarketdatatypes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(globalmarketdatatypes_.Get(index));
}
inline void SubscribeByID::set_globalmarketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value) {
  globalmarketdatatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
}
inline void SubscribeByID::add_globalmarketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  globalmarketdatatypes_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubscribeByID::globalmarketdatatypes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
  return globalmarketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeByID::mutable_globalmarketdatatypes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
  return &globalmarketdatatypes_;
}

// -------------------------------------------------------------------

// SubscribeByIDDetail

// string htscSecurityID = 1;
inline void SubscribeByIDDetail::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubscribeByIDDetail::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void SubscribeByIDDetail::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
}
inline void SubscribeByIDDetail::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
}
inline void SubscribeByIDDetail::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
}
inline void SubscribeByIDDetail::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
}
inline std::string* SubscribeByIDDetail::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubscribeByIDDetail::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeByIDDetail::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
}

// repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
inline int SubscribeByIDDetail::marketdatatypes_size() const {
  return marketdatatypes_.size();
}
inline void SubscribeByIDDetail::clear_marketdatatypes() {
  marketdatatypes_.Clear();
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeByIDDetail::marketdatatypes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(marketdatatypes_.Get(index));
}
inline void SubscribeByIDDetail::set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value) {
  marketdatatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
}
inline void SubscribeByIDDetail::add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  marketdatatypes_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubscribeByIDDetail::marketdatatypes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
  return marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeByIDDetail::mutable_marketdatatypes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
  return &marketdatatypes_;
}

// -------------------------------------------------------------------

// SubscribeBySourceType

// repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
inline int SubscribeBySourceType::subscribebysourcetypedetail_size() const {
  return subscribebysourcetypedetail_.size();
}
inline void SubscribeBySourceType::clear_subscribebysourcetypedetail() {
  subscribebysourcetypedetail_.Clear();
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* SubscribeBySourceType::mutable_subscribebysourcetypedetail(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return subscribebysourcetypedetail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >*
SubscribeBySourceType::mutable_subscribebysourcetypedetail() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return &subscribebysourcetypedetail_;
}
inline const ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail& SubscribeBySourceType::subscribebysourcetypedetail(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return subscribebysourcetypedetail_.Get(index);
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* SubscribeBySourceType::add_subscribebysourcetypedetail() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return subscribebysourcetypedetail_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >&
SubscribeBySourceType::subscribebysourcetypedetail() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return subscribebysourcetypedetail_;
}

// -------------------------------------------------------------------

// SubscribeBySourceTypeDetail

// .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
inline bool SubscribeBySourceTypeDetail::has_securitysourcetypes() const {
  return this != internal_default_instance() && securitysourcetypes_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& SubscribeBySourceTypeDetail::securitysourcetypes() const {
  const ::com::htsc::mdc::insight::model::SecuritySourceType* p = securitysourcetypes_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::SecuritySourceType*>(
      &::com::htsc::mdc::insight::model::_SecuritySourceType_default_instance_);
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* SubscribeBySourceTypeDetail::release_securitysourcetypes() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
  
  ::com::htsc::mdc::insight::model::SecuritySourceType* temp = securitysourcetypes_;
  securitysourcetypes_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* SubscribeBySourceTypeDetail::mutable_securitysourcetypes() {
  
  if (securitysourcetypes_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SecuritySourceType>(GetArenaNoVirtual());
    securitysourcetypes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
  return securitysourcetypes_;
}
inline void SubscribeBySourceTypeDetail::set_allocated_securitysourcetypes(::com::htsc::mdc::insight::model::SecuritySourceType* securitysourcetypes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitysourcetypes_);
  }
  if (securitysourcetypes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      securitysourcetypes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securitysourcetypes, submessage_arena);
    }
    
  } else {
    
  }
  securitysourcetypes_ = securitysourcetypes;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
}

// repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
inline int SubscribeBySourceTypeDetail::marketdatatypes_size() const {
  return marketdatatypes_.size();
}
inline void SubscribeBySourceTypeDetail::clear_marketdatatypes() {
  marketdatatypes_.Clear();
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeBySourceTypeDetail::marketdatatypes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(marketdatatypes_.Get(index));
}
inline void SubscribeBySourceTypeDetail::set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value) {
  marketdatatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
}
inline void SubscribeBySourceTypeDetail::add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  marketdatatypes_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubscribeBySourceTypeDetail::marketdatatypes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
  return marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeBySourceTypeDetail::mutable_marketdatatypes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
  return &marketdatatypes_;
}

// -------------------------------------------------------------------

// MDSubscribeResponse

// bool isSuccess = 1;
inline void MDSubscribeResponse::clear_issuccess() {
  issuccess_ = false;
}
inline bool MDSubscribeResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeResponse.isSuccess)
  return issuccess_;
}
inline void MDSubscribeResponse::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSubscribeResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
inline bool MDSubscribeResponse::has_errorcontext() const {
  return this != internal_default_instance() && errorcontext_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& MDSubscribeResponse::errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = errorcontext_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      &::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDSubscribeResponse::release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = errorcontext_;
  errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDSubscribeResponse::mutable_errorcontext() {
  
  if (errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaNoVirtual());
    errorcontext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
  return errorcontext_;
}
inline void MDSubscribeResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::ESubscribeActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::ESubscribeActionType>() {
  return ::com::htsc::mdc::insight::model::ESubscribeActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDSubscribe_2eproto
