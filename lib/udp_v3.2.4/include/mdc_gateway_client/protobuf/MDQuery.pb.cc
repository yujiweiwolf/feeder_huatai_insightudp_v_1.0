// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQuery.proto

#include "MDQuery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_InsightErrorContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsightErrorContext_InsightErrorContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataStream_MarketData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDQuery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryParam_MDQuery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SecuritySourceType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecuritySourceType_SecuritySourceType_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDQueryRequest> _instance;
} _MDQueryRequest_default_instance_;
class QueryParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryParam> _instance;
} _QueryParam_default_instance_;
class MDQueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDQueryResponse> _instance;
} _MDQueryResponse_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_MDQueryRequest_MDQuery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDQueryRequest_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MDQueryRequest_MDQuery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MDQueryRequest_MDQuery_2eproto}, {
      &scc_info_SecuritySourceType_SecuritySourceType_2eproto.base,
      &scc_info_QueryParam_MDQuery_2eproto.base,}};

static void InitDefaultsscc_info_MDQueryResponse_MDQuery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDQueryResponse_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDQueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDQueryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MDQueryResponse_MDQuery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MDQueryResponse_MDQuery_2eproto}, {
      &scc_info_InsightErrorContext_InsightErrorContext_2eproto.base,
      &scc_info_MarketDataStream_MarketData_2eproto.base,}};

static void InitDefaultsscc_info_QueryParam_MDQuery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_QueryParam_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::QueryParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::QueryParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryParam_MDQuery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryParam_MDQuery_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MDQuery_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MDQuery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MDQuery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MDQuery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, querytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, securitysourcetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, htscsecurityids_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryRequest, queryparams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::QueryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::QueryParam, paramtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::QueryParam, paramvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, querytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, errorcontext_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQueryResponse, marketdatastream_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::MDQueryRequest)},
  { 9, -1, sizeof(::com::htsc::mdc::insight::model::QueryParam)},
  { 16, -1, sizeof(::com::htsc::mdc::insight::model::MDQueryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_QueryParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDQueryResponse_default_instance_),
};

const char descriptor_table_protodef_MDQuery_2eproto[] =
  "\n\rMDQuery.proto\022\032com.htsc.mdc.insight.mo"
  "del\032\030SecuritySourceType.proto\032\031InsightEr"
  "rorContext.proto\032\020MarketData.proto\"\305\001\n\016M"
  "DQueryRequest\022\021\n\tqueryType\030\001 \001(\005\022J\n\022secu"
  "ritySourceType\030\002 \003(\0132..com.htsc.mdc.insi"
  "ght.model.SecuritySourceType\022\027\n\017htscSecu"
  "rityIDs\030\003 \003(\t\022;\n\013queryParams\030\004 \003(\0132&.com"
  ".htsc.mdc.insight.model.QueryParam\"3\n\nQu"
  "eryParam\022\021\n\tparamType\030\001 \001(\t\022\022\n\nparamValu"
  "e\030\002 \001(\t\"\306\001\n\017MDQueryResponse\022\021\n\tqueryType"
  "\030\001 \001(\005\022\021\n\tisSuccess\030\002 \001(\010\022E\n\014errorContex"
  "t\030\003 \001(\0132/.com.htsc.mdc.insight.model.Ins"
  "ightErrorContext\022F\n\020marketDataStream\030\004 \001"
  "(\0132,.com.htsc.mdc.insight.model.MarketDa"
  "taStreamB/\n\032com.htsc.mdc.insight.modelB\014"
  "MDQueryProtoH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MDQuery_2eproto_deps[3] = {
  &::descriptor_table_InsightErrorContext_2eproto,
  &::descriptor_table_MarketData_2eproto,
  &::descriptor_table_SecuritySourceType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MDQuery_2eproto_sccs[3] = {
  &scc_info_MDQueryRequest_MDQuery_2eproto.base,
  &scc_info_MDQueryResponse_MDQuery_2eproto.base,
  &scc_info_QueryParam_MDQuery_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MDQuery_2eproto_once;
static bool descriptor_table_MDQuery_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDQuery_2eproto = {
  &descriptor_table_MDQuery_2eproto_initialized, descriptor_table_protodef_MDQuery_2eproto, "MDQuery.proto", 625,
  &descriptor_table_MDQuery_2eproto_once, descriptor_table_MDQuery_2eproto_sccs, descriptor_table_MDQuery_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_MDQuery_2eproto::offsets,
  file_level_metadata_MDQuery_2eproto, 3, file_level_enum_descriptors_MDQuery_2eproto, file_level_service_descriptors_MDQuery_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MDQuery_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MDQuery_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void MDQueryRequest::InitAsDefaultInstance() {
}
class MDQueryRequest::HasBitSetters {
 public:
};

void MDQueryRequest::clear_securitysourcetype() {
  securitysourcetype_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDQueryRequest::kQueryTypeFieldNumber;
const int MDQueryRequest::kSecuritySourceTypeFieldNumber;
const int MDQueryRequest::kHtscSecurityIDsFieldNumber;
const int MDQueryRequest::kQueryParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDQueryRequest::MDQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDQueryRequest)
}
MDQueryRequest::MDQueryRequest(const MDQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      securitysourcetype_(from.securitysourcetype_),
      htscsecurityids_(from.htscsecurityids_),
      queryparams_(from.queryparams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  querytype_ = from.querytype_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDQueryRequest)
}

void MDQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDQueryRequest_MDQuery_2eproto.base);
  querytype_ = 0;
}

MDQueryRequest::~MDQueryRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDQueryRequest)
  SharedDtor();
}

void MDQueryRequest::SharedDtor() {
}

void MDQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDQueryRequest& MDQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDQueryRequest_MDQuery_2eproto.base);
  return *internal_default_instance();
}


void MDQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  securitysourcetype_.Clear();
  htscsecurityids_.Clear();
  queryparams_.Clear();
  querytype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 queryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          querytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_securitysourcetype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string htscSecurityIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_htscsecurityids(), ptr, ctx, "com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_queryparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDQueryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDQueryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 queryType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &querytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_securitysourcetype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string htscSecurityIDs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_htscsecurityids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityids(this->htscsecurityids_size() - 1).data(),
            static_cast<int>(this->htscsecurityids(this->htscsecurityids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_queryparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDQueryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDQueryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryType = 1;
  if (this->querytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->querytype(), output);
  }

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->securitysourcetype_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->securitysourcetype(static_cast<int>(i)),
      output);
  }

  // repeated string htscSecurityIDs = 3;
  for (int i = 0, n = this->htscsecurityids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityids(i).data(), static_cast<int>(this->htscsecurityids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->htscsecurityids(i), output);
  }

  // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queryparams_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->queryparams(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDQueryRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDQueryRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryType = 1;
  if (this->querytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->querytype(), target);
  }

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->securitysourcetype_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->securitysourcetype(static_cast<int>(i)), target);
  }

  // repeated string htscSecurityIDs = 3;
  for (int i = 0, n = this->htscsecurityids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityids(i).data(), static_cast<int>(this->htscsecurityids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->htscsecurityids(i), target);
  }

  // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queryparams_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->queryparams(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDQueryRequest)
  return target;
}

size_t MDQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDQueryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->securitysourcetype_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->securitysourcetype(static_cast<int>(i)));
    }
  }

  // repeated string htscSecurityIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->htscsecurityids_size());
  for (int i = 0, n = this->htscsecurityids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->htscsecurityids(i));
  }

  // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->queryparams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->queryparams(static_cast<int>(i)));
    }
  }

  // int32 queryType = 1;
  if (this->querytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->querytype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MDQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDQueryRequest)
    MergeFrom(*source);
  }
}

void MDQueryRequest::MergeFrom(const MDQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  securitysourcetype_.MergeFrom(from.securitysourcetype_);
  htscsecurityids_.MergeFrom(from.htscsecurityids_);
  queryparams_.MergeFrom(from.queryparams_);
  if (from.querytype() != 0) {
    set_querytype(from.querytype());
  }
}

void MDQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDQueryRequest::CopyFrom(const MDQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDQueryRequest::IsInitialized() const {
  return true;
}

void MDQueryRequest::Swap(MDQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDQueryRequest::InternalSwap(MDQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&securitysourcetype_)->InternalSwap(CastToBase(&other->securitysourcetype_));
  htscsecurityids_.InternalSwap(CastToBase(&other->htscsecurityids_));
  CastToBase(&queryparams_)->InternalSwap(CastToBase(&other->queryparams_));
  swap(querytype_, other->querytype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryParam::InitAsDefaultInstance() {
}
class QueryParam::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryParam::kParamTypeFieldNumber;
const int QueryParam::kParamValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryParam::QueryParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.QueryParam)
}
QueryParam::QueryParam(const QueryParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paramtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.paramtype().size() > 0) {
    paramtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paramtype_);
  }
  paramvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.paramvalue().size() > 0) {
    paramvalue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paramvalue_);
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.QueryParam)
}

void QueryParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryParam_MDQuery_2eproto.base);
  paramtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryParam::~QueryParam() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.QueryParam)
  SharedDtor();
}

void QueryParam::SharedDtor() {
  paramtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryParam& QueryParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryParam_MDQuery_2eproto.base);
  return *internal_default_instance();
}


void QueryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.QueryParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paramtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string paramType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_paramtype(), ptr, ctx, "com.htsc.mdc.insight.model.QueryParam.paramType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string paramValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_paramvalue(), ptr, ctx, "com.htsc.mdc.insight.model.QueryParam.paramValue");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.QueryParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string paramType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_paramtype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->paramtype().data(), static_cast<int>(this->paramtype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.QueryParam.paramType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string paramValue = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_paramvalue()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->paramvalue().data(), static_cast<int>(this->paramvalue().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.QueryParam.paramValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.QueryParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.QueryParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.QueryParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string paramType = 1;
  if (this->paramtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->paramtype().data(), static_cast<int>(this->paramtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.QueryParam.paramType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->paramtype(), output);
  }

  // string paramValue = 2;
  if (this->paramvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->paramvalue().data(), static_cast<int>(this->paramvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.QueryParam.paramValue");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->paramvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.QueryParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.QueryParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string paramType = 1;
  if (this->paramtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->paramtype().data(), static_cast<int>(this->paramtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.QueryParam.paramType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->paramtype(), target);
  }

  // string paramValue = 2;
  if (this->paramvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->paramvalue().data(), static_cast<int>(this->paramvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.QueryParam.paramValue");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->paramvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.QueryParam)
  return target;
}

size_t QueryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.QueryParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string paramType = 1;
  if (this->paramtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->paramtype());
  }

  // string paramValue = 2;
  if (this->paramvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->paramvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.QueryParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.QueryParam)
    MergeFrom(*source);
  }
}

void QueryParam::MergeFrom(const QueryParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paramtype().size() > 0) {

    paramtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paramtype_);
  }
  if (from.paramvalue().size() > 0) {

    paramvalue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paramvalue_);
  }
}

void QueryParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryParam::CopyFrom(const QueryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParam::IsInitialized() const {
  return true;
}

void QueryParam::Swap(QueryParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryParam::InternalSwap(QueryParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paramtype_.Swap(&other->paramtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paramvalue_.Swap(&other->paramvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MDQueryResponse::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_MDQueryResponse_default_instance_._instance.get_mutable()->errorcontext_ = const_cast< ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      ::com::htsc::mdc::insight::model::InsightErrorContext::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MDQueryResponse_default_instance_._instance.get_mutable()->marketdatastream_ = const_cast< ::com::htsc::mdc::insight::model::MarketDataStream*>(
      ::com::htsc::mdc::insight::model::MarketDataStream::internal_default_instance());
}
class MDQueryResponse::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const MDQueryResponse* msg);
  static const ::com::htsc::mdc::insight::model::MarketDataStream& marketdatastream(const MDQueryResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
MDQueryResponse::HasBitSetters::errorcontext(const MDQueryResponse* msg) {
  return *msg->errorcontext_;
}
const ::com::htsc::mdc::insight::model::MarketDataStream&
MDQueryResponse::HasBitSetters::marketdatastream(const MDQueryResponse* msg) {
  return *msg->marketdatastream_;
}
void MDQueryResponse::clear_errorcontext() {
  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
}
void MDQueryResponse::clear_marketdatastream() {
  if (GetArenaNoVirtual() == nullptr && marketdatastream_ != nullptr) {
    delete marketdatastream_;
  }
  marketdatastream_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDQueryResponse::kQueryTypeFieldNumber;
const int MDQueryResponse::kIsSuccessFieldNumber;
const int MDQueryResponse::kErrorContextFieldNumber;
const int MDQueryResponse::kMarketDataStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDQueryResponse::MDQueryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDQueryResponse)
}
MDQueryResponse::MDQueryResponse(const MDQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errorcontext()) {
    errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from.errorcontext_);
  } else {
    errorcontext_ = nullptr;
  }
  if (from.has_marketdatastream()) {
    marketdatastream_ = new ::com::htsc::mdc::insight::model::MarketDataStream(*from.marketdatastream_);
  } else {
    marketdatastream_ = nullptr;
  }
  ::memcpy(&querytype_, &from.querytype_,
    static_cast<size_t>(reinterpret_cast<char*>(&issuccess_) -
    reinterpret_cast<char*>(&querytype_)) + sizeof(issuccess_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDQueryResponse)
}

void MDQueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDQueryResponse_MDQuery_2eproto.base);
  ::memset(&errorcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&errorcontext_)) + sizeof(issuccess_));
}

MDQueryResponse::~MDQueryResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDQueryResponse)
  SharedDtor();
}

void MDQueryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete errorcontext_;
  if (this != internal_default_instance()) delete marketdatastream_;
}

void MDQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDQueryResponse& MDQueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDQueryResponse_MDQuery_2eproto.base);
  return *internal_default_instance();
}


void MDQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && marketdatastream_ != nullptr) {
    delete marketdatastream_;
  }
  marketdatastream_ = nullptr;
  ::memset(&querytype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&querytype_)) + sizeof(issuccess_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 queryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          querytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_marketdatastream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDQueryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDQueryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 queryType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &querytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSuccess = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_errorcontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_marketdatastream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDQueryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDQueryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryType = 1;
  if (this->querytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->querytype(), output);
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->issuccess(), output);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::errorcontext(this), output);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
  if (this->has_marketdatastream()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::marketdatastream(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDQueryResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDQueryResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryType = 1;
  if (this->querytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->querytype(), target);
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::errorcontext(this), target);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
  if (this->has_marketdatastream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::marketdatastream(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDQueryResponse)
  return target;
}

size_t MDQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDQueryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorcontext_);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
  if (this->has_marketdatastream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marketdatastream_);
  }

  // int32 queryType = 1;
  if (this->querytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->querytype());
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MDQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDQueryResponse)
    MergeFrom(*source);
  }
}

void MDQueryResponse::MergeFrom(const MDQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errorcontext()) {
    mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(from.errorcontext());
  }
  if (from.has_marketdatastream()) {
    mutable_marketdatastream()->::com::htsc::mdc::insight::model::MarketDataStream::MergeFrom(from.marketdatastream());
  }
  if (from.querytype() != 0) {
    set_querytype(from.querytype());
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
}

void MDQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDQueryResponse::CopyFrom(const MDQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDQueryResponse::IsInitialized() const {
  return true;
}

void MDQueryResponse::Swap(MDQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDQueryResponse::InternalSwap(MDQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(errorcontext_, other->errorcontext_);
  swap(marketdatastream_, other->marketdatastream_);
  swap(querytype_, other->querytype_);
  swap(issuccess_, other->issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDQueryRequest* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::QueryParam* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::QueryParam >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::QueryParam >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDQueryResponse* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDQueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDQueryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
