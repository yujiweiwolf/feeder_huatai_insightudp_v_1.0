// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADFundFlowAnalysis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADFundFlowAnalysis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADFundFlowAnalysis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADFundFlowAnalysis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADFundFlowAnalysis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADFundFlowAnalysis_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADFundFlowAnalysis;
class ADFundFlowAnalysisDefaultTypeInternal;
extern ADFundFlowAnalysisDefaultTypeInternal _ADFundFlowAnalysis_default_instance_;
class ADFundFlowDetail;
class ADFundFlowDetailDefaultTypeInternal;
extern ADFundFlowDetailDefaultTypeInternal _ADFundFlowDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowAnalysis>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADFundFlowDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADFundFlowAnalysis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADFundFlowAnalysis) */ {
 public:
  ADFundFlowAnalysis();
  virtual ~ADFundFlowAnalysis();

  ADFundFlowAnalysis(const ADFundFlowAnalysis& from);
  ADFundFlowAnalysis(ADFundFlowAnalysis&& from) noexcept
    : ADFundFlowAnalysis() {
    *this = ::std::move(from);
  }

  inline ADFundFlowAnalysis& operator=(const ADFundFlowAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADFundFlowAnalysis& operator=(ADFundFlowAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ADFundFlowAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADFundFlowAnalysis* internal_default_instance() {
    return reinterpret_cast<const ADFundFlowAnalysis*>(
               &_ADFundFlowAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ADFundFlowAnalysis* other);
  friend void swap(ADFundFlowAnalysis& a, ADFundFlowAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ADFundFlowAnalysis* New() const final {
    return CreateMaybeMessage<ADFundFlowAnalysis>(nullptr);
  }

  ADFundFlowAnalysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADFundFlowAnalysis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADFundFlowAnalysis& from);
  void MergeFrom(const ADFundFlowAnalysis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADFundFlowAnalysis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADFundFlowAnalysis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ADFundFlowAnalysis_2eproto);
    return ::descriptor_table_ADFundFlowAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  int thelast5daysmainlist_size() const;
  void clear_thelast5daysmainlist();
  static const int kTheLast5DaysMainListFieldNumber = 16;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast5daysmainlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >*
      mutable_thelast5daysmainlist();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast5daysmainlist(int index) const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* add_thelast5daysmainlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >&
      thelast5daysmainlist() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  bool has_superlargeorder() const;
  void clear_superlargeorder();
  static const int kSuperLargeOrderFieldNumber = 7;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& superlargeorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_superlargeorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_superlargeorder();
  void set_allocated_superlargeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  bool has_largeorder() const;
  void clear_largeorder();
  static const int kLargeOrderFieldNumber = 8;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& largeorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_largeorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_largeorder();
  void set_allocated_largeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  bool has_mediumorder() const;
  void clear_mediumorder();
  static const int kMediumOrderFieldNumber = 9;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mediumorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_mediumorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_mediumorder();
  void set_allocated_mediumorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  bool has_smallorder() const;
  void clear_smallorder();
  static const int kSmallOrderFieldNumber = 10;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& smallorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_smallorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_smallorder();
  void set_allocated_smallorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  bool has_mainorder() const;
  void clear_mainorder();
  static const int kMainOrderFieldNumber = 11;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mainorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_mainorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_mainorder();
  void set_allocated_mainorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  bool has_thelast5daysmain() const;
  void clear_thelast5daysmain();
  static const int kTheLast5DaysMainFieldNumber = 12;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast5daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast5daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast5daysmain();
  void set_allocated_thelast5daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  bool has_thelast10daysmain() const;
  void clear_thelast10daysmain();
  static const int kTheLast10DaysMainFieldNumber = 13;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast10daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast10daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast10daysmain();
  void set_allocated_thelast10daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  bool has_thelast20daysmain() const;
  void clear_thelast20daysmain();
  static const int kTheLast20DaysMainFieldNumber = 14;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast20daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast20daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast20daysmain();
  void set_allocated_thelast20daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain);

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  bool has_thelast60daysmain() const;
  void clear_thelast60daysmain();
  static const int kTheLast60DaysMainFieldNumber = 15;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast60daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast60daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast60daysmain();
  void set_allocated_thelast60daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 5;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int32 ExchangeDate = 17;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate() const;
  void set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ExchangeTime = 18;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime() const;
  void set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 DataMultiplePowerOf10 = 19;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail > thelast5daysmainlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ADFundFlowAnalysis_2eproto;
};
// -------------------------------------------------------------------

class ADFundFlowDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADFundFlowDetail) */ {
 public:
  ADFundFlowDetail();
  virtual ~ADFundFlowDetail();

  ADFundFlowDetail(const ADFundFlowDetail& from);
  ADFundFlowDetail(ADFundFlowDetail&& from) noexcept
    : ADFundFlowDetail() {
    *this = ::std::move(from);
  }

  inline ADFundFlowDetail& operator=(const ADFundFlowDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADFundFlowDetail& operator=(ADFundFlowDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ADFundFlowDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADFundFlowDetail* internal_default_instance() {
    return reinterpret_cast<const ADFundFlowDetail*>(
               &_ADFundFlowDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ADFundFlowDetail* other);
  friend void swap(ADFundFlowDetail& a, ADFundFlowDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ADFundFlowDetail* New() const final {
    return CreateMaybeMessage<ADFundFlowDetail>(nullptr);
  }

  ADFundFlowDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADFundFlowDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADFundFlowDetail& from);
  void MergeFrom(const ADFundFlowDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADFundFlowDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADFundFlowDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ADFundFlowAnalysis_2eproto);
    return ::descriptor_table_ADFundFlowAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 OutflowValue = 1;
  void clear_outflowvalue();
  static const int kOutflowValueFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 outflowvalue() const;
  void set_outflowvalue(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 InflowValue = 2;
  void clear_inflowvalue();
  static const int kInflowValueFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 inflowvalue() const;
  void set_inflowvalue(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OutflowQty = 3;
  void clear_outflowqty();
  static const int kOutflowQtyFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 outflowqty() const;
  void set_outflowqty(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 InflowQty = 4;
  void clear_inflowqty();
  static const int kInflowQtyFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 inflowqty() const;
  void set_inflowqty(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 MDDate = 5;
  void clear_mddate();
  static const int kMDDateFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADFundFlowDetail)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 outflowvalue_;
  ::PROTOBUF_NAMESPACE_ID::int64 inflowvalue_;
  ::PROTOBUF_NAMESPACE_ID::int64 outflowqty_;
  ::PROTOBUF_NAMESPACE_ID::int64 inflowqty_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ADFundFlowAnalysis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADFundFlowAnalysis

// string HTSCSecurityID = 1;
inline void ADFundFlowAnalysis::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ADFundFlowAnalysis::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void ADFundFlowAnalysis::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
inline void ADFundFlowAnalysis::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
inline void ADFundFlowAnalysis::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
inline void ADFundFlowAnalysis::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
inline std::string* ADFundFlowAnalysis::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ADFundFlowAnalysis::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ADFundFlowAnalysis::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADFundFlowAnalysis::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADFundFlowAnalysis::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDDate)
  return mddate_;
}
inline void ADFundFlowAnalysis::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDDate)
}

// int32 MDTime = 3;
inline void ADFundFlowAnalysis::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADFundFlowAnalysis::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDTime)
  return mdtime_;
}
inline void ADFundFlowAnalysis::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADFundFlowAnalysis::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADFundFlowAnalysis::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataTimestamp)
  return datatimestamp_;
}
inline void ADFundFlowAnalysis::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADFundFlowAnalysis::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADFundFlowAnalysis::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void ADFundFlowAnalysis::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADFundFlowAnalysis::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADFundFlowAnalysis::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void ADFundFlowAnalysis::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityType)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
inline bool ADFundFlowAnalysis::has_superlargeorder() const {
  return this != internal_default_instance() && superlargeorder_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_superlargeorder() {
  if (GetArenaNoVirtual() == nullptr && superlargeorder_ != nullptr) {
    delete superlargeorder_;
  }
  superlargeorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::superlargeorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = superlargeorder_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_superlargeorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = superlargeorder_;
  superlargeorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_superlargeorder() {
  
  if (superlargeorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    superlargeorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  return superlargeorder_;
}
inline void ADFundFlowAnalysis::set_allocated_superlargeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete superlargeorder_;
  }
  if (superlargeorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      superlargeorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, superlargeorder, submessage_arena);
    }
    
  } else {
    
  }
  superlargeorder_ = superlargeorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
inline bool ADFundFlowAnalysis::has_largeorder() const {
  return this != internal_default_instance() && largeorder_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_largeorder() {
  if (GetArenaNoVirtual() == nullptr && largeorder_ != nullptr) {
    delete largeorder_;
  }
  largeorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::largeorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = largeorder_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_largeorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = largeorder_;
  largeorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_largeorder() {
  
  if (largeorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    largeorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  return largeorder_;
}
inline void ADFundFlowAnalysis::set_allocated_largeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete largeorder_;
  }
  if (largeorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      largeorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, largeorder, submessage_arena);
    }
    
  } else {
    
  }
  largeorder_ = largeorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
inline bool ADFundFlowAnalysis::has_mediumorder() const {
  return this != internal_default_instance() && mediumorder_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_mediumorder() {
  if (GetArenaNoVirtual() == nullptr && mediumorder_ != nullptr) {
    delete mediumorder_;
  }
  mediumorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::mediumorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = mediumorder_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_mediumorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = mediumorder_;
  mediumorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_mediumorder() {
  
  if (mediumorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    mediumorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  return mediumorder_;
}
inline void ADFundFlowAnalysis::set_allocated_mediumorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mediumorder_;
  }
  if (mediumorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mediumorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mediumorder, submessage_arena);
    }
    
  } else {
    
  }
  mediumorder_ = mediumorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
inline bool ADFundFlowAnalysis::has_smallorder() const {
  return this != internal_default_instance() && smallorder_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_smallorder() {
  if (GetArenaNoVirtual() == nullptr && smallorder_ != nullptr) {
    delete smallorder_;
  }
  smallorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::smallorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = smallorder_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_smallorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = smallorder_;
  smallorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_smallorder() {
  
  if (smallorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    smallorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  return smallorder_;
}
inline void ADFundFlowAnalysis::set_allocated_smallorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete smallorder_;
  }
  if (smallorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smallorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smallorder, submessage_arena);
    }
    
  } else {
    
  }
  smallorder_ = smallorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
inline bool ADFundFlowAnalysis::has_mainorder() const {
  return this != internal_default_instance() && mainorder_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_mainorder() {
  if (GetArenaNoVirtual() == nullptr && mainorder_ != nullptr) {
    delete mainorder_;
  }
  mainorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::mainorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = mainorder_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_mainorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = mainorder_;
  mainorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_mainorder() {
  
  if (mainorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    mainorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  return mainorder_;
}
inline void ADFundFlowAnalysis::set_allocated_mainorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mainorder_;
  }
  if (mainorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mainorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mainorder, submessage_arena);
    }
    
  } else {
    
  }
  mainorder_ = mainorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
inline bool ADFundFlowAnalysis::has_thelast5daysmain() const {
  return this != internal_default_instance() && thelast5daysmain_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_thelast5daysmain() {
  if (GetArenaNoVirtual() == nullptr && thelast5daysmain_ != nullptr) {
    delete thelast5daysmain_;
  }
  thelast5daysmain_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast5daysmain() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = thelast5daysmain_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast5daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast5daysmain_;
  thelast5daysmain_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast5daysmain() {
  
  if (thelast5daysmain_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    thelast5daysmain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  return thelast5daysmain_;
}
inline void ADFundFlowAnalysis::set_allocated_thelast5daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thelast5daysmain_;
  }
  if (thelast5daysmain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thelast5daysmain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thelast5daysmain, submessage_arena);
    }
    
  } else {
    
  }
  thelast5daysmain_ = thelast5daysmain;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
inline bool ADFundFlowAnalysis::has_thelast10daysmain() const {
  return this != internal_default_instance() && thelast10daysmain_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_thelast10daysmain() {
  if (GetArenaNoVirtual() == nullptr && thelast10daysmain_ != nullptr) {
    delete thelast10daysmain_;
  }
  thelast10daysmain_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast10daysmain() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = thelast10daysmain_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast10daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast10daysmain_;
  thelast10daysmain_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast10daysmain() {
  
  if (thelast10daysmain_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    thelast10daysmain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  return thelast10daysmain_;
}
inline void ADFundFlowAnalysis::set_allocated_thelast10daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thelast10daysmain_;
  }
  if (thelast10daysmain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thelast10daysmain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thelast10daysmain, submessage_arena);
    }
    
  } else {
    
  }
  thelast10daysmain_ = thelast10daysmain;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
inline bool ADFundFlowAnalysis::has_thelast20daysmain() const {
  return this != internal_default_instance() && thelast20daysmain_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_thelast20daysmain() {
  if (GetArenaNoVirtual() == nullptr && thelast20daysmain_ != nullptr) {
    delete thelast20daysmain_;
  }
  thelast20daysmain_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast20daysmain() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = thelast20daysmain_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast20daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast20daysmain_;
  thelast20daysmain_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast20daysmain() {
  
  if (thelast20daysmain_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    thelast20daysmain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  return thelast20daysmain_;
}
inline void ADFundFlowAnalysis::set_allocated_thelast20daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thelast20daysmain_;
  }
  if (thelast20daysmain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thelast20daysmain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thelast20daysmain, submessage_arena);
    }
    
  } else {
    
  }
  thelast20daysmain_ = thelast20daysmain;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
inline bool ADFundFlowAnalysis::has_thelast60daysmain() const {
  return this != internal_default_instance() && thelast60daysmain_ != nullptr;
}
inline void ADFundFlowAnalysis::clear_thelast60daysmain() {
  if (GetArenaNoVirtual() == nullptr && thelast60daysmain_ != nullptr) {
    delete thelast60daysmain_;
  }
  thelast60daysmain_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast60daysmain() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = thelast60daysmain_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast60daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast60daysmain_;
  thelast60daysmain_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast60daysmain() {
  
  if (thelast60daysmain_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaNoVirtual());
    thelast60daysmain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  return thelast60daysmain_;
}
inline void ADFundFlowAnalysis::set_allocated_thelast60daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thelast60daysmain_;
  }
  if (thelast60daysmain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thelast60daysmain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thelast60daysmain, submessage_arena);
    }
    
  } else {
    
  }
  thelast60daysmain_ = thelast60daysmain;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
}

// repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
inline int ADFundFlowAnalysis::thelast5daysmainlist_size() const {
  return thelast5daysmainlist_.size();
}
inline void ADFundFlowAnalysis::clear_thelast5daysmainlist() {
  thelast5daysmainlist_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast5daysmainlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >*
ADFundFlowAnalysis::mutable_thelast5daysmainlist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return &thelast5daysmainlist_;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast5daysmainlist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::add_thelast5daysmainlist() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >&
ADFundFlowAnalysis::thelast5daysmainlist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_;
}

// int32 ExchangeDate = 17;
inline void ADFundFlowAnalysis::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADFundFlowAnalysis::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeDate)
  return exchangedate_;
}
inline void ADFundFlowAnalysis::set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeDate)
}

// int32 ExchangeTime = 18;
inline void ADFundFlowAnalysis::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADFundFlowAnalysis::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeTime)
  return exchangetime_;
}
inline void ADFundFlowAnalysis::set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeTime)
}

// int32 DataMultiplePowerOf10 = 19;
inline void ADFundFlowAnalysis::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADFundFlowAnalysis::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void ADFundFlowAnalysis::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// ADFundFlowDetail

// int64 OutflowValue = 1;
inline void ADFundFlowDetail::clear_outflowvalue() {
  outflowvalue_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADFundFlowDetail::outflowvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowValue)
  return outflowvalue_;
}
inline void ADFundFlowDetail::set_outflowvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  outflowvalue_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowValue)
}

// int64 InflowValue = 2;
inline void ADFundFlowDetail::clear_inflowvalue() {
  inflowvalue_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADFundFlowDetail::inflowvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowValue)
  return inflowvalue_;
}
inline void ADFundFlowDetail::set_inflowvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inflowvalue_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowValue)
}

// int64 OutflowQty = 3;
inline void ADFundFlowDetail::clear_outflowqty() {
  outflowqty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADFundFlowDetail::outflowqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowQty)
  return outflowqty_;
}
inline void ADFundFlowDetail::set_outflowqty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  outflowqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowQty)
}

// int64 InflowQty = 4;
inline void ADFundFlowDetail::clear_inflowqty() {
  inflowqty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADFundFlowDetail::inflowqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowQty)
  return inflowqty_;
}
inline void ADFundFlowDetail::set_inflowqty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inflowqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowQty)
}

// int32 MDDate = 5;
inline void ADFundFlowDetail::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADFundFlowDetail::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.MDDate)
  return mddate_;
}
inline void ADFundFlowDetail::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.MDDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADFundFlowAnalysis_2eproto
