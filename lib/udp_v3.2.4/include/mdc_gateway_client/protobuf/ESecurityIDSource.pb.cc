// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ESecurityIDSource.proto

#include "ESecurityIDSource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace htsc {
namespace mdc {
namespace model {
}  // namespace model
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_ESecurityIDSource_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ESecurityIDSource_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ESecurityIDSource_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ESecurityIDSource_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_ESecurityIDSource_2eproto[] =
  "\n\027ESecurityIDSource.proto\022\022com.htsc.mdc."
  "model*\256\006\n\021ESecurityIDSource\022\033\n\027DefaultSe"
  "curityIDSource\020\000\022\010\n\004XSHG\020e\022\010\n\004XSHE\020f\022\010\n\004"
  "NEEQ\020g\022\n\n\006XSHGFI\020h\022\n\n\006XSHECA\020i\022\010\n\004XBSE\020j"
  "\022\n\n\006XSHGFC\020k\022\n\n\006XSHEFC\020l\022\t\n\004XHKG\020\313\001\022\t\n\004H"
  "KSC\020\314\001\022\t\n\004HGHQ\020\315\001\022\t\n\004CCFX\020\255\002\022\t\n\004XSGE\020\256\002\022"
  "\010\n\003INE\020\257\002\022\t\n\004SGEX\020\221\003\022\t\n\004XCFE\020\365\003\022\t\n\004CCDC\020"
  "\366\003\022\t\n\004CNEX\020\367\003\022\t\n\004XDCE\020\331\004\022\t\n\004XZCE\020\332\004\022\010\n\003S"
  "WS\020\275\005\022\010\n\003CNI\020\276\005\022\010\n\003CSI\020\277\005\022\t\n\004HTIS\020\241\006\022\t\n\004"
  "MORN\020\242\006\022\007\n\002QB\020\243\006\022\t\n\004SPDB\020\244\006\022\t\n\004HTSM\020\245\006\022\010"
  "\n\003SCB\020\246\006\022\t\n\004CUBE\020\247\006\022\010\n\003LSE\020\205\007\022\010\n\003LME\020\206\007\022"
  "\n\n\005LIFFE\020\207\007\022\t\n\004ICEU\020\210\007\022\010\n\003BSE\020\211\007\022\010\n\003NSE\020"
  "\212\007\022\010\n\003NEX\020\213\007\022\t\n\004APEX\020\214\007\022\013\n\006ICE_SG\020\215\007\022\010\n\003"
  "SGX\020\216\007\022\010\n\003TSE\020\217\007\022\n\n\005TOCOM\020\220\007\022\010\n\003OSE\020\221\007\022\n"
  "\n\005EUREX\020\222\007\022\010\n\003ICE\020\223\007\022\010\n\003CME\020\224\007\022\t\n\004CBOT\020\225"
  "\007\022\t\n\004CBOE\020\226\007\022\t\n\004AMEX\020\227\007\022\007\n\002US\020\230\007\022\t\n\004NYSE"
  "\020\231\007\022\n\n\005NYMEX\020\232\007\022\n\n\005COMEX\020\233\007\022\t\n\004ICUS\020\234\007\022\013"
  "\n\006NASDAQ\020\235\007\022\010\n\003BBG\020\236\007\022\010\n\003BMD\020\237\007\022\n\n\005LUXSE"
  "\020\240\007\022\010\n\003KRX\020\241\007\022\n\n\005MICEX\020\242\007\022\010\n\003ASE\020\243\007\022\010\n\003I"
  "SE\020\244\007\022\010\n\003DME\020\245\007\022\010\n\003IHK\020\246\007\022\n\n\005STOXX\020\247\007\022\010\n"
  "\003SPI\020\250\007\022\013\n\006NIKKEI\020\251\007\022\010\n\003DJI\020\252\007\022\t\n\004BATS\020\253"
  "\007\022\010\n\003IEX\020\254\007\022\t\n\004OPRA\020\255\007B2\n\022com.htsc.mdc.m"
  "odelB\027ESecurityIDSourceProtosH\001\240\001\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ESecurityIDSource_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ESecurityIDSource_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ESecurityIDSource_2eproto_once;
static bool descriptor_table_ESecurityIDSource_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ESecurityIDSource_2eproto = {
  &descriptor_table_ESecurityIDSource_2eproto_initialized, descriptor_table_protodef_ESecurityIDSource_2eproto, "ESecurityIDSource.proto", 922,
  &descriptor_table_ESecurityIDSource_2eproto_once, descriptor_table_ESecurityIDSource_2eproto_sccs, descriptor_table_ESecurityIDSource_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_ESecurityIDSource_2eproto::offsets,
  file_level_metadata_ESecurityIDSource_2eproto, 0, file_level_enum_descriptors_ESecurityIDSource_2eproto, file_level_service_descriptors_ESecurityIDSource_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ESecurityIDSource_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ESecurityIDSource_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESecurityIDSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ESecurityIDSource_2eproto);
  return file_level_enum_descriptors_ESecurityIDSource_2eproto[0];
}
bool ESecurityIDSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 203:
    case 204:
    case 205:
    case 301:
    case 302:
    case 303:
    case 401:
    case 501:
    case 502:
    case 503:
    case 601:
    case 602:
    case 701:
    case 702:
    case 703:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 911:
    case 912:
    case 913:
    case 914:
    case 915:
    case 916:
    case 917:
    case 918:
    case 919:
    case 920:
    case 921:
    case 922:
    case 923:
    case 924:
    case 925:
    case 926:
    case 927:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 933:
    case 934:
    case 935:
    case 936:
    case 937:
    case 938:
    case 939:
    case 940:
    case 941:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
