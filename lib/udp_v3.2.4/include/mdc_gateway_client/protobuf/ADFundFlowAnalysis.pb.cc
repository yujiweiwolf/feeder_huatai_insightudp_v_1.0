// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADFundFlowAnalysis.proto

#include "ADFundFlowAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ADFundFlowAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADFundFlowDetail_ADFundFlowAnalysis_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADFundFlowAnalysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADFundFlowAnalysis> _instance;
} _ADFundFlowAnalysis_default_instance_;
class ADFundFlowDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADFundFlowDetail> _instance;
} _ADFundFlowDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_ADFundFlowAnalysis_ADFundFlowAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADFundFlowAnalysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADFundFlowAnalysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADFundFlowAnalysis_ADFundFlowAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ADFundFlowAnalysis_ADFundFlowAnalysis_2eproto}, {
      &scc_info_ADFundFlowDetail_ADFundFlowAnalysis_2eproto.base,}};

static void InitDefaultsscc_info_ADFundFlowDetail_ADFundFlowAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADFundFlowDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADFundFlowDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADFundFlowDetail_ADFundFlowAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADFundFlowDetail_ADFundFlowAnalysis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ADFundFlowAnalysis_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ADFundFlowAnalysis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ADFundFlowAnalysis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ADFundFlowAnalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, superlargeorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, largeorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, mediumorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, smallorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, mainorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, thelast5daysmain_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, thelast10daysmain_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, thelast20daysmain_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, thelast60daysmain_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, thelast5daysmainlist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, outflowvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, inflowvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, outflowqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, inflowqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, mddate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::ADFundFlowAnalysis)},
  { 24, -1, sizeof(::com::htsc::mdc::insight::model::ADFundFlowDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_),
};

const char descriptor_table_protodef_ADFundFlowAnalysis_2eproto[] =
  "\n\030ADFundFlowAnalysis.proto\022\032com.htsc.mdc"
  ".insight.model\032\023ESecurityType.proto\032\027ESe"
  "curityIDSource.proto\"\346\007\n\022ADFundFlowAnaly"
  "sis\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 "
  "\001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001"
  "(\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc."
  "mdc.model.ESecurityIDSource\0227\n\014securityT"
  "ype\030\006 \001(\0162!.com.htsc.mdc.model.ESecurity"
  "Type\022E\n\017SuperLargeOrder\030\007 \001(\0132,.com.htsc"
  ".mdc.insight.model.ADFundFlowDetail\022@\n\nL"
  "argeOrder\030\010 \001(\0132,.com.htsc.mdc.insight.m"
  "odel.ADFundFlowDetail\022A\n\013MediumOrder\030\t \001"
  "(\0132,.com.htsc.mdc.insight.model.ADFundFl"
  "owDetail\022@\n\nSmallOrder\030\n \001(\0132,.com.htsc."
  "mdc.insight.model.ADFundFlowDetail\022\?\n\tMa"
  "inOrder\030\013 \001(\0132,.com.htsc.mdc.insight.mod"
  "el.ADFundFlowDetail\022F\n\020TheLast5DaysMain\030"
  "\014 \001(\0132,.com.htsc.mdc.insight.model.ADFun"
  "dFlowDetail\022G\n\021TheLast10DaysMain\030\r \001(\0132,"
  ".com.htsc.mdc.insight.model.ADFundFlowDe"
  "tail\022G\n\021TheLast20DaysMain\030\016 \001(\0132,.com.ht"
  "sc.mdc.insight.model.ADFundFlowDetail\022G\n"
  "\021TheLast60DaysMain\030\017 \001(\0132,.com.htsc.mdc."
  "insight.model.ADFundFlowDetail\022J\n\024TheLas"
  "t5DaysMainList\030\020 \003(\0132,.com.htsc.mdc.insi"
  "ght.model.ADFundFlowDetail\022\024\n\014ExchangeDa"
  "te\030\021 \001(\005\022\024\n\014ExchangeTime\030\022 \001(\005\022\035\n\025DataMu"
  "ltiplePowerOf10\030\023 \001(\005\"t\n\020ADFundFlowDetai"
  "l\022\024\n\014OutflowValue\030\001 \001(\003\022\023\n\013InflowValue\030\002"
  " \001(\003\022\022\n\nOutflowQty\030\003 \001(\003\022\021\n\tInflowQty\030\004 "
  "\001(\003\022\016\n\006MDDate\030\005 \001(\005B;\n\032com.htsc.mdc.insi"
  "ght.modelB\030ADFundFlowAnalysisProtosH\001\240\001\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ADFundFlowAnalysis_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ADFundFlowAnalysis_2eproto_sccs[2] = {
  &scc_info_ADFundFlowAnalysis_ADFundFlowAnalysis_2eproto.base,
  &scc_info_ADFundFlowDetail_ADFundFlowAnalysis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ADFundFlowAnalysis_2eproto_once;
static bool descriptor_table_ADFundFlowAnalysis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADFundFlowAnalysis_2eproto = {
  &descriptor_table_ADFundFlowAnalysis_2eproto_initialized, descriptor_table_protodef_ADFundFlowAnalysis_2eproto, "ADFundFlowAnalysis.proto", 1288,
  &descriptor_table_ADFundFlowAnalysis_2eproto_once, descriptor_table_ADFundFlowAnalysis_2eproto_sccs, descriptor_table_ADFundFlowAnalysis_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ADFundFlowAnalysis_2eproto::offsets,
  file_level_metadata_ADFundFlowAnalysis_2eproto, 2, file_level_enum_descriptors_ADFundFlowAnalysis_2eproto, file_level_service_descriptors_ADFundFlowAnalysis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ADFundFlowAnalysis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ADFundFlowAnalysis_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void ADFundFlowAnalysis::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->superlargeorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->largeorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->mediumorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->smallorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->mainorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->thelast5daysmain_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->thelast10daysmain_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->thelast20daysmain_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance.get_mutable()->thelast60daysmain_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
}
class ADFundFlowAnalysis::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& superlargeorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& largeorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mediumorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& smallorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mainorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast5daysmain(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast10daysmain(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast20daysmain(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast60daysmain(const ADFundFlowAnalysis* msg);
};

const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::superlargeorder(const ADFundFlowAnalysis* msg) {
  return *msg->superlargeorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::largeorder(const ADFundFlowAnalysis* msg) {
  return *msg->largeorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::mediumorder(const ADFundFlowAnalysis* msg) {
  return *msg->mediumorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::smallorder(const ADFundFlowAnalysis* msg) {
  return *msg->smallorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::mainorder(const ADFundFlowAnalysis* msg) {
  return *msg->mainorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::thelast5daysmain(const ADFundFlowAnalysis* msg) {
  return *msg->thelast5daysmain_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::thelast10daysmain(const ADFundFlowAnalysis* msg) {
  return *msg->thelast10daysmain_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::thelast20daysmain(const ADFundFlowAnalysis* msg) {
  return *msg->thelast20daysmain_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::HasBitSetters::thelast60daysmain(const ADFundFlowAnalysis* msg) {
  return *msg->thelast60daysmain_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADFundFlowAnalysis::kHTSCSecurityIDFieldNumber;
const int ADFundFlowAnalysis::kMDDateFieldNumber;
const int ADFundFlowAnalysis::kMDTimeFieldNumber;
const int ADFundFlowAnalysis::kDataTimestampFieldNumber;
const int ADFundFlowAnalysis::kSecurityIDSourceFieldNumber;
const int ADFundFlowAnalysis::kSecurityTypeFieldNumber;
const int ADFundFlowAnalysis::kSuperLargeOrderFieldNumber;
const int ADFundFlowAnalysis::kLargeOrderFieldNumber;
const int ADFundFlowAnalysis::kMediumOrderFieldNumber;
const int ADFundFlowAnalysis::kSmallOrderFieldNumber;
const int ADFundFlowAnalysis::kMainOrderFieldNumber;
const int ADFundFlowAnalysis::kTheLast5DaysMainFieldNumber;
const int ADFundFlowAnalysis::kTheLast10DaysMainFieldNumber;
const int ADFundFlowAnalysis::kTheLast20DaysMainFieldNumber;
const int ADFundFlowAnalysis::kTheLast60DaysMainFieldNumber;
const int ADFundFlowAnalysis::kTheLast5DaysMainListFieldNumber;
const int ADFundFlowAnalysis::kExchangeDateFieldNumber;
const int ADFundFlowAnalysis::kExchangeTimeFieldNumber;
const int ADFundFlowAnalysis::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADFundFlowAnalysis::ADFundFlowAnalysis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
}
ADFundFlowAnalysis::ADFundFlowAnalysis(const ADFundFlowAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      thelast5daysmainlist_(from.thelast5daysmainlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.has_superlargeorder()) {
    superlargeorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.superlargeorder_);
  } else {
    superlargeorder_ = nullptr;
  }
  if (from.has_largeorder()) {
    largeorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.largeorder_);
  } else {
    largeorder_ = nullptr;
  }
  if (from.has_mediumorder()) {
    mediumorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.mediumorder_);
  } else {
    mediumorder_ = nullptr;
  }
  if (from.has_smallorder()) {
    smallorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.smallorder_);
  } else {
    smallorder_ = nullptr;
  }
  if (from.has_mainorder()) {
    mainorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.mainorder_);
  } else {
    mainorder_ = nullptr;
  }
  if (from.has_thelast5daysmain()) {
    thelast5daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.thelast5daysmain_);
  } else {
    thelast5daysmain_ = nullptr;
  }
  if (from.has_thelast10daysmain()) {
    thelast10daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.thelast10daysmain_);
  } else {
    thelast10daysmain_ = nullptr;
  }
  if (from.has_thelast20daysmain()) {
    thelast20daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.thelast20daysmain_);
  } else {
    thelast20daysmain_ = nullptr;
  }
  if (from.has_thelast60daysmain()) {
    thelast60daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from.thelast60daysmain_);
  } else {
    thelast60daysmain_ = nullptr;
  }
  ::memcpy(&mddate_, &from.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
}

void ADFundFlowAnalysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADFundFlowAnalysis_ADFundFlowAnalysis_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&superlargeorder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&superlargeorder_)) + sizeof(datamultiplepowerof10_));
}

ADFundFlowAnalysis::~ADFundFlowAnalysis() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  SharedDtor();
}

void ADFundFlowAnalysis::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete superlargeorder_;
  if (this != internal_default_instance()) delete largeorder_;
  if (this != internal_default_instance()) delete mediumorder_;
  if (this != internal_default_instance()) delete smallorder_;
  if (this != internal_default_instance()) delete mainorder_;
  if (this != internal_default_instance()) delete thelast5daysmain_;
  if (this != internal_default_instance()) delete thelast10daysmain_;
  if (this != internal_default_instance()) delete thelast20daysmain_;
  if (this != internal_default_instance()) delete thelast60daysmain_;
}

void ADFundFlowAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADFundFlowAnalysis& ADFundFlowAnalysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADFundFlowAnalysis_ADFundFlowAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADFundFlowAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thelast5daysmainlist_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && superlargeorder_ != nullptr) {
    delete superlargeorder_;
  }
  superlargeorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && largeorder_ != nullptr) {
    delete largeorder_;
  }
  largeorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mediumorder_ != nullptr) {
    delete mediumorder_;
  }
  mediumorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && smallorder_ != nullptr) {
    delete smallorder_;
  }
  smallorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mainorder_ != nullptr) {
    delete mainorder_;
  }
  mainorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && thelast5daysmain_ != nullptr) {
    delete thelast5daysmain_;
  }
  thelast5daysmain_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && thelast10daysmain_ != nullptr) {
    delete thelast10daysmain_;
  }
  thelast10daysmain_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && thelast20daysmain_ != nullptr) {
    delete thelast20daysmain_;
  }
  thelast20daysmain_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && thelast60daysmain_ != nullptr) {
    delete thelast60daysmain_;
  }
  thelast60daysmain_ = nullptr;
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADFundFlowAnalysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_superlargeorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_largeorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_mediumorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_smallorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_mainorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_thelast5daysmain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_thelast10daysmain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_thelast20daysmain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_thelast60daysmain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_thelast5daysmainlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // int32 ExchangeDate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExchangeTime = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADFundFlowAnalysis::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 DataTimestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_superlargeorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_largeorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mediumorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smallorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mainorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thelast5daysmain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thelast10daysmain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thelast20daysmain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thelast60daysmain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_thelast5daysmainlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ExchangeDate = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ExchangeTime = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataMultiplePowerOf10 = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADFundFlowAnalysis::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->securityidsource(), output);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->securitytype(), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  if (this->has_superlargeorder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::superlargeorder(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  if (this->has_largeorder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::largeorder(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  if (this->has_mediumorder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::mediumorder(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  if (this->has_smallorder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::smallorder(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  if (this->has_mainorder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::mainorder(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  if (this->has_thelast5daysmain()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::thelast5daysmain(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  if (this->has_thelast10daysmain()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::thelast10daysmain(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  if (this->has_thelast20daysmain()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::thelast20daysmain(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  if (this->has_thelast60daysmain()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::thelast60daysmain(this), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thelast5daysmainlist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->thelast5daysmainlist(static_cast<int>(i)),
      output);
  }

  // int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->exchangedate(), output);
  }

  // int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->exchangetime(), output);
  }

  // int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->datamultiplepowerof10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADFundFlowAnalysis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->securitytype(), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  if (this->has_superlargeorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::superlargeorder(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  if (this->has_largeorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::largeorder(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  if (this->has_mediumorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::mediumorder(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  if (this->has_smallorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::smallorder(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  if (this->has_mainorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::mainorder(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  if (this->has_thelast5daysmain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::thelast5daysmain(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  if (this->has_thelast10daysmain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::thelast10daysmain(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  if (this->has_thelast20daysmain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::thelast20daysmain(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  if (this->has_thelast60daysmain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::thelast60daysmain(this), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thelast5daysmainlist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->thelast5daysmainlist(static_cast<int>(i)), target);
  }

  // int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->exchangedate(), target);
  }

  // int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->exchangetime(), target);
  }

  // int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->datamultiplepowerof10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  return target;
}

size_t ADFundFlowAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->thelast5daysmainlist_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->thelast5daysmainlist(static_cast<int>(i)));
    }
  }

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  if (this->has_superlargeorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *superlargeorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  if (this->has_largeorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *largeorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  if (this->has_mediumorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mediumorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  if (this->has_smallorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *smallorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  if (this->has_mainorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mainorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  if (this->has_thelast5daysmain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thelast5daysmain_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  if (this->has_thelast10daysmain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thelast10daysmain_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  if (this->has_thelast20daysmain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thelast20daysmain_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  if (this->has_thelast60daysmain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thelast60daysmain_);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADFundFlowAnalysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const ADFundFlowAnalysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADFundFlowAnalysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
    MergeFrom(*source);
  }
}

void ADFundFlowAnalysis::MergeFrom(const ADFundFlowAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thelast5daysmainlist_.MergeFrom(from.thelast5daysmainlist_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.has_superlargeorder()) {
    mutable_superlargeorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.superlargeorder());
  }
  if (from.has_largeorder()) {
    mutable_largeorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.largeorder());
  }
  if (from.has_mediumorder()) {
    mutable_mediumorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.mediumorder());
  }
  if (from.has_smallorder()) {
    mutable_smallorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.smallorder());
  }
  if (from.has_mainorder()) {
    mutable_mainorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.mainorder());
  }
  if (from.has_thelast5daysmain()) {
    mutable_thelast5daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.thelast5daysmain());
  }
  if (from.has_thelast10daysmain()) {
    mutable_thelast10daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.thelast10daysmain());
  }
  if (from.has_thelast20daysmain()) {
    mutable_thelast20daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.thelast20daysmain());
  }
  if (from.has_thelast60daysmain()) {
    mutable_thelast60daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.thelast60daysmain());
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void ADFundFlowAnalysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADFundFlowAnalysis::CopyFrom(const ADFundFlowAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADFundFlowAnalysis::IsInitialized() const {
  return true;
}

void ADFundFlowAnalysis::Swap(ADFundFlowAnalysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADFundFlowAnalysis::InternalSwap(ADFundFlowAnalysis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&thelast5daysmainlist_)->InternalSwap(CastToBase(&other->thelast5daysmainlist_));
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(superlargeorder_, other->superlargeorder_);
  swap(largeorder_, other->largeorder_);
  swap(mediumorder_, other->mediumorder_);
  swap(smallorder_, other->smallorder_);
  swap(mainorder_, other->mainorder_);
  swap(thelast5daysmain_, other->thelast5daysmain_);
  swap(thelast10daysmain_, other->thelast10daysmain_);
  swap(thelast20daysmain_, other->thelast20daysmain_);
  swap(thelast60daysmain_, other->thelast60daysmain_);
  swap(mddate_, other->mddate_);
  swap(mdtime_, other->mdtime_);
  swap(datatimestamp_, other->datatimestamp_);
  swap(securityidsource_, other->securityidsource_);
  swap(securitytype_, other->securitytype_);
  swap(exchangedate_, other->exchangedate_);
  swap(exchangetime_, other->exchangetime_);
  swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADFundFlowAnalysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADFundFlowDetail::InitAsDefaultInstance() {
}
class ADFundFlowDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADFundFlowDetail::kOutflowValueFieldNumber;
const int ADFundFlowDetail::kInflowValueFieldNumber;
const int ADFundFlowDetail::kOutflowQtyFieldNumber;
const int ADFundFlowDetail::kInflowQtyFieldNumber;
const int ADFundFlowDetail::kMDDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADFundFlowDetail::ADFundFlowDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
}
ADFundFlowDetail::ADFundFlowDetail(const ADFundFlowDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&outflowvalue_, &from.outflowvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&mddate_) -
    reinterpret_cast<char*>(&outflowvalue_)) + sizeof(mddate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
}

void ADFundFlowDetail::SharedCtor() {
  ::memset(&outflowvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mddate_) -
      reinterpret_cast<char*>(&outflowvalue_)) + sizeof(mddate_));
}

ADFundFlowDetail::~ADFundFlowDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
  SharedDtor();
}

void ADFundFlowDetail::SharedDtor() {
}

void ADFundFlowDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADFundFlowDetail& ADFundFlowDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADFundFlowDetail_ADFundFlowAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADFundFlowDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&outflowvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mddate_) -
      reinterpret_cast<char*>(&outflowvalue_)) + sizeof(mddate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADFundFlowDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 OutflowValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          outflowvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 InflowValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inflowvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OutflowQty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          outflowqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 InflowQty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          inflowqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADFundFlowDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 OutflowValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &outflowvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 InflowValue = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &inflowvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OutflowQty = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &outflowqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 InflowQty = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &inflowqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADFundFlowDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADFundFlowDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADFundFlowDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 OutflowValue = 1;
  if (this->outflowvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->outflowvalue(), output);
  }

  // int64 InflowValue = 2;
  if (this->inflowvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->inflowvalue(), output);
  }

  // int64 OutflowQty = 3;
  if (this->outflowqty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->outflowqty(), output);
  }

  // int64 InflowQty = 4;
  if (this->inflowqty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->inflowqty(), output);
  }

  // int32 MDDate = 5;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->mddate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADFundFlowDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADFundFlowDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 OutflowValue = 1;
  if (this->outflowvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->outflowvalue(), target);
  }

  // int64 InflowValue = 2;
  if (this->inflowvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->inflowvalue(), target);
  }

  // int64 OutflowQty = 3;
  if (this->outflowqty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->outflowqty(), target);
  }

  // int64 InflowQty = 4;
  if (this->inflowqty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->inflowqty(), target);
  }

  // int32 MDDate = 5;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->mddate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADFundFlowDetail)
  return target;
}

size_t ADFundFlowDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 OutflowValue = 1;
  if (this->outflowvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->outflowvalue());
  }

  // int64 InflowValue = 2;
  if (this->inflowvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->inflowvalue());
  }

  // int64 OutflowQty = 3;
  if (this->outflowqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->outflowqty());
  }

  // int64 InflowQty = 4;
  if (this->inflowqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->inflowqty());
  }

  // int32 MDDate = 5;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADFundFlowDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ADFundFlowDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADFundFlowDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADFundFlowDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADFundFlowDetail)
    MergeFrom(*source);
  }
}

void ADFundFlowDetail::MergeFrom(const ADFundFlowDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.outflowvalue() != 0) {
    set_outflowvalue(from.outflowvalue());
  }
  if (from.inflowvalue() != 0) {
    set_inflowvalue(from.inflowvalue());
  }
  if (from.outflowqty() != 0) {
    set_outflowqty(from.outflowqty());
  }
  if (from.inflowqty() != 0) {
    set_inflowqty(from.inflowqty());
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
}

void ADFundFlowDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADFundFlowDetail::CopyFrom(const ADFundFlowDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADFundFlowDetail::IsInitialized() const {
  return true;
}

void ADFundFlowDetail::Swap(ADFundFlowDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADFundFlowDetail::InternalSwap(ADFundFlowDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(outflowvalue_, other->outflowvalue_);
  swap(inflowvalue_, other->inflowvalue_);
  swap(outflowqty_, other->outflowqty_);
  swap(inflowqty_, other->inflowqty_);
  swap(mddate_, other->mddate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADFundFlowDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADFundFlowAnalysis >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADFundFlowAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADFundFlowDetail* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADFundFlowDetail >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADFundFlowDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
