// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADNews.proto

#include "ADNews.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ADNews_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADInvolvedSecurity_ADNews_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADNews_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADNewsEmotion_ADNews_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADNews_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADRelatedCompany_ADNews_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADNews_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADRelatedPerson_ADNews_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADNewsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADNews> _instance;
} _ADNews_default_instance_;
class ADNewsEmotionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADNewsEmotion> _instance;
} _ADNewsEmotion_default_instance_;
class ADInvolvedSecurityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADInvolvedSecurity> _instance;
} _ADInvolvedSecurity_default_instance_;
class ADRelatedCompanyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADRelatedCompany> _instance;
} _ADRelatedCompany_default_instance_;
class ADRelatedPersonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADRelatedPerson> _instance;
} _ADRelatedPerson_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_ADInvolvedSecurity_ADNews_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADInvolvedSecurity_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADInvolvedSecurity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADInvolvedSecurity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADInvolvedSecurity_ADNews_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADInvolvedSecurity_ADNews_2eproto}, {}};

static void InitDefaultsscc_info_ADNews_ADNews_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADNews_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADNews();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADNews::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ADNews_ADNews_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ADNews_ADNews_2eproto}, {
      &scc_info_ADNewsEmotion_ADNews_2eproto.base,
      &scc_info_ADInvolvedSecurity_ADNews_2eproto.base,
      &scc_info_ADRelatedPerson_ADNews_2eproto.base,
      &scc_info_ADRelatedCompany_ADNews_2eproto.base,}};

static void InitDefaultsscc_info_ADNewsEmotion_ADNews_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADNewsEmotion_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADNewsEmotion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADNewsEmotion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADNewsEmotion_ADNews_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADNewsEmotion_ADNews_2eproto}, {}};

static void InitDefaultsscc_info_ADRelatedCompany_ADNews_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADRelatedCompany_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADRelatedCompany();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADRelatedCompany::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADRelatedCompany_ADNews_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADRelatedCompany_ADNews_2eproto}, {}};

static void InitDefaultsscc_info_ADRelatedPerson_ADNews_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADRelatedPerson_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADRelatedPerson();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADRelatedPerson::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADRelatedPerson_ADNews_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADRelatedPerson_ADNews_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ADNews_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ADNews_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ADNews_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ADNews_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, author_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, content_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, eventcat_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, eventname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, eventpos_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, id_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, industry_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, newshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, newstime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, summ_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, title_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, url_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, newsemotion_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, seculist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, peremlist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, comemlist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNews, datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, negative_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, neutral_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, pos_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADNewsEmotion, positive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, comcode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, secucode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, secuname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADInvolvedSecurity, htscsecurityid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, chiname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, comcode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, com_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, generalpos_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, secucode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedCompany, htscsecurityid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, per_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, comcode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, com_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADRelatedPerson, generalpos_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::ADNews)},
  { 29, -1, sizeof(::com::htsc::mdc::insight::model::ADNewsEmotion)},
  { 38, -1, sizeof(::com::htsc::mdc::insight::model::ADInvolvedSecurity)},
  { 47, -1, sizeof(::com::htsc::mdc::insight::model::ADRelatedCompany)},
  { 58, -1, sizeof(::com::htsc::mdc::insight::model::ADRelatedPerson)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADNews_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADNewsEmotion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADInvolvedSecurity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADRelatedCompany_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADRelatedPerson_default_instance_),
};

const char descriptor_table_protodef_ADNews_2eproto[] =
  "\n\014ADNews.proto\022\032com.htsc.mdc.insight.mod"
  "el\032\023ESecurityType.proto\032\027ESecurityIDSour"
  "ce.proto\"\320\005\n\006ADNews\022\026\n\016HTSCSecurityID\030\001 "
  "\001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rD"
  "ataTimestamp\030\004 \001(\003\022\030\n\020TradingPhaseCode\030\005"
  " \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%.com.hts"
  "c.mdc.model.ESecurityIDSource\0227\n\014securit"
  "yType\030\007 \001(\0162!.com.htsc.mdc.model.ESecuri"
  "tyType\022\016\n\006author\030\010 \001(\t\022\017\n\007content\030\t \001(\t\022"
  "\020\n\010eventCat\030\n \001(\t\022\021\n\teventName\030\013 \001(\t\022\020\n\010"
  "eventPos\030\014 \001(\005\022\n\n\002id\030\r \001(\t\022\020\n\010industry\030\016"
  " \001(\t\022\017\n\007newsHot\030\017 \001(\001\022\020\n\010newsTime\030\020 \001(\t\022"
  "\014\n\004summ\030\021 \001(\t\022\r\n\005title\030\022 \001(\t\022\013\n\003url\030\023 \001("
  "\t\022>\n\013newsEmotion\030\024 \001(\0132).com.htsc.mdc.in"
  "sight.model.ADNewsEmotion\022@\n\010secuList\030\025 "
  "\003(\0132..com.htsc.mdc.insight.model.ADInvol"
  "vedSecurity\022>\n\tperEmList\030\026 \003(\0132+.com.hts"
  "c.mdc.insight.model.ADRelatedPerson\022\?\n\tc"
  "omEmList\030\027 \003(\0132,.com.htsc.mdc.insight.mo"
  "del.ADRelatedCompany\022\035\n\025DataMultiplePowe"
  "rOf10\030\030 \001(\005\"Q\n\rADNewsEmotion\022\020\n\010negative"
  "\030\001 \001(\001\022\017\n\007neutral\030\002 \001(\001\022\013\n\003pos\030\003 \001(\005\022\020\n\010"
  "positive\030\004 \001(\001\"a\n\022ADInvolvedSecurity\022\017\n\007"
  "comCode\030\001 \001(\t\022\020\n\010secuCode\030\002 \001(\t\022\020\n\010secuN"
  "ame\030\003 \001(\t\022\026\n\016HTSCSecurityID\030\004 \001(\t\"\177\n\020ADR"
  "elatedCompany\022\017\n\007chiname\030\001 \001(\t\022\017\n\007comCod"
  "e\030\002 \001(\t\022\013\n\003com\030\003 \001(\t\022\022\n\ngeneralPos\030\004 \001(\005"
  "\022\020\n\010secuCode\030\005 \001(\t\022\026\n\016HTSCSecurityID\030\006 \001"
  "(\t\"P\n\017ADRelatedPerson\022\013\n\003per\030\001 \001(\t\022\017\n\007co"
  "mCode\030\002 \001(\t\022\013\n\003com\030\003 \001(\t\022\022\n\ngeneralPos\030\004"
  " \001(\005B/\n\032com.htsc.mdc.insight.modelB\014ADNe"
  "wsProtosH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ADNews_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ADNews_2eproto_sccs[5] = {
  &scc_info_ADInvolvedSecurity_ADNews_2eproto.base,
  &scc_info_ADNews_ADNews_2eproto.base,
  &scc_info_ADNewsEmotion_ADNews_2eproto.base,
  &scc_info_ADRelatedCompany_ADNews_2eproto.base,
  &scc_info_ADRelatedPerson_ADNews_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ADNews_2eproto_once;
static bool descriptor_table_ADNews_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADNews_2eproto = {
  &descriptor_table_ADNews_2eproto_initialized, descriptor_table_protodef_ADNews_2eproto, "ADNews.proto", 1261,
  &descriptor_table_ADNews_2eproto_once, descriptor_table_ADNews_2eproto_sccs, descriptor_table_ADNews_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_ADNews_2eproto::offsets,
  file_level_metadata_ADNews_2eproto, 5, file_level_enum_descriptors_ADNews_2eproto, file_level_service_descriptors_ADNews_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ADNews_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ADNews_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void ADNews::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_ADNews_default_instance_._instance.get_mutable()->newsemotion_ = const_cast< ::com::htsc::mdc::insight::model::ADNewsEmotion*>(
      ::com::htsc::mdc::insight::model::ADNewsEmotion::internal_default_instance());
}
class ADNews::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::ADNewsEmotion& newsemotion(const ADNews* msg);
};

const ::com::htsc::mdc::insight::model::ADNewsEmotion&
ADNews::HasBitSetters::newsemotion(const ADNews* msg) {
  return *msg->newsemotion_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADNews::kHTSCSecurityIDFieldNumber;
const int ADNews::kMDDateFieldNumber;
const int ADNews::kMDTimeFieldNumber;
const int ADNews::kDataTimestampFieldNumber;
const int ADNews::kTradingPhaseCodeFieldNumber;
const int ADNews::kSecurityIDSourceFieldNumber;
const int ADNews::kSecurityTypeFieldNumber;
const int ADNews::kAuthorFieldNumber;
const int ADNews::kContentFieldNumber;
const int ADNews::kEventCatFieldNumber;
const int ADNews::kEventNameFieldNumber;
const int ADNews::kEventPosFieldNumber;
const int ADNews::kIdFieldNumber;
const int ADNews::kIndustryFieldNumber;
const int ADNews::kNewsHotFieldNumber;
const int ADNews::kNewsTimeFieldNumber;
const int ADNews::kSummFieldNumber;
const int ADNews::kTitleFieldNumber;
const int ADNews::kUrlFieldNumber;
const int ADNews::kNewsEmotionFieldNumber;
const int ADNews::kSecuListFieldNumber;
const int ADNews::kPerEmListFieldNumber;
const int ADNews::kComEmListFieldNumber;
const int ADNews::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADNews::ADNews()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADNews)
}
ADNews::ADNews(const ADNews& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      seculist_(from.seculist_),
      peremlist_(from.peremlist_),
      comemlist_(from.comemlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  tradingphasecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tradingphasecode().size() > 0) {
    tradingphasecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.author().size() > 0) {
    author_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  eventcat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.eventcat().size() > 0) {
    eventcat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eventcat_);
  }
  eventname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.eventname().size() > 0) {
    eventname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eventname_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  industry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.industry().size() > 0) {
    industry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.industry_);
  }
  newstime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.newstime().size() > 0) {
    newstime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newstime_);
  }
  summ_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.summ().size() > 0) {
    summ_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.summ_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_newsemotion()) {
    newsemotion_ = new ::com::htsc::mdc::insight::model::ADNewsEmotion(*from.newsemotion_);
  } else {
    newsemotion_ = nullptr;
  }
  ::memcpy(&mddate_, &from.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADNews)
}

void ADNews::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADNews_ADNews_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventcat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  industry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newstime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summ_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&newsemotion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&newsemotion_)) + sizeof(datamultiplepowerof10_));
}

ADNews::~ADNews() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADNews)
  SharedDtor();
}

void ADNews::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventcat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  industry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newstime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summ_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete newsemotion_;
}

void ADNews::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADNews& ADNews::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADNews_ADNews_2eproto.base);
  return *internal_default_instance();
}


void ADNews::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADNews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seculist_.Clear();
  peremlist_.Clear();
  comemlist_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventcat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  industry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newstime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summ_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && newsemotion_ != nullptr) {
    delete newsemotion_;
  }
  newsemotion_ = nullptr;
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADNews::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tradingphasecode(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.TradingPhaseCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else goto handle_unusual;
        continue;
      // string author = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_author(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.author");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_content(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.content");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string eventCat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_eventcat(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.eventCat");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string eventName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_eventname(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.eventName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventPos = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          eventpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string industry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_industry(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.industry");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double newsHot = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          newshot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string newsTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_newstime(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.newsTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string summ = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_summ(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.summ");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_title(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.title");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_url(), ptr, ctx, "com.htsc.mdc.insight.model.ADNews.url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_newsemotion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_seculist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 426);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_peremlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_comemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADNews::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADNews)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 DataTimestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradingPhaseCode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingphasecode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.TradingPhaseCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string author = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->author().data(), static_cast<int>(this->author().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.author"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string eventCat = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_eventcat()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->eventcat().data(), static_cast<int>(this->eventcat().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.eventCat"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string eventName = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_eventname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->eventname().data(), static_cast<int>(this->eventname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.eventName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 eventPos = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string industry = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_industry()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->industry().data(), static_cast<int>(this->industry().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.industry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double newsHot = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &newshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string newsTime = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_newstime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->newstime().data(), static_cast<int>(this->newstime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.newsTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string summ = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_summ()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->summ().data(), static_cast<int>(this->summ().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.summ"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADNews.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_newsemotion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_seculist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_peremlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_comemlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataMultiplePowerOf10 = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADNews)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADNews)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADNews::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADNews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.TradingPhaseCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tradingphasecode(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->securityidsource(), output);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->securitytype(), output);
  }

  // string author = 8;
  if (this->author().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->author().data(), static_cast<int>(this->author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.author");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->author(), output);
  }

  // string content = 9;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.content");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->content(), output);
  }

  // string eventCat = 10;
  if (this->eventcat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->eventcat().data(), static_cast<int>(this->eventcat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.eventCat");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->eventcat(), output);
  }

  // string eventName = 11;
  if (this->eventname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->eventname().data(), static_cast<int>(this->eventname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.eventName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->eventname(), output);
  }

  // int32 eventPos = 12;
  if (this->eventpos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->eventpos(), output);
  }

  // string id = 13;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->id(), output);
  }

  // string industry = 14;
  if (this->industry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->industry().data(), static_cast<int>(this->industry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.industry");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->industry(), output);
  }

  // double newsHot = 15;
  if (!(this->newshot() <= 0 && this->newshot() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->newshot(), output);
  }

  // string newsTime = 16;
  if (this->newstime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->newstime().data(), static_cast<int>(this->newstime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.newsTime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->newstime(), output);
  }

  // string summ = 17;
  if (this->summ().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->summ().data(), static_cast<int>(this->summ().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.summ");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->summ(), output);
  }

  // string title = 18;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.title");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->title(), output);
  }

  // string url = 19;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.url");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->url(), output);
  }

  // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
  if (this->has_newsemotion()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::newsemotion(this), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->seculist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->seculist(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peremlist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->peremlist(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->comemlist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->comemlist(static_cast<int>(i)),
      output);
  }

  // int32 DataMultiplePowerOf10 = 24;
  if (this->datamultiplepowerof10() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->datamultiplepowerof10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADNews)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADNews::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADNews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.TradingPhaseCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->securitytype(), target);
  }

  // string author = 8;
  if (this->author().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->author().data(), static_cast<int>(this->author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.author");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->author(), target);
  }

  // string content = 9;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.content");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->content(), target);
  }

  // string eventCat = 10;
  if (this->eventcat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->eventcat().data(), static_cast<int>(this->eventcat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.eventCat");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->eventcat(), target);
  }

  // string eventName = 11;
  if (this->eventname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->eventname().data(), static_cast<int>(this->eventname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.eventName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->eventname(), target);
  }

  // int32 eventPos = 12;
  if (this->eventpos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->eventpos(), target);
  }

  // string id = 13;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->id(), target);
  }

  // string industry = 14;
  if (this->industry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->industry().data(), static_cast<int>(this->industry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.industry");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->industry(), target);
  }

  // double newsHot = 15;
  if (!(this->newshot() <= 0 && this->newshot() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->newshot(), target);
  }

  // string newsTime = 16;
  if (this->newstime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->newstime().data(), static_cast<int>(this->newstime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.newsTime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->newstime(), target);
  }

  // string summ = 17;
  if (this->summ().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->summ().data(), static_cast<int>(this->summ().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.summ");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->summ(), target);
  }

  // string title = 18;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.title");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->title(), target);
  }

  // string url = 19;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADNews.url");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        19, this->url(), target);
  }

  // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
  if (this->has_newsemotion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::newsemotion(this), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->seculist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->seculist(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peremlist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->peremlist(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->comemlist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->comemlist(static_cast<int>(i)), target);
  }

  // int32 DataMultiplePowerOf10 = 24;
  if (this->datamultiplepowerof10() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->datamultiplepowerof10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADNews)
  return target;
}

size_t ADNews::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADNews)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->seculist_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->seculist(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->peremlist_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->peremlist(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->comemlist_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->comemlist(static_cast<int>(i)));
    }
  }

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tradingphasecode());
  }

  // string author = 8;
  if (this->author().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->author());
  }

  // string content = 9;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->content());
  }

  // string eventCat = 10;
  if (this->eventcat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->eventcat());
  }

  // string eventName = 11;
  if (this->eventname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->eventname());
  }

  // string id = 13;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string industry = 14;
  if (this->industry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->industry());
  }

  // string newsTime = 16;
  if (this->newstime().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->newstime());
  }

  // string summ = 17;
  if (this->summ().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->summ());
  }

  // string title = 18;
  if (this->title().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string url = 19;
  if (this->url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());
  }

  // .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
  if (this->has_newsemotion()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newsemotion_);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // double newsHot = 15;
  if (!(this->newshot() <= 0 && this->newshot() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 eventPos = 12;
  if (this->eventpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->eventpos());
  }

  // int32 DataMultiplePowerOf10 = 24;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADNews::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADNews)
  GOOGLE_DCHECK_NE(&from, this);
  const ADNews* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADNews>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADNews)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADNews)
    MergeFrom(*source);
  }
}

void ADNews::MergeFrom(const ADNews& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADNews)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seculist_.MergeFrom(from.seculist_);
  peremlist_.MergeFrom(from.peremlist_);
  comemlist_.MergeFrom(from.comemlist_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.tradingphasecode().size() > 0) {

    tradingphasecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  if (from.author().size() > 0) {

    author_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.eventcat().size() > 0) {

    eventcat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eventcat_);
  }
  if (from.eventname().size() > 0) {

    eventname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eventname_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.industry().size() > 0) {

    industry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.industry_);
  }
  if (from.newstime().size() > 0) {

    newstime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newstime_);
  }
  if (from.summ().size() > 0) {

    summ_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.summ_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_newsemotion()) {
    mutable_newsemotion()->::com::htsc::mdc::insight::model::ADNewsEmotion::MergeFrom(from.newsemotion());
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (!(from.newshot() <= 0 && from.newshot() >= 0)) {
    set_newshot(from.newshot());
  }
  if (from.eventpos() != 0) {
    set_eventpos(from.eventpos());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void ADNews::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADNews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADNews::CopyFrom(const ADNews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADNews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADNews::IsInitialized() const {
  return true;
}

void ADNews::Swap(ADNews* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADNews::InternalSwap(ADNews* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&seculist_)->InternalSwap(CastToBase(&other->seculist_));
  CastToBase(&peremlist_)->InternalSwap(CastToBase(&other->peremlist_));
  CastToBase(&comemlist_)->InternalSwap(CastToBase(&other->comemlist_));
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradingphasecode_.Swap(&other->tradingphasecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  author_.Swap(&other->author_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  eventcat_.Swap(&other->eventcat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  eventname_.Swap(&other->eventname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  industry_.Swap(&other->industry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newstime_.Swap(&other->newstime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  summ_.Swap(&other->summ_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(newsemotion_, other->newsemotion_);
  swap(mddate_, other->mddate_);
  swap(mdtime_, other->mdtime_);
  swap(datatimestamp_, other->datatimestamp_);
  swap(securityidsource_, other->securityidsource_);
  swap(securitytype_, other->securitytype_);
  swap(newshot_, other->newshot_);
  swap(eventpos_, other->eventpos_);
  swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADNews::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADNewsEmotion::InitAsDefaultInstance() {
}
class ADNewsEmotion::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADNewsEmotion::kNegativeFieldNumber;
const int ADNewsEmotion::kNeutralFieldNumber;
const int ADNewsEmotion::kPosFieldNumber;
const int ADNewsEmotion::kPositiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADNewsEmotion::ADNewsEmotion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADNewsEmotion)
}
ADNewsEmotion::ADNewsEmotion(const ADNewsEmotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&negative_, &from.negative_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&negative_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADNewsEmotion)
}

void ADNewsEmotion::SharedCtor() {
  ::memset(&negative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&negative_)) + sizeof(pos_));
}

ADNewsEmotion::~ADNewsEmotion() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADNewsEmotion)
  SharedDtor();
}

void ADNewsEmotion::SharedDtor() {
}

void ADNewsEmotion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADNewsEmotion& ADNewsEmotion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADNewsEmotion_ADNews_2eproto.base);
  return *internal_default_instance();
}


void ADNewsEmotion::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&negative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&negative_)) + sizeof(pos_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADNewsEmotion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double negative = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double neutral = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          neutral_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double positive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          positive_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADNewsEmotion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double negative = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double neutral = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &neutral_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double positive = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADNewsEmotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADNewsEmotion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADNewsEmotion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double negative = 1;
  if (!(this->negative() <= 0 && this->negative() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->negative(), output);
  }

  // double neutral = 2;
  if (!(this->neutral() <= 0 && this->neutral() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->neutral(), output);
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // double positive = 4;
  if (!(this->positive() <= 0 && this->positive() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->positive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADNewsEmotion)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADNewsEmotion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double negative = 1;
  if (!(this->negative() <= 0 && this->negative() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->negative(), target);
  }

  // double neutral = 2;
  if (!(this->neutral() <= 0 && this->neutral() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->neutral(), target);
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // double positive = 4;
  if (!(this->positive() <= 0 && this->positive() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->positive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADNewsEmotion)
  return target;
}

size_t ADNewsEmotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double negative = 1;
  if (!(this->negative() <= 0 && this->negative() >= 0)) {
    total_size += 1 + 8;
  }

  // double neutral = 2;
  if (!(this->neutral() <= 0 && this->neutral() >= 0)) {
    total_size += 1 + 8;
  }

  // double positive = 4;
  if (!(this->positive() <= 0 && this->positive() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADNewsEmotion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  GOOGLE_DCHECK_NE(&from, this);
  const ADNewsEmotion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADNewsEmotion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADNewsEmotion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADNewsEmotion)
    MergeFrom(*source);
  }
}

void ADNewsEmotion::MergeFrom(const ADNewsEmotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.negative() <= 0 && from.negative() >= 0)) {
    set_negative(from.negative());
  }
  if (!(from.neutral() <= 0 && from.neutral() >= 0)) {
    set_neutral(from.neutral());
  }
  if (!(from.positive() <= 0 && from.positive() >= 0)) {
    set_positive(from.positive());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void ADNewsEmotion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADNewsEmotion::CopyFrom(const ADNewsEmotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADNewsEmotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADNewsEmotion::IsInitialized() const {
  return true;
}

void ADNewsEmotion::Swap(ADNewsEmotion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADNewsEmotion::InternalSwap(ADNewsEmotion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(negative_, other->negative_);
  swap(neutral_, other->neutral_);
  swap(positive_, other->positive_);
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADNewsEmotion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADInvolvedSecurity::InitAsDefaultInstance() {
}
class ADInvolvedSecurity::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADInvolvedSecurity::kComCodeFieldNumber;
const int ADInvolvedSecurity::kSecuCodeFieldNumber;
const int ADInvolvedSecurity::kSecuNameFieldNumber;
const int ADInvolvedSecurity::kHTSCSecurityIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADInvolvedSecurity::ADInvolvedSecurity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADInvolvedSecurity)
}
ADInvolvedSecurity::ADInvolvedSecurity(const ADInvolvedSecurity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.comcode().size() > 0) {
    comcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comcode_);
  }
  secucode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.secucode().size() > 0) {
    secucode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secucode_);
  }
  secuname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.secuname().size() > 0) {
    secuname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secuname_);
  }
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADInvolvedSecurity)
}

void ADInvolvedSecurity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADInvolvedSecurity_ADNews_2eproto.base);
  comcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secucode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secuname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ADInvolvedSecurity::~ADInvolvedSecurity() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  SharedDtor();
}

void ADInvolvedSecurity::SharedDtor() {
  comcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secucode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secuname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ADInvolvedSecurity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADInvolvedSecurity& ADInvolvedSecurity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADInvolvedSecurity_ADNews_2eproto.base);
  return *internal_default_instance();
}


void ADInvolvedSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secucode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secuname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADInvolvedSecurity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string comCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comcode(), ptr, ctx, "com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secuCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_secucode(), ptr, ctx, "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secuName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_secuname(), ptr, ctx, "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string HTSCSecurityID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADInvolvedSecurity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string comCode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comcode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comcode().data(), static_cast<int>(this->comcode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secuCode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_secucode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->secucode().data(), static_cast<int>(this->secucode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secuName = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_secuname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->secuname().data(), static_cast<int>(this->secuname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HTSCSecurityID = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADInvolvedSecurity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string comCode = 1;
  if (this->comcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comcode().data(), static_cast<int>(this->comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->comcode(), output);
  }

  // string secuCode = 2;
  if (this->secucode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->secucode().data(), static_cast<int>(this->secucode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secucode(), output);
  }

  // string secuName = 3;
  if (this->secuname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->secuname().data(), static_cast<int>(this->secuname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->secuname(), output);
  }

  // string HTSCSecurityID = 4;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->htscsecurityid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADInvolvedSecurity)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADInvolvedSecurity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string comCode = 1;
  if (this->comcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comcode().data(), static_cast<int>(this->comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->comcode(), target);
  }

  // string secuCode = 2;
  if (this->secucode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->secucode().data(), static_cast<int>(this->secucode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->secucode(), target);
  }

  // string secuName = 3;
  if (this->secuname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->secuname().data(), static_cast<int>(this->secuname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->secuname(), target);
  }

  // string HTSCSecurityID = 4;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->htscsecurityid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  return target;
}

size_t ADInvolvedSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comCode = 1;
  if (this->comcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comcode());
  }

  // string secuCode = 2;
  if (this->secucode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->secucode());
  }

  // string secuName = 3;
  if (this->secuname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->secuname());
  }

  // string HTSCSecurityID = 4;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADInvolvedSecurity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  const ADInvolvedSecurity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADInvolvedSecurity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADInvolvedSecurity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADInvolvedSecurity)
    MergeFrom(*source);
  }
}

void ADInvolvedSecurity::MergeFrom(const ADInvolvedSecurity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comcode().size() > 0) {

    comcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comcode_);
  }
  if (from.secucode().size() > 0) {

    secucode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secucode_);
  }
  if (from.secuname().size() > 0) {

    secuname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secuname_);
  }
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
}

void ADInvolvedSecurity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADInvolvedSecurity::CopyFrom(const ADInvolvedSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADInvolvedSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADInvolvedSecurity::IsInitialized() const {
  return true;
}

void ADInvolvedSecurity::Swap(ADInvolvedSecurity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADInvolvedSecurity::InternalSwap(ADInvolvedSecurity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comcode_.Swap(&other->comcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secucode_.Swap(&other->secucode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secuname_.Swap(&other->secuname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ADInvolvedSecurity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADRelatedCompany::InitAsDefaultInstance() {
}
class ADRelatedCompany::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADRelatedCompany::kChinameFieldNumber;
const int ADRelatedCompany::kComCodeFieldNumber;
const int ADRelatedCompany::kComFieldNumber;
const int ADRelatedCompany::kGeneralPosFieldNumber;
const int ADRelatedCompany::kSecuCodeFieldNumber;
const int ADRelatedCompany::kHTSCSecurityIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADRelatedCompany::ADRelatedCompany()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADRelatedCompany)
}
ADRelatedCompany::ADRelatedCompany(const ADRelatedCompany& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chiname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.chiname().size() > 0) {
    chiname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chiname_);
  }
  comcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.comcode().size() > 0) {
    comcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comcode_);
  }
  com_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.com().size() > 0) {
    com_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.com_);
  }
  secucode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.secucode().size() > 0) {
    secucode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secucode_);
  }
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  generalpos_ = from.generalpos_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADRelatedCompany)
}

void ADRelatedCompany::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADRelatedCompany_ADNews_2eproto.base);
  chiname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  com_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secucode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generalpos_ = 0;
}

ADRelatedCompany::~ADRelatedCompany() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADRelatedCompany)
  SharedDtor();
}

void ADRelatedCompany::SharedDtor() {
  chiname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  com_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secucode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ADRelatedCompany::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADRelatedCompany& ADRelatedCompany::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADRelatedCompany_ADNews_2eproto.base);
  return *internal_default_instance();
}


void ADRelatedCompany::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chiname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  com_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secucode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generalpos_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADRelatedCompany::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string chiname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_chiname(), ptr, ctx, "com.htsc.mdc.insight.model.ADRelatedCompany.chiname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comcode(), ptr, ctx, "com.htsc.mdc.insight.model.ADRelatedCompany.comCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string com = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_com(), ptr, ctx, "com.htsc.mdc.insight.model.ADRelatedCompany.com");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 generalPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          generalpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secuCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_secucode(), ptr, ctx, "com.htsc.mdc.insight.model.ADRelatedCompany.secuCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string HTSCSecurityID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADRelatedCompany::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string chiname = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_chiname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->chiname().data(), static_cast<int>(this->chiname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADRelatedCompany.chiname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comCode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comcode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comcode().data(), static_cast<int>(this->comcode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADRelatedCompany.comCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string com = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_com()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->com().data(), static_cast<int>(this->com().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADRelatedCompany.com"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 generalPos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &generalpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secuCode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_secucode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->secucode().data(), static_cast<int>(this->secucode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADRelatedCompany.secuCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HTSCSecurityID = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADRelatedCompany)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADRelatedCompany)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADRelatedCompany::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chiname = 1;
  if (this->chiname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->chiname().data(), static_cast<int>(this->chiname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.chiname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chiname(), output);
  }

  // string comCode = 2;
  if (this->comcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comcode().data(), static_cast<int>(this->comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.comCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comcode(), output);
  }

  // string com = 3;
  if (this->com().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->com().data(), static_cast<int>(this->com().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.com");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->com(), output);
  }

  // int32 generalPos = 4;
  if (this->generalpos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->generalpos(), output);
  }

  // string secuCode = 5;
  if (this->secucode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->secucode().data(), static_cast<int>(this->secucode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.secuCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->secucode(), output);
  }

  // string HTSCSecurityID = 6;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->htscsecurityid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADRelatedCompany)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADRelatedCompany::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chiname = 1;
  if (this->chiname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->chiname().data(), static_cast<int>(this->chiname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.chiname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->chiname(), target);
  }

  // string comCode = 2;
  if (this->comcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comcode().data(), static_cast<int>(this->comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.comCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comcode(), target);
  }

  // string com = 3;
  if (this->com().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->com().data(), static_cast<int>(this->com().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.com");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->com(), target);
  }

  // int32 generalPos = 4;
  if (this->generalpos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->generalpos(), target);
  }

  // string secuCode = 5;
  if (this->secucode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->secucode().data(), static_cast<int>(this->secucode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.secuCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->secucode(), target);
  }

  // string HTSCSecurityID = 6;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->htscsecurityid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADRelatedCompany)
  return target;
}

size_t ADRelatedCompany::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chiname = 1;
  if (this->chiname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->chiname());
  }

  // string comCode = 2;
  if (this->comcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comcode());
  }

  // string com = 3;
  if (this->com().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->com());
  }

  // string secuCode = 5;
  if (this->secucode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->secucode());
  }

  // string HTSCSecurityID = 6;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // int32 generalPos = 4;
  if (this->generalpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->generalpos());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADRelatedCompany::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  GOOGLE_DCHECK_NE(&from, this);
  const ADRelatedCompany* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADRelatedCompany>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADRelatedCompany)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADRelatedCompany)
    MergeFrom(*source);
  }
}

void ADRelatedCompany::MergeFrom(const ADRelatedCompany& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chiname().size() > 0) {

    chiname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chiname_);
  }
  if (from.comcode().size() > 0) {

    comcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comcode_);
  }
  if (from.com().size() > 0) {

    com_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.com_);
  }
  if (from.secucode().size() > 0) {

    secucode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secucode_);
  }
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.generalpos() != 0) {
    set_generalpos(from.generalpos());
  }
}

void ADRelatedCompany::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADRelatedCompany::CopyFrom(const ADRelatedCompany& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADRelatedCompany)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADRelatedCompany::IsInitialized() const {
  return true;
}

void ADRelatedCompany::Swap(ADRelatedCompany* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADRelatedCompany::InternalSwap(ADRelatedCompany* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chiname_.Swap(&other->chiname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comcode_.Swap(&other->comcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  com_.Swap(&other->com_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secucode_.Swap(&other->secucode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(generalpos_, other->generalpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADRelatedCompany::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADRelatedPerson::InitAsDefaultInstance() {
}
class ADRelatedPerson::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADRelatedPerson::kPerFieldNumber;
const int ADRelatedPerson::kComCodeFieldNumber;
const int ADRelatedPerson::kComFieldNumber;
const int ADRelatedPerson::kGeneralPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADRelatedPerson::ADRelatedPerson()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADRelatedPerson)
}
ADRelatedPerson::ADRelatedPerson(const ADRelatedPerson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  per_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.per().size() > 0) {
    per_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.per_);
  }
  comcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.comcode().size() > 0) {
    comcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comcode_);
  }
  com_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.com().size() > 0) {
    com_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.com_);
  }
  generalpos_ = from.generalpos_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADRelatedPerson)
}

void ADRelatedPerson::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADRelatedPerson_ADNews_2eproto.base);
  per_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  com_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generalpos_ = 0;
}

ADRelatedPerson::~ADRelatedPerson() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADRelatedPerson)
  SharedDtor();
}

void ADRelatedPerson::SharedDtor() {
  per_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  com_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ADRelatedPerson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADRelatedPerson& ADRelatedPerson::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADRelatedPerson_ADNews_2eproto.base);
  return *internal_default_instance();
}


void ADRelatedPerson::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  com_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generalpos_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADRelatedPerson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string per = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_per(), ptr, ctx, "com.htsc.mdc.insight.model.ADRelatedPerson.per");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comcode(), ptr, ctx, "com.htsc.mdc.insight.model.ADRelatedPerson.comCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string com = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_com(), ptr, ctx, "com.htsc.mdc.insight.model.ADRelatedPerson.com");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 generalPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          generalpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADRelatedPerson::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string per = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_per()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->per().data(), static_cast<int>(this->per().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADRelatedPerson.per"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comCode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comcode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comcode().data(), static_cast<int>(this->comcode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADRelatedPerson.comCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string com = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_com()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->com().data(), static_cast<int>(this->com().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADRelatedPerson.com"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 generalPos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &generalpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADRelatedPerson)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADRelatedPerson)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADRelatedPerson::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string per = 1;
  if (this->per().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->per().data(), static_cast<int>(this->per().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.per");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->per(), output);
  }

  // string comCode = 2;
  if (this->comcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comcode().data(), static_cast<int>(this->comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.comCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comcode(), output);
  }

  // string com = 3;
  if (this->com().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->com().data(), static_cast<int>(this->com().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.com");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->com(), output);
  }

  // int32 generalPos = 4;
  if (this->generalpos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->generalpos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADRelatedPerson)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADRelatedPerson::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string per = 1;
  if (this->per().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->per().data(), static_cast<int>(this->per().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.per");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->per(), target);
  }

  // string comCode = 2;
  if (this->comcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comcode().data(), static_cast<int>(this->comcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.comCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comcode(), target);
  }

  // string com = 3;
  if (this->com().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->com().data(), static_cast<int>(this->com().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADRelatedPerson.com");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->com(), target);
  }

  // int32 generalPos = 4;
  if (this->generalpos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->generalpos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADRelatedPerson)
  return target;
}

size_t ADRelatedPerson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string per = 1;
  if (this->per().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->per());
  }

  // string comCode = 2;
  if (this->comcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comcode());
  }

  // string com = 3;
  if (this->com().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->com());
  }

  // int32 generalPos = 4;
  if (this->generalpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->generalpos());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADRelatedPerson::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  GOOGLE_DCHECK_NE(&from, this);
  const ADRelatedPerson* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADRelatedPerson>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADRelatedPerson)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADRelatedPerson)
    MergeFrom(*source);
  }
}

void ADRelatedPerson::MergeFrom(const ADRelatedPerson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.per().size() > 0) {

    per_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.per_);
  }
  if (from.comcode().size() > 0) {

    comcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comcode_);
  }
  if (from.com().size() > 0) {

    com_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.com_);
  }
  if (from.generalpos() != 0) {
    set_generalpos(from.generalpos());
  }
}

void ADRelatedPerson::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADRelatedPerson::CopyFrom(const ADRelatedPerson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADRelatedPerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADRelatedPerson::IsInitialized() const {
  return true;
}

void ADRelatedPerson::Swap(ADRelatedPerson* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADRelatedPerson::InternalSwap(ADRelatedPerson* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  per_.Swap(&other->per_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comcode_.Swap(&other->comcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  com_.Swap(&other->com_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(generalpos_, other->generalpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADRelatedPerson::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADNews* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADNews >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADNews >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADNewsEmotion* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADNewsEmotion >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADNewsEmotion >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADInvolvedSecurity* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADRelatedCompany* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADRelatedCompany >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADRelatedCompany >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADRelatedPerson* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADRelatedPerson >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADRelatedPerson >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
