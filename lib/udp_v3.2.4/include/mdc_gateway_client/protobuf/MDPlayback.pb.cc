// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDPlayback.proto

#include "MDPlayback.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_InsightErrorContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsightErrorContext_InsightErrorContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataStream_MarketData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SecuritySourceType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecuritySourceType_SecuritySourceType_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class PlaybackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaybackRequest> _instance;
} _PlaybackRequest_default_instance_;
class PlaybackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaybackResponse> _instance;
} _PlaybackResponse_default_instance_;
class PlaybackControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaybackControlRequest> _instance;
} _PlaybackControlRequest_default_instance_;
class PlaybackControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaybackControlResponse> _instance;
} _PlaybackControlResponse_default_instance_;
class PlaybackStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaybackStatusRequest> _instance;
} _PlaybackStatusRequest_default_instance_;
class PlaybackStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaybackStatus> _instance;
} _PlaybackStatus_default_instance_;
class PlaybackPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaybackPayload> _instance;
} _PlaybackPayload_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_PlaybackControlRequest_MDPlayback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_PlaybackControlRequest_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::PlaybackControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::PlaybackControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaybackControlRequest_MDPlayback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlaybackControlRequest_MDPlayback_2eproto}, {}};

static void InitDefaultsscc_info_PlaybackControlResponse_MDPlayback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_PlaybackControlResponse_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::PlaybackControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::PlaybackControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaybackControlResponse_MDPlayback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlaybackControlResponse_MDPlayback_2eproto}, {
      &scc_info_InsightErrorContext_InsightErrorContext_2eproto.base,}};

static void InitDefaultsscc_info_PlaybackPayload_MDPlayback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_PlaybackPayload_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::PlaybackPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::PlaybackPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaybackPayload_MDPlayback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlaybackPayload_MDPlayback_2eproto}, {
      &scc_info_MarketDataStream_MarketData_2eproto.base,}};

static void InitDefaultsscc_info_PlaybackRequest_MDPlayback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_PlaybackRequest_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::PlaybackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::PlaybackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaybackRequest_MDPlayback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlaybackRequest_MDPlayback_2eproto}, {
      &scc_info_SecuritySourceType_SecuritySourceType_2eproto.base,}};

static void InitDefaultsscc_info_PlaybackResponse_MDPlayback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_PlaybackResponse_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::PlaybackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::PlaybackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaybackResponse_MDPlayback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlaybackResponse_MDPlayback_2eproto}, {
      &scc_info_InsightErrorContext_InsightErrorContext_2eproto.base,}};

static void InitDefaultsscc_info_PlaybackStatus_MDPlayback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_PlaybackStatus_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::PlaybackStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::PlaybackStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaybackStatus_MDPlayback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlaybackStatus_MDPlayback_2eproto}, {}};

static void InitDefaultsscc_info_PlaybackStatusRequest_MDPlayback_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_PlaybackStatusRequest_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::PlaybackStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::PlaybackStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaybackStatusRequest_MDPlayback_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlaybackStatusRequest_MDPlayback_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MDPlayback_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MDPlayback_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MDPlayback_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MDPlayback_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, htscsecurityids_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, securitysourcetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, starttime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, stoptime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, replaydatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, replayrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, exrightstype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, isneedinitialdata_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, initialdatastarttime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, replayfunctype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackRequest, sorttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackResponse, taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackResponse, issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackResponse, errorcontext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlRequest, taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlRequest, controltype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlRequest, replayrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, errorcontext_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackControlResponse, currentreplayrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatusRequest, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, taskstatus_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, replaypercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackStatus, currentreplayrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackPayload, taskid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::PlaybackPayload, marketdatastream_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackRequest)},
  { 17, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackResponse)},
  { 25, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackControlRequest)},
  { 33, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackControlResponse)},
  { 42, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackStatusRequest)},
  { 48, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackStatus)},
  { 57, -1, sizeof(::com::htsc::mdc::insight::model::PlaybackPayload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_PlaybackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_PlaybackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_PlaybackControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_PlaybackControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_PlaybackStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_PlaybackStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_PlaybackPayload_default_instance_),
};

const char descriptor_table_protodef_MDPlayback_2eproto[] =
  "\n\020MDPlayback.proto\022\032com.htsc.mdc.insight"
  ".model\032\025EMarketDataType.proto\032\020MarketDat"
  "a.proto\032\031InsightErrorContext.proto\032\030Secu"
  "ritySourceType.proto\"\260\003\n\017PlaybackRequest"
  "\022\016\n\006taskId\030\001 \001(\t\022\027\n\017htscSecurityIDs\030\002 \003("
  "\t\022J\n\022securitySourceType\030\003 \003(\0132..com.htsc"
  ".mdc.insight.model.SecuritySourceType\022\021\n"
  "\tstartTime\030\004 \001(\t\022\020\n\010stopTime\030\005 \001(\t\022C\n\016re"
  "playDataType\030\006 \001(\0162+.com.htsc.mdc.insigh"
  "t.model.EMarketDataType\022\022\n\nreplayRate\030\007 "
  "\001(\005\022G\n\014exrightsType\030\010 \001(\01621.com.htsc.mdc"
  ".insight.model.EPlaybackExrightsType\022\031\n\021"
  "isNeedInitialData\030\t \001(\010\022\034\n\024initialDataSt"
  "artTime\030\n \001(\t\022\026\n\016replayFuncType\030\013 \001(\005\022\020\n"
  "\010sortType\030\014 \001(\005\"|\n\020PlaybackResponse\022\016\n\006t"
  "askId\030\001 \001(\t\022\021\n\tisSuccess\030\002 \001(\010\022E\n\014errorC"
  "ontext\030\003 \001(\0132/.com.htsc.mdc.insight.mode"
  "l.InsightErrorContext\"\207\001\n\026PlaybackContro"
  "lRequest\022\016\n\006taskId\030\001 \001(\t\022I\n\013controlType\030"
  "\002 \001(\01624.com.htsc.mdc.insight.model.EPlay"
  "backTaskControlType\022\022\n\nreplayRate\030\003 \001(\005\""
  "\236\001\n\027PlaybackControlResponse\022\016\n\006taskId\030\001 "
  "\001(\t\022\021\n\tisSuccess\030\002 \001(\010\022E\n\014errorContext\030\003"
  " \001(\0132/.com.htsc.mdc.insight.model.Insigh"
  "tErrorContext\022\031\n\021currentReplayRate\030\004 \001(\005"
  "\"\'\n\025PlaybackStatusRequest\022\016\n\006taskId\030\001 \001("
  "\t\"\227\001\n\016PlaybackStatus\022\016\n\006taskId\030\001 \001(\t\022C\n\n"
  "taskStatus\030\002 \001(\0162/.com.htsc.mdc.insight."
  "model.EPlaybackTaskStatus\022\025\n\rreplayPerce"
  "nt\030\003 \001(\005\022\031\n\021currentReplayRate\030\004 \001(\005\"i\n\017P"
  "laybackPayload\022\016\n\006taskId\030\001 \001(\t\022F\n\020market"
  "DataStream\030\002 \001(\0132,.com.htsc.mdc.insight."
  "model.MarketDataStream*p\n\025EPlaybackExrig"
  "htsType\022\031\n\025DEFAULT_EXRIGHTS_TYPE\020\000\022\017\n\013NO"
  "_EXRIGHTS\020\n\022\024\n\020FORWARD_EXRIGHTS\020\013\022\025\n\021BAC"
  "KWARD_EXRIGHTS\020\014*\\\n\030EPlaybackTaskControl"
  "Type\022\030\n\024DEFAULT_CONTROL_TYPE\020\000\022\017\n\013CANCEL"
  "_TASK\020\001\022\025\n\021SET_PLAYBACK_RATE\020\002*\235\001\n\023EPlay"
  "backTaskStatus\022\022\n\016DEFAULT_STATUS\020\000\022\020\n\014IN"
  "ITIALIZING\020\013\022\r\n\tPREPARING\020\014\022\014\n\010PREPARED\020"
  "\r\022\013\n\007RUNNING\020\016\022\r\n\tAPPENDING\020\017\022\014\n\010CANCELE"
  "D\020\020\022\r\n\tCOMPLETED\020\021\022\n\n\006FAILED\020\022B2\n\032com.ht"
  "sc.mdc.insight.modelB\017MDPlaybackProtoH\001\240"
  "\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MDPlayback_2eproto_deps[4] = {
  &::descriptor_table_EMarketDataType_2eproto,
  &::descriptor_table_InsightErrorContext_2eproto,
  &::descriptor_table_MarketData_2eproto,
  &::descriptor_table_SecuritySourceType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MDPlayback_2eproto_sccs[7] = {
  &scc_info_PlaybackControlRequest_MDPlayback_2eproto.base,
  &scc_info_PlaybackControlResponse_MDPlayback_2eproto.base,
  &scc_info_PlaybackPayload_MDPlayback_2eproto.base,
  &scc_info_PlaybackRequest_MDPlayback_2eproto.base,
  &scc_info_PlaybackResponse_MDPlayback_2eproto.base,
  &scc_info_PlaybackStatus_MDPlayback_2eproto.base,
  &scc_info_PlaybackStatusRequest_MDPlayback_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MDPlayback_2eproto_once;
static bool descriptor_table_MDPlayback_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDPlayback_2eproto = {
  &descriptor_table_MDPlayback_2eproto_initialized, descriptor_table_protodef_MDPlayback_2eproto, "MDPlayback.proto", 1730,
  &descriptor_table_MDPlayback_2eproto_once, descriptor_table_MDPlayback_2eproto_sccs, descriptor_table_MDPlayback_2eproto_deps, 7, 4,
  schemas, file_default_instances, TableStruct_MDPlayback_2eproto::offsets,
  file_level_metadata_MDPlayback_2eproto, 7, file_level_enum_descriptors_MDPlayback_2eproto, file_level_service_descriptors_MDPlayback_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MDPlayback_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MDPlayback_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackExrightsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDPlayback_2eproto);
  return file_level_enum_descriptors_MDPlayback_2eproto[0];
}
bool EPlaybackExrightsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackTaskControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDPlayback_2eproto);
  return file_level_enum_descriptors_MDPlayback_2eproto[1];
}
bool EPlaybackTaskControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackTaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDPlayback_2eproto);
  return file_level_enum_descriptors_MDPlayback_2eproto[2];
}
bool EPlaybackTaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlaybackRequest::InitAsDefaultInstance() {
}
class PlaybackRequest::HasBitSetters {
 public:
};

void PlaybackRequest::clear_securitysourcetype() {
  securitysourcetype_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackRequest::kTaskIdFieldNumber;
const int PlaybackRequest::kHtscSecurityIDsFieldNumber;
const int PlaybackRequest::kSecuritySourceTypeFieldNumber;
const int PlaybackRequest::kStartTimeFieldNumber;
const int PlaybackRequest::kStopTimeFieldNumber;
const int PlaybackRequest::kReplayDataTypeFieldNumber;
const int PlaybackRequest::kReplayRateFieldNumber;
const int PlaybackRequest::kExrightsTypeFieldNumber;
const int PlaybackRequest::kIsNeedInitialDataFieldNumber;
const int PlaybackRequest::kInitialDataStartTimeFieldNumber;
const int PlaybackRequest::kReplayFuncTypeFieldNumber;
const int PlaybackRequest::kSortTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackRequest::PlaybackRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.PlaybackRequest)
}
PlaybackRequest::PlaybackRequest(const PlaybackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      htscsecurityids_(from.htscsecurityids_),
      securitysourcetype_(from.securitysourcetype_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  starttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.starttime().size() > 0) {
    starttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.starttime_);
  }
  stoptime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.stoptime().size() > 0) {
    stoptime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stoptime_);
  }
  initialdatastarttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.initialdatastarttime().size() > 0) {
    initialdatastarttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.initialdatastarttime_);
  }
  ::memcpy(&replaydatatype_, &from.replaydatatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&sorttype_) -
    reinterpret_cast<char*>(&replaydatatype_)) + sizeof(sorttype_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackRequest)
}

void PlaybackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaybackRequest_MDPlayback_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  starttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stoptime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initialdatastarttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&replaydatatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sorttype_) -
      reinterpret_cast<char*>(&replaydatatype_)) + sizeof(sorttype_));
}

PlaybackRequest::~PlaybackRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackRequest)
  SharedDtor();
}

void PlaybackRequest::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  starttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stoptime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initialdatastarttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlaybackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaybackRequest& PlaybackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaybackRequest_MDPlayback_2eproto.base);
  return *internal_default_instance();
}


void PlaybackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  htscsecurityids_.Clear();
  securitysourcetype_.Clear();
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  starttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stoptime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initialdatastarttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&replaydatatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sorttype_) -
      reinterpret_cast<char*>(&replaydatatype_)) + sizeof(sorttype_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaybackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_taskid(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackRequest.taskId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string htscSecurityIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_htscsecurityids(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_securitysourcetype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // string startTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_starttime(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackRequest.startTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stopTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_stoptime(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackRequest.stopTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_replaydatatype(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else goto handle_unusual;
        continue;
      // int32 replayRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          replayrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_exrightstype(static_cast<::com::htsc::mdc::insight::model::EPlaybackExrightsType>(val));
        } else goto handle_unusual;
        continue;
      // bool isNeedInitialData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isneedinitialdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initialDataStartTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_initialdatastarttime(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 replayFuncType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          replayfunctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sortType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sorttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaybackRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.PlaybackRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string taskId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), static_cast<int>(this->taskid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackRequest.taskId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string htscSecurityIDs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_htscsecurityids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityids(this->htscsecurityids_size() - 1).data(),
            static_cast<int>(this->htscsecurityids(this->htscsecurityids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_securitysourcetype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string startTime = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->starttime().data(), static_cast<int>(this->starttime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackRequest.startTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stopTime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stoptime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->stoptime().data(), static_cast<int>(this->stoptime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackRequest.stopTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_replaydatatype(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replayRate = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &replayrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exrightstype(static_cast< ::com::htsc::mdc::insight::model::EPlaybackExrightsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isNeedInitialData = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isneedinitialdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string initialDataStartTime = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_initialdatastarttime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->initialdatastarttime().data(), static_cast<int>(this->initialdatastarttime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replayFuncType = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &replayfunctype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sortType = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.PlaybackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.PlaybackRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaybackRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.PlaybackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.taskId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // repeated string htscSecurityIDs = 2;
  for (int i = 0, n = this->htscsecurityids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityids(i).data(), static_cast<int>(this->htscsecurityids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->htscsecurityids(i), output);
  }

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->securitysourcetype_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->securitysourcetype(static_cast<int>(i)),
      output);
  }

  // string startTime = 4;
  if (this->starttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->starttime().data(), static_cast<int>(this->starttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.startTime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->starttime(), output);
  }

  // string stopTime = 5;
  if (this->stoptime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->stoptime().data(), static_cast<int>(this->stoptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.stopTime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stoptime(), output);
  }

  // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
  if (this->replaydatatype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->replaydatatype(), output);
  }

  // int32 replayRate = 7;
  if (this->replayrate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->replayrate(), output);
  }

  // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
  if (this->exrightstype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->exrightstype(), output);
  }

  // bool isNeedInitialData = 9;
  if (this->isneedinitialdata() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->isneedinitialdata(), output);
  }

  // string initialDataStartTime = 10;
  if (this->initialdatastarttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->initialdatastarttime().data(), static_cast<int>(this->initialdatastarttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->initialdatastarttime(), output);
  }

  // int32 replayFuncType = 11;
  if (this->replayfunctype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->replayfunctype(), output);
  }

  // int32 sortType = 12;
  if (this->sorttype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->sorttype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.PlaybackRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaybackRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.taskId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // repeated string htscSecurityIDs = 2;
  for (int i = 0, n = this->htscsecurityids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityids(i).data(), static_cast<int>(this->htscsecurityids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->htscsecurityids(i), target);
  }

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->securitysourcetype_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->securitysourcetype(static_cast<int>(i)), target);
  }

  // string startTime = 4;
  if (this->starttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->starttime().data(), static_cast<int>(this->starttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.startTime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->starttime(), target);
  }

  // string stopTime = 5;
  if (this->stoptime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->stoptime().data(), static_cast<int>(this->stoptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.stopTime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->stoptime(), target);
  }

  // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
  if (this->replaydatatype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->replaydatatype(), target);
  }

  // int32 replayRate = 7;
  if (this->replayrate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->replayrate(), target);
  }

  // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
  if (this->exrightstype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->exrightstype(), target);
  }

  // bool isNeedInitialData = 9;
  if (this->isneedinitialdata() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->isneedinitialdata(), target);
  }

  // string initialDataStartTime = 10;
  if (this->initialdatastarttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->initialdatastarttime().data(), static_cast<int>(this->initialdatastarttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->initialdatastarttime(), target);
  }

  // int32 replayFuncType = 11;
  if (this->replayfunctype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->replayfunctype(), target);
  }

  // int32 sortType = 12;
  if (this->sorttype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->sorttype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackRequest)
  return target;
}

size_t PlaybackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string htscSecurityIDs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->htscsecurityids_size());
  for (int i = 0, n = this->htscsecurityids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->htscsecurityids(i));
  }

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->securitysourcetype_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->securitysourcetype(static_cast<int>(i)));
    }
  }

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  // string startTime = 4;
  if (this->starttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->starttime());
  }

  // string stopTime = 5;
  if (this->stoptime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->stoptime());
  }

  // string initialDataStartTime = 10;
  if (this->initialdatastarttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->initialdatastarttime());
  }

  // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
  if (this->replaydatatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->replaydatatype());
  }

  // int32 replayRate = 7;
  if (this->replayrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->replayrate());
  }

  // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
  if (this->exrightstype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->exrightstype());
  }

  // bool isNeedInitialData = 9;
  if (this->isneedinitialdata() != 0) {
    total_size += 1 + 1;
  }

  // int32 replayFuncType = 11;
  if (this->replayfunctype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->replayfunctype());
  }

  // int32 sortType = 12;
  if (this->sorttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sorttype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaybackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.PlaybackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaybackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaybackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.PlaybackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.PlaybackRequest)
    MergeFrom(*source);
  }
}

void PlaybackRequest::MergeFrom(const PlaybackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  htscsecurityids_.MergeFrom(from.htscsecurityids_);
  securitysourcetype_.MergeFrom(from.securitysourcetype_);
  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.starttime().size() > 0) {

    starttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.starttime_);
  }
  if (from.stoptime().size() > 0) {

    stoptime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stoptime_);
  }
  if (from.initialdatastarttime().size() > 0) {

    initialdatastarttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.initialdatastarttime_);
  }
  if (from.replaydatatype() != 0) {
    set_replaydatatype(from.replaydatatype());
  }
  if (from.replayrate() != 0) {
    set_replayrate(from.replayrate());
  }
  if (from.exrightstype() != 0) {
    set_exrightstype(from.exrightstype());
  }
  if (from.isneedinitialdata() != 0) {
    set_isneedinitialdata(from.isneedinitialdata());
  }
  if (from.replayfunctype() != 0) {
    set_replayfunctype(from.replayfunctype());
  }
  if (from.sorttype() != 0) {
    set_sorttype(from.sorttype());
  }
}

void PlaybackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.PlaybackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackRequest::CopyFrom(const PlaybackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackRequest::IsInitialized() const {
  return true;
}

void PlaybackRequest::Swap(PlaybackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackRequest::InternalSwap(PlaybackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  htscsecurityids_.InternalSwap(CastToBase(&other->htscsecurityids_));
  CastToBase(&securitysourcetype_)->InternalSwap(CastToBase(&other->securitysourcetype_));
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  starttime_.Swap(&other->starttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stoptime_.Swap(&other->stoptime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  initialdatastarttime_.Swap(&other->initialdatastarttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(replaydatatype_, other->replaydatatype_);
  swap(replayrate_, other->replayrate_);
  swap(exrightstype_, other->exrightstype_);
  swap(isneedinitialdata_, other->isneedinitialdata_);
  swap(replayfunctype_, other->replayfunctype_);
  swap(sorttype_, other->sorttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaybackResponse::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_PlaybackResponse_default_instance_._instance.get_mutable()->errorcontext_ = const_cast< ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      ::com::htsc::mdc::insight::model::InsightErrorContext::internal_default_instance());
}
class PlaybackResponse::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const PlaybackResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
PlaybackResponse::HasBitSetters::errorcontext(const PlaybackResponse* msg) {
  return *msg->errorcontext_;
}
void PlaybackResponse::clear_errorcontext() {
  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackResponse::kTaskIdFieldNumber;
const int PlaybackResponse::kIsSuccessFieldNumber;
const int PlaybackResponse::kErrorContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackResponse::PlaybackResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.PlaybackResponse)
}
PlaybackResponse::PlaybackResponse(const PlaybackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.has_errorcontext()) {
    errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from.errorcontext_);
  } else {
    errorcontext_ = nullptr;
  }
  issuccess_ = from.issuccess_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackResponse)
}

void PlaybackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaybackResponse_MDPlayback_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&errorcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&errorcontext_)) + sizeof(issuccess_));
}

PlaybackResponse::~PlaybackResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackResponse)
  SharedDtor();
}

void PlaybackResponse::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errorcontext_;
}

void PlaybackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaybackResponse& PlaybackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaybackResponse_MDPlayback_2eproto.base);
  return *internal_default_instance();
}


void PlaybackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
  issuccess_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaybackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_taskid(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackResponse.taskId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaybackResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.PlaybackResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string taskId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), static_cast<int>(this->taskid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackResponse.taskId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSuccess = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_errorcontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.PlaybackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.PlaybackResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaybackResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.PlaybackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackResponse.taskId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->issuccess(), output);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::errorcontext(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.PlaybackResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaybackResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackResponse.taskId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::errorcontext(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackResponse)
  return target;
}

size_t PlaybackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorcontext_);
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaybackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.PlaybackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaybackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaybackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.PlaybackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.PlaybackResponse)
    MergeFrom(*source);
  }
}

void PlaybackResponse::MergeFrom(const PlaybackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.has_errorcontext()) {
    mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(from.errorcontext());
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
}

void PlaybackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.PlaybackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackResponse::CopyFrom(const PlaybackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackResponse::IsInitialized() const {
  return true;
}

void PlaybackResponse::Swap(PlaybackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackResponse::InternalSwap(PlaybackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcontext_, other->errorcontext_);
  swap(issuccess_, other->issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaybackControlRequest::InitAsDefaultInstance() {
}
class PlaybackControlRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackControlRequest::kTaskIdFieldNumber;
const int PlaybackControlRequest::kControlTypeFieldNumber;
const int PlaybackControlRequest::kReplayRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackControlRequest::PlaybackControlRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.PlaybackControlRequest)
}
PlaybackControlRequest::PlaybackControlRequest(const PlaybackControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  ::memcpy(&controltype_, &from.controltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&replayrate_) -
    reinterpret_cast<char*>(&controltype_)) + sizeof(replayrate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackControlRequest)
}

void PlaybackControlRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaybackControlRequest_MDPlayback_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&controltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replayrate_) -
      reinterpret_cast<char*>(&controltype_)) + sizeof(replayrate_));
}

PlaybackControlRequest::~PlaybackControlRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackControlRequest)
  SharedDtor();
}

void PlaybackControlRequest::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlaybackControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaybackControlRequest& PlaybackControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaybackControlRequest_MDPlayback_2eproto.base);
  return *internal_default_instance();
}


void PlaybackControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&controltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replayrate_) -
      reinterpret_cast<char*>(&controltype_)) + sizeof(replayrate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaybackControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_taskid(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackControlRequest.taskId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_controltype(static_cast<::com::htsc::mdc::insight::model::EPlaybackTaskControlType>(val));
        } else goto handle_unusual;
        continue;
      // int32 replayRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          replayrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaybackControlRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string taskId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), static_cast<int>(this->taskid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackControlRequest.taskId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_controltype(static_cast< ::com::htsc::mdc::insight::model::EPlaybackTaskControlType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replayRate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &replayrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.PlaybackControlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.PlaybackControlRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaybackControlRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackControlRequest.taskId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
  if (this->controltype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->controltype(), output);
  }

  // int32 replayRate = 3;
  if (this->replayrate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->replayrate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.PlaybackControlRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaybackControlRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackControlRequest.taskId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
  if (this->controltype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->controltype(), target);
  }

  // int32 replayRate = 3;
  if (this->replayrate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->replayrate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackControlRequest)
  return target;
}

size_t PlaybackControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
  if (this->controltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->controltype());
  }

  // int32 replayRate = 3;
  if (this->replayrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->replayrate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaybackControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaybackControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaybackControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.PlaybackControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.PlaybackControlRequest)
    MergeFrom(*source);
  }
}

void PlaybackControlRequest::MergeFrom(const PlaybackControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.controltype() != 0) {
    set_controltype(from.controltype());
  }
  if (from.replayrate() != 0) {
    set_replayrate(from.replayrate());
  }
}

void PlaybackControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackControlRequest::CopyFrom(const PlaybackControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackControlRequest::IsInitialized() const {
  return true;
}

void PlaybackControlRequest::Swap(PlaybackControlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackControlRequest::InternalSwap(PlaybackControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(controltype_, other->controltype_);
  swap(replayrate_, other->replayrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaybackControlResponse::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_PlaybackControlResponse_default_instance_._instance.get_mutable()->errorcontext_ = const_cast< ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      ::com::htsc::mdc::insight::model::InsightErrorContext::internal_default_instance());
}
class PlaybackControlResponse::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const PlaybackControlResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
PlaybackControlResponse::HasBitSetters::errorcontext(const PlaybackControlResponse* msg) {
  return *msg->errorcontext_;
}
void PlaybackControlResponse::clear_errorcontext() {
  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackControlResponse::kTaskIdFieldNumber;
const int PlaybackControlResponse::kIsSuccessFieldNumber;
const int PlaybackControlResponse::kErrorContextFieldNumber;
const int PlaybackControlResponse::kCurrentReplayRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackControlResponse::PlaybackControlResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.PlaybackControlResponse)
}
PlaybackControlResponse::PlaybackControlResponse(const PlaybackControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.has_errorcontext()) {
    errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from.errorcontext_);
  } else {
    errorcontext_ = nullptr;
  }
  ::memcpy(&issuccess_, &from.issuccess_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentreplayrate_) -
    reinterpret_cast<char*>(&issuccess_)) + sizeof(currentreplayrate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackControlResponse)
}

void PlaybackControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaybackControlResponse_MDPlayback_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&errorcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentreplayrate_) -
      reinterpret_cast<char*>(&errorcontext_)) + sizeof(currentreplayrate_));
}

PlaybackControlResponse::~PlaybackControlResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackControlResponse)
  SharedDtor();
}

void PlaybackControlResponse::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete errorcontext_;
}

void PlaybackControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaybackControlResponse& PlaybackControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaybackControlResponse_MDPlayback_2eproto.base);
  return *internal_default_instance();
}


void PlaybackControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
  ::memset(&issuccess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentreplayrate_) -
      reinterpret_cast<char*>(&issuccess_)) + sizeof(currentreplayrate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaybackControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_taskid(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackControlResponse.taskId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currentReplayRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          currentreplayrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaybackControlResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string taskId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), static_cast<int>(this->taskid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackControlResponse.taskId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSuccess = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_errorcontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currentReplayRate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentreplayrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.PlaybackControlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.PlaybackControlResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaybackControlResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackControlResponse.taskId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->issuccess(), output);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::errorcontext(this), output);
  }

  // int32 currentReplayRate = 4;
  if (this->currentreplayrate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->currentreplayrate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.PlaybackControlResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaybackControlResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackControlResponse.taskId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::errorcontext(this), target);
  }

  // int32 currentReplayRate = 4;
  if (this->currentreplayrate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->currentreplayrate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackControlResponse)
  return target;
}

size_t PlaybackControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  if (this->has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorcontext_);
  }

  // bool isSuccess = 2;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  // int32 currentReplayRate = 4;
  if (this->currentreplayrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->currentreplayrate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaybackControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaybackControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaybackControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.PlaybackControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.PlaybackControlResponse)
    MergeFrom(*source);
  }
}

void PlaybackControlResponse::MergeFrom(const PlaybackControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.has_errorcontext()) {
    mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(from.errorcontext());
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
  if (from.currentreplayrate() != 0) {
    set_currentreplayrate(from.currentreplayrate());
  }
}

void PlaybackControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackControlResponse::CopyFrom(const PlaybackControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackControlResponse::IsInitialized() const {
  return true;
}

void PlaybackControlResponse::Swap(PlaybackControlResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackControlResponse::InternalSwap(PlaybackControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcontext_, other->errorcontext_);
  swap(issuccess_, other->issuccess_);
  swap(currentreplayrate_, other->currentreplayrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaybackStatusRequest::InitAsDefaultInstance() {
}
class PlaybackStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackStatusRequest::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackStatusRequest::PlaybackStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.PlaybackStatusRequest)
}
PlaybackStatusRequest::PlaybackStatusRequest(const PlaybackStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackStatusRequest)
}

void PlaybackStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaybackStatusRequest_MDPlayback_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlaybackStatusRequest::~PlaybackStatusRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  SharedDtor();
}

void PlaybackStatusRequest::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlaybackStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaybackStatusRequest& PlaybackStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaybackStatusRequest_MDPlayback_2eproto.base);
  return *internal_default_instance();
}


void PlaybackStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaybackStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_taskid(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaybackStatusRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string taskId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), static_cast<int>(this->taskid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaybackStatusRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.PlaybackStatusRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaybackStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  return target;
}

size_t PlaybackStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaybackStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaybackStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaybackStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.PlaybackStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.PlaybackStatusRequest)
    MergeFrom(*source);
  }
}

void PlaybackStatusRequest::MergeFrom(const PlaybackStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
}

void PlaybackStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackStatusRequest::CopyFrom(const PlaybackStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackStatusRequest::IsInitialized() const {
  return true;
}

void PlaybackStatusRequest::Swap(PlaybackStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackStatusRequest::InternalSwap(PlaybackStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaybackStatus::InitAsDefaultInstance() {
}
class PlaybackStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackStatus::kTaskIdFieldNumber;
const int PlaybackStatus::kTaskStatusFieldNumber;
const int PlaybackStatus::kReplayPercentFieldNumber;
const int PlaybackStatus::kCurrentReplayRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackStatus::PlaybackStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.PlaybackStatus)
}
PlaybackStatus::PlaybackStatus(const PlaybackStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  ::memcpy(&taskstatus_, &from.taskstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentreplayrate_) -
    reinterpret_cast<char*>(&taskstatus_)) + sizeof(currentreplayrate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackStatus)
}

void PlaybackStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaybackStatus_MDPlayback_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentreplayrate_) -
      reinterpret_cast<char*>(&taskstatus_)) + sizeof(currentreplayrate_));
}

PlaybackStatus::~PlaybackStatus() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackStatus)
  SharedDtor();
}

void PlaybackStatus::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlaybackStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaybackStatus& PlaybackStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaybackStatus_MDPlayback_2eproto.base);
  return *internal_default_instance();
}


void PlaybackStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentreplayrate_) -
      reinterpret_cast<char*>(&taskstatus_)) + sizeof(currentreplayrate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaybackStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_taskid(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackStatus.taskId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_taskstatus(static_cast<::com::htsc::mdc::insight::model::EPlaybackTaskStatus>(val));
        } else goto handle_unusual;
        continue;
      // int32 replayPercent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          replaypercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currentReplayRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          currentreplayrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaybackStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.PlaybackStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string taskId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), static_cast<int>(this->taskid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackStatus.taskId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_taskstatus(static_cast< ::com::htsc::mdc::insight::model::EPlaybackTaskStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replayPercent = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &replaypercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currentReplayRate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentreplayrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.PlaybackStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.PlaybackStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaybackStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.PlaybackStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackStatus.taskId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
  if (this->taskstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->taskstatus(), output);
  }

  // int32 replayPercent = 3;
  if (this->replaypercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->replaypercent(), output);
  }

  // int32 currentReplayRate = 4;
  if (this->currentreplayrate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->currentreplayrate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.PlaybackStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaybackStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackStatus.taskId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
  if (this->taskstatus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->taskstatus(), target);
  }

  // int32 replayPercent = 3;
  if (this->replaypercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->replaypercent(), target);
  }

  // int32 currentReplayRate = 4;
  if (this->currentreplayrate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->currentreplayrate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackStatus)
  return target;
}

size_t PlaybackStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
  if (this->taskstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->taskstatus());
  }

  // int32 replayPercent = 3;
  if (this->replaypercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->replaypercent());
  }

  // int32 currentReplayRate = 4;
  if (this->currentreplayrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->currentreplayrate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaybackStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.PlaybackStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaybackStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaybackStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.PlaybackStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.PlaybackStatus)
    MergeFrom(*source);
  }
}

void PlaybackStatus::MergeFrom(const PlaybackStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.taskstatus() != 0) {
    set_taskstatus(from.taskstatus());
  }
  if (from.replaypercent() != 0) {
    set_replaypercent(from.replaypercent());
  }
  if (from.currentreplayrate() != 0) {
    set_currentreplayrate(from.currentreplayrate());
  }
}

void PlaybackStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.PlaybackStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackStatus::CopyFrom(const PlaybackStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackStatus::IsInitialized() const {
  return true;
}

void PlaybackStatus::Swap(PlaybackStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackStatus::InternalSwap(PlaybackStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskstatus_, other->taskstatus_);
  swap(replaypercent_, other->replaypercent_);
  swap(currentreplayrate_, other->currentreplayrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaybackPayload::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_PlaybackPayload_default_instance_._instance.get_mutable()->marketdatastream_ = const_cast< ::com::htsc::mdc::insight::model::MarketDataStream*>(
      ::com::htsc::mdc::insight::model::MarketDataStream::internal_default_instance());
}
class PlaybackPayload::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::MarketDataStream& marketdatastream(const PlaybackPayload* msg);
};

const ::com::htsc::mdc::insight::model::MarketDataStream&
PlaybackPayload::HasBitSetters::marketdatastream(const PlaybackPayload* msg) {
  return *msg->marketdatastream_;
}
void PlaybackPayload::clear_marketdatastream() {
  if (GetArenaNoVirtual() == nullptr && marketdatastream_ != nullptr) {
    delete marketdatastream_;
  }
  marketdatastream_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackPayload::kTaskIdFieldNumber;
const int PlaybackPayload::kMarketDataStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackPayload::PlaybackPayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.PlaybackPayload)
}
PlaybackPayload::PlaybackPayload(const PlaybackPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.has_marketdatastream()) {
    marketdatastream_ = new ::com::htsc::mdc::insight::model::MarketDataStream(*from.marketdatastream_);
  } else {
    marketdatastream_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.PlaybackPayload)
}

void PlaybackPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaybackPayload_MDPlayback_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketdatastream_ = nullptr;
}

PlaybackPayload::~PlaybackPayload() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.PlaybackPayload)
  SharedDtor();
}

void PlaybackPayload::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete marketdatastream_;
}

void PlaybackPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaybackPayload& PlaybackPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaybackPayload_MDPlayback_2eproto.base);
  return *internal_default_instance();
}


void PlaybackPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.PlaybackPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && marketdatastream_ != nullptr) {
    delete marketdatastream_;
  }
  marketdatastream_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaybackPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_taskid(), ptr, ctx, "com.htsc.mdc.insight.model.PlaybackPayload.taskId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_marketdatastream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaybackPayload::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.PlaybackPayload)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string taskId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), static_cast<int>(this->taskid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.PlaybackPayload.taskId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_marketdatastream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.PlaybackPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.PlaybackPayload)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaybackPayload::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.PlaybackPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackPayload.taskId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
  if (this->has_marketdatastream()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::marketdatastream(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.PlaybackPayload)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaybackPayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.PlaybackPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), static_cast<int>(this->taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.PlaybackPayload.taskId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
  if (this->has_marketdatastream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::marketdatastream(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.PlaybackPayload)
  return target;
}

size_t PlaybackPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.PlaybackPayload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
  if (this->has_marketdatastream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marketdatastream_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaybackPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.PlaybackPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaybackPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaybackPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.PlaybackPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.PlaybackPayload)
    MergeFrom(*source);
  }
}

void PlaybackPayload::MergeFrom(const PlaybackPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.PlaybackPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.has_marketdatastream()) {
    mutable_marketdatastream()->::com::htsc::mdc::insight::model::MarketDataStream::MergeFrom(from.marketdatastream());
  }
}

void PlaybackPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.PlaybackPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackPayload::CopyFrom(const PlaybackPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.PlaybackPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackPayload::IsInitialized() const {
  return true;
}

void PlaybackPayload::Swap(PlaybackPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackPayload::InternalSwap(PlaybackPayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(marketdatastream_, other->marketdatastream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackRequest* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::PlaybackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackResponse* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::PlaybackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackControlRequest* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackControlRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::PlaybackControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackControlResponse* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackControlResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::PlaybackControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackStatusRequest* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::PlaybackStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackStatus* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackStatus >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::PlaybackStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::PlaybackPayload* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::PlaybackPayload >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::PlaybackPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
