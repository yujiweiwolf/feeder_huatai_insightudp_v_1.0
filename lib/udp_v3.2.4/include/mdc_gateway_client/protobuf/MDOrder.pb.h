// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDOrder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDOrder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDOrder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDOrder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDOrder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDOrder_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDOrder;
class MDOrderDefaultTypeInternal;
extern MDOrderDefaultTypeInternal _MDOrder_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDOrder* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDOrder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDOrder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDOrder) */ {
 public:
  MDOrder();
  virtual ~MDOrder();

  MDOrder(const MDOrder& from);
  MDOrder(MDOrder&& from) noexcept
    : MDOrder() {
    *this = ::std::move(from);
  }

  inline MDOrder& operator=(const MDOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDOrder& operator=(MDOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDOrder* internal_default_instance() {
    return reinterpret_cast<const MDOrder*>(
               &_MDOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDOrder* other);
  friend void swap(MDOrder& a, MDOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDOrder* New() const final {
    return CreateMaybeMessage<MDOrder>(nullptr);
  }

  MDOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDOrder& from);
  void MergeFrom(const MDOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDOrder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDOrder_2eproto);
    return ::descriptor_table_MDOrder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // string SecurityStatus = 17;
  void clear_securitystatus();
  static const int kSecurityStatusFieldNumber = 17;
  const std::string& securitystatus() const;
  void set_securitystatus(const std::string& value);
  void set_securitystatus(std::string&& value);
  void set_securitystatus(const char* value);
  void set_securitystatus(const char* value, size_t size);
  std::string* mutable_securitystatus();
  std::string* release_securitystatus();
  void set_allocated_securitystatus(std::string* securitystatus);

  // string QuoteID = 18;
  void clear_quoteid();
  static const int kQuoteIDFieldNumber = 18;
  const std::string& quoteid() const;
  void set_quoteid(const std::string& value);
  void set_quoteid(std::string&& value);
  void set_quoteid(const char* value);
  void set_quoteid(const char* value, size_t size);
  std::string* mutable_quoteid();
  std::string* release_quoteid();
  void set_allocated_quoteid(std::string* quoteid);

  // string MemberID = 19;
  void clear_memberid();
  static const int kMemberIDFieldNumber = 19;
  const std::string& memberid() const;
  void set_memberid(const std::string& value);
  void set_memberid(std::string&& value);
  void set_memberid(const char* value);
  void set_memberid(const char* value, size_t size);
  std::string* mutable_memberid();
  std::string* release_memberid();
  void set_allocated_memberid(std::string* memberid);

  // string InvestorType = 20;
  void clear_investortype();
  static const int kInvestorTypeFieldNumber = 20;
  const std::string& investortype() const;
  void set_investortype(const std::string& value);
  void set_investortype(std::string&& value);
  void set_investortype(const char* value);
  void set_investortype(const char* value, size_t size);
  std::string* mutable_investortype();
  std::string* release_investortype();
  void set_allocated_investortype(std::string* investortype);

  // string InvestorID = 21;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 21;
  const std::string& investorid() const;
  void set_investorid(const std::string& value);
  void set_investorid(std::string&& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  std::string* mutable_investorid();
  std::string* release_investorid();
  void set_allocated_investorid(std::string* investorid);

  // string InvestorName = 22;
  void clear_investorname();
  static const int kInvestorNameFieldNumber = 22;
  const std::string& investorname() const;
  void set_investorname(const std::string& value);
  void set_investorname(std::string&& value);
  void set_investorname(const char* value);
  void set_investorname(const char* value, size_t size);
  std::string* mutable_investorname();
  std::string* release_investorname();
  void set_allocated_investorname(std::string* investorname);

  // string TraderCode = 23;
  void clear_tradercode();
  static const int kTraderCodeFieldNumber = 23;
  const std::string& tradercode() const;
  void set_tradercode(const std::string& value);
  void set_tradercode(std::string&& value);
  void set_tradercode(const char* value);
  void set_tradercode(const char* value, size_t size);
  std::string* mutable_tradercode();
  std::string* release_tradercode();
  void set_allocated_tradercode(std::string* tradercode);

  // string Memo = 26;
  void clear_memo();
  static const int kMemoFieldNumber = 26;
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);

  // string SecondaryOrderID = 28;
  void clear_secondaryorderid();
  static const int kSecondaryOrderIDFieldNumber = 28;
  const std::string& secondaryorderid() const;
  void set_secondaryorderid(const std::string& value);
  void set_secondaryorderid(std::string&& value);
  void set_secondaryorderid(const char* value);
  void set_secondaryorderid(const char* value, size_t size);
  std::string* mutable_secondaryorderid();
  std::string* release_secondaryorderid();
  void set_allocated_secondaryorderid(std::string* secondaryorderid);

  // string TradeDate = 34;
  void clear_tradedate();
  static const int kTradeDateFieldNumber = 34;
  const std::string& tradedate() const;
  void set_tradedate(const std::string& value);
  void set_tradedate(std::string&& value);
  void set_tradedate(const char* value);
  void set_tradedate(const char* value, size_t size);
  std::string* mutable_tradedate();
  std::string* release_tradedate();
  void set_allocated_tradedate(std::string* tradedate);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 5;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int64 OrderIndex = 7;
  void clear_orderindex();
  static const int kOrderIndexFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 orderindex() const;
  void set_orderindex(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OrderPrice = 9;
  void clear_orderprice();
  static const int kOrderPriceFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 orderprice() const;
  void set_orderprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 OrderType = 8;
  void clear_ordertype();
  static const int kOrderTypeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 ordertype() const;
  void set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 OrderBSFlag = 11;
  void clear_orderbsflag();
  static const int kOrderBSFlagFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 orderbsflag() const;
  void set_orderbsflag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 OrderQty = 10;
  void clear_orderqty();
  static const int kOrderQtyFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 orderqty() const;
  void set_orderqty(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ChannelNo = 12;
  void clear_channelno();
  static const int kChannelNoFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 channelno() const;
  void set_channelno(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ExchangeDate = 13;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate() const;
  void set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 OrderNO = 15;
  void clear_orderno();
  static const int kOrderNOFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 orderno() const;
  void set_orderno(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ApplSeqNum = 16;
  void clear_applseqnum();
  static const int kApplSeqNumFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int64 applseqnum() const;
  void set_applseqnum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ExchangeTime = 14;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime() const;
  void set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 SettlPeriod = 24;
  void clear_settlperiod();
  static const int kSettlPeriodFieldNumber = 24;
  ::PROTOBUF_NAMESPACE_ID::int32 settlperiod() const;
  void set_settlperiod(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 SettlType = 25;
  void clear_settltype();
  static const int kSettlTypeFieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::int32 settltype() const;
  void set_settltype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 DataMultiplePowerOf10 = 27;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 BidTransType = 29;
  void clear_bidtranstype();
  static const int kBidTransTypeFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int32 bidtranstype() const;
  void set_bidtranstype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 BidExecInstType = 30;
  void clear_bidexecinsttype();
  static const int kBidExecInstTypeFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::int32 bidexecinsttype() const;
  void set_bidexecinsttype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 LowLimitPrice = 31;
  void clear_lowlimitprice();
  static const int kLowLimitPriceFieldNumber = 31;
  ::PROTOBUF_NAMESPACE_ID::int64 lowlimitprice() const;
  void set_lowlimitprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HighLimitPrice = 32;
  void clear_highlimitprice();
  static const int kHighLimitPriceFieldNumber = 32;
  ::PROTOBUF_NAMESPACE_ID::int64 highlimitprice() const;
  void set_highlimitprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MinQty = 33;
  void clear_minqty();
  static const int kMinQtyFieldNumber = 33;
  ::PROTOBUF_NAMESPACE_ID::int64 minqty() const;
  void set_minqty(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDOrder)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitystatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoteid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memberid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investortype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investorid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investorname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradercode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondaryorderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradedate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderindex_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 ordertype_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderbsflag_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderqty_;
  ::PROTOBUF_NAMESPACE_ID::int32 channelno_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderno_;
  ::PROTOBUF_NAMESPACE_ID::int64 applseqnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlperiod_;
  ::PROTOBUF_NAMESPACE_ID::int32 settltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  ::PROTOBUF_NAMESPACE_ID::int32 bidtranstype_;
  ::PROTOBUF_NAMESPACE_ID::int32 bidexecinsttype_;
  ::PROTOBUF_NAMESPACE_ID::int64 lowlimitprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 highlimitprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 minqty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDOrder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDOrder

// string HTSCSecurityID = 1;
inline void MDOrder::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void MDOrder::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
}
inline void MDOrder::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
}
inline void MDOrder::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
}
inline void MDOrder::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
}
inline std::string* MDOrder::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDOrder::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.MDDate)
  return mddate_;
}
inline void MDOrder::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.MDDate)
}

// int32 MDTime = 3;
inline void MDOrder::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.MDTime)
  return mdtime_;
}
inline void MDOrder::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDOrder::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.DataTimestamp)
  return datatimestamp_;
}
inline void MDOrder::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDOrder::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDOrder::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void MDOrder::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDOrder::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDOrder::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void MDOrder::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.securityType)
}

// int64 OrderIndex = 7;
inline void MDOrder::clear_orderindex() {
  orderindex_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::orderindex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderIndex)
  return orderindex_;
}
inline void MDOrder::set_orderindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderindex_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderIndex)
}

// int32 OrderType = 8;
inline void MDOrder::clear_ordertype() {
  ordertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::ordertype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderType)
  return ordertype_;
}
inline void MDOrder::set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ordertype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderType)
}

// int64 OrderPrice = 9;
inline void MDOrder::clear_orderprice() {
  orderprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::orderprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderPrice)
  return orderprice_;
}
inline void MDOrder::set_orderprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderPrice)
}

// int64 OrderQty = 10;
inline void MDOrder::clear_orderqty() {
  orderqty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::orderqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderQty)
  return orderqty_;
}
inline void MDOrder::set_orderqty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderQty)
}

// int32 OrderBSFlag = 11;
inline void MDOrder::clear_orderbsflag() {
  orderbsflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::orderbsflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderBSFlag)
  return orderbsflag_;
}
inline void MDOrder::set_orderbsflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderbsflag_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderBSFlag)
}

// int32 ChannelNo = 12;
inline void MDOrder::clear_channelno() {
  channelno_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.ChannelNo)
  return channelno_;
}
inline void MDOrder::set_channelno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channelno_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.ChannelNo)
}

// int32 ExchangeDate = 13;
inline void MDOrder::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.ExchangeDate)
  return exchangedate_;
}
inline void MDOrder::set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.ExchangeDate)
}

// int32 ExchangeTime = 14;
inline void MDOrder::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.ExchangeTime)
  return exchangetime_;
}
inline void MDOrder::set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.ExchangeTime)
}

// int64 OrderNO = 15;
inline void MDOrder::clear_orderno() {
  orderno_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::orderno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderNO)
  return orderno_;
}
inline void MDOrder::set_orderno(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderno_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderNO)
}

// int64 ApplSeqNum = 16;
inline void MDOrder::clear_applseqnum() {
  applseqnum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.ApplSeqNum)
  return applseqnum_;
}
inline void MDOrder::set_applseqnum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  applseqnum_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.ApplSeqNum)
}

// string SecurityStatus = 17;
inline void MDOrder::clear_securitystatus() {
  securitystatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::securitystatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
  return securitystatus_.GetNoArena();
}
inline void MDOrder::set_securitystatus(const std::string& value) {
  
  securitystatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
}
inline void MDOrder::set_securitystatus(std::string&& value) {
  
  securitystatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
}
inline void MDOrder::set_securitystatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  securitystatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
}
inline void MDOrder::set_securitystatus(const char* value, size_t size) {
  
  securitystatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
}
inline std::string* MDOrder::mutable_securitystatus() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
  return securitystatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_securitystatus() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
  
  return securitystatus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_securitystatus(std::string* securitystatus) {
  if (securitystatus != nullptr) {
    
  } else {
    
  }
  securitystatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securitystatus);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
}

// string QuoteID = 18;
inline void MDOrder::clear_quoteid() {
  quoteid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::quoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.QuoteID)
  return quoteid_.GetNoArena();
}
inline void MDOrder::set_quoteid(const std::string& value) {
  
  quoteid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.QuoteID)
}
inline void MDOrder::set_quoteid(std::string&& value) {
  
  quoteid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.QuoteID)
}
inline void MDOrder::set_quoteid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  quoteid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.QuoteID)
}
inline void MDOrder::set_quoteid(const char* value, size_t size) {
  
  quoteid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.QuoteID)
}
inline std::string* MDOrder::mutable_quoteid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.QuoteID)
  return quoteid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_quoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.QuoteID)
  
  return quoteid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_quoteid(std::string* quoteid) {
  if (quoteid != nullptr) {
    
  } else {
    
  }
  quoteid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quoteid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.QuoteID)
}

// string MemberID = 19;
inline void MDOrder::clear_memberid() {
  memberid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::memberid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.MemberID)
  return memberid_.GetNoArena();
}
inline void MDOrder::set_memberid(const std::string& value) {
  
  memberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.MemberID)
}
inline void MDOrder::set_memberid(std::string&& value) {
  
  memberid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.MemberID)
}
inline void MDOrder::set_memberid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.MemberID)
}
inline void MDOrder::set_memberid(const char* value, size_t size) {
  
  memberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.MemberID)
}
inline std::string* MDOrder::mutable_memberid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.MemberID)
  return memberid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_memberid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.MemberID)
  
  return memberid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_memberid(std::string* memberid) {
  if (memberid != nullptr) {
    
  } else {
    
  }
  memberid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memberid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.MemberID)
}

// string InvestorType = 20;
inline void MDOrder::clear_investortype() {
  investortype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::investortype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.InvestorType)
  return investortype_.GetNoArena();
}
inline void MDOrder::set_investortype(const std::string& value) {
  
  investortype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.InvestorType)
}
inline void MDOrder::set_investortype(std::string&& value) {
  
  investortype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.InvestorType)
}
inline void MDOrder::set_investortype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investortype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.InvestorType)
}
inline void MDOrder::set_investortype(const char* value, size_t size) {
  
  investortype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.InvestorType)
}
inline std::string* MDOrder::mutable_investortype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.InvestorType)
  return investortype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_investortype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.InvestorType)
  
  return investortype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_investortype(std::string* investortype) {
  if (investortype != nullptr) {
    
  } else {
    
  }
  investortype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investortype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.InvestorType)
}

// string InvestorID = 21;
inline void MDOrder::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::investorid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.InvestorID)
  return investorid_.GetNoArena();
}
inline void MDOrder::set_investorid(const std::string& value) {
  
  investorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.InvestorID)
}
inline void MDOrder::set_investorid(std::string&& value) {
  
  investorid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.InvestorID)
}
inline void MDOrder::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.InvestorID)
}
inline void MDOrder::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.InvestorID)
}
inline std::string* MDOrder::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.InvestorID)
  return investorid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_investorid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.InvestorID)
  
  return investorid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_investorid(std::string* investorid) {
  if (investorid != nullptr) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.InvestorID)
}

// string InvestorName = 22;
inline void MDOrder::clear_investorname() {
  investorname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::investorname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.InvestorName)
  return investorname_.GetNoArena();
}
inline void MDOrder::set_investorname(const std::string& value) {
  
  investorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.InvestorName)
}
inline void MDOrder::set_investorname(std::string&& value) {
  
  investorname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.InvestorName)
}
inline void MDOrder::set_investorname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.InvestorName)
}
inline void MDOrder::set_investorname(const char* value, size_t size) {
  
  investorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.InvestorName)
}
inline std::string* MDOrder::mutable_investorname() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.InvestorName)
  return investorname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_investorname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.InvestorName)
  
  return investorname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_investorname(std::string* investorname) {
  if (investorname != nullptr) {
    
  } else {
    
  }
  investorname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investorname);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.InvestorName)
}

// string TraderCode = 23;
inline void MDOrder::clear_tradercode() {
  tradercode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::tradercode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.TraderCode)
  return tradercode_.GetNoArena();
}
inline void MDOrder::set_tradercode(const std::string& value) {
  
  tradercode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.TraderCode)
}
inline void MDOrder::set_tradercode(std::string&& value) {
  
  tradercode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.TraderCode)
}
inline void MDOrder::set_tradercode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradercode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.TraderCode)
}
inline void MDOrder::set_tradercode(const char* value, size_t size) {
  
  tradercode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.TraderCode)
}
inline std::string* MDOrder::mutable_tradercode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.TraderCode)
  return tradercode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_tradercode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.TraderCode)
  
  return tradercode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_tradercode(std::string* tradercode) {
  if (tradercode != nullptr) {
    
  } else {
    
  }
  tradercode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradercode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.TraderCode)
}

// int32 SettlPeriod = 24;
inline void MDOrder::clear_settlperiod() {
  settlperiod_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::settlperiod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.SettlPeriod)
  return settlperiod_;
}
inline void MDOrder::set_settlperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlperiod_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.SettlPeriod)
}

// int32 SettlType = 25;
inline void MDOrder::clear_settltype() {
  settltype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::settltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.SettlType)
  return settltype_;
}
inline void MDOrder::set_settltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settltype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.SettlType)
}

// string Memo = 26;
inline void MDOrder::clear_memo() {
  memo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::memo() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.Memo)
  return memo_.GetNoArena();
}
inline void MDOrder::set_memo(const std::string& value) {
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.Memo)
}
inline void MDOrder::set_memo(std::string&& value) {
  
  memo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.Memo)
}
inline void MDOrder::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.Memo)
}
inline void MDOrder::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.Memo)
}
inline std::string* MDOrder::mutable_memo() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.Memo)
  return memo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_memo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.Memo)
  
  return memo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.Memo)
}

// int32 DataMultiplePowerOf10 = 27;
inline void MDOrder::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void MDOrder::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.DataMultiplePowerOf10)
}

// string SecondaryOrderID = 28;
inline void MDOrder::clear_secondaryorderid() {
  secondaryorderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::secondaryorderid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
  return secondaryorderid_.GetNoArena();
}
inline void MDOrder::set_secondaryorderid(const std::string& value) {
  
  secondaryorderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
}
inline void MDOrder::set_secondaryorderid(std::string&& value) {
  
  secondaryorderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
}
inline void MDOrder::set_secondaryorderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondaryorderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
}
inline void MDOrder::set_secondaryorderid(const char* value, size_t size) {
  
  secondaryorderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
}
inline std::string* MDOrder::mutable_secondaryorderid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
  return secondaryorderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_secondaryorderid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
  
  return secondaryorderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_secondaryorderid(std::string* secondaryorderid) {
  if (secondaryorderid != nullptr) {
    
  } else {
    
  }
  secondaryorderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondaryorderid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
}

// int32 BidTransType = 29;
inline void MDOrder::clear_bidtranstype() {
  bidtranstype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::bidtranstype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.BidTransType)
  return bidtranstype_;
}
inline void MDOrder::set_bidtranstype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bidtranstype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.BidTransType)
}

// int32 BidExecInstType = 30;
inline void MDOrder::clear_bidexecinsttype() {
  bidexecinsttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDOrder::bidexecinsttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.BidExecInstType)
  return bidexecinsttype_;
}
inline void MDOrder::set_bidexecinsttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bidexecinsttype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.BidExecInstType)
}

// int64 LowLimitPrice = 31;
inline void MDOrder::clear_lowlimitprice() {
  lowlimitprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::lowlimitprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.LowLimitPrice)
  return lowlimitprice_;
}
inline void MDOrder::set_lowlimitprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lowlimitprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.LowLimitPrice)
}

// int64 HighLimitPrice = 32;
inline void MDOrder::clear_highlimitprice() {
  highlimitprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::highlimitprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.HighLimitPrice)
  return highlimitprice_;
}
inline void MDOrder::set_highlimitprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  highlimitprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.HighLimitPrice)
}

// int64 MinQty = 33;
inline void MDOrder::clear_minqty() {
  minqty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDOrder::minqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.MinQty)
  return minqty_;
}
inline void MDOrder::set_minqty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.MinQty)
}

// string TradeDate = 34;
inline void MDOrder::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDOrder::tradedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.TradeDate)
  return tradedate_.GetNoArena();
}
inline void MDOrder::set_tradedate(const std::string& value) {
  
  tradedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.TradeDate)
}
inline void MDOrder::set_tradedate(std::string&& value) {
  
  tradedate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDOrder.TradeDate)
}
inline void MDOrder::set_tradedate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDOrder.TradeDate)
}
inline void MDOrder::set_tradedate(const char* value, size_t size) {
  
  tradedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDOrder.TradeDate)
}
inline std::string* MDOrder::mutable_tradedate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.TradeDate)
  return tradedate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDOrder::release_tradedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.TradeDate)
  
  return tradedate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDOrder::set_allocated_tradedate(std::string* tradedate) {
  if (tradedate != nullptr) {
    
  } else {
    
  }
  tradedate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.TradeDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDOrder_2eproto
