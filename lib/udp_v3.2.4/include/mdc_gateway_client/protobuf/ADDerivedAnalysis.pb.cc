// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADDerivedAnalysis.proto

#include "ADDerivedAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADAmv_ADDerivedAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADArBr_ADDerivedAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADBias_ADDerivedAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADBoll_ADDerivedAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADCr_ADDerivedAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADVmaMa_ADDerivedAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADVr_ADDerivedAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADWr_ADDerivedAnalysis_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADDerivedAnalysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADDerivedAnalysis> _instance;
} _ADDerivedAnalysis_default_instance_;
class ADAmvDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADAmv> _instance;
} _ADAmv_default_instance_;
class ADArBrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADArBr> _instance;
} _ADArBr_default_instance_;
class ADBiasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADBias> _instance;
} _ADBias_default_instance_;
class ADBollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADBoll> _instance;
} _ADBoll_default_instance_;
class ADCrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADCr> _instance;
} _ADCr_default_instance_;
class ADVmaMaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADVmaMa> _instance;
} _ADVmaMa_default_instance_;
class ADVrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADVr> _instance;
} _ADVr_default_instance_;
class ADWrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADWr> _instance;
} _ADWr_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_ADAmv_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADAmv_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADAmv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADAmv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADAmv_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADAmv_ADDerivedAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADArBr_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADArBr_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADArBr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADArBr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADArBr_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADArBr_ADDerivedAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADBias_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADBias_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADBias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADBias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADBias_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADBias_ADDerivedAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADBoll_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADBoll_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADBoll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADBoll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADBoll_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADBoll_ADDerivedAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADCr_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADCr_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADCr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADCr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADCr_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADCr_ADDerivedAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADDerivedAnalysis_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADDerivedAnalysis_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADDerivedAnalysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADDerivedAnalysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ADDerivedAnalysis_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_ADDerivedAnalysis_ADDerivedAnalysis_2eproto}, {
      &scc_info_ADAmv_ADDerivedAnalysis_2eproto.base,
      &scc_info_ADArBr_ADDerivedAnalysis_2eproto.base,
      &scc_info_ADBias_ADDerivedAnalysis_2eproto.base,
      &scc_info_ADBoll_ADDerivedAnalysis_2eproto.base,
      &scc_info_ADCr_ADDerivedAnalysis_2eproto.base,
      &scc_info_ADVmaMa_ADDerivedAnalysis_2eproto.base,
      &scc_info_ADVr_ADDerivedAnalysis_2eproto.base,
      &scc_info_ADWr_ADDerivedAnalysis_2eproto.base,}};

static void InitDefaultsscc_info_ADVmaMa_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADVmaMa_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADVmaMa();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADVmaMa::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADVmaMa_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADVmaMa_ADDerivedAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADVr_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADVr_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADVr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADVr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADVr_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADVr_ADDerivedAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADWr_ADDerivedAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADWr_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADWr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADWr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADWr_ADDerivedAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADWr_ADDerivedAnalysis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ADDerivedAnalysis_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ADDerivedAnalysis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ADDerivedAnalysis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ADDerivedAnalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, iopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, preiopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, openinterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, preopeninterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, settleprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, presettleprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, bbi_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, amv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, arbr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, bias_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, boll_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, cr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, vmama_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, vr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, wr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADDerivedAnalysis, datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADAmv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADAmv, nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADAmv, amv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADArBr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADArBr, nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADArBr, ar_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADArBr, br_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBias, nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBias, bias_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBias, closepx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, pvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, mid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, upper_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADBoll, lower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, cr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, p1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, p2_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADCr, ym_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, vma_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVmaMa, ma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, vr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, avs_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, bvs_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVr, cvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, nvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, wr_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, nhighpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADWr, nlowpx_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::ADDerivedAnalysis)},
  { 39, -1, sizeof(::com::htsc::mdc::insight::model::ADAmv)},
  { 46, -1, sizeof(::com::htsc::mdc::insight::model::ADArBr)},
  { 54, -1, sizeof(::com::htsc::mdc::insight::model::ADBias)},
  { 62, -1, sizeof(::com::htsc::mdc::insight::model::ADBoll)},
  { 72, -1, sizeof(::com::htsc::mdc::insight::model::ADCr)},
  { 82, -1, sizeof(::com::htsc::mdc::insight::model::ADVmaMa)},
  { 90, -1, sizeof(::com::htsc::mdc::insight::model::ADVr)},
  { 100, -1, sizeof(::com::htsc::mdc::insight::model::ADWr)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADDerivedAnalysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADAmv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADArBr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADBias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADBoll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADCr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADVmaMa_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADVr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADWr_default_instance_),
};

const char descriptor_table_protodef_ADDerivedAnalysis_2eproto[] =
  "\n\027ADDerivedAnalysis.proto\022\032com.htsc.mdc."
  "insight.model\032\023ESecurityType.proto\032\027ESec"
  "urityIDSource.proto\"\367\007\n\021ADDerivedAnalysi"
  "s\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001("
  "\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003"
  "\022\030\n\020TradingPhaseCode\030\005 \001(\t\022\?\n\020securityID"
  "Source\030\006 \001(\0162%.com.htsc.mdc.model.ESecur"
  "ityIDSource\0227\n\014securityType\030\007 \001(\0162!.com."
  "htsc.mdc.model.ESecurityType\022\021\n\tNumTrade"
  "s\030\010 \001(\003\022\030\n\020TotalVolumeTrade\030\t \001(\003\022\027\n\017Tot"
  "alValueTrade\030\n \001(\003\022\022\n\nPreClosePx\030\013 \001(\003\022\016"
  "\n\006LastPx\030\014 \001(\003\022\016\n\006OpenPx\030\r \001(\003\022\017\n\007CloseP"
  "x\030\016 \001(\003\022\016\n\006HighPx\030\017 \001(\003\022\r\n\005LowPx\030\020 \001(\003\022\014"
  "\n\004IOPV\030\021 \001(\003\022\017\n\007PreIOPV\030\022 \001(\003\022\024\n\014OpenInt"
  "erest\030\023 \001(\003\022\027\n\017PreOpenInterest\030\024 \001(\003\022\023\n\013"
  "SettlePrice\030\025 \001(\003\022\026\n\016PreSettlePrice\030\026 \001("
  "\003\022\024\n\014ExchangeDate\030\027 \001(\005\022\024\n\014ExchangeTime\030"
  "\030 \001(\005\022\013\n\003BBI\030( \001(\003\022.\n\003Amv\030) \003(\0132!.com.ht"
  "sc.mdc.insight.model.ADAmv\0220\n\004ArBr\030* \003(\013"
  "2\".com.htsc.mdc.insight.model.ADArBr\0220\n\004"
  "Bias\030+ \003(\0132\".com.htsc.mdc.insight.model."
  "ADBias\0220\n\004Boll\030, \003(\0132\".com.htsc.mdc.insi"
  "ght.model.ADBoll\022,\n\002Cr\030- \003(\0132 .com.htsc."
  "mdc.insight.model.ADCr\0222\n\005VmaMa\030. \003(\0132#."
  "com.htsc.mdc.insight.model.ADVmaMa\022,\n\002Vr"
  "\030/ \003(\0132 .com.htsc.mdc.insight.model.ADVr"
  "\022,\n\002Wr\0300 \003(\0132 .com.htsc.mdc.insight.mode"
  "l.ADWr\022\035\n\025DataMultiplePowerOf10\0301 \001(\005\"$\n"
  "\005ADAmv\022\016\n\006NValue\030\001 \001(\005\022\013\n\003Amv\030\002 \001(\003\"0\n\006A"
  "DArBr\022\016\n\006NValue\030\001 \001(\005\022\n\n\002Ar\030\002 \001(\003\022\n\n\002Br\030"
  "\003 \001(\003\"7\n\006ADBias\022\016\n\006NValue\030\001 \001(\005\022\014\n\004Bias\030"
  "\002 \001(\003\022\017\n\007ClosePx\030\003 \001(\003\"S\n\006ADBoll\022\016\n\006NVal"
  "ue\030\001 \001(\005\022\016\n\006PValue\030\002 \001(\005\022\013\n\003Mid\030\003 \001(\003\022\r\n"
  "\005Upper\030\004 \001(\003\022\r\n\005Lower\030\005 \001(\003\"F\n\004ADCr\022\016\n\006N"
  "Value\030\001 \001(\005\022\n\n\002Cr\030\002 \001(\003\022\n\n\002P1\030\003 \001(\003\022\n\n\002P"
  "2\030\004 \001(\003\022\n\n\002YM\030\005 \001(\003\"2\n\007ADVmaMa\022\016\n\006NValue"
  "\030\001 \001(\003\022\013\n\003Vma\030\002 \001(\003\022\n\n\002Ma\030\003 \001(\003\"I\n\004ADVr\022"
  "\016\n\006NValue\030\001 \001(\005\022\n\n\002VR\030\002 \001(\003\022\013\n\003AVS\030\003 \001(\003"
  "\022\013\n\003BVS\030\004 \001(\003\022\013\n\003CVS\030\005 \001(\003\"T\n\004ADWr\022\016\n\006NV"
  "alue\030\001 \001(\005\022\n\n\002Wr\030\002 \001(\003\022\017\n\007ClosePx\030\003 \001(\003\022"
  "\017\n\007NHighPx\030\004 \001(\003\022\016\n\006NLowPx\030\005 \001(\003B:\n\032com."
  "htsc.mdc.insight.modelB\027ADDerivedAnalysi"
  "sProtosH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ADDerivedAnalysis_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ADDerivedAnalysis_2eproto_sccs[9] = {
  &scc_info_ADAmv_ADDerivedAnalysis_2eproto.base,
  &scc_info_ADArBr_ADDerivedAnalysis_2eproto.base,
  &scc_info_ADBias_ADDerivedAnalysis_2eproto.base,
  &scc_info_ADBoll_ADDerivedAnalysis_2eproto.base,
  &scc_info_ADCr_ADDerivedAnalysis_2eproto.base,
  &scc_info_ADDerivedAnalysis_ADDerivedAnalysis_2eproto.base,
  &scc_info_ADVmaMa_ADDerivedAnalysis_2eproto.base,
  &scc_info_ADVr_ADDerivedAnalysis_2eproto.base,
  &scc_info_ADWr_ADDerivedAnalysis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ADDerivedAnalysis_2eproto_once;
static bool descriptor_table_ADDerivedAnalysis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADDerivedAnalysis_2eproto = {
  &descriptor_table_ADDerivedAnalysis_2eproto_initialized, descriptor_table_protodef_ADDerivedAnalysis_2eproto, "ADDerivedAnalysis.proto", 1700,
  &descriptor_table_ADDerivedAnalysis_2eproto_once, descriptor_table_ADDerivedAnalysis_2eproto_sccs, descriptor_table_ADDerivedAnalysis_2eproto_deps, 9, 2,
  schemas, file_default_instances, TableStruct_ADDerivedAnalysis_2eproto::offsets,
  file_level_metadata_ADDerivedAnalysis_2eproto, 9, file_level_enum_descriptors_ADDerivedAnalysis_2eproto, file_level_service_descriptors_ADDerivedAnalysis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ADDerivedAnalysis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ADDerivedAnalysis_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void ADDerivedAnalysis::InitAsDefaultInstance() {
}
class ADDerivedAnalysis::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADDerivedAnalysis::kHTSCSecurityIDFieldNumber;
const int ADDerivedAnalysis::kMDDateFieldNumber;
const int ADDerivedAnalysis::kMDTimeFieldNumber;
const int ADDerivedAnalysis::kDataTimestampFieldNumber;
const int ADDerivedAnalysis::kTradingPhaseCodeFieldNumber;
const int ADDerivedAnalysis::kSecurityIDSourceFieldNumber;
const int ADDerivedAnalysis::kSecurityTypeFieldNumber;
const int ADDerivedAnalysis::kNumTradesFieldNumber;
const int ADDerivedAnalysis::kTotalVolumeTradeFieldNumber;
const int ADDerivedAnalysis::kTotalValueTradeFieldNumber;
const int ADDerivedAnalysis::kPreClosePxFieldNumber;
const int ADDerivedAnalysis::kLastPxFieldNumber;
const int ADDerivedAnalysis::kOpenPxFieldNumber;
const int ADDerivedAnalysis::kClosePxFieldNumber;
const int ADDerivedAnalysis::kHighPxFieldNumber;
const int ADDerivedAnalysis::kLowPxFieldNumber;
const int ADDerivedAnalysis::kIOPVFieldNumber;
const int ADDerivedAnalysis::kPreIOPVFieldNumber;
const int ADDerivedAnalysis::kOpenInterestFieldNumber;
const int ADDerivedAnalysis::kPreOpenInterestFieldNumber;
const int ADDerivedAnalysis::kSettlePriceFieldNumber;
const int ADDerivedAnalysis::kPreSettlePriceFieldNumber;
const int ADDerivedAnalysis::kExchangeDateFieldNumber;
const int ADDerivedAnalysis::kExchangeTimeFieldNumber;
const int ADDerivedAnalysis::kBBIFieldNumber;
const int ADDerivedAnalysis::kAmvFieldNumber;
const int ADDerivedAnalysis::kArBrFieldNumber;
const int ADDerivedAnalysis::kBiasFieldNumber;
const int ADDerivedAnalysis::kBollFieldNumber;
const int ADDerivedAnalysis::kCrFieldNumber;
const int ADDerivedAnalysis::kVmaMaFieldNumber;
const int ADDerivedAnalysis::kVrFieldNumber;
const int ADDerivedAnalysis::kWrFieldNumber;
const int ADDerivedAnalysis::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADDerivedAnalysis::ADDerivedAnalysis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADDerivedAnalysis)
}
ADDerivedAnalysis::ADDerivedAnalysis(const ADDerivedAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      amv_(from.amv_),
      arbr_(from.arbr_),
      bias_(from.bias_),
      boll_(from.boll_),
      cr_(from.cr_),
      vmama_(from.vmama_),
      vr_(from.vr_),
      wr_(from.wr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  tradingphasecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tradingphasecode().size() > 0) {
    tradingphasecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  ::memcpy(&mddate_, &from.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&bbi_) -
    reinterpret_cast<char*>(&mddate_)) + sizeof(bbi_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADDerivedAnalysis)
}

void ADDerivedAnalysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADDerivedAnalysis_ADDerivedAnalysis_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bbi_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(bbi_));
}

ADDerivedAnalysis::~ADDerivedAnalysis() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  SharedDtor();
}

void ADDerivedAnalysis::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ADDerivedAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADDerivedAnalysis& ADDerivedAnalysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADDerivedAnalysis_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADDerivedAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amv_.Clear();
  arbr_.Clear();
  bias_.Clear();
  boll_.Clear();
  cr_.Clear();
  vmama_.Clear();
  vr_.Clear();
  wr_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bbi_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(bbi_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADDerivedAnalysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.ADDerivedAnalysis.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tradingphasecode(), ptr, ctx, "com.htsc.mdc.insight.model.ADDerivedAnalysis.TradingPhaseCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else goto handle_unusual;
        continue;
      // int64 NumTrades = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PreClosePx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LastPx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OpenPx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ClosePx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 HighPx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LowPx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 IOPV = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          iopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PreIOPV = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          preiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 OpenInterest = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PreOpenInterest = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          preopeninterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 SettlePrice = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          settleprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PreSettlePrice = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          presettleprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExchangeDate = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExchangeTime = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 BBI = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bbi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADAmv Amv = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_amv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 714);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADArBr ArBr = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_arbr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 722);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADBias Bias = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_bias(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 730);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADBoll Boll = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_boll(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 738);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADCr Cr = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_cr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 746);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADVmaMa VmaMa = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_vmama(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 754);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADVr Vr = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_vr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 762);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADWr Wr = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_wr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 898);
        } else goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADDerivedAnalysis::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADDerivedAnalysis.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 DataTimestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradingPhaseCode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingphasecode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADDerivedAnalysis.TradingPhaseCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 NumTrades = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TotalVolumeTrade = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvolumetrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TotalValueTrade = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvaluetrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PreClosePx = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclosepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LastPx = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OpenPx = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &openpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ClosePx = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &closepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 HighPx = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &highpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LowPx = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 IOPV = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PreIOPV = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &preiopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 OpenInterest = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PreOpenInterest = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &preopeninterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SettlePrice = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &settleprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PreSettlePrice = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &presettleprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ExchangeDate = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ExchangeTime = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BBI = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bbi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADAmv Amv = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_amv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADArBr ArBr = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_arbr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADBias Bias = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADBoll Boll = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_boll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADCr Cr = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADVmaMa VmaMa = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vmama()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADVr Vr = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADWr Wr = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataMultiplePowerOf10 = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (392 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADDerivedAnalysis::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADDerivedAnalysis.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADDerivedAnalysis.TradingPhaseCode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tradingphasecode(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->securityidsource(), output);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->securitytype(), output);
  }

  // int64 NumTrades = 8;
  if (this->numtrades() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->numtrades(), output);
  }

  // int64 TotalVolumeTrade = 9;
  if (this->totalvolumetrade() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->totalvolumetrade(), output);
  }

  // int64 TotalValueTrade = 10;
  if (this->totalvaluetrade() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->totalvaluetrade(), output);
  }

  // int64 PreClosePx = 11;
  if (this->preclosepx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->preclosepx(), output);
  }

  // int64 LastPx = 12;
  if (this->lastpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->lastpx(), output);
  }

  // int64 OpenPx = 13;
  if (this->openpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->openpx(), output);
  }

  // int64 ClosePx = 14;
  if (this->closepx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->closepx(), output);
  }

  // int64 HighPx = 15;
  if (this->highpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->highpx(), output);
  }

  // int64 LowPx = 16;
  if (this->lowpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->lowpx(), output);
  }

  // int64 IOPV = 17;
  if (this->iopv() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->iopv(), output);
  }

  // int64 PreIOPV = 18;
  if (this->preiopv() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->preiopv(), output);
  }

  // int64 OpenInterest = 19;
  if (this->openinterest() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->openinterest(), output);
  }

  // int64 PreOpenInterest = 20;
  if (this->preopeninterest() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->preopeninterest(), output);
  }

  // int64 SettlePrice = 21;
  if (this->settleprice() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->settleprice(), output);
  }

  // int64 PreSettlePrice = 22;
  if (this->presettleprice() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->presettleprice(), output);
  }

  // int32 ExchangeDate = 23;
  if (this->exchangedate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(23, this->exchangedate(), output);
  }

  // int32 ExchangeTime = 24;
  if (this->exchangetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->exchangetime(), output);
  }

  // int64 BBI = 40;
  if (this->bbi() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(40, this->bbi(), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADAmv Amv = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->amv_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      41,
      this->amv(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADArBr ArBr = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arbr_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      42,
      this->arbr(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADBias Bias = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bias_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      43,
      this->bias(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADBoll Boll = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boll_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      44,
      this->boll(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADCr Cr = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      45,
      this->cr(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADVmaMa VmaMa = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vmama_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      46,
      this->vmama(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADVr Vr = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vr_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      47,
      this->vr(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADWr Wr = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wr_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      48,
      this->wr(static_cast<int>(i)),
      output);
  }

  // int32 DataMultiplePowerOf10 = 49;
  if (this->datamultiplepowerof10() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(49, this->datamultiplepowerof10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADDerivedAnalysis)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADDerivedAnalysis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADDerivedAnalysis.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), static_cast<int>(this->tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADDerivedAnalysis.TradingPhaseCode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->securitytype(), target);
  }

  // int64 NumTrades = 8;
  if (this->numtrades() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->numtrades(), target);
  }

  // int64 TotalVolumeTrade = 9;
  if (this->totalvolumetrade() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 10;
  if (this->totalvaluetrade() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->totalvaluetrade(), target);
  }

  // int64 PreClosePx = 11;
  if (this->preclosepx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->preclosepx(), target);
  }

  // int64 LastPx = 12;
  if (this->lastpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->lastpx(), target);
  }

  // int64 OpenPx = 13;
  if (this->openpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->openpx(), target);
  }

  // int64 ClosePx = 14;
  if (this->closepx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->closepx(), target);
  }

  // int64 HighPx = 15;
  if (this->highpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->highpx(), target);
  }

  // int64 LowPx = 16;
  if (this->lowpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->lowpx(), target);
  }

  // int64 IOPV = 17;
  if (this->iopv() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->iopv(), target);
  }

  // int64 PreIOPV = 18;
  if (this->preiopv() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->preiopv(), target);
  }

  // int64 OpenInterest = 19;
  if (this->openinterest() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->openinterest(), target);
  }

  // int64 PreOpenInterest = 20;
  if (this->preopeninterest() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->preopeninterest(), target);
  }

  // int64 SettlePrice = 21;
  if (this->settleprice() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->settleprice(), target);
  }

  // int64 PreSettlePrice = 22;
  if (this->presettleprice() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->presettleprice(), target);
  }

  // int32 ExchangeDate = 23;
  if (this->exchangedate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->exchangedate(), target);
  }

  // int32 ExchangeTime = 24;
  if (this->exchangetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->exchangetime(), target);
  }

  // int64 BBI = 40;
  if (this->bbi() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(40, this->bbi(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADAmv Amv = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->amv_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->amv(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADArBr ArBr = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arbr_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->arbr(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADBias Bias = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bias_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, this->bias(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADBoll Boll = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boll_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        44, this->boll(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADCr Cr = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        45, this->cr(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADVmaMa VmaMa = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vmama_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        46, this->vmama(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADVr Vr = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vr_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        47, this->vr(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADWr Wr = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wr_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48, this->wr(static_cast<int>(i)), target);
  }

  // int32 DataMultiplePowerOf10 = 49;
  if (this->datamultiplepowerof10() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->datamultiplepowerof10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  return target;
}

size_t ADDerivedAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADAmv Amv = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->amv_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->amv(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADArBr ArBr = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->arbr_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->arbr(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADBias Bias = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->bias_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bias(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADBoll Boll = 44;
  {
    unsigned int count = static_cast<unsigned int>(this->boll_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->boll(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADCr Cr = 45;
  {
    unsigned int count = static_cast<unsigned int>(this->cr_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cr(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADVmaMa VmaMa = 46;
  {
    unsigned int count = static_cast<unsigned int>(this->vmama_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vmama(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADVr Vr = 47;
  {
    unsigned int count = static_cast<unsigned int>(this->vr_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vr(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADWr Wr = 48;
  {
    unsigned int count = static_cast<unsigned int>(this->wr_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wr(static_cast<int>(i)));
    }
  }

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tradingphasecode());
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // int64 NumTrades = 8;
  if (this->numtrades() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->numtrades());
  }

  // int64 TotalVolumeTrade = 9;
  if (this->totalvolumetrade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalvolumetrade());
  }

  // int64 TotalValueTrade = 10;
  if (this->totalvaluetrade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalvaluetrade());
  }

  // int64 PreClosePx = 11;
  if (this->preclosepx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->preclosepx());
  }

  // int64 LastPx = 12;
  if (this->lastpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lastpx());
  }

  // int64 OpenPx = 13;
  if (this->openpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->openpx());
  }

  // int64 ClosePx = 14;
  if (this->closepx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->closepx());
  }

  // int64 HighPx = 15;
  if (this->highpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->highpx());
  }

  // int64 LowPx = 16;
  if (this->lowpx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lowpx());
  }

  // int64 IOPV = 17;
  if (this->iopv() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->iopv());
  }

  // int64 PreIOPV = 18;
  if (this->preiopv() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->preiopv());
  }

  // int64 OpenInterest = 19;
  if (this->openinterest() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->openinterest());
  }

  // int64 PreOpenInterest = 20;
  if (this->preopeninterest() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->preopeninterest());
  }

  // int64 SettlePrice = 21;
  if (this->settleprice() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->settleprice());
  }

  // int64 PreSettlePrice = 22;
  if (this->presettleprice() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->presettleprice());
  }

  // int32 ExchangeDate = 23;
  if (this->exchangedate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // int32 ExchangeTime = 24;
  if (this->exchangetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // int32 DataMultiplePowerOf10 = 49;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  // int64 BBI = 40;
  if (this->bbi() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bbi());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADDerivedAnalysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const ADDerivedAnalysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADDerivedAnalysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADDerivedAnalysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADDerivedAnalysis)
    MergeFrom(*source);
  }
}

void ADDerivedAnalysis::MergeFrom(const ADDerivedAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amv_.MergeFrom(from.amv_);
  arbr_.MergeFrom(from.arbr_);
  bias_.MergeFrom(from.bias_);
  boll_.MergeFrom(from.boll_);
  cr_.MergeFrom(from.cr_);
  vmama_.MergeFrom(from.vmama_);
  vr_.MergeFrom(from.vr_);
  wr_.MergeFrom(from.wr_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.tradingphasecode().size() > 0) {

    tradingphasecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.numtrades() != 0) {
    set_numtrades(from.numtrades());
  }
  if (from.totalvolumetrade() != 0) {
    set_totalvolumetrade(from.totalvolumetrade());
  }
  if (from.totalvaluetrade() != 0) {
    set_totalvaluetrade(from.totalvaluetrade());
  }
  if (from.preclosepx() != 0) {
    set_preclosepx(from.preclosepx());
  }
  if (from.lastpx() != 0) {
    set_lastpx(from.lastpx());
  }
  if (from.openpx() != 0) {
    set_openpx(from.openpx());
  }
  if (from.closepx() != 0) {
    set_closepx(from.closepx());
  }
  if (from.highpx() != 0) {
    set_highpx(from.highpx());
  }
  if (from.lowpx() != 0) {
    set_lowpx(from.lowpx());
  }
  if (from.iopv() != 0) {
    set_iopv(from.iopv());
  }
  if (from.preiopv() != 0) {
    set_preiopv(from.preiopv());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.preopeninterest() != 0) {
    set_preopeninterest(from.preopeninterest());
  }
  if (from.settleprice() != 0) {
    set_settleprice(from.settleprice());
  }
  if (from.presettleprice() != 0) {
    set_presettleprice(from.presettleprice());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
  if (from.bbi() != 0) {
    set_bbi(from.bbi());
  }
}

void ADDerivedAnalysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADDerivedAnalysis::CopyFrom(const ADDerivedAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADDerivedAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADDerivedAnalysis::IsInitialized() const {
  return true;
}

void ADDerivedAnalysis::Swap(ADDerivedAnalysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADDerivedAnalysis::InternalSwap(ADDerivedAnalysis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&amv_)->InternalSwap(CastToBase(&other->amv_));
  CastToBase(&arbr_)->InternalSwap(CastToBase(&other->arbr_));
  CastToBase(&bias_)->InternalSwap(CastToBase(&other->bias_));
  CastToBase(&boll_)->InternalSwap(CastToBase(&other->boll_));
  CastToBase(&cr_)->InternalSwap(CastToBase(&other->cr_));
  CastToBase(&vmama_)->InternalSwap(CastToBase(&other->vmama_));
  CastToBase(&vr_)->InternalSwap(CastToBase(&other->vr_));
  CastToBase(&wr_)->InternalSwap(CastToBase(&other->wr_));
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradingphasecode_.Swap(&other->tradingphasecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mddate_, other->mddate_);
  swap(mdtime_, other->mdtime_);
  swap(datatimestamp_, other->datatimestamp_);
  swap(securityidsource_, other->securityidsource_);
  swap(securitytype_, other->securitytype_);
  swap(numtrades_, other->numtrades_);
  swap(totalvolumetrade_, other->totalvolumetrade_);
  swap(totalvaluetrade_, other->totalvaluetrade_);
  swap(preclosepx_, other->preclosepx_);
  swap(lastpx_, other->lastpx_);
  swap(openpx_, other->openpx_);
  swap(closepx_, other->closepx_);
  swap(highpx_, other->highpx_);
  swap(lowpx_, other->lowpx_);
  swap(iopv_, other->iopv_);
  swap(preiopv_, other->preiopv_);
  swap(openinterest_, other->openinterest_);
  swap(preopeninterest_, other->preopeninterest_);
  swap(settleprice_, other->settleprice_);
  swap(presettleprice_, other->presettleprice_);
  swap(exchangedate_, other->exchangedate_);
  swap(exchangetime_, other->exchangetime_);
  swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
  swap(bbi_, other->bbi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADDerivedAnalysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADAmv::InitAsDefaultInstance() {
}
class ADAmv::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADAmv::kNValueFieldNumber;
const int ADAmv::kAmvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADAmv::ADAmv()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADAmv)
}
ADAmv::ADAmv(const ADAmv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&amv_, &from.amv_,
    static_cast<size_t>(reinterpret_cast<char*>(&nvalue_) -
    reinterpret_cast<char*>(&amv_)) + sizeof(nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADAmv)
}

void ADAmv::SharedCtor() {
  ::memset(&amv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&amv_)) + sizeof(nvalue_));
}

ADAmv::~ADAmv() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADAmv)
  SharedDtor();
}

void ADAmv::SharedDtor() {
}

void ADAmv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADAmv& ADAmv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADAmv_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADAmv::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADAmv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&amv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&amv_)) + sizeof(nvalue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADAmv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Amv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADAmv::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADAmv)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 NValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Amv = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &amv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADAmv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADAmv)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADAmv::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADAmv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nvalue(), output);
  }

  // int64 Amv = 2;
  if (this->amv() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->amv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADAmv)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADAmv::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADAmv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->nvalue(), target);
  }

  // int64 Amv = 2;
  if (this->amv() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->amv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADAmv)
  return target;
}

size_t ADAmv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADAmv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Amv = 2;
  if (this->amv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->amv());
  }

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADAmv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADAmv)
  GOOGLE_DCHECK_NE(&from, this);
  const ADAmv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADAmv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADAmv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADAmv)
    MergeFrom(*source);
  }
}

void ADAmv::MergeFrom(const ADAmv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADAmv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amv() != 0) {
    set_amv(from.amv());
  }
  if (from.nvalue() != 0) {
    set_nvalue(from.nvalue());
  }
}

void ADAmv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADAmv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADAmv::CopyFrom(const ADAmv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADAmv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADAmv::IsInitialized() const {
  return true;
}

void ADAmv::Swap(ADAmv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADAmv::InternalSwap(ADAmv* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amv_, other->amv_);
  swap(nvalue_, other->nvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADAmv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADArBr::InitAsDefaultInstance() {
}
class ADArBr::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADArBr::kNValueFieldNumber;
const int ADArBr::kArFieldNumber;
const int ADArBr::kBrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADArBr::ADArBr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADArBr)
}
ADArBr::ADArBr(const ADArBr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ar_, &from.ar_,
    static_cast<size_t>(reinterpret_cast<char*>(&nvalue_) -
    reinterpret_cast<char*>(&ar_)) + sizeof(nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADArBr)
}

void ADArBr::SharedCtor() {
  ::memset(&ar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&ar_)) + sizeof(nvalue_));
}

ADArBr::~ADArBr() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADArBr)
  SharedDtor();
}

void ADArBr::SharedDtor() {
}

void ADArBr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADArBr& ADArBr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADArBr_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADArBr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADArBr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&ar_)) + sizeof(nvalue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADArBr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Ar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Br = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          br_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADArBr::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADArBr)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 NValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Ar = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Br = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &br_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADArBr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADArBr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADArBr::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADArBr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nvalue(), output);
  }

  // int64 Ar = 2;
  if (this->ar() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->ar(), output);
  }

  // int64 Br = 3;
  if (this->br() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->br(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADArBr)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADArBr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADArBr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->nvalue(), target);
  }

  // int64 Ar = 2;
  if (this->ar() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->ar(), target);
  }

  // int64 Br = 3;
  if (this->br() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->br(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADArBr)
  return target;
}

size_t ADArBr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADArBr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Ar = 2;
  if (this->ar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ar());
  }

  // int64 Br = 3;
  if (this->br() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->br());
  }

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADArBr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADArBr)
  GOOGLE_DCHECK_NE(&from, this);
  const ADArBr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADArBr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADArBr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADArBr)
    MergeFrom(*source);
  }
}

void ADArBr::MergeFrom(const ADArBr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADArBr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ar() != 0) {
    set_ar(from.ar());
  }
  if (from.br() != 0) {
    set_br(from.br());
  }
  if (from.nvalue() != 0) {
    set_nvalue(from.nvalue());
  }
}

void ADArBr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADArBr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADArBr::CopyFrom(const ADArBr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADArBr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADArBr::IsInitialized() const {
  return true;
}

void ADArBr::Swap(ADArBr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADArBr::InternalSwap(ADArBr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ar_, other->ar_);
  swap(br_, other->br_);
  swap(nvalue_, other->nvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADArBr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADBias::InitAsDefaultInstance() {
}
class ADBias::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADBias::kNValueFieldNumber;
const int ADBias::kBiasFieldNumber;
const int ADBias::kClosePxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADBias::ADBias()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADBias)
}
ADBias::ADBias(const ADBias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bias_, &from.bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&nvalue_) -
    reinterpret_cast<char*>(&bias_)) + sizeof(nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADBias)
}

void ADBias::SharedCtor() {
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(nvalue_));
}

ADBias::~ADBias() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADBias)
  SharedDtor();
}

void ADBias::SharedDtor() {
}

void ADBias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADBias& ADBias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADBias_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADBias::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(nvalue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADBias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ClosePx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADBias::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADBias)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 NValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Bias = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ClosePx = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &closepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADBias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADBias)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADBias::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nvalue(), output);
  }

  // int64 Bias = 2;
  if (this->bias() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->bias(), output);
  }

  // int64 ClosePx = 3;
  if (this->closepx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->closepx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADBias)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADBias::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADBias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->nvalue(), target);
  }

  // int64 Bias = 2;
  if (this->bias() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->bias(), target);
  }

  // int64 ClosePx = 3;
  if (this->closepx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->closepx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADBias)
  return target;
}

size_t ADBias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADBias)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Bias = 2;
  if (this->bias() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bias());
  }

  // int64 ClosePx = 3;
  if (this->closepx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->closepx());
  }

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADBias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADBias)
  GOOGLE_DCHECK_NE(&from, this);
  const ADBias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADBias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADBias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADBias)
    MergeFrom(*source);
  }
}

void ADBias::MergeFrom(const ADBias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADBias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bias() != 0) {
    set_bias(from.bias());
  }
  if (from.closepx() != 0) {
    set_closepx(from.closepx());
  }
  if (from.nvalue() != 0) {
    set_nvalue(from.nvalue());
  }
}

void ADBias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADBias::CopyFrom(const ADBias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADBias::IsInitialized() const {
  return true;
}

void ADBias::Swap(ADBias* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADBias::InternalSwap(ADBias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bias_, other->bias_);
  swap(closepx_, other->closepx_);
  swap(nvalue_, other->nvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADBias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADBoll::InitAsDefaultInstance() {
}
class ADBoll::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADBoll::kNValueFieldNumber;
const int ADBoll::kPValueFieldNumber;
const int ADBoll::kMidFieldNumber;
const int ADBoll::kUpperFieldNumber;
const int ADBoll::kLowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADBoll::ADBoll()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADBoll)
}
ADBoll::ADBoll(const ADBoll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nvalue_, &from.nvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&lower_) -
    reinterpret_cast<char*>(&nvalue_)) + sizeof(lower_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADBoll)
}

void ADBoll::SharedCtor() {
  ::memset(&nvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_) -
      reinterpret_cast<char*>(&nvalue_)) + sizeof(lower_));
}

ADBoll::~ADBoll() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADBoll)
  SharedDtor();
}

void ADBoll::SharedDtor() {
}

void ADBoll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADBoll& ADBoll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADBoll_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADBoll::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADBoll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_) -
      reinterpret_cast<char*>(&nvalue_)) + sizeof(lower_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADBoll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Mid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Upper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Lower = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADBoll::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADBoll)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 NValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PValue = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Mid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Upper = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Lower = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADBoll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADBoll)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADBoll::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADBoll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nvalue(), output);
  }

  // int32 PValue = 2;
  if (this->pvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pvalue(), output);
  }

  // int64 Mid = 3;
  if (this->mid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->mid(), output);
  }

  // int64 Upper = 4;
  if (this->upper() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->upper(), output);
  }

  // int64 Lower = 5;
  if (this->lower() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->lower(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADBoll)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADBoll::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADBoll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->nvalue(), target);
  }

  // int32 PValue = 2;
  if (this->pvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->pvalue(), target);
  }

  // int64 Mid = 3;
  if (this->mid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->mid(), target);
  }

  // int64 Upper = 4;
  if (this->upper() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->upper(), target);
  }

  // int64 Lower = 5;
  if (this->lower() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->lower(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADBoll)
  return target;
}

size_t ADBoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADBoll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nvalue());
  }

  // int32 PValue = 2;
  if (this->pvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pvalue());
  }

  // int64 Mid = 3;
  if (this->mid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->mid());
  }

  // int64 Upper = 4;
  if (this->upper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->upper());
  }

  // int64 Lower = 5;
  if (this->lower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lower());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADBoll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADBoll)
  GOOGLE_DCHECK_NE(&from, this);
  const ADBoll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADBoll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADBoll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADBoll)
    MergeFrom(*source);
  }
}

void ADBoll::MergeFrom(const ADBoll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADBoll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nvalue() != 0) {
    set_nvalue(from.nvalue());
  }
  if (from.pvalue() != 0) {
    set_pvalue(from.pvalue());
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.upper() != 0) {
    set_upper(from.upper());
  }
  if (from.lower() != 0) {
    set_lower(from.lower());
  }
}

void ADBoll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADBoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADBoll::CopyFrom(const ADBoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADBoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADBoll::IsInitialized() const {
  return true;
}

void ADBoll::Swap(ADBoll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADBoll::InternalSwap(ADBoll* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(nvalue_, other->nvalue_);
  swap(pvalue_, other->pvalue_);
  swap(mid_, other->mid_);
  swap(upper_, other->upper_);
  swap(lower_, other->lower_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADBoll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADCr::InitAsDefaultInstance() {
}
class ADCr::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCr::kNValueFieldNumber;
const int ADCr::kCrFieldNumber;
const int ADCr::kP1FieldNumber;
const int ADCr::kP2FieldNumber;
const int ADCr::kYMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCr::ADCr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADCr)
}
ADCr::ADCr(const ADCr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cr_, &from.cr_,
    static_cast<size_t>(reinterpret_cast<char*>(&nvalue_) -
    reinterpret_cast<char*>(&cr_)) + sizeof(nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADCr)
}

void ADCr::SharedCtor() {
  ::memset(&cr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&cr_)) + sizeof(nvalue_));
}

ADCr::~ADCr() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADCr)
  SharedDtor();
}

void ADCr::SharedDtor() {
}

void ADCr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADCr& ADCr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADCr_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADCr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADCr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&cr_)) + sizeof(nvalue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADCr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Cr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 P1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          p1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 P2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          p2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 YM = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADCr::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADCr)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 NValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Cr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 P1 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &p1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 P2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &p2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 YM = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ym_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADCr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADCr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADCr::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADCr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nvalue(), output);
  }

  // int64 Cr = 2;
  if (this->cr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->cr(), output);
  }

  // int64 P1 = 3;
  if (this->p1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->p1(), output);
  }

  // int64 P2 = 4;
  if (this->p2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->p2(), output);
  }

  // int64 YM = 5;
  if (this->ym() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->ym(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADCr)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADCr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADCr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->nvalue(), target);
  }

  // int64 Cr = 2;
  if (this->cr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->cr(), target);
  }

  // int64 P1 = 3;
  if (this->p1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->p1(), target);
  }

  // int64 P2 = 4;
  if (this->p2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->p2(), target);
  }

  // int64 YM = 5;
  if (this->ym() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->ym(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADCr)
  return target;
}

size_t ADCr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADCr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Cr = 2;
  if (this->cr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->cr());
  }

  // int64 P1 = 3;
  if (this->p1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->p1());
  }

  // int64 P2 = 4;
  if (this->p2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->p2());
  }

  // int64 YM = 5;
  if (this->ym() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ym());
  }

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADCr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADCr)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADCr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADCr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADCr)
    MergeFrom(*source);
  }
}

void ADCr::MergeFrom(const ADCr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADCr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cr() != 0) {
    set_cr(from.cr());
  }
  if (from.p1() != 0) {
    set_p1(from.p1());
  }
  if (from.p2() != 0) {
    set_p2(from.p2());
  }
  if (from.ym() != 0) {
    set_ym(from.ym());
  }
  if (from.nvalue() != 0) {
    set_nvalue(from.nvalue());
  }
}

void ADCr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADCr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCr::CopyFrom(const ADCr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADCr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCr::IsInitialized() const {
  return true;
}

void ADCr::Swap(ADCr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCr::InternalSwap(ADCr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cr_, other->cr_);
  swap(p1_, other->p1_);
  swap(p2_, other->p2_);
  swap(ym_, other->ym_);
  swap(nvalue_, other->nvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADVmaMa::InitAsDefaultInstance() {
}
class ADVmaMa::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADVmaMa::kNValueFieldNumber;
const int ADVmaMa::kVmaFieldNumber;
const int ADVmaMa::kMaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADVmaMa::ADVmaMa()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADVmaMa)
}
ADVmaMa::ADVmaMa(const ADVmaMa& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nvalue_, &from.nvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&ma_) -
    reinterpret_cast<char*>(&nvalue_)) + sizeof(ma_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADVmaMa)
}

void ADVmaMa::SharedCtor() {
  ::memset(&nvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ma_) -
      reinterpret_cast<char*>(&nvalue_)) + sizeof(ma_));
}

ADVmaMa::~ADVmaMa() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADVmaMa)
  SharedDtor();
}

void ADVmaMa::SharedDtor() {
}

void ADVmaMa::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADVmaMa& ADVmaMa::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADVmaMa_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADVmaMa::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADVmaMa)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ma_) -
      reinterpret_cast<char*>(&nvalue_)) + sizeof(ma_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADVmaMa::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Vma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Ma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADVmaMa::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADVmaMa)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 NValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Vma = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &vma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Ma = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADVmaMa)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADVmaMa)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADVmaMa::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADVmaMa)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 NValue = 1;
  if (this->nvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->nvalue(), output);
  }

  // int64 Vma = 2;
  if (this->vma() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->vma(), output);
  }

  // int64 Ma = 3;
  if (this->ma() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->ma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADVmaMa)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADVmaMa::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADVmaMa)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 NValue = 1;
  if (this->nvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->nvalue(), target);
  }

  // int64 Vma = 2;
  if (this->vma() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->vma(), target);
  }

  // int64 Ma = 3;
  if (this->ma() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->ma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADVmaMa)
  return target;
}

size_t ADVmaMa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADVmaMa)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 NValue = 1;
  if (this->nvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nvalue());
  }

  // int64 Vma = 2;
  if (this->vma() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->vma());
  }

  // int64 Ma = 3;
  if (this->ma() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ma());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADVmaMa::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADVmaMa)
  GOOGLE_DCHECK_NE(&from, this);
  const ADVmaMa* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADVmaMa>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADVmaMa)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADVmaMa)
    MergeFrom(*source);
  }
}

void ADVmaMa::MergeFrom(const ADVmaMa& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADVmaMa)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nvalue() != 0) {
    set_nvalue(from.nvalue());
  }
  if (from.vma() != 0) {
    set_vma(from.vma());
  }
  if (from.ma() != 0) {
    set_ma(from.ma());
  }
}

void ADVmaMa::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADVmaMa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADVmaMa::CopyFrom(const ADVmaMa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADVmaMa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVmaMa::IsInitialized() const {
  return true;
}

void ADVmaMa::Swap(ADVmaMa* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADVmaMa::InternalSwap(ADVmaMa* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(nvalue_, other->nvalue_);
  swap(vma_, other->vma_);
  swap(ma_, other->ma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVmaMa::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADVr::InitAsDefaultInstance() {
}
class ADVr::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADVr::kNValueFieldNumber;
const int ADVr::kVRFieldNumber;
const int ADVr::kAVSFieldNumber;
const int ADVr::kBVSFieldNumber;
const int ADVr::kCVSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADVr::ADVr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADVr)
}
ADVr::ADVr(const ADVr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vr_, &from.vr_,
    static_cast<size_t>(reinterpret_cast<char*>(&nvalue_) -
    reinterpret_cast<char*>(&vr_)) + sizeof(nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADVr)
}

void ADVr::SharedCtor() {
  ::memset(&vr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&vr_)) + sizeof(nvalue_));
}

ADVr::~ADVr() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADVr)
  SharedDtor();
}

void ADVr::SharedDtor() {
}

void ADVr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADVr& ADVr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADVr_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADVr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADVr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&vr_)) + sizeof(nvalue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADVr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 VR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 AVS = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          avs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 BVS = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bvs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 CVS = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cvs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADVr::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADVr)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 NValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 VR = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &vr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 AVS = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &avs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BVS = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bvs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 CVS = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cvs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADVr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADVr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADVr::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADVr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nvalue(), output);
  }

  // int64 VR = 2;
  if (this->vr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->vr(), output);
  }

  // int64 AVS = 3;
  if (this->avs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->avs(), output);
  }

  // int64 BVS = 4;
  if (this->bvs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->bvs(), output);
  }

  // int64 CVS = 5;
  if (this->cvs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->cvs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADVr)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADVr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADVr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->nvalue(), target);
  }

  // int64 VR = 2;
  if (this->vr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->vr(), target);
  }

  // int64 AVS = 3;
  if (this->avs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->avs(), target);
  }

  // int64 BVS = 4;
  if (this->bvs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->bvs(), target);
  }

  // int64 CVS = 5;
  if (this->cvs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->cvs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADVr)
  return target;
}

size_t ADVr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADVr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 VR = 2;
  if (this->vr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->vr());
  }

  // int64 AVS = 3;
  if (this->avs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->avs());
  }

  // int64 BVS = 4;
  if (this->bvs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bvs());
  }

  // int64 CVS = 5;
  if (this->cvs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->cvs());
  }

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADVr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADVr)
  GOOGLE_DCHECK_NE(&from, this);
  const ADVr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADVr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADVr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADVr)
    MergeFrom(*source);
  }
}

void ADVr::MergeFrom(const ADVr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADVr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vr() != 0) {
    set_vr(from.vr());
  }
  if (from.avs() != 0) {
    set_avs(from.avs());
  }
  if (from.bvs() != 0) {
    set_bvs(from.bvs());
  }
  if (from.cvs() != 0) {
    set_cvs(from.cvs());
  }
  if (from.nvalue() != 0) {
    set_nvalue(from.nvalue());
  }
}

void ADVr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADVr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADVr::CopyFrom(const ADVr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADVr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVr::IsInitialized() const {
  return true;
}

void ADVr::Swap(ADVr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADVr::InternalSwap(ADVr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vr_, other->vr_);
  swap(avs_, other->avs_);
  swap(bvs_, other->bvs_);
  swap(cvs_, other->cvs_);
  swap(nvalue_, other->nvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADWr::InitAsDefaultInstance() {
}
class ADWr::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADWr::kNValueFieldNumber;
const int ADWr::kWrFieldNumber;
const int ADWr::kClosePxFieldNumber;
const int ADWr::kNHighPxFieldNumber;
const int ADWr::kNLowPxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADWr::ADWr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADWr)
}
ADWr::ADWr(const ADWr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wr_, &from.wr_,
    static_cast<size_t>(reinterpret_cast<char*>(&nvalue_) -
    reinterpret_cast<char*>(&wr_)) + sizeof(nvalue_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADWr)
}

void ADWr::SharedCtor() {
  ::memset(&wr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&wr_)) + sizeof(nvalue_));
}

ADWr::~ADWr() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADWr)
  SharedDtor();
}

void ADWr::SharedDtor() {
}

void ADWr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADWr& ADWr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADWr_ADDerivedAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADWr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADWr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nvalue_) -
      reinterpret_cast<char*>(&wr_)) + sizeof(nvalue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADWr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Wr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ClosePx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NHighPx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nhighpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NLowPx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nlowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADWr::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADWr)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 NValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Wr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ClosePx = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &closepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 NHighPx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nhighpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 NLowPx = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nlowpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADWr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADWr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADWr::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADWr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nvalue(), output);
  }

  // int64 Wr = 2;
  if (this->wr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->wr(), output);
  }

  // int64 ClosePx = 3;
  if (this->closepx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->closepx(), output);
  }

  // int64 NHighPx = 4;
  if (this->nhighpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->nhighpx(), output);
  }

  // int64 NLowPx = 5;
  if (this->nlowpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->nlowpx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADWr)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADWr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADWr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->nvalue(), target);
  }

  // int64 Wr = 2;
  if (this->wr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->wr(), target);
  }

  // int64 ClosePx = 3;
  if (this->closepx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->closepx(), target);
  }

  // int64 NHighPx = 4;
  if (this->nhighpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->nhighpx(), target);
  }

  // int64 NLowPx = 5;
  if (this->nlowpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->nlowpx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADWr)
  return target;
}

size_t ADWr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADWr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Wr = 2;
  if (this->wr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->wr());
  }

  // int64 ClosePx = 3;
  if (this->closepx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->closepx());
  }

  // int64 NHighPx = 4;
  if (this->nhighpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nhighpx());
  }

  // int64 NLowPx = 5;
  if (this->nlowpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nlowpx());
  }

  // int32 NValue = 1;
  if (this->nvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADWr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADWr)
  GOOGLE_DCHECK_NE(&from, this);
  const ADWr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADWr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADWr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADWr)
    MergeFrom(*source);
  }
}

void ADWr::MergeFrom(const ADWr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADWr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wr() != 0) {
    set_wr(from.wr());
  }
  if (from.closepx() != 0) {
    set_closepx(from.closepx());
  }
  if (from.nhighpx() != 0) {
    set_nhighpx(from.nhighpx());
  }
  if (from.nlowpx() != 0) {
    set_nlowpx(from.nlowpx());
  }
  if (from.nvalue() != 0) {
    set_nvalue(from.nvalue());
  }
}

void ADWr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADWr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADWr::CopyFrom(const ADWr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADWr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADWr::IsInitialized() const {
  return true;
}

void ADWr::Swap(ADWr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADWr::InternalSwap(ADWr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(wr_, other->wr_);
  swap(closepx_, other->closepx_);
  swap(nhighpx_, other->nhighpx_);
  swap(nlowpx_, other->nlowpx_);
  swap(nvalue_, other->nvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADWr::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADDerivedAnalysis* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADDerivedAnalysis >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADDerivedAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADAmv* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADAmv >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADAmv >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADArBr* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADArBr >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADArBr >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADBias* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADBias >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADBias >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADBoll* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADBoll >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADBoll >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADCr* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADCr >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADCr >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADVmaMa* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADVmaMa >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADVmaMa >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADVr* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADVr >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADVr >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADWr* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADWr >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADWr >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
