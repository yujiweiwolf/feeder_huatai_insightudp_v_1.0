// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MarketData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MarketData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "EMarketDataType.pb.h"
#include "MDStock.pb.h"
#include "MDBond.pb.h"
#include "MDFund.pb.h"
#include "MDOption.pb.h"
#include "MDIndex.pb.h"
#include "MDFuture.pb.h"
#include "MDTransaction.pb.h"
#include "MDOrder.pb.h"
#include "ADKLine.pb.h"
#include "ADTwap.pb.h"
#include "ADVwap.pb.h"
#include "MDBasicInfo.pb.h"
#include "MDSimpleTick.pb.h"
#include "ADUpsDownsAnalysis.pb.h"
#include "ADIndicatorsRanking.pb.h"
#include "DynamicPacket.pb.h"
#include "ADVolumeByPrice.pb.h"
#include "ADFundFlowAnalysis.pb.h"
#include "MDForex.pb.h"
#include "MDSpot.pb.h"
#include "MDRate.pb.h"
#include "ADOrderbookSnapshot.pb.h"
#include "ADOrderbookSnapshotWithTick.pb.h"
#include "MDQuote.pb.h"
#include "MDETFBasicInfo.pb.h"
#include "MDFIQuote.pb.h"
#include "ADChipDistribution.pb.h"
#include "MDWarrant.pb.h"
#include "MDSecurityLending.pb.h"
#include "ADNews.pb.h"
#include "ADStaringResult.pb.h"
#include "ADDerivedAnalysis.pb.h"
#include "MDQBQuote.pb.h"
#include "MDQBTransaction.pb.h"
#include "MDUSATransaction.pb.h"
#include "MDUSAOrder.pb.h"
#include "MDSLTransaction.pb.h"
#include "MDSLOrder.pb.h"
#include "MDHKGreyMarket.pb.h"
#include "MDSLIndicativeQuote.pb.h"
#include "MDSLStatistics.pb.h"
#include "MDUSAQuote.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MarketData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MarketData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MarketData_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MarketData;
class MarketDataDefaultTypeInternal;
extern MarketDataDefaultTypeInternal _MarketData_default_instance_;
class MarketDataList;
class MarketDataListDefaultTypeInternal;
extern MarketDataListDefaultTypeInternal _MarketDataList_default_instance_;
class MarketDataStream;
class MarketDataStreamDefaultTypeInternal;
extern MarketDataStreamDefaultTypeInternal _MarketDataStream_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MarketData* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketData>(Arena*);
template<> ::com::htsc::mdc::insight::model::MarketDataList* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketDataList>(Arena*);
template<> ::com::htsc::mdc::insight::model::MarketDataStream* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketDataStream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MarketData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MarketData) */ {
 public:
  MarketData();
  virtual ~MarketData();

  MarketData(const MarketData& from);
  MarketData(MarketData&& from) noexcept
    : MarketData() {
    *this = ::std::move(from);
  }

  inline MarketData& operator=(const MarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketData& operator=(MarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketData* internal_default_instance() {
    return reinterpret_cast<const MarketData*>(
               &_MarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MarketData* other);
  friend void swap(MarketData& a, MarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketData* New() const final {
    return CreateMaybeMessage<MarketData>(nullptr);
  }

  MarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketData& from);
  void MergeFrom(const MarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MarketData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketData_2eproto);
    return ::descriptor_table_MarketData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
  bool has_mdstock() const;
  void clear_mdstock();
  static const int kMdStockFieldNumber = 10;
  const ::com::htsc::mdc::insight::model::MDStock& mdstock() const;
  ::com::htsc::mdc::insight::model::MDStock* release_mdstock();
  ::com::htsc::mdc::insight::model::MDStock* mutable_mdstock();
  void set_allocated_mdstock(::com::htsc::mdc::insight::model::MDStock* mdstock);

  // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
  bool has_mdindex() const;
  void clear_mdindex();
  static const int kMdIndexFieldNumber = 11;
  const ::com::htsc::mdc::insight::model::MDIndex& mdindex() const;
  ::com::htsc::mdc::insight::model::MDIndex* release_mdindex();
  ::com::htsc::mdc::insight::model::MDIndex* mutable_mdindex();
  void set_allocated_mdindex(::com::htsc::mdc::insight::model::MDIndex* mdindex);

  // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
  bool has_mdbond() const;
  void clear_mdbond();
  static const int kMdBondFieldNumber = 12;
  const ::com::htsc::mdc::insight::model::MDBond& mdbond() const;
  ::com::htsc::mdc::insight::model::MDBond* release_mdbond();
  ::com::htsc::mdc::insight::model::MDBond* mutable_mdbond();
  void set_allocated_mdbond(::com::htsc::mdc::insight::model::MDBond* mdbond);

  // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
  bool has_mdfund() const;
  void clear_mdfund();
  static const int kMdFundFieldNumber = 13;
  const ::com::htsc::mdc::insight::model::MDFund& mdfund() const;
  ::com::htsc::mdc::insight::model::MDFund* release_mdfund();
  ::com::htsc::mdc::insight::model::MDFund* mutable_mdfund();
  void set_allocated_mdfund(::com::htsc::mdc::insight::model::MDFund* mdfund);

  // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
  bool has_mdoption() const;
  void clear_mdoption();
  static const int kMdOptionFieldNumber = 14;
  const ::com::htsc::mdc::insight::model::MDOption& mdoption() const;
  ::com::htsc::mdc::insight::model::MDOption* release_mdoption();
  ::com::htsc::mdc::insight::model::MDOption* mutable_mdoption();
  void set_allocated_mdoption(::com::htsc::mdc::insight::model::MDOption* mdoption);

  // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
  bool has_mdfuture() const;
  void clear_mdfuture();
  static const int kMdFutureFieldNumber = 15;
  const ::com::htsc::mdc::insight::model::MDFuture& mdfuture() const;
  ::com::htsc::mdc::insight::model::MDFuture* release_mdfuture();
  ::com::htsc::mdc::insight::model::MDFuture* mutable_mdfuture();
  void set_allocated_mdfuture(::com::htsc::mdc::insight::model::MDFuture* mdfuture);

  // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
  bool has_mdtransaction() const;
  void clear_mdtransaction();
  static const int kMdTransactionFieldNumber = 16;
  const ::com::htsc::mdc::insight::model::MDTransaction& mdtransaction() const;
  ::com::htsc::mdc::insight::model::MDTransaction* release_mdtransaction();
  ::com::htsc::mdc::insight::model::MDTransaction* mutable_mdtransaction();
  void set_allocated_mdtransaction(::com::htsc::mdc::insight::model::MDTransaction* mdtransaction);

  // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
  bool has_mdorder() const;
  void clear_mdorder();
  static const int kMdOrderFieldNumber = 17;
  const ::com::htsc::mdc::insight::model::MDOrder& mdorder() const;
  ::com::htsc::mdc::insight::model::MDOrder* release_mdorder();
  ::com::htsc::mdc::insight::model::MDOrder* mutable_mdorder();
  void set_allocated_mdorder(::com::htsc::mdc::insight::model::MDOrder* mdorder);

  // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
  bool has_mdkline() const;
  void clear_mdkline();
  static const int kMdKLineFieldNumber = 18;
  const ::com::htsc::mdc::insight::model::ADKLine& mdkline() const;
  ::com::htsc::mdc::insight::model::ADKLine* release_mdkline();
  ::com::htsc::mdc::insight::model::ADKLine* mutable_mdkline();
  void set_allocated_mdkline(::com::htsc::mdc::insight::model::ADKLine* mdkline);

  // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
  bool has_mdtwap() const;
  void clear_mdtwap();
  static const int kMdTwapFieldNumber = 19;
  const ::com::htsc::mdc::insight::model::ADTwap& mdtwap() const;
  ::com::htsc::mdc::insight::model::ADTwap* release_mdtwap();
  ::com::htsc::mdc::insight::model::ADTwap* mutable_mdtwap();
  void set_allocated_mdtwap(::com::htsc::mdc::insight::model::ADTwap* mdtwap);

  // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
  bool has_mdvwap() const;
  void clear_mdvwap();
  static const int kMdVwapFieldNumber = 20;
  const ::com::htsc::mdc::insight::model::ADVwap& mdvwap() const;
  ::com::htsc::mdc::insight::model::ADVwap* release_mdvwap();
  ::com::htsc::mdc::insight::model::ADVwap* mutable_mdvwap();
  void set_allocated_mdvwap(::com::htsc::mdc::insight::model::ADVwap* mdvwap);

  // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
  bool has_mdconstant() const;
  void clear_mdconstant();
  static const int kMdConstantFieldNumber = 21;
  const ::com::htsc::mdc::insight::model::MDBasicInfo& mdconstant() const;
  ::com::htsc::mdc::insight::model::MDBasicInfo* release_mdconstant();
  ::com::htsc::mdc::insight::model::MDBasicInfo* mutable_mdconstant();
  void set_allocated_mdconstant(::com::htsc::mdc::insight::model::MDBasicInfo* mdconstant);

  // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
  bool has_mdsimpletick() const;
  void clear_mdsimpletick();
  static const int kMdSimpleTickFieldNumber = 22;
  const ::com::htsc::mdc::insight::model::MDSimpleTick& mdsimpletick() const;
  ::com::htsc::mdc::insight::model::MDSimpleTick* release_mdsimpletick();
  ::com::htsc::mdc::insight::model::MDSimpleTick* mutable_mdsimpletick();
  void set_allocated_mdsimpletick(::com::htsc::mdc::insight::model::MDSimpleTick* mdsimpletick);

  // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
  bool has_mdupsdownsanalysis() const;
  void clear_mdupsdownsanalysis();
  static const int kMdUpsDownsAnalysisFieldNumber = 23;
  const ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis& mdupsdownsanalysis() const;
  ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* release_mdupsdownsanalysis();
  ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* mutable_mdupsdownsanalysis();
  void set_allocated_mdupsdownsanalysis(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* mdupsdownsanalysis);

  // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
  bool has_mdindicatorsranking() const;
  void clear_mdindicatorsranking();
  static const int kMdIndicatorsRankingFieldNumber = 24;
  const ::com::htsc::mdc::insight::model::ADIndicatorsRanking& mdindicatorsranking() const;
  ::com::htsc::mdc::insight::model::ADIndicatorsRanking* release_mdindicatorsranking();
  ::com::htsc::mdc::insight::model::ADIndicatorsRanking* mutable_mdindicatorsranking();
  void set_allocated_mdindicatorsranking(::com::htsc::mdc::insight::model::ADIndicatorsRanking* mdindicatorsranking);

  // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
  bool has_dynamicpacket() const;
  void clear_dynamicpacket();
  static const int kDynamicPacketFieldNumber = 25;
  const ::com::htsc::mdc::insight::model::DynamicPacket& dynamicpacket() const;
  ::com::htsc::mdc::insight::model::DynamicPacket* release_dynamicpacket();
  ::com::htsc::mdc::insight::model::DynamicPacket* mutable_dynamicpacket();
  void set_allocated_dynamicpacket(::com::htsc::mdc::insight::model::DynamicPacket* dynamicpacket);

  // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
  bool has_mdvolumebyprice() const;
  void clear_mdvolumebyprice();
  static const int kMdVolumeByPriceFieldNumber = 26;
  const ::com::htsc::mdc::insight::model::ADVolumeByPrice& mdvolumebyprice() const;
  ::com::htsc::mdc::insight::model::ADVolumeByPrice* release_mdvolumebyprice();
  ::com::htsc::mdc::insight::model::ADVolumeByPrice* mutable_mdvolumebyprice();
  void set_allocated_mdvolumebyprice(::com::htsc::mdc::insight::model::ADVolumeByPrice* mdvolumebyprice);

  // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
  bool has_mdfundflowanalysis() const;
  void clear_mdfundflowanalysis();
  static const int kMdFundFlowAnalysisFieldNumber = 27;
  const ::com::htsc::mdc::insight::model::ADFundFlowAnalysis& mdfundflowanalysis() const;
  ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* release_mdfundflowanalysis();
  ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* mutable_mdfundflowanalysis();
  void set_allocated_mdfundflowanalysis(::com::htsc::mdc::insight::model::ADFundFlowAnalysis* mdfundflowanalysis);

  // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
  bool has_mdforex() const;
  void clear_mdforex();
  static const int kMdForexFieldNumber = 28;
  const ::com::htsc::mdc::insight::model::MDForex& mdforex() const;
  ::com::htsc::mdc::insight::model::MDForex* release_mdforex();
  ::com::htsc::mdc::insight::model::MDForex* mutable_mdforex();
  void set_allocated_mdforex(::com::htsc::mdc::insight::model::MDForex* mdforex);

  // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
  bool has_mdspot() const;
  void clear_mdspot();
  static const int kMdSpotFieldNumber = 29;
  const ::com::htsc::mdc::insight::model::MDSpot& mdspot() const;
  ::com::htsc::mdc::insight::model::MDSpot* release_mdspot();
  ::com::htsc::mdc::insight::model::MDSpot* mutable_mdspot();
  void set_allocated_mdspot(::com::htsc::mdc::insight::model::MDSpot* mdspot);

  // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
  bool has_mdrate() const;
  void clear_mdrate();
  static const int kMdRateFieldNumber = 30;
  const ::com::htsc::mdc::insight::model::MDRate& mdrate() const;
  ::com::htsc::mdc::insight::model::MDRate* release_mdrate();
  ::com::htsc::mdc::insight::model::MDRate* mutable_mdrate();
  void set_allocated_mdrate(::com::htsc::mdc::insight::model::MDRate* mdrate);

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
  bool has_orderbooksnapshot() const;
  void clear_orderbooksnapshot();
  static const int kOrderbookSnapshotFieldNumber = 31;
  const ::com::htsc::mdc::insight::model::ADOrderbookSnapshot& orderbooksnapshot() const;
  ::com::htsc::mdc::insight::model::ADOrderbookSnapshot* release_orderbooksnapshot();
  ::com::htsc::mdc::insight::model::ADOrderbookSnapshot* mutable_orderbooksnapshot();
  void set_allocated_orderbooksnapshot(::com::htsc::mdc::insight::model::ADOrderbookSnapshot* orderbooksnapshot);

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
  bool has_orderbooksnapshotwithtick() const;
  void clear_orderbooksnapshotwithtick();
  static const int kOrderbookSnapshotWithTickFieldNumber = 32;
  const ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick& orderbooksnapshotwithtick() const;
  ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* release_orderbooksnapshotwithtick();
  ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* mutable_orderbooksnapshotwithtick();
  void set_allocated_orderbooksnapshotwithtick(::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* orderbooksnapshotwithtick);

  // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
  bool has_mdquote() const;
  void clear_mdquote();
  static const int kMdQuoteFieldNumber = 33;
  const ::com::htsc::mdc::insight::model::MDQuote& mdquote() const;
  ::com::htsc::mdc::insight::model::MDQuote* release_mdquote();
  ::com::htsc::mdc::insight::model::MDQuote* mutable_mdquote();
  void set_allocated_mdquote(::com::htsc::mdc::insight::model::MDQuote* mdquote);

  // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
  bool has_mdetfbasicinfo() const;
  void clear_mdetfbasicinfo();
  static const int kMdETFBasicInfoFieldNumber = 34;
  const ::com::htsc::mdc::insight::model::MDETFBasicInfo& mdetfbasicinfo() const;
  ::com::htsc::mdc::insight::model::MDETFBasicInfo* release_mdetfbasicinfo();
  ::com::htsc::mdc::insight::model::MDETFBasicInfo* mutable_mdetfbasicinfo();
  void set_allocated_mdetfbasicinfo(::com::htsc::mdc::insight::model::MDETFBasicInfo* mdetfbasicinfo);

  // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
  bool has_mdfiquote() const;
  void clear_mdfiquote();
  static const int kMdFIQuoteFieldNumber = 35;
  const ::com::htsc::mdc::insight::model::MDFIQuote& mdfiquote() const;
  ::com::htsc::mdc::insight::model::MDFIQuote* release_mdfiquote();
  ::com::htsc::mdc::insight::model::MDFIQuote* mutable_mdfiquote();
  void set_allocated_mdfiquote(::com::htsc::mdc::insight::model::MDFIQuote* mdfiquote);

  // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
  bool has_mdchipdistribution() const;
  void clear_mdchipdistribution();
  static const int kMdChipDistributionFieldNumber = 36;
  const ::com::htsc::mdc::insight::model::ADChipDistribution& mdchipdistribution() const;
  ::com::htsc::mdc::insight::model::ADChipDistribution* release_mdchipdistribution();
  ::com::htsc::mdc::insight::model::ADChipDistribution* mutable_mdchipdistribution();
  void set_allocated_mdchipdistribution(::com::htsc::mdc::insight::model::ADChipDistribution* mdchipdistribution);

  // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
  bool has_mdwarrant() const;
  void clear_mdwarrant();
  static const int kMdWarrantFieldNumber = 37;
  const ::com::htsc::mdc::insight::model::MDWarrant& mdwarrant() const;
  ::com::htsc::mdc::insight::model::MDWarrant* release_mdwarrant();
  ::com::htsc::mdc::insight::model::MDWarrant* mutable_mdwarrant();
  void set_allocated_mdwarrant(::com::htsc::mdc::insight::model::MDWarrant* mdwarrant);

  // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
  bool has_mdsecuritylending() const;
  void clear_mdsecuritylending();
  static const int kMdSecurityLendingFieldNumber = 38;
  const ::com::htsc::mdc::insight::model::MDSecurityLending& mdsecuritylending() const;
  ::com::htsc::mdc::insight::model::MDSecurityLending* release_mdsecuritylending();
  ::com::htsc::mdc::insight::model::MDSecurityLending* mutable_mdsecuritylending();
  void set_allocated_mdsecuritylending(::com::htsc::mdc::insight::model::MDSecurityLending* mdsecuritylending);

  // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
  bool has_mdnews() const;
  void clear_mdnews();
  static const int kMdNewsFieldNumber = 39;
  const ::com::htsc::mdc::insight::model::ADNews& mdnews() const;
  ::com::htsc::mdc::insight::model::ADNews* release_mdnews();
  ::com::htsc::mdc::insight::model::ADNews* mutable_mdnews();
  void set_allocated_mdnews(::com::htsc::mdc::insight::model::ADNews* mdnews);

  // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
  bool has_mdstaringresult() const;
  void clear_mdstaringresult();
  static const int kMdStaringResultFieldNumber = 40;
  const ::com::htsc::mdc::insight::model::ADStaringResult& mdstaringresult() const;
  ::com::htsc::mdc::insight::model::ADStaringResult* release_mdstaringresult();
  ::com::htsc::mdc::insight::model::ADStaringResult* mutable_mdstaringresult();
  void set_allocated_mdstaringresult(::com::htsc::mdc::insight::model::ADStaringResult* mdstaringresult);

  // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
  bool has_mdderivedanalysis() const;
  void clear_mdderivedanalysis();
  static const int kMdDerivedAnalysisFieldNumber = 41;
  const ::com::htsc::mdc::insight::model::ADDerivedAnalysis& mdderivedanalysis() const;
  ::com::htsc::mdc::insight::model::ADDerivedAnalysis* release_mdderivedanalysis();
  ::com::htsc::mdc::insight::model::ADDerivedAnalysis* mutable_mdderivedanalysis();
  void set_allocated_mdderivedanalysis(::com::htsc::mdc::insight::model::ADDerivedAnalysis* mdderivedanalysis);

  // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
  bool has_mdqbquote() const;
  void clear_mdqbquote();
  static const int kMdQBQuoteFieldNumber = 42;
  const ::com::htsc::mdc::insight::model::MDQBQuote& mdqbquote() const;
  ::com::htsc::mdc::insight::model::MDQBQuote* release_mdqbquote();
  ::com::htsc::mdc::insight::model::MDQBQuote* mutable_mdqbquote();
  void set_allocated_mdqbquote(::com::htsc::mdc::insight::model::MDQBQuote* mdqbquote);

  // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
  bool has_mdqbtransaction() const;
  void clear_mdqbtransaction();
  static const int kMdQBTransactionFieldNumber = 43;
  const ::com::htsc::mdc::insight::model::MDQBTransaction& mdqbtransaction() const;
  ::com::htsc::mdc::insight::model::MDQBTransaction* release_mdqbtransaction();
  ::com::htsc::mdc::insight::model::MDQBTransaction* mutable_mdqbtransaction();
  void set_allocated_mdqbtransaction(::com::htsc::mdc::insight::model::MDQBTransaction* mdqbtransaction);

  // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
  bool has_mdusaorder() const;
  void clear_mdusaorder();
  static const int kMdUSAOrderFieldNumber = 44;
  const ::com::htsc::mdc::insight::model::MDUSAOrder& mdusaorder() const;
  ::com::htsc::mdc::insight::model::MDUSAOrder* release_mdusaorder();
  ::com::htsc::mdc::insight::model::MDUSAOrder* mutable_mdusaorder();
  void set_allocated_mdusaorder(::com::htsc::mdc::insight::model::MDUSAOrder* mdusaorder);

  // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
  bool has_mdusatransaction() const;
  void clear_mdusatransaction();
  static const int kMdUSATransactionFieldNumber = 45;
  const ::com::htsc::mdc::insight::model::MDUSATransaction& mdusatransaction() const;
  ::com::htsc::mdc::insight::model::MDUSATransaction* release_mdusatransaction();
  ::com::htsc::mdc::insight::model::MDUSATransaction* mutable_mdusatransaction();
  void set_allocated_mdusatransaction(::com::htsc::mdc::insight::model::MDUSATransaction* mdusatransaction);

  // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
  bool has_mdslorder() const;
  void clear_mdslorder();
  static const int kMdSLOrderFieldNumber = 46;
  const ::com::htsc::mdc::insight::model::MDSLOrder& mdslorder() const;
  ::com::htsc::mdc::insight::model::MDSLOrder* release_mdslorder();
  ::com::htsc::mdc::insight::model::MDSLOrder* mutable_mdslorder();
  void set_allocated_mdslorder(::com::htsc::mdc::insight::model::MDSLOrder* mdslorder);

  // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
  bool has_mdsltransaction() const;
  void clear_mdsltransaction();
  static const int kMdSLTransactionFieldNumber = 47;
  const ::com::htsc::mdc::insight::model::MDSLTransaction& mdsltransaction() const;
  ::com::htsc::mdc::insight::model::MDSLTransaction* release_mdsltransaction();
  ::com::htsc::mdc::insight::model::MDSLTransaction* mutable_mdsltransaction();
  void set_allocated_mdsltransaction(::com::htsc::mdc::insight::model::MDSLTransaction* mdsltransaction);

  // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
  bool has_mdhkgreymarket() const;
  void clear_mdhkgreymarket();
  static const int kMdHKGreyMarketFieldNumber = 48;
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket& mdhkgreymarket() const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket* release_mdhkgreymarket();
  ::com::htsc::mdc::insight::model::MDHKGreyMarket* mutable_mdhkgreymarket();
  void set_allocated_mdhkgreymarket(::com::htsc::mdc::insight::model::MDHKGreyMarket* mdhkgreymarket);

  // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
  bool has_mdslindicativequote() const;
  void clear_mdslindicativequote();
  static const int kMdSLIndicativeQuoteFieldNumber = 49;
  const ::com::htsc::mdc::insight::model::MDSLIndicativeQuote& mdslindicativequote() const;
  ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* release_mdslindicativequote();
  ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* mutable_mdslindicativequote();
  void set_allocated_mdslindicativequote(::com::htsc::mdc::insight::model::MDSLIndicativeQuote* mdslindicativequote);

  // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
  bool has_mdslstatistics() const;
  void clear_mdslstatistics();
  static const int kMdSLStatisticsFieldNumber = 50;
  const ::com::htsc::mdc::insight::model::MDSLStatistics& mdslstatistics() const;
  ::com::htsc::mdc::insight::model::MDSLStatistics* release_mdslstatistics();
  ::com::htsc::mdc::insight::model::MDSLStatistics* mutable_mdslstatistics();
  void set_allocated_mdslstatistics(::com::htsc::mdc::insight::model::MDSLStatistics* mdslstatistics);

  // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
  bool has_mdusaquote() const;
  void clear_mdusaquote();
  static const int kMdUSAQuoteFieldNumber = 51;
  const ::com::htsc::mdc::insight::model::MDUSAQuote& mdusaquote() const;
  ::com::htsc::mdc::insight::model::MDUSAQuote* release_mdusaquote();
  ::com::htsc::mdc::insight::model::MDUSAQuote* mutable_mdusaquote();
  void set_allocated_mdusaquote(::com::htsc::mdc::insight::model::MDUSAQuote* mdusaquote);

  // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
  void clear_marketdatatype();
  static const int kMarketDataTypeFieldNumber = 1;
  ::com::htsc::mdc::insight::model::EMarketDataType marketdatatype() const;
  void set_marketdatatype(::com::htsc::mdc::insight::model::EMarketDataType value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MarketData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::htsc::mdc::insight::model::MDStock* mdstock_;
  ::com::htsc::mdc::insight::model::MDIndex* mdindex_;
  ::com::htsc::mdc::insight::model::MDBond* mdbond_;
  ::com::htsc::mdc::insight::model::MDFund* mdfund_;
  ::com::htsc::mdc::insight::model::MDOption* mdoption_;
  ::com::htsc::mdc::insight::model::MDFuture* mdfuture_;
  ::com::htsc::mdc::insight::model::MDTransaction* mdtransaction_;
  ::com::htsc::mdc::insight::model::MDOrder* mdorder_;
  ::com::htsc::mdc::insight::model::ADKLine* mdkline_;
  ::com::htsc::mdc::insight::model::ADTwap* mdtwap_;
  ::com::htsc::mdc::insight::model::ADVwap* mdvwap_;
  ::com::htsc::mdc::insight::model::MDBasicInfo* mdconstant_;
  ::com::htsc::mdc::insight::model::MDSimpleTick* mdsimpletick_;
  ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* mdupsdownsanalysis_;
  ::com::htsc::mdc::insight::model::ADIndicatorsRanking* mdindicatorsranking_;
  ::com::htsc::mdc::insight::model::DynamicPacket* dynamicpacket_;
  ::com::htsc::mdc::insight::model::ADVolumeByPrice* mdvolumebyprice_;
  ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* mdfundflowanalysis_;
  ::com::htsc::mdc::insight::model::MDForex* mdforex_;
  ::com::htsc::mdc::insight::model::MDSpot* mdspot_;
  ::com::htsc::mdc::insight::model::MDRate* mdrate_;
  ::com::htsc::mdc::insight::model::ADOrderbookSnapshot* orderbooksnapshot_;
  ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* orderbooksnapshotwithtick_;
  ::com::htsc::mdc::insight::model::MDQuote* mdquote_;
  ::com::htsc::mdc::insight::model::MDETFBasicInfo* mdetfbasicinfo_;
  ::com::htsc::mdc::insight::model::MDFIQuote* mdfiquote_;
  ::com::htsc::mdc::insight::model::ADChipDistribution* mdchipdistribution_;
  ::com::htsc::mdc::insight::model::MDWarrant* mdwarrant_;
  ::com::htsc::mdc::insight::model::MDSecurityLending* mdsecuritylending_;
  ::com::htsc::mdc::insight::model::ADNews* mdnews_;
  ::com::htsc::mdc::insight::model::ADStaringResult* mdstaringresult_;
  ::com::htsc::mdc::insight::model::ADDerivedAnalysis* mdderivedanalysis_;
  ::com::htsc::mdc::insight::model::MDQBQuote* mdqbquote_;
  ::com::htsc::mdc::insight::model::MDQBTransaction* mdqbtransaction_;
  ::com::htsc::mdc::insight::model::MDUSAOrder* mdusaorder_;
  ::com::htsc::mdc::insight::model::MDUSATransaction* mdusatransaction_;
  ::com::htsc::mdc::insight::model::MDSLOrder* mdslorder_;
  ::com::htsc::mdc::insight::model::MDSLTransaction* mdsltransaction_;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket* mdhkgreymarket_;
  ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* mdslindicativequote_;
  ::com::htsc::mdc::insight::model::MDSLStatistics* mdslstatistics_;
  ::com::htsc::mdc::insight::model::MDUSAQuote* mdusaquote_;
  int marketdatatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketData_2eproto;
};
// -------------------------------------------------------------------

class MarketDataStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MarketDataStream) */ {
 public:
  MarketDataStream();
  virtual ~MarketDataStream();

  MarketDataStream(const MarketDataStream& from);
  MarketDataStream(MarketDataStream&& from) noexcept
    : MarketDataStream() {
    *this = ::std::move(from);
  }

  inline MarketDataStream& operator=(const MarketDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataStream& operator=(MarketDataStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDataStream* internal_default_instance() {
    return reinterpret_cast<const MarketDataStream*>(
               &_MarketDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MarketDataStream* other);
  friend void swap(MarketDataStream& a, MarketDataStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketDataStream* New() const final {
    return CreateMaybeMessage<MarketDataStream>(nullptr);
  }

  MarketDataStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataStream& from);
  void MergeFrom(const MarketDataStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MarketDataStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketData_2eproto);
    return ::descriptor_table_MarketData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes compressedData = 3;
  void clear_compresseddata();
  static const int kCompressedDataFieldNumber = 3;
  const std::string& compresseddata() const;
  void set_compresseddata(const std::string& value);
  void set_compresseddata(std::string&& value);
  void set_compresseddata(const char* value);
  void set_compresseddata(const void* value, size_t size);
  std::string* mutable_compresseddata();
  std::string* release_compresseddata();
  void set_allocated_compresseddata(std::string* compresseddata);

  // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
  bool has_marketdatalist() const;
  void clear_marketdatalist();
  static const int kMarketDataListFieldNumber = 4;
  const ::com::htsc::mdc::insight::model::MarketDataList& marketdatalist() const;
  ::com::htsc::mdc::insight::model::MarketDataList* release_marketdatalist();
  ::com::htsc::mdc::insight::model::MarketDataList* mutable_marketdatalist();
  void set_allocated_marketdatalist(::com::htsc::mdc::insight::model::MarketDataList* marketdatalist);

  // int32 originalLength = 2;
  void clear_originallength();
  static const int kOriginalLengthFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 originallength() const;
  void set_originallength(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool isCompressed = 1;
  void clear_iscompressed();
  static const int kIsCompressedFieldNumber = 1;
  bool iscompressed() const;
  void set_iscompressed(bool value);

  // bool isFinished = 7;
  void clear_isfinished();
  static const int kIsFinishedFieldNumber = 7;
  bool isfinished() const;
  void set_isfinished(bool value);

  // int32 totalNumber = 5;
  void clear_totalnumber();
  static const int kTotalNumberFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 totalnumber() const;
  void set_totalnumber(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 serial = 6;
  void clear_serial();
  static const int kSerialFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MarketDataStream)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compresseddata_;
  ::com::htsc::mdc::insight::model::MarketDataList* marketdatalist_;
  ::PROTOBUF_NAMESPACE_ID::int32 originallength_;
  bool iscompressed_;
  bool isfinished_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 serial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketData_2eproto;
};
// -------------------------------------------------------------------

class MarketDataList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MarketDataList) */ {
 public:
  MarketDataList();
  virtual ~MarketDataList();

  MarketDataList(const MarketDataList& from);
  MarketDataList(MarketDataList&& from) noexcept
    : MarketDataList() {
    *this = ::std::move(from);
  }

  inline MarketDataList& operator=(const MarketDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataList& operator=(MarketDataList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDataList* internal_default_instance() {
    return reinterpret_cast<const MarketDataList*>(
               &_MarketDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MarketDataList* other);
  friend void swap(MarketDataList& a, MarketDataList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketDataList* New() const final {
    return CreateMaybeMessage<MarketDataList>(nullptr);
  }

  MarketDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataList& from);
  void MergeFrom(const MarketDataList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MarketDataList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketData_2eproto);
    return ::descriptor_table_MarketData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.MarketData marketDatas = 1;
  int marketdatas_size() const;
  void clear_marketdatas();
  static const int kMarketDatasFieldNumber = 1;
  ::com::htsc::mdc::insight::model::MarketData* mutable_marketdatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MarketData >*
      mutable_marketdatas();
  const ::com::htsc::mdc::insight::model::MarketData& marketdatas(int index) const;
  ::com::htsc::mdc::insight::model::MarketData* add_marketdatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MarketData >&
      marketdatas() const;

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MarketDataList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MarketData > marketdatas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarketData

// .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
inline void MarketData::clear_marketdatatype() {
  marketdatatype_ = 0;
}
inline ::com::htsc::mdc::insight::model::EMarketDataType MarketData::marketdatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.marketDataType)
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(marketdatatype_);
}
inline void MarketData::set_marketdatatype(::com::htsc::mdc::insight::model::EMarketDataType value) {
  
  marketdatatype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MarketData.marketDataType)
}

// .com.htsc.mdc.insight.model.MDStock mdStock = 10;
inline bool MarketData::has_mdstock() const {
  return this != internal_default_instance() && mdstock_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDStock& MarketData::mdstock() const {
  const ::com::htsc::mdc::insight::model::MDStock* p = mdstock_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdStock)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDStock*>(
      &::com::htsc::mdc::insight::model::_MDStock_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDStock* MarketData::release_mdstock() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdStock)
  
  ::com::htsc::mdc::insight::model::MDStock* temp = mdstock_;
  mdstock_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDStock* MarketData::mutable_mdstock() {
  
  if (mdstock_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDStock>(GetArenaNoVirtual());
    mdstock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdStock)
  return mdstock_;
}
inline void MarketData::set_allocated_mdstock(::com::htsc::mdc::insight::model::MDStock* mdstock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdstock_);
  }
  if (mdstock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdstock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdstock, submessage_arena);
    }
    
  } else {
    
  }
  mdstock_ = mdstock;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdStock)
}

// .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
inline bool MarketData::has_mdindex() const {
  return this != internal_default_instance() && mdindex_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDIndex& MarketData::mdindex() const {
  const ::com::htsc::mdc::insight::model::MDIndex* p = mdindex_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdIndex)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDIndex*>(
      &::com::htsc::mdc::insight::model::_MDIndex_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDIndex* MarketData::release_mdindex() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdIndex)
  
  ::com::htsc::mdc::insight::model::MDIndex* temp = mdindex_;
  mdindex_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDIndex* MarketData::mutable_mdindex() {
  
  if (mdindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDIndex>(GetArenaNoVirtual());
    mdindex_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdIndex)
  return mdindex_;
}
inline void MarketData::set_allocated_mdindex(::com::htsc::mdc::insight::model::MDIndex* mdindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdindex_);
  }
  if (mdindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdindex, submessage_arena);
    }
    
  } else {
    
  }
  mdindex_ = mdindex;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdIndex)
}

// .com.htsc.mdc.insight.model.MDBond mdBond = 12;
inline bool MarketData::has_mdbond() const {
  return this != internal_default_instance() && mdbond_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDBond& MarketData::mdbond() const {
  const ::com::htsc::mdc::insight::model::MDBond* p = mdbond_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdBond)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDBond*>(
      &::com::htsc::mdc::insight::model::_MDBond_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDBond* MarketData::release_mdbond() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdBond)
  
  ::com::htsc::mdc::insight::model::MDBond* temp = mdbond_;
  mdbond_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDBond* MarketData::mutable_mdbond() {
  
  if (mdbond_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBond>(GetArenaNoVirtual());
    mdbond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdBond)
  return mdbond_;
}
inline void MarketData::set_allocated_mdbond(::com::htsc::mdc::insight::model::MDBond* mdbond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdbond_);
  }
  if (mdbond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdbond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdbond, submessage_arena);
    }
    
  } else {
    
  }
  mdbond_ = mdbond;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdBond)
}

// .com.htsc.mdc.insight.model.MDFund mdFund = 13;
inline bool MarketData::has_mdfund() const {
  return this != internal_default_instance() && mdfund_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDFund& MarketData::mdfund() const {
  const ::com::htsc::mdc::insight::model::MDFund* p = mdfund_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdFund)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDFund*>(
      &::com::htsc::mdc::insight::model::_MDFund_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDFund* MarketData::release_mdfund() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdFund)
  
  ::com::htsc::mdc::insight::model::MDFund* temp = mdfund_;
  mdfund_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDFund* MarketData::mutable_mdfund() {
  
  if (mdfund_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDFund>(GetArenaNoVirtual());
    mdfund_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdFund)
  return mdfund_;
}
inline void MarketData::set_allocated_mdfund(::com::htsc::mdc::insight::model::MDFund* mdfund) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdfund_);
  }
  if (mdfund) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdfund = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdfund, submessage_arena);
    }
    
  } else {
    
  }
  mdfund_ = mdfund;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdFund)
}

// .com.htsc.mdc.insight.model.MDOption mdOption = 14;
inline bool MarketData::has_mdoption() const {
  return this != internal_default_instance() && mdoption_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDOption& MarketData::mdoption() const {
  const ::com::htsc::mdc::insight::model::MDOption* p = mdoption_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdOption)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDOption*>(
      &::com::htsc::mdc::insight::model::_MDOption_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDOption* MarketData::release_mdoption() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdOption)
  
  ::com::htsc::mdc::insight::model::MDOption* temp = mdoption_;
  mdoption_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDOption* MarketData::mutable_mdoption() {
  
  if (mdoption_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDOption>(GetArenaNoVirtual());
    mdoption_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdOption)
  return mdoption_;
}
inline void MarketData::set_allocated_mdoption(::com::htsc::mdc::insight::model::MDOption* mdoption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdoption_);
  }
  if (mdoption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdoption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdoption, submessage_arena);
    }
    
  } else {
    
  }
  mdoption_ = mdoption;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdOption)
}

// .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
inline bool MarketData::has_mdfuture() const {
  return this != internal_default_instance() && mdfuture_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDFuture& MarketData::mdfuture() const {
  const ::com::htsc::mdc::insight::model::MDFuture* p = mdfuture_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdFuture)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDFuture*>(
      &::com::htsc::mdc::insight::model::_MDFuture_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDFuture* MarketData::release_mdfuture() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdFuture)
  
  ::com::htsc::mdc::insight::model::MDFuture* temp = mdfuture_;
  mdfuture_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDFuture* MarketData::mutable_mdfuture() {
  
  if (mdfuture_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDFuture>(GetArenaNoVirtual());
    mdfuture_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdFuture)
  return mdfuture_;
}
inline void MarketData::set_allocated_mdfuture(::com::htsc::mdc::insight::model::MDFuture* mdfuture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdfuture_);
  }
  if (mdfuture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdfuture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdfuture, submessage_arena);
    }
    
  } else {
    
  }
  mdfuture_ = mdfuture;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdFuture)
}

// .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
inline bool MarketData::has_mdtransaction() const {
  return this != internal_default_instance() && mdtransaction_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDTransaction& MarketData::mdtransaction() const {
  const ::com::htsc::mdc::insight::model::MDTransaction* p = mdtransaction_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdTransaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDTransaction*>(
      &::com::htsc::mdc::insight::model::_MDTransaction_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDTransaction* MarketData::release_mdtransaction() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdTransaction)
  
  ::com::htsc::mdc::insight::model::MDTransaction* temp = mdtransaction_;
  mdtransaction_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDTransaction* MarketData::mutable_mdtransaction() {
  
  if (mdtransaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDTransaction>(GetArenaNoVirtual());
    mdtransaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdTransaction)
  return mdtransaction_;
}
inline void MarketData::set_allocated_mdtransaction(::com::htsc::mdc::insight::model::MDTransaction* mdtransaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdtransaction_);
  }
  if (mdtransaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdtransaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdtransaction, submessage_arena);
    }
    
  } else {
    
  }
  mdtransaction_ = mdtransaction;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdTransaction)
}

// .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
inline bool MarketData::has_mdorder() const {
  return this != internal_default_instance() && mdorder_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDOrder& MarketData::mdorder() const {
  const ::com::htsc::mdc::insight::model::MDOrder* p = mdorder_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdOrder)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDOrder*>(
      &::com::htsc::mdc::insight::model::_MDOrder_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDOrder* MarketData::release_mdorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdOrder)
  
  ::com::htsc::mdc::insight::model::MDOrder* temp = mdorder_;
  mdorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDOrder* MarketData::mutable_mdorder() {
  
  if (mdorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDOrder>(GetArenaNoVirtual());
    mdorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdOrder)
  return mdorder_;
}
inline void MarketData::set_allocated_mdorder(::com::htsc::mdc::insight::model::MDOrder* mdorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdorder_);
  }
  if (mdorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdorder, submessage_arena);
    }
    
  } else {
    
  }
  mdorder_ = mdorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdOrder)
}

// .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
inline bool MarketData::has_mdkline() const {
  return this != internal_default_instance() && mdkline_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADKLine& MarketData::mdkline() const {
  const ::com::htsc::mdc::insight::model::ADKLine* p = mdkline_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdKLine)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADKLine*>(
      &::com::htsc::mdc::insight::model::_ADKLine_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADKLine* MarketData::release_mdkline() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdKLine)
  
  ::com::htsc::mdc::insight::model::ADKLine* temp = mdkline_;
  mdkline_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADKLine* MarketData::mutable_mdkline() {
  
  if (mdkline_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADKLine>(GetArenaNoVirtual());
    mdkline_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdKLine)
  return mdkline_;
}
inline void MarketData::set_allocated_mdkline(::com::htsc::mdc::insight::model::ADKLine* mdkline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdkline_);
  }
  if (mdkline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdkline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdkline, submessage_arena);
    }
    
  } else {
    
  }
  mdkline_ = mdkline;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdKLine)
}

// .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
inline bool MarketData::has_mdtwap() const {
  return this != internal_default_instance() && mdtwap_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADTwap& MarketData::mdtwap() const {
  const ::com::htsc::mdc::insight::model::ADTwap* p = mdtwap_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdTwap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADTwap*>(
      &::com::htsc::mdc::insight::model::_ADTwap_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADTwap* MarketData::release_mdtwap() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdTwap)
  
  ::com::htsc::mdc::insight::model::ADTwap* temp = mdtwap_;
  mdtwap_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADTwap* MarketData::mutable_mdtwap() {
  
  if (mdtwap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADTwap>(GetArenaNoVirtual());
    mdtwap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdTwap)
  return mdtwap_;
}
inline void MarketData::set_allocated_mdtwap(::com::htsc::mdc::insight::model::ADTwap* mdtwap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdtwap_);
  }
  if (mdtwap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdtwap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdtwap, submessage_arena);
    }
    
  } else {
    
  }
  mdtwap_ = mdtwap;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdTwap)
}

// .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
inline bool MarketData::has_mdvwap() const {
  return this != internal_default_instance() && mdvwap_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADVwap& MarketData::mdvwap() const {
  const ::com::htsc::mdc::insight::model::ADVwap* p = mdvwap_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdVwap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADVwap*>(
      &::com::htsc::mdc::insight::model::_ADVwap_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADVwap* MarketData::release_mdvwap() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdVwap)
  
  ::com::htsc::mdc::insight::model::ADVwap* temp = mdvwap_;
  mdvwap_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADVwap* MarketData::mutable_mdvwap() {
  
  if (mdvwap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADVwap>(GetArenaNoVirtual());
    mdvwap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdVwap)
  return mdvwap_;
}
inline void MarketData::set_allocated_mdvwap(::com::htsc::mdc::insight::model::ADVwap* mdvwap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdvwap_);
  }
  if (mdvwap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdvwap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdvwap, submessage_arena);
    }
    
  } else {
    
  }
  mdvwap_ = mdvwap;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdVwap)
}

// .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
inline bool MarketData::has_mdconstant() const {
  return this != internal_default_instance() && mdconstant_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDBasicInfo& MarketData::mdconstant() const {
  const ::com::htsc::mdc::insight::model::MDBasicInfo* p = mdconstant_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdConstant)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDBasicInfo*>(
      &::com::htsc::mdc::insight::model::_MDBasicInfo_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDBasicInfo* MarketData::release_mdconstant() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdConstant)
  
  ::com::htsc::mdc::insight::model::MDBasicInfo* temp = mdconstant_;
  mdconstant_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDBasicInfo* MarketData::mutable_mdconstant() {
  
  if (mdconstant_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBasicInfo>(GetArenaNoVirtual());
    mdconstant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdConstant)
  return mdconstant_;
}
inline void MarketData::set_allocated_mdconstant(::com::htsc::mdc::insight::model::MDBasicInfo* mdconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdconstant_);
  }
  if (mdconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdconstant, submessage_arena);
    }
    
  } else {
    
  }
  mdconstant_ = mdconstant;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdConstant)
}

// .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
inline bool MarketData::has_mdsimpletick() const {
  return this != internal_default_instance() && mdsimpletick_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDSimpleTick& MarketData::mdsimpletick() const {
  const ::com::htsc::mdc::insight::model::MDSimpleTick* p = mdsimpletick_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdSimpleTick)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSimpleTick*>(
      &::com::htsc::mdc::insight::model::_MDSimpleTick_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDSimpleTick* MarketData::release_mdsimpletick() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdSimpleTick)
  
  ::com::htsc::mdc::insight::model::MDSimpleTick* temp = mdsimpletick_;
  mdsimpletick_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSimpleTick* MarketData::mutable_mdsimpletick() {
  
  if (mdsimpletick_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSimpleTick>(GetArenaNoVirtual());
    mdsimpletick_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdSimpleTick)
  return mdsimpletick_;
}
inline void MarketData::set_allocated_mdsimpletick(::com::htsc::mdc::insight::model::MDSimpleTick* mdsimpletick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdsimpletick_);
  }
  if (mdsimpletick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdsimpletick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdsimpletick, submessage_arena);
    }
    
  } else {
    
  }
  mdsimpletick_ = mdsimpletick;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdSimpleTick)
}

// .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
inline bool MarketData::has_mdupsdownsanalysis() const {
  return this != internal_default_instance() && mdupsdownsanalysis_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis& MarketData::mdupsdownsanalysis() const {
  const ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* p = mdupsdownsanalysis_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdUpsDownsAnalysis)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis*>(
      &::com::htsc::mdc::insight::model::_ADUpsDownsAnalysis_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* MarketData::release_mdupsdownsanalysis() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdUpsDownsAnalysis)
  
  ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* temp = mdupsdownsanalysis_;
  mdupsdownsanalysis_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* MarketData::mutable_mdupsdownsanalysis() {
  
  if (mdupsdownsanalysis_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADUpsDownsAnalysis>(GetArenaNoVirtual());
    mdupsdownsanalysis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdUpsDownsAnalysis)
  return mdupsdownsanalysis_;
}
inline void MarketData::set_allocated_mdupsdownsanalysis(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* mdupsdownsanalysis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdupsdownsanalysis_);
  }
  if (mdupsdownsanalysis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdupsdownsanalysis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdupsdownsanalysis, submessage_arena);
    }
    
  } else {
    
  }
  mdupsdownsanalysis_ = mdupsdownsanalysis;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdUpsDownsAnalysis)
}

// .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
inline bool MarketData::has_mdindicatorsranking() const {
  return this != internal_default_instance() && mdindicatorsranking_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADIndicatorsRanking& MarketData::mdindicatorsranking() const {
  const ::com::htsc::mdc::insight::model::ADIndicatorsRanking* p = mdindicatorsranking_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdIndicatorsRanking)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADIndicatorsRanking*>(
      &::com::htsc::mdc::insight::model::_ADIndicatorsRanking_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADIndicatorsRanking* MarketData::release_mdindicatorsranking() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdIndicatorsRanking)
  
  ::com::htsc::mdc::insight::model::ADIndicatorsRanking* temp = mdindicatorsranking_;
  mdindicatorsranking_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADIndicatorsRanking* MarketData::mutable_mdindicatorsranking() {
  
  if (mdindicatorsranking_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADIndicatorsRanking>(GetArenaNoVirtual());
    mdindicatorsranking_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdIndicatorsRanking)
  return mdindicatorsranking_;
}
inline void MarketData::set_allocated_mdindicatorsranking(::com::htsc::mdc::insight::model::ADIndicatorsRanking* mdindicatorsranking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdindicatorsranking_);
  }
  if (mdindicatorsranking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdindicatorsranking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdindicatorsranking, submessage_arena);
    }
    
  } else {
    
  }
  mdindicatorsranking_ = mdindicatorsranking;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdIndicatorsRanking)
}

// .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
inline bool MarketData::has_dynamicpacket() const {
  return this != internal_default_instance() && dynamicpacket_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::DynamicPacket& MarketData::dynamicpacket() const {
  const ::com::htsc::mdc::insight::model::DynamicPacket* p = dynamicpacket_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.dynamicPacket)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::DynamicPacket*>(
      &::com::htsc::mdc::insight::model::_DynamicPacket_default_instance_);
}
inline ::com::htsc::mdc::insight::model::DynamicPacket* MarketData::release_dynamicpacket() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.dynamicPacket)
  
  ::com::htsc::mdc::insight::model::DynamicPacket* temp = dynamicpacket_;
  dynamicpacket_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::DynamicPacket* MarketData::mutable_dynamicpacket() {
  
  if (dynamicpacket_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::DynamicPacket>(GetArenaNoVirtual());
    dynamicpacket_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.dynamicPacket)
  return dynamicpacket_;
}
inline void MarketData::set_allocated_dynamicpacket(::com::htsc::mdc::insight::model::DynamicPacket* dynamicpacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamicpacket_);
  }
  if (dynamicpacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamicpacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamicpacket, submessage_arena);
    }
    
  } else {
    
  }
  dynamicpacket_ = dynamicpacket;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.dynamicPacket)
}

// .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
inline bool MarketData::has_mdvolumebyprice() const {
  return this != internal_default_instance() && mdvolumebyprice_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADVolumeByPrice& MarketData::mdvolumebyprice() const {
  const ::com::htsc::mdc::insight::model::ADVolumeByPrice* p = mdvolumebyprice_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdVolumeByPrice)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADVolumeByPrice*>(
      &::com::htsc::mdc::insight::model::_ADVolumeByPrice_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADVolumeByPrice* MarketData::release_mdvolumebyprice() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdVolumeByPrice)
  
  ::com::htsc::mdc::insight::model::ADVolumeByPrice* temp = mdvolumebyprice_;
  mdvolumebyprice_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADVolumeByPrice* MarketData::mutable_mdvolumebyprice() {
  
  if (mdvolumebyprice_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADVolumeByPrice>(GetArenaNoVirtual());
    mdvolumebyprice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdVolumeByPrice)
  return mdvolumebyprice_;
}
inline void MarketData::set_allocated_mdvolumebyprice(::com::htsc::mdc::insight::model::ADVolumeByPrice* mdvolumebyprice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdvolumebyprice_);
  }
  if (mdvolumebyprice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdvolumebyprice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdvolumebyprice, submessage_arena);
    }
    
  } else {
    
  }
  mdvolumebyprice_ = mdvolumebyprice;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdVolumeByPrice)
}

// .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
inline bool MarketData::has_mdfundflowanalysis() const {
  return this != internal_default_instance() && mdfundflowanalysis_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowAnalysis& MarketData::mdfundflowanalysis() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* p = mdfundflowanalysis_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdFundFlowAnalysis)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowAnalysis*>(
      &::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* MarketData::release_mdfundflowanalysis() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdFundFlowAnalysis)
  
  ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* temp = mdfundflowanalysis_;
  mdfundflowanalysis_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* MarketData::mutable_mdfundflowanalysis() {
  
  if (mdfundflowanalysis_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowAnalysis>(GetArenaNoVirtual());
    mdfundflowanalysis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdFundFlowAnalysis)
  return mdfundflowanalysis_;
}
inline void MarketData::set_allocated_mdfundflowanalysis(::com::htsc::mdc::insight::model::ADFundFlowAnalysis* mdfundflowanalysis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdfundflowanalysis_);
  }
  if (mdfundflowanalysis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdfundflowanalysis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdfundflowanalysis, submessage_arena);
    }
    
  } else {
    
  }
  mdfundflowanalysis_ = mdfundflowanalysis;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdFundFlowAnalysis)
}

// .com.htsc.mdc.insight.model.MDForex mdForex = 28;
inline bool MarketData::has_mdforex() const {
  return this != internal_default_instance() && mdforex_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDForex& MarketData::mdforex() const {
  const ::com::htsc::mdc::insight::model::MDForex* p = mdforex_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdForex)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDForex*>(
      &::com::htsc::mdc::insight::model::_MDForex_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDForex* MarketData::release_mdforex() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdForex)
  
  ::com::htsc::mdc::insight::model::MDForex* temp = mdforex_;
  mdforex_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDForex* MarketData::mutable_mdforex() {
  
  if (mdforex_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDForex>(GetArenaNoVirtual());
    mdforex_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdForex)
  return mdforex_;
}
inline void MarketData::set_allocated_mdforex(::com::htsc::mdc::insight::model::MDForex* mdforex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdforex_);
  }
  if (mdforex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdforex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdforex, submessage_arena);
    }
    
  } else {
    
  }
  mdforex_ = mdforex;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdForex)
}

// .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
inline bool MarketData::has_mdspot() const {
  return this != internal_default_instance() && mdspot_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDSpot& MarketData::mdspot() const {
  const ::com::htsc::mdc::insight::model::MDSpot* p = mdspot_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdSpot)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSpot*>(
      &::com::htsc::mdc::insight::model::_MDSpot_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDSpot* MarketData::release_mdspot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdSpot)
  
  ::com::htsc::mdc::insight::model::MDSpot* temp = mdspot_;
  mdspot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSpot* MarketData::mutable_mdspot() {
  
  if (mdspot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSpot>(GetArenaNoVirtual());
    mdspot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdSpot)
  return mdspot_;
}
inline void MarketData::set_allocated_mdspot(::com::htsc::mdc::insight::model::MDSpot* mdspot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdspot_);
  }
  if (mdspot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdspot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdspot, submessage_arena);
    }
    
  } else {
    
  }
  mdspot_ = mdspot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdSpot)
}

// .com.htsc.mdc.insight.model.MDRate mdRate = 30;
inline bool MarketData::has_mdrate() const {
  return this != internal_default_instance() && mdrate_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDRate& MarketData::mdrate() const {
  const ::com::htsc::mdc::insight::model::MDRate* p = mdrate_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdRate)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDRate*>(
      &::com::htsc::mdc::insight::model::_MDRate_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDRate* MarketData::release_mdrate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdRate)
  
  ::com::htsc::mdc::insight::model::MDRate* temp = mdrate_;
  mdrate_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDRate* MarketData::mutable_mdrate() {
  
  if (mdrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDRate>(GetArenaNoVirtual());
    mdrate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdRate)
  return mdrate_;
}
inline void MarketData::set_allocated_mdrate(::com::htsc::mdc::insight::model::MDRate* mdrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdrate_);
  }
  if (mdrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdrate, submessage_arena);
    }
    
  } else {
    
  }
  mdrate_ = mdrate;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdRate)
}

// .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
inline bool MarketData::has_orderbooksnapshot() const {
  return this != internal_default_instance() && orderbooksnapshot_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADOrderbookSnapshot& MarketData::orderbooksnapshot() const {
  const ::com::htsc::mdc::insight::model::ADOrderbookSnapshot* p = orderbooksnapshot_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.orderbookSnapshot)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADOrderbookSnapshot*>(
      &::com::htsc::mdc::insight::model::_ADOrderbookSnapshot_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADOrderbookSnapshot* MarketData::release_orderbooksnapshot() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.orderbookSnapshot)
  
  ::com::htsc::mdc::insight::model::ADOrderbookSnapshot* temp = orderbooksnapshot_;
  orderbooksnapshot_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADOrderbookSnapshot* MarketData::mutable_orderbooksnapshot() {
  
  if (orderbooksnapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADOrderbookSnapshot>(GetArenaNoVirtual());
    orderbooksnapshot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.orderbookSnapshot)
  return orderbooksnapshot_;
}
inline void MarketData::set_allocated_orderbooksnapshot(::com::htsc::mdc::insight::model::ADOrderbookSnapshot* orderbooksnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderbooksnapshot_);
  }
  if (orderbooksnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderbooksnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderbooksnapshot, submessage_arena);
    }
    
  } else {
    
  }
  orderbooksnapshot_ = orderbooksnapshot;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.orderbookSnapshot)
}

// .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
inline bool MarketData::has_orderbooksnapshotwithtick() const {
  return this != internal_default_instance() && orderbooksnapshotwithtick_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick& MarketData::orderbooksnapshotwithtick() const {
  const ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* p = orderbooksnapshotwithtick_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.orderbookSnapshotWithTick)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick*>(
      &::com::htsc::mdc::insight::model::_ADOrderbookSnapshotWithTick_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* MarketData::release_orderbooksnapshotwithtick() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.orderbookSnapshotWithTick)
  
  ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* temp = orderbooksnapshotwithtick_;
  orderbooksnapshotwithtick_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* MarketData::mutable_orderbooksnapshotwithtick() {
  
  if (orderbooksnapshotwithtick_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick>(GetArenaNoVirtual());
    orderbooksnapshotwithtick_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.orderbookSnapshotWithTick)
  return orderbooksnapshotwithtick_;
}
inline void MarketData::set_allocated_orderbooksnapshotwithtick(::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick* orderbooksnapshotwithtick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderbooksnapshotwithtick_);
  }
  if (orderbooksnapshotwithtick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderbooksnapshotwithtick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderbooksnapshotwithtick, submessage_arena);
    }
    
  } else {
    
  }
  orderbooksnapshotwithtick_ = orderbooksnapshotwithtick;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.orderbookSnapshotWithTick)
}

// .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
inline bool MarketData::has_mdquote() const {
  return this != internal_default_instance() && mdquote_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDQuote& MarketData::mdquote() const {
  const ::com::htsc::mdc::insight::model::MDQuote* p = mdquote_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdQuote)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDQuote*>(
      &::com::htsc::mdc::insight::model::_MDQuote_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDQuote* MarketData::release_mdquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdQuote)
  
  ::com::htsc::mdc::insight::model::MDQuote* temp = mdquote_;
  mdquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDQuote* MarketData::mutable_mdquote() {
  
  if (mdquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQuote>(GetArenaNoVirtual());
    mdquote_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdQuote)
  return mdquote_;
}
inline void MarketData::set_allocated_mdquote(::com::htsc::mdc::insight::model::MDQuote* mdquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdquote_);
  }
  if (mdquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdquote, submessage_arena);
    }
    
  } else {
    
  }
  mdquote_ = mdquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdQuote)
}

// .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
inline bool MarketData::has_mdetfbasicinfo() const {
  return this != internal_default_instance() && mdetfbasicinfo_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDETFBasicInfo& MarketData::mdetfbasicinfo() const {
  const ::com::htsc::mdc::insight::model::MDETFBasicInfo* p = mdetfbasicinfo_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdETFBasicInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDETFBasicInfo*>(
      &::com::htsc::mdc::insight::model::_MDETFBasicInfo_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDETFBasicInfo* MarketData::release_mdetfbasicinfo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdETFBasicInfo)
  
  ::com::htsc::mdc::insight::model::MDETFBasicInfo* temp = mdetfbasicinfo_;
  mdetfbasicinfo_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDETFBasicInfo* MarketData::mutable_mdetfbasicinfo() {
  
  if (mdetfbasicinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDETFBasicInfo>(GetArenaNoVirtual());
    mdetfbasicinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdETFBasicInfo)
  return mdetfbasicinfo_;
}
inline void MarketData::set_allocated_mdetfbasicinfo(::com::htsc::mdc::insight::model::MDETFBasicInfo* mdetfbasicinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdetfbasicinfo_);
  }
  if (mdetfbasicinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdetfbasicinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdetfbasicinfo, submessage_arena);
    }
    
  } else {
    
  }
  mdetfbasicinfo_ = mdetfbasicinfo;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdETFBasicInfo)
}

// .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
inline bool MarketData::has_mdfiquote() const {
  return this != internal_default_instance() && mdfiquote_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDFIQuote& MarketData::mdfiquote() const {
  const ::com::htsc::mdc::insight::model::MDFIQuote* p = mdfiquote_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdFIQuote)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDFIQuote*>(
      &::com::htsc::mdc::insight::model::_MDFIQuote_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDFIQuote* MarketData::release_mdfiquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdFIQuote)
  
  ::com::htsc::mdc::insight::model::MDFIQuote* temp = mdfiquote_;
  mdfiquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDFIQuote* MarketData::mutable_mdfiquote() {
  
  if (mdfiquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDFIQuote>(GetArenaNoVirtual());
    mdfiquote_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdFIQuote)
  return mdfiquote_;
}
inline void MarketData::set_allocated_mdfiquote(::com::htsc::mdc::insight::model::MDFIQuote* mdfiquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdfiquote_);
  }
  if (mdfiquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdfiquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdfiquote, submessage_arena);
    }
    
  } else {
    
  }
  mdfiquote_ = mdfiquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdFIQuote)
}

// .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
inline bool MarketData::has_mdchipdistribution() const {
  return this != internal_default_instance() && mdchipdistribution_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistribution& MarketData::mdchipdistribution() const {
  const ::com::htsc::mdc::insight::model::ADChipDistribution* p = mdchipdistribution_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdChipDistribution)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADChipDistribution*>(
      &::com::htsc::mdc::insight::model::_ADChipDistribution_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADChipDistribution* MarketData::release_mdchipdistribution() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdChipDistribution)
  
  ::com::htsc::mdc::insight::model::ADChipDistribution* temp = mdchipdistribution_;
  mdchipdistribution_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADChipDistribution* MarketData::mutable_mdchipdistribution() {
  
  if (mdchipdistribution_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADChipDistribution>(GetArenaNoVirtual());
    mdchipdistribution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdChipDistribution)
  return mdchipdistribution_;
}
inline void MarketData::set_allocated_mdchipdistribution(::com::htsc::mdc::insight::model::ADChipDistribution* mdchipdistribution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdchipdistribution_);
  }
  if (mdchipdistribution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdchipdistribution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdchipdistribution, submessage_arena);
    }
    
  } else {
    
  }
  mdchipdistribution_ = mdchipdistribution;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdChipDistribution)
}

// .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
inline bool MarketData::has_mdwarrant() const {
  return this != internal_default_instance() && mdwarrant_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDWarrant& MarketData::mdwarrant() const {
  const ::com::htsc::mdc::insight::model::MDWarrant* p = mdwarrant_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdWarrant)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDWarrant*>(
      &::com::htsc::mdc::insight::model::_MDWarrant_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDWarrant* MarketData::release_mdwarrant() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdWarrant)
  
  ::com::htsc::mdc::insight::model::MDWarrant* temp = mdwarrant_;
  mdwarrant_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDWarrant* MarketData::mutable_mdwarrant() {
  
  if (mdwarrant_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDWarrant>(GetArenaNoVirtual());
    mdwarrant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdWarrant)
  return mdwarrant_;
}
inline void MarketData::set_allocated_mdwarrant(::com::htsc::mdc::insight::model::MDWarrant* mdwarrant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdwarrant_);
  }
  if (mdwarrant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdwarrant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdwarrant, submessage_arena);
    }
    
  } else {
    
  }
  mdwarrant_ = mdwarrant;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdWarrant)
}

// .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
inline bool MarketData::has_mdsecuritylending() const {
  return this != internal_default_instance() && mdsecuritylending_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDSecurityLending& MarketData::mdsecuritylending() const {
  const ::com::htsc::mdc::insight::model::MDSecurityLending* p = mdsecuritylending_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdSecurityLending)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSecurityLending*>(
      &::com::htsc::mdc::insight::model::_MDSecurityLending_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDSecurityLending* MarketData::release_mdsecuritylending() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdSecurityLending)
  
  ::com::htsc::mdc::insight::model::MDSecurityLending* temp = mdsecuritylending_;
  mdsecuritylending_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSecurityLending* MarketData::mutable_mdsecuritylending() {
  
  if (mdsecuritylending_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSecurityLending>(GetArenaNoVirtual());
    mdsecuritylending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdSecurityLending)
  return mdsecuritylending_;
}
inline void MarketData::set_allocated_mdsecuritylending(::com::htsc::mdc::insight::model::MDSecurityLending* mdsecuritylending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdsecuritylending_);
  }
  if (mdsecuritylending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdsecuritylending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdsecuritylending, submessage_arena);
    }
    
  } else {
    
  }
  mdsecuritylending_ = mdsecuritylending;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdSecurityLending)
}

// .com.htsc.mdc.insight.model.ADNews mdNews = 39;
inline bool MarketData::has_mdnews() const {
  return this != internal_default_instance() && mdnews_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADNews& MarketData::mdnews() const {
  const ::com::htsc::mdc::insight::model::ADNews* p = mdnews_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdNews)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADNews*>(
      &::com::htsc::mdc::insight::model::_ADNews_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADNews* MarketData::release_mdnews() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdNews)
  
  ::com::htsc::mdc::insight::model::ADNews* temp = mdnews_;
  mdnews_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADNews* MarketData::mutable_mdnews() {
  
  if (mdnews_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADNews>(GetArenaNoVirtual());
    mdnews_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdNews)
  return mdnews_;
}
inline void MarketData::set_allocated_mdnews(::com::htsc::mdc::insight::model::ADNews* mdnews) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdnews_);
  }
  if (mdnews) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdnews = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdnews, submessage_arena);
    }
    
  } else {
    
  }
  mdnews_ = mdnews;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdNews)
}

// .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
inline bool MarketData::has_mdstaringresult() const {
  return this != internal_default_instance() && mdstaringresult_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADStaringResult& MarketData::mdstaringresult() const {
  const ::com::htsc::mdc::insight::model::ADStaringResult* p = mdstaringresult_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdStaringResult)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADStaringResult*>(
      &::com::htsc::mdc::insight::model::_ADStaringResult_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADStaringResult* MarketData::release_mdstaringresult() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdStaringResult)
  
  ::com::htsc::mdc::insight::model::ADStaringResult* temp = mdstaringresult_;
  mdstaringresult_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADStaringResult* MarketData::mutable_mdstaringresult() {
  
  if (mdstaringresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADStaringResult>(GetArenaNoVirtual());
    mdstaringresult_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdStaringResult)
  return mdstaringresult_;
}
inline void MarketData::set_allocated_mdstaringresult(::com::htsc::mdc::insight::model::ADStaringResult* mdstaringresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdstaringresult_);
  }
  if (mdstaringresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdstaringresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdstaringresult, submessage_arena);
    }
    
  } else {
    
  }
  mdstaringresult_ = mdstaringresult;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdStaringResult)
}

// .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
inline bool MarketData::has_mdderivedanalysis() const {
  return this != internal_default_instance() && mdderivedanalysis_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADDerivedAnalysis& MarketData::mdderivedanalysis() const {
  const ::com::htsc::mdc::insight::model::ADDerivedAnalysis* p = mdderivedanalysis_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdDerivedAnalysis)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::ADDerivedAnalysis*>(
      &::com::htsc::mdc::insight::model::_ADDerivedAnalysis_default_instance_);
}
inline ::com::htsc::mdc::insight::model::ADDerivedAnalysis* MarketData::release_mdderivedanalysis() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdDerivedAnalysis)
  
  ::com::htsc::mdc::insight::model::ADDerivedAnalysis* temp = mdderivedanalysis_;
  mdderivedanalysis_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADDerivedAnalysis* MarketData::mutable_mdderivedanalysis() {
  
  if (mdderivedanalysis_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADDerivedAnalysis>(GetArenaNoVirtual());
    mdderivedanalysis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdDerivedAnalysis)
  return mdderivedanalysis_;
}
inline void MarketData::set_allocated_mdderivedanalysis(::com::htsc::mdc::insight::model::ADDerivedAnalysis* mdderivedanalysis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdderivedanalysis_);
  }
  if (mdderivedanalysis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdderivedanalysis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdderivedanalysis, submessage_arena);
    }
    
  } else {
    
  }
  mdderivedanalysis_ = mdderivedanalysis;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdDerivedAnalysis)
}

// .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
inline bool MarketData::has_mdqbquote() const {
  return this != internal_default_instance() && mdqbquote_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDQBQuote& MarketData::mdqbquote() const {
  const ::com::htsc::mdc::insight::model::MDQBQuote* p = mdqbquote_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdQBQuote)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDQBQuote*>(
      &::com::htsc::mdc::insight::model::_MDQBQuote_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDQBQuote* MarketData::release_mdqbquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdQBQuote)
  
  ::com::htsc::mdc::insight::model::MDQBQuote* temp = mdqbquote_;
  mdqbquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDQBQuote* MarketData::mutable_mdqbquote() {
  
  if (mdqbquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQBQuote>(GetArenaNoVirtual());
    mdqbquote_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdQBQuote)
  return mdqbquote_;
}
inline void MarketData::set_allocated_mdqbquote(::com::htsc::mdc::insight::model::MDQBQuote* mdqbquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdqbquote_);
  }
  if (mdqbquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdqbquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdqbquote, submessage_arena);
    }
    
  } else {
    
  }
  mdqbquote_ = mdqbquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdQBQuote)
}

// .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
inline bool MarketData::has_mdqbtransaction() const {
  return this != internal_default_instance() && mdqbtransaction_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDQBTransaction& MarketData::mdqbtransaction() const {
  const ::com::htsc::mdc::insight::model::MDQBTransaction* p = mdqbtransaction_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdQBTransaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDQBTransaction*>(
      &::com::htsc::mdc::insight::model::_MDQBTransaction_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDQBTransaction* MarketData::release_mdqbtransaction() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdQBTransaction)
  
  ::com::htsc::mdc::insight::model::MDQBTransaction* temp = mdqbtransaction_;
  mdqbtransaction_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDQBTransaction* MarketData::mutable_mdqbtransaction() {
  
  if (mdqbtransaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQBTransaction>(GetArenaNoVirtual());
    mdqbtransaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdQBTransaction)
  return mdqbtransaction_;
}
inline void MarketData::set_allocated_mdqbtransaction(::com::htsc::mdc::insight::model::MDQBTransaction* mdqbtransaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdqbtransaction_);
  }
  if (mdqbtransaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdqbtransaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdqbtransaction, submessage_arena);
    }
    
  } else {
    
  }
  mdqbtransaction_ = mdqbtransaction;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdQBTransaction)
}

// .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
inline bool MarketData::has_mdusaorder() const {
  return this != internal_default_instance() && mdusaorder_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDUSAOrder& MarketData::mdusaorder() const {
  const ::com::htsc::mdc::insight::model::MDUSAOrder* p = mdusaorder_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdUSAOrder)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDUSAOrder*>(
      &::com::htsc::mdc::insight::model::_MDUSAOrder_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDUSAOrder* MarketData::release_mdusaorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdUSAOrder)
  
  ::com::htsc::mdc::insight::model::MDUSAOrder* temp = mdusaorder_;
  mdusaorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDUSAOrder* MarketData::mutable_mdusaorder() {
  
  if (mdusaorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDUSAOrder>(GetArenaNoVirtual());
    mdusaorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdUSAOrder)
  return mdusaorder_;
}
inline void MarketData::set_allocated_mdusaorder(::com::htsc::mdc::insight::model::MDUSAOrder* mdusaorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdusaorder_);
  }
  if (mdusaorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdusaorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdusaorder, submessage_arena);
    }
    
  } else {
    
  }
  mdusaorder_ = mdusaorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdUSAOrder)
}

// .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
inline bool MarketData::has_mdusatransaction() const {
  return this != internal_default_instance() && mdusatransaction_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDUSATransaction& MarketData::mdusatransaction() const {
  const ::com::htsc::mdc::insight::model::MDUSATransaction* p = mdusatransaction_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdUSATransaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDUSATransaction*>(
      &::com::htsc::mdc::insight::model::_MDUSATransaction_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDUSATransaction* MarketData::release_mdusatransaction() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdUSATransaction)
  
  ::com::htsc::mdc::insight::model::MDUSATransaction* temp = mdusatransaction_;
  mdusatransaction_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDUSATransaction* MarketData::mutable_mdusatransaction() {
  
  if (mdusatransaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDUSATransaction>(GetArenaNoVirtual());
    mdusatransaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdUSATransaction)
  return mdusatransaction_;
}
inline void MarketData::set_allocated_mdusatransaction(::com::htsc::mdc::insight::model::MDUSATransaction* mdusatransaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdusatransaction_);
  }
  if (mdusatransaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdusatransaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdusatransaction, submessage_arena);
    }
    
  } else {
    
  }
  mdusatransaction_ = mdusatransaction;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdUSATransaction)
}

// .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
inline bool MarketData::has_mdslorder() const {
  return this != internal_default_instance() && mdslorder_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDSLOrder& MarketData::mdslorder() const {
  const ::com::htsc::mdc::insight::model::MDSLOrder* p = mdslorder_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdSLOrder)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSLOrder*>(
      &::com::htsc::mdc::insight::model::_MDSLOrder_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDSLOrder* MarketData::release_mdslorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdSLOrder)
  
  ::com::htsc::mdc::insight::model::MDSLOrder* temp = mdslorder_;
  mdslorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSLOrder* MarketData::mutable_mdslorder() {
  
  if (mdslorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSLOrder>(GetArenaNoVirtual());
    mdslorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdSLOrder)
  return mdslorder_;
}
inline void MarketData::set_allocated_mdslorder(::com::htsc::mdc::insight::model::MDSLOrder* mdslorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdslorder_);
  }
  if (mdslorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdslorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdslorder, submessage_arena);
    }
    
  } else {
    
  }
  mdslorder_ = mdslorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdSLOrder)
}

// .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
inline bool MarketData::has_mdsltransaction() const {
  return this != internal_default_instance() && mdsltransaction_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDSLTransaction& MarketData::mdsltransaction() const {
  const ::com::htsc::mdc::insight::model::MDSLTransaction* p = mdsltransaction_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdSLTransaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSLTransaction*>(
      &::com::htsc::mdc::insight::model::_MDSLTransaction_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDSLTransaction* MarketData::release_mdsltransaction() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdSLTransaction)
  
  ::com::htsc::mdc::insight::model::MDSLTransaction* temp = mdsltransaction_;
  mdsltransaction_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSLTransaction* MarketData::mutable_mdsltransaction() {
  
  if (mdsltransaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSLTransaction>(GetArenaNoVirtual());
    mdsltransaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdSLTransaction)
  return mdsltransaction_;
}
inline void MarketData::set_allocated_mdsltransaction(::com::htsc::mdc::insight::model::MDSLTransaction* mdsltransaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdsltransaction_);
  }
  if (mdsltransaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdsltransaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdsltransaction, submessage_arena);
    }
    
  } else {
    
  }
  mdsltransaction_ = mdsltransaction;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdSLTransaction)
}

// .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
inline bool MarketData::has_mdhkgreymarket() const {
  return this != internal_default_instance() && mdhkgreymarket_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket& MarketData::mdhkgreymarket() const {
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket* p = mdhkgreymarket_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdHKGreyMarket)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDHKGreyMarket*>(
      &::com::htsc::mdc::insight::model::_MDHKGreyMarket_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket* MarketData::release_mdhkgreymarket() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdHKGreyMarket)
  
  ::com::htsc::mdc::insight::model::MDHKGreyMarket* temp = mdhkgreymarket_;
  mdhkgreymarket_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket* MarketData::mutable_mdhkgreymarket() {
  
  if (mdhkgreymarket_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket>(GetArenaNoVirtual());
    mdhkgreymarket_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdHKGreyMarket)
  return mdhkgreymarket_;
}
inline void MarketData::set_allocated_mdhkgreymarket(::com::htsc::mdc::insight::model::MDHKGreyMarket* mdhkgreymarket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdhkgreymarket_);
  }
  if (mdhkgreymarket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdhkgreymarket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdhkgreymarket, submessage_arena);
    }
    
  } else {
    
  }
  mdhkgreymarket_ = mdhkgreymarket;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdHKGreyMarket)
}

// .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
inline bool MarketData::has_mdslindicativequote() const {
  return this != internal_default_instance() && mdslindicativequote_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDSLIndicativeQuote& MarketData::mdslindicativequote() const {
  const ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* p = mdslindicativequote_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdSLIndicativeQuote)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSLIndicativeQuote*>(
      &::com::htsc::mdc::insight::model::_MDSLIndicativeQuote_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* MarketData::release_mdslindicativequote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdSLIndicativeQuote)
  
  ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* temp = mdslindicativequote_;
  mdslindicativequote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* MarketData::mutable_mdslindicativequote() {
  
  if (mdslindicativequote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSLIndicativeQuote>(GetArenaNoVirtual());
    mdslindicativequote_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdSLIndicativeQuote)
  return mdslindicativequote_;
}
inline void MarketData::set_allocated_mdslindicativequote(::com::htsc::mdc::insight::model::MDSLIndicativeQuote* mdslindicativequote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdslindicativequote_);
  }
  if (mdslindicativequote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdslindicativequote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdslindicativequote, submessage_arena);
    }
    
  } else {
    
  }
  mdslindicativequote_ = mdslindicativequote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdSLIndicativeQuote)
}

// .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
inline bool MarketData::has_mdslstatistics() const {
  return this != internal_default_instance() && mdslstatistics_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDSLStatistics& MarketData::mdslstatistics() const {
  const ::com::htsc::mdc::insight::model::MDSLStatistics* p = mdslstatistics_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdSLStatistics)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSLStatistics*>(
      &::com::htsc::mdc::insight::model::_MDSLStatistics_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDSLStatistics* MarketData::release_mdslstatistics() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdSLStatistics)
  
  ::com::htsc::mdc::insight::model::MDSLStatistics* temp = mdslstatistics_;
  mdslstatistics_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSLStatistics* MarketData::mutable_mdslstatistics() {
  
  if (mdslstatistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSLStatistics>(GetArenaNoVirtual());
    mdslstatistics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdSLStatistics)
  return mdslstatistics_;
}
inline void MarketData::set_allocated_mdslstatistics(::com::htsc::mdc::insight::model::MDSLStatistics* mdslstatistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdslstatistics_);
  }
  if (mdslstatistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdslstatistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdslstatistics, submessage_arena);
    }
    
  } else {
    
  }
  mdslstatistics_ = mdslstatistics;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdSLStatistics)
}

// .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
inline bool MarketData::has_mdusaquote() const {
  return this != internal_default_instance() && mdusaquote_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MDUSAQuote& MarketData::mdusaquote() const {
  const ::com::htsc::mdc::insight::model::MDUSAQuote* p = mdusaquote_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketData.mdUSAQuote)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MDUSAQuote*>(
      &::com::htsc::mdc::insight::model::_MDUSAQuote_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MDUSAQuote* MarketData::release_mdusaquote() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketData.mdUSAQuote)
  
  ::com::htsc::mdc::insight::model::MDUSAQuote* temp = mdusaquote_;
  mdusaquote_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDUSAQuote* MarketData::mutable_mdusaquote() {
  
  if (mdusaquote_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDUSAQuote>(GetArenaNoVirtual());
    mdusaquote_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketData.mdUSAQuote)
  return mdusaquote_;
}
inline void MarketData::set_allocated_mdusaquote(::com::htsc::mdc::insight::model::MDUSAQuote* mdusaquote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdusaquote_);
  }
  if (mdusaquote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdusaquote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdusaquote, submessage_arena);
    }
    
  } else {
    
  }
  mdusaquote_ = mdusaquote;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketData.mdUSAQuote)
}

// -------------------------------------------------------------------

// MarketDataStream

// bool isCompressed = 1;
inline void MarketDataStream::clear_iscompressed() {
  iscompressed_ = false;
}
inline bool MarketDataStream::iscompressed() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketDataStream.isCompressed)
  return iscompressed_;
}
inline void MarketDataStream::set_iscompressed(bool value) {
  
  iscompressed_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MarketDataStream.isCompressed)
}

// int32 originalLength = 2;
inline void MarketDataStream::clear_originallength() {
  originallength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataStream::originallength() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketDataStream.originalLength)
  return originallength_;
}
inline void MarketDataStream::set_originallength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originallength_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MarketDataStream.originalLength)
}

// bytes compressedData = 3;
inline void MarketDataStream::clear_compresseddata() {
  compresseddata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MarketDataStream::compresseddata() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketDataStream.compressedData)
  return compresseddata_.GetNoArena();
}
inline void MarketDataStream::set_compresseddata(const std::string& value) {
  
  compresseddata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MarketDataStream.compressedData)
}
inline void MarketDataStream::set_compresseddata(std::string&& value) {
  
  compresseddata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MarketDataStream.compressedData)
}
inline void MarketDataStream::set_compresseddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  compresseddata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MarketDataStream.compressedData)
}
inline void MarketDataStream::set_compresseddata(const void* value, size_t size) {
  
  compresseddata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MarketDataStream.compressedData)
}
inline std::string* MarketDataStream::mutable_compresseddata() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketDataStream.compressedData)
  return compresseddata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MarketDataStream::release_compresseddata() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketDataStream.compressedData)
  
  return compresseddata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MarketDataStream::set_allocated_compresseddata(std::string* compresseddata) {
  if (compresseddata != nullptr) {
    
  } else {
    
  }
  compresseddata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compresseddata);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketDataStream.compressedData)
}

// .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
inline bool MarketDataStream::has_marketdatalist() const {
  return this != internal_default_instance() && marketdatalist_ != nullptr;
}
inline void MarketDataStream::clear_marketdatalist() {
  if (GetArenaNoVirtual() == nullptr && marketdatalist_ != nullptr) {
    delete marketdatalist_;
  }
  marketdatalist_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::MarketDataList& MarketDataStream::marketdatalist() const {
  const ::com::htsc::mdc::insight::model::MarketDataList* p = marketdatalist_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketDataStream.marketDataList)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MarketDataList*>(
      &::com::htsc::mdc::insight::model::_MarketDataList_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MarketDataList* MarketDataStream::release_marketdatalist() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MarketDataStream.marketDataList)
  
  ::com::htsc::mdc::insight::model::MarketDataList* temp = marketdatalist_;
  marketdatalist_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataList* MarketDataStream::mutable_marketdatalist() {
  
  if (marketdatalist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketDataList>(GetArenaNoVirtual());
    marketdatalist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketDataStream.marketDataList)
  return marketdatalist_;
}
inline void MarketDataStream::set_allocated_marketdatalist(::com::htsc::mdc::insight::model::MarketDataList* marketdatalist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete marketdatalist_;
  }
  if (marketdatalist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marketdatalist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketdatalist, submessage_arena);
    }
    
  } else {
    
  }
  marketdatalist_ = marketdatalist;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MarketDataStream.marketDataList)
}

// int32 totalNumber = 5;
inline void MarketDataStream::clear_totalnumber() {
  totalnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataStream::totalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketDataStream.totalNumber)
  return totalnumber_;
}
inline void MarketDataStream::set_totalnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MarketDataStream.totalNumber)
}

// int32 serial = 6;
inline void MarketDataStream::clear_serial() {
  serial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataStream::serial() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketDataStream.serial)
  return serial_;
}
inline void MarketDataStream::set_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MarketDataStream.serial)
}

// bool isFinished = 7;
inline void MarketDataStream::clear_isfinished() {
  isfinished_ = false;
}
inline bool MarketDataStream::isfinished() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketDataStream.isFinished)
  return isfinished_;
}
inline void MarketDataStream::set_isfinished(bool value) {
  
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MarketDataStream.isFinished)
}

// -------------------------------------------------------------------

// MarketDataList

// repeated .com.htsc.mdc.insight.model.MarketData marketDatas = 1;
inline int MarketDataList::marketdatas_size() const {
  return marketdatas_.size();
}
inline void MarketDataList::clear_marketdatas() {
  marketdatas_.Clear();
}
inline ::com::htsc::mdc::insight::model::MarketData* MarketDataList::mutable_marketdatas(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MarketDataList.marketDatas)
  return marketdatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MarketData >*
MarketDataList::mutable_marketdatas() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MarketDataList.marketDatas)
  return &marketdatas_;
}
inline const ::com::htsc::mdc::insight::model::MarketData& MarketDataList::marketdatas(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MarketDataList.marketDatas)
  return marketdatas_.Get(index);
}
inline ::com::htsc::mdc::insight::model::MarketData* MarketDataList::add_marketdatas() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MarketDataList.marketDatas)
  return marketdatas_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MarketData >&
MarketDataList::marketdatas() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MarketDataList.marketDatas)
  return marketdatas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MarketData_2eproto
