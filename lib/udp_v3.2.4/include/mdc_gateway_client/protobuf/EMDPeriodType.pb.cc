// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EMDPeriodType.proto

#include "EMDPeriodType.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace htsc {
namespace mdc {
namespace model {
}  // namespace model
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_EMDPeriodType_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_EMDPeriodType_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_EMDPeriodType_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_EMDPeriodType_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_EMDPeriodType_2eproto[] =
  "\n\023EMDPeriodType.proto\022\022com.htsc.mdc.mode"
  "l*\311\002\n\rEMDPeriodType\022\021\n\rDefaultPeriod\020\000\022\016"
  "\n\nPeriod1Min\020\001\022\014\n\010Period1D\020\002\022\016\n\nPeriod5M"
  "in\020\003\022\017\n\013Period15Min\020\004\022\017\n\013Period30Min\020\005\022\014"
  "\n\010Period1H\020\006\022\014\n\010Period1S\020\007\022\014\n\010Period3S\020\010"
  "\022\014\n\010Period5S\020\t\022\r\n\tPeriod15S\020\n\022\r\n\tPeriod3"
  "0S\020\013\022\014\n\010Period2H\020\014\022\014\n\010Period1W\020\r\022\r\n\tPeri"
  "od15D\020\016\022\020\n\014Period1Month\020\017\022\020\n\014Period3Mont"
  "h\020\020\022\020\n\014Period4Month\020\021\022\020\n\014Period6Month\020\022\022"
  "\014\n\010Period1Y\020\023B.\n\022com.htsc.mdc.modelB\023EMD"
  "PeriodTypeProtosH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_EMDPeriodType_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_EMDPeriodType_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_EMDPeriodType_2eproto_once;
static bool descriptor_table_EMDPeriodType_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EMDPeriodType_2eproto = {
  &descriptor_table_EMDPeriodType_2eproto_initialized, descriptor_table_protodef_EMDPeriodType_2eproto, "EMDPeriodType.proto", 429,
  &descriptor_table_EMDPeriodType_2eproto_once, descriptor_table_EMDPeriodType_2eproto_sccs, descriptor_table_EMDPeriodType_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_EMDPeriodType_2eproto::offsets,
  file_level_metadata_EMDPeriodType_2eproto, 0, file_level_enum_descriptors_EMDPeriodType_2eproto, file_level_service_descriptors_EMDPeriodType_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_EMDPeriodType_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_EMDPeriodType_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMDPeriodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_EMDPeriodType_2eproto);
  return file_level_enum_descriptors_EMDPeriodType_2eproto[0];
}
bool EMDPeriodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
