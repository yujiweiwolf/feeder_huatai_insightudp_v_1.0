// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADKLine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADKLine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADKLine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "EMDPeriodType.pb.h"
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADKLine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADKLine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADKLine_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADKLine;
class ADKLineDefaultTypeInternal;
extern ADKLineDefaultTypeInternal _ADKLine_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADKLine* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADKLine>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADKLine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADKLine) */ {
 public:
  ADKLine();
  virtual ~ADKLine();

  ADKLine(const ADKLine& from);
  ADKLine(ADKLine&& from) noexcept
    : ADKLine() {
    *this = ::std::move(from);
  }

  inline ADKLine& operator=(const ADKLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADKLine& operator=(ADKLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ADKLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADKLine* internal_default_instance() {
    return reinterpret_cast<const ADKLine*>(
               &_ADKLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ADKLine* other);
  friend void swap(ADKLine& a, ADKLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ADKLine* New() const final {
    return CreateMaybeMessage<ADKLine>(nullptr);
  }

  ADKLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADKLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADKLine& from);
  void MergeFrom(const ADKLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADKLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADKLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ADKLine_2eproto);
    return ::descriptor_table_ADKLine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 5;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int64 OpenPx = 8;
  void clear_openpx();
  static const int kOpenPxFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 openpx() const;
  void set_openpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ClosePx = 9;
  void clear_closepx();
  static const int kClosePxFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 closepx() const;
  void set_closepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HighPx = 10;
  void clear_highpx();
  static const int kHighPxFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 highpx() const;
  void set_highpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LowPx = 11;
  void clear_lowpx();
  static const int kLowPxFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 lowpx() const;
  void set_lowpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 NumTrades = 12;
  void clear_numtrades();
  static const int kNumTradesFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 numtrades() const;
  void set_numtrades(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
  void clear_periodtype();
  static const int kPeriodTypeFieldNumber = 7;
  ::com::htsc::mdc::model::EMDPeriodType periodtype() const;
  void set_periodtype(::com::htsc::mdc::model::EMDPeriodType value);

  // int32 ExchangeDate = 18;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate() const;
  void set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 TotalVolumeTrade = 13;
  void clear_totalvolumetrade();
  static const int kTotalVolumeTradeFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolumetrade() const;
  void set_totalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalValueTrade = 14;
  void clear_totalvaluetrade();
  static const int kTotalValueTradeFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvaluetrade() const;
  void set_totalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 IOPV = 15;
  void clear_iopv();
  static const int kIOPVFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 iopv() const;
  void set_iopv(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OpenInterest = 16;
  void clear_openinterest();
  static const int kOpenInterestFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int64 openinterest() const;
  void set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 SettlePrice = 17;
  void clear_settleprice();
  static const int kSettlePriceFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int64 settleprice() const;
  void set_settleprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ExchangeTime = 19;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime() const;
  void set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 KLineCategory = 20;
  void clear_klinecategory();
  static const int kKLineCategoryFieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int32 klinecategory() const;
  void set_klinecategory(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 AfterHoursNumTrades = 21;
  void clear_afterhoursnumtrades();
  static const int kAfterHoursNumTradesFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhoursnumtrades() const;
  void set_afterhoursnumtrades(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AfterHoursTotalVolumeTrade = 22;
  void clear_afterhourstotalvolumetrade();
  static const int kAfterHoursTotalVolumeTradeFieldNumber = 22;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourstotalvolumetrade() const;
  void set_afterhourstotalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AfterHoursTotalValueTrade = 23;
  void clear_afterhourstotalvaluetrade();
  static const int kAfterHoursTotalValueTradeFieldNumber = 23;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourstotalvaluetrade() const;
  void set_afterhourstotalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreClosePx = 24;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 24;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx() const;
  void set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreCloseYield = 25;
  void clear_precloseyield();
  static const int kPreCloseYieldFieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::int64 precloseyield() const;
  void set_precloseyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreWeightedAvgPx = 26;
  void clear_preweightedavgpx();
  static const int kPreWeightedAvgPxFieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::int64 preweightedavgpx() const;
  void set_preweightedavgpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreWeightedAvgYield = 27;
  void clear_preweightedavgyield();
  static const int kPreWeightedAvgYieldFieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::int64 preweightedavgyield() const;
  void set_preweightedavgyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 CloseWeightedAvgPx = 28;
  void clear_closeweightedavgpx();
  static const int kCloseWeightedAvgPxFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int64 closeweightedavgpx() const;
  void set_closeweightedavgpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 CloseWeightedAvgYield = 29;
  void clear_closeweightedavgyield();
  static const int kCloseWeightedAvgYieldFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int64 closeweightedavgyield() const;
  void set_closeweightedavgyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OpenYield = 30;
  void clear_openyield();
  static const int kOpenYieldFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::int64 openyield() const;
  void set_openyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HighYield = 31;
  void clear_highyield();
  static const int kHighYieldFieldNumber = 31;
  ::PROTOBUF_NAMESPACE_ID::int64 highyield() const;
  void set_highyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LowYield = 32;
  void clear_lowyield();
  static const int kLowYieldFieldNumber = 32;
  ::PROTOBUF_NAMESPACE_ID::int64 lowyield() const;
  void set_lowyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 CloseYield = 33;
  void clear_closeyield();
  static const int kCloseYieldFieldNumber = 33;
  ::PROTOBUF_NAMESPACE_ID::int64 closeyield() const;
  void set_closeyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 DataMultiplePowerOf10 = 34;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 34;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADKLine)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int64 openpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 closepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 highpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 lowpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 numtrades_;
  int periodtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 iopv_;
  ::PROTOBUF_NAMESPACE_ID::int64 openinterest_;
  ::PROTOBUF_NAMESPACE_ID::int64 settleprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 klinecategory_;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhoursnumtrades_;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourstotalvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 afterhourstotalvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 precloseyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 preweightedavgpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 preweightedavgyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 closeweightedavgpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 closeweightedavgyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 openyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 highyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 lowyield_;
  ::PROTOBUF_NAMESPACE_ID::int64 closeyield_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ADKLine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADKLine

// string HTSCSecurityID = 1;
inline void ADKLine::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ADKLine::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void ADKLine::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}
inline void ADKLine::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}
inline void ADKLine::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}
inline void ADKLine::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}
inline std::string* ADKLine::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ADKLine::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ADKLine::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADKLine::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADKLine::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.MDDate)
  return mddate_;
}
inline void ADKLine::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.MDDate)
}

// int32 MDTime = 3;
inline void ADKLine::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADKLine::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.MDTime)
  return mdtime_;
}
inline void ADKLine::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADKLine::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.DataTimestamp)
  return datatimestamp_;
}
inline void ADKLine::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADKLine::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADKLine::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void ADKLine::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADKLine::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADKLine::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void ADKLine::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.securityType)
}

// .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
inline void ADKLine::clear_periodtype() {
  periodtype_ = 0;
}
inline ::com::htsc::mdc::model::EMDPeriodType ADKLine::periodtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PeriodType)
  return static_cast< ::com::htsc::mdc::model::EMDPeriodType >(periodtype_);
}
inline void ADKLine::set_periodtype(::com::htsc::mdc::model::EMDPeriodType value) {
  
  periodtype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PeriodType)
}

// int64 OpenPx = 8;
inline void ADKLine::clear_openpx() {
  openpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenPx)
  return openpx_;
}
inline void ADKLine::set_openpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenPx)
}

// int64 ClosePx = 9;
inline void ADKLine::clear_closepx() {
  closepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ClosePx)
  return closepx_;
}
inline void ADKLine::set_closepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ClosePx)
}

// int64 HighPx = 10;
inline void ADKLine::clear_highpx() {
  highpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HighPx)
  return highpx_;
}
inline void ADKLine::set_highpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  highpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HighPx)
}

// int64 LowPx = 11;
inline void ADKLine::clear_lowpx() {
  lowpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.LowPx)
  return lowpx_;
}
inline void ADKLine::set_lowpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.LowPx)
}

// int64 NumTrades = 12;
inline void ADKLine::clear_numtrades() {
  numtrades_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.NumTrades)
  return numtrades_;
}
inline void ADKLine::set_numtrades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.NumTrades)
}

// int64 TotalVolumeTrade = 13;
inline void ADKLine::clear_totalvolumetrade() {
  totalvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.TotalVolumeTrade)
  return totalvolumetrade_;
}
inline void ADKLine::set_totalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.TotalVolumeTrade)
}

// int64 TotalValueTrade = 14;
inline void ADKLine::clear_totalvaluetrade() {
  totalvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.TotalValueTrade)
  return totalvaluetrade_;
}
inline void ADKLine::set_totalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.TotalValueTrade)
}

// int64 IOPV = 15;
inline void ADKLine::clear_iopv() {
  iopv_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::iopv() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.IOPV)
  return iopv_;
}
inline void ADKLine::set_iopv(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iopv_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.IOPV)
}

// int64 OpenInterest = 16;
inline void ADKLine::clear_openinterest() {
  openinterest_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::openinterest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenInterest)
  return openinterest_;
}
inline void ADKLine::set_openinterest(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenInterest)
}

// int64 SettlePrice = 17;
inline void ADKLine::clear_settleprice() {
  settleprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::settleprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.SettlePrice)
  return settleprice_;
}
inline void ADKLine::set_settleprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  settleprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.SettlePrice)
}

// int32 ExchangeDate = 18;
inline void ADKLine::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADKLine::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ExchangeDate)
  return exchangedate_;
}
inline void ADKLine::set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ExchangeDate)
}

// int32 ExchangeTime = 19;
inline void ADKLine::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADKLine::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ExchangeTime)
  return exchangetime_;
}
inline void ADKLine::set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ExchangeTime)
}

// int32 KLineCategory = 20;
inline void ADKLine::clear_klinecategory() {
  klinecategory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADKLine::klinecategory() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.KLineCategory)
  return klinecategory_;
}
inline void ADKLine::set_klinecategory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  klinecategory_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.KLineCategory)
}

// int64 AfterHoursNumTrades = 21;
inline void ADKLine::clear_afterhoursnumtrades() {
  afterhoursnumtrades_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::afterhoursnumtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursNumTrades)
  return afterhoursnumtrades_;
}
inline void ADKLine::set_afterhoursnumtrades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  afterhoursnumtrades_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursNumTrades)
}

// int64 AfterHoursTotalVolumeTrade = 22;
inline void ADKLine::clear_afterhourstotalvolumetrade() {
  afterhourstotalvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::afterhourstotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalVolumeTrade)
  return afterhourstotalvolumetrade_;
}
inline void ADKLine::set_afterhourstotalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  afterhourstotalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalVolumeTrade)
}

// int64 AfterHoursTotalValueTrade = 23;
inline void ADKLine::clear_afterhourstotalvaluetrade() {
  afterhourstotalvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::afterhourstotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalValueTrade)
  return afterhourstotalvaluetrade_;
}
inline void ADKLine::set_afterhourstotalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  afterhourstotalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalValueTrade)
}

// int64 PreClosePx = 24;
inline void ADKLine::clear_preclosepx() {
  preclosepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreClosePx)
  return preclosepx_;
}
inline void ADKLine::set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreClosePx)
}

// int64 PreCloseYield = 25;
inline void ADKLine::clear_precloseyield() {
  precloseyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::precloseyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreCloseYield)
  return precloseyield_;
}
inline void ADKLine::set_precloseyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  precloseyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreCloseYield)
}

// int64 PreWeightedAvgPx = 26;
inline void ADKLine::clear_preweightedavgpx() {
  preweightedavgpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::preweightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgPx)
  return preweightedavgpx_;
}
inline void ADKLine::set_preweightedavgpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preweightedavgpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgPx)
}

// int64 PreWeightedAvgYield = 27;
inline void ADKLine::clear_preweightedavgyield() {
  preweightedavgyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::preweightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgYield)
  return preweightedavgyield_;
}
inline void ADKLine::set_preweightedavgyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preweightedavgyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgYield)
}

// int64 CloseWeightedAvgPx = 28;
inline void ADKLine::clear_closeweightedavgpx() {
  closeweightedavgpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::closeweightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgPx)
  return closeweightedavgpx_;
}
inline void ADKLine::set_closeweightedavgpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closeweightedavgpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgPx)
}

// int64 CloseWeightedAvgYield = 29;
inline void ADKLine::clear_closeweightedavgyield() {
  closeweightedavgyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::closeweightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgYield)
  return closeweightedavgyield_;
}
inline void ADKLine::set_closeweightedavgyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closeweightedavgyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgYield)
}

// int64 OpenYield = 30;
inline void ADKLine::clear_openyield() {
  openyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::openyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenYield)
  return openyield_;
}
inline void ADKLine::set_openyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenYield)
}

// int64 HighYield = 31;
inline void ADKLine::clear_highyield() {
  highyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::highyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HighYield)
  return highyield_;
}
inline void ADKLine::set_highyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  highyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HighYield)
}

// int64 LowYield = 32;
inline void ADKLine::clear_lowyield() {
  lowyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::lowyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.LowYield)
  return lowyield_;
}
inline void ADKLine::set_lowyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lowyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.LowYield)
}

// int64 CloseYield = 33;
inline void ADKLine::clear_closeyield() {
  closeyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADKLine::closeyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseYield)
  return closeyield_;
}
inline void ADKLine::set_closeyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closeyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseYield)
}

// int32 DataMultiplePowerOf10 = 34;
inline void ADKLine::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADKLine::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void ADKLine::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADKLine_2eproto
