// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDForex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDForex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDForex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDForex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDForex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDForex_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDForex;
class MDForexDefaultTypeInternal;
extern MDForexDefaultTypeInternal _MDForex_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDForex* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDForex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDForex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDForex) */ {
 public:
  MDForex();
  virtual ~MDForex();

  MDForex(const MDForex& from);
  MDForex(MDForex&& from) noexcept
    : MDForex() {
    *this = ::std::move(from);
  }

  inline MDForex& operator=(const MDForex& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDForex& operator=(MDForex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDForex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDForex* internal_default_instance() {
    return reinterpret_cast<const MDForex*>(
               &_MDForex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDForex* other);
  friend void swap(MDForex& a, MDForex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDForex* New() const final {
    return CreateMaybeMessage<MDForex>(nullptr);
  }

  MDForex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDForex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDForex& from);
  void MergeFrom(const MDForex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDForex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDForex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDForex_2eproto);
    return ::descriptor_table_MDForex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 BuyPriceQueue = 51 [packed = true];
  int buypricequeue_size() const;
  void clear_buypricequeue();
  static const int kBuyPriceQueueFieldNumber = 51;
  ::PROTOBUF_NAMESPACE_ID::int64 buypricequeue(int index) const;
  void set_buypricequeue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buypricequeue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buypricequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buypricequeue();

  // repeated int64 BuyOrderQtyQueue = 52 [packed = true];
  int buyorderqtyqueue_size() const;
  void clear_buyorderqtyqueue();
  static const int kBuyOrderQtyQueueFieldNumber = 52;
  ::PROTOBUF_NAMESPACE_ID::int64 buyorderqtyqueue(int index) const;
  void set_buyorderqtyqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buyorderqtyqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buyorderqtyqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buyorderqtyqueue();

  // repeated int64 SellPriceQueue = 53 [packed = true];
  int sellpricequeue_size() const;
  void clear_sellpricequeue();
  static const int kSellPriceQueueFieldNumber = 53;
  ::PROTOBUF_NAMESPACE_ID::int64 sellpricequeue(int index) const;
  void set_sellpricequeue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellpricequeue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellpricequeue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellpricequeue();

  // repeated int64 SellOrderQtyQueue = 54 [packed = true];
  int sellorderqtyqueue_size() const;
  void clear_sellorderqtyqueue();
  static const int kSellOrderQtyQueueFieldNumber = 54;
  ::PROTOBUF_NAMESPACE_ID::int64 sellorderqtyqueue(int index) const;
  void set_sellorderqtyqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellorderqtyqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellorderqtyqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellorderqtyqueue();

  // repeated int64 BuyOrderQueue = 55 [packed = true];
  int buyorderqueue_size() const;
  void clear_buyorderqueue();
  static const int kBuyOrderQueueFieldNumber = 55;
  ::PROTOBUF_NAMESPACE_ID::int64 buyorderqueue(int index) const;
  void set_buyorderqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buyorderqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buyorderqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buyorderqueue();

  // repeated int64 SellOrderQueue = 56 [packed = true];
  int sellorderqueue_size() const;
  void clear_sellorderqueue();
  static const int kSellOrderQueueFieldNumber = 56;
  ::PROTOBUF_NAMESPACE_ID::int64 sellorderqueue(int index) const;
  void set_sellorderqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellorderqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellorderqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellorderqueue();

  // repeated int64 BuyNumOrdersQueue = 57 [packed = true];
  int buynumordersqueue_size() const;
  void clear_buynumordersqueue();
  static const int kBuyNumOrdersQueueFieldNumber = 57;
  ::PROTOBUF_NAMESPACE_ID::int64 buynumordersqueue(int index) const;
  void set_buynumordersqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buynumordersqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buynumordersqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buynumordersqueue();

  // repeated int64 SellNumOrdersQueue = 58 [packed = true];
  int sellnumordersqueue_size() const;
  void clear_sellnumordersqueue();
  static const int kSellNumOrdersQueueFieldNumber = 58;
  ::PROTOBUF_NAMESPACE_ID::int64 sellnumordersqueue(int index) const;
  void set_sellnumordersqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sellnumordersqueue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sellnumordersqueue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sellnumordersqueue();

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 5;
  const std::string& tradingphasecode() const;
  void set_tradingphasecode(const std::string& value);
  void set_tradingphasecode(std::string&& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  std::string* mutable_tradingphasecode();
  std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int64 MaxPx = 8;
  void clear_maxpx();
  static const int kMaxPxFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 maxpx() const;
  void set_maxpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MinPx = 9;
  void clear_minpx();
  static const int kMinPxFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 minpx() const;
  void set_minpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreClosePx = 10;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx() const;
  void set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalVolumeTrade = 11;
  void clear_totalvolumetrade();
  static const int kTotalVolumeTradeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolumetrade() const;
  void set_totalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalValueTrade = 12;
  void clear_totalvaluetrade();
  static const int kTotalValueTradeFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvaluetrade() const;
  void set_totalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LastPx = 13;
  void clear_lastpx();
  static const int kLastPxFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx() const;
  void set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OpenPx = 14;
  void clear_openpx();
  static const int kOpenPxFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 openpx() const;
  void set_openpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ClosePx = 15;
  void clear_closepx();
  static const int kClosePxFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 closepx() const;
  void set_closepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HighPx = 16;
  void clear_highpx();
  static const int kHighPxFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int64 highpx() const;
  void set_highpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LowPx = 17;
  void clear_lowpx();
  static const int kLowPxFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int64 lowpx() const;
  void set_lowpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ExchangeDate = 18;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate() const;
  void set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ExchangeTime = 19;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime() const;
  void set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 DataMultiplePowerOf10 = 59;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 59;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDForex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buypricequeue_;
  mutable std::atomic<int> _buypricequeue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buyorderqtyqueue_;
  mutable std::atomic<int> _buyorderqtyqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellpricequeue_;
  mutable std::atomic<int> _sellpricequeue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellorderqtyqueue_;
  mutable std::atomic<int> _sellorderqtyqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buyorderqueue_;
  mutable std::atomic<int> _buyorderqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellorderqueue_;
  mutable std::atomic<int> _sellorderqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buynumordersqueue_;
  mutable std::atomic<int> _buynumordersqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sellnumordersqueue_;
  mutable std::atomic<int> _sellnumordersqueue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 minpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 openpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 closepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 highpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 lowpx_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDForex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDForex

// string HTSCSecurityID = 1;
inline void MDForex::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDForex::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void MDForex::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
}
inline void MDForex::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
}
inline void MDForex::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
}
inline void MDForex::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
}
inline std::string* MDForex::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDForex::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDForex::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDForex.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDForex::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDForex::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MDDate)
  return mddate_;
}
inline void MDForex::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MDDate)
}

// int32 MDTime = 3;
inline void MDForex::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDForex::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MDTime)
  return mdtime_;
}
inline void MDForex::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDForex::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.DataTimestamp)
  return datatimestamp_;
}
inline void MDForex::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDForex::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDForex::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
  return tradingphasecode_.GetNoArena();
}
inline void MDForex::set_tradingphasecode(const std::string& value) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
}
inline void MDForex::set_tradingphasecode(std::string&& value) {
  
  tradingphasecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
}
inline void MDForex::set_tradingphasecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
}
inline void MDForex::set_tradingphasecode(const char* value, size_t size) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
}
inline std::string* MDForex::mutable_tradingphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDForex::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
  
  return tradingphasecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDForex::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  tradingphasecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDForex.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDForex::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDForex::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void MDForex::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDForex::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDForex::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void MDForex::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.securityType)
}

// int64 MaxPx = 8;
inline void MDForex::clear_maxpx() {
  maxpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MaxPx)
  return maxpx_;
}
inline void MDForex::set_maxpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MaxPx)
}

// int64 MinPx = 9;
inline void MDForex::clear_minpx() {
  minpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.MinPx)
  return minpx_;
}
inline void MDForex::set_minpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.MinPx)
}

// int64 PreClosePx = 10;
inline void MDForex::clear_preclosepx() {
  preclosepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.PreClosePx)
  return preclosepx_;
}
inline void MDForex::set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.PreClosePx)
}

// int64 TotalVolumeTrade = 11;
inline void MDForex::clear_totalvolumetrade() {
  totalvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.TotalVolumeTrade)
  return totalvolumetrade_;
}
inline void MDForex::set_totalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.TotalVolumeTrade)
}

// int64 TotalValueTrade = 12;
inline void MDForex::clear_totalvaluetrade() {
  totalvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.TotalValueTrade)
  return totalvaluetrade_;
}
inline void MDForex::set_totalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.TotalValueTrade)
}

// int64 LastPx = 13;
inline void MDForex::clear_lastpx() {
  lastpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.LastPx)
  return lastpx_;
}
inline void MDForex::set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.LastPx)
}

// int64 OpenPx = 14;
inline void MDForex::clear_openpx() {
  openpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.OpenPx)
  return openpx_;
}
inline void MDForex::set_openpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.OpenPx)
}

// int64 ClosePx = 15;
inline void MDForex::clear_closepx() {
  closepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.ClosePx)
  return closepx_;
}
inline void MDForex::set_closepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.ClosePx)
}

// int64 HighPx = 16;
inline void MDForex::clear_highpx() {
  highpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.HighPx)
  return highpx_;
}
inline void MDForex::set_highpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  highpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.HighPx)
}

// int64 LowPx = 17;
inline void MDForex::clear_lowpx() {
  lowpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.LowPx)
  return lowpx_;
}
inline void MDForex::set_lowpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.LowPx)
}

// int32 ExchangeDate = 18;
inline void MDForex::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDForex::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.ExchangeDate)
  return exchangedate_;
}
inline void MDForex::set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.ExchangeDate)
}

// int32 ExchangeTime = 19;
inline void MDForex::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDForex::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.ExchangeTime)
  return exchangetime_;
}
inline void MDForex::set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.ExchangeTime)
}

// repeated int64 BuyPriceQueue = 51 [packed = true];
inline int MDForex::buypricequeue_size() const {
  return buypricequeue_.size();
}
inline void MDForex::clear_buypricequeue() {
  buypricequeue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::buypricequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
  return buypricequeue_.Get(index);
}
inline void MDForex::set_buypricequeue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buypricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
}
inline void MDForex::add_buypricequeue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buypricequeue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDForex::buypricequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
  return buypricequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDForex::mutable_buypricequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.BuyPriceQueue)
  return &buypricequeue_;
}

// repeated int64 BuyOrderQtyQueue = 52 [packed = true];
inline int MDForex::buyorderqtyqueue_size() const {
  return buyorderqtyqueue_.size();
}
inline void MDForex::clear_buyorderqtyqueue() {
  buyorderqtyqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::buyorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
  return buyorderqtyqueue_.Get(index);
}
inline void MDForex::set_buyorderqtyqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
}
inline void MDForex::add_buyorderqtyqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyorderqtyqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDForex::buyorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
  return buyorderqtyqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDForex::mutable_buyorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.BuyOrderQtyQueue)
  return &buyorderqtyqueue_;
}

// repeated int64 SellPriceQueue = 53 [packed = true];
inline int MDForex::sellpricequeue_size() const {
  return sellpricequeue_.size();
}
inline void MDForex::clear_sellpricequeue() {
  sellpricequeue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::sellpricequeue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
  return sellpricequeue_.Get(index);
}
inline void MDForex::set_sellpricequeue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellpricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
}
inline void MDForex::add_sellpricequeue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellpricequeue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDForex::sellpricequeue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
  return sellpricequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDForex::mutable_sellpricequeue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.SellPriceQueue)
  return &sellpricequeue_;
}

// repeated int64 SellOrderQtyQueue = 54 [packed = true];
inline int MDForex::sellorderqtyqueue_size() const {
  return sellorderqtyqueue_.size();
}
inline void MDForex::clear_sellorderqtyqueue() {
  sellorderqtyqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::sellorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
  return sellorderqtyqueue_.Get(index);
}
inline void MDForex::set_sellorderqtyqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
}
inline void MDForex::add_sellorderqtyqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellorderqtyqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDForex::sellorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
  return sellorderqtyqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDForex::mutable_sellorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.SellOrderQtyQueue)
  return &sellorderqtyqueue_;
}

// repeated int64 BuyOrderQueue = 55 [packed = true];
inline int MDForex::buyorderqueue_size() const {
  return buyorderqueue_.size();
}
inline void MDForex::clear_buyorderqueue() {
  buyorderqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::buyorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
  return buyorderqueue_.Get(index);
}
inline void MDForex::set_buyorderqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
}
inline void MDForex::add_buyorderqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buyorderqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDForex::buyorderqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
  return buyorderqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDForex::mutable_buyorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.BuyOrderQueue)
  return &buyorderqueue_;
}

// repeated int64 SellOrderQueue = 56 [packed = true];
inline int MDForex::sellorderqueue_size() const {
  return sellorderqueue_.size();
}
inline void MDForex::clear_sellorderqueue() {
  sellorderqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::sellorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
  return sellorderqueue_.Get(index);
}
inline void MDForex::set_sellorderqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
}
inline void MDForex::add_sellorderqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellorderqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDForex::sellorderqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
  return sellorderqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDForex::mutable_sellorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.SellOrderQueue)
  return &sellorderqueue_;
}

// repeated int64 BuyNumOrdersQueue = 57 [packed = true];
inline int MDForex::buynumordersqueue_size() const {
  return buynumordersqueue_.size();
}
inline void MDForex::clear_buynumordersqueue() {
  buynumordersqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::buynumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
  return buynumordersqueue_.Get(index);
}
inline void MDForex::set_buynumordersqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buynumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
}
inline void MDForex::add_buynumordersqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buynumordersqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDForex::buynumordersqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
  return buynumordersqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDForex::mutable_buynumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.BuyNumOrdersQueue)
  return &buynumordersqueue_;
}

// repeated int64 SellNumOrdersQueue = 58 [packed = true];
inline int MDForex::sellnumordersqueue_size() const {
  return sellnumordersqueue_.size();
}
inline void MDForex::clear_sellnumordersqueue() {
  sellnumordersqueue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDForex::sellnumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
  return sellnumordersqueue_.Get(index);
}
inline void MDForex::set_sellnumordersqueue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellnumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
}
inline void MDForex::add_sellnumordersqueue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sellnumordersqueue_.Add(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MDForex::sellnumordersqueue() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
  return sellnumordersqueue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MDForex::mutable_sellnumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDForex.SellNumOrdersQueue)
  return &sellnumordersqueue_;
}

// int32 DataMultiplePowerOf10 = 59;
inline void MDForex::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDForex::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDForex.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void MDForex::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDForex.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDForex_2eproto
