// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDBasicInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDBasicInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDBasicInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDBasicInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDBasicInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDBasicInfo_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDBasicInfo;
class MDBasicInfoDefaultTypeInternal;
extern MDBasicInfoDefaultTypeInternal _MDBasicInfo_default_instance_;
class MDBasicInfo_ConstantParam;
class MDBasicInfo_ConstantParamDefaultTypeInternal;
extern MDBasicInfo_ConstantParamDefaultTypeInternal _MDBasicInfo_ConstantParam_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDBasicInfo* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBasicInfo>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDBasicInfo_ConstantParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam) */ {
 public:
  MDBasicInfo_ConstantParam();
  virtual ~MDBasicInfo_ConstantParam();

  MDBasicInfo_ConstantParam(const MDBasicInfo_ConstantParam& from);
  MDBasicInfo_ConstantParam(MDBasicInfo_ConstantParam&& from) noexcept
    : MDBasicInfo_ConstantParam() {
    *this = ::std::move(from);
  }

  inline MDBasicInfo_ConstantParam& operator=(const MDBasicInfo_ConstantParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDBasicInfo_ConstantParam& operator=(MDBasicInfo_ConstantParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDBasicInfo_ConstantParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDBasicInfo_ConstantParam* internal_default_instance() {
    return reinterpret_cast<const MDBasicInfo_ConstantParam*>(
               &_MDBasicInfo_ConstantParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDBasicInfo_ConstantParam* other);
  friend void swap(MDBasicInfo_ConstantParam& a, MDBasicInfo_ConstantParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDBasicInfo_ConstantParam* New() const final {
    return CreateMaybeMessage<MDBasicInfo_ConstantParam>(nullptr);
  }

  MDBasicInfo_ConstantParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDBasicInfo_ConstantParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDBasicInfo_ConstantParam& from);
  void MergeFrom(const MDBasicInfo_ConstantParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDBasicInfo_ConstantParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDBasicInfo_2eproto);
    return ::descriptor_table_MDBasicInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ParamName = 1;
  void clear_paramname();
  static const int kParamNameFieldNumber = 1;
  const std::string& paramname() const;
  void set_paramname(const std::string& value);
  void set_paramname(std::string&& value);
  void set_paramname(const char* value);
  void set_paramname(const char* value, size_t size);
  std::string* mutable_paramname();
  std::string* release_paramname();
  void set_allocated_paramname(std::string* paramname);

  // string ParamValue = 2;
  void clear_paramvalue();
  static const int kParamValueFieldNumber = 2;
  const std::string& paramvalue() const;
  void set_paramvalue(const std::string& value);
  void set_paramvalue(std::string&& value);
  void set_paramvalue(const char* value);
  void set_paramvalue(const char* value, size_t size);
  std::string* mutable_paramvalue();
  std::string* release_paramvalue();
  void set_allocated_paramvalue(std::string* paramvalue);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDBasicInfo_2eproto;
};
// -------------------------------------------------------------------

class MDBasicInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDBasicInfo) */ {
 public:
  MDBasicInfo();
  virtual ~MDBasicInfo();

  MDBasicInfo(const MDBasicInfo& from);
  MDBasicInfo(MDBasicInfo&& from) noexcept
    : MDBasicInfo() {
    *this = ::std::move(from);
  }

  inline MDBasicInfo& operator=(const MDBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDBasicInfo& operator=(MDBasicInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDBasicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDBasicInfo* internal_default_instance() {
    return reinterpret_cast<const MDBasicInfo*>(
               &_MDBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MDBasicInfo* other);
  friend void swap(MDBasicInfo& a, MDBasicInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDBasicInfo* New() const final {
    return CreateMaybeMessage<MDBasicInfo>(nullptr);
  }

  MDBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDBasicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDBasicInfo& from);
  void MergeFrom(const MDBasicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDBasicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDBasicInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDBasicInfo_2eproto);
    return ::descriptor_table_MDBasicInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MDBasicInfo_ConstantParam ConstantParam;

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
  int constantparams_size() const;
  void clear_constantparams();
  static const int kConstantParamsFieldNumber = 171;
  ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* mutable_constantparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >*
      mutable_constantparams();
  const ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam& constantparams(int index) const;
  ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* add_constantparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >&
      constantparams() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // string SecurityID = 2;
  void clear_securityid();
  static const int kSecurityIDFieldNumber = 2;
  const std::string& securityid() const;
  void set_securityid(const std::string& value);
  void set_securityid(std::string&& value);
  void set_securityid(const char* value);
  void set_securityid(const char* value, size_t size);
  std::string* mutable_securityid();
  std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);

  // string Symbol = 3;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);

  // string ChiSpelling = 4;
  void clear_chispelling();
  static const int kChiSpellingFieldNumber = 4;
  const std::string& chispelling() const;
  void set_chispelling(const std::string& value);
  void set_chispelling(std::string&& value);
  void set_chispelling(const char* value);
  void set_chispelling(const char* value, size_t size);
  std::string* mutable_chispelling();
  std::string* release_chispelling();
  void set_allocated_chispelling(std::string* chispelling);

  // string EnglishName = 5;
  void clear_englishname();
  static const int kEnglishNameFieldNumber = 5;
  const std::string& englishname() const;
  void set_englishname(const std::string& value);
  void set_englishname(std::string&& value);
  void set_englishname(const char* value);
  void set_englishname(const char* value, size_t size);
  std::string* mutable_englishname();
  std::string* release_englishname();
  void set_allocated_englishname(std::string* englishname);

  // string SecuritySubType = 8;
  void clear_securitysubtype();
  static const int kSecuritySubTypeFieldNumber = 8;
  const std::string& securitysubtype() const;
  void set_securitysubtype(const std::string& value);
  void set_securitysubtype(std::string&& value);
  void set_securitysubtype(const char* value);
  void set_securitysubtype(const char* value, size_t size);
  std::string* mutable_securitysubtype();
  std::string* release_securitysubtype();
  void set_allocated_securitysubtype(std::string* securitysubtype);

  // string ListDate = 9;
  void clear_listdate();
  static const int kListDateFieldNumber = 9;
  const std::string& listdate() const;
  void set_listdate(const std::string& value);
  void set_listdate(std::string&& value);
  void set_listdate(const char* value);
  void set_listdate(const char* value, size_t size);
  std::string* mutable_listdate();
  std::string* release_listdate();
  void set_allocated_listdate(std::string* listdate);

  // string Currency = 10;
  void clear_currency();
  static const int kCurrencyFieldNumber = 10;
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);

  // string TradingPhaseCode = 14;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 14;
  const std::string& tradingphasecode() const;
  void set_tradingphasecode(const std::string& value);
  void set_tradingphasecode(std::string&& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  std::string* mutable_tradingphasecode();
  std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);

  // string ExchangeDate = 20;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 20;
  const std::string& exchangedate() const;
  void set_exchangedate(const std::string& value);
  void set_exchangedate(std::string&& value);
  void set_exchangedate(const char* value);
  void set_exchangedate(const char* value, size_t size);
  std::string* mutable_exchangedate();
  std::string* release_exchangedate();
  void set_allocated_exchangedate(std::string* exchangedate);

  // string ExchangeSymbol = 21;
  void clear_exchangesymbol();
  static const int kExchangeSymbolFieldNumber = 21;
  const std::string& exchangesymbol() const;
  void set_exchangesymbol(const std::string& value);
  void set_exchangesymbol(std::string&& value);
  void set_exchangesymbol(const char* value);
  void set_exchangesymbol(const char* value, size_t size);
  std::string* mutable_exchangesymbol();
  std::string* release_exchangesymbol();
  void set_allocated_exchangesymbol(std::string* exchangesymbol);

  // string HKSpreadTableCode = 27;
  void clear_hkspreadtablecode();
  static const int kHKSpreadTableCodeFieldNumber = 27;
  const std::string& hkspreadtablecode() const;
  void set_hkspreadtablecode(const std::string& value);
  void set_hkspreadtablecode(std::string&& value);
  void set_hkspreadtablecode(const char* value);
  void set_hkspreadtablecode(const char* value, size_t size);
  std::string* mutable_hkspreadtablecode();
  std::string* release_hkspreadtablecode();
  void set_allocated_hkspreadtablecode(std::string* hkspreadtablecode);

  // string OptionContractID = 40;
  void clear_optioncontractid();
  static const int kOptionContractIDFieldNumber = 40;
  const std::string& optioncontractid() const;
  void set_optioncontractid(const std::string& value);
  void set_optioncontractid(std::string&& value);
  void set_optioncontractid(const char* value);
  void set_optioncontractid(const char* value, size_t size);
  std::string* mutable_optioncontractid();
  std::string* release_optioncontractid();
  void set_allocated_optioncontractid(std::string* optioncontractid);

  // string OptionContractSymbol = 41;
  void clear_optioncontractsymbol();
  static const int kOptionContractSymbolFieldNumber = 41;
  const std::string& optioncontractsymbol() const;
  void set_optioncontractsymbol(const std::string& value);
  void set_optioncontractsymbol(std::string&& value);
  void set_optioncontractsymbol(const char* value);
  void set_optioncontractsymbol(const char* value, size_t size);
  std::string* mutable_optioncontractsymbol();
  std::string* release_optioncontractsymbol();
  void set_allocated_optioncontractsymbol(std::string* optioncontractsymbol);

  // string OptionUnderlyingSecurityID = 42;
  void clear_optionunderlyingsecurityid();
  static const int kOptionUnderlyingSecurityIDFieldNumber = 42;
  const std::string& optionunderlyingsecurityid() const;
  void set_optionunderlyingsecurityid(const std::string& value);
  void set_optionunderlyingsecurityid(std::string&& value);
  void set_optionunderlyingsecurityid(const char* value);
  void set_optionunderlyingsecurityid(const char* value, size_t size);
  std::string* mutable_optionunderlyingsecurityid();
  std::string* release_optionunderlyingsecurityid();
  void set_allocated_optionunderlyingsecurityid(std::string* optionunderlyingsecurityid);

  // string OptionUnderlyingSymbol = 43;
  void clear_optionunderlyingsymbol();
  static const int kOptionUnderlyingSymbolFieldNumber = 43;
  const std::string& optionunderlyingsymbol() const;
  void set_optionunderlyingsymbol(const std::string& value);
  void set_optionunderlyingsymbol(std::string&& value);
  void set_optionunderlyingsymbol(const char* value);
  void set_optionunderlyingsymbol(const char* value, size_t size);
  std::string* mutable_optionunderlyingsymbol();
  std::string* release_optionunderlyingsymbol();
  void set_allocated_optionunderlyingsymbol(std::string* optionunderlyingsymbol);

  // string OptionUnderlyingType = 44;
  void clear_optionunderlyingtype();
  static const int kOptionUnderlyingTypeFieldNumber = 44;
  const std::string& optionunderlyingtype() const;
  void set_optionunderlyingtype(const std::string& value);
  void set_optionunderlyingtype(std::string&& value);
  void set_optionunderlyingtype(const char* value);
  void set_optionunderlyingtype(const char* value, size_t size);
  std::string* mutable_optionunderlyingtype();
  std::string* release_optionunderlyingtype();
  void set_allocated_optionunderlyingtype(std::string* optionunderlyingtype);

  // string OptionOptionType = 45;
  void clear_optionoptiontype();
  static const int kOptionOptionTypeFieldNumber = 45;
  const std::string& optionoptiontype() const;
  void set_optionoptiontype(const std::string& value);
  void set_optionoptiontype(std::string&& value);
  void set_optionoptiontype(const char* value);
  void set_optionoptiontype(const char* value, size_t size);
  std::string* mutable_optionoptiontype();
  std::string* release_optionoptiontype();
  void set_allocated_optionoptiontype(std::string* optionoptiontype);

  // string OptionCallOrPut = 46;
  void clear_optioncallorput();
  static const int kOptionCallOrPutFieldNumber = 46;
  const std::string& optioncallorput() const;
  void set_optioncallorput(const std::string& value);
  void set_optioncallorput(std::string&& value);
  void set_optioncallorput(const char* value);
  void set_optioncallorput(const char* value, size_t size);
  std::string* mutable_optioncallorput();
  std::string* release_optioncallorput();
  void set_allocated_optioncallorput(std::string* optioncallorput);

  // string OptionStartDate = 49;
  void clear_optionstartdate();
  static const int kOptionStartDateFieldNumber = 49;
  const std::string& optionstartdate() const;
  void set_optionstartdate(const std::string& value);
  void set_optionstartdate(std::string&& value);
  void set_optionstartdate(const char* value);
  void set_optionstartdate(const char* value, size_t size);
  std::string* mutable_optionstartdate();
  std::string* release_optionstartdate();
  void set_allocated_optionstartdate(std::string* optionstartdate);

  // string OptionEndDate = 50;
  void clear_optionenddate();
  static const int kOptionEndDateFieldNumber = 50;
  const std::string& optionenddate() const;
  void set_optionenddate(const std::string& value);
  void set_optionenddate(std::string&& value);
  void set_optionenddate(const char* value);
  void set_optionenddate(const char* value, size_t size);
  std::string* mutable_optionenddate();
  std::string* release_optionenddate();
  void set_allocated_optionenddate(std::string* optionenddate);

  // string OptionExerciseDate = 51;
  void clear_optionexercisedate();
  static const int kOptionExerciseDateFieldNumber = 51;
  const std::string& optionexercisedate() const;
  void set_optionexercisedate(const std::string& value);
  void set_optionexercisedate(std::string&& value);
  void set_optionexercisedate(const char* value);
  void set_optionexercisedate(const char* value, size_t size);
  std::string* mutable_optionexercisedate();
  std::string* release_optionexercisedate();
  void set_allocated_optionexercisedate(std::string* optionexercisedate);

  // string OptionDeliveryDate = 52;
  void clear_optiondeliverydate();
  static const int kOptionDeliveryDateFieldNumber = 52;
  const std::string& optiondeliverydate() const;
  void set_optiondeliverydate(const std::string& value);
  void set_optiondeliverydate(std::string&& value);
  void set_optiondeliverydate(const char* value);
  void set_optiondeliverydate(const char* value, size_t size);
  std::string* mutable_optiondeliverydate();
  std::string* release_optiondeliverydate();
  void set_allocated_optiondeliverydate(std::string* optiondeliverydate);

  // string OptionExpireDate = 53;
  void clear_optionexpiredate();
  static const int kOptionExpireDateFieldNumber = 53;
  const std::string& optionexpiredate() const;
  void set_optionexpiredate(const std::string& value);
  void set_optionexpiredate(std::string&& value);
  void set_optionexpiredate(const char* value);
  void set_optionexpiredate(const char* value, size_t size);
  std::string* mutable_optionexpiredate();
  std::string* release_optionexpiredate();
  void set_allocated_optionexpiredate(std::string* optionexpiredate);

  // string OptionUpdateVersion = 54;
  void clear_optionupdateversion();
  static const int kOptionUpdateVersionFieldNumber = 54;
  const std::string& optionupdateversion() const;
  void set_optionupdateversion(const std::string& value);
  void set_optionupdateversion(std::string&& value);
  void set_optionupdateversion(const char* value);
  void set_optionupdateversion(const char* value, size_t size);
  std::string* mutable_optionupdateversion();
  std::string* release_optionupdateversion();
  void set_allocated_optionupdateversion(std::string* optionupdateversion);

  // string OptionPriceLimitType = 59;
  void clear_optionpricelimittype();
  static const int kOptionPriceLimitTypeFieldNumber = 59;
  const std::string& optionpricelimittype() const;
  void set_optionpricelimittype(const std::string& value);
  void set_optionpricelimittype(std::string&& value);
  void set_optionpricelimittype(const char* value);
  void set_optionpricelimittype(const char* value, size_t size);
  std::string* mutable_optionpricelimittype();
  std::string* release_optionpricelimittype();
  void set_allocated_optionpricelimittype(std::string* optionpricelimittype);

  // string OptionSecurityStatusFlag = 71;
  void clear_optionsecuritystatusflag();
  static const int kOptionSecurityStatusFlagFieldNumber = 71;
  const std::string& optionsecuritystatusflag() const;
  void set_optionsecuritystatusflag(const std::string& value);
  void set_optionsecuritystatusflag(std::string&& value);
  void set_optionsecuritystatusflag(const char* value);
  void set_optionsecuritystatusflag(const char* value, size_t size);
  std::string* mutable_optionsecuritystatusflag();
  std::string* release_optionsecuritystatusflag();
  void set_allocated_optionsecuritystatusflag(std::string* optionsecuritystatusflag);

  // string OptionCarryInterestDate = 72;
  void clear_optioncarryinterestdate();
  static const int kOptionCarryInterestDateFieldNumber = 72;
  const std::string& optioncarryinterestdate() const;
  void set_optioncarryinterestdate(const std::string& value);
  void set_optioncarryinterestdate(std::string&& value);
  void set_optioncarryinterestdate(const char* value);
  void set_optioncarryinterestdate(const char* value, size_t size);
  std::string* mutable_optioncarryinterestdate();
  std::string* release_optioncarryinterestdate();
  void set_allocated_optioncarryinterestdate(std::string* optioncarryinterestdate);

  // string OptionEarlyExpireDate = 73;
  void clear_optionearlyexpiredate();
  static const int kOptionEarlyExpireDateFieldNumber = 73;
  const std::string& optionearlyexpiredate() const;
  void set_optionearlyexpiredate(const std::string& value);
  void set_optionearlyexpiredate(std::string&& value);
  void set_optionearlyexpiredate(const char* value);
  void set_optionearlyexpiredate(const char* value, size_t size);
  std::string* mutable_optionearlyexpiredate();
  std::string* release_optionearlyexpiredate();
  void set_allocated_optionearlyexpiredate(std::string* optionearlyexpiredate);

  // string OptionStrategySecurityID = 74;
  void clear_optionstrategysecurityid();
  static const int kOptionStrategySecurityIDFieldNumber = 74;
  const std::string& optionstrategysecurityid() const;
  void set_optionstrategysecurityid(const std::string& value);
  void set_optionstrategysecurityid(std::string&& value);
  void set_optionstrategysecurityid(const char* value);
  void set_optionstrategysecurityid(const char* value, size_t size);
  std::string* mutable_optionstrategysecurityid();
  std::string* release_optionstrategysecurityid();
  void set_allocated_optionstrategysecurityid(std::string* optionstrategysecurityid);

  // string FITradeProductType = 80;
  void clear_fitradeproducttype();
  static const int kFITradeProductTypeFieldNumber = 80;
  const std::string& fitradeproducttype() const;
  void set_fitradeproducttype(const std::string& value);
  void set_fitradeproducttype(std::string&& value);
  void set_fitradeproducttype(const char* value);
  void set_fitradeproducttype(const char* value, size_t size);
  std::string* mutable_fitradeproducttype();
  std::string* release_fitradeproducttype();
  void set_allocated_fitradeproducttype(std::string* fitradeproducttype);

  // string FISecurityProperty = 81;
  void clear_fisecurityproperty();
  static const int kFISecurityPropertyFieldNumber = 81;
  const std::string& fisecurityproperty() const;
  void set_fisecurityproperty(const std::string& value);
  void set_fisecurityproperty(std::string&& value);
  void set_fisecurityproperty(const char* value);
  void set_fisecurityproperty(const char* value, size_t size);
  std::string* mutable_fisecurityproperty();
  std::string* release_fisecurityproperty();
  void set_allocated_fisecurityproperty(std::string* fisecurityproperty);

  // string FISecurityStatus = 82;
  void clear_fisecuritystatus();
  static const int kFISecurityStatusFieldNumber = 82;
  const std::string& fisecuritystatus() const;
  void set_fisecuritystatus(const std::string& value);
  void set_fisecuritystatus(std::string&& value);
  void set_fisecuritystatus(const char* value);
  void set_fisecuritystatus(const char* value, size_t size);
  std::string* mutable_fisecuritystatus();
  std::string* release_fisecuritystatus();
  void set_allocated_fisecuritystatus(std::string* fisecuritystatus);

  // string FIPledgedSecurityID = 83;
  void clear_fipledgedsecurityid();
  static const int kFIPledgedSecurityIDFieldNumber = 83;
  const std::string& fipledgedsecurityid() const;
  void set_fipledgedsecurityid(const std::string& value);
  void set_fipledgedsecurityid(std::string&& value);
  void set_fipledgedsecurityid(const char* value);
  void set_fipledgedsecurityid(const char* value, size_t size);
  std::string* mutable_fipledgedsecurityid();
  std::string* release_fipledgedsecurityid();
  void set_allocated_fipledgedsecurityid(std::string* fipledgedsecurityid);

  // string FIOpenTime = 84;
  void clear_fiopentime();
  static const int kFIOpenTimeFieldNumber = 84;
  const std::string& fiopentime() const;
  void set_fiopentime(const std::string& value);
  void set_fiopentime(std::string&& value);
  void set_fiopentime(const char* value);
  void set_fiopentime(const char* value, size_t size);
  std::string* mutable_fiopentime();
  std::string* release_fiopentime();
  void set_allocated_fiopentime(std::string* fiopentime);

  // string FICloseTime = 85;
  void clear_ficlosetime();
  static const int kFICloseTimeFieldNumber = 85;
  const std::string& ficlosetime() const;
  void set_ficlosetime(const std::string& value);
  void set_ficlosetime(std::string&& value);
  void set_ficlosetime(const char* value);
  void set_ficlosetime(const char* value, size_t size);
  std::string* mutable_ficlosetime();
  std::string* release_ficlosetime();
  void set_allocated_ficlosetime(std::string* ficlosetime);

  // string FIIssueMode = 86;
  void clear_fiissuemode();
  static const int kFIIssueModeFieldNumber = 86;
  const std::string& fiissuemode() const;
  void set_fiissuemode(const std::string& value);
  void set_fiissuemode(std::string&& value);
  void set_fiissuemode(const char* value);
  void set_fiissuemode(const char* value, size_t size);
  std::string* mutable_fiissuemode();
  std::string* release_fiissuemode();
  void set_allocated_fiissuemode(std::string* fiissuemode);

  // string FIInterestType = 89;
  void clear_fiinteresttype();
  static const int kFIInterestTypeFieldNumber = 89;
  const std::string& fiinteresttype() const;
  void set_fiinteresttype(const std::string& value);
  void set_fiinteresttype(std::string&& value);
  void set_fiinteresttype(const char* value);
  void set_fiinteresttype(const char* value, size_t size);
  std::string* mutable_fiinteresttype();
  std::string* release_fiinteresttype();
  void set_allocated_fiinteresttype(std::string* fiinteresttype);

  // string FIInterestFrequency = 90;
  void clear_fiinterestfrequency();
  static const int kFIInterestFrequencyFieldNumber = 90;
  const std::string& fiinterestfrequency() const;
  void set_fiinterestfrequency(const std::string& value);
  void set_fiinterestfrequency(std::string&& value);
  void set_fiinterestfrequency(const char* value);
  void set_fiinterestfrequency(const char* value, size_t size);
  std::string* mutable_fiinterestfrequency();
  std::string* release_fiinterestfrequency();
  void set_allocated_fiinterestfrequency(std::string* fiinterestfrequency);

  // string FIIssueStartDate = 96;
  void clear_fiissuestartdate();
  static const int kFIIssueStartDateFieldNumber = 96;
  const std::string& fiissuestartdate() const;
  void set_fiissuestartdate(const std::string& value);
  void set_fiissuestartdate(std::string&& value);
  void set_fiissuestartdate(const char* value);
  void set_fiissuestartdate(const char* value, size_t size);
  std::string* mutable_fiissuestartdate();
  std::string* release_fiissuestartdate();
  void set_allocated_fiissuestartdate(std::string* fiissuestartdate);

  // string FIIssueEndDate = 97;
  void clear_fiissueenddate();
  static const int kFIIssueEndDateFieldNumber = 97;
  const std::string& fiissueenddate() const;
  void set_fiissueenddate(const std::string& value);
  void set_fiissueenddate(std::string&& value);
  void set_fiissueenddate(const char* value);
  void set_fiissueenddate(const char* value, size_t size);
  std::string* mutable_fiissueenddate();
  std::string* release_fiissueenddate();
  void set_allocated_fiissueenddate(std::string* fiissueenddate);

  // string FIListDate = 98;
  void clear_filistdate();
  static const int kFIListDateFieldNumber = 98;
  const std::string& filistdate() const;
  void set_filistdate(const std::string& value);
  void set_filistdate(std::string&& value);
  void set_filistdate(const char* value);
  void set_filistdate(const char* value, size_t size);
  std::string* mutable_filistdate();
  std::string* release_filistdate();
  void set_allocated_filistdate(std::string* filistdate);

  // string FIExpireDate = 99;
  void clear_fiexpiredate();
  static const int kFIExpireDateFieldNumber = 99;
  const std::string& fiexpiredate() const;
  void set_fiexpiredate(const std::string& value);
  void set_fiexpiredate(std::string&& value);
  void set_fiexpiredate(const char* value);
  void set_fiexpiredate(const char* value, size_t size);
  std::string* mutable_fiexpiredate();
  std::string* release_fiexpiredate();
  void set_allocated_fiexpiredate(std::string* fiexpiredate);

  // string FINationalDebtType = 100;
  void clear_finationaldebttype();
  static const int kFINationalDebtTypeFieldNumber = 100;
  const std::string& finationaldebttype() const;
  void set_finationaldebttype(const std::string& value);
  void set_finationaldebttype(std::string&& value);
  void set_finationaldebttype(const char* value);
  void set_finationaldebttype(const char* value, size_t size);
  std::string* mutable_finationaldebttype();
  std::string* release_finationaldebttype();
  void set_allocated_finationaldebttype(std::string* finationaldebttype);

  // string FIIssueMethod = 101;
  void clear_fiissuemethod();
  static const int kFIIssueMethodFieldNumber = 101;
  const std::string& fiissuemethod() const;
  void set_fiissuemethod(const std::string& value);
  void set_fiissuemethod(std::string&& value);
  void set_fiissuemethod(const char* value);
  void set_fiissuemethod(const char* value, size_t size);
  std::string* mutable_fiissuemethod();
  std::string* release_fiissuemethod();
  void set_allocated_fiissuemethod(std::string* fiissuemethod);

  // string OptionListType = 110;
  void clear_optionlisttype();
  static const int kOptionListTypeFieldNumber = 110;
  const std::string& optionlisttype() const;
  void set_optionlisttype(const std::string& value);
  void set_optionlisttype(std::string&& value);
  void set_optionlisttype(const char* value);
  void set_optionlisttype(const char* value, size_t size);
  std::string* mutable_optionlisttype();
  std::string* release_optionlisttype();
  void set_allocated_optionlisttype(std::string* optionlisttype);

  // string OptionDeliveryType = 111;
  void clear_optiondeliverytype();
  static const int kOptionDeliveryTypeFieldNumber = 111;
  const std::string& optiondeliverytype() const;
  void set_optiondeliverytype(const std::string& value);
  void set_optiondeliverytype(std::string&& value);
  void set_optiondeliverytype(const char* value);
  void set_optiondeliverytype(const char* value, size_t size);
  std::string* mutable_optiondeliverytype();
  std::string* release_optiondeliverytype();
  void set_allocated_optiondeliverytype(std::string* optiondeliverytype);

  // string OptionMarketMakerFlag = 124;
  void clear_optionmarketmakerflag();
  static const int kOptionMarketMakerFlagFieldNumber = 124;
  const std::string& optionmarketmakerflag() const;
  void set_optionmarketmakerflag(const std::string& value);
  void set_optionmarketmakerflag(std::string&& value);
  void set_optionmarketmakerflag(const char* value);
  void set_optionmarketmakerflag(const char* value, size_t size);
  std::string* mutable_optionmarketmakerflag();
  std::string* release_optionmarketmakerflag();
  void set_allocated_optionmarketmakerflag(std::string* optionmarketmakerflag);

  // string OptionCombinationStrategy = 125;
  void clear_optioncombinationstrategy();
  static const int kOptionCombinationStrategyFieldNumber = 125;
  const std::string& optioncombinationstrategy() const;
  void set_optioncombinationstrategy(const std::string& value);
  void set_optioncombinationstrategy(std::string&& value);
  void set_optioncombinationstrategy(const char* value);
  void set_optioncombinationstrategy(const char* value, size_t size);
  std::string* mutable_optioncombinationstrategy();
  std::string* release_optioncombinationstrategy();
  void set_allocated_optioncombinationstrategy(std::string* optioncombinationstrategy);

  // string DeliveryYear = 126;
  void clear_deliveryyear();
  static const int kDeliveryYearFieldNumber = 126;
  const std::string& deliveryyear() const;
  void set_deliveryyear(const std::string& value);
  void set_deliveryyear(std::string&& value);
  void set_deliveryyear(const char* value);
  void set_deliveryyear(const char* value, size_t size);
  std::string* mutable_deliveryyear();
  std::string* release_deliveryyear();
  void set_allocated_deliveryyear(std::string* deliveryyear);

  // string DeliveryMonth = 127;
  void clear_deliverymonth();
  static const int kDeliveryMonthFieldNumber = 127;
  const std::string& deliverymonth() const;
  void set_deliverymonth(const std::string& value);
  void set_deliverymonth(std::string&& value);
  void set_deliverymonth(const char* value);
  void set_deliverymonth(const char* value, size_t size);
  std::string* mutable_deliverymonth();
  std::string* release_deliverymonth();
  void set_allocated_deliverymonth(std::string* deliverymonth);

  // string InstrumentID = 128;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 128;
  const std::string& instrumentid() const;
  void set_instrumentid(const std::string& value);
  void set_instrumentid(std::string&& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  std::string* mutable_instrumentid();
  std::string* release_instrumentid();
  void set_allocated_instrumentid(std::string* instrumentid);

  // string InstrumentName = 129;
  void clear_instrumentname();
  static const int kInstrumentNameFieldNumber = 129;
  const std::string& instrumentname() const;
  void set_instrumentname(const std::string& value);
  void set_instrumentname(std::string&& value);
  void set_instrumentname(const char* value);
  void set_instrumentname(const char* value, size_t size);
  std::string* mutable_instrumentname();
  std::string* release_instrumentname();
  void set_allocated_instrumentname(std::string* instrumentname);

  // string ExchangeInstID = 130;
  void clear_exchangeinstid();
  static const int kExchangeInstIDFieldNumber = 130;
  const std::string& exchangeinstid() const;
  void set_exchangeinstid(const std::string& value);
  void set_exchangeinstid(std::string&& value);
  void set_exchangeinstid(const char* value);
  void set_exchangeinstid(const char* value, size_t size);
  std::string* mutable_exchangeinstid();
  std::string* release_exchangeinstid();
  void set_allocated_exchangeinstid(std::string* exchangeinstid);

  // string ProductID = 131;
  void clear_productid();
  static const int kProductIDFieldNumber = 131;
  const std::string& productid() const;
  void set_productid(const std::string& value);
  void set_productid(std::string&& value);
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  std::string* mutable_productid();
  std::string* release_productid();
  void set_allocated_productid(std::string* productid);

  // string CreateDate = 137;
  void clear_createdate();
  static const int kCreateDateFieldNumber = 137;
  const std::string& createdate() const;
  void set_createdate(const std::string& value);
  void set_createdate(std::string&& value);
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  std::string* mutable_createdate();
  std::string* release_createdate();
  void set_allocated_createdate(std::string* createdate);

  // string ExpireDate = 138;
  void clear_expiredate();
  static const int kExpireDateFieldNumber = 138;
  const std::string& expiredate() const;
  void set_expiredate(const std::string& value);
  void set_expiredate(std::string&& value);
  void set_expiredate(const char* value);
  void set_expiredate(const char* value, size_t size);
  std::string* mutable_expiredate();
  std::string* release_expiredate();
  void set_allocated_expiredate(std::string* expiredate);

  // string StartDelivDate = 139;
  void clear_startdelivdate();
  static const int kStartDelivDateFieldNumber = 139;
  const std::string& startdelivdate() const;
  void set_startdelivdate(const std::string& value);
  void set_startdelivdate(std::string&& value);
  void set_startdelivdate(const char* value);
  void set_startdelivdate(const char* value, size_t size);
  std::string* mutable_startdelivdate();
  std::string* release_startdelivdate();
  void set_allocated_startdelivdate(std::string* startdelivdate);

  // string EndDelivDate = 140;
  void clear_enddelivdate();
  static const int kEndDelivDateFieldNumber = 140;
  const std::string& enddelivdate() const;
  void set_enddelivdate(const std::string& value);
  void set_enddelivdate(std::string&& value);
  void set_enddelivdate(const char* value);
  void set_enddelivdate(const char* value, size_t size);
  std::string* mutable_enddelivdate();
  std::string* release_enddelivdate();
  void set_allocated_enddelivdate(std::string* enddelivdate);

  // string PositionType = 141;
  void clear_positiontype();
  static const int kPositionTypeFieldNumber = 141;
  const std::string& positiontype() const;
  void set_positiontype(const std::string& value);
  void set_positiontype(std::string&& value);
  void set_positiontype(const char* value);
  void set_positiontype(const char* value, size_t size);
  std::string* mutable_positiontype();
  std::string* release_positiontype();
  void set_allocated_positiontype(std::string* positiontype);

  // string MaxMarginSideAlgorithm = 144;
  void clear_maxmarginsidealgorithm();
  static const int kMaxMarginSideAlgorithmFieldNumber = 144;
  const std::string& maxmarginsidealgorithm() const;
  void set_maxmarginsidealgorithm(const std::string& value);
  void set_maxmarginsidealgorithm(std::string&& value);
  void set_maxmarginsidealgorithm(const char* value);
  void set_maxmarginsidealgorithm(const char* value, size_t size);
  std::string* mutable_maxmarginsidealgorithm();
  std::string* release_maxmarginsidealgorithm();
  void set_allocated_maxmarginsidealgorithm(std::string* maxmarginsidealgorithm);

  // string FormerSymbol = 147;
  void clear_formersymbol();
  static const int kFormerSymbolFieldNumber = 147;
  const std::string& formersymbol() const;
  void set_formersymbol(const std::string& value);
  void set_formersymbol(std::string&& value);
  void set_formersymbol(const char* value);
  void set_formersymbol(const char* value, size_t size);
  std::string* mutable_formersymbol();
  std::string* release_formersymbol();
  void set_allocated_formersymbol(std::string* formersymbol);

  // string DelistDate = 148;
  void clear_delistdate();
  static const int kDelistDateFieldNumber = 148;
  const std::string& delistdate() const;
  void set_delistdate(const std::string& value);
  void set_delistdate(std::string&& value);
  void set_delistdate(const char* value);
  void set_delistdate(const char* value, size_t size);
  std::string* mutable_delistdate();
  std::string* release_delistdate();
  void set_allocated_delistdate(std::string* delistdate);

  // string BaseContractID = 170;
  void clear_basecontractid();
  static const int kBaseContractIDFieldNumber = 170;
  const std::string& basecontractid() const;
  void set_basecontractid(const std::string& value);
  void set_basecontractid(std::string&& value);
  void set_basecontractid(const char* value);
  void set_basecontractid(const char* value, size_t size);
  std::string* mutable_basecontractid();
  std::string* release_basecontractid();
  void set_allocated_basecontractid(std::string* basecontractid);

  // string InterestAccrualDate = 173;
  void clear_interestaccrualdate();
  static const int kInterestAccrualDateFieldNumber = 173;
  const std::string& interestaccrualdate() const;
  void set_interestaccrualdate(const std::string& value);
  void set_interestaccrualdate(std::string&& value);
  void set_interestaccrualdate(const char* value);
  void set_interestaccrualdate(const char* value, size_t size);
  std::string* mutable_interestaccrualdate();
  std::string* release_interestaccrualdate();
  void set_allocated_interestaccrualdate(std::string* interestaccrualdate);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int64 OutstandingShare = 11;
  void clear_outstandingshare();
  static const int kOutstandingShareFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 outstandingshare() const;
  void set_outstandingshare(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PublicFloatShareQuantity = 12;
  void clear_publicfloatsharequantity();
  static const int kPublicFloatShareQuantityFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 publicfloatsharequantity() const;
  void set_publicfloatsharequantity(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreClosePx = 15;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx() const;
  void set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MaxPx = 16;
  void clear_maxpx();
  static const int kMaxPxFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int64 maxpx() const;
  void set_maxpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MinPx = 17;
  void clear_minpx();
  static const int kMinPxFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int64 minpx() const;
  void set_minpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LotSize = 18;
  void clear_lotsize();
  static const int kLotSizeFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int64 lotsize() const;
  void set_lotsize(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 MDDate = 13;
  void clear_mddate();
  static const int kMDDateFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 LoanMarginIndicator = 23;
  void clear_loanmarginindicator();
  static const int kLoanMarginIndicatorFieldNumber = 23;
  ::PROTOBUF_NAMESPACE_ID::int32 loanmarginindicator() const;
  void set_loanmarginindicator(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double TickSize = 22;
  void clear_ticksize();
  static const int kTickSizeFieldNumber = 22;
  double ticksize() const;
  void set_ticksize(double value);

  // int32 PxAccuracy = 24;
  void clear_pxaccuracy();
  static const int kPxAccuracyFieldNumber = 24;
  ::PROTOBUF_NAMESPACE_ID::int32 pxaccuracy() const;
  void set_pxaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 IPOProfitable = 25;
  void clear_ipoprofitable();
  static const int kIPOProfitableFieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::int32 ipoprofitable() const;
  void set_ipoprofitable(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double PreSettlePx = 28;
  void clear_presettlepx();
  static const int kPreSettlePxFieldNumber = 28;
  double presettlepx() const;
  void set_presettlepx(double value);

  // int32 DiffRightsIndicator = 26;
  void clear_diffrightsindicator();
  static const int kDiffRightsIndicatorFieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::int32 diffrightsindicator() const;
  void set_diffrightsindicator(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ShHkConnect = 30;
  void clear_shhkconnect();
  static const int kShHkConnectFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::int32 shhkconnect() const;
  void set_shhkconnect(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double PreIOPV = 29;
  void clear_preiopv();
  static const int kPreIOPVFieldNumber = 29;
  double preiopv() const;
  void set_preiopv(double value);

  // int64 OptionContractMultiplierUnit = 47;
  void clear_optioncontractmultiplierunit();
  static const int kOptionContractMultiplierUnitFieldNumber = 47;
  ::PROTOBUF_NAMESPACE_ID::int64 optioncontractmultiplierunit() const;
  void set_optioncontractmultiplierunit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double OptionExercisePrice = 48;
  void clear_optionexerciseprice();
  static const int kOptionExercisePriceFieldNumber = 48;
  double optionexerciseprice() const;
  void set_optionexerciseprice(double value);

  // int64 OptionTotalLongPosition = 55;
  void clear_optiontotallongposition();
  static const int kOptionTotalLongPositionFieldNumber = 55;
  ::PROTOBUF_NAMESPACE_ID::int64 optiontotallongposition() const;
  void set_optiontotallongposition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double OptionSecurityClosePx = 56;
  void clear_optionsecurityclosepx();
  static const int kOptionSecurityClosePxFieldNumber = 56;
  double optionsecurityclosepx() const;
  void set_optionsecurityclosepx(double value);

  // double OptionSettlPrice = 57;
  void clear_optionsettlprice();
  static const int kOptionSettlPriceFieldNumber = 57;
  double optionsettlprice() const;
  void set_optionsettlprice(double value);

  // double OptionUnderlyingClosePx = 58;
  void clear_optionunderlyingclosepx();
  static const int kOptionUnderlyingClosePxFieldNumber = 58;
  double optionunderlyingclosepx() const;
  void set_optionunderlyingclosepx(double value);

  // double OptionDailyPriceUpLimit = 60;
  void clear_optiondailypriceuplimit();
  static const int kOptionDailyPriceUpLimitFieldNumber = 60;
  double optiondailypriceuplimit() const;
  void set_optiondailypriceuplimit(double value);

  // double OptionDailyPriceDownLimit = 61;
  void clear_optiondailypricedownlimit();
  static const int kOptionDailyPriceDownLimitFieldNumber = 61;
  double optiondailypricedownlimit() const;
  void set_optiondailypricedownlimit(double value);

  // double OptionMarginUnit = 62;
  void clear_optionmarginunit();
  static const int kOptionMarginUnitFieldNumber = 62;
  double optionmarginunit() const;
  void set_optionmarginunit(double value);

  // double OptionMarginRatioParam1 = 63;
  void clear_optionmarginratioparam1();
  static const int kOptionMarginRatioParam1FieldNumber = 63;
  double optionmarginratioparam1() const;
  void set_optionmarginratioparam1(double value);

  // int32 SzHkConnect = 31;
  void clear_szhkconnect();
  static const int kSzHkConnectFieldNumber = 31;
  ::PROTOBUF_NAMESPACE_ID::int32 szhkconnect() const;
  void set_szhkconnect(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool ShortSellFlag = 19;
  void clear_shortsellflag();
  static const int kShortSellFlagFieldNumber = 19;
  bool shortsellflag() const;
  void set_shortsellflag(bool value);

  // bool FICrossMarket = 102;
  void clear_ficrossmarket();
  static const int kFICrossMarketFieldNumber = 102;
  bool ficrossmarket() const;
  void set_ficrossmarket(bool value);

  // bool FIShortSellFlag = 103;
  void clear_fishortsellflag();
  static const int kFIShortSellFlagFieldNumber = 103;
  bool fishortsellflag() const;
  void set_fishortsellflag(bool value);

  // double OptionMarginRatioParam2 = 64;
  void clear_optionmarginratioparam2();
  static const int kOptionMarginRatioParam2FieldNumber = 64;
  double optionmarginratioparam2() const;
  void set_optionmarginratioparam2(double value);

  // int64 OptionRoundLot = 65;
  void clear_optionroundlot();
  static const int kOptionRoundLotFieldNumber = 65;
  ::PROTOBUF_NAMESPACE_ID::int64 optionroundlot() const;
  void set_optionroundlot(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionLmtOrdMinFloor = 66;
  void clear_optionlmtordminfloor();
  static const int kOptionLmtOrdMinFloorFieldNumber = 66;
  ::PROTOBUF_NAMESPACE_ID::int64 optionlmtordminfloor() const;
  void set_optionlmtordminfloor(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionLmtOrdMaxFloor = 67;
  void clear_optionlmtordmaxfloor();
  static const int kOptionLmtOrdMaxFloorFieldNumber = 67;
  ::PROTOBUF_NAMESPACE_ID::int64 optionlmtordmaxfloor() const;
  void set_optionlmtordmaxfloor(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionMktOrdMinFloor = 68;
  void clear_optionmktordminfloor();
  static const int kOptionMktOrdMinFloorFieldNumber = 68;
  ::PROTOBUF_NAMESPACE_ID::int64 optionmktordminfloor() const;
  void set_optionmktordminfloor(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionMktOrdMaxFloor = 69;
  void clear_optionmktordmaxfloor();
  static const int kOptionMktOrdMaxFloorFieldNumber = 69;
  ::PROTOBUF_NAMESPACE_ID::int64 optionmktordmaxfloor() const;
  void set_optionmktordmaxfloor(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double OptionTickSize = 70;
  void clear_optionticksize();
  static const int kOptionTickSizeFieldNumber = 70;
  double optionticksize() const;
  void set_optionticksize(double value);

  // double FIFaceAmount = 87;
  void clear_fifaceamount();
  static const int kFIFaceAmountFieldNumber = 87;
  double fifaceamount() const;
  void set_fifaceamount(double value);

  // double FIIssuePrice = 88;
  void clear_fiissueprice();
  static const int kFIIssuePriceFieldNumber = 88;
  double fiissueprice() const;
  void set_fiissueprice(double value);

  // double FIGuaranteedInterestRate = 91;
  void clear_figuaranteedinterestrate();
  static const int kFIGuaranteedInterestRateFieldNumber = 91;
  double figuaranteedinterestrate() const;
  void set_figuaranteedinterestrate(double value);

  // double FIBaseInterestRate = 92;
  void clear_fibaseinterestrate();
  static const int kFIBaseInterestRateFieldNumber = 92;
  double fibaseinterestrate() const;
  void set_fibaseinterestrate(double value);

  // double FIQuotedMargin = 93;
  void clear_fiquotedmargin();
  static const int kFIQuotedMarginFieldNumber = 93;
  double fiquotedmargin() const;
  void set_fiquotedmargin(double value);

  // double FITotalIssuance = 95;
  void clear_fitotalissuance();
  static const int kFITotalIssuanceFieldNumber = 95;
  double fitotalissuance() const;
  void set_fitotalissuance(double value);

  // int32 FITimeLimit = 94;
  void clear_fitimelimit();
  static const int kFITimeLimitFieldNumber = 94;
  ::PROTOBUF_NAMESPACE_ID::int32 fitimelimit() const;
  void set_fitimelimit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 OptionAdjustTimes = 112;
  void clear_optionadjusttimes();
  static const int kOptionAdjustTimesFieldNumber = 112;
  ::PROTOBUF_NAMESPACE_ID::int32 optionadjusttimes() const;
  void set_optionadjusttimes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double FITotalShortSellQuota = 104;
  void clear_fitotalshortsellquota();
  static const int kFITotalShortSellQuotaFieldNumber = 104;
  double fitotalshortsellquota() const;
  void set_fitotalshortsellquota(double value);

  // double FIDealerShortSellQuota = 105;
  void clear_fidealershortsellquota();
  static const int kFIDealerShortSellQuotaFieldNumber = 105;
  double fidealershortsellquota() const;
  void set_fidealershortsellquota(double value);

  // double FIPreClosePx = 106;
  void clear_fipreclosepx();
  static const int kFIPreClosePxFieldNumber = 106;
  double fipreclosepx() const;
  void set_fipreclosepx(double value);

  // double FIPreWeightedPx = 107;
  void clear_fipreweightedpx();
  static const int kFIPreWeightedPxFieldNumber = 107;
  double fipreweightedpx() const;
  void set_fipreweightedpx(double value);

  // int64 OptionContractPosition = 113;
  void clear_optioncontractposition();
  static const int kOptionContractPositionFieldNumber = 113;
  ::PROTOBUF_NAMESPACE_ID::int64 optioncontractposition() const;
  void set_optioncontractposition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionBuyQtyUpperLimit = 114;
  void clear_optionbuyqtyupperlimit();
  static const int kOptionBuyQtyUpperLimitFieldNumber = 114;
  ::PROTOBUF_NAMESPACE_ID::int64 optionbuyqtyupperlimit() const;
  void set_optionbuyqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionSellQtyUpperLimit = 115;
  void clear_optionsellqtyupperlimit();
  static const int kOptionSellQtyUpperLimitFieldNumber = 115;
  ::PROTOBUF_NAMESPACE_ID::int64 optionsellqtyupperlimit() const;
  void set_optionsellqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionMarketOrderBuyQtyUpperLimit = 116;
  void clear_optionmarketorderbuyqtyupperlimit();
  static const int kOptionMarketOrderBuyQtyUpperLimitFieldNumber = 116;
  ::PROTOBUF_NAMESPACE_ID::int64 optionmarketorderbuyqtyupperlimit() const;
  void set_optionmarketorderbuyqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionMarketOrderSellQtyUpperLimit = 117;
  void clear_optionmarketordersellqtyupperlimit();
  static const int kOptionMarketOrderSellQtyUpperLimitFieldNumber = 117;
  ::PROTOBUF_NAMESPACE_ID::int64 optionmarketordersellqtyupperlimit() const;
  void set_optionmarketordersellqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
  void clear_optionquoteorderbuyqtyupperlimit();
  static const int kOptionQuoteOrderBuyQtyUpperLimitFieldNumber = 118;
  ::PROTOBUF_NAMESPACE_ID::int64 optionquoteorderbuyqtyupperlimit() const;
  void set_optionquoteorderbuyqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionQuoteOrderSellQtyUpperLimit = 119;
  void clear_optionquoteordersellqtyupperlimit();
  static const int kOptionQuoteOrderSellQtyUpperLimitFieldNumber = 119;
  ::PROTOBUF_NAMESPACE_ID::int64 optionquoteordersellqtyupperlimit() const;
  void set_optionquoteordersellqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionBuyQtyUnit = 120;
  void clear_optionbuyqtyunit();
  static const int kOptionBuyQtyUnitFieldNumber = 120;
  ::PROTOBUF_NAMESPACE_ID::int64 optionbuyqtyunit() const;
  void set_optionbuyqtyunit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OptionSellQtyUnit = 121;
  void clear_optionsellqtyunit();
  static const int kOptionSellQtyUnitFieldNumber = 121;
  ::PROTOBUF_NAMESPACE_ID::int64 optionsellqtyunit() const;
  void set_optionsellqtyunit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double OptionLastSellMargin = 122;
  void clear_optionlastsellmargin();
  static const int kOptionLastSellMarginFieldNumber = 122;
  double optionlastsellmargin() const;
  void set_optionlastsellmargin(double value);

  // double OptionSellMargin = 123;
  void clear_optionsellmargin();
  static const int kOptionSellMarginFieldNumber = 123;
  double optionsellmargin() const;
  void set_optionsellmargin(double value);

  // int64 MaxMarketOrderVolume = 132;
  void clear_maxmarketordervolume();
  static const int kMaxMarketOrderVolumeFieldNumber = 132;
  ::PROTOBUF_NAMESPACE_ID::int64 maxmarketordervolume() const;
  void set_maxmarketordervolume(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MinMarketOrderVolume = 133;
  void clear_minmarketordervolume();
  static const int kMinMarketOrderVolumeFieldNumber = 133;
  ::PROTOBUF_NAMESPACE_ID::int64 minmarketordervolume() const;
  void set_minmarketordervolume(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MaxLimitOrderVolume = 134;
  void clear_maxlimitordervolume();
  static const int kMaxLimitOrderVolumeFieldNumber = 134;
  ::PROTOBUF_NAMESPACE_ID::int64 maxlimitordervolume() const;
  void set_maxlimitordervolume(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MinLimitOrderVolume = 135;
  void clear_minlimitordervolume();
  static const int kMinLimitOrderVolumeFieldNumber = 135;
  ::PROTOBUF_NAMESPACE_ID::int64 minlimitordervolume() const;
  void set_minlimitordervolume(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 VolumeMultiple = 136;
  void clear_volumemultiple();
  static const int kVolumeMultipleFieldNumber = 136;
  ::PROTOBUF_NAMESPACE_ID::int64 volumemultiple() const;
  void set_volumemultiple(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double LongMarginRatio = 142;
  void clear_longmarginratio();
  static const int kLongMarginRatioFieldNumber = 142;
  double longmarginratio() const;
  void set_longmarginratio(double value);

  // double ShortMarginRatio = 143;
  void clear_shortmarginratio();
  static const int kShortMarginRatioFieldNumber = 143;
  double shortmarginratio() const;
  void set_shortmarginratio(double value);

  // double StrikePrice = 145;
  void clear_strikeprice();
  static const int kStrikePriceFieldNumber = 145;
  double strikeprice() const;
  void set_strikeprice(double value);

  // double PreOpenInterest = 146;
  void clear_preopeninterest();
  static const int kPreOpenInterestFieldNumber = 146;
  double preopeninterest() const;
  void set_preopeninterest(double value);

  // int64 BuyQtyUnit = 149;
  void clear_buyqtyunit();
  static const int kBuyQtyUnitFieldNumber = 149;
  ::PROTOBUF_NAMESPACE_ID::int64 buyqtyunit() const;
  void set_buyqtyunit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 SellQtyUnit = 150;
  void clear_sellqtyunit();
  static const int kSellQtyUnitFieldNumber = 150;
  ::PROTOBUF_NAMESPACE_ID::int64 sellqtyunit() const;
  void set_sellqtyunit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 BuyQtyUpperLimit = 161;
  void clear_buyqtyupperlimit();
  static const int kBuyQtyUpperLimitFieldNumber = 161;
  ::PROTOBUF_NAMESPACE_ID::int64 buyqtyupperlimit() const;
  void set_buyqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 SellQtyUpperLimit = 162;
  void clear_sellqtyupperlimit();
  static const int kSellQtyUpperLimitFieldNumber = 162;
  ::PROTOBUF_NAMESPACE_ID::int64 sellqtyupperlimit() const;
  void set_sellqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 BuyQtyLowerLimit = 163;
  void clear_buyqtylowerlimit();
  static const int kBuyQtyLowerLimitFieldNumber = 163;
  ::PROTOBUF_NAMESPACE_ID::int64 buyqtylowerlimit() const;
  void set_buyqtylowerlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 SellQtyLowerLimit = 164;
  void clear_sellqtylowerlimit();
  static const int kSellQtyLowerLimitFieldNumber = 164;
  ::PROTOBUF_NAMESPACE_ID::int64 sellqtylowerlimit() const;
  void set_sellqtylowerlimit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 VCMFlag = 165;
  void clear_vcmflag();
  static const int kVCMFlagFieldNumber = 165;
  ::PROTOBUF_NAMESPACE_ID::int32 vcmflag() const;
  void set_vcmflag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 CASFlag = 166;
  void clear_casflag();
  static const int kCASFlagFieldNumber = 166;
  ::PROTOBUF_NAMESPACE_ID::int32 casflag() const;
  void set_casflag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double POSUpperLimitPx = 168;
  void clear_posupperlimitpx();
  static const int kPOSUpperLimitPxFieldNumber = 168;
  double posupperlimitpx() const;
  void set_posupperlimitpx(double value);

  // double POSLowerLimitPx = 169;
  void clear_poslowerlimitpx();
  static const int kPOSLowerLimitPxFieldNumber = 169;
  double poslowerlimitpx() const;
  void set_poslowerlimitpx(double value);

  // int32 POSFlag = 167;
  void clear_posflag();
  static const int kPOSFlagFieldNumber = 167;
  ::PROTOBUF_NAMESPACE_ID::int32 posflag() const;
  void set_posflag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 DataMultiplePowerOf10 = 172;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 172;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDBasicInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam > constantparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chispelling_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr englishname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitysubtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangesymbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hkspreadtablecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncontractid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncontractsymbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionunderlyingsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionunderlyingsymbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionunderlyingtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionoptiontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncallorput_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionstartdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionenddate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionexercisedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optiondeliverydate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionexpiredate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionupdateversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionpricelimittype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionsecuritystatusflag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncarryinterestdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionearlyexpiredate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionstrategysecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fitradeproducttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fisecurityproperty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fisecuritystatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fipledgedsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiopentime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ficlosetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiissuemode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiinteresttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiinterestfrequency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiissuestartdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiissueenddate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filistdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiexpiredate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finationaldebttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fiissuemethod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionlisttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optiondeliverytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optionmarketmakerflag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optioncombinationstrategy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deliveryyear_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deliverymonth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangeinstid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiredate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startdelivdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enddelivdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positiontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxmarginsidealgorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formersymbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delistdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basecontractid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interestaccrualdate_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int64 outstandingshare_;
  ::PROTOBUF_NAMESPACE_ID::int64 publicfloatsharequantity_;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 minpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 lotsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 loanmarginindicator_;
  double ticksize_;
  ::PROTOBUF_NAMESPACE_ID::int32 pxaccuracy_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipoprofitable_;
  double presettlepx_;
  ::PROTOBUF_NAMESPACE_ID::int32 diffrightsindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 shhkconnect_;
  double preiopv_;
  ::PROTOBUF_NAMESPACE_ID::int64 optioncontractmultiplierunit_;
  double optionexerciseprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 optiontotallongposition_;
  double optionsecurityclosepx_;
  double optionsettlprice_;
  double optionunderlyingclosepx_;
  double optiondailypriceuplimit_;
  double optiondailypricedownlimit_;
  double optionmarginunit_;
  double optionmarginratioparam1_;
  ::PROTOBUF_NAMESPACE_ID::int32 szhkconnect_;
  bool shortsellflag_;
  bool ficrossmarket_;
  bool fishortsellflag_;
  double optionmarginratioparam2_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionroundlot_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionlmtordminfloor_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionlmtordmaxfloor_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionmktordminfloor_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionmktordmaxfloor_;
  double optionticksize_;
  double fifaceamount_;
  double fiissueprice_;
  double figuaranteedinterestrate_;
  double fibaseinterestrate_;
  double fiquotedmargin_;
  double fitotalissuance_;
  ::PROTOBUF_NAMESPACE_ID::int32 fitimelimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 optionadjusttimes_;
  double fitotalshortsellquota_;
  double fidealershortsellquota_;
  double fipreclosepx_;
  double fipreweightedpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 optioncontractposition_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionbuyqtyupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionsellqtyupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionmarketorderbuyqtyupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionmarketordersellqtyupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionquoteorderbuyqtyupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionquoteordersellqtyupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionbuyqtyunit_;
  ::PROTOBUF_NAMESPACE_ID::int64 optionsellqtyunit_;
  double optionlastsellmargin_;
  double optionsellmargin_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxmarketordervolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 minmarketordervolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxlimitordervolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 minlimitordervolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 volumemultiple_;
  double longmarginratio_;
  double shortmarginratio_;
  double strikeprice_;
  double preopeninterest_;
  ::PROTOBUF_NAMESPACE_ID::int64 buyqtyunit_;
  ::PROTOBUF_NAMESPACE_ID::int64 sellqtyunit_;
  ::PROTOBUF_NAMESPACE_ID::int64 buyqtyupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 sellqtyupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 buyqtylowerlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 sellqtylowerlimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 vcmflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 casflag_;
  double posupperlimitpx_;
  double poslowerlimitpx_;
  ::PROTOBUF_NAMESPACE_ID::int32 posflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDBasicInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDBasicInfo_ConstantParam

// string ParamName = 1;
inline void MDBasicInfo_ConstantParam::clear_paramname() {
  paramname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo_ConstantParam::paramname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
  return paramname_.GetNoArena();
}
inline void MDBasicInfo_ConstantParam::set_paramname(const std::string& value) {
  
  paramname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
}
inline void MDBasicInfo_ConstantParam::set_paramname(std::string&& value) {
  
  paramname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
}
inline void MDBasicInfo_ConstantParam::set_paramname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paramname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
}
inline void MDBasicInfo_ConstantParam::set_paramname(const char* value, size_t size) {
  
  paramname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
}
inline std::string* MDBasicInfo_ConstantParam::mutable_paramname() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
  return paramname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo_ConstantParam::release_paramname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
  
  return paramname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo_ConstantParam::set_allocated_paramname(std::string* paramname) {
  if (paramname != nullptr) {
    
  } else {
    
  }
  paramname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramname);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamName)
}

// string ParamValue = 2;
inline void MDBasicInfo_ConstantParam::clear_paramvalue() {
  paramvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo_ConstantParam::paramvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
  return paramvalue_.GetNoArena();
}
inline void MDBasicInfo_ConstantParam::set_paramvalue(const std::string& value) {
  
  paramvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
}
inline void MDBasicInfo_ConstantParam::set_paramvalue(std::string&& value) {
  
  paramvalue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
}
inline void MDBasicInfo_ConstantParam::set_paramvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paramvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
}
inline void MDBasicInfo_ConstantParam::set_paramvalue(const char* value, size_t size) {
  
  paramvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
}
inline std::string* MDBasicInfo_ConstantParam::mutable_paramvalue() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
  return paramvalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo_ConstantParam::release_paramvalue() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
  
  return paramvalue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo_ConstantParam::set_allocated_paramvalue(std::string* paramvalue) {
  if (paramvalue != nullptr) {
    
  } else {
    
  }
  paramvalue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramvalue);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam.ParamValue)
}

// -------------------------------------------------------------------

// MDBasicInfo

// string HTSCSecurityID = 1;
inline void MDBasicInfo::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void MDBasicInfo::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
}
inline void MDBasicInfo::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
}
inline void MDBasicInfo::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
}
inline void MDBasicInfo::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
}
inline std::string* MDBasicInfo::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.HTSCSecurityID)
}

// string SecurityID = 2;
inline void MDBasicInfo::clear_securityid() {
  securityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::securityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
  return securityid_.GetNoArena();
}
inline void MDBasicInfo::set_securityid(const std::string& value) {
  
  securityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
}
inline void MDBasicInfo::set_securityid(std::string&& value) {
  
  securityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
}
inline void MDBasicInfo::set_securityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  securityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
}
inline void MDBasicInfo::set_securityid(const char* value, size_t size) {
  
  securityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
}
inline std::string* MDBasicInfo::mutable_securityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
  return securityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_securityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
  
  return securityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    
  } else {
    
  }
  securityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.SecurityID)
}

// string Symbol = 3;
inline void MDBasicInfo::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::symbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
  return symbol_.GetNoArena();
}
inline void MDBasicInfo::set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
}
inline void MDBasicInfo::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
}
inline void MDBasicInfo::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
}
inline void MDBasicInfo::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
}
inline std::string* MDBasicInfo::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_symbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.Symbol)
}

// string ChiSpelling = 4;
inline void MDBasicInfo::clear_chispelling() {
  chispelling_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::chispelling() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
  return chispelling_.GetNoArena();
}
inline void MDBasicInfo::set_chispelling(const std::string& value) {
  
  chispelling_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
}
inline void MDBasicInfo::set_chispelling(std::string&& value) {
  
  chispelling_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
}
inline void MDBasicInfo::set_chispelling(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chispelling_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
}
inline void MDBasicInfo::set_chispelling(const char* value, size_t size) {
  
  chispelling_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
}
inline std::string* MDBasicInfo::mutable_chispelling() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
  return chispelling_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_chispelling() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
  
  return chispelling_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_chispelling(std::string* chispelling) {
  if (chispelling != nullptr) {
    
  } else {
    
  }
  chispelling_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chispelling);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ChiSpelling)
}

// string EnglishName = 5;
inline void MDBasicInfo::clear_englishname() {
  englishname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::englishname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
  return englishname_.GetNoArena();
}
inline void MDBasicInfo::set_englishname(const std::string& value) {
  
  englishname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
}
inline void MDBasicInfo::set_englishname(std::string&& value) {
  
  englishname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
}
inline void MDBasicInfo::set_englishname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  englishname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
}
inline void MDBasicInfo::set_englishname(const char* value, size_t size) {
  
  englishname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
}
inline std::string* MDBasicInfo::mutable_englishname() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
  return englishname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_englishname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
  
  return englishname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_englishname(std::string* englishname) {
  if (englishname != nullptr) {
    
  } else {
    
  }
  englishname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), englishname);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.EnglishName)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDBasicInfo::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDBasicInfo::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void MDBasicInfo::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDBasicInfo::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDBasicInfo::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void MDBasicInfo::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.securityType)
}

// string SecuritySubType = 8;
inline void MDBasicInfo::clear_securitysubtype() {
  securitysubtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::securitysubtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
  return securitysubtype_.GetNoArena();
}
inline void MDBasicInfo::set_securitysubtype(const std::string& value) {
  
  securitysubtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
}
inline void MDBasicInfo::set_securitysubtype(std::string&& value) {
  
  securitysubtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
}
inline void MDBasicInfo::set_securitysubtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  securitysubtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
}
inline void MDBasicInfo::set_securitysubtype(const char* value, size_t size) {
  
  securitysubtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
}
inline std::string* MDBasicInfo::mutable_securitysubtype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
  return securitysubtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_securitysubtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
  
  return securitysubtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_securitysubtype(std::string* securitysubtype) {
  if (securitysubtype != nullptr) {
    
  } else {
    
  }
  securitysubtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securitysubtype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.SecuritySubType)
}

// string ListDate = 9;
inline void MDBasicInfo::clear_listdate() {
  listdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::listdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
  return listdate_.GetNoArena();
}
inline void MDBasicInfo::set_listdate(const std::string& value) {
  
  listdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
}
inline void MDBasicInfo::set_listdate(std::string&& value) {
  
  listdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
}
inline void MDBasicInfo::set_listdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  listdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
}
inline void MDBasicInfo::set_listdate(const char* value, size_t size) {
  
  listdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
}
inline std::string* MDBasicInfo::mutable_listdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
  return listdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_listdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
  
  return listdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_listdate(std::string* listdate) {
  if (listdate != nullptr) {
    
  } else {
    
  }
  listdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ListDate)
}

// string Currency = 10;
inline void MDBasicInfo::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::currency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
  return currency_.GetNoArena();
}
inline void MDBasicInfo::set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
}
inline void MDBasicInfo::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
}
inline void MDBasicInfo::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
}
inline void MDBasicInfo::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
}
inline std::string* MDBasicInfo::mutable_currency() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_currency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.Currency)
}

// int64 OutstandingShare = 11;
inline void MDBasicInfo::clear_outstandingshare() {
  outstandingshare_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::outstandingshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OutstandingShare)
  return outstandingshare_;
}
inline void MDBasicInfo::set_outstandingshare(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  outstandingshare_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OutstandingShare)
}

// int64 PublicFloatShareQuantity = 12;
inline void MDBasicInfo::clear_publicfloatsharequantity() {
  publicfloatsharequantity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::publicfloatsharequantity() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PublicFloatShareQuantity)
  return publicfloatsharequantity_;
}
inline void MDBasicInfo::set_publicfloatsharequantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  publicfloatsharequantity_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PublicFloatShareQuantity)
}

// int32 MDDate = 13;
inline void MDBasicInfo::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MDDate)
  return mddate_;
}
inline void MDBasicInfo::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MDDate)
}

// string TradingPhaseCode = 14;
inline void MDBasicInfo::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
  return tradingphasecode_.GetNoArena();
}
inline void MDBasicInfo::set_tradingphasecode(const std::string& value) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
}
inline void MDBasicInfo::set_tradingphasecode(std::string&& value) {
  
  tradingphasecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
}
inline void MDBasicInfo::set_tradingphasecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
}
inline void MDBasicInfo::set_tradingphasecode(const char* value, size_t size) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
}
inline std::string* MDBasicInfo::mutable_tradingphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
  
  return tradingphasecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  tradingphasecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.TradingPhaseCode)
}

// int64 PreClosePx = 15;
inline void MDBasicInfo::clear_preclosepx() {
  preclosepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PreClosePx)
  return preclosepx_;
}
inline void MDBasicInfo::set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PreClosePx)
}

// int64 MaxPx = 16;
inline void MDBasicInfo::clear_maxpx() {
  maxpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MaxPx)
  return maxpx_;
}
inline void MDBasicInfo::set_maxpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MaxPx)
}

// int64 MinPx = 17;
inline void MDBasicInfo::clear_minpx() {
  minpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MinPx)
  return minpx_;
}
inline void MDBasicInfo::set_minpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MinPx)
}

// int64 LotSize = 18;
inline void MDBasicInfo::clear_lotsize() {
  lotsize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::lotsize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.LotSize)
  return lotsize_;
}
inline void MDBasicInfo::set_lotsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lotsize_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.LotSize)
}

// bool ShortSellFlag = 19;
inline void MDBasicInfo::clear_shortsellflag() {
  shortsellflag_ = false;
}
inline bool MDBasicInfo::shortsellflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ShortSellFlag)
  return shortsellflag_;
}
inline void MDBasicInfo::set_shortsellflag(bool value) {
  
  shortsellflag_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ShortSellFlag)
}

// string ExchangeDate = 20;
inline void MDBasicInfo::clear_exchangedate() {
  exchangedate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
  return exchangedate_.GetNoArena();
}
inline void MDBasicInfo::set_exchangedate(const std::string& value) {
  
  exchangedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
}
inline void MDBasicInfo::set_exchangedate(std::string&& value) {
  
  exchangedate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
}
inline void MDBasicInfo::set_exchangedate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
}
inline void MDBasicInfo::set_exchangedate(const char* value, size_t size) {
  
  exchangedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
}
inline std::string* MDBasicInfo::mutable_exchangedate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
  return exchangedate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_exchangedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
  
  return exchangedate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_exchangedate(std::string* exchangedate) {
  if (exchangedate != nullptr) {
    
  } else {
    
  }
  exchangedate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangedate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeDate)
}

// string ExchangeSymbol = 21;
inline void MDBasicInfo::clear_exchangesymbol() {
  exchangesymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::exchangesymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
  return exchangesymbol_.GetNoArena();
}
inline void MDBasicInfo::set_exchangesymbol(const std::string& value) {
  
  exchangesymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
}
inline void MDBasicInfo::set_exchangesymbol(std::string&& value) {
  
  exchangesymbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
}
inline void MDBasicInfo::set_exchangesymbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangesymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
}
inline void MDBasicInfo::set_exchangesymbol(const char* value, size_t size) {
  
  exchangesymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
}
inline std::string* MDBasicInfo::mutable_exchangesymbol() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
  return exchangesymbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_exchangesymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
  
  return exchangesymbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_exchangesymbol(std::string* exchangesymbol) {
  if (exchangesymbol != nullptr) {
    
  } else {
    
  }
  exchangesymbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangesymbol);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeSymbol)
}

// double TickSize = 22;
inline void MDBasicInfo::clear_ticksize() {
  ticksize_ = 0;
}
inline double MDBasicInfo::ticksize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.TickSize)
  return ticksize_;
}
inline void MDBasicInfo::set_ticksize(double value) {
  
  ticksize_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.TickSize)
}

// int32 LoanMarginIndicator = 23;
inline void MDBasicInfo::clear_loanmarginindicator() {
  loanmarginindicator_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::loanmarginindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.LoanMarginIndicator)
  return loanmarginindicator_;
}
inline void MDBasicInfo::set_loanmarginindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loanmarginindicator_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.LoanMarginIndicator)
}

// int32 PxAccuracy = 24;
inline void MDBasicInfo::clear_pxaccuracy() {
  pxaccuracy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::pxaccuracy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PxAccuracy)
  return pxaccuracy_;
}
inline void MDBasicInfo::set_pxaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pxaccuracy_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PxAccuracy)
}

// int32 IPOProfitable = 25;
inline void MDBasicInfo::clear_ipoprofitable() {
  ipoprofitable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::ipoprofitable() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.IPOProfitable)
  return ipoprofitable_;
}
inline void MDBasicInfo::set_ipoprofitable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ipoprofitable_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.IPOProfitable)
}

// int32 DiffRightsIndicator = 26;
inline void MDBasicInfo::clear_diffrightsindicator() {
  diffrightsindicator_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::diffrightsindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DiffRightsIndicator)
  return diffrightsindicator_;
}
inline void MDBasicInfo::set_diffrightsindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  diffrightsindicator_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DiffRightsIndicator)
}

// string HKSpreadTableCode = 27;
inline void MDBasicInfo::clear_hkspreadtablecode() {
  hkspreadtablecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::hkspreadtablecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
  return hkspreadtablecode_.GetNoArena();
}
inline void MDBasicInfo::set_hkspreadtablecode(const std::string& value) {
  
  hkspreadtablecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
}
inline void MDBasicInfo::set_hkspreadtablecode(std::string&& value) {
  
  hkspreadtablecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
}
inline void MDBasicInfo::set_hkspreadtablecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hkspreadtablecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
}
inline void MDBasicInfo::set_hkspreadtablecode(const char* value, size_t size) {
  
  hkspreadtablecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
}
inline std::string* MDBasicInfo::mutable_hkspreadtablecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
  return hkspreadtablecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_hkspreadtablecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
  
  return hkspreadtablecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_hkspreadtablecode(std::string* hkspreadtablecode) {
  if (hkspreadtablecode != nullptr) {
    
  } else {
    
  }
  hkspreadtablecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hkspreadtablecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.HKSpreadTableCode)
}

// double PreSettlePx = 28;
inline void MDBasicInfo::clear_presettlepx() {
  presettlepx_ = 0;
}
inline double MDBasicInfo::presettlepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PreSettlePx)
  return presettlepx_;
}
inline void MDBasicInfo::set_presettlepx(double value) {
  
  presettlepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PreSettlePx)
}

// double PreIOPV = 29;
inline void MDBasicInfo::clear_preiopv() {
  preiopv_ = 0;
}
inline double MDBasicInfo::preiopv() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PreIOPV)
  return preiopv_;
}
inline void MDBasicInfo::set_preiopv(double value) {
  
  preiopv_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PreIOPV)
}

// int32 ShHkConnect = 30;
inline void MDBasicInfo::clear_shhkconnect() {
  shhkconnect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::shhkconnect() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ShHkConnect)
  return shhkconnect_;
}
inline void MDBasicInfo::set_shhkconnect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shhkconnect_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ShHkConnect)
}

// int32 SzHkConnect = 31;
inline void MDBasicInfo::clear_szhkconnect() {
  szhkconnect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::szhkconnect() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SzHkConnect)
  return szhkconnect_;
}
inline void MDBasicInfo::set_szhkconnect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  szhkconnect_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SzHkConnect)
}

// string OptionContractID = 40;
inline void MDBasicInfo::clear_optioncontractid() {
  optioncontractid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optioncontractid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
  return optioncontractid_.GetNoArena();
}
inline void MDBasicInfo::set_optioncontractid(const std::string& value) {
  
  optioncontractid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
}
inline void MDBasicInfo::set_optioncontractid(std::string&& value) {
  
  optioncontractid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
}
inline void MDBasicInfo::set_optioncontractid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optioncontractid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
}
inline void MDBasicInfo::set_optioncontractid(const char* value, size_t size) {
  
  optioncontractid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
}
inline std::string* MDBasicInfo::mutable_optioncontractid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
  return optioncontractid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optioncontractid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
  
  return optioncontractid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optioncontractid(std::string* optioncontractid) {
  if (optioncontractid != nullptr) {
    
  } else {
    
  }
  optioncontractid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optioncontractid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractID)
}

// string OptionContractSymbol = 41;
inline void MDBasicInfo::clear_optioncontractsymbol() {
  optioncontractsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optioncontractsymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
  return optioncontractsymbol_.GetNoArena();
}
inline void MDBasicInfo::set_optioncontractsymbol(const std::string& value) {
  
  optioncontractsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
}
inline void MDBasicInfo::set_optioncontractsymbol(std::string&& value) {
  
  optioncontractsymbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
}
inline void MDBasicInfo::set_optioncontractsymbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optioncontractsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
}
inline void MDBasicInfo::set_optioncontractsymbol(const char* value, size_t size) {
  
  optioncontractsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
}
inline std::string* MDBasicInfo::mutable_optioncontractsymbol() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
  return optioncontractsymbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optioncontractsymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
  
  return optioncontractsymbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optioncontractsymbol(std::string* optioncontractsymbol) {
  if (optioncontractsymbol != nullptr) {
    
  } else {
    
  }
  optioncontractsymbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optioncontractsymbol);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractSymbol)
}

// string OptionUnderlyingSecurityID = 42;
inline void MDBasicInfo::clear_optionunderlyingsecurityid() {
  optionunderlyingsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionunderlyingsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
  return optionunderlyingsecurityid_.GetNoArena();
}
inline void MDBasicInfo::set_optionunderlyingsecurityid(const std::string& value) {
  
  optionunderlyingsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
}
inline void MDBasicInfo::set_optionunderlyingsecurityid(std::string&& value) {
  
  optionunderlyingsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
}
inline void MDBasicInfo::set_optionunderlyingsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionunderlyingsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
}
inline void MDBasicInfo::set_optionunderlyingsecurityid(const char* value, size_t size) {
  
  optionunderlyingsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
}
inline std::string* MDBasicInfo::mutable_optionunderlyingsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
  return optionunderlyingsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionunderlyingsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
  
  return optionunderlyingsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionunderlyingsecurityid(std::string* optionunderlyingsecurityid) {
  if (optionunderlyingsecurityid != nullptr) {
    
  } else {
    
  }
  optionunderlyingsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionunderlyingsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSecurityID)
}

// string OptionUnderlyingSymbol = 43;
inline void MDBasicInfo::clear_optionunderlyingsymbol() {
  optionunderlyingsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionunderlyingsymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
  return optionunderlyingsymbol_.GetNoArena();
}
inline void MDBasicInfo::set_optionunderlyingsymbol(const std::string& value) {
  
  optionunderlyingsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
}
inline void MDBasicInfo::set_optionunderlyingsymbol(std::string&& value) {
  
  optionunderlyingsymbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
}
inline void MDBasicInfo::set_optionunderlyingsymbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionunderlyingsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
}
inline void MDBasicInfo::set_optionunderlyingsymbol(const char* value, size_t size) {
  
  optionunderlyingsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
}
inline std::string* MDBasicInfo::mutable_optionunderlyingsymbol() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
  return optionunderlyingsymbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionunderlyingsymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
  
  return optionunderlyingsymbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionunderlyingsymbol(std::string* optionunderlyingsymbol) {
  if (optionunderlyingsymbol != nullptr) {
    
  } else {
    
  }
  optionunderlyingsymbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionunderlyingsymbol);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingSymbol)
}

// string OptionUnderlyingType = 44;
inline void MDBasicInfo::clear_optionunderlyingtype() {
  optionunderlyingtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionunderlyingtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
  return optionunderlyingtype_.GetNoArena();
}
inline void MDBasicInfo::set_optionunderlyingtype(const std::string& value) {
  
  optionunderlyingtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
}
inline void MDBasicInfo::set_optionunderlyingtype(std::string&& value) {
  
  optionunderlyingtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
}
inline void MDBasicInfo::set_optionunderlyingtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionunderlyingtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
}
inline void MDBasicInfo::set_optionunderlyingtype(const char* value, size_t size) {
  
  optionunderlyingtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
}
inline std::string* MDBasicInfo::mutable_optionunderlyingtype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
  return optionunderlyingtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionunderlyingtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
  
  return optionunderlyingtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionunderlyingtype(std::string* optionunderlyingtype) {
  if (optionunderlyingtype != nullptr) {
    
  } else {
    
  }
  optionunderlyingtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionunderlyingtype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingType)
}

// string OptionOptionType = 45;
inline void MDBasicInfo::clear_optionoptiontype() {
  optionoptiontype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionoptiontype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
  return optionoptiontype_.GetNoArena();
}
inline void MDBasicInfo::set_optionoptiontype(const std::string& value) {
  
  optionoptiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
}
inline void MDBasicInfo::set_optionoptiontype(std::string&& value) {
  
  optionoptiontype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
}
inline void MDBasicInfo::set_optionoptiontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionoptiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
}
inline void MDBasicInfo::set_optionoptiontype(const char* value, size_t size) {
  
  optionoptiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
}
inline std::string* MDBasicInfo::mutable_optionoptiontype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
  return optionoptiontype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionoptiontype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
  
  return optionoptiontype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionoptiontype(std::string* optionoptiontype) {
  if (optionoptiontype != nullptr) {
    
  } else {
    
  }
  optionoptiontype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionoptiontype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionOptionType)
}

// string OptionCallOrPut = 46;
inline void MDBasicInfo::clear_optioncallorput() {
  optioncallorput_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optioncallorput() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
  return optioncallorput_.GetNoArena();
}
inline void MDBasicInfo::set_optioncallorput(const std::string& value) {
  
  optioncallorput_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
}
inline void MDBasicInfo::set_optioncallorput(std::string&& value) {
  
  optioncallorput_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
}
inline void MDBasicInfo::set_optioncallorput(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optioncallorput_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
}
inline void MDBasicInfo::set_optioncallorput(const char* value, size_t size) {
  
  optioncallorput_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
}
inline std::string* MDBasicInfo::mutable_optioncallorput() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
  return optioncallorput_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optioncallorput() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
  
  return optioncallorput_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optioncallorput(std::string* optioncallorput) {
  if (optioncallorput != nullptr) {
    
  } else {
    
  }
  optioncallorput_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optioncallorput);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionCallOrPut)
}

// int64 OptionContractMultiplierUnit = 47;
inline void MDBasicInfo::clear_optioncontractmultiplierunit() {
  optioncontractmultiplierunit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optioncontractmultiplierunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractMultiplierUnit)
  return optioncontractmultiplierunit_;
}
inline void MDBasicInfo::set_optioncontractmultiplierunit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optioncontractmultiplierunit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractMultiplierUnit)
}

// double OptionExercisePrice = 48;
inline void MDBasicInfo::clear_optionexerciseprice() {
  optionexerciseprice_ = 0;
}
inline double MDBasicInfo::optionexerciseprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionExercisePrice)
  return optionexerciseprice_;
}
inline void MDBasicInfo::set_optionexerciseprice(double value) {
  
  optionexerciseprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionExercisePrice)
}

// string OptionStartDate = 49;
inline void MDBasicInfo::clear_optionstartdate() {
  optionstartdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionstartdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
  return optionstartdate_.GetNoArena();
}
inline void MDBasicInfo::set_optionstartdate(const std::string& value) {
  
  optionstartdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
}
inline void MDBasicInfo::set_optionstartdate(std::string&& value) {
  
  optionstartdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
}
inline void MDBasicInfo::set_optionstartdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionstartdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
}
inline void MDBasicInfo::set_optionstartdate(const char* value, size_t size) {
  
  optionstartdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
}
inline std::string* MDBasicInfo::mutable_optionstartdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
  return optionstartdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionstartdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
  
  return optionstartdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionstartdate(std::string* optionstartdate) {
  if (optionstartdate != nullptr) {
    
  } else {
    
  }
  optionstartdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionstartdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionStartDate)
}

// string OptionEndDate = 50;
inline void MDBasicInfo::clear_optionenddate() {
  optionenddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionenddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
  return optionenddate_.GetNoArena();
}
inline void MDBasicInfo::set_optionenddate(const std::string& value) {
  
  optionenddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
}
inline void MDBasicInfo::set_optionenddate(std::string&& value) {
  
  optionenddate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
}
inline void MDBasicInfo::set_optionenddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionenddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
}
inline void MDBasicInfo::set_optionenddate(const char* value, size_t size) {
  
  optionenddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
}
inline std::string* MDBasicInfo::mutable_optionenddate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
  return optionenddate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionenddate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
  
  return optionenddate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionenddate(std::string* optionenddate) {
  if (optionenddate != nullptr) {
    
  } else {
    
  }
  optionenddate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionenddate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionEndDate)
}

// string OptionExerciseDate = 51;
inline void MDBasicInfo::clear_optionexercisedate() {
  optionexercisedate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionexercisedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
  return optionexercisedate_.GetNoArena();
}
inline void MDBasicInfo::set_optionexercisedate(const std::string& value) {
  
  optionexercisedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
}
inline void MDBasicInfo::set_optionexercisedate(std::string&& value) {
  
  optionexercisedate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
}
inline void MDBasicInfo::set_optionexercisedate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionexercisedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
}
inline void MDBasicInfo::set_optionexercisedate(const char* value, size_t size) {
  
  optionexercisedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
}
inline std::string* MDBasicInfo::mutable_optionexercisedate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
  return optionexercisedate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionexercisedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
  
  return optionexercisedate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionexercisedate(std::string* optionexercisedate) {
  if (optionexercisedate != nullptr) {
    
  } else {
    
  }
  optionexercisedate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionexercisedate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionExerciseDate)
}

// string OptionDeliveryDate = 52;
inline void MDBasicInfo::clear_optiondeliverydate() {
  optiondeliverydate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optiondeliverydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
  return optiondeliverydate_.GetNoArena();
}
inline void MDBasicInfo::set_optiondeliverydate(const std::string& value) {
  
  optiondeliverydate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
}
inline void MDBasicInfo::set_optiondeliverydate(std::string&& value) {
  
  optiondeliverydate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
}
inline void MDBasicInfo::set_optiondeliverydate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optiondeliverydate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
}
inline void MDBasicInfo::set_optiondeliverydate(const char* value, size_t size) {
  
  optiondeliverydate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
}
inline std::string* MDBasicInfo::mutable_optiondeliverydate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
  return optiondeliverydate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optiondeliverydate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
  
  return optiondeliverydate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optiondeliverydate(std::string* optiondeliverydate) {
  if (optiondeliverydate != nullptr) {
    
  } else {
    
  }
  optiondeliverydate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optiondeliverydate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryDate)
}

// string OptionExpireDate = 53;
inline void MDBasicInfo::clear_optionexpiredate() {
  optionexpiredate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionexpiredate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
  return optionexpiredate_.GetNoArena();
}
inline void MDBasicInfo::set_optionexpiredate(const std::string& value) {
  
  optionexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
}
inline void MDBasicInfo::set_optionexpiredate(std::string&& value) {
  
  optionexpiredate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
}
inline void MDBasicInfo::set_optionexpiredate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
}
inline void MDBasicInfo::set_optionexpiredate(const char* value, size_t size) {
  
  optionexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
}
inline std::string* MDBasicInfo::mutable_optionexpiredate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
  return optionexpiredate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionexpiredate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
  
  return optionexpiredate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionexpiredate(std::string* optionexpiredate) {
  if (optionexpiredate != nullptr) {
    
  } else {
    
  }
  optionexpiredate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionexpiredate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionExpireDate)
}

// string OptionUpdateVersion = 54;
inline void MDBasicInfo::clear_optionupdateversion() {
  optionupdateversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionupdateversion() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
  return optionupdateversion_.GetNoArena();
}
inline void MDBasicInfo::set_optionupdateversion(const std::string& value) {
  
  optionupdateversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
}
inline void MDBasicInfo::set_optionupdateversion(std::string&& value) {
  
  optionupdateversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
}
inline void MDBasicInfo::set_optionupdateversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionupdateversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
}
inline void MDBasicInfo::set_optionupdateversion(const char* value, size_t size) {
  
  optionupdateversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
}
inline std::string* MDBasicInfo::mutable_optionupdateversion() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
  return optionupdateversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionupdateversion() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
  
  return optionupdateversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionupdateversion(std::string* optionupdateversion) {
  if (optionupdateversion != nullptr) {
    
  } else {
    
  }
  optionupdateversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionupdateversion);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionUpdateVersion)
}

// int64 OptionTotalLongPosition = 55;
inline void MDBasicInfo::clear_optiontotallongposition() {
  optiontotallongposition_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optiontotallongposition() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionTotalLongPosition)
  return optiontotallongposition_;
}
inline void MDBasicInfo::set_optiontotallongposition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optiontotallongposition_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionTotalLongPosition)
}

// double OptionSecurityClosePx = 56;
inline void MDBasicInfo::clear_optionsecurityclosepx() {
  optionsecurityclosepx_ = 0;
}
inline double MDBasicInfo::optionsecurityclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityClosePx)
  return optionsecurityclosepx_;
}
inline void MDBasicInfo::set_optionsecurityclosepx(double value) {
  
  optionsecurityclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityClosePx)
}

// double OptionSettlPrice = 57;
inline void MDBasicInfo::clear_optionsettlprice() {
  optionsettlprice_ = 0;
}
inline double MDBasicInfo::optionsettlprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSettlPrice)
  return optionsettlprice_;
}
inline void MDBasicInfo::set_optionsettlprice(double value) {
  
  optionsettlprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSettlPrice)
}

// double OptionUnderlyingClosePx = 58;
inline void MDBasicInfo::clear_optionunderlyingclosepx() {
  optionunderlyingclosepx_ = 0;
}
inline double MDBasicInfo::optionunderlyingclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingClosePx)
  return optionunderlyingclosepx_;
}
inline void MDBasicInfo::set_optionunderlyingclosepx(double value) {
  
  optionunderlyingclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionUnderlyingClosePx)
}

// string OptionPriceLimitType = 59;
inline void MDBasicInfo::clear_optionpricelimittype() {
  optionpricelimittype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionpricelimittype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
  return optionpricelimittype_.GetNoArena();
}
inline void MDBasicInfo::set_optionpricelimittype(const std::string& value) {
  
  optionpricelimittype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
}
inline void MDBasicInfo::set_optionpricelimittype(std::string&& value) {
  
  optionpricelimittype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
}
inline void MDBasicInfo::set_optionpricelimittype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionpricelimittype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
}
inline void MDBasicInfo::set_optionpricelimittype(const char* value, size_t size) {
  
  optionpricelimittype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
}
inline std::string* MDBasicInfo::mutable_optionpricelimittype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
  return optionpricelimittype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionpricelimittype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
  
  return optionpricelimittype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionpricelimittype(std::string* optionpricelimittype) {
  if (optionpricelimittype != nullptr) {
    
  } else {
    
  }
  optionpricelimittype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionpricelimittype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionPriceLimitType)
}

// double OptionDailyPriceUpLimit = 60;
inline void MDBasicInfo::clear_optiondailypriceuplimit() {
  optiondailypriceuplimit_ = 0;
}
inline double MDBasicInfo::optiondailypriceuplimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionDailyPriceUpLimit)
  return optiondailypriceuplimit_;
}
inline void MDBasicInfo::set_optiondailypriceuplimit(double value) {
  
  optiondailypriceuplimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionDailyPriceUpLimit)
}

// double OptionDailyPriceDownLimit = 61;
inline void MDBasicInfo::clear_optiondailypricedownlimit() {
  optiondailypricedownlimit_ = 0;
}
inline double MDBasicInfo::optiondailypricedownlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionDailyPriceDownLimit)
  return optiondailypricedownlimit_;
}
inline void MDBasicInfo::set_optiondailypricedownlimit(double value) {
  
  optiondailypricedownlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionDailyPriceDownLimit)
}

// double OptionMarginUnit = 62;
inline void MDBasicInfo::clear_optionmarginunit() {
  optionmarginunit_ = 0;
}
inline double MDBasicInfo::optionmarginunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginUnit)
  return optionmarginunit_;
}
inline void MDBasicInfo::set_optionmarginunit(double value) {
  
  optionmarginunit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginUnit)
}

// double OptionMarginRatioParam1 = 63;
inline void MDBasicInfo::clear_optionmarginratioparam1() {
  optionmarginratioparam1_ = 0;
}
inline double MDBasicInfo::optionmarginratioparam1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginRatioParam1)
  return optionmarginratioparam1_;
}
inline void MDBasicInfo::set_optionmarginratioparam1(double value) {
  
  optionmarginratioparam1_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginRatioParam1)
}

// double OptionMarginRatioParam2 = 64;
inline void MDBasicInfo::clear_optionmarginratioparam2() {
  optionmarginratioparam2_ = 0;
}
inline double MDBasicInfo::optionmarginratioparam2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginRatioParam2)
  return optionmarginratioparam2_;
}
inline void MDBasicInfo::set_optionmarginratioparam2(double value) {
  
  optionmarginratioparam2_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarginRatioParam2)
}

// int64 OptionRoundLot = 65;
inline void MDBasicInfo::clear_optionroundlot() {
  optionroundlot_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionroundlot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionRoundLot)
  return optionroundlot_;
}
inline void MDBasicInfo::set_optionroundlot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionroundlot_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionRoundLot)
}

// int64 OptionLmtOrdMinFloor = 66;
inline void MDBasicInfo::clear_optionlmtordminfloor() {
  optionlmtordminfloor_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionlmtordminfloor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionLmtOrdMinFloor)
  return optionlmtordminfloor_;
}
inline void MDBasicInfo::set_optionlmtordminfloor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionlmtordminfloor_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionLmtOrdMinFloor)
}

// int64 OptionLmtOrdMaxFloor = 67;
inline void MDBasicInfo::clear_optionlmtordmaxfloor() {
  optionlmtordmaxfloor_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionlmtordmaxfloor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionLmtOrdMaxFloor)
  return optionlmtordmaxfloor_;
}
inline void MDBasicInfo::set_optionlmtordmaxfloor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionlmtordmaxfloor_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionLmtOrdMaxFloor)
}

// int64 OptionMktOrdMinFloor = 68;
inline void MDBasicInfo::clear_optionmktordminfloor() {
  optionmktordminfloor_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionmktordminfloor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMktOrdMinFloor)
  return optionmktordminfloor_;
}
inline void MDBasicInfo::set_optionmktordminfloor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionmktordminfloor_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMktOrdMinFloor)
}

// int64 OptionMktOrdMaxFloor = 69;
inline void MDBasicInfo::clear_optionmktordmaxfloor() {
  optionmktordmaxfloor_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionmktordmaxfloor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMktOrdMaxFloor)
  return optionmktordmaxfloor_;
}
inline void MDBasicInfo::set_optionmktordmaxfloor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionmktordmaxfloor_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMktOrdMaxFloor)
}

// double OptionTickSize = 70;
inline void MDBasicInfo::clear_optionticksize() {
  optionticksize_ = 0;
}
inline double MDBasicInfo::optionticksize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionTickSize)
  return optionticksize_;
}
inline void MDBasicInfo::set_optionticksize(double value) {
  
  optionticksize_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionTickSize)
}

// string OptionSecurityStatusFlag = 71;
inline void MDBasicInfo::clear_optionsecuritystatusflag() {
  optionsecuritystatusflag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionsecuritystatusflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
  return optionsecuritystatusflag_.GetNoArena();
}
inline void MDBasicInfo::set_optionsecuritystatusflag(const std::string& value) {
  
  optionsecuritystatusflag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
}
inline void MDBasicInfo::set_optionsecuritystatusflag(std::string&& value) {
  
  optionsecuritystatusflag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
}
inline void MDBasicInfo::set_optionsecuritystatusflag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionsecuritystatusflag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
}
inline void MDBasicInfo::set_optionsecuritystatusflag(const char* value, size_t size) {
  
  optionsecuritystatusflag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
}
inline std::string* MDBasicInfo::mutable_optionsecuritystatusflag() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
  return optionsecuritystatusflag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionsecuritystatusflag() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
  
  return optionsecuritystatusflag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionsecuritystatusflag(std::string* optionsecuritystatusflag) {
  if (optionsecuritystatusflag != nullptr) {
    
  } else {
    
  }
  optionsecuritystatusflag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionsecuritystatusflag);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionSecurityStatusFlag)
}

// string OptionCarryInterestDate = 72;
inline void MDBasicInfo::clear_optioncarryinterestdate() {
  optioncarryinterestdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optioncarryinterestdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
  return optioncarryinterestdate_.GetNoArena();
}
inline void MDBasicInfo::set_optioncarryinterestdate(const std::string& value) {
  
  optioncarryinterestdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
}
inline void MDBasicInfo::set_optioncarryinterestdate(std::string&& value) {
  
  optioncarryinterestdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
}
inline void MDBasicInfo::set_optioncarryinterestdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optioncarryinterestdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
}
inline void MDBasicInfo::set_optioncarryinterestdate(const char* value, size_t size) {
  
  optioncarryinterestdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
}
inline std::string* MDBasicInfo::mutable_optioncarryinterestdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
  return optioncarryinterestdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optioncarryinterestdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
  
  return optioncarryinterestdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optioncarryinterestdate(std::string* optioncarryinterestdate) {
  if (optioncarryinterestdate != nullptr) {
    
  } else {
    
  }
  optioncarryinterestdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optioncarryinterestdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionCarryInterestDate)
}

// string OptionEarlyExpireDate = 73;
inline void MDBasicInfo::clear_optionearlyexpiredate() {
  optionearlyexpiredate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionearlyexpiredate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
  return optionearlyexpiredate_.GetNoArena();
}
inline void MDBasicInfo::set_optionearlyexpiredate(const std::string& value) {
  
  optionearlyexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
}
inline void MDBasicInfo::set_optionearlyexpiredate(std::string&& value) {
  
  optionearlyexpiredate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
}
inline void MDBasicInfo::set_optionearlyexpiredate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionearlyexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
}
inline void MDBasicInfo::set_optionearlyexpiredate(const char* value, size_t size) {
  
  optionearlyexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
}
inline std::string* MDBasicInfo::mutable_optionearlyexpiredate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
  return optionearlyexpiredate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionearlyexpiredate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
  
  return optionearlyexpiredate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionearlyexpiredate(std::string* optionearlyexpiredate) {
  if (optionearlyexpiredate != nullptr) {
    
  } else {
    
  }
  optionearlyexpiredate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionearlyexpiredate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionEarlyExpireDate)
}

// string OptionStrategySecurityID = 74;
inline void MDBasicInfo::clear_optionstrategysecurityid() {
  optionstrategysecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionstrategysecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
  return optionstrategysecurityid_.GetNoArena();
}
inline void MDBasicInfo::set_optionstrategysecurityid(const std::string& value) {
  
  optionstrategysecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
}
inline void MDBasicInfo::set_optionstrategysecurityid(std::string&& value) {
  
  optionstrategysecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
}
inline void MDBasicInfo::set_optionstrategysecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionstrategysecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
}
inline void MDBasicInfo::set_optionstrategysecurityid(const char* value, size_t size) {
  
  optionstrategysecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
}
inline std::string* MDBasicInfo::mutable_optionstrategysecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
  return optionstrategysecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionstrategysecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
  
  return optionstrategysecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionstrategysecurityid(std::string* optionstrategysecurityid) {
  if (optionstrategysecurityid != nullptr) {
    
  } else {
    
  }
  optionstrategysecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionstrategysecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionStrategySecurityID)
}

// string FITradeProductType = 80;
inline void MDBasicInfo::clear_fitradeproducttype() {
  fitradeproducttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fitradeproducttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
  return fitradeproducttype_.GetNoArena();
}
inline void MDBasicInfo::set_fitradeproducttype(const std::string& value) {
  
  fitradeproducttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
}
inline void MDBasicInfo::set_fitradeproducttype(std::string&& value) {
  
  fitradeproducttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
}
inline void MDBasicInfo::set_fitradeproducttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fitradeproducttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
}
inline void MDBasicInfo::set_fitradeproducttype(const char* value, size_t size) {
  
  fitradeproducttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
}
inline std::string* MDBasicInfo::mutable_fitradeproducttype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
  return fitradeproducttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fitradeproducttype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
  
  return fitradeproducttype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fitradeproducttype(std::string* fitradeproducttype) {
  if (fitradeproducttype != nullptr) {
    
  } else {
    
  }
  fitradeproducttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fitradeproducttype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FITradeProductType)
}

// string FISecurityProperty = 81;
inline void MDBasicInfo::clear_fisecurityproperty() {
  fisecurityproperty_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fisecurityproperty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
  return fisecurityproperty_.GetNoArena();
}
inline void MDBasicInfo::set_fisecurityproperty(const std::string& value) {
  
  fisecurityproperty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
}
inline void MDBasicInfo::set_fisecurityproperty(std::string&& value) {
  
  fisecurityproperty_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
}
inline void MDBasicInfo::set_fisecurityproperty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fisecurityproperty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
}
inline void MDBasicInfo::set_fisecurityproperty(const char* value, size_t size) {
  
  fisecurityproperty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
}
inline std::string* MDBasicInfo::mutable_fisecurityproperty() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
  return fisecurityproperty_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fisecurityproperty() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
  
  return fisecurityproperty_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fisecurityproperty(std::string* fisecurityproperty) {
  if (fisecurityproperty != nullptr) {
    
  } else {
    
  }
  fisecurityproperty_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fisecurityproperty);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityProperty)
}

// string FISecurityStatus = 82;
inline void MDBasicInfo::clear_fisecuritystatus() {
  fisecuritystatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fisecuritystatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
  return fisecuritystatus_.GetNoArena();
}
inline void MDBasicInfo::set_fisecuritystatus(const std::string& value) {
  
  fisecuritystatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
}
inline void MDBasicInfo::set_fisecuritystatus(std::string&& value) {
  
  fisecuritystatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
}
inline void MDBasicInfo::set_fisecuritystatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fisecuritystatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
}
inline void MDBasicInfo::set_fisecuritystatus(const char* value, size_t size) {
  
  fisecuritystatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
}
inline std::string* MDBasicInfo::mutable_fisecuritystatus() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
  return fisecuritystatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fisecuritystatus() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
  
  return fisecuritystatus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fisecuritystatus(std::string* fisecuritystatus) {
  if (fisecuritystatus != nullptr) {
    
  } else {
    
  }
  fisecuritystatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fisecuritystatus);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FISecurityStatus)
}

// string FIPledgedSecurityID = 83;
inline void MDBasicInfo::clear_fipledgedsecurityid() {
  fipledgedsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fipledgedsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
  return fipledgedsecurityid_.GetNoArena();
}
inline void MDBasicInfo::set_fipledgedsecurityid(const std::string& value) {
  
  fipledgedsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
}
inline void MDBasicInfo::set_fipledgedsecurityid(std::string&& value) {
  
  fipledgedsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
}
inline void MDBasicInfo::set_fipledgedsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fipledgedsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
}
inline void MDBasicInfo::set_fipledgedsecurityid(const char* value, size_t size) {
  
  fipledgedsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
}
inline std::string* MDBasicInfo::mutable_fipledgedsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
  return fipledgedsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fipledgedsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
  
  return fipledgedsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fipledgedsecurityid(std::string* fipledgedsecurityid) {
  if (fipledgedsecurityid != nullptr) {
    
  } else {
    
  }
  fipledgedsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fipledgedsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIPledgedSecurityID)
}

// string FIOpenTime = 84;
inline void MDBasicInfo::clear_fiopentime() {
  fiopentime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fiopentime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
  return fiopentime_.GetNoArena();
}
inline void MDBasicInfo::set_fiopentime(const std::string& value) {
  
  fiopentime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
}
inline void MDBasicInfo::set_fiopentime(std::string&& value) {
  
  fiopentime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
}
inline void MDBasicInfo::set_fiopentime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fiopentime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
}
inline void MDBasicInfo::set_fiopentime(const char* value, size_t size) {
  
  fiopentime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
}
inline std::string* MDBasicInfo::mutable_fiopentime() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
  return fiopentime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fiopentime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
  
  return fiopentime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fiopentime(std::string* fiopentime) {
  if (fiopentime != nullptr) {
    
  } else {
    
  }
  fiopentime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fiopentime);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIOpenTime)
}

// string FICloseTime = 85;
inline void MDBasicInfo::clear_ficlosetime() {
  ficlosetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::ficlosetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
  return ficlosetime_.GetNoArena();
}
inline void MDBasicInfo::set_ficlosetime(const std::string& value) {
  
  ficlosetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
}
inline void MDBasicInfo::set_ficlosetime(std::string&& value) {
  
  ficlosetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
}
inline void MDBasicInfo::set_ficlosetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ficlosetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
}
inline void MDBasicInfo::set_ficlosetime(const char* value, size_t size) {
  
  ficlosetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
}
inline std::string* MDBasicInfo::mutable_ficlosetime() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
  return ficlosetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_ficlosetime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
  
  return ficlosetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_ficlosetime(std::string* ficlosetime) {
  if (ficlosetime != nullptr) {
    
  } else {
    
  }
  ficlosetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ficlosetime);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FICloseTime)
}

// string FIIssueMode = 86;
inline void MDBasicInfo::clear_fiissuemode() {
  fiissuemode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fiissuemode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
  return fiissuemode_.GetNoArena();
}
inline void MDBasicInfo::set_fiissuemode(const std::string& value) {
  
  fiissuemode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
}
inline void MDBasicInfo::set_fiissuemode(std::string&& value) {
  
  fiissuemode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
}
inline void MDBasicInfo::set_fiissuemode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fiissuemode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
}
inline void MDBasicInfo::set_fiissuemode(const char* value, size_t size) {
  
  fiissuemode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
}
inline std::string* MDBasicInfo::mutable_fiissuemode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
  return fiissuemode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fiissuemode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
  
  return fiissuemode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fiissuemode(std::string* fiissuemode) {
  if (fiissuemode != nullptr) {
    
  } else {
    
  }
  fiissuemode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fiissuemode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMode)
}

// double FIFaceAmount = 87;
inline void MDBasicInfo::clear_fifaceamount() {
  fifaceamount_ = 0;
}
inline double MDBasicInfo::fifaceamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIFaceAmount)
  return fifaceamount_;
}
inline void MDBasicInfo::set_fifaceamount(double value) {
  
  fifaceamount_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIFaceAmount)
}

// double FIIssuePrice = 88;
inline void MDBasicInfo::clear_fiissueprice() {
  fiissueprice_ = 0;
}
inline double MDBasicInfo::fiissueprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssuePrice)
  return fiissueprice_;
}
inline void MDBasicInfo::set_fiissueprice(double value) {
  
  fiissueprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssuePrice)
}

// string FIInterestType = 89;
inline void MDBasicInfo::clear_fiinteresttype() {
  fiinteresttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fiinteresttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
  return fiinteresttype_.GetNoArena();
}
inline void MDBasicInfo::set_fiinteresttype(const std::string& value) {
  
  fiinteresttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
}
inline void MDBasicInfo::set_fiinteresttype(std::string&& value) {
  
  fiinteresttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
}
inline void MDBasicInfo::set_fiinteresttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fiinteresttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
}
inline void MDBasicInfo::set_fiinteresttype(const char* value, size_t size) {
  
  fiinteresttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
}
inline std::string* MDBasicInfo::mutable_fiinteresttype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
  return fiinteresttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fiinteresttype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
  
  return fiinteresttype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fiinteresttype(std::string* fiinteresttype) {
  if (fiinteresttype != nullptr) {
    
  } else {
    
  }
  fiinteresttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fiinteresttype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestType)
}

// string FIInterestFrequency = 90;
inline void MDBasicInfo::clear_fiinterestfrequency() {
  fiinterestfrequency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fiinterestfrequency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
  return fiinterestfrequency_.GetNoArena();
}
inline void MDBasicInfo::set_fiinterestfrequency(const std::string& value) {
  
  fiinterestfrequency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
}
inline void MDBasicInfo::set_fiinterestfrequency(std::string&& value) {
  
  fiinterestfrequency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
}
inline void MDBasicInfo::set_fiinterestfrequency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fiinterestfrequency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
}
inline void MDBasicInfo::set_fiinterestfrequency(const char* value, size_t size) {
  
  fiinterestfrequency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
}
inline std::string* MDBasicInfo::mutable_fiinterestfrequency() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
  return fiinterestfrequency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fiinterestfrequency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
  
  return fiinterestfrequency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fiinterestfrequency(std::string* fiinterestfrequency) {
  if (fiinterestfrequency != nullptr) {
    
  } else {
    
  }
  fiinterestfrequency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fiinterestfrequency);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIInterestFrequency)
}

// double FIGuaranteedInterestRate = 91;
inline void MDBasicInfo::clear_figuaranteedinterestrate() {
  figuaranteedinterestrate_ = 0;
}
inline double MDBasicInfo::figuaranteedinterestrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIGuaranteedInterestRate)
  return figuaranteedinterestrate_;
}
inline void MDBasicInfo::set_figuaranteedinterestrate(double value) {
  
  figuaranteedinterestrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIGuaranteedInterestRate)
}

// double FIBaseInterestRate = 92;
inline void MDBasicInfo::clear_fibaseinterestrate() {
  fibaseinterestrate_ = 0;
}
inline double MDBasicInfo::fibaseinterestrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIBaseInterestRate)
  return fibaseinterestrate_;
}
inline void MDBasicInfo::set_fibaseinterestrate(double value) {
  
  fibaseinterestrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIBaseInterestRate)
}

// double FIQuotedMargin = 93;
inline void MDBasicInfo::clear_fiquotedmargin() {
  fiquotedmargin_ = 0;
}
inline double MDBasicInfo::fiquotedmargin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIQuotedMargin)
  return fiquotedmargin_;
}
inline void MDBasicInfo::set_fiquotedmargin(double value) {
  
  fiquotedmargin_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIQuotedMargin)
}

// int32 FITimeLimit = 94;
inline void MDBasicInfo::clear_fitimelimit() {
  fitimelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::fitimelimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FITimeLimit)
  return fitimelimit_;
}
inline void MDBasicInfo::set_fitimelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fitimelimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FITimeLimit)
}

// double FITotalIssuance = 95;
inline void MDBasicInfo::clear_fitotalissuance() {
  fitotalissuance_ = 0;
}
inline double MDBasicInfo::fitotalissuance() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FITotalIssuance)
  return fitotalissuance_;
}
inline void MDBasicInfo::set_fitotalissuance(double value) {
  
  fitotalissuance_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FITotalIssuance)
}

// string FIIssueStartDate = 96;
inline void MDBasicInfo::clear_fiissuestartdate() {
  fiissuestartdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fiissuestartdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
  return fiissuestartdate_.GetNoArena();
}
inline void MDBasicInfo::set_fiissuestartdate(const std::string& value) {
  
  fiissuestartdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
}
inline void MDBasicInfo::set_fiissuestartdate(std::string&& value) {
  
  fiissuestartdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
}
inline void MDBasicInfo::set_fiissuestartdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fiissuestartdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
}
inline void MDBasicInfo::set_fiissuestartdate(const char* value, size_t size) {
  
  fiissuestartdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
}
inline std::string* MDBasicInfo::mutable_fiissuestartdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
  return fiissuestartdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fiissuestartdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
  
  return fiissuestartdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fiissuestartdate(std::string* fiissuestartdate) {
  if (fiissuestartdate != nullptr) {
    
  } else {
    
  }
  fiissuestartdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fiissuestartdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueStartDate)
}

// string FIIssueEndDate = 97;
inline void MDBasicInfo::clear_fiissueenddate() {
  fiissueenddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fiissueenddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
  return fiissueenddate_.GetNoArena();
}
inline void MDBasicInfo::set_fiissueenddate(const std::string& value) {
  
  fiissueenddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
}
inline void MDBasicInfo::set_fiissueenddate(std::string&& value) {
  
  fiissueenddate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
}
inline void MDBasicInfo::set_fiissueenddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fiissueenddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
}
inline void MDBasicInfo::set_fiissueenddate(const char* value, size_t size) {
  
  fiissueenddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
}
inline std::string* MDBasicInfo::mutable_fiissueenddate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
  return fiissueenddate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fiissueenddate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
  
  return fiissueenddate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fiissueenddate(std::string* fiissueenddate) {
  if (fiissueenddate != nullptr) {
    
  } else {
    
  }
  fiissueenddate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fiissueenddate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueEndDate)
}

// string FIListDate = 98;
inline void MDBasicInfo::clear_filistdate() {
  filistdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::filistdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
  return filistdate_.GetNoArena();
}
inline void MDBasicInfo::set_filistdate(const std::string& value) {
  
  filistdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
}
inline void MDBasicInfo::set_filistdate(std::string&& value) {
  
  filistdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
}
inline void MDBasicInfo::set_filistdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filistdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
}
inline void MDBasicInfo::set_filistdate(const char* value, size_t size) {
  
  filistdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
}
inline std::string* MDBasicInfo::mutable_filistdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
  return filistdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_filistdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
  
  return filistdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_filistdate(std::string* filistdate) {
  if (filistdate != nullptr) {
    
  } else {
    
  }
  filistdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filistdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIListDate)
}

// string FIExpireDate = 99;
inline void MDBasicInfo::clear_fiexpiredate() {
  fiexpiredate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fiexpiredate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
  return fiexpiredate_.GetNoArena();
}
inline void MDBasicInfo::set_fiexpiredate(const std::string& value) {
  
  fiexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
}
inline void MDBasicInfo::set_fiexpiredate(std::string&& value) {
  
  fiexpiredate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
}
inline void MDBasicInfo::set_fiexpiredate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fiexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
}
inline void MDBasicInfo::set_fiexpiredate(const char* value, size_t size) {
  
  fiexpiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
}
inline std::string* MDBasicInfo::mutable_fiexpiredate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
  return fiexpiredate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fiexpiredate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
  
  return fiexpiredate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fiexpiredate(std::string* fiexpiredate) {
  if (fiexpiredate != nullptr) {
    
  } else {
    
  }
  fiexpiredate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fiexpiredate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIExpireDate)
}

// string FINationalDebtType = 100;
inline void MDBasicInfo::clear_finationaldebttype() {
  finationaldebttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::finationaldebttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
  return finationaldebttype_.GetNoArena();
}
inline void MDBasicInfo::set_finationaldebttype(const std::string& value) {
  
  finationaldebttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
}
inline void MDBasicInfo::set_finationaldebttype(std::string&& value) {
  
  finationaldebttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
}
inline void MDBasicInfo::set_finationaldebttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  finationaldebttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
}
inline void MDBasicInfo::set_finationaldebttype(const char* value, size_t size) {
  
  finationaldebttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
}
inline std::string* MDBasicInfo::mutable_finationaldebttype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
  return finationaldebttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_finationaldebttype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
  
  return finationaldebttype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_finationaldebttype(std::string* finationaldebttype) {
  if (finationaldebttype != nullptr) {
    
  } else {
    
  }
  finationaldebttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finationaldebttype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FINationalDebtType)
}

// string FIIssueMethod = 101;
inline void MDBasicInfo::clear_fiissuemethod() {
  fiissuemethod_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::fiissuemethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
  return fiissuemethod_.GetNoArena();
}
inline void MDBasicInfo::set_fiissuemethod(const std::string& value) {
  
  fiissuemethod_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
}
inline void MDBasicInfo::set_fiissuemethod(std::string&& value) {
  
  fiissuemethod_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
}
inline void MDBasicInfo::set_fiissuemethod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fiissuemethod_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
}
inline void MDBasicInfo::set_fiissuemethod(const char* value, size_t size) {
  
  fiissuemethod_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
}
inline std::string* MDBasicInfo::mutable_fiissuemethod() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
  return fiissuemethod_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_fiissuemethod() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
  
  return fiissuemethod_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_fiissuemethod(std::string* fiissuemethod) {
  if (fiissuemethod != nullptr) {
    
  } else {
    
  }
  fiissuemethod_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fiissuemethod);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FIIssueMethod)
}

// bool FICrossMarket = 102;
inline void MDBasicInfo::clear_ficrossmarket() {
  ficrossmarket_ = false;
}
inline bool MDBasicInfo::ficrossmarket() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FICrossMarket)
  return ficrossmarket_;
}
inline void MDBasicInfo::set_ficrossmarket(bool value) {
  
  ficrossmarket_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FICrossMarket)
}

// bool FIShortSellFlag = 103;
inline void MDBasicInfo::clear_fishortsellflag() {
  fishortsellflag_ = false;
}
inline bool MDBasicInfo::fishortsellflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIShortSellFlag)
  return fishortsellflag_;
}
inline void MDBasicInfo::set_fishortsellflag(bool value) {
  
  fishortsellflag_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIShortSellFlag)
}

// double FITotalShortSellQuota = 104;
inline void MDBasicInfo::clear_fitotalshortsellquota() {
  fitotalshortsellquota_ = 0;
}
inline double MDBasicInfo::fitotalshortsellquota() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FITotalShortSellQuota)
  return fitotalshortsellquota_;
}
inline void MDBasicInfo::set_fitotalshortsellquota(double value) {
  
  fitotalshortsellquota_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FITotalShortSellQuota)
}

// double FIDealerShortSellQuota = 105;
inline void MDBasicInfo::clear_fidealershortsellquota() {
  fidealershortsellquota_ = 0;
}
inline double MDBasicInfo::fidealershortsellquota() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIDealerShortSellQuota)
  return fidealershortsellquota_;
}
inline void MDBasicInfo::set_fidealershortsellquota(double value) {
  
  fidealershortsellquota_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIDealerShortSellQuota)
}

// double FIPreClosePx = 106;
inline void MDBasicInfo::clear_fipreclosepx() {
  fipreclosepx_ = 0;
}
inline double MDBasicInfo::fipreclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIPreClosePx)
  return fipreclosepx_;
}
inline void MDBasicInfo::set_fipreclosepx(double value) {
  
  fipreclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIPreClosePx)
}

// double FIPreWeightedPx = 107;
inline void MDBasicInfo::clear_fipreweightedpx() {
  fipreweightedpx_ = 0;
}
inline double MDBasicInfo::fipreweightedpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FIPreWeightedPx)
  return fipreweightedpx_;
}
inline void MDBasicInfo::set_fipreweightedpx(double value) {
  
  fipreweightedpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FIPreWeightedPx)
}

// string OptionListType = 110;
inline void MDBasicInfo::clear_optionlisttype() {
  optionlisttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionlisttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
  return optionlisttype_.GetNoArena();
}
inline void MDBasicInfo::set_optionlisttype(const std::string& value) {
  
  optionlisttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
}
inline void MDBasicInfo::set_optionlisttype(std::string&& value) {
  
  optionlisttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
}
inline void MDBasicInfo::set_optionlisttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionlisttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
}
inline void MDBasicInfo::set_optionlisttype(const char* value, size_t size) {
  
  optionlisttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
}
inline std::string* MDBasicInfo::mutable_optionlisttype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
  return optionlisttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionlisttype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
  
  return optionlisttype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionlisttype(std::string* optionlisttype) {
  if (optionlisttype != nullptr) {
    
  } else {
    
  }
  optionlisttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionlisttype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionListType)
}

// string OptionDeliveryType = 111;
inline void MDBasicInfo::clear_optiondeliverytype() {
  optiondeliverytype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optiondeliverytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
  return optiondeliverytype_.GetNoArena();
}
inline void MDBasicInfo::set_optiondeliverytype(const std::string& value) {
  
  optiondeliverytype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
}
inline void MDBasicInfo::set_optiondeliverytype(std::string&& value) {
  
  optiondeliverytype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
}
inline void MDBasicInfo::set_optiondeliverytype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optiondeliverytype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
}
inline void MDBasicInfo::set_optiondeliverytype(const char* value, size_t size) {
  
  optiondeliverytype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
}
inline std::string* MDBasicInfo::mutable_optiondeliverytype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
  return optiondeliverytype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optiondeliverytype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
  
  return optiondeliverytype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optiondeliverytype(std::string* optiondeliverytype) {
  if (optiondeliverytype != nullptr) {
    
  } else {
    
  }
  optiondeliverytype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optiondeliverytype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionDeliveryType)
}

// int32 OptionAdjustTimes = 112;
inline void MDBasicInfo::clear_optionadjusttimes() {
  optionadjusttimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::optionadjusttimes() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionAdjustTimes)
  return optionadjusttimes_;
}
inline void MDBasicInfo::set_optionadjusttimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  optionadjusttimes_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionAdjustTimes)
}

// int64 OptionContractPosition = 113;
inline void MDBasicInfo::clear_optioncontractposition() {
  optioncontractposition_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optioncontractposition() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractPosition)
  return optioncontractposition_;
}
inline void MDBasicInfo::set_optioncontractposition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optioncontractposition_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionContractPosition)
}

// int64 OptionBuyQtyUpperLimit = 114;
inline void MDBasicInfo::clear_optionbuyqtyupperlimit() {
  optionbuyqtyupperlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionbuyqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionBuyQtyUpperLimit)
  return optionbuyqtyupperlimit_;
}
inline void MDBasicInfo::set_optionbuyqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionbuyqtyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionBuyQtyUpperLimit)
}

// int64 OptionSellQtyUpperLimit = 115;
inline void MDBasicInfo::clear_optionsellqtyupperlimit() {
  optionsellqtyupperlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionsellqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellQtyUpperLimit)
  return optionsellqtyupperlimit_;
}
inline void MDBasicInfo::set_optionsellqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionsellqtyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellQtyUpperLimit)
}

// int64 OptionMarketOrderBuyQtyUpperLimit = 116;
inline void MDBasicInfo::clear_optionmarketorderbuyqtyupperlimit() {
  optionmarketorderbuyqtyupperlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionmarketorderbuyqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketOrderBuyQtyUpperLimit)
  return optionmarketorderbuyqtyupperlimit_;
}
inline void MDBasicInfo::set_optionmarketorderbuyqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionmarketorderbuyqtyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketOrderBuyQtyUpperLimit)
}

// int64 OptionMarketOrderSellQtyUpperLimit = 117;
inline void MDBasicInfo::clear_optionmarketordersellqtyupperlimit() {
  optionmarketordersellqtyupperlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionmarketordersellqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketOrderSellQtyUpperLimit)
  return optionmarketordersellqtyupperlimit_;
}
inline void MDBasicInfo::set_optionmarketordersellqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionmarketordersellqtyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketOrderSellQtyUpperLimit)
}

// int64 OptionQuoteOrderBuyQtyUpperLimit = 118;
inline void MDBasicInfo::clear_optionquoteorderbuyqtyupperlimit() {
  optionquoteorderbuyqtyupperlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionquoteorderbuyqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionQuoteOrderBuyQtyUpperLimit)
  return optionquoteorderbuyqtyupperlimit_;
}
inline void MDBasicInfo::set_optionquoteorderbuyqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionquoteorderbuyqtyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionQuoteOrderBuyQtyUpperLimit)
}

// int64 OptionQuoteOrderSellQtyUpperLimit = 119;
inline void MDBasicInfo::clear_optionquoteordersellqtyupperlimit() {
  optionquoteordersellqtyupperlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionquoteordersellqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionQuoteOrderSellQtyUpperLimit)
  return optionquoteordersellqtyupperlimit_;
}
inline void MDBasicInfo::set_optionquoteordersellqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionquoteordersellqtyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionQuoteOrderSellQtyUpperLimit)
}

// int64 OptionBuyQtyUnit = 120;
inline void MDBasicInfo::clear_optionbuyqtyunit() {
  optionbuyqtyunit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionbuyqtyunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionBuyQtyUnit)
  return optionbuyqtyunit_;
}
inline void MDBasicInfo::set_optionbuyqtyunit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionbuyqtyunit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionBuyQtyUnit)
}

// int64 OptionSellQtyUnit = 121;
inline void MDBasicInfo::clear_optionsellqtyunit() {
  optionsellqtyunit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::optionsellqtyunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellQtyUnit)
  return optionsellqtyunit_;
}
inline void MDBasicInfo::set_optionsellqtyunit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  optionsellqtyunit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellQtyUnit)
}

// double OptionLastSellMargin = 122;
inline void MDBasicInfo::clear_optionlastsellmargin() {
  optionlastsellmargin_ = 0;
}
inline double MDBasicInfo::optionlastsellmargin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionLastSellMargin)
  return optionlastsellmargin_;
}
inline void MDBasicInfo::set_optionlastsellmargin(double value) {
  
  optionlastsellmargin_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionLastSellMargin)
}

// double OptionSellMargin = 123;
inline void MDBasicInfo::clear_optionsellmargin() {
  optionsellmargin_ = 0;
}
inline double MDBasicInfo::optionsellmargin() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellMargin)
  return optionsellmargin_;
}
inline void MDBasicInfo::set_optionsellmargin(double value) {
  
  optionsellmargin_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionSellMargin)
}

// string OptionMarketMakerFlag = 124;
inline void MDBasicInfo::clear_optionmarketmakerflag() {
  optionmarketmakerflag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optionmarketmakerflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
  return optionmarketmakerflag_.GetNoArena();
}
inline void MDBasicInfo::set_optionmarketmakerflag(const std::string& value) {
  
  optionmarketmakerflag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
}
inline void MDBasicInfo::set_optionmarketmakerflag(std::string&& value) {
  
  optionmarketmakerflag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
}
inline void MDBasicInfo::set_optionmarketmakerflag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optionmarketmakerflag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
}
inline void MDBasicInfo::set_optionmarketmakerflag(const char* value, size_t size) {
  
  optionmarketmakerflag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
}
inline std::string* MDBasicInfo::mutable_optionmarketmakerflag() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
  return optionmarketmakerflag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optionmarketmakerflag() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
  
  return optionmarketmakerflag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optionmarketmakerflag(std::string* optionmarketmakerflag) {
  if (optionmarketmakerflag != nullptr) {
    
  } else {
    
  }
  optionmarketmakerflag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optionmarketmakerflag);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionMarketMakerFlag)
}

// string OptionCombinationStrategy = 125;
inline void MDBasicInfo::clear_optioncombinationstrategy() {
  optioncombinationstrategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::optioncombinationstrategy() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
  return optioncombinationstrategy_.GetNoArena();
}
inline void MDBasicInfo::set_optioncombinationstrategy(const std::string& value) {
  
  optioncombinationstrategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
}
inline void MDBasicInfo::set_optioncombinationstrategy(std::string&& value) {
  
  optioncombinationstrategy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
}
inline void MDBasicInfo::set_optioncombinationstrategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optioncombinationstrategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
}
inline void MDBasicInfo::set_optioncombinationstrategy(const char* value, size_t size) {
  
  optioncombinationstrategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
}
inline std::string* MDBasicInfo::mutable_optioncombinationstrategy() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
  return optioncombinationstrategy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_optioncombinationstrategy() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
  
  return optioncombinationstrategy_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_optioncombinationstrategy(std::string* optioncombinationstrategy) {
  if (optioncombinationstrategy != nullptr) {
    
  } else {
    
  }
  optioncombinationstrategy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optioncombinationstrategy);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.OptionCombinationStrategy)
}

// string DeliveryYear = 126;
inline void MDBasicInfo::clear_deliveryyear() {
  deliveryyear_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::deliveryyear() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
  return deliveryyear_.GetNoArena();
}
inline void MDBasicInfo::set_deliveryyear(const std::string& value) {
  
  deliveryyear_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
}
inline void MDBasicInfo::set_deliveryyear(std::string&& value) {
  
  deliveryyear_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
}
inline void MDBasicInfo::set_deliveryyear(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deliveryyear_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
}
inline void MDBasicInfo::set_deliveryyear(const char* value, size_t size) {
  
  deliveryyear_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
}
inline std::string* MDBasicInfo::mutable_deliveryyear() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
  return deliveryyear_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_deliveryyear() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
  
  return deliveryyear_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_deliveryyear(std::string* deliveryyear) {
  if (deliveryyear != nullptr) {
    
  } else {
    
  }
  deliveryyear_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deliveryyear);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryYear)
}

// string DeliveryMonth = 127;
inline void MDBasicInfo::clear_deliverymonth() {
  deliverymonth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::deliverymonth() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
  return deliverymonth_.GetNoArena();
}
inline void MDBasicInfo::set_deliverymonth(const std::string& value) {
  
  deliverymonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
}
inline void MDBasicInfo::set_deliverymonth(std::string&& value) {
  
  deliverymonth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
}
inline void MDBasicInfo::set_deliverymonth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deliverymonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
}
inline void MDBasicInfo::set_deliverymonth(const char* value, size_t size) {
  
  deliverymonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
}
inline std::string* MDBasicInfo::mutable_deliverymonth() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
  return deliverymonth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_deliverymonth() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
  
  return deliverymonth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_deliverymonth(std::string* deliverymonth) {
  if (deliverymonth != nullptr) {
    
  } else {
    
  }
  deliverymonth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deliverymonth);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.DeliveryMonth)
}

// string InstrumentID = 128;
inline void MDBasicInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
  return instrumentid_.GetNoArena();
}
inline void MDBasicInfo::set_instrumentid(const std::string& value) {
  
  instrumentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
}
inline void MDBasicInfo::set_instrumentid(std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
}
inline void MDBasicInfo::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
}
inline void MDBasicInfo::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
}
inline std::string* MDBasicInfo::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
  return instrumentid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_instrumentid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
  
  return instrumentid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_instrumentid(std::string* instrumentid) {
  if (instrumentid != nullptr) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentID)
}

// string InstrumentName = 129;
inline void MDBasicInfo::clear_instrumentname() {
  instrumentname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::instrumentname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
  return instrumentname_.GetNoArena();
}
inline void MDBasicInfo::set_instrumentname(const std::string& value) {
  
  instrumentname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
}
inline void MDBasicInfo::set_instrumentname(std::string&& value) {
  
  instrumentname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
}
inline void MDBasicInfo::set_instrumentname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
}
inline void MDBasicInfo::set_instrumentname(const char* value, size_t size) {
  
  instrumentname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
}
inline std::string* MDBasicInfo::mutable_instrumentname() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
  return instrumentname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_instrumentname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
  
  return instrumentname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_instrumentname(std::string* instrumentname) {
  if (instrumentname != nullptr) {
    
  } else {
    
  }
  instrumentname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentname);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.InstrumentName)
}

// string ExchangeInstID = 130;
inline void MDBasicInfo::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
  return exchangeinstid_.GetNoArena();
}
inline void MDBasicInfo::set_exchangeinstid(const std::string& value) {
  
  exchangeinstid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
}
inline void MDBasicInfo::set_exchangeinstid(std::string&& value) {
  
  exchangeinstid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
}
inline void MDBasicInfo::set_exchangeinstid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangeinstid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
}
inline void MDBasicInfo::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
}
inline std::string* MDBasicInfo::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_exchangeinstid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
  
  return exchangeinstid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_exchangeinstid(std::string* exchangeinstid) {
  if (exchangeinstid != nullptr) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ExchangeInstID)
}

// string ProductID = 131;
inline void MDBasicInfo::clear_productid() {
  productid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::productid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
  return productid_.GetNoArena();
}
inline void MDBasicInfo::set_productid(const std::string& value) {
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
}
inline void MDBasicInfo::set_productid(std::string&& value) {
  
  productid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
}
inline void MDBasicInfo::set_productid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
}
inline void MDBasicInfo::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
}
inline std::string* MDBasicInfo::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
  return productid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_productid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
  
  return productid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_productid(std::string* productid) {
  if (productid != nullptr) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ProductID)
}

// int64 MaxMarketOrderVolume = 132;
inline void MDBasicInfo::clear_maxmarketordervolume() {
  maxmarketordervolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::maxmarketordervolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarketOrderVolume)
  return maxmarketordervolume_;
}
inline void MDBasicInfo::set_maxmarketordervolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarketOrderVolume)
}

// int64 MinMarketOrderVolume = 133;
inline void MDBasicInfo::clear_minmarketordervolume() {
  minmarketordervolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::minmarketordervolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MinMarketOrderVolume)
  return minmarketordervolume_;
}
inline void MDBasicInfo::set_minmarketordervolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MinMarketOrderVolume)
}

// int64 MaxLimitOrderVolume = 134;
inline void MDBasicInfo::clear_maxlimitordervolume() {
  maxlimitordervolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::maxlimitordervolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MaxLimitOrderVolume)
  return maxlimitordervolume_;
}
inline void MDBasicInfo::set_maxlimitordervolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MaxLimitOrderVolume)
}

// int64 MinLimitOrderVolume = 135;
inline void MDBasicInfo::clear_minlimitordervolume() {
  minlimitordervolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::minlimitordervolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MinLimitOrderVolume)
  return minlimitordervolume_;
}
inline void MDBasicInfo::set_minlimitordervolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MinLimitOrderVolume)
}

// int64 VolumeMultiple = 136;
inline void MDBasicInfo::clear_volumemultiple() {
  volumemultiple_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::volumemultiple() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.VolumeMultiple)
  return volumemultiple_;
}
inline void MDBasicInfo::set_volumemultiple(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volumemultiple_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.VolumeMultiple)
}

// string CreateDate = 137;
inline void MDBasicInfo::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::createdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
  return createdate_.GetNoArena();
}
inline void MDBasicInfo::set_createdate(const std::string& value) {
  
  createdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
}
inline void MDBasicInfo::set_createdate(std::string&& value) {
  
  createdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
}
inline void MDBasicInfo::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
}
inline void MDBasicInfo::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
}
inline std::string* MDBasicInfo::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
  return createdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_createdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
  
  return createdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_createdate(std::string* createdate) {
  if (createdate != nullptr) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.CreateDate)
}

// string ExpireDate = 138;
inline void MDBasicInfo::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::expiredate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
  return expiredate_.GetNoArena();
}
inline void MDBasicInfo::set_expiredate(const std::string& value) {
  
  expiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
}
inline void MDBasicInfo::set_expiredate(std::string&& value) {
  
  expiredate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
}
inline void MDBasicInfo::set_expiredate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
}
inline void MDBasicInfo::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
}
inline std::string* MDBasicInfo::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
  return expiredate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_expiredate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
  
  return expiredate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_expiredate(std::string* expiredate) {
  if (expiredate != nullptr) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.ExpireDate)
}

// string StartDelivDate = 139;
inline void MDBasicInfo::clear_startdelivdate() {
  startdelivdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::startdelivdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
  return startdelivdate_.GetNoArena();
}
inline void MDBasicInfo::set_startdelivdate(const std::string& value) {
  
  startdelivdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
}
inline void MDBasicInfo::set_startdelivdate(std::string&& value) {
  
  startdelivdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
}
inline void MDBasicInfo::set_startdelivdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startdelivdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
}
inline void MDBasicInfo::set_startdelivdate(const char* value, size_t size) {
  
  startdelivdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
}
inline std::string* MDBasicInfo::mutable_startdelivdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
  return startdelivdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_startdelivdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
  
  return startdelivdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_startdelivdate(std::string* startdelivdate) {
  if (startdelivdate != nullptr) {
    
  } else {
    
  }
  startdelivdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startdelivdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.StartDelivDate)
}

// string EndDelivDate = 140;
inline void MDBasicInfo::clear_enddelivdate() {
  enddelivdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::enddelivdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
  return enddelivdate_.GetNoArena();
}
inline void MDBasicInfo::set_enddelivdate(const std::string& value) {
  
  enddelivdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
}
inline void MDBasicInfo::set_enddelivdate(std::string&& value) {
  
  enddelivdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
}
inline void MDBasicInfo::set_enddelivdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enddelivdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
}
inline void MDBasicInfo::set_enddelivdate(const char* value, size_t size) {
  
  enddelivdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
}
inline std::string* MDBasicInfo::mutable_enddelivdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
  return enddelivdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_enddelivdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
  
  return enddelivdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_enddelivdate(std::string* enddelivdate) {
  if (enddelivdate != nullptr) {
    
  } else {
    
  }
  enddelivdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enddelivdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.EndDelivDate)
}

// string PositionType = 141;
inline void MDBasicInfo::clear_positiontype() {
  positiontype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::positiontype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
  return positiontype_.GetNoArena();
}
inline void MDBasicInfo::set_positiontype(const std::string& value) {
  
  positiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
}
inline void MDBasicInfo::set_positiontype(std::string&& value) {
  
  positiontype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
}
inline void MDBasicInfo::set_positiontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  positiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
}
inline void MDBasicInfo::set_positiontype(const char* value, size_t size) {
  
  positiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
}
inline std::string* MDBasicInfo::mutable_positiontype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
  return positiontype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_positiontype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
  
  return positiontype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_positiontype(std::string* positiontype) {
  if (positiontype != nullptr) {
    
  } else {
    
  }
  positiontype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), positiontype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.PositionType)
}

// double LongMarginRatio = 142;
inline void MDBasicInfo::clear_longmarginratio() {
  longmarginratio_ = 0;
}
inline double MDBasicInfo::longmarginratio() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.LongMarginRatio)
  return longmarginratio_;
}
inline void MDBasicInfo::set_longmarginratio(double value) {
  
  longmarginratio_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.LongMarginRatio)
}

// double ShortMarginRatio = 143;
inline void MDBasicInfo::clear_shortmarginratio() {
  shortmarginratio_ = 0;
}
inline double MDBasicInfo::shortmarginratio() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.ShortMarginRatio)
  return shortmarginratio_;
}
inline void MDBasicInfo::set_shortmarginratio(double value) {
  
  shortmarginratio_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.ShortMarginRatio)
}

// string MaxMarginSideAlgorithm = 144;
inline void MDBasicInfo::clear_maxmarginsidealgorithm() {
  maxmarginsidealgorithm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::maxmarginsidealgorithm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
  return maxmarginsidealgorithm_.GetNoArena();
}
inline void MDBasicInfo::set_maxmarginsidealgorithm(const std::string& value) {
  
  maxmarginsidealgorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
}
inline void MDBasicInfo::set_maxmarginsidealgorithm(std::string&& value) {
  
  maxmarginsidealgorithm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
}
inline void MDBasicInfo::set_maxmarginsidealgorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maxmarginsidealgorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
}
inline void MDBasicInfo::set_maxmarginsidealgorithm(const char* value, size_t size) {
  
  maxmarginsidealgorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
}
inline std::string* MDBasicInfo::mutable_maxmarginsidealgorithm() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
  return maxmarginsidealgorithm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_maxmarginsidealgorithm() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
  
  return maxmarginsidealgorithm_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_maxmarginsidealgorithm(std::string* maxmarginsidealgorithm) {
  if (maxmarginsidealgorithm != nullptr) {
    
  } else {
    
  }
  maxmarginsidealgorithm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxmarginsidealgorithm);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.MaxMarginSideAlgorithm)
}

// double StrikePrice = 145;
inline void MDBasicInfo::clear_strikeprice() {
  strikeprice_ = 0;
}
inline double MDBasicInfo::strikeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.StrikePrice)
  return strikeprice_;
}
inline void MDBasicInfo::set_strikeprice(double value) {
  
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.StrikePrice)
}

// double PreOpenInterest = 146;
inline void MDBasicInfo::clear_preopeninterest() {
  preopeninterest_ = 0;
}
inline double MDBasicInfo::preopeninterest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.PreOpenInterest)
  return preopeninterest_;
}
inline void MDBasicInfo::set_preopeninterest(double value) {
  
  preopeninterest_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.PreOpenInterest)
}

// string FormerSymbol = 147;
inline void MDBasicInfo::clear_formersymbol() {
  formersymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::formersymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
  return formersymbol_.GetNoArena();
}
inline void MDBasicInfo::set_formersymbol(const std::string& value) {
  
  formersymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
}
inline void MDBasicInfo::set_formersymbol(std::string&& value) {
  
  formersymbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
}
inline void MDBasicInfo::set_formersymbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formersymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
}
inline void MDBasicInfo::set_formersymbol(const char* value, size_t size) {
  
  formersymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
}
inline std::string* MDBasicInfo::mutable_formersymbol() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
  return formersymbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_formersymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
  
  return formersymbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_formersymbol(std::string* formersymbol) {
  if (formersymbol != nullptr) {
    
  } else {
    
  }
  formersymbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formersymbol);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.FormerSymbol)
}

// string DelistDate = 148;
inline void MDBasicInfo::clear_delistdate() {
  delistdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::delistdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
  return delistdate_.GetNoArena();
}
inline void MDBasicInfo::set_delistdate(const std::string& value) {
  
  delistdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
}
inline void MDBasicInfo::set_delistdate(std::string&& value) {
  
  delistdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
}
inline void MDBasicInfo::set_delistdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delistdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
}
inline void MDBasicInfo::set_delistdate(const char* value, size_t size) {
  
  delistdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
}
inline std::string* MDBasicInfo::mutable_delistdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
  return delistdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_delistdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
  
  return delistdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_delistdate(std::string* delistdate) {
  if (delistdate != nullptr) {
    
  } else {
    
  }
  delistdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delistdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.DelistDate)
}

// int64 BuyQtyUnit = 149;
inline void MDBasicInfo::clear_buyqtyunit() {
  buyqtyunit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::buyqtyunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyUnit)
  return buyqtyunit_;
}
inline void MDBasicInfo::set_buyqtyunit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buyqtyunit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyUnit)
}

// int64 SellQtyUnit = 150;
inline void MDBasicInfo::clear_sellqtyunit() {
  sellqtyunit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::sellqtyunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyUnit)
  return sellqtyunit_;
}
inline void MDBasicInfo::set_sellqtyunit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sellqtyunit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyUnit)
}

// int64 BuyQtyUpperLimit = 161;
inline void MDBasicInfo::clear_buyqtyupperlimit() {
  buyqtyupperlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::buyqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyUpperLimit)
  return buyqtyupperlimit_;
}
inline void MDBasicInfo::set_buyqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buyqtyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyUpperLimit)
}

// int64 SellQtyUpperLimit = 162;
inline void MDBasicInfo::clear_sellqtyupperlimit() {
  sellqtyupperlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::sellqtyupperlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyUpperLimit)
  return sellqtyupperlimit_;
}
inline void MDBasicInfo::set_sellqtyupperlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sellqtyupperlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyUpperLimit)
}

// int64 BuyQtyLowerLimit = 163;
inline void MDBasicInfo::clear_buyqtylowerlimit() {
  buyqtylowerlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::buyqtylowerlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyLowerLimit)
  return buyqtylowerlimit_;
}
inline void MDBasicInfo::set_buyqtylowerlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buyqtylowerlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.BuyQtyLowerLimit)
}

// int64 SellQtyLowerLimit = 164;
inline void MDBasicInfo::clear_sellqtylowerlimit() {
  sellqtylowerlimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDBasicInfo::sellqtylowerlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyLowerLimit)
  return sellqtylowerlimit_;
}
inline void MDBasicInfo::set_sellqtylowerlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sellqtylowerlimit_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.SellQtyLowerLimit)
}

// int32 VCMFlag = 165;
inline void MDBasicInfo::clear_vcmflag() {
  vcmflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::vcmflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.VCMFlag)
  return vcmflag_;
}
inline void MDBasicInfo::set_vcmflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vcmflag_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.VCMFlag)
}

// int32 CASFlag = 166;
inline void MDBasicInfo::clear_casflag() {
  casflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::casflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.CASFlag)
  return casflag_;
}
inline void MDBasicInfo::set_casflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  casflag_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.CASFlag)
}

// int32 POSFlag = 167;
inline void MDBasicInfo::clear_posflag() {
  posflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::posflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.POSFlag)
  return posflag_;
}
inline void MDBasicInfo::set_posflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  posflag_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.POSFlag)
}

// double POSUpperLimitPx = 168;
inline void MDBasicInfo::clear_posupperlimitpx() {
  posupperlimitpx_ = 0;
}
inline double MDBasicInfo::posupperlimitpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.POSUpperLimitPx)
  return posupperlimitpx_;
}
inline void MDBasicInfo::set_posupperlimitpx(double value) {
  
  posupperlimitpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.POSUpperLimitPx)
}

// double POSLowerLimitPx = 169;
inline void MDBasicInfo::clear_poslowerlimitpx() {
  poslowerlimitpx_ = 0;
}
inline double MDBasicInfo::poslowerlimitpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.POSLowerLimitPx)
  return poslowerlimitpx_;
}
inline void MDBasicInfo::set_poslowerlimitpx(double value) {
  
  poslowerlimitpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.POSLowerLimitPx)
}

// string BaseContractID = 170;
inline void MDBasicInfo::clear_basecontractid() {
  basecontractid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::basecontractid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
  return basecontractid_.GetNoArena();
}
inline void MDBasicInfo::set_basecontractid(const std::string& value) {
  
  basecontractid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
}
inline void MDBasicInfo::set_basecontractid(std::string&& value) {
  
  basecontractid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
}
inline void MDBasicInfo::set_basecontractid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basecontractid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
}
inline void MDBasicInfo::set_basecontractid(const char* value, size_t size) {
  
  basecontractid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
}
inline std::string* MDBasicInfo::mutable_basecontractid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
  return basecontractid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_basecontractid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
  
  return basecontractid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_basecontractid(std::string* basecontractid) {
  if (basecontractid != nullptr) {
    
  } else {
    
  }
  basecontractid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), basecontractid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.BaseContractID)
}

// repeated .com.htsc.mdc.insight.model.MDBasicInfo.ConstantParam constantParams = 171;
inline int MDBasicInfo::constantparams_size() const {
  return constantparams_.size();
}
inline void MDBasicInfo::clear_constantparams() {
  constantparams_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* MDBasicInfo::mutable_constantparams(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return constantparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >*
MDBasicInfo::mutable_constantparams() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return &constantparams_;
}
inline const ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam& MDBasicInfo::constantparams(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return constantparams_.Get(index);
}
inline ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam* MDBasicInfo::add_constantparams() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return constantparams_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDBasicInfo_ConstantParam >&
MDBasicInfo::constantparams() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDBasicInfo.constantParams)
  return constantparams_;
}

// int32 DataMultiplePowerOf10 = 172;
inline void MDBasicInfo::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDBasicInfo::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void MDBasicInfo::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.DataMultiplePowerOf10)
}

// string InterestAccrualDate = 173;
inline void MDBasicInfo::clear_interestaccrualdate() {
  interestaccrualdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDBasicInfo::interestaccrualdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
  return interestaccrualdate_.GetNoArena();
}
inline void MDBasicInfo::set_interestaccrualdate(const std::string& value) {
  
  interestaccrualdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
}
inline void MDBasicInfo::set_interestaccrualdate(std::string&& value) {
  
  interestaccrualdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
}
inline void MDBasicInfo::set_interestaccrualdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interestaccrualdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
}
inline void MDBasicInfo::set_interestaccrualdate(const char* value, size_t size) {
  
  interestaccrualdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
}
inline std::string* MDBasicInfo::mutable_interestaccrualdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
  return interestaccrualdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDBasicInfo::release_interestaccrualdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
  
  return interestaccrualdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDBasicInfo::set_allocated_interestaccrualdate(std::string* interestaccrualdate) {
  if (interestaccrualdate != nullptr) {
    
  } else {
    
  }
  interestaccrualdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interestaccrualdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDBasicInfo.InterestAccrualDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDBasicInfo_2eproto
