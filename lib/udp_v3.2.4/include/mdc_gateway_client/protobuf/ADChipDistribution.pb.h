// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADChipDistribution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADChipDistribution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADChipDistribution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADChipDistribution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADChipDistribution_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADChipDistribution_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADChipDistribution;
class ADChipDistributionDefaultTypeInternal;
extern ADChipDistributionDefaultTypeInternal _ADChipDistribution_default_instance_;
class ADChipDistributionDetail;
class ADChipDistributionDetailDefaultTypeInternal;
extern ADChipDistributionDetailDefaultTypeInternal _ADChipDistributionDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADChipDistribution* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADChipDistribution>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADChipDistributionDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADChipDistributionDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADChipDistribution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADChipDistribution) */ {
 public:
  ADChipDistribution();
  virtual ~ADChipDistribution();

  ADChipDistribution(const ADChipDistribution& from);
  ADChipDistribution(ADChipDistribution&& from) noexcept
    : ADChipDistribution() {
    *this = ::std::move(from);
  }

  inline ADChipDistribution& operator=(const ADChipDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADChipDistribution& operator=(ADChipDistribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ADChipDistribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADChipDistribution* internal_default_instance() {
    return reinterpret_cast<const ADChipDistribution*>(
               &_ADChipDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ADChipDistribution* other);
  friend void swap(ADChipDistribution& a, ADChipDistribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ADChipDistribution* New() const final {
    return CreateMaybeMessage<ADChipDistribution>(nullptr);
  }

  ADChipDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADChipDistribution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADChipDistribution& from);
  void MergeFrom(const ADChipDistribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADChipDistribution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADChipDistribution";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ADChipDistribution_2eproto);
    return ::descriptor_table_ADChipDistribution_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  int tradabledetails_size() const;
  void clear_tradabledetails();
  static const int kTradableDetailsFieldNumber = 20;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* mutable_tradabledetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
      mutable_tradabledetails();
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& tradabledetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* add_tradabledetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
      tradabledetails() const;

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  int restricteddetails_size() const;
  void clear_restricteddetails();
  static const int kRestrictedDetailsFieldNumber = 40;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* mutable_restricteddetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
      mutable_restricteddetails();
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& restricteddetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* add_restricteddetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
      restricteddetails() const;

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  int restrictedholddetails_size() const;
  void clear_restrictedholddetails();
  static const int kRestrictedHoldDetailsFieldNumber = 48;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* mutable_restrictedholddetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
      mutable_restrictedholddetails();
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& restrictedholddetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* add_restrictedholddetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
      restrictedholddetails() const;

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  int largeshareholdersdetails_size() const;
  void clear_largeshareholdersdetails();
  static const int kLargeShareholdersDetailsFieldNumber = 50;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* mutable_largeshareholdersdetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
      mutable_largeshareholdersdetails();
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& largeshareholdersdetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* add_largeshareholdersdetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
      largeshareholdersdetails() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 5;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int32 ExchangeDate = 7;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate() const;
  void set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ExchangeTime = 8;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime() const;
  void set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 LastPx = 11;
  void clear_lastpx();
  static const int kLastPxFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx() const;
  void set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreClosePx = 12;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx() const;
  void set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ShareTotalNumber = 13;
  void clear_sharetotalnumber();
  static const int kShareTotalNumberFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 sharetotalnumber() const;
  void set_sharetotalnumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalShare = 15;
  void clear_totalshare();
  static const int kTotalShareFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 totalshare() const;
  void set_totalshare(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ATotalShare = 16;
  void clear_atotalshare();
  static const int kATotalShareFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int64 atotalshare() const;
  void set_atotalshare(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AListedTotalShare = 17;
  void clear_alistedtotalshare();
  static const int kAListedTotalShareFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int64 alistedtotalshare() const;
  void set_alistedtotalshare(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableMCST = 21;
  void clear_tradablemcst();
  static const int kTradableMCSTFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablemcst() const;
  void set_tradablemcst(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableMaxCostOfPositions = 22;
  void clear_tradablemaxcostofpositions();
  static const int kTradableMaxCostOfPositionsFieldNumber = 22;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablemaxcostofpositions() const;
  void set_tradablemaxcostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableMinCostOfPositions = 23;
  void clear_tradablemincostofpositions();
  static const int kTradableMinCostOfPositionsFieldNumber = 23;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablemincostofpositions() const;
  void set_tradablemincostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableProfitPercent = 24;
  void clear_tradableprofitpercent();
  static const int kTradableProfitPercentFieldNumber = 24;
  ::PROTOBUF_NAMESPACE_ID::int64 tradableprofitpercent() const;
  void set_tradableprofitpercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableChipDispersionPercent = 25;
  void clear_tradablechipdispersionpercent();
  static const int kTradableChipDispersionPercentFieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablechipdispersionpercent() const;
  void set_tradablechipdispersionpercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradablePreProfitPercent = 26;
  void clear_tradablepreprofitpercent();
  static const int kTradablePreProfitPercentFieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablepreprofitpercent() const;
  void set_tradablepreprofitpercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableProfitChangePercent = 27;
  void clear_tradableprofitchangepercent();
  static const int kTradableProfitChangePercentFieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::int64 tradableprofitchangepercent() const;
  void set_tradableprofitchangepercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableCentralizedPercent = 28;
  void clear_tradablecentralizedpercent();
  static const int kTradableCentralizedPercentFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablecentralizedpercent() const;
  void set_tradablecentralizedpercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableCentralizedMaxCostOfPositions = 29;
  void clear_tradablecentralizedmaxcostofpositions();
  static const int kTradableCentralizedMaxCostOfPositionsFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablecentralizedmaxcostofpositions() const;
  void set_tradablecentralizedmaxcostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableCentralizedMinCostOfPositions = 30;
  void clear_tradablecentralizedmincostofpositions();
  static const int kTradableCentralizedMinCostOfPositionsFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablecentralizedmincostofpositions() const;
  void set_tradablecentralizedmincostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableShareTotalNumber = 31;
  void clear_tradablesharetotalnumber();
  static const int kTradableShareTotalNumberFieldNumber = 31;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablesharetotalnumber() const;
  void set_tradablesharetotalnumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradableSharePercent = 32;
  void clear_tradablesharepercent();
  static const int kTradableSharePercentFieldNumber = 32;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablesharepercent() const;
  void set_tradablesharepercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool IsFinalSettlement = 14;
  void clear_isfinalsettlement();
  static const int kIsFinalSettlementFieldNumber = 14;
  bool isfinalsettlement() const;
  void set_isfinalsettlement(bool value);

  // int32 DataMultiplePowerOf10 = 56;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 56;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 RestrictedMCST = 41;
  void clear_restrictedmcst();
  static const int kRestrictedMCSTFieldNumber = 41;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedmcst() const;
  void set_restrictedmcst(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 RestrictedMaxCostOfPositions = 42;
  void clear_restrictedmaxcostofpositions();
  static const int kRestrictedMaxCostOfPositionsFieldNumber = 42;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedmaxcostofpositions() const;
  void set_restrictedmaxcostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 RestrictedMinCostOfPositions = 43;
  void clear_restrictedmincostofpositions();
  static const int kRestrictedMinCostOfPositionsFieldNumber = 43;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedmincostofpositions() const;
  void set_restrictedmincostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 RestrictedShareTotalNumber = 46;
  void clear_restrictedsharetotalnumber();
  static const int kRestrictedShareTotalNumberFieldNumber = 46;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedsharetotalnumber() const;
  void set_restrictedsharetotalnumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 RestrictedSharePercent = 47;
  void clear_restrictedsharepercent();
  static const int kRestrictedSharePercentFieldNumber = 47;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedsharepercent() const;
  void set_restrictedsharepercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LargeShareholdersMCST = 51;
  void clear_largeshareholdersmcst();
  static const int kLargeShareholdersMCSTFieldNumber = 51;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholdersmcst() const;
  void set_largeshareholdersmcst(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LargeShareholdersMaxCostOfPositions = 52;
  void clear_largeshareholdersmaxcostofpositions();
  static const int kLargeShareholdersMaxCostOfPositionsFieldNumber = 52;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholdersmaxcostofpositions() const;
  void set_largeshareholdersmaxcostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LargeShareholdersMinCostOfPositions = 53;
  void clear_largeshareholdersmincostofpositions();
  static const int kLargeShareholdersMinCostOfPositionsFieldNumber = 53;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholdersmincostofpositions() const;
  void set_largeshareholdersmincostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LargeShareholdersShareTotalNumber = 54;
  void clear_largeshareholderssharetotalnumber();
  static const int kLargeShareholdersShareTotalNumberFieldNumber = 54;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholderssharetotalnumber() const;
  void set_largeshareholderssharetotalnumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LargeShareholdersSharePercent = 55;
  void clear_largeshareholderssharepercent();
  static const int kLargeShareholdersSharePercentFieldNumber = 55;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholderssharepercent() const;
  void set_largeshareholderssharepercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADChipDistribution)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail > tradabledetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail > restricteddetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail > restrictedholddetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail > largeshareholdersdetails_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 sharetotalnumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalshare_;
  ::PROTOBUF_NAMESPACE_ID::int64 atotalshare_;
  ::PROTOBUF_NAMESPACE_ID::int64 alistedtotalshare_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablemcst_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablemaxcostofpositions_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablemincostofpositions_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradableprofitpercent_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablechipdispersionpercent_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablepreprofitpercent_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradableprofitchangepercent_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablecentralizedpercent_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablecentralizedmaxcostofpositions_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablecentralizedmincostofpositions_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablesharetotalnumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradablesharepercent_;
  bool isfinalsettlement_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedmcst_;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedmaxcostofpositions_;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedmincostofpositions_;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedsharetotalnumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 restrictedsharepercent_;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholdersmcst_;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholdersmaxcostofpositions_;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholdersmincostofpositions_;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholderssharetotalnumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 largeshareholderssharepercent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ADChipDistribution_2eproto;
};
// -------------------------------------------------------------------

class ADChipDistributionDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADChipDistributionDetail) */ {
 public:
  ADChipDistributionDetail();
  virtual ~ADChipDistributionDetail();

  ADChipDistributionDetail(const ADChipDistributionDetail& from);
  ADChipDistributionDetail(ADChipDistributionDetail&& from) noexcept
    : ADChipDistributionDetail() {
    *this = ::std::move(from);
  }

  inline ADChipDistributionDetail& operator=(const ADChipDistributionDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADChipDistributionDetail& operator=(ADChipDistributionDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ADChipDistributionDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADChipDistributionDetail* internal_default_instance() {
    return reinterpret_cast<const ADChipDistributionDetail*>(
               &_ADChipDistributionDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ADChipDistributionDetail* other);
  friend void swap(ADChipDistributionDetail& a, ADChipDistributionDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ADChipDistributionDetail* New() const final {
    return CreateMaybeMessage<ADChipDistributionDetail>(nullptr);
  }

  ADChipDistributionDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADChipDistributionDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADChipDistributionDetail& from);
  void MergeFrom(const ADChipDistributionDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADChipDistributionDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADChipDistributionDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ADChipDistribution_2eproto);
    return ::descriptor_table_ADChipDistribution_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ShareHolderName = 5;
  void clear_shareholdername();
  static const int kShareHolderNameFieldNumber = 5;
  const std::string& shareholdername() const;
  void set_shareholdername(const std::string& value);
  void set_shareholdername(std::string&& value);
  void set_shareholdername(const char* value);
  void set_shareholdername(const char* value, size_t size);
  std::string* mutable_shareholdername();
  std::string* release_shareholdername();
  void set_allocated_shareholdername(std::string* shareholdername);

  // int64 Price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 NumberOfShares = 2;
  void clear_numberofshares();
  static const int kNumberOfSharesFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 numberofshares() const;
  void set_numberofshares(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 NumberOfSharesPercent = 3;
  void clear_numberofsharespercent();
  static const int kNumberOfSharesPercentFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 numberofsharespercent() const;
  void set_numberofsharespercent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ListedDate = 4;
  void clear_listeddate();
  static const int kListedDateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 listeddate() const;
  void set_listeddate(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADChipDistributionDetail)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shareholdername_;
  ::PROTOBUF_NAMESPACE_ID::int64 price_;
  ::PROTOBUF_NAMESPACE_ID::int64 numberofshares_;
  ::PROTOBUF_NAMESPACE_ID::int64 numberofsharespercent_;
  ::PROTOBUF_NAMESPACE_ID::int64 listeddate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ADChipDistribution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADChipDistribution

// string HTSCSecurityID = 1;
inline void ADChipDistribution::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ADChipDistribution::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void ADChipDistribution::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}
inline void ADChipDistribution::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}
inline void ADChipDistribution::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}
inline void ADChipDistribution::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}
inline std::string* ADChipDistribution::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ADChipDistribution::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ADChipDistribution::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADChipDistribution::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADChipDistribution::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.MDDate)
  return mddate_;
}
inline void ADChipDistribution::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.MDDate)
}

// int32 MDTime = 3;
inline void ADChipDistribution::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADChipDistribution::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.MDTime)
  return mdtime_;
}
inline void ADChipDistribution::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADChipDistribution::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.DataTimestamp)
  return datatimestamp_;
}
inline void ADChipDistribution::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADChipDistribution::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADChipDistribution::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void ADChipDistribution::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADChipDistribution::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADChipDistribution::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void ADChipDistribution::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.securityType)
}

// int32 ExchangeDate = 7;
inline void ADChipDistribution::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADChipDistribution::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeDate)
  return exchangedate_;
}
inline void ADChipDistribution::set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeDate)
}

// int32 ExchangeTime = 8;
inline void ADChipDistribution::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADChipDistribution::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeTime)
  return exchangetime_;
}
inline void ADChipDistribution::set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeTime)
}

// int64 LastPx = 11;
inline void ADChipDistribution::clear_lastpx() {
  lastpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LastPx)
  return lastpx_;
}
inline void ADChipDistribution::set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LastPx)
}

// int64 PreClosePx = 12;
inline void ADChipDistribution::clear_preclosepx() {
  preclosepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.PreClosePx)
  return preclosepx_;
}
inline void ADChipDistribution::set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.PreClosePx)
}

// int64 ShareTotalNumber = 13;
inline void ADChipDistribution::clear_sharetotalnumber() {
  sharetotalnumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::sharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ShareTotalNumber)
  return sharetotalnumber_;
}
inline void ADChipDistribution::set_sharetotalnumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sharetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ShareTotalNumber)
}

// bool IsFinalSettlement = 14;
inline void ADChipDistribution::clear_isfinalsettlement() {
  isfinalsettlement_ = false;
}
inline bool ADChipDistribution::isfinalsettlement() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.IsFinalSettlement)
  return isfinalsettlement_;
}
inline void ADChipDistribution::set_isfinalsettlement(bool value) {
  
  isfinalsettlement_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.IsFinalSettlement)
}

// int64 TotalShare = 15;
inline void ADChipDistribution::clear_totalshare() {
  totalshare_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::totalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TotalShare)
  return totalshare_;
}
inline void ADChipDistribution::set_totalshare(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalshare_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TotalShare)
}

// int64 ATotalShare = 16;
inline void ADChipDistribution::clear_atotalshare() {
  atotalshare_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::atotalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ATotalShare)
  return atotalshare_;
}
inline void ADChipDistribution::set_atotalshare(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  atotalshare_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ATotalShare)
}

// int64 AListedTotalShare = 17;
inline void ADChipDistribution::clear_alistedtotalshare() {
  alistedtotalshare_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::alistedtotalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.AListedTotalShare)
  return alistedtotalshare_;
}
inline void ADChipDistribution::set_alistedtotalshare(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  alistedtotalshare_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.AListedTotalShare)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
inline int ADChipDistribution::tradabledetails_size() const {
  return tradabledetails_.size();
}
inline void ADChipDistribution::clear_tradabledetails() {
  tradabledetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_tradabledetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return tradabledetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_tradabledetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return &tradabledetails_;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::tradabledetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return tradabledetails_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_tradabledetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return tradabledetails_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::tradabledetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return tradabledetails_;
}

// int64 TradableMCST = 21;
inline void ADChipDistribution::clear_tradablemcst() {
  tradablemcst_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablemcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMCST)
  return tradablemcst_;
}
inline void ADChipDistribution::set_tradablemcst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablemcst_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMCST)
}

// int64 TradableMaxCostOfPositions = 22;
inline void ADChipDistribution::clear_tradablemaxcostofpositions() {
  tradablemaxcostofpositions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablemaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMaxCostOfPositions)
  return tradablemaxcostofpositions_;
}
inline void ADChipDistribution::set_tradablemaxcostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablemaxcostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMaxCostOfPositions)
}

// int64 TradableMinCostOfPositions = 23;
inline void ADChipDistribution::clear_tradablemincostofpositions() {
  tradablemincostofpositions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablemincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMinCostOfPositions)
  return tradablemincostofpositions_;
}
inline void ADChipDistribution::set_tradablemincostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablemincostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMinCostOfPositions)
}

// int64 TradableProfitPercent = 24;
inline void ADChipDistribution::clear_tradableprofitpercent() {
  tradableprofitpercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradableprofitpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitPercent)
  return tradableprofitpercent_;
}
inline void ADChipDistribution::set_tradableprofitpercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradableprofitpercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitPercent)
}

// int64 TradableChipDispersionPercent = 25;
inline void ADChipDistribution::clear_tradablechipdispersionpercent() {
  tradablechipdispersionpercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablechipdispersionpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableChipDispersionPercent)
  return tradablechipdispersionpercent_;
}
inline void ADChipDistribution::set_tradablechipdispersionpercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablechipdispersionpercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableChipDispersionPercent)
}

// int64 TradablePreProfitPercent = 26;
inline void ADChipDistribution::clear_tradablepreprofitpercent() {
  tradablepreprofitpercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablepreprofitpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradablePreProfitPercent)
  return tradablepreprofitpercent_;
}
inline void ADChipDistribution::set_tradablepreprofitpercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablepreprofitpercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradablePreProfitPercent)
}

// int64 TradableProfitChangePercent = 27;
inline void ADChipDistribution::clear_tradableprofitchangepercent() {
  tradableprofitchangepercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradableprofitchangepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitChangePercent)
  return tradableprofitchangepercent_;
}
inline void ADChipDistribution::set_tradableprofitchangepercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradableprofitchangepercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitChangePercent)
}

// int64 TradableCentralizedPercent = 28;
inline void ADChipDistribution::clear_tradablecentralizedpercent() {
  tradablecentralizedpercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablecentralizedpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedPercent)
  return tradablecentralizedpercent_;
}
inline void ADChipDistribution::set_tradablecentralizedpercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablecentralizedpercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedPercent)
}

// int64 TradableCentralizedMaxCostOfPositions = 29;
inline void ADChipDistribution::clear_tradablecentralizedmaxcostofpositions() {
  tradablecentralizedmaxcostofpositions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablecentralizedmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMaxCostOfPositions)
  return tradablecentralizedmaxcostofpositions_;
}
inline void ADChipDistribution::set_tradablecentralizedmaxcostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablecentralizedmaxcostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMaxCostOfPositions)
}

// int64 TradableCentralizedMinCostOfPositions = 30;
inline void ADChipDistribution::clear_tradablecentralizedmincostofpositions() {
  tradablecentralizedmincostofpositions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablecentralizedmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMinCostOfPositions)
  return tradablecentralizedmincostofpositions_;
}
inline void ADChipDistribution::set_tradablecentralizedmincostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablecentralizedmincostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMinCostOfPositions)
}

// int64 TradableShareTotalNumber = 31;
inline void ADChipDistribution::clear_tradablesharetotalnumber() {
  tradablesharetotalnumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablesharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableShareTotalNumber)
  return tradablesharetotalnumber_;
}
inline void ADChipDistribution::set_tradablesharetotalnumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablesharetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableShareTotalNumber)
}

// int64 TradableSharePercent = 32;
inline void ADChipDistribution::clear_tradablesharepercent() {
  tradablesharepercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::tradablesharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableSharePercent)
  return tradablesharepercent_;
}
inline void ADChipDistribution::set_tradablesharepercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradablesharepercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableSharePercent)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
inline int ADChipDistribution::restricteddetails_size() const {
  return restricteddetails_.size();
}
inline void ADChipDistribution::clear_restricteddetails() {
  restricteddetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_restricteddetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return restricteddetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_restricteddetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return &restricteddetails_;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::restricteddetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return restricteddetails_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_restricteddetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return restricteddetails_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::restricteddetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return restricteddetails_;
}

// int64 RestrictedMCST = 41;
inline void ADChipDistribution::clear_restrictedmcst() {
  restrictedmcst_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::restrictedmcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMCST)
  return restrictedmcst_;
}
inline void ADChipDistribution::set_restrictedmcst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  restrictedmcst_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMCST)
}

// int64 RestrictedMaxCostOfPositions = 42;
inline void ADChipDistribution::clear_restrictedmaxcostofpositions() {
  restrictedmaxcostofpositions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::restrictedmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMaxCostOfPositions)
  return restrictedmaxcostofpositions_;
}
inline void ADChipDistribution::set_restrictedmaxcostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  restrictedmaxcostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMaxCostOfPositions)
}

// int64 RestrictedMinCostOfPositions = 43;
inline void ADChipDistribution::clear_restrictedmincostofpositions() {
  restrictedmincostofpositions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::restrictedmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMinCostOfPositions)
  return restrictedmincostofpositions_;
}
inline void ADChipDistribution::set_restrictedmincostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  restrictedmincostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMinCostOfPositions)
}

// int64 RestrictedShareTotalNumber = 46;
inline void ADChipDistribution::clear_restrictedsharetotalnumber() {
  restrictedsharetotalnumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::restrictedsharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedShareTotalNumber)
  return restrictedsharetotalnumber_;
}
inline void ADChipDistribution::set_restrictedsharetotalnumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  restrictedsharetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedShareTotalNumber)
}

// int64 RestrictedSharePercent = 47;
inline void ADChipDistribution::clear_restrictedsharepercent() {
  restrictedsharepercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::restrictedsharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedSharePercent)
  return restrictedsharepercent_;
}
inline void ADChipDistribution::set_restrictedsharepercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  restrictedsharepercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedSharePercent)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
inline int ADChipDistribution::restrictedholddetails_size() const {
  return restrictedholddetails_.size();
}
inline void ADChipDistribution::clear_restrictedholddetails() {
  restrictedholddetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_restrictedholddetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return restrictedholddetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_restrictedholddetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return &restrictedholddetails_;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::restrictedholddetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return restrictedholddetails_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_restrictedholddetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return restrictedholddetails_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::restrictedholddetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return restrictedholddetails_;
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
inline int ADChipDistribution::largeshareholdersdetails_size() const {
  return largeshareholdersdetails_.size();
}
inline void ADChipDistribution::clear_largeshareholdersdetails() {
  largeshareholdersdetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_largeshareholdersdetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return largeshareholdersdetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_largeshareholdersdetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return &largeshareholdersdetails_;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::largeshareholdersdetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return largeshareholdersdetails_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_largeshareholdersdetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return largeshareholdersdetails_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::largeshareholdersdetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return largeshareholdersdetails_;
}

// int64 LargeShareholdersMCST = 51;
inline void ADChipDistribution::clear_largeshareholdersmcst() {
  largeshareholdersmcst_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::largeshareholdersmcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMCST)
  return largeshareholdersmcst_;
}
inline void ADChipDistribution::set_largeshareholdersmcst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  largeshareholdersmcst_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMCST)
}

// int64 LargeShareholdersMaxCostOfPositions = 52;
inline void ADChipDistribution::clear_largeshareholdersmaxcostofpositions() {
  largeshareholdersmaxcostofpositions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::largeshareholdersmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMaxCostOfPositions)
  return largeshareholdersmaxcostofpositions_;
}
inline void ADChipDistribution::set_largeshareholdersmaxcostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  largeshareholdersmaxcostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMaxCostOfPositions)
}

// int64 LargeShareholdersMinCostOfPositions = 53;
inline void ADChipDistribution::clear_largeshareholdersmincostofpositions() {
  largeshareholdersmincostofpositions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::largeshareholdersmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMinCostOfPositions)
  return largeshareholdersmincostofpositions_;
}
inline void ADChipDistribution::set_largeshareholdersmincostofpositions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  largeshareholdersmincostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMinCostOfPositions)
}

// int64 LargeShareholdersShareTotalNumber = 54;
inline void ADChipDistribution::clear_largeshareholderssharetotalnumber() {
  largeshareholderssharetotalnumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::largeshareholderssharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersShareTotalNumber)
  return largeshareholderssharetotalnumber_;
}
inline void ADChipDistribution::set_largeshareholderssharetotalnumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  largeshareholderssharetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersShareTotalNumber)
}

// int64 LargeShareholdersSharePercent = 55;
inline void ADChipDistribution::clear_largeshareholderssharepercent() {
  largeshareholderssharepercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistribution::largeshareholderssharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersSharePercent)
  return largeshareholderssharepercent_;
}
inline void ADChipDistribution::set_largeshareholderssharepercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  largeshareholderssharepercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersSharePercent)
}

// int32 DataMultiplePowerOf10 = 56;
inline void ADChipDistribution::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ADChipDistribution::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void ADChipDistribution::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// ADChipDistributionDetail

// int64 Price = 1;
inline void ADChipDistributionDetail::clear_price() {
  price_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistributionDetail::price() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.Price)
  return price_;
}
inline void ADChipDistributionDetail::set_price(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.Price)
}

// int64 NumberOfShares = 2;
inline void ADChipDistributionDetail::clear_numberofshares() {
  numberofshares_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistributionDetail::numberofshares() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfShares)
  return numberofshares_;
}
inline void ADChipDistributionDetail::set_numberofshares(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numberofshares_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfShares)
}

// int64 NumberOfSharesPercent = 3;
inline void ADChipDistributionDetail::clear_numberofsharespercent() {
  numberofsharespercent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistributionDetail::numberofsharespercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfSharesPercent)
  return numberofsharespercent_;
}
inline void ADChipDistributionDetail::set_numberofsharespercent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numberofsharespercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfSharesPercent)
}

// int64 ListedDate = 4;
inline void ADChipDistributionDetail::clear_listeddate() {
  listeddate_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ADChipDistributionDetail::listeddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.ListedDate)
  return listeddate_;
}
inline void ADChipDistributionDetail::set_listeddate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  listeddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.ListedDate)
}

// string ShareHolderName = 5;
inline void ADChipDistributionDetail::clear_shareholdername() {
  shareholdername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ADChipDistributionDetail::shareholdername() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  return shareholdername_.GetNoArena();
}
inline void ADChipDistributionDetail::set_shareholdername(const std::string& value) {
  
  shareholdername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}
inline void ADChipDistributionDetail::set_shareholdername(std::string&& value) {
  
  shareholdername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}
inline void ADChipDistributionDetail::set_shareholdername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shareholdername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}
inline void ADChipDistributionDetail::set_shareholdername(const char* value, size_t size) {
  
  shareholdername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}
inline std::string* ADChipDistributionDetail::mutable_shareholdername() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  return shareholdername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ADChipDistributionDetail::release_shareholdername() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  
  return shareholdername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ADChipDistributionDetail::set_allocated_shareholdername(std::string* shareholdername) {
  if (shareholdername != nullptr) {
    
  } else {
    
  }
  shareholdername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shareholdername);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADChipDistribution_2eproto
