// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADChipDistribution.proto

#include "ADChipDistribution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ADChipDistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADChipDistributionDetail_ADChipDistribution_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADChipDistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADChipDistribution> _instance;
} _ADChipDistribution_default_instance_;
class ADChipDistributionDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADChipDistributionDetail> _instance;
} _ADChipDistributionDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_ADChipDistribution_ADChipDistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADChipDistribution_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADChipDistribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADChipDistribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADChipDistribution_ADChipDistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ADChipDistribution_ADChipDistribution_2eproto}, {
      &scc_info_ADChipDistributionDetail_ADChipDistribution_2eproto.base,}};

static void InitDefaultsscc_info_ADChipDistributionDetail_ADChipDistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADChipDistributionDetail_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADChipDistributionDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADChipDistributionDetail_ADChipDistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADChipDistributionDetail_ADChipDistribution_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ADChipDistribution_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ADChipDistribution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ADChipDistribution_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ADChipDistribution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, sharetotalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, isfinalsettlement_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, totalshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, atotalshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, alistedtotalshare_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradabledetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablemcst_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablemaxcostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablemincostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradableprofitpercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablechipdispersionpercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablepreprofitpercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradableprofitchangepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablecentralizedpercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablecentralizedmaxcostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablecentralizedmincostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablesharetotalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, tradablesharepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, restricteddetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, restrictedmcst_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, restrictedmaxcostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, restrictedmincostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, restrictedsharetotalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, restrictedsharepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, restrictedholddetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, largeshareholdersdetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, largeshareholdersmcst_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, largeshareholdersmaxcostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, largeshareholdersmincostofpositions_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, largeshareholderssharetotalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, largeshareholderssharepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistribution, datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, price_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, numberofshares_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, numberofsharespercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, listeddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADChipDistributionDetail, shareholdername_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::ADChipDistribution)},
  { 47, -1, sizeof(::com::htsc::mdc::insight::model::ADChipDistributionDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADChipDistribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADChipDistributionDetail_default_instance_),
};

const char descriptor_table_protodef_ADChipDistribution_2eproto[] =
  "\n\030ADChipDistribution.proto\022\032com.htsc.mdc"
  ".insight.model\032\023ESecurityType.proto\032\027ESe"
  "curityIDSource.proto\"\262\014\n\022ADChipDistribut"
  "ion\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 "
  "\001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001"
  "(\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc."
  "mdc.model.ESecurityIDSource\0227\n\014securityT"
  "ype\030\006 \001(\0162!.com.htsc.mdc.model.ESecurity"
  "Type\022\024\n\014ExchangeDate\030\007 \001(\005\022\024\n\014ExchangeTi"
  "me\030\010 \001(\005\022\016\n\006LastPx\030\013 \001(\003\022\022\n\nPreClosePx\030\014"
  " \001(\003\022\030\n\020ShareTotalNumber\030\r \001(\003\022\031\n\021IsFina"
  "lSettlement\030\016 \001(\010\022\022\n\nTotalShare\030\017 \001(\003\022\023\n"
  "\013ATotalShare\030\020 \001(\003\022\031\n\021AListedTotalShare\030"
  "\021 \001(\003\022M\n\017TradableDetails\030\024 \003(\01324.com.hts"
  "c.mdc.insight.model.ADChipDistributionDe"
  "tail\022\024\n\014TradableMCST\030\025 \001(\003\022\"\n\032TradableMa"
  "xCostOfPositions\030\026 \001(\003\022\"\n\032TradableMinCos"
  "tOfPositions\030\027 \001(\003\022\035\n\025TradableProfitPerc"
  "ent\030\030 \001(\003\022%\n\035TradableChipDispersionPerce"
  "nt\030\031 \001(\003\022 \n\030TradablePreProfitPercent\030\032 \001"
  "(\003\022#\n\033TradableProfitChangePercent\030\033 \001(\003\022"
  "\"\n\032TradableCentralizedPercent\030\034 \001(\003\022-\n%T"
  "radableCentralizedMaxCostOfPositions\030\035 \001"
  "(\003\022-\n%TradableCentralizedMinCostOfPositi"
  "ons\030\036 \001(\003\022 \n\030TradableShareTotalNumber\030\037 "
  "\001(\003\022\034\n\024TradableSharePercent\030  \001(\003\022O\n\021Res"
  "trictedDetails\030( \003(\01324.com.htsc.mdc.insi"
  "ght.model.ADChipDistributionDetail\022\026\n\016Re"
  "strictedMCST\030) \001(\003\022$\n\034RestrictedMaxCostO"
  "fPositions\030* \001(\003\022$\n\034RestrictedMinCostOfP"
  "ositions\030+ \001(\003\022\"\n\032RestrictedShareTotalNu"
  "mber\030. \001(\003\022\036\n\026RestrictedSharePercent\030/ \001"
  "(\003\022S\n\025RestrictedHoldDetails\0300 \003(\01324.com."
  "htsc.mdc.insight.model.ADChipDistributio"
  "nDetail\022V\n\030LargeShareholdersDetails\0302 \003("
  "\01324.com.htsc.mdc.insight.model.ADChipDis"
  "tributionDetail\022\035\n\025LargeShareholdersMCST"
  "\0303 \001(\003\022+\n#LargeShareholdersMaxCostOfPosi"
  "tions\0304 \001(\003\022+\n#LargeShareholdersMinCostO"
  "fPositions\0305 \001(\003\022)\n!LargeShareholdersSha"
  "reTotalNumber\0306 \001(\003\022%\n\035LargeShareholders"
  "SharePercent\0307 \001(\003\022\035\n\025DataMultiplePowerO"
  "f10\0308 \001(\005\"\215\001\n\030ADChipDistributionDetail\022\r"
  "\n\005Price\030\001 \001(\003\022\026\n\016NumberOfShares\030\002 \001(\003\022\035\n"
  "\025NumberOfSharesPercent\030\003 \001(\003\022\022\n\nListedDa"
  "te\030\004 \001(\003\022\027\n\017ShareHolderName\030\005 \001(\tB;\n\032com"
  ".htsc.mdc.insight.modelB\030ADChipDistribut"
  "ionProtosH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ADChipDistribution_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ADChipDistribution_2eproto_sccs[2] = {
  &scc_info_ADChipDistribution_ADChipDistribution_2eproto.base,
  &scc_info_ADChipDistributionDetail_ADChipDistribution_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ADChipDistribution_2eproto_once;
static bool descriptor_table_ADChipDistribution_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADChipDistribution_2eproto = {
  &descriptor_table_ADChipDistribution_2eproto_initialized, descriptor_table_protodef_ADChipDistribution_2eproto, "ADChipDistribution.proto", 1902,
  &descriptor_table_ADChipDistribution_2eproto_once, descriptor_table_ADChipDistribution_2eproto_sccs, descriptor_table_ADChipDistribution_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ADChipDistribution_2eproto::offsets,
  file_level_metadata_ADChipDistribution_2eproto, 2, file_level_enum_descriptors_ADChipDistribution_2eproto, file_level_service_descriptors_ADChipDistribution_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ADChipDistribution_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ADChipDistribution_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void ADChipDistribution::InitAsDefaultInstance() {
}
class ADChipDistribution::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADChipDistribution::kHTSCSecurityIDFieldNumber;
const int ADChipDistribution::kMDDateFieldNumber;
const int ADChipDistribution::kMDTimeFieldNumber;
const int ADChipDistribution::kDataTimestampFieldNumber;
const int ADChipDistribution::kSecurityIDSourceFieldNumber;
const int ADChipDistribution::kSecurityTypeFieldNumber;
const int ADChipDistribution::kExchangeDateFieldNumber;
const int ADChipDistribution::kExchangeTimeFieldNumber;
const int ADChipDistribution::kLastPxFieldNumber;
const int ADChipDistribution::kPreClosePxFieldNumber;
const int ADChipDistribution::kShareTotalNumberFieldNumber;
const int ADChipDistribution::kIsFinalSettlementFieldNumber;
const int ADChipDistribution::kTotalShareFieldNumber;
const int ADChipDistribution::kATotalShareFieldNumber;
const int ADChipDistribution::kAListedTotalShareFieldNumber;
const int ADChipDistribution::kTradableDetailsFieldNumber;
const int ADChipDistribution::kTradableMCSTFieldNumber;
const int ADChipDistribution::kTradableMaxCostOfPositionsFieldNumber;
const int ADChipDistribution::kTradableMinCostOfPositionsFieldNumber;
const int ADChipDistribution::kTradableProfitPercentFieldNumber;
const int ADChipDistribution::kTradableChipDispersionPercentFieldNumber;
const int ADChipDistribution::kTradablePreProfitPercentFieldNumber;
const int ADChipDistribution::kTradableProfitChangePercentFieldNumber;
const int ADChipDistribution::kTradableCentralizedPercentFieldNumber;
const int ADChipDistribution::kTradableCentralizedMaxCostOfPositionsFieldNumber;
const int ADChipDistribution::kTradableCentralizedMinCostOfPositionsFieldNumber;
const int ADChipDistribution::kTradableShareTotalNumberFieldNumber;
const int ADChipDistribution::kTradableSharePercentFieldNumber;
const int ADChipDistribution::kRestrictedDetailsFieldNumber;
const int ADChipDistribution::kRestrictedMCSTFieldNumber;
const int ADChipDistribution::kRestrictedMaxCostOfPositionsFieldNumber;
const int ADChipDistribution::kRestrictedMinCostOfPositionsFieldNumber;
const int ADChipDistribution::kRestrictedShareTotalNumberFieldNumber;
const int ADChipDistribution::kRestrictedSharePercentFieldNumber;
const int ADChipDistribution::kRestrictedHoldDetailsFieldNumber;
const int ADChipDistribution::kLargeShareholdersDetailsFieldNumber;
const int ADChipDistribution::kLargeShareholdersMCSTFieldNumber;
const int ADChipDistribution::kLargeShareholdersMaxCostOfPositionsFieldNumber;
const int ADChipDistribution::kLargeShareholdersMinCostOfPositionsFieldNumber;
const int ADChipDistribution::kLargeShareholdersShareTotalNumberFieldNumber;
const int ADChipDistribution::kLargeShareholdersSharePercentFieldNumber;
const int ADChipDistribution::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADChipDistribution::ADChipDistribution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADChipDistribution)
}
ADChipDistribution::ADChipDistribution(const ADChipDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tradabledetails_(from.tradabledetails_),
      restricteddetails_(from.restricteddetails_),
      restrictedholddetails_(from.restrictedholddetails_),
      largeshareholdersdetails_(from.largeshareholdersdetails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  ::memcpy(&mddate_, &from.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&largeshareholderssharepercent_) -
    reinterpret_cast<char*>(&mddate_)) + sizeof(largeshareholderssharepercent_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADChipDistribution)
}

void ADChipDistribution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADChipDistribution_ADChipDistribution_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&largeshareholderssharepercent_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(largeshareholderssharepercent_));
}

ADChipDistribution::~ADChipDistribution() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADChipDistribution)
  SharedDtor();
}

void ADChipDistribution::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ADChipDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADChipDistribution& ADChipDistribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADChipDistribution_ADChipDistribution_2eproto.base);
  return *internal_default_instance();
}


void ADChipDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADChipDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradabledetails_.Clear();
  restricteddetails_.Clear();
  restrictedholddetails_.Clear();
  largeshareholdersdetails_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&largeshareholderssharepercent_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(largeshareholderssharepercent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADChipDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else goto handle_unusual;
        continue;
      // int32 ExchangeDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExchangeTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LastPx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 PreClosePx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ShareTotalNumber = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sharetotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsFinalSettlement = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          isfinalsettlement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalShare = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          totalshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ATotalShare = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          atotalshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 AListedTotalShare = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          alistedtotalshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_tradabledetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // int64 TradableMCST = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          tradablemcst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableMaxCostOfPositions = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          tradablemaxcostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableMinCostOfPositions = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          tradablemincostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableProfitPercent = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          tradableprofitpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableChipDispersionPercent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          tradablechipdispersionpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradablePreProfitPercent = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          tradablepreprofitpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableProfitChangePercent = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          tradableprofitchangepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableCentralizedPercent = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          tradablecentralizedpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableCentralizedMaxCostOfPositions = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          tradablecentralizedmaxcostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableCentralizedMinCostOfPositions = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          tradablecentralizedmincostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableShareTotalNumber = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          tradablesharetotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TradableSharePercent = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          tradablesharepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_restricteddetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 706);
        } else goto handle_unusual;
        continue;
      // int64 RestrictedMCST = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          restrictedmcst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 RestrictedMaxCostOfPositions = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          restrictedmaxcostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 RestrictedMinCostOfPositions = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          restrictedmincostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 RestrictedShareTotalNumber = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          restrictedsharetotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 RestrictedSharePercent = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          restrictedsharepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_restrictedholddetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 898);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_largeshareholdersdetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 914);
        } else goto handle_unusual;
        continue;
      // int64 LargeShareholdersMCST = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          largeshareholdersmcst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LargeShareholdersMaxCostOfPositions = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          largeshareholdersmaxcostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LargeShareholdersMinCostOfPositions = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          largeshareholdersmincostofpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LargeShareholdersShareTotalNumber = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          largeshareholderssharetotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 LargeShareholdersSharePercent = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          largeshareholderssharepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADChipDistribution::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADChipDistribution)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 DataTimestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ExchangeDate = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ExchangeTime = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LastPx = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 PreClosePx = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclosepx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ShareTotalNumber = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sharetotalnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsFinalSettlement = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinalsettlement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TotalShare = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalshare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ATotalShare = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &atotalshare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 AListedTotalShare = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &alistedtotalshare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tradabledetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableMCST = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablemcst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableMaxCostOfPositions = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablemaxcostofpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableMinCostOfPositions = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablemincostofpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableProfitPercent = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradableprofitpercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableChipDispersionPercent = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablechipdispersionpercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradablePreProfitPercent = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablepreprofitpercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableProfitChangePercent = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradableprofitchangepercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableCentralizedPercent = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablecentralizedpercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableCentralizedMaxCostOfPositions = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablecentralizedmaxcostofpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableCentralizedMinCostOfPositions = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablecentralizedmincostofpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableShareTotalNumber = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablesharetotalnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 TradableSharePercent = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablesharepercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_restricteddetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 RestrictedMCST = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedmcst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 RestrictedMaxCostOfPositions = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedmaxcostofpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 RestrictedMinCostOfPositions = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (344 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedmincostofpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 RestrictedShareTotalNumber = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (368 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedsharetotalnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 RestrictedSharePercent = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (376 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedsharepercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_restrictedholddetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_largeshareholdersdetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LargeShareholdersMCST = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (408 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholdersmcst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LargeShareholdersMaxCostOfPositions = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (416 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholdersmaxcostofpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LargeShareholdersMinCostOfPositions = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (424 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholdersmincostofpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LargeShareholdersShareTotalNumber = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (432 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholderssharetotalnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LargeShareholdersSharePercent = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (440 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholderssharepercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataMultiplePowerOf10 = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (448 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADChipDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADChipDistribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADChipDistribution::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADChipDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->securityidsource(), output);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->securitytype(), output);
  }

  // int32 ExchangeDate = 7;
  if (this->exchangedate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->exchangedate(), output);
  }

  // int32 ExchangeTime = 8;
  if (this->exchangetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->exchangetime(), output);
  }

  // int64 LastPx = 11;
  if (this->lastpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->lastpx(), output);
  }

  // int64 PreClosePx = 12;
  if (this->preclosepx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->preclosepx(), output);
  }

  // int64 ShareTotalNumber = 13;
  if (this->sharetotalnumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->sharetotalnumber(), output);
  }

  // bool IsFinalSettlement = 14;
  if (this->isfinalsettlement() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->isfinalsettlement(), output);
  }

  // int64 TotalShare = 15;
  if (this->totalshare() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->totalshare(), output);
  }

  // int64 ATotalShare = 16;
  if (this->atotalshare() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->atotalshare(), output);
  }

  // int64 AListedTotalShare = 17;
  if (this->alistedtotalshare() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->alistedtotalshare(), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tradabledetails_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->tradabledetails(static_cast<int>(i)),
      output);
  }

  // int64 TradableMCST = 21;
  if (this->tradablemcst() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->tradablemcst(), output);
  }

  // int64 TradableMaxCostOfPositions = 22;
  if (this->tradablemaxcostofpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->tradablemaxcostofpositions(), output);
  }

  // int64 TradableMinCostOfPositions = 23;
  if (this->tradablemincostofpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(23, this->tradablemincostofpositions(), output);
  }

  // int64 TradableProfitPercent = 24;
  if (this->tradableprofitpercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(24, this->tradableprofitpercent(), output);
  }

  // int64 TradableChipDispersionPercent = 25;
  if (this->tradablechipdispersionpercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(25, this->tradablechipdispersionpercent(), output);
  }

  // int64 TradablePreProfitPercent = 26;
  if (this->tradablepreprofitpercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(26, this->tradablepreprofitpercent(), output);
  }

  // int64 TradableProfitChangePercent = 27;
  if (this->tradableprofitchangepercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(27, this->tradableprofitchangepercent(), output);
  }

  // int64 TradableCentralizedPercent = 28;
  if (this->tradablecentralizedpercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(28, this->tradablecentralizedpercent(), output);
  }

  // int64 TradableCentralizedMaxCostOfPositions = 29;
  if (this->tradablecentralizedmaxcostofpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(29, this->tradablecentralizedmaxcostofpositions(), output);
  }

  // int64 TradableCentralizedMinCostOfPositions = 30;
  if (this->tradablecentralizedmincostofpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(30, this->tradablecentralizedmincostofpositions(), output);
  }

  // int64 TradableShareTotalNumber = 31;
  if (this->tradablesharetotalnumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(31, this->tradablesharetotalnumber(), output);
  }

  // int64 TradableSharePercent = 32;
  if (this->tradablesharepercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(32, this->tradablesharepercent(), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->restricteddetails_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      40,
      this->restricteddetails(static_cast<int>(i)),
      output);
  }

  // int64 RestrictedMCST = 41;
  if (this->restrictedmcst() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(41, this->restrictedmcst(), output);
  }

  // int64 RestrictedMaxCostOfPositions = 42;
  if (this->restrictedmaxcostofpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(42, this->restrictedmaxcostofpositions(), output);
  }

  // int64 RestrictedMinCostOfPositions = 43;
  if (this->restrictedmincostofpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(43, this->restrictedmincostofpositions(), output);
  }

  // int64 RestrictedShareTotalNumber = 46;
  if (this->restrictedsharetotalnumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(46, this->restrictedsharetotalnumber(), output);
  }

  // int64 RestrictedSharePercent = 47;
  if (this->restrictedsharepercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(47, this->restrictedsharepercent(), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->restrictedholddetails_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      48,
      this->restrictedholddetails(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->largeshareholdersdetails_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      50,
      this->largeshareholdersdetails(static_cast<int>(i)),
      output);
  }

  // int64 LargeShareholdersMCST = 51;
  if (this->largeshareholdersmcst() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(51, this->largeshareholdersmcst(), output);
  }

  // int64 LargeShareholdersMaxCostOfPositions = 52;
  if (this->largeshareholdersmaxcostofpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(52, this->largeshareholdersmaxcostofpositions(), output);
  }

  // int64 LargeShareholdersMinCostOfPositions = 53;
  if (this->largeshareholdersmincostofpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(53, this->largeshareholdersmincostofpositions(), output);
  }

  // int64 LargeShareholdersShareTotalNumber = 54;
  if (this->largeshareholderssharetotalnumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(54, this->largeshareholderssharetotalnumber(), output);
  }

  // int64 LargeShareholdersSharePercent = 55;
  if (this->largeshareholderssharepercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(55, this->largeshareholderssharepercent(), output);
  }

  // int32 DataMultiplePowerOf10 = 56;
  if (this->datamultiplepowerof10() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(56, this->datamultiplepowerof10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADChipDistribution)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADChipDistribution::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADChipDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->securitytype(), target);
  }

  // int32 ExchangeDate = 7;
  if (this->exchangedate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->exchangedate(), target);
  }

  // int32 ExchangeTime = 8;
  if (this->exchangetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->exchangetime(), target);
  }

  // int64 LastPx = 11;
  if (this->lastpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->lastpx(), target);
  }

  // int64 PreClosePx = 12;
  if (this->preclosepx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->preclosepx(), target);
  }

  // int64 ShareTotalNumber = 13;
  if (this->sharetotalnumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->sharetotalnumber(), target);
  }

  // bool IsFinalSettlement = 14;
  if (this->isfinalsettlement() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->isfinalsettlement(), target);
  }

  // int64 TotalShare = 15;
  if (this->totalshare() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->totalshare(), target);
  }

  // int64 ATotalShare = 16;
  if (this->atotalshare() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->atotalshare(), target);
  }

  // int64 AListedTotalShare = 17;
  if (this->alistedtotalshare() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->alistedtotalshare(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tradabledetails_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->tradabledetails(static_cast<int>(i)), target);
  }

  // int64 TradableMCST = 21;
  if (this->tradablemcst() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->tradablemcst(), target);
  }

  // int64 TradableMaxCostOfPositions = 22;
  if (this->tradablemaxcostofpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->tradablemaxcostofpositions(), target);
  }

  // int64 TradableMinCostOfPositions = 23;
  if (this->tradablemincostofpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->tradablemincostofpositions(), target);
  }

  // int64 TradableProfitPercent = 24;
  if (this->tradableprofitpercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->tradableprofitpercent(), target);
  }

  // int64 TradableChipDispersionPercent = 25;
  if (this->tradablechipdispersionpercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->tradablechipdispersionpercent(), target);
  }

  // int64 TradablePreProfitPercent = 26;
  if (this->tradablepreprofitpercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->tradablepreprofitpercent(), target);
  }

  // int64 TradableProfitChangePercent = 27;
  if (this->tradableprofitchangepercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->tradableprofitchangepercent(), target);
  }

  // int64 TradableCentralizedPercent = 28;
  if (this->tradablecentralizedpercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(28, this->tradablecentralizedpercent(), target);
  }

  // int64 TradableCentralizedMaxCostOfPositions = 29;
  if (this->tradablecentralizedmaxcostofpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(29, this->tradablecentralizedmaxcostofpositions(), target);
  }

  // int64 TradableCentralizedMinCostOfPositions = 30;
  if (this->tradablecentralizedmincostofpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->tradablecentralizedmincostofpositions(), target);
  }

  // int64 TradableShareTotalNumber = 31;
  if (this->tradablesharetotalnumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(31, this->tradablesharetotalnumber(), target);
  }

  // int64 TradableSharePercent = 32;
  if (this->tradablesharepercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(32, this->tradablesharepercent(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->restricteddetails_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->restricteddetails(static_cast<int>(i)), target);
  }

  // int64 RestrictedMCST = 41;
  if (this->restrictedmcst() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(41, this->restrictedmcst(), target);
  }

  // int64 RestrictedMaxCostOfPositions = 42;
  if (this->restrictedmaxcostofpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(42, this->restrictedmaxcostofpositions(), target);
  }

  // int64 RestrictedMinCostOfPositions = 43;
  if (this->restrictedmincostofpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(43, this->restrictedmincostofpositions(), target);
  }

  // int64 RestrictedShareTotalNumber = 46;
  if (this->restrictedsharetotalnumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(46, this->restrictedsharetotalnumber(), target);
  }

  // int64 RestrictedSharePercent = 47;
  if (this->restrictedsharepercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(47, this->restrictedsharepercent(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->restrictedholddetails_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48, this->restrictedholddetails(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->largeshareholdersdetails_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, this->largeshareholdersdetails(static_cast<int>(i)), target);
  }

  // int64 LargeShareholdersMCST = 51;
  if (this->largeshareholdersmcst() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(51, this->largeshareholdersmcst(), target);
  }

  // int64 LargeShareholdersMaxCostOfPositions = 52;
  if (this->largeshareholdersmaxcostofpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(52, this->largeshareholdersmaxcostofpositions(), target);
  }

  // int64 LargeShareholdersMinCostOfPositions = 53;
  if (this->largeshareholdersmincostofpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(53, this->largeshareholdersmincostofpositions(), target);
  }

  // int64 LargeShareholdersShareTotalNumber = 54;
  if (this->largeshareholderssharetotalnumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(54, this->largeshareholderssharetotalnumber(), target);
  }

  // int64 LargeShareholdersSharePercent = 55;
  if (this->largeshareholderssharepercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(55, this->largeshareholderssharepercent(), target);
  }

  // int32 DataMultiplePowerOf10 = 56;
  if (this->datamultiplepowerof10() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(56, this->datamultiplepowerof10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADChipDistribution)
  return target;
}

size_t ADChipDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADChipDistribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->tradabledetails_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tradabledetails(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->restricteddetails_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->restricteddetails(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  {
    unsigned int count = static_cast<unsigned int>(this->restrictedholddetails_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->restrictedholddetails(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  {
    unsigned int count = static_cast<unsigned int>(this->largeshareholdersdetails_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->largeshareholdersdetails(static_cast<int>(i)));
    }
  }

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // int32 ExchangeDate = 7;
  if (this->exchangedate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // int32 ExchangeTime = 8;
  if (this->exchangetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // int64 LastPx = 11;
  if (this->lastpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lastpx());
  }

  // int64 PreClosePx = 12;
  if (this->preclosepx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->preclosepx());
  }

  // int64 ShareTotalNumber = 13;
  if (this->sharetotalnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sharetotalnumber());
  }

  // int64 TotalShare = 15;
  if (this->totalshare() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalshare());
  }

  // int64 ATotalShare = 16;
  if (this->atotalshare() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->atotalshare());
  }

  // int64 AListedTotalShare = 17;
  if (this->alistedtotalshare() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->alistedtotalshare());
  }

  // int64 TradableMCST = 21;
  if (this->tradablemcst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablemcst());
  }

  // int64 TradableMaxCostOfPositions = 22;
  if (this->tradablemaxcostofpositions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablemaxcostofpositions());
  }

  // int64 TradableMinCostOfPositions = 23;
  if (this->tradablemincostofpositions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablemincostofpositions());
  }

  // int64 TradableProfitPercent = 24;
  if (this->tradableprofitpercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradableprofitpercent());
  }

  // int64 TradableChipDispersionPercent = 25;
  if (this->tradablechipdispersionpercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablechipdispersionpercent());
  }

  // int64 TradablePreProfitPercent = 26;
  if (this->tradablepreprofitpercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablepreprofitpercent());
  }

  // int64 TradableProfitChangePercent = 27;
  if (this->tradableprofitchangepercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradableprofitchangepercent());
  }

  // int64 TradableCentralizedPercent = 28;
  if (this->tradablecentralizedpercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablecentralizedpercent());
  }

  // int64 TradableCentralizedMaxCostOfPositions = 29;
  if (this->tradablecentralizedmaxcostofpositions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablecentralizedmaxcostofpositions());
  }

  // int64 TradableCentralizedMinCostOfPositions = 30;
  if (this->tradablecentralizedmincostofpositions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablecentralizedmincostofpositions());
  }

  // int64 TradableShareTotalNumber = 31;
  if (this->tradablesharetotalnumber() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablesharetotalnumber());
  }

  // int64 TradableSharePercent = 32;
  if (this->tradablesharepercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tradablesharepercent());
  }

  // bool IsFinalSettlement = 14;
  if (this->isfinalsettlement() != 0) {
    total_size += 1 + 1;
  }

  // int32 DataMultiplePowerOf10 = 56;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  // int64 RestrictedMCST = 41;
  if (this->restrictedmcst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->restrictedmcst());
  }

  // int64 RestrictedMaxCostOfPositions = 42;
  if (this->restrictedmaxcostofpositions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->restrictedmaxcostofpositions());
  }

  // int64 RestrictedMinCostOfPositions = 43;
  if (this->restrictedmincostofpositions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->restrictedmincostofpositions());
  }

  // int64 RestrictedShareTotalNumber = 46;
  if (this->restrictedsharetotalnumber() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->restrictedsharetotalnumber());
  }

  // int64 RestrictedSharePercent = 47;
  if (this->restrictedsharepercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->restrictedsharepercent());
  }

  // int64 LargeShareholdersMCST = 51;
  if (this->largeshareholdersmcst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->largeshareholdersmcst());
  }

  // int64 LargeShareholdersMaxCostOfPositions = 52;
  if (this->largeshareholdersmaxcostofpositions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->largeshareholdersmaxcostofpositions());
  }

  // int64 LargeShareholdersMinCostOfPositions = 53;
  if (this->largeshareholdersmincostofpositions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->largeshareholdersmincostofpositions());
  }

  // int64 LargeShareholdersShareTotalNumber = 54;
  if (this->largeshareholderssharetotalnumber() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->largeshareholderssharetotalnumber());
  }

  // int64 LargeShareholdersSharePercent = 55;
  if (this->largeshareholderssharepercent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->largeshareholderssharepercent());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADChipDistribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const ADChipDistribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADChipDistribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADChipDistribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADChipDistribution)
    MergeFrom(*source);
  }
}

void ADChipDistribution::MergeFrom(const ADChipDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tradabledetails_.MergeFrom(from.tradabledetails_);
  restricteddetails_.MergeFrom(from.restricteddetails_);
  restrictedholddetails_.MergeFrom(from.restrictedholddetails_);
  largeshareholdersdetails_.MergeFrom(from.largeshareholdersdetails_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.lastpx() != 0) {
    set_lastpx(from.lastpx());
  }
  if (from.preclosepx() != 0) {
    set_preclosepx(from.preclosepx());
  }
  if (from.sharetotalnumber() != 0) {
    set_sharetotalnumber(from.sharetotalnumber());
  }
  if (from.totalshare() != 0) {
    set_totalshare(from.totalshare());
  }
  if (from.atotalshare() != 0) {
    set_atotalshare(from.atotalshare());
  }
  if (from.alistedtotalshare() != 0) {
    set_alistedtotalshare(from.alistedtotalshare());
  }
  if (from.tradablemcst() != 0) {
    set_tradablemcst(from.tradablemcst());
  }
  if (from.tradablemaxcostofpositions() != 0) {
    set_tradablemaxcostofpositions(from.tradablemaxcostofpositions());
  }
  if (from.tradablemincostofpositions() != 0) {
    set_tradablemincostofpositions(from.tradablemincostofpositions());
  }
  if (from.tradableprofitpercent() != 0) {
    set_tradableprofitpercent(from.tradableprofitpercent());
  }
  if (from.tradablechipdispersionpercent() != 0) {
    set_tradablechipdispersionpercent(from.tradablechipdispersionpercent());
  }
  if (from.tradablepreprofitpercent() != 0) {
    set_tradablepreprofitpercent(from.tradablepreprofitpercent());
  }
  if (from.tradableprofitchangepercent() != 0) {
    set_tradableprofitchangepercent(from.tradableprofitchangepercent());
  }
  if (from.tradablecentralizedpercent() != 0) {
    set_tradablecentralizedpercent(from.tradablecentralizedpercent());
  }
  if (from.tradablecentralizedmaxcostofpositions() != 0) {
    set_tradablecentralizedmaxcostofpositions(from.tradablecentralizedmaxcostofpositions());
  }
  if (from.tradablecentralizedmincostofpositions() != 0) {
    set_tradablecentralizedmincostofpositions(from.tradablecentralizedmincostofpositions());
  }
  if (from.tradablesharetotalnumber() != 0) {
    set_tradablesharetotalnumber(from.tradablesharetotalnumber());
  }
  if (from.tradablesharepercent() != 0) {
    set_tradablesharepercent(from.tradablesharepercent());
  }
  if (from.isfinalsettlement() != 0) {
    set_isfinalsettlement(from.isfinalsettlement());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
  if (from.restrictedmcst() != 0) {
    set_restrictedmcst(from.restrictedmcst());
  }
  if (from.restrictedmaxcostofpositions() != 0) {
    set_restrictedmaxcostofpositions(from.restrictedmaxcostofpositions());
  }
  if (from.restrictedmincostofpositions() != 0) {
    set_restrictedmincostofpositions(from.restrictedmincostofpositions());
  }
  if (from.restrictedsharetotalnumber() != 0) {
    set_restrictedsharetotalnumber(from.restrictedsharetotalnumber());
  }
  if (from.restrictedsharepercent() != 0) {
    set_restrictedsharepercent(from.restrictedsharepercent());
  }
  if (from.largeshareholdersmcst() != 0) {
    set_largeshareholdersmcst(from.largeshareholdersmcst());
  }
  if (from.largeshareholdersmaxcostofpositions() != 0) {
    set_largeshareholdersmaxcostofpositions(from.largeshareholdersmaxcostofpositions());
  }
  if (from.largeshareholdersmincostofpositions() != 0) {
    set_largeshareholdersmincostofpositions(from.largeshareholdersmincostofpositions());
  }
  if (from.largeshareholderssharetotalnumber() != 0) {
    set_largeshareholderssharetotalnumber(from.largeshareholderssharetotalnumber());
  }
  if (from.largeshareholderssharepercent() != 0) {
    set_largeshareholderssharepercent(from.largeshareholderssharepercent());
  }
}

void ADChipDistribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADChipDistribution::CopyFrom(const ADChipDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADChipDistribution::IsInitialized() const {
  return true;
}

void ADChipDistribution::Swap(ADChipDistribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADChipDistribution::InternalSwap(ADChipDistribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tradabledetails_)->InternalSwap(CastToBase(&other->tradabledetails_));
  CastToBase(&restricteddetails_)->InternalSwap(CastToBase(&other->restricteddetails_));
  CastToBase(&restrictedholddetails_)->InternalSwap(CastToBase(&other->restrictedholddetails_));
  CastToBase(&largeshareholdersdetails_)->InternalSwap(CastToBase(&other->largeshareholdersdetails_));
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mddate_, other->mddate_);
  swap(mdtime_, other->mdtime_);
  swap(datatimestamp_, other->datatimestamp_);
  swap(securityidsource_, other->securityidsource_);
  swap(securitytype_, other->securitytype_);
  swap(exchangedate_, other->exchangedate_);
  swap(exchangetime_, other->exchangetime_);
  swap(lastpx_, other->lastpx_);
  swap(preclosepx_, other->preclosepx_);
  swap(sharetotalnumber_, other->sharetotalnumber_);
  swap(totalshare_, other->totalshare_);
  swap(atotalshare_, other->atotalshare_);
  swap(alistedtotalshare_, other->alistedtotalshare_);
  swap(tradablemcst_, other->tradablemcst_);
  swap(tradablemaxcostofpositions_, other->tradablemaxcostofpositions_);
  swap(tradablemincostofpositions_, other->tradablemincostofpositions_);
  swap(tradableprofitpercent_, other->tradableprofitpercent_);
  swap(tradablechipdispersionpercent_, other->tradablechipdispersionpercent_);
  swap(tradablepreprofitpercent_, other->tradablepreprofitpercent_);
  swap(tradableprofitchangepercent_, other->tradableprofitchangepercent_);
  swap(tradablecentralizedpercent_, other->tradablecentralizedpercent_);
  swap(tradablecentralizedmaxcostofpositions_, other->tradablecentralizedmaxcostofpositions_);
  swap(tradablecentralizedmincostofpositions_, other->tradablecentralizedmincostofpositions_);
  swap(tradablesharetotalnumber_, other->tradablesharetotalnumber_);
  swap(tradablesharepercent_, other->tradablesharepercent_);
  swap(isfinalsettlement_, other->isfinalsettlement_);
  swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
  swap(restrictedmcst_, other->restrictedmcst_);
  swap(restrictedmaxcostofpositions_, other->restrictedmaxcostofpositions_);
  swap(restrictedmincostofpositions_, other->restrictedmincostofpositions_);
  swap(restrictedsharetotalnumber_, other->restrictedsharetotalnumber_);
  swap(restrictedsharepercent_, other->restrictedsharepercent_);
  swap(largeshareholdersmcst_, other->largeshareholdersmcst_);
  swap(largeshareholdersmaxcostofpositions_, other->largeshareholdersmaxcostofpositions_);
  swap(largeshareholdersmincostofpositions_, other->largeshareholdersmincostofpositions_);
  swap(largeshareholderssharetotalnumber_, other->largeshareholderssharetotalnumber_);
  swap(largeshareholderssharepercent_, other->largeshareholderssharepercent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADChipDistribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADChipDistributionDetail::InitAsDefaultInstance() {
}
class ADChipDistributionDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADChipDistributionDetail::kPriceFieldNumber;
const int ADChipDistributionDetail::kNumberOfSharesFieldNumber;
const int ADChipDistributionDetail::kNumberOfSharesPercentFieldNumber;
const int ADChipDistributionDetail::kListedDateFieldNumber;
const int ADChipDistributionDetail::kShareHolderNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADChipDistributionDetail::ADChipDistributionDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
}
ADChipDistributionDetail::ADChipDistributionDetail(const ADChipDistributionDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shareholdername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.shareholdername().size() > 0) {
    shareholdername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shareholdername_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&listeddate_) -
    reinterpret_cast<char*>(&price_)) + sizeof(listeddate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
}

void ADChipDistributionDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADChipDistributionDetail_ADChipDistribution_2eproto.base);
  shareholdername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listeddate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(listeddate_));
}

ADChipDistributionDetail::~ADChipDistributionDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  SharedDtor();
}

void ADChipDistributionDetail::SharedDtor() {
  shareholdername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ADChipDistributionDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADChipDistributionDetail& ADChipDistributionDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADChipDistributionDetail_ADChipDistribution_2eproto.base);
  return *internal_default_instance();
}


void ADChipDistributionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shareholdername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listeddate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(listeddate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADChipDistributionDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NumberOfShares = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numberofshares_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NumberOfSharesPercent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          numberofsharespercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ListedDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          listeddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ShareHolderName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_shareholdername(), ptr, ctx, "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADChipDistributionDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Price = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 NumberOfShares = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &numberofshares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 NumberOfSharesPercent = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &numberofsharespercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ListedDate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &listeddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ShareHolderName = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_shareholdername()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->shareholdername().data(), static_cast<int>(this->shareholdername().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADChipDistributionDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Price = 1;
  if (this->price() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->price(), output);
  }

  // int64 NumberOfShares = 2;
  if (this->numberofshares() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->numberofshares(), output);
  }

  // int64 NumberOfSharesPercent = 3;
  if (this->numberofsharespercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->numberofsharespercent(), output);
  }

  // int64 ListedDate = 4;
  if (this->listeddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->listeddate(), output);
  }

  // string ShareHolderName = 5;
  if (this->shareholdername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->shareholdername().data(), static_cast<int>(this->shareholdername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->shareholdername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADChipDistributionDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADChipDistributionDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Price = 1;
  if (this->price() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->price(), target);
  }

  // int64 NumberOfShares = 2;
  if (this->numberofshares() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->numberofshares(), target);
  }

  // int64 NumberOfSharesPercent = 3;
  if (this->numberofsharespercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->numberofsharespercent(), target);
  }

  // int64 ListedDate = 4;
  if (this->listeddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->listeddate(), target);
  }

  // string ShareHolderName = 5;
  if (this->shareholdername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->shareholdername().data(), static_cast<int>(this->shareholdername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->shareholdername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  return target;
}

size_t ADChipDistributionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ShareHolderName = 5;
  if (this->shareholdername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->shareholdername());
  }

  // int64 Price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->price());
  }

  // int64 NumberOfShares = 2;
  if (this->numberofshares() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->numberofshares());
  }

  // int64 NumberOfSharesPercent = 3;
  if (this->numberofsharespercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->numberofsharespercent());
  }

  // int64 ListedDate = 4;
  if (this->listeddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->listeddate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADChipDistributionDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ADChipDistributionDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADChipDistributionDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADChipDistributionDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADChipDistributionDetail)
    MergeFrom(*source);
  }
}

void ADChipDistributionDetail::MergeFrom(const ADChipDistributionDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shareholdername().size() > 0) {

    shareholdername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shareholdername_);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.numberofshares() != 0) {
    set_numberofshares(from.numberofshares());
  }
  if (from.numberofsharespercent() != 0) {
    set_numberofsharespercent(from.numberofsharespercent());
  }
  if (from.listeddate() != 0) {
    set_listeddate(from.listeddate());
  }
}

void ADChipDistributionDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADChipDistributionDetail::CopyFrom(const ADChipDistributionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADChipDistributionDetail::IsInitialized() const {
  return true;
}

void ADChipDistributionDetail::Swap(ADChipDistributionDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADChipDistributionDetail::InternalSwap(ADChipDistributionDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shareholdername_.Swap(&other->shareholdername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(numberofshares_, other->numberofshares_);
  swap(numberofsharespercent_, other->numberofsharespercent_);
  swap(listeddate_, other->listeddate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADChipDistributionDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADChipDistribution* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADChipDistribution >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADChipDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADChipDistributionDetail* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
