// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDiscovery.proto

#include "ServiceDiscovery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_InsightErrorContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsightErrorContext_InsightErrorContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceDiscovery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfo_ServiceDiscovery_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ServiceDiscoveryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceDiscoveryRequest> _instance;
} _ServiceDiscoveryRequest_default_instance_;
class ServiceDiscoveryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceDiscoveryResponse> _instance;
} _ServiceDiscoveryResponse_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfo> _instance;
} _ServerInfo_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_ServerInfo_ServiceDiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ServerInfo_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfo_ServiceDiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServerInfo_ServiceDiscovery_2eproto}, {}};

static void InitDefaultsscc_info_ServiceDiscoveryRequest_ServiceDiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ServiceDiscoveryRequest_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceDiscoveryRequest_ServiceDiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServiceDiscoveryRequest_ServiceDiscovery_2eproto}, {}};

static void InitDefaultsscc_info_ServiceDiscoveryResponse_ServiceDiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ServiceDiscoveryResponse_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServiceDiscoveryResponse_ServiceDiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ServiceDiscoveryResponse_ServiceDiscovery_2eproto}, {
      &scc_info_InsightErrorContext_InsightErrorContext_2eproto.base,
      &scc_info_ServerInfo_ServiceDiscovery_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ServiceDiscovery_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ServiceDiscovery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ServiceDiscovery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ServiceDiscovery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest, apptype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest, appversion_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest, username_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest, deviceid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest, issupportcompressed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse, issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse, errorcontext_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse, servers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServerInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServerInfo, port_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServerInfo, iptype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServerInfo, sitetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServerInfo, sitename_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ServerInfo, ipversion_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest)},
  { 10, -1, sizeof(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse)},
  { 18, -1, sizeof(::com::htsc::mdc::insight::model::ServerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ServiceDiscoveryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ServiceDiscoveryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ServerInfo_default_instance_),
};

const char descriptor_table_protodef_ServiceDiscovery_2eproto[] =
  "\n\026ServiceDiscovery.proto\022\032com.htsc.mdc.i"
  "nsight.model\032\031InsightErrorContext.proto\""
  "\177\n\027ServiceDiscoveryRequest\022\017\n\007appType\030\001 "
  "\001(\005\022\022\n\nappVersion\030\002 \001(\t\022\020\n\010userName\030\003 \001("
  "\t\022\020\n\010deviceId\030\004 \001(\t\022\033\n\023isSupportCompress"
  "ed\030\005 \001(\010\"\255\001\n\030ServiceDiscoveryResponse\022\021\n"
  "\tisSuccess\030\001 \001(\010\022E\n\014errorContext\030\002 \001(\0132/"
  ".com.htsc.mdc.insight.model.InsightError"
  "Context\0227\n\007servers\030\003 \003(\0132&.com.htsc.mdc."
  "insight.model.ServerInfo\"m\n\nServerInfo\022\n"
  "\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\022\016\n\006ipType\030\003 \001(\005"
  "\022\020\n\010siteType\030\004 \001(\005\022\020\n\010siteName\030\005 \001(\t\022\021\n\t"
  "ipVersion\030\006 \001(\005B8\n\032com.htsc.mdc.insight."
  "modelB\025ServiceDiscoveryProtoH\001\240\001\001b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ServiceDiscovery_2eproto_deps[1] = {
  &::descriptor_table_InsightErrorContext_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ServiceDiscovery_2eproto_sccs[3] = {
  &scc_info_ServerInfo_ServiceDiscovery_2eproto.base,
  &scc_info_ServiceDiscoveryRequest_ServiceDiscovery_2eproto.base,
  &scc_info_ServiceDiscoveryResponse_ServiceDiscovery_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ServiceDiscovery_2eproto_once;
static bool descriptor_table_ServiceDiscovery_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDiscovery_2eproto = {
  &descriptor_table_ServiceDiscovery_2eproto_initialized, descriptor_table_protodef_ServiceDiscovery_2eproto, "ServiceDiscovery.proto", 561,
  &descriptor_table_ServiceDiscovery_2eproto_once, descriptor_table_ServiceDiscovery_2eproto_sccs, descriptor_table_ServiceDiscovery_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_ServiceDiscovery_2eproto::offsets,
  file_level_metadata_ServiceDiscovery_2eproto, 3, file_level_enum_descriptors_ServiceDiscovery_2eproto, file_level_service_descriptors_ServiceDiscovery_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ServiceDiscovery_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ServiceDiscovery_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void ServiceDiscoveryRequest::InitAsDefaultInstance() {
}
class ServiceDiscoveryRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceDiscoveryRequest::kAppTypeFieldNumber;
const int ServiceDiscoveryRequest::kAppVersionFieldNumber;
const int ServiceDiscoveryRequest::kUserNameFieldNumber;
const int ServiceDiscoveryRequest::kDeviceIdFieldNumber;
const int ServiceDiscoveryRequest::kIsSupportCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceDiscoveryRequest::ServiceDiscoveryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
}
ServiceDiscoveryRequest::ServiceDiscoveryRequest(const ServiceDiscoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.appversion().size() > 0) {
    appversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appversion_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  ::memcpy(&apptype_, &from.apptype_,
    static_cast<size_t>(reinterpret_cast<char*>(&issupportcompressed_) -
    reinterpret_cast<char*>(&apptype_)) + sizeof(issupportcompressed_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
}

void ServiceDiscoveryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceDiscoveryRequest_ServiceDiscovery_2eproto.base);
  appversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&apptype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issupportcompressed_) -
      reinterpret_cast<char*>(&apptype_)) + sizeof(issupportcompressed_));
}

ServiceDiscoveryRequest::~ServiceDiscoveryRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  SharedDtor();
}

void ServiceDiscoveryRequest::SharedDtor() {
  appversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceDiscoveryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceDiscoveryRequest& ServiceDiscoveryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceDiscoveryRequest_ServiceDiscovery_2eproto.base);
  return *internal_default_instance();
}


void ServiceDiscoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&apptype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issupportcompressed_) -
      reinterpret_cast<char*>(&apptype_)) + sizeof(issupportcompressed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceDiscoveryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 appType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          apptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_appversion(), ptr, ctx, "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_username(), ptr, ctx, "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deviceid(), ptr, ctx, "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSupportCompressed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          issupportcompressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceDiscoveryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 appType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &apptype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appVersion = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->appversion().data(), static_cast<int>(this->appversion().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userName = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deviceId = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), static_cast<int>(this->deviceid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSupportCompressed = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issupportcompressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceDiscoveryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 appType = 1;
  if (this->apptype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->apptype(), output);
  }

  // string appVersion = 2;
  if (this->appversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), static_cast<int>(this->appversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appversion(), output);
  }

  // string userName = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // string deviceId = 4;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), static_cast<int>(this->deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deviceid(), output);
  }

  // bool isSupportCompressed = 5;
  if (this->issupportcompressed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->issupportcompressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceDiscoveryRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 appType = 1;
  if (this->apptype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->apptype(), target);
  }

  // string appVersion = 2;
  if (this->appversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), static_cast<int>(this->appversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->appversion(), target);
  }

  // string userName = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // string deviceId = 4;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), static_cast<int>(this->deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceid(), target);
  }

  // bool isSupportCompressed = 5;
  if (this->issupportcompressed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->issupportcompressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  return target;
}

size_t ServiceDiscoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appVersion = 2;
  if (this->appversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->appversion());
  }

  // string userName = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string deviceId = 4;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // int32 appType = 1;
  if (this->apptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->apptype());
  }

  // bool isSupportCompressed = 5;
  if (this->issupportcompressed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceDiscoveryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceDiscoveryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceDiscoveryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
    MergeFrom(*source);
  }
}

void ServiceDiscoveryRequest::MergeFrom(const ServiceDiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appversion().size() > 0) {

    appversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appversion_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.apptype() != 0) {
    set_apptype(from.apptype());
  }
  if (from.issupportcompressed() != 0) {
    set_issupportcompressed(from.issupportcompressed());
  }
}

void ServiceDiscoveryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDiscoveryRequest::CopyFrom(const ServiceDiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscoveryRequest::IsInitialized() const {
  return true;
}

void ServiceDiscoveryRequest::Swap(ServiceDiscoveryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceDiscoveryRequest::InternalSwap(ServiceDiscoveryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  appversion_.Swap(&other->appversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(apptype_, other->apptype_);
  swap(issupportcompressed_, other->issupportcompressed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscoveryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceDiscoveryResponse::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_ServiceDiscoveryResponse_default_instance_._instance.get_mutable()->errorcontext_ = const_cast< ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      ::com::htsc::mdc::insight::model::InsightErrorContext::internal_default_instance());
}
class ServiceDiscoveryResponse::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const ServiceDiscoveryResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
ServiceDiscoveryResponse::HasBitSetters::errorcontext(const ServiceDiscoveryResponse* msg) {
  return *msg->errorcontext_;
}
void ServiceDiscoveryResponse::clear_errorcontext() {
  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceDiscoveryResponse::kIsSuccessFieldNumber;
const int ServiceDiscoveryResponse::kErrorContextFieldNumber;
const int ServiceDiscoveryResponse::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceDiscoveryResponse::ServiceDiscoveryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
}
ServiceDiscoveryResponse::ServiceDiscoveryResponse(const ServiceDiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errorcontext()) {
    errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from.errorcontext_);
  } else {
    errorcontext_ = nullptr;
  }
  issuccess_ = from.issuccess_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
}

void ServiceDiscoveryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceDiscoveryResponse_ServiceDiscovery_2eproto.base);
  ::memset(&errorcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&errorcontext_)) + sizeof(issuccess_));
}

ServiceDiscoveryResponse::~ServiceDiscoveryResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  SharedDtor();
}

void ServiceDiscoveryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete errorcontext_;
}

void ServiceDiscoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceDiscoveryResponse& ServiceDiscoveryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceDiscoveryResponse_ServiceDiscovery_2eproto.base);
  return *internal_default_instance();
}


void ServiceDiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
  issuccess_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceDiscoveryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ServerInfo servers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceDiscoveryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isSuccess = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_errorcontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ServerInfo servers = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceDiscoveryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::errorcontext(this), output);
  }

  // repeated .com.htsc.mdc.insight.model.ServerInfo servers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->servers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceDiscoveryResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::errorcontext(this), target);
  }

  // repeated .com.htsc.mdc.insight.model.ServerInfo servers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->servers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  return target;
}

size_t ServiceDiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ServerInfo servers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorcontext_);
  }

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceDiscoveryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceDiscoveryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceDiscoveryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
    MergeFrom(*source);
  }
}

void ServiceDiscoveryResponse::MergeFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  if (from.has_errorcontext()) {
    mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(from.errorcontext());
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
}

void ServiceDiscoveryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDiscoveryResponse::CopyFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscoveryResponse::IsInitialized() const {
  return true;
}

void ServiceDiscoveryResponse::Swap(ServiceDiscoveryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceDiscoveryResponse::InternalSwap(ServiceDiscoveryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&servers_)->InternalSwap(CastToBase(&other->servers_));
  swap(errorcontext_, other->errorcontext_);
  swap(issuccess_, other->issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscoveryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
class ServerInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kIpFieldNumber;
const int ServerInfo::kPortFieldNumber;
const int ServerInfo::kIpTypeFieldNumber;
const int ServerInfo::kSiteTypeFieldNumber;
const int ServerInfo::kSiteNameFieldNumber;
const int ServerInfo::kIpVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  sitename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sitename().size() > 0) {
    sitename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sitename_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipversion_) -
    reinterpret_cast<char*>(&port_)) + sizeof(ipversion_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfo_ServiceDiscovery_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sitename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipversion_) -
      reinterpret_cast<char*>(&port_)) + sizeof(ipversion_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sitename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfo& ServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfo_ServiceDiscovery_2eproto.base);
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sitename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipversion_) -
      reinterpret_cast<char*>(&port_)) + sizeof(ipversion_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "com.htsc.mdc.insight.model.ServerInfo.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ipType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          iptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 siteType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sitetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string siteName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sitename(), ptr, ctx, "com.htsc.mdc.insight.model.ServerInfo.siteName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ipVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ipversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ServerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ServerInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ipType = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &iptype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 siteType = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string siteName = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sitename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sitename().data(), static_cast<int>(this->sitename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ServerInfo.siteName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ipVersion = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServerInfo.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 ipType = 3;
  if (this->iptype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->iptype(), output);
  }

  // int32 siteType = 4;
  if (this->sitetype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->sitetype(), output);
  }

  // string siteName = 5;
  if (this->sitename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sitename().data(), static_cast<int>(this->sitename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServerInfo.siteName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sitename(), output);
  }

  // int32 ipVersion = 6;
  if (this->ipversion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->ipversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ServerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServerInfo.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 ipType = 3;
  if (this->iptype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->iptype(), target);
  }

  // int32 siteType = 4;
  if (this->sitetype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->sitetype(), target);
  }

  // string siteName = 5;
  if (this->sitename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sitename().data(), static_cast<int>(this->sitename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ServerInfo.siteName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->sitename(), target);
  }

  // int32 ipVersion = 6;
  if (this->ipversion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->ipversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string siteName = 5;
  if (this->sitename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sitename());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 ipType = 3;
  if (this->iptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->iptype());
  }

  // int32 siteType = 4;
  if (this->sitetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sitetype());
  }

  // int32 ipVersion = 6;
  if (this->ipversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ipversion());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.sitename().size() > 0) {

    sitename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sitename_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.iptype() != 0) {
    set_iptype(from.iptype());
  }
  if (from.sitetype() != 0) {
    set_sitetype(from.sitetype());
  }
  if (from.ipversion() != 0) {
    set_ipversion(from.ipversion());
  }
}

void ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sitename_.Swap(&other->sitename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(iptype_, other->iptype_);
  swap(sitetype_, other->sitetype_);
  swap(ipversion_, other->ipversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ServerInfo* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ServerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
