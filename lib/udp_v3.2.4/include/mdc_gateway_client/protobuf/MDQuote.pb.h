// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDQuote_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDCashBondQuote;
class MDCashBondQuoteDefaultTypeInternal;
extern MDCashBondQuoteDefaultTypeInternal _MDCashBondQuote_default_instance_;
class MDQuote;
class MDQuoteDefaultTypeInternal;
extern MDQuoteDefaultTypeInternal _MDQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDCashBondQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCashBondQuote>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQuote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDQuote) */ {
 public:
  MDQuote();
  virtual ~MDQuote();

  MDQuote(const MDQuote& from);
  MDQuote(MDQuote&& from) noexcept
    : MDQuote() {
    *this = ::std::move(from);
  }

  inline MDQuote& operator=(const MDQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDQuote& operator=(MDQuote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDQuote* internal_default_instance() {
    return reinterpret_cast<const MDQuote*>(
               &_MDQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDQuote* other);
  friend void swap(MDQuote& a, MDQuote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDQuote* New() const final {
    return CreateMaybeMessage<MDQuote>(nullptr);
  }

  MDQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDQuote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDQuote& from);
  void MergeFrom(const MDQuote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDQuote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDQuote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDQuote_2eproto);
    return ::descriptor_table_MDQuote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
  int mdcashbondquotes_size() const;
  void clear_mdcashbondquotes();
  static const int kMDCashBondQuotesFieldNumber = 18;
  ::com::htsc::mdc::insight::model::MDCashBondQuote* mutable_mdcashbondquotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >*
      mutable_mdcashbondquotes();
  const ::com::htsc::mdc::insight::model::MDCashBondQuote& mdcashbondquotes(int index) const;
  ::com::htsc::mdc::insight::model::MDCashBondQuote* add_mdcashbondquotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >&
      mdcashbondquotes() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 5;
  const std::string& tradingphasecode() const;
  void set_tradingphasecode(const std::string& value);
  void set_tradingphasecode(std::string&& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  std::string* mutable_tradingphasecode();
  std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);

  // string MarketIndicator = 15;
  void clear_marketindicator();
  static const int kMarketIndicatorFieldNumber = 15;
  const std::string& marketindicator() const;
  void set_marketindicator(const std::string& value);
  void set_marketindicator(std::string&& value);
  void set_marketindicator(const char* value);
  void set_marketindicator(const char* value, size_t size);
  std::string* mutable_marketindicator();
  std::string* release_marketindicator();
  void set_allocated_marketindicator(std::string* marketindicator);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int32 ExchangeDate = 8;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate() const;
  void set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ExchangeTime = 9;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime() const;
  void set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 MaxPx = 10;
  void clear_maxpx();
  static const int kMaxPxFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 maxpx() const;
  void set_maxpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MinPx = 11;
  void clear_minpx();
  static const int kMinPxFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 minpx() const;
  void set_minpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ApplSeqNum = 13;
  void clear_applseqnum();
  static const int kApplSeqNumFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 applseqnum() const;
  void set_applseqnum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ChannelNo = 12;
  void clear_channelno();
  static const int kChannelNoFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 channelno() const;
  void set_channelno(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDBookType = 14;
  void clear_mdbooktype();
  static const int kMDBookTypeFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 mdbooktype() const;
  void set_mdbooktype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MarketDepth = 16;
  void clear_marketdepth();
  static const int kMarketDepthFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int32 marketdepth() const;
  void set_marketdepth(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDSubBookType = 17;
  void clear_mdsubbooktype();
  static const int kMDSubBookTypeFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int32 mdsubbooktype() const;
  void set_mdsubbooktype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 DataMultiplePowerOf10 = 19;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDQuote)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote > mdcashbondquotes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 minpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 applseqnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 channelno_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdbooktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 marketdepth_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdsubbooktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDQuote_2eproto;
};
// -------------------------------------------------------------------

class MDCashBondQuote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCashBondQuote) */ {
 public:
  MDCashBondQuote();
  virtual ~MDCashBondQuote();

  MDCashBondQuote(const MDCashBondQuote& from);
  MDCashBondQuote(MDCashBondQuote&& from) noexcept
    : MDCashBondQuote() {
    *this = ::std::move(from);
  }

  inline MDCashBondQuote& operator=(const MDCashBondQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCashBondQuote& operator=(MDCashBondQuote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDCashBondQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDCashBondQuote* internal_default_instance() {
    return reinterpret_cast<const MDCashBondQuote*>(
               &_MDCashBondQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MDCashBondQuote* other);
  friend void swap(MDCashBondQuote& a, MDCashBondQuote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDCashBondQuote* New() const final {
    return CreateMaybeMessage<MDCashBondQuote>(nullptr);
  }

  MDCashBondQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDCashBondQuote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDCashBondQuote& from);
  void MergeFrom(const MDCashBondQuote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCashBondQuote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCashBondQuote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDQuote_2eproto);
    return ::descriptor_table_MDQuote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string QuoteID = 4;
  void clear_quoteid();
  static const int kQuoteIDFieldNumber = 4;
  const std::string& quoteid() const;
  void set_quoteid(const std::string& value);
  void set_quoteid(std::string&& value);
  void set_quoteid(const char* value);
  void set_quoteid(const char* value, size_t size);
  std::string* mutable_quoteid();
  std::string* release_quoteid();
  void set_allocated_quoteid(std::string* quoteid);

  // string SettlType = 11;
  void clear_settltype();
  static const int kSettlTypeFieldNumber = 11;
  const std::string& settltype() const;
  void set_settltype(const std::string& value);
  void set_settltype(std::string&& value);
  void set_settltype(const char* value);
  void set_settltype(const char* value, size_t size);
  std::string* mutable_settltype();
  std::string* release_settltype();
  void set_allocated_settltype(std::string* settltype);

  // string SettlCurrency = 13;
  void clear_settlcurrency();
  static const int kSettlCurrencyFieldNumber = 13;
  const std::string& settlcurrency() const;
  void set_settlcurrency(const std::string& value);
  void set_settlcurrency(std::string&& value);
  void set_settlcurrency(const char* value);
  void set_settlcurrency(const char* value, size_t size);
  std::string* mutable_settlcurrency();
  std::string* release_settlcurrency();
  void set_allocated_settlcurrency(std::string* settlcurrency);

  // string TraderCode = 16;
  void clear_tradercode();
  static const int kTraderCodeFieldNumber = 16;
  const std::string& tradercode() const;
  void set_tradercode(const std::string& value);
  void set_tradercode(std::string&& value);
  void set_tradercode(const char* value);
  void set_tradercode(const char* value, size_t size);
  std::string* mutable_tradercode();
  std::string* release_tradercode();
  void set_allocated_tradercode(std::string* tradercode);

  // string TraderAccountID = 19;
  void clear_traderaccountid();
  static const int kTraderAccountIDFieldNumber = 19;
  const std::string& traderaccountid() const;
  void set_traderaccountid(const std::string& value);
  void set_traderaccountid(std::string&& value);
  void set_traderaccountid(const char* value);
  void set_traderaccountid(const char* value, size_t size);
  std::string* mutable_traderaccountid();
  std::string* release_traderaccountid();
  void set_allocated_traderaccountid(std::string* traderaccountid);

  // int32 QuoteType = 1;
  void clear_quotetype();
  static const int kQuoteTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 quotetype() const;
  void set_quotetype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Side = 2;
  void clear_side();
  static const int kSideFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 side() const;
  void set_side(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 PriceLevel = 3;
  void clear_pricelevel();
  static const int kPriceLevelFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 pricelevel() const;
  void set_pricelevel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 QuoteDate = 5;
  void clear_quotedate();
  static const int kQuoteDateFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 quotedate() const;
  void set_quotedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 CleanPrice = 7;
  void clear_cleanprice();
  static const int kCleanPriceFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 cleanprice() const;
  void set_cleanprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 DirtyPrice = 8;
  void clear_dirtyprice();
  static const int kDirtyPriceFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 dirtyprice() const;
  void set_dirtyprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 QuoteTime = 6;
  void clear_quotetime();
  static const int kQuoteTimeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 quotetime() const;
  void set_quotetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ClearingMethod = 10;
  void clear_clearingmethod();
  static const int kClearingMethodFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 clearingmethod() const;
  void set_clearingmethod(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 TotalFaceValue = 9;
  void clear_totalfacevalue();
  static const int kTotalFaceValueFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 totalfacevalue() const;
  void set_totalfacevalue(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 SettlDate = 12;
  void clear_settldate();
  static const int kSettlDateFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 settldate() const;
  void set_settldate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 PartyRole = 15;
  void clear_partyrole();
  static const int kPartyRoleFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 partyrole() const;
  void set_partyrole(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 SettlCurrFxRate = 14;
  void clear_settlcurrfxrate();
  static const int kSettlCurrFxRateFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 settlcurrfxrate() const;
  void set_settlcurrfxrate(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 MaturityYield = 17;
  void clear_maturityyield();
  static const int kMaturityYieldFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int64 maturityyield() const;
  void set_maturityyield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 DeliveryType = 18;
  void clear_deliverytype();
  static const int kDeliveryTypeFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 deliverytype() const;
  void set_deliverytype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCashBondQuote)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoteid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settltype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settlcurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradercode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traderaccountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 quotetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 side_;
  ::PROTOBUF_NAMESPACE_ID::int32 pricelevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 quotedate_;
  ::PROTOBUF_NAMESPACE_ID::int64 cleanprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 dirtyprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 quotetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 clearingmethod_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalfacevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 settldate_;
  ::PROTOBUF_NAMESPACE_ID::int32 partyrole_;
  ::PROTOBUF_NAMESPACE_ID::int64 settlcurrfxrate_;
  ::PROTOBUF_NAMESPACE_ID::int64 maturityyield_;
  ::PROTOBUF_NAMESPACE_ID::int32 deliverytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDQuote

// string HTSCSecurityID = 1;
inline void MDQuote::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void MDQuote::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}
inline void MDQuote::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}
inline void MDQuote::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}
inline void MDQuote::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}
inline std::string* MDQuote::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDQuote::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDDate)
  return mddate_;
}
inline void MDQuote::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDQuote::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDTime)
  return mdtime_;
}
inline void MDQuote::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDQuote::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.DataTimestamp)
  return datatimestamp_;
}
inline void MDQuote::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDQuote::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDQuote::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  return tradingphasecode_.GetNoArena();
}
inline void MDQuote::set_tradingphasecode(const std::string& value) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}
inline void MDQuote::set_tradingphasecode(std::string&& value) {
  
  tradingphasecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}
inline void MDQuote::set_tradingphasecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}
inline void MDQuote::set_tradingphasecode(const char* value, size_t size) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}
inline std::string* MDQuote::mutable_tradingphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDQuote::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  
  return tradingphasecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDQuote::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  tradingphasecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDQuote::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void MDQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDQuote::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void MDQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.securityType)
}

// int32 ExchangeDate = 8;
inline void MDQuote::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ExchangeDate)
  return exchangedate_;
}
inline void MDQuote::set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ExchangeDate)
}

// int32 ExchangeTime = 9;
inline void MDQuote::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ExchangeTime)
  return exchangetime_;
}
inline void MDQuote::set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ExchangeTime)
}

// int64 MaxPx = 10;
inline void MDQuote::clear_maxpx() {
  maxpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDQuote::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MaxPx)
  return maxpx_;
}
inline void MDQuote::set_maxpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MaxPx)
}

// int64 MinPx = 11;
inline void MDQuote::clear_minpx() {
  minpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDQuote::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MinPx)
  return minpx_;
}
inline void MDQuote::set_minpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MinPx)
}

// int32 ChannelNo = 12;
inline void MDQuote::clear_channelno() {
  channelno_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ChannelNo)
  return channelno_;
}
inline void MDQuote::set_channelno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channelno_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ChannelNo)
}

// int64 ApplSeqNum = 13;
inline void MDQuote::clear_applseqnum() {
  applseqnum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDQuote::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ApplSeqNum)
  return applseqnum_;
}
inline void MDQuote::set_applseqnum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  applseqnum_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ApplSeqNum)
}

// int32 MDBookType = 14;
inline void MDQuote::clear_mdbooktype() {
  mdbooktype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::mdbooktype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDBookType)
  return mdbooktype_;
}
inline void MDQuote::set_mdbooktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdbooktype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDBookType)
}

// string MarketIndicator = 15;
inline void MDQuote::clear_marketindicator() {
  marketindicator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDQuote::marketindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  return marketindicator_.GetNoArena();
}
inline void MDQuote::set_marketindicator(const std::string& value) {
  
  marketindicator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}
inline void MDQuote::set_marketindicator(std::string&& value) {
  
  marketindicator_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}
inline void MDQuote::set_marketindicator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marketindicator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}
inline void MDQuote::set_marketindicator(const char* value, size_t size) {
  
  marketindicator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}
inline std::string* MDQuote::mutable_marketindicator() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  return marketindicator_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDQuote::release_marketindicator() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  
  return marketindicator_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDQuote::set_allocated_marketindicator(std::string* marketindicator) {
  if (marketindicator != nullptr) {
    
  } else {
    
  }
  marketindicator_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketindicator);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}

// int32 MarketDepth = 16;
inline void MDQuote::clear_marketdepth() {
  marketdepth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::marketdepth() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MarketDepth)
  return marketdepth_;
}
inline void MDQuote::set_marketdepth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  marketdepth_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MarketDepth)
}

// int32 MDSubBookType = 17;
inline void MDQuote::clear_mdsubbooktype() {
  mdsubbooktype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::mdsubbooktype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDSubBookType)
  return mdsubbooktype_;
}
inline void MDQuote::set_mdsubbooktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdsubbooktype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDSubBookType)
}

// repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
inline int MDQuote::mdcashbondquotes_size() const {
  return mdcashbondquotes_.size();
}
inline void MDQuote::clear_mdcashbondquotes() {
  mdcashbondquotes_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDCashBondQuote* MDQuote::mutable_mdcashbondquotes(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return mdcashbondquotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >*
MDQuote::mutable_mdcashbondquotes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return &mdcashbondquotes_;
}
inline const ::com::htsc::mdc::insight::model::MDCashBondQuote& MDQuote::mdcashbondquotes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return mdcashbondquotes_.Get(index);
}
inline ::com::htsc::mdc::insight::model::MDCashBondQuote* MDQuote::add_mdcashbondquotes() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return mdcashbondquotes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >&
MDQuote::mdcashbondquotes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return mdcashbondquotes_;
}

// int32 DataMultiplePowerOf10 = 19;
inline void MDQuote::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void MDQuote::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// MDCashBondQuote

// int32 QuoteType = 1;
inline void MDCashBondQuote::clear_quotetype() {
  quotetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::quotetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteType)
  return quotetype_;
}
inline void MDCashBondQuote::set_quotetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quotetype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteType)
}

// int32 Side = 2;
inline void MDCashBondQuote::clear_side() {
  side_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::side() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.Side)
  return side_;
}
inline void MDCashBondQuote::set_side(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.Side)
}

// int32 PriceLevel = 3;
inline void MDCashBondQuote::clear_pricelevel() {
  pricelevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::pricelevel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.PriceLevel)
  return pricelevel_;
}
inline void MDCashBondQuote::set_pricelevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pricelevel_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.PriceLevel)
}

// string QuoteID = 4;
inline void MDCashBondQuote::clear_quoteid() {
  quoteid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDCashBondQuote::quoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  return quoteid_.GetNoArena();
}
inline void MDCashBondQuote::set_quoteid(const std::string& value) {
  
  quoteid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}
inline void MDCashBondQuote::set_quoteid(std::string&& value) {
  
  quoteid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}
inline void MDCashBondQuote::set_quoteid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  quoteid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}
inline void MDCashBondQuote::set_quoteid(const char* value, size_t size) {
  
  quoteid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}
inline std::string* MDCashBondQuote::mutable_quoteid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  return quoteid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDCashBondQuote::release_quoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  
  return quoteid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDCashBondQuote::set_allocated_quoteid(std::string* quoteid) {
  if (quoteid != nullptr) {
    
  } else {
    
  }
  quoteid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quoteid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}

// int32 QuoteDate = 5;
inline void MDCashBondQuote::clear_quotedate() {
  quotedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::quotedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteDate)
  return quotedate_;
}
inline void MDCashBondQuote::set_quotedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quotedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteDate)
}

// int32 QuoteTime = 6;
inline void MDCashBondQuote::clear_quotetime() {
  quotetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::quotetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteTime)
  return quotetime_;
}
inline void MDCashBondQuote::set_quotetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quotetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteTime)
}

// int64 CleanPrice = 7;
inline void MDCashBondQuote::clear_cleanprice() {
  cleanprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDCashBondQuote::cleanprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.CleanPrice)
  return cleanprice_;
}
inline void MDCashBondQuote::set_cleanprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cleanprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.CleanPrice)
}

// int64 DirtyPrice = 8;
inline void MDCashBondQuote::clear_dirtyprice() {
  dirtyprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDCashBondQuote::dirtyprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.DirtyPrice)
  return dirtyprice_;
}
inline void MDCashBondQuote::set_dirtyprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dirtyprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.DirtyPrice)
}

// int64 TotalFaceValue = 9;
inline void MDCashBondQuote::clear_totalfacevalue() {
  totalfacevalue_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDCashBondQuote::totalfacevalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TotalFaceValue)
  return totalfacevalue_;
}
inline void MDCashBondQuote::set_totalfacevalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalfacevalue_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TotalFaceValue)
}

// int32 ClearingMethod = 10;
inline void MDCashBondQuote::clear_clearingmethod() {
  clearingmethod_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::clearingmethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.ClearingMethod)
  return clearingmethod_;
}
inline void MDCashBondQuote::set_clearingmethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clearingmethod_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.ClearingMethod)
}

// string SettlType = 11;
inline void MDCashBondQuote::clear_settltype() {
  settltype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDCashBondQuote::settltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  return settltype_.GetNoArena();
}
inline void MDCashBondQuote::set_settltype(const std::string& value) {
  
  settltype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}
inline void MDCashBondQuote::set_settltype(std::string&& value) {
  
  settltype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}
inline void MDCashBondQuote::set_settltype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  settltype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}
inline void MDCashBondQuote::set_settltype(const char* value, size_t size) {
  
  settltype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}
inline std::string* MDCashBondQuote::mutable_settltype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  return settltype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDCashBondQuote::release_settltype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  
  return settltype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDCashBondQuote::set_allocated_settltype(std::string* settltype) {
  if (settltype != nullptr) {
    
  } else {
    
  }
  settltype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settltype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}

// int32 SettlDate = 12;
inline void MDCashBondQuote::clear_settldate() {
  settldate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::settldate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlDate)
  return settldate_;
}
inline void MDCashBondQuote::set_settldate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settldate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlDate)
}

// string SettlCurrency = 13;
inline void MDCashBondQuote::clear_settlcurrency() {
  settlcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDCashBondQuote::settlcurrency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  return settlcurrency_.GetNoArena();
}
inline void MDCashBondQuote::set_settlcurrency(const std::string& value) {
  
  settlcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}
inline void MDCashBondQuote::set_settlcurrency(std::string&& value) {
  
  settlcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}
inline void MDCashBondQuote::set_settlcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  settlcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}
inline void MDCashBondQuote::set_settlcurrency(const char* value, size_t size) {
  
  settlcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}
inline std::string* MDCashBondQuote::mutable_settlcurrency() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  return settlcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDCashBondQuote::release_settlcurrency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  
  return settlcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDCashBondQuote::set_allocated_settlcurrency(std::string* settlcurrency) {
  if (settlcurrency != nullptr) {
    
  } else {
    
  }
  settlcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settlcurrency);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}

// int64 SettlCurrFxRate = 14;
inline void MDCashBondQuote::clear_settlcurrfxrate() {
  settlcurrfxrate_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDCashBondQuote::settlcurrfxrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrFxRate)
  return settlcurrfxrate_;
}
inline void MDCashBondQuote::set_settlcurrfxrate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  settlcurrfxrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrFxRate)
}

// int32 PartyRole = 15;
inline void MDCashBondQuote::clear_partyrole() {
  partyrole_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::partyrole() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.PartyRole)
  return partyrole_;
}
inline void MDCashBondQuote::set_partyrole(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partyrole_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.PartyRole)
}

// string TraderCode = 16;
inline void MDCashBondQuote::clear_tradercode() {
  tradercode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDCashBondQuote::tradercode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  return tradercode_.GetNoArena();
}
inline void MDCashBondQuote::set_tradercode(const std::string& value) {
  
  tradercode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}
inline void MDCashBondQuote::set_tradercode(std::string&& value) {
  
  tradercode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}
inline void MDCashBondQuote::set_tradercode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradercode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}
inline void MDCashBondQuote::set_tradercode(const char* value, size_t size) {
  
  tradercode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}
inline std::string* MDCashBondQuote::mutable_tradercode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  return tradercode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDCashBondQuote::release_tradercode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  
  return tradercode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDCashBondQuote::set_allocated_tradercode(std::string* tradercode) {
  if (tradercode != nullptr) {
    
  } else {
    
  }
  tradercode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradercode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}

// int64 MaturityYield = 17;
inline void MDCashBondQuote::clear_maturityyield() {
  maturityyield_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDCashBondQuote::maturityyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.MaturityYield)
  return maturityyield_;
}
inline void MDCashBondQuote::set_maturityyield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maturityyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.MaturityYield)
}

// int32 DeliveryType = 18;
inline void MDCashBondQuote::clear_deliverytype() {
  deliverytype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDCashBondQuote::deliverytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.DeliveryType)
  return deliverytype_;
}
inline void MDCashBondQuote::set_deliverytype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deliverytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.DeliveryType)
}

// string TraderAccountID = 19;
inline void MDCashBondQuote::clear_traderaccountid() {
  traderaccountid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDCashBondQuote::traderaccountid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  return traderaccountid_.GetNoArena();
}
inline void MDCashBondQuote::set_traderaccountid(const std::string& value) {
  
  traderaccountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}
inline void MDCashBondQuote::set_traderaccountid(std::string&& value) {
  
  traderaccountid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}
inline void MDCashBondQuote::set_traderaccountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  traderaccountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}
inline void MDCashBondQuote::set_traderaccountid(const char* value, size_t size) {
  
  traderaccountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}
inline std::string* MDCashBondQuote::mutable_traderaccountid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  return traderaccountid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDCashBondQuote::release_traderaccountid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  
  return traderaccountid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDCashBondQuote::set_allocated_traderaccountid(std::string* traderaccountid) {
  if (traderaccountid != nullptr) {
    
  } else {
    
  }
  traderaccountid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), traderaccountid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDQuote_2eproto
