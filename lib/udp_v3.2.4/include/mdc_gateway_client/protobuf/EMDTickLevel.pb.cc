// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EMDTickLevel.proto

#include "EMDTickLevel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_EMDTickLevel_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_EMDTickLevel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_EMDTickLevel_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_EMDTickLevel_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_EMDTickLevel_2eproto[] =
  "\n\022EMDTickLevel.proto\022\032com.htsc.mdc.insig"
  "ht.model*\214\001\n\014EMDTickLevel\022\026\n\022DEFAULT_TIC"
  "K_LEVEL\020\000\022\023\n\017TICK_LEVEL_ZERO\020\001\022\022\n\016TICK_L"
  "EVEL_ONE\020\002\022\023\n\017TICK_LEVEL_FIVE\020\003\022\022\n\016TICK_"
  "LEVEL_TEN\020\004\022\022\n\016TICK_LEVEL_ALL\020\005B5\n\032com.h"
  "tsc.mdc.insight.modelB\022EMDTickLevelProto"
  "sH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_EMDTickLevel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_EMDTickLevel_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_EMDTickLevel_2eproto_once;
static bool descriptor_table_EMDTickLevel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EMDTickLevel_2eproto = {
  &descriptor_table_EMDTickLevel_2eproto_initialized, descriptor_table_protodef_EMDTickLevel_2eproto, "EMDTickLevel.proto", 254,
  &descriptor_table_EMDTickLevel_2eproto_once, descriptor_table_EMDTickLevel_2eproto_sccs, descriptor_table_EMDTickLevel_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_EMDTickLevel_2eproto::offsets,
  file_level_metadata_EMDTickLevel_2eproto, 0, file_level_enum_descriptors_EMDTickLevel_2eproto, file_level_service_descriptors_EMDTickLevel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_EMDTickLevel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_EMDTickLevel_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMDTickLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_EMDTickLevel_2eproto);
  return file_level_enum_descriptors_EMDTickLevel_2eproto[0];
}
bool EMDTickLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
