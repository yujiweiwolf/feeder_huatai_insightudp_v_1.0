// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDPlayback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDPlayback_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDPlayback_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "EMarketDataType.pb.h"
#include "MarketData.pb.h"
#include "InsightErrorContext.pb.h"
#include "SecuritySourceType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDPlayback_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDPlayback_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class PlaybackControlRequest;
class PlaybackControlRequestDefaultTypeInternal;
extern PlaybackControlRequestDefaultTypeInternal _PlaybackControlRequest_default_instance_;
class PlaybackControlResponse;
class PlaybackControlResponseDefaultTypeInternal;
extern PlaybackControlResponseDefaultTypeInternal _PlaybackControlResponse_default_instance_;
class PlaybackPayload;
class PlaybackPayloadDefaultTypeInternal;
extern PlaybackPayloadDefaultTypeInternal _PlaybackPayload_default_instance_;
class PlaybackRequest;
class PlaybackRequestDefaultTypeInternal;
extern PlaybackRequestDefaultTypeInternal _PlaybackRequest_default_instance_;
class PlaybackResponse;
class PlaybackResponseDefaultTypeInternal;
extern PlaybackResponseDefaultTypeInternal _PlaybackResponse_default_instance_;
class PlaybackStatus;
class PlaybackStatusDefaultTypeInternal;
extern PlaybackStatusDefaultTypeInternal _PlaybackStatus_default_instance_;
class PlaybackStatusRequest;
class PlaybackStatusRequestDefaultTypeInternal;
extern PlaybackStatusRequestDefaultTypeInternal _PlaybackStatusRequest_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::PlaybackControlRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackControlRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackControlResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackControlResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackPayload* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackPayload>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackStatus* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackStatus>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackStatusRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackStatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

enum EPlaybackExrightsType : int {
  DEFAULT_EXRIGHTS_TYPE = 0,
  NO_EXRIGHTS = 10,
  FORWARD_EXRIGHTS = 11,
  BACKWARD_EXRIGHTS = 12,
  EPlaybackExrightsType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EPlaybackExrightsType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EPlaybackExrightsType_IsValid(int value);
constexpr EPlaybackExrightsType EPlaybackExrightsType_MIN = DEFAULT_EXRIGHTS_TYPE;
constexpr EPlaybackExrightsType EPlaybackExrightsType_MAX = BACKWARD_EXRIGHTS;
constexpr int EPlaybackExrightsType_ARRAYSIZE = EPlaybackExrightsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackExrightsType_descriptor();
template<typename T>
inline const std::string& EPlaybackExrightsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlaybackExrightsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlaybackExrightsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlaybackExrightsType_descriptor(), enum_t_value);
}
inline bool EPlaybackExrightsType_Parse(
    const std::string& name, EPlaybackExrightsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlaybackExrightsType>(
    EPlaybackExrightsType_descriptor(), name, value);
}
enum EPlaybackTaskControlType : int {
  DEFAULT_CONTROL_TYPE = 0,
  CANCEL_TASK = 1,
  SET_PLAYBACK_RATE = 2,
  EPlaybackTaskControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EPlaybackTaskControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EPlaybackTaskControlType_IsValid(int value);
constexpr EPlaybackTaskControlType EPlaybackTaskControlType_MIN = DEFAULT_CONTROL_TYPE;
constexpr EPlaybackTaskControlType EPlaybackTaskControlType_MAX = SET_PLAYBACK_RATE;
constexpr int EPlaybackTaskControlType_ARRAYSIZE = EPlaybackTaskControlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackTaskControlType_descriptor();
template<typename T>
inline const std::string& EPlaybackTaskControlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlaybackTaskControlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlaybackTaskControlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlaybackTaskControlType_descriptor(), enum_t_value);
}
inline bool EPlaybackTaskControlType_Parse(
    const std::string& name, EPlaybackTaskControlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlaybackTaskControlType>(
    EPlaybackTaskControlType_descriptor(), name, value);
}
enum EPlaybackTaskStatus : int {
  DEFAULT_STATUS = 0,
  INITIALIZING = 11,
  PREPARING = 12,
  PREPARED = 13,
  RUNNING = 14,
  APPENDING = 15,
  CANCELED = 16,
  COMPLETED = 17,
  FAILED = 18,
  EPlaybackTaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EPlaybackTaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EPlaybackTaskStatus_IsValid(int value);
constexpr EPlaybackTaskStatus EPlaybackTaskStatus_MIN = DEFAULT_STATUS;
constexpr EPlaybackTaskStatus EPlaybackTaskStatus_MAX = FAILED;
constexpr int EPlaybackTaskStatus_ARRAYSIZE = EPlaybackTaskStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackTaskStatus_descriptor();
template<typename T>
inline const std::string& EPlaybackTaskStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlaybackTaskStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlaybackTaskStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlaybackTaskStatus_descriptor(), enum_t_value);
}
inline bool EPlaybackTaskStatus_Parse(
    const std::string& name, EPlaybackTaskStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlaybackTaskStatus>(
    EPlaybackTaskStatus_descriptor(), name, value);
}
// ===================================================================

class PlaybackRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackRequest) */ {
 public:
  PlaybackRequest();
  virtual ~PlaybackRequest();

  PlaybackRequest(const PlaybackRequest& from);
  PlaybackRequest(PlaybackRequest&& from) noexcept
    : PlaybackRequest() {
    *this = ::std::move(from);
  }

  inline PlaybackRequest& operator=(const PlaybackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackRequest& operator=(PlaybackRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaybackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackRequest* internal_default_instance() {
    return reinterpret_cast<const PlaybackRequest*>(
               &_PlaybackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlaybackRequest* other);
  friend void swap(PlaybackRequest& a, PlaybackRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackRequest* New() const final {
    return CreateMaybeMessage<PlaybackRequest>(nullptr);
  }

  PlaybackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaybackRequest& from);
  void MergeFrom(const PlaybackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDPlayback_2eproto);
    return ::descriptor_table_MDPlayback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string htscSecurityIDs = 2;
  int htscsecurityids_size() const;
  void clear_htscsecurityids();
  static const int kHtscSecurityIDsFieldNumber = 2;
  const std::string& htscsecurityids(int index) const;
  std::string* mutable_htscsecurityids(int index);
  void set_htscsecurityids(int index, const std::string& value);
  void set_htscsecurityids(int index, std::string&& value);
  void set_htscsecurityids(int index, const char* value);
  void set_htscsecurityids(int index, const char* value, size_t size);
  std::string* add_htscsecurityids();
  void add_htscsecurityids(const std::string& value);
  void add_htscsecurityids(std::string&& value);
  void add_htscsecurityids(const char* value);
  void add_htscsecurityids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& htscsecurityids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_htscsecurityids();

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
  int securitysourcetype_size() const;
  void clear_securitysourcetype();
  static const int kSecuritySourceTypeFieldNumber = 3;
  ::com::htsc::mdc::insight::model::SecuritySourceType* mutable_securitysourcetype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >*
      mutable_securitysourcetype();
  const ::com::htsc::mdc::insight::model::SecuritySourceType& securitysourcetype(int index) const;
  ::com::htsc::mdc::insight::model::SecuritySourceType* add_securitysourcetype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >&
      securitysourcetype() const;

  // string taskId = 1;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);

  // string startTime = 4;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);

  // string stopTime = 5;
  void clear_stoptime();
  static const int kStopTimeFieldNumber = 5;
  const std::string& stoptime() const;
  void set_stoptime(const std::string& value);
  void set_stoptime(std::string&& value);
  void set_stoptime(const char* value);
  void set_stoptime(const char* value, size_t size);
  std::string* mutable_stoptime();
  std::string* release_stoptime();
  void set_allocated_stoptime(std::string* stoptime);

  // string initialDataStartTime = 10;
  void clear_initialdatastarttime();
  static const int kInitialDataStartTimeFieldNumber = 10;
  const std::string& initialdatastarttime() const;
  void set_initialdatastarttime(const std::string& value);
  void set_initialdatastarttime(std::string&& value);
  void set_initialdatastarttime(const char* value);
  void set_initialdatastarttime(const char* value, size_t size);
  std::string* mutable_initialdatastarttime();
  std::string* release_initialdatastarttime();
  void set_allocated_initialdatastarttime(std::string* initialdatastarttime);

  // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
  void clear_replaydatatype();
  static const int kReplayDataTypeFieldNumber = 6;
  ::com::htsc::mdc::insight::model::EMarketDataType replaydatatype() const;
  void set_replaydatatype(::com::htsc::mdc::insight::model::EMarketDataType value);

  // int32 replayRate = 7;
  void clear_replayrate();
  static const int kReplayRateFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 replayrate() const;
  void set_replayrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
  void clear_exrightstype();
  static const int kExrightsTypeFieldNumber = 8;
  ::com::htsc::mdc::insight::model::EPlaybackExrightsType exrightstype() const;
  void set_exrightstype(::com::htsc::mdc::insight::model::EPlaybackExrightsType value);

  // bool isNeedInitialData = 9;
  void clear_isneedinitialdata();
  static const int kIsNeedInitialDataFieldNumber = 9;
  bool isneedinitialdata() const;
  void set_isneedinitialdata(bool value);

  // int32 replayFuncType = 11;
  void clear_replayfunctype();
  static const int kReplayFuncTypeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 replayfunctype() const;
  void set_replayfunctype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 sortType = 12;
  void clear_sorttype();
  static const int kSortTypeFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 sorttype() const;
  void set_sorttype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> htscsecurityids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType > securitysourcetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stoptime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initialdatastarttime_;
  int replaydatatype_;
  ::PROTOBUF_NAMESPACE_ID::int32 replayrate_;
  int exrightstype_;
  bool isneedinitialdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 replayfunctype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sorttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackResponse) */ {
 public:
  PlaybackResponse();
  virtual ~PlaybackResponse();

  PlaybackResponse(const PlaybackResponse& from);
  PlaybackResponse(PlaybackResponse&& from) noexcept
    : PlaybackResponse() {
    *this = ::std::move(from);
  }

  inline PlaybackResponse& operator=(const PlaybackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackResponse& operator=(PlaybackResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaybackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackResponse* internal_default_instance() {
    return reinterpret_cast<const PlaybackResponse*>(
               &_PlaybackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PlaybackResponse* other);
  friend void swap(PlaybackResponse& a, PlaybackResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackResponse* New() const final {
    return CreateMaybeMessage<PlaybackResponse>(nullptr);
  }

  PlaybackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaybackResponse& from);
  void MergeFrom(const PlaybackResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDPlayback_2eproto);
    return ::descriptor_table_MDPlayback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string taskId = 1;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  bool has_errorcontext() const;
  void clear_errorcontext();
  static const int kErrorContextFieldNumber = 3;
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);

  // bool isSuccess = 2;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 2;
  bool issuccess() const;
  void set_issuccess(bool value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
  bool issuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackControlRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackControlRequest) */ {
 public:
  PlaybackControlRequest();
  virtual ~PlaybackControlRequest();

  PlaybackControlRequest(const PlaybackControlRequest& from);
  PlaybackControlRequest(PlaybackControlRequest&& from) noexcept
    : PlaybackControlRequest() {
    *this = ::std::move(from);
  }

  inline PlaybackControlRequest& operator=(const PlaybackControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackControlRequest& operator=(PlaybackControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaybackControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackControlRequest* internal_default_instance() {
    return reinterpret_cast<const PlaybackControlRequest*>(
               &_PlaybackControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlaybackControlRequest* other);
  friend void swap(PlaybackControlRequest& a, PlaybackControlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackControlRequest* New() const final {
    return CreateMaybeMessage<PlaybackControlRequest>(nullptr);
  }

  PlaybackControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaybackControlRequest& from);
  void MergeFrom(const PlaybackControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackControlRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDPlayback_2eproto);
    return ::descriptor_table_MDPlayback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string taskId = 1;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);

  // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
  void clear_controltype();
  static const int kControlTypeFieldNumber = 2;
  ::com::htsc::mdc::insight::model::EPlaybackTaskControlType controltype() const;
  void set_controltype(::com::htsc::mdc::insight::model::EPlaybackTaskControlType value);

  // int32 replayRate = 3;
  void clear_replayrate();
  static const int kReplayRateFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 replayrate() const;
  void set_replayrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackControlRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  int controltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 replayrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackControlResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackControlResponse) */ {
 public:
  PlaybackControlResponse();
  virtual ~PlaybackControlResponse();

  PlaybackControlResponse(const PlaybackControlResponse& from);
  PlaybackControlResponse(PlaybackControlResponse&& from) noexcept
    : PlaybackControlResponse() {
    *this = ::std::move(from);
  }

  inline PlaybackControlResponse& operator=(const PlaybackControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackControlResponse& operator=(PlaybackControlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaybackControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackControlResponse* internal_default_instance() {
    return reinterpret_cast<const PlaybackControlResponse*>(
               &_PlaybackControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PlaybackControlResponse* other);
  friend void swap(PlaybackControlResponse& a, PlaybackControlResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackControlResponse* New() const final {
    return CreateMaybeMessage<PlaybackControlResponse>(nullptr);
  }

  PlaybackControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackControlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaybackControlResponse& from);
  void MergeFrom(const PlaybackControlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackControlResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDPlayback_2eproto);
    return ::descriptor_table_MDPlayback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string taskId = 1;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  bool has_errorcontext() const;
  void clear_errorcontext();
  static const int kErrorContextFieldNumber = 3;
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);

  // bool isSuccess = 2;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 2;
  bool issuccess() const;
  void set_issuccess(bool value);

  // int32 currentReplayRate = 4;
  void clear_currentreplayrate();
  static const int kCurrentReplayRateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 currentreplayrate() const;
  void set_currentreplayrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackControlResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
  bool issuccess_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentreplayrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackStatusRequest) */ {
 public:
  PlaybackStatusRequest();
  virtual ~PlaybackStatusRequest();

  PlaybackStatusRequest(const PlaybackStatusRequest& from);
  PlaybackStatusRequest(PlaybackStatusRequest&& from) noexcept
    : PlaybackStatusRequest() {
    *this = ::std::move(from);
  }

  inline PlaybackStatusRequest& operator=(const PlaybackStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackStatusRequest& operator=(PlaybackStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaybackStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PlaybackStatusRequest*>(
               &_PlaybackStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlaybackStatusRequest* other);
  friend void swap(PlaybackStatusRequest& a, PlaybackStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackStatusRequest* New() const final {
    return CreateMaybeMessage<PlaybackStatusRequest>(nullptr);
  }

  PlaybackStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaybackStatusRequest& from);
  void MergeFrom(const PlaybackStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDPlayback_2eproto);
    return ::descriptor_table_MDPlayback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string taskId = 1;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackStatusRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackStatus) */ {
 public:
  PlaybackStatus();
  virtual ~PlaybackStatus();

  PlaybackStatus(const PlaybackStatus& from);
  PlaybackStatus(PlaybackStatus&& from) noexcept
    : PlaybackStatus() {
    *this = ::std::move(from);
  }

  inline PlaybackStatus& operator=(const PlaybackStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackStatus& operator=(PlaybackStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaybackStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackStatus* internal_default_instance() {
    return reinterpret_cast<const PlaybackStatus*>(
               &_PlaybackStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PlaybackStatus* other);
  friend void swap(PlaybackStatus& a, PlaybackStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackStatus* New() const final {
    return CreateMaybeMessage<PlaybackStatus>(nullptr);
  }

  PlaybackStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaybackStatus& from);
  void MergeFrom(const PlaybackStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDPlayback_2eproto);
    return ::descriptor_table_MDPlayback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string taskId = 1;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);

  // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
  void clear_taskstatus();
  static const int kTaskStatusFieldNumber = 2;
  ::com::htsc::mdc::insight::model::EPlaybackTaskStatus taskstatus() const;
  void set_taskstatus(::com::htsc::mdc::insight::model::EPlaybackTaskStatus value);

  // int32 replayPercent = 3;
  void clear_replaypercent();
  static const int kReplayPercentFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 replaypercent() const;
  void set_replaypercent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 currentReplayRate = 4;
  void clear_currentreplayrate();
  static const int kCurrentReplayRateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 currentreplayrate() const;
  void set_currentreplayrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackStatus)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  int taskstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 replaypercent_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentreplayrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackPayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackPayload) */ {
 public:
  PlaybackPayload();
  virtual ~PlaybackPayload();

  PlaybackPayload(const PlaybackPayload& from);
  PlaybackPayload(PlaybackPayload&& from) noexcept
    : PlaybackPayload() {
    *this = ::std::move(from);
  }

  inline PlaybackPayload& operator=(const PlaybackPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackPayload& operator=(PlaybackPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaybackPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackPayload* internal_default_instance() {
    return reinterpret_cast<const PlaybackPayload*>(
               &_PlaybackPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PlaybackPayload* other);
  friend void swap(PlaybackPayload& a, PlaybackPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackPayload* New() const final {
    return CreateMaybeMessage<PlaybackPayload>(nullptr);
  }

  PlaybackPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaybackPayload& from);
  void MergeFrom(const PlaybackPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackPayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDPlayback_2eproto);
    return ::descriptor_table_MDPlayback_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string taskId = 1;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
  bool has_marketdatastream() const;
  void clear_marketdatastream();
  static const int kMarketDataStreamFieldNumber = 2;
  const ::com::htsc::mdc::insight::model::MarketDataStream& marketdatastream() const;
  ::com::htsc::mdc::insight::model::MarketDataStream* release_marketdatastream();
  ::com::htsc::mdc::insight::model::MarketDataStream* mutable_marketdatastream();
  void set_allocated_marketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackPayload)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlaybackRequest

// string taskId = 1;
inline void PlaybackRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackRequest::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
  return taskid_.GetNoArena();
}
inline void PlaybackRequest::set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
}
inline void PlaybackRequest::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
}
inline void PlaybackRequest::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
}
inline void PlaybackRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
}
inline std::string* PlaybackRequest::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
}

// repeated string htscSecurityIDs = 2;
inline int PlaybackRequest::htscsecurityids_size() const {
  return htscsecurityids_.size();
}
inline void PlaybackRequest::clear_htscsecurityids() {
  htscsecurityids_.Clear();
}
inline const std::string& PlaybackRequest::htscsecurityids(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return htscsecurityids_.Get(index);
}
inline std::string* PlaybackRequest::mutable_htscsecurityids(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return htscsecurityids_.Mutable(index);
}
inline void PlaybackRequest::set_htscsecurityids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  htscsecurityids_.Mutable(index)->assign(value);
}
inline void PlaybackRequest::set_htscsecurityids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  htscsecurityids_.Mutable(index)->assign(std::move(value));
}
inline void PlaybackRequest::set_htscsecurityids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  htscsecurityids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::set_htscsecurityids(int index, const char* value, size_t size) {
  htscsecurityids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline std::string* PlaybackRequest::add_htscsecurityids() {
  // @@protoc_insertion_point(field_add_mutable:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return htscsecurityids_.Add();
}
inline void PlaybackRequest::add_htscsecurityids(const std::string& value) {
  htscsecurityids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::add_htscsecurityids(std::string&& value) {
  htscsecurityids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::add_htscsecurityids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  htscsecurityids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::add_htscsecurityids(const char* value, size_t size) {
  htscsecurityids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlaybackRequest::htscsecurityids() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return htscsecurityids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlaybackRequest::mutable_htscsecurityids() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return &htscsecurityids_;
}

// repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
inline int PlaybackRequest::securitysourcetype_size() const {
  return securitysourcetype_.size();
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* PlaybackRequest::mutable_securitysourcetype(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return securitysourcetype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >*
PlaybackRequest::mutable_securitysourcetype() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return &securitysourcetype_;
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& PlaybackRequest::securitysourcetype(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return securitysourcetype_.Get(index);
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* PlaybackRequest::add_securitysourcetype() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return securitysourcetype_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >&
PlaybackRequest::securitysourcetype() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return securitysourcetype_;
}

// string startTime = 4;
inline void PlaybackRequest::clear_starttime() {
  starttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackRequest::starttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
  return starttime_.GetNoArena();
}
inline void PlaybackRequest::set_starttime(const std::string& value) {
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
}
inline void PlaybackRequest::set_starttime(std::string&& value) {
  
  starttime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
}
inline void PlaybackRequest::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
}
inline void PlaybackRequest::set_starttime(const char* value, size_t size) {
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
}
inline std::string* PlaybackRequest::mutable_starttime() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
  return starttime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackRequest::release_starttime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
  
  return starttime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackRequest::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
}

// string stopTime = 5;
inline void PlaybackRequest::clear_stoptime() {
  stoptime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackRequest::stoptime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
  return stoptime_.GetNoArena();
}
inline void PlaybackRequest::set_stoptime(const std::string& value) {
  
  stoptime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
}
inline void PlaybackRequest::set_stoptime(std::string&& value) {
  
  stoptime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
}
inline void PlaybackRequest::set_stoptime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stoptime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
}
inline void PlaybackRequest::set_stoptime(const char* value, size_t size) {
  
  stoptime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
}
inline std::string* PlaybackRequest::mutable_stoptime() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
  return stoptime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackRequest::release_stoptime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
  
  return stoptime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackRequest::set_allocated_stoptime(std::string* stoptime) {
  if (stoptime != nullptr) {
    
  } else {
    
  }
  stoptime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stoptime);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
}

// .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
inline void PlaybackRequest::clear_replaydatatype() {
  replaydatatype_ = 0;
}
inline ::com::htsc::mdc::insight::model::EMarketDataType PlaybackRequest::replaydatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.replayDataType)
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(replaydatatype_);
}
inline void PlaybackRequest::set_replaydatatype(::com::htsc::mdc::insight::model::EMarketDataType value) {
  
  replaydatatype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.replayDataType)
}

// int32 replayRate = 7;
inline void PlaybackRequest::clear_replayrate() {
  replayrate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaybackRequest::replayrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.replayRate)
  return replayrate_;
}
inline void PlaybackRequest::set_replayrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replayrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.replayRate)
}

// .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
inline void PlaybackRequest::clear_exrightstype() {
  exrightstype_ = 0;
}
inline ::com::htsc::mdc::insight::model::EPlaybackExrightsType PlaybackRequest::exrightstype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.exrightsType)
  return static_cast< ::com::htsc::mdc::insight::model::EPlaybackExrightsType >(exrightstype_);
}
inline void PlaybackRequest::set_exrightstype(::com::htsc::mdc::insight::model::EPlaybackExrightsType value) {
  
  exrightstype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.exrightsType)
}

// bool isNeedInitialData = 9;
inline void PlaybackRequest::clear_isneedinitialdata() {
  isneedinitialdata_ = false;
}
inline bool PlaybackRequest::isneedinitialdata() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.isNeedInitialData)
  return isneedinitialdata_;
}
inline void PlaybackRequest::set_isneedinitialdata(bool value) {
  
  isneedinitialdata_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.isNeedInitialData)
}

// string initialDataStartTime = 10;
inline void PlaybackRequest::clear_initialdatastarttime() {
  initialdatastarttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackRequest::initialdatastarttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
  return initialdatastarttime_.GetNoArena();
}
inline void PlaybackRequest::set_initialdatastarttime(const std::string& value) {
  
  initialdatastarttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
}
inline void PlaybackRequest::set_initialdatastarttime(std::string&& value) {
  
  initialdatastarttime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
}
inline void PlaybackRequest::set_initialdatastarttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  initialdatastarttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
}
inline void PlaybackRequest::set_initialdatastarttime(const char* value, size_t size) {
  
  initialdatastarttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
}
inline std::string* PlaybackRequest::mutable_initialdatastarttime() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
  return initialdatastarttime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackRequest::release_initialdatastarttime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
  
  return initialdatastarttime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackRequest::set_allocated_initialdatastarttime(std::string* initialdatastarttime) {
  if (initialdatastarttime != nullptr) {
    
  } else {
    
  }
  initialdatastarttime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initialdatastarttime);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
}

// int32 replayFuncType = 11;
inline void PlaybackRequest::clear_replayfunctype() {
  replayfunctype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaybackRequest::replayfunctype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.replayFuncType)
  return replayfunctype_;
}
inline void PlaybackRequest::set_replayfunctype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replayfunctype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.replayFuncType)
}

// int32 sortType = 12;
inline void PlaybackRequest::clear_sorttype() {
  sorttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaybackRequest::sorttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.sortType)
  return sorttype_;
}
inline void PlaybackRequest::set_sorttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sorttype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.sortType)
}

// -------------------------------------------------------------------

// PlaybackResponse

// string taskId = 1;
inline void PlaybackResponse::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackResponse::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
  return taskid_.GetNoArena();
}
inline void PlaybackResponse::set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
}
inline void PlaybackResponse::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
}
inline void PlaybackResponse::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
}
inline void PlaybackResponse::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
}
inline std::string* PlaybackResponse::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackResponse::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackResponse::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
}

// bool isSuccess = 2;
inline void PlaybackResponse::clear_issuccess() {
  issuccess_ = false;
}
inline bool PlaybackResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackResponse.isSuccess)
  return issuccess_;
}
inline void PlaybackResponse::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
inline bool PlaybackResponse::has_errorcontext() const {
  return this != internal_default_instance() && errorcontext_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& PlaybackResponse::errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = errorcontext_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      &::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackResponse::release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = errorcontext_;
  errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackResponse::mutable_errorcontext() {
  
  if (errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaNoVirtual());
    errorcontext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
  return errorcontext_;
}
inline void PlaybackResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
}

// -------------------------------------------------------------------

// PlaybackControlRequest

// string taskId = 1;
inline void PlaybackControlRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackControlRequest::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
  return taskid_.GetNoArena();
}
inline void PlaybackControlRequest::set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
}
inline void PlaybackControlRequest::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
}
inline void PlaybackControlRequest::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
}
inline void PlaybackControlRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
}
inline std::string* PlaybackControlRequest::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackControlRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackControlRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
}

// .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
inline void PlaybackControlRequest::clear_controltype() {
  controltype_ = 0;
}
inline ::com::htsc::mdc::insight::model::EPlaybackTaskControlType PlaybackControlRequest::controltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlRequest.controlType)
  return static_cast< ::com::htsc::mdc::insight::model::EPlaybackTaskControlType >(controltype_);
}
inline void PlaybackControlRequest::set_controltype(::com::htsc::mdc::insight::model::EPlaybackTaskControlType value) {
  
  controltype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlRequest.controlType)
}

// int32 replayRate = 3;
inline void PlaybackControlRequest::clear_replayrate() {
  replayrate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaybackControlRequest::replayrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlRequest.replayRate)
  return replayrate_;
}
inline void PlaybackControlRequest::set_replayrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replayrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlRequest.replayRate)
}

// -------------------------------------------------------------------

// PlaybackControlResponse

// string taskId = 1;
inline void PlaybackControlResponse::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackControlResponse::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
  return taskid_.GetNoArena();
}
inline void PlaybackControlResponse::set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
}
inline void PlaybackControlResponse::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
}
inline void PlaybackControlResponse::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
}
inline void PlaybackControlResponse::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
}
inline std::string* PlaybackControlResponse::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackControlResponse::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackControlResponse::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
}

// bool isSuccess = 2;
inline void PlaybackControlResponse::clear_issuccess() {
  issuccess_ = false;
}
inline bool PlaybackControlResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlResponse.isSuccess)
  return issuccess_;
}
inline void PlaybackControlResponse::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
inline bool PlaybackControlResponse::has_errorcontext() const {
  return this != internal_default_instance() && errorcontext_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& PlaybackControlResponse::errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = errorcontext_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      &::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackControlResponse::release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = errorcontext_;
  errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackControlResponse::mutable_errorcontext() {
  
  if (errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaNoVirtual());
    errorcontext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
  return errorcontext_;
}
inline void PlaybackControlResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
}

// int32 currentReplayRate = 4;
inline void PlaybackControlResponse::clear_currentreplayrate() {
  currentreplayrate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaybackControlResponse::currentreplayrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlResponse.currentReplayRate)
  return currentreplayrate_;
}
inline void PlaybackControlResponse::set_currentreplayrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentreplayrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlResponse.currentReplayRate)
}

// -------------------------------------------------------------------

// PlaybackStatusRequest

// string taskId = 1;
inline void PlaybackStatusRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackStatusRequest::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
  return taskid_.GetNoArena();
}
inline void PlaybackStatusRequest::set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
}
inline void PlaybackStatusRequest::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
}
inline void PlaybackStatusRequest::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
}
inline void PlaybackStatusRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
}
inline std::string* PlaybackStatusRequest::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackStatusRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackStatusRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
}

// -------------------------------------------------------------------

// PlaybackStatus

// string taskId = 1;
inline void PlaybackStatus::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackStatus::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
  return taskid_.GetNoArena();
}
inline void PlaybackStatus::set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
}
inline void PlaybackStatus::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
}
inline void PlaybackStatus::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
}
inline void PlaybackStatus::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
}
inline std::string* PlaybackStatus::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackStatus::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackStatus::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
}

// .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
inline void PlaybackStatus::clear_taskstatus() {
  taskstatus_ = 0;
}
inline ::com::htsc::mdc::insight::model::EPlaybackTaskStatus PlaybackStatus::taskstatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatus.taskStatus)
  return static_cast< ::com::htsc::mdc::insight::model::EPlaybackTaskStatus >(taskstatus_);
}
inline void PlaybackStatus::set_taskstatus(::com::htsc::mdc::insight::model::EPlaybackTaskStatus value) {
  
  taskstatus_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatus.taskStatus)
}

// int32 replayPercent = 3;
inline void PlaybackStatus::clear_replaypercent() {
  replaypercent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaybackStatus::replaypercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatus.replayPercent)
  return replaypercent_;
}
inline void PlaybackStatus::set_replaypercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replaypercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatus.replayPercent)
}

// int32 currentReplayRate = 4;
inline void PlaybackStatus::clear_currentreplayrate() {
  currentreplayrate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaybackStatus::currentreplayrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatus.currentReplayRate)
  return currentreplayrate_;
}
inline void PlaybackStatus::set_currentreplayrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentreplayrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatus.currentReplayRate)
}

// -------------------------------------------------------------------

// PlaybackPayload

// string taskId = 1;
inline void PlaybackPayload::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaybackPayload::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
  return taskid_.GetNoArena();
}
inline void PlaybackPayload::set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
}
inline void PlaybackPayload::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
}
inline void PlaybackPayload::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
}
inline void PlaybackPayload::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
}
inline std::string* PlaybackPayload::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaybackPayload::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackPayload::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
}

// .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
inline bool PlaybackPayload::has_marketdatastream() const {
  return this != internal_default_instance() && marketdatastream_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::MarketDataStream& PlaybackPayload::marketdatastream() const {
  const ::com::htsc::mdc::insight::model::MarketDataStream* p = marketdatastream_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::MarketDataStream*>(
      &::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_);
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* PlaybackPayload::release_marketdatastream() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
  
  ::com::htsc::mdc::insight::model::MarketDataStream* temp = marketdatastream_;
  marketdatastream_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* PlaybackPayload::mutable_marketdatastream() {
  
  if (marketdatastream_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketDataStream>(GetArenaNoVirtual());
    marketdatastream_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
  return marketdatastream_;
}
inline void PlaybackPayload::set_allocated_marketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdatastream_);
  }
  if (marketdatastream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marketdatastream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketdatastream, submessage_arena);
    }
    
  } else {
    
  }
  marketdatastream_ = marketdatastream;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::EPlaybackExrightsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::EPlaybackExrightsType>() {
  return ::com::htsc::mdc::insight::model::EPlaybackExrightsType_descriptor();
}
template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::EPlaybackTaskControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::EPlaybackTaskControlType>() {
  return ::com::htsc::mdc::insight::model::EPlaybackTaskControlType_descriptor();
}
template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::EPlaybackTaskStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::EPlaybackTaskStatus>() {
  return ::com::htsc::mdc::insight::model::EPlaybackTaskStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDPlayback_2eproto
