// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDiscovery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceDiscovery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceDiscovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "InsightErrorContext.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceDiscovery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceDiscovery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDiscovery_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServiceDiscoveryRequest;
class ServiceDiscoveryRequestDefaultTypeInternal;
extern ServiceDiscoveryRequestDefaultTypeInternal _ServiceDiscoveryRequest_default_instance_;
class ServiceDiscoveryResponse;
class ServiceDiscoveryResponseDefaultTypeInternal;
extern ServiceDiscoveryResponseDefaultTypeInternal _ServiceDiscoveryResponse_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ServerInfo* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ServerInfo>(Arena*);
template<> ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ServiceDiscoveryRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ServiceDiscoveryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ServiceDiscoveryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ServiceDiscoveryRequest) */ {
 public:
  ServiceDiscoveryRequest();
  virtual ~ServiceDiscoveryRequest();

  ServiceDiscoveryRequest(const ServiceDiscoveryRequest& from);
  ServiceDiscoveryRequest(ServiceDiscoveryRequest&& from) noexcept
    : ServiceDiscoveryRequest() {
    *this = ::std::move(from);
  }

  inline ServiceDiscoveryRequest& operator=(const ServiceDiscoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDiscoveryRequest& operator=(ServiceDiscoveryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceDiscoveryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceDiscoveryRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceDiscoveryRequest*>(
               &_ServiceDiscoveryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServiceDiscoveryRequest* other);
  friend void swap(ServiceDiscoveryRequest& a, ServiceDiscoveryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceDiscoveryRequest* New() const final {
    return CreateMaybeMessage<ServiceDiscoveryRequest>(nullptr);
  }

  ServiceDiscoveryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceDiscoveryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceDiscoveryRequest& from);
  void MergeFrom(const ServiceDiscoveryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDiscoveryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ServiceDiscoveryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceDiscovery_2eproto);
    return ::descriptor_table_ServiceDiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appVersion = 2;
  void clear_appversion();
  static const int kAppVersionFieldNumber = 2;
  const std::string& appversion() const;
  void set_appversion(const std::string& value);
  void set_appversion(std::string&& value);
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  std::string* mutable_appversion();
  std::string* release_appversion();
  void set_allocated_appversion(std::string* appversion);

  // string userName = 3;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string deviceId = 4;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 4;
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);

  // int32 appType = 1;
  void clear_apptype();
  static const int kAppTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 apptype() const;
  void set_apptype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool isSupportCompressed = 5;
  void clear_issupportcompressed();
  static const int kIsSupportCompressedFieldNumber = 5;
  bool issupportcompressed() const;
  void set_issupportcompressed(bool value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ServiceDiscoveryRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 apptype_;
  bool issupportcompressed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceDiscovery_2eproto;
};
// -------------------------------------------------------------------

class ServiceDiscoveryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ServiceDiscoveryResponse) */ {
 public:
  ServiceDiscoveryResponse();
  virtual ~ServiceDiscoveryResponse();

  ServiceDiscoveryResponse(const ServiceDiscoveryResponse& from);
  ServiceDiscoveryResponse(ServiceDiscoveryResponse&& from) noexcept
    : ServiceDiscoveryResponse() {
    *this = ::std::move(from);
  }

  inline ServiceDiscoveryResponse& operator=(const ServiceDiscoveryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDiscoveryResponse& operator=(ServiceDiscoveryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceDiscoveryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceDiscoveryResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceDiscoveryResponse*>(
               &_ServiceDiscoveryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServiceDiscoveryResponse* other);
  friend void swap(ServiceDiscoveryResponse& a, ServiceDiscoveryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceDiscoveryResponse* New() const final {
    return CreateMaybeMessage<ServiceDiscoveryResponse>(nullptr);
  }

  ServiceDiscoveryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceDiscoveryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceDiscoveryResponse& from);
  void MergeFrom(const ServiceDiscoveryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDiscoveryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ServiceDiscoveryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceDiscovery_2eproto);
    return ::descriptor_table_ServiceDiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.ServerInfo servers = 3;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 3;
  ::com::htsc::mdc::insight::model::ServerInfo* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ServerInfo >*
      mutable_servers();
  const ::com::htsc::mdc::insight::model::ServerInfo& servers(int index) const;
  ::com::htsc::mdc::insight::model::ServerInfo* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ServerInfo >&
      servers() const;

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  bool has_errorcontext() const;
  void clear_errorcontext();
  static const int kErrorContextFieldNumber = 2;
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);

  // bool isSuccess = 1;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  bool issuccess() const;
  void set_issuccess(bool value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ServiceDiscoveryResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ServerInfo > servers_;
  ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
  bool issuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceDiscovery_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(nullptr);
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceDiscovery_2eproto);
    return ::descriptor_table_ServiceDiscovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // string siteName = 5;
  void clear_sitename();
  static const int kSiteNameFieldNumber = 5;
  const std::string& sitename() const;
  void set_sitename(const std::string& value);
  void set_sitename(std::string&& value);
  void set_sitename(const char* value);
  void set_sitename(const char* value, size_t size);
  std::string* mutable_sitename();
  std::string* release_sitename();
  void set_allocated_sitename(std::string* sitename);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ipType = 3;
  void clear_iptype();
  static const int kIpTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 iptype() const;
  void set_iptype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 siteType = 4;
  void clear_sitetype();
  static const int kSiteTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 sitetype() const;
  void set_sitetype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ipVersion = 6;
  void clear_ipversion();
  static const int kIpVersionFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 ipversion() const;
  void set_ipversion(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ServerInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sitename_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 iptype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sitetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipversion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceDiscovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceDiscoveryRequest

// int32 appType = 1;
inline void ServiceDiscoveryRequest::clear_apptype() {
  apptype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceDiscoveryRequest::apptype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appType)
  return apptype_;
}
inline void ServiceDiscoveryRequest::set_apptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  apptype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appType)
}

// string appVersion = 2;
inline void ServiceDiscoveryRequest::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceDiscoveryRequest::appversion() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion)
  return appversion_.GetNoArena();
}
inline void ServiceDiscoveryRequest::set_appversion(const std::string& value) {
  
  appversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion)
}
inline void ServiceDiscoveryRequest::set_appversion(std::string&& value) {
  
  appversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion)
}
inline void ServiceDiscoveryRequest::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion)
}
inline void ServiceDiscoveryRequest::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion)
}
inline std::string* ServiceDiscoveryRequest::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion)
  return appversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceDiscoveryRequest::release_appversion() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion)
  
  return appversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceDiscoveryRequest::set_allocated_appversion(std::string* appversion) {
  if (appversion != nullptr) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.appVersion)
}

// string userName = 3;
inline void ServiceDiscoveryRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceDiscoveryRequest::username() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName)
  return username_.GetNoArena();
}
inline void ServiceDiscoveryRequest::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName)
}
inline void ServiceDiscoveryRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName)
}
inline void ServiceDiscoveryRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName)
}
inline void ServiceDiscoveryRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName)
}
inline std::string* ServiceDiscoveryRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceDiscoveryRequest::release_username() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceDiscoveryRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.userName)
}

// string deviceId = 4;
inline void ServiceDiscoveryRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceDiscoveryRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId)
  return deviceid_.GetNoArena();
}
inline void ServiceDiscoveryRequest::set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId)
}
inline void ServiceDiscoveryRequest::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId)
}
inline void ServiceDiscoveryRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId)
}
inline void ServiceDiscoveryRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId)
}
inline std::string* ServiceDiscoveryRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId)
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceDiscoveryRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceDiscoveryRequest::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.deviceId)
}

// bool isSupportCompressed = 5;
inline void ServiceDiscoveryRequest::clear_issupportcompressed() {
  issupportcompressed_ = false;
}
inline bool ServiceDiscoveryRequest::issupportcompressed() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.isSupportCompressed)
  return issupportcompressed_;
}
inline void ServiceDiscoveryRequest::set_issupportcompressed(bool value) {
  
  issupportcompressed_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServiceDiscoveryRequest.isSupportCompressed)
}

// -------------------------------------------------------------------

// ServiceDiscoveryResponse

// bool isSuccess = 1;
inline void ServiceDiscoveryResponse::clear_issuccess() {
  issuccess_ = false;
}
inline bool ServiceDiscoveryResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.isSuccess)
  return issuccess_;
}
inline void ServiceDiscoveryResponse::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
inline bool ServiceDiscoveryResponse::has_errorcontext() const {
  return this != internal_default_instance() && errorcontext_ != nullptr;
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& ServiceDiscoveryResponse::errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = errorcontext_;
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.errorContext)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      &::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* ServiceDiscoveryResponse::release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = errorcontext_;
  errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* ServiceDiscoveryResponse::mutable_errorcontext() {
  
  if (errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaNoVirtual());
    errorcontext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.errorContext)
  return errorcontext_;
}
inline void ServiceDiscoveryResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.errorContext)
}

// repeated .com.htsc.mdc.insight.model.ServerInfo servers = 3;
inline int ServiceDiscoveryResponse::servers_size() const {
  return servers_.size();
}
inline void ServiceDiscoveryResponse::clear_servers() {
  servers_.Clear();
}
inline ::com::htsc::mdc::insight::model::ServerInfo* ServiceDiscoveryResponse::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ServerInfo >*
ServiceDiscoveryResponse::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.servers)
  return &servers_;
}
inline const ::com::htsc::mdc::insight::model::ServerInfo& ServiceDiscoveryResponse::servers(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.servers)
  return servers_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ServerInfo* ServiceDiscoveryResponse::add_servers() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.servers)
  return servers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ServerInfo >&
ServiceDiscoveryResponse::servers() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ServiceDiscoveryResponse.servers)
  return servers_;
}

// -------------------------------------------------------------------

// ServerInfo

// string ip = 1;
inline void ServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServerInfo.ip)
  return ip_.GetNoArena();
}
inline void ServerInfo::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServerInfo.ip)
}
inline void ServerInfo::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ServerInfo.ip)
}
inline std::string* ServerInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ServerInfo.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ServerInfo.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ServerInfo.ip)
}

// int32 port = 2;
inline void ServerInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServerInfo.port)
  return port_;
}
inline void ServerInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServerInfo.port)
}

// int32 ipType = 3;
inline void ServerInfo::clear_iptype() {
  iptype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::iptype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServerInfo.ipType)
  return iptype_;
}
inline void ServerInfo::set_iptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iptype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServerInfo.ipType)
}

// int32 siteType = 4;
inline void ServerInfo::clear_sitetype() {
  sitetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::sitetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServerInfo.siteType)
  return sitetype_;
}
inline void ServerInfo::set_sitetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sitetype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServerInfo.siteType)
}

// string siteName = 5;
inline void ServerInfo::clear_sitename() {
  sitename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerInfo::sitename() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServerInfo.siteName)
  return sitename_.GetNoArena();
}
inline void ServerInfo::set_sitename(const std::string& value) {
  
  sitename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServerInfo.siteName)
}
inline void ServerInfo::set_sitename(std::string&& value) {
  
  sitename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.ServerInfo.siteName)
}
inline void ServerInfo::set_sitename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sitename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ServerInfo.siteName)
}
inline void ServerInfo::set_sitename(const char* value, size_t size) {
  
  sitename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ServerInfo.siteName)
}
inline std::string* ServerInfo::mutable_sitename() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ServerInfo.siteName)
  return sitename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfo::release_sitename() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ServerInfo.siteName)
  
  return sitename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_sitename(std::string* sitename) {
  if (sitename != nullptr) {
    
  } else {
    
  }
  sitename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sitename);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ServerInfo.siteName)
}

// int32 ipVersion = 6;
inline void ServerInfo::clear_ipversion() {
  ipversion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::ipversion() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ServerInfo.ipVersion)
  return ipversion_;
}
inline void ServerInfo::set_ipversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ipversion_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ServerInfo.ipVersion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceDiscovery_2eproto
