// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageHeader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageHeader_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MessageHeader* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MessageHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MessageHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageHeader* other);
  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MessageHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageHeader_2eproto);
    return ::descriptor_table_MessageHeader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string senderId = 5;
  void clear_senderid();
  static const int kSenderIdFieldNumber = 5;
  const std::string& senderid() const;
  void set_senderid(const std::string& value);
  void set_senderid(std::string&& value);
  void set_senderid(const char* value);
  void set_senderid(const char* value, size_t size);
  std::string* mutable_senderid();
  std::string* release_senderid();
  void set_allocated_senderid(std::string* senderid);

  // string targetId = 6;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 6;
  const std::string& targetid() const;
  void set_targetid(const std::string& value);
  void set_targetid(std::string&& value);
  void set_targetid(const char* value);
  void set_targetid(const char* value, size_t size);
  std::string* mutable_targetid();
  std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);

  // string traceId = 7;
  void clear_traceid();
  static const int kTraceIdFieldNumber = 7;
  const std::string& traceid() const;
  void set_traceid(const std::string& value);
  void set_traceid(std::string&& value);
  void set_traceid(const char* value);
  void set_traceid(const char* value, size_t size);
  std::string* mutable_traceid();
  std::string* release_traceid();
  void set_allocated_traceid(std::string* traceid);

  // int32 appType = 1;
  void clear_apptype();
  static const int kAppTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 apptype() const;
  void set_apptype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 messageClassification = 2;
  void clear_messageclassification();
  static const int kMessageClassificationFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 messageclassification() const;
  void set_messageclassification(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 messageId = 3;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 messageid() const;
  void set_messageid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 sendingTime = 4;
  void clear_sendingtime();
  static const int kSendingTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 sendingtime() const;
  void set_sendingtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MessageHeader)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 apptype_;
  ::PROTOBUF_NAMESPACE_ID::int32 messageclassification_;
  ::PROTOBUF_NAMESPACE_ID::int64 messageid_;
  ::PROTOBUF_NAMESPACE_ID::int64 sendingtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// int32 appType = 1;
inline void MessageHeader::clear_apptype() {
  apptype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageHeader::apptype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.appType)
  return apptype_;
}
inline void MessageHeader::set_apptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  apptype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.appType)
}

// int32 messageClassification = 2;
inline void MessageHeader::clear_messageclassification() {
  messageclassification_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageHeader::messageclassification() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.messageClassification)
  return messageclassification_;
}
inline void MessageHeader::set_messageclassification(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  messageclassification_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.messageClassification)
}

// int64 messageId = 3;
inline void MessageHeader::clear_messageid() {
  messageid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageHeader::messageid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.messageId)
  return messageid_;
}
inline void MessageHeader::set_messageid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  messageid_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.messageId)
}

// int64 sendingTime = 4;
inline void MessageHeader::clear_sendingtime() {
  sendingtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageHeader::sendingtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.sendingTime)
  return sendingtime_;
}
inline void MessageHeader::set_sendingtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sendingtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.sendingTime)
}

// string senderId = 5;
inline void MessageHeader::clear_senderid() {
  senderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageHeader::senderid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.senderId)
  return senderid_.GetNoArena();
}
inline void MessageHeader::set_senderid(const std::string& value) {
  
  senderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.senderId)
}
inline void MessageHeader::set_senderid(std::string&& value) {
  
  senderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MessageHeader.senderId)
}
inline void MessageHeader::set_senderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  senderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MessageHeader.senderId)
}
inline void MessageHeader::set_senderid(const char* value, size_t size) {
  
  senderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MessageHeader.senderId)
}
inline std::string* MessageHeader::mutable_senderid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageHeader.senderId)
  return senderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageHeader::release_senderid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageHeader.senderId)
  
  return senderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_senderid(std::string* senderid) {
  if (senderid != nullptr) {
    
  } else {
    
  }
  senderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), senderid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageHeader.senderId)
}

// string targetId = 6;
inline void MessageHeader::clear_targetid() {
  targetid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageHeader::targetid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.targetId)
  return targetid_.GetNoArena();
}
inline void MessageHeader::set_targetid(const std::string& value) {
  
  targetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.targetId)
}
inline void MessageHeader::set_targetid(std::string&& value) {
  
  targetid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MessageHeader.targetId)
}
inline void MessageHeader::set_targetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MessageHeader.targetId)
}
inline void MessageHeader::set_targetid(const char* value, size_t size) {
  
  targetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MessageHeader.targetId)
}
inline std::string* MessageHeader::mutable_targetid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageHeader.targetId)
  return targetid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageHeader::release_targetid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageHeader.targetId)
  
  return targetid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageHeader.targetId)
}

// string traceId = 7;
inline void MessageHeader::clear_traceid() {
  traceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageHeader::traceid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageHeader.traceId)
  return traceid_.GetNoArena();
}
inline void MessageHeader::set_traceid(const std::string& value) {
  
  traceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageHeader.traceId)
}
inline void MessageHeader::set_traceid(std::string&& value) {
  
  traceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MessageHeader.traceId)
}
inline void MessageHeader::set_traceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  traceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MessageHeader.traceId)
}
inline void MessageHeader::set_traceid(const char* value, size_t size) {
  
  traceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MessageHeader.traceId)
}
inline std::string* MessageHeader::mutable_traceid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageHeader.traceId)
  return traceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageHeader::release_traceid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageHeader.traceId)
  
  return traceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_traceid(std::string* traceid) {
  if (traceid != nullptr) {
    
  } else {
    
  }
  traceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), traceid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageHeader.traceId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageHeader_2eproto
