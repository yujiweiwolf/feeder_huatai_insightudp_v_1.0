// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDSubscribe.proto

#include "MDSubscribe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_InsightErrorContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsightErrorContext_InsightErrorContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SecuritySourceType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecuritySourceType_SecuritySourceType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeAll_MDSubscribe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeByID_MDSubscribe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeByIDDetail_MDSubscribe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeBySourceType_MDSubscribe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeBySourceTypeDetail_MDSubscribe_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDSubscribeRequest> _instance;
} _MDSubscribeRequest_default_instance_;
class SubscribeAllDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeAll> _instance;
} _SubscribeAll_default_instance_;
class SubscribeByIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeByID> _instance;
} _SubscribeByID_default_instance_;
class SubscribeByIDDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeByIDDetail> _instance;
} _SubscribeByIDDetail_default_instance_;
class SubscribeBySourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeBySourceType> _instance;
} _SubscribeBySourceType_default_instance_;
class SubscribeBySourceTypeDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeBySourceTypeDetail> _instance;
} _SubscribeBySourceTypeDetail_default_instance_;
class MDSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MDSubscribeResponse> _instance;
} _MDSubscribeResponse_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_MDSubscribeRequest_MDSubscribe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDSubscribeRequest_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDSubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MDSubscribeRequest_MDSubscribe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MDSubscribeRequest_MDSubscribe_2eproto}, {
      &scc_info_SubscribeAll_MDSubscribe_2eproto.base,
      &scc_info_SubscribeBySourceType_MDSubscribe_2eproto.base,
      &scc_info_SubscribeByID_MDSubscribe_2eproto.base,}};

static void InitDefaultsscc_info_MDSubscribeResponse_MDSubscribe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MDSubscribeResponse_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MDSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MDSubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDSubscribeResponse_MDSubscribe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MDSubscribeResponse_MDSubscribe_2eproto}, {
      &scc_info_InsightErrorContext_InsightErrorContext_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeAll_MDSubscribe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_SubscribeAll_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::SubscribeAll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::SubscribeAll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeAll_MDSubscribe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscribeAll_MDSubscribe_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeByID_MDSubscribe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_SubscribeByID_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::SubscribeByID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::SubscribeByID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeByID_MDSubscribe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SubscribeByID_MDSubscribe_2eproto}, {
      &scc_info_SubscribeByIDDetail_MDSubscribe_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeByIDDetail_MDSubscribe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_SubscribeByIDDetail_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::SubscribeByIDDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::SubscribeByIDDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeByIDDetail_MDSubscribe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscribeByIDDetail_MDSubscribe_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeBySourceType_MDSubscribe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_SubscribeBySourceType_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::SubscribeBySourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::SubscribeBySourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeBySourceType_MDSubscribe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SubscribeBySourceType_MDSubscribe_2eproto}, {
      &scc_info_SubscribeBySourceTypeDetail_MDSubscribe_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeBySourceTypeDetail_MDSubscribe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_SubscribeBySourceTypeDetail_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeBySourceTypeDetail_MDSubscribe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SubscribeBySourceTypeDetail_MDSubscribe_2eproto}, {
      &scc_info_SecuritySourceType_SecuritySourceType_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MDSubscribe_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MDSubscribe_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MDSubscribe_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MDSubscribe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, subscribeactiontype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, subscribeall_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, subscribebysourcetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeRequest, subscribebyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeAll, marketdatatypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByID, subscribebyiddetails_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByID, globalmarketdatatypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByIDDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByIDDetail, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeByIDDetail, marketdatatypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceType, subscribebysourcetypedetail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail, securitysourcetypes_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail, marketdatatypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeResponse, issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSubscribeResponse, errorcontext_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::MDSubscribeRequest)},
  { 9, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeAll)},
  { 15, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeByID)},
  { 22, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeByIDDetail)},
  { 29, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeBySourceType)},
  { 35, -1, sizeof(::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail)},
  { 42, -1, sizeof(::com::htsc::mdc::insight::model::MDSubscribeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_SubscribeAll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_SubscribeByID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_SubscribeByIDDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_SubscribeBySourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_SubscribeBySourceTypeDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MDSubscribeResponse_default_instance_),
};

const char descriptor_table_protodef_MDSubscribe_2eproto[] =
  "\n\021MDSubscribe.proto\022\032com.htsc.mdc.insigh"
  "t.model\032\030SecuritySourceType.proto\032\025EMark"
  "etDataType.proto\032\031InsightErrorContext.pr"
  "oto\"\267\002\n\022MDSubscribeRequest\022M\n\023subscribeA"
  "ctionType\030\001 \001(\01620.com.htsc.mdc.insight.m"
  "odel.ESubscribeActionType\022>\n\014subscribeAl"
  "l\030\002 \001(\0132(.com.htsc.mdc.insight.model.Sub"
  "scribeAll\022P\n\025subscribeBySourceType\030\003 \001(\013"
  "21.com.htsc.mdc.insight.model.SubscribeB"
  "ySourceType\022@\n\rsubscribeByID\030\004 \001(\0132).com"
  ".htsc.mdc.insight.model.SubscribeByID\"T\n"
  "\014SubscribeAll\022D\n\017marketDataTypes\030\001 \003(\0162+"
  ".com.htsc.mdc.insight.model.EMarketDataT"
  "ype\"\252\001\n\rSubscribeByID\022M\n\024subscribeByIDDe"
  "tails\030\001 \003(\0132/.com.htsc.mdc.insight.model"
  ".SubscribeByIDDetail\022J\n\025globalMarketData"
  "Types\030\002 \003(\0162+.com.htsc.mdc.insight.model"
  ".EMarketDataType\"s\n\023SubscribeByIDDetail\022"
  "\026\n\016htscSecurityID\030\001 \001(\t\022D\n\017marketDataTyp"
  "es\030\002 \003(\0162+.com.htsc.mdc.insight.model.EM"
  "arketDataType\"u\n\025SubscribeBySourceType\022\\"
  "\n\033subscribeBySourceTypeDetail\030\001 \003(\01327.co"
  "m.htsc.mdc.insight.model.SubscribeBySour"
  "ceTypeDetail\"\260\001\n\033SubscribeBySourceTypeDe"
  "tail\022K\n\023securitySourceTypes\030\001 \001(\0132..com."
  "htsc.mdc.insight.model.SecuritySourceTyp"
  "e\022D\n\017marketDataTypes\030\002 \003(\0162+.com.htsc.md"
  "c.insight.model.EMarketDataType\"o\n\023MDSub"
  "scribeResponse\022\021\n\tisSuccess\030\001 \001(\010\022E\n\014err"
  "orContext\030\002 \001(\0132/.com.htsc.mdc.insight.m"
  "odel.InsightErrorContext*G\n\024ESubscribeAc"
  "tionType\022\014\n\010COVERAGE\020\000\022\007\n\003ADD\020\001\022\014\n\010DECRE"
  "ASE\020\002\022\n\n\006CANCEL\020\003B4\n\032com.htsc.mdc.insigh"
  "t.modelB\021MDSubscribeProtosH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MDSubscribe_2eproto_deps[3] = {
  &::descriptor_table_EMarketDataType_2eproto,
  &::descriptor_table_InsightErrorContext_2eproto,
  &::descriptor_table_SecuritySourceType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MDSubscribe_2eproto_sccs[7] = {
  &scc_info_MDSubscribeRequest_MDSubscribe_2eproto.base,
  &scc_info_MDSubscribeResponse_MDSubscribe_2eproto.base,
  &scc_info_SubscribeAll_MDSubscribe_2eproto.base,
  &scc_info_SubscribeByID_MDSubscribe_2eproto.base,
  &scc_info_SubscribeByIDDetail_MDSubscribe_2eproto.base,
  &scc_info_SubscribeBySourceType_MDSubscribe_2eproto.base,
  &scc_info_SubscribeBySourceTypeDetail_MDSubscribe_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MDSubscribe_2eproto_once;
static bool descriptor_table_MDSubscribe_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDSubscribe_2eproto = {
  &descriptor_table_MDSubscribe_2eproto_initialized, descriptor_table_protodef_MDSubscribe_2eproto, "MDSubscribe.proto", 1359,
  &descriptor_table_MDSubscribe_2eproto_once, descriptor_table_MDSubscribe_2eproto_sccs, descriptor_table_MDSubscribe_2eproto_deps, 7, 3,
  schemas, file_default_instances, TableStruct_MDSubscribe_2eproto::offsets,
  file_level_metadata_MDSubscribe_2eproto, 7, file_level_enum_descriptors_MDSubscribe_2eproto, file_level_service_descriptors_MDSubscribe_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MDSubscribe_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MDSubscribe_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESubscribeActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MDSubscribe_2eproto);
  return file_level_enum_descriptors_MDSubscribe_2eproto[0];
}
bool ESubscribeActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MDSubscribeRequest::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_MDSubscribeRequest_default_instance_._instance.get_mutable()->subscribeall_ = const_cast< ::com::htsc::mdc::insight::model::SubscribeAll*>(
      ::com::htsc::mdc::insight::model::SubscribeAll::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MDSubscribeRequest_default_instance_._instance.get_mutable()->subscribebysourcetype_ = const_cast< ::com::htsc::mdc::insight::model::SubscribeBySourceType*>(
      ::com::htsc::mdc::insight::model::SubscribeBySourceType::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MDSubscribeRequest_default_instance_._instance.get_mutable()->subscribebyid_ = const_cast< ::com::htsc::mdc::insight::model::SubscribeByID*>(
      ::com::htsc::mdc::insight::model::SubscribeByID::internal_default_instance());
}
class MDSubscribeRequest::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::SubscribeAll& subscribeall(const MDSubscribeRequest* msg);
  static const ::com::htsc::mdc::insight::model::SubscribeBySourceType& subscribebysourcetype(const MDSubscribeRequest* msg);
  static const ::com::htsc::mdc::insight::model::SubscribeByID& subscribebyid(const MDSubscribeRequest* msg);
};

const ::com::htsc::mdc::insight::model::SubscribeAll&
MDSubscribeRequest::HasBitSetters::subscribeall(const MDSubscribeRequest* msg) {
  return *msg->subscribeall_;
}
const ::com::htsc::mdc::insight::model::SubscribeBySourceType&
MDSubscribeRequest::HasBitSetters::subscribebysourcetype(const MDSubscribeRequest* msg) {
  return *msg->subscribebysourcetype_;
}
const ::com::htsc::mdc::insight::model::SubscribeByID&
MDSubscribeRequest::HasBitSetters::subscribebyid(const MDSubscribeRequest* msg) {
  return *msg->subscribebyid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDSubscribeRequest::kSubscribeActionTypeFieldNumber;
const int MDSubscribeRequest::kSubscribeAllFieldNumber;
const int MDSubscribeRequest::kSubscribeBySourceTypeFieldNumber;
const int MDSubscribeRequest::kSubscribeByIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDSubscribeRequest::MDSubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDSubscribeRequest)
}
MDSubscribeRequest::MDSubscribeRequest(const MDSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subscribeall()) {
    subscribeall_ = new ::com::htsc::mdc::insight::model::SubscribeAll(*from.subscribeall_);
  } else {
    subscribeall_ = nullptr;
  }
  if (from.has_subscribebysourcetype()) {
    subscribebysourcetype_ = new ::com::htsc::mdc::insight::model::SubscribeBySourceType(*from.subscribebysourcetype_);
  } else {
    subscribebysourcetype_ = nullptr;
  }
  if (from.has_subscribebyid()) {
    subscribebyid_ = new ::com::htsc::mdc::insight::model::SubscribeByID(*from.subscribebyid_);
  } else {
    subscribebyid_ = nullptr;
  }
  subscribeactiontype_ = from.subscribeactiontype_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDSubscribeRequest)
}

void MDSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDSubscribeRequest_MDSubscribe_2eproto.base);
  ::memset(&subscribeall_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscribeactiontype_) -
      reinterpret_cast<char*>(&subscribeall_)) + sizeof(subscribeactiontype_));
}

MDSubscribeRequest::~MDSubscribeRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDSubscribeRequest)
  SharedDtor();
}

void MDSubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete subscribeall_;
  if (this != internal_default_instance()) delete subscribebysourcetype_;
  if (this != internal_default_instance()) delete subscribebyid_;
}

void MDSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDSubscribeRequest& MDSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDSubscribeRequest_MDSubscribe_2eproto.base);
  return *internal_default_instance();
}


void MDSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && subscribeall_ != nullptr) {
    delete subscribeall_;
  }
  subscribeall_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subscribebysourcetype_ != nullptr) {
    delete subscribebysourcetype_;
  }
  subscribebysourcetype_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subscribebyid_ != nullptr) {
    delete subscribebyid_;
  }
  subscribebyid_ = nullptr;
  subscribeactiontype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_subscribeactiontype(static_cast<::com::htsc::mdc::insight::model::ESubscribeActionType>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_subscribeall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_subscribebysourcetype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_subscribebyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDSubscribeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subscribeactiontype(static_cast< ::com::htsc::mdc::insight::model::ESubscribeActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_subscribeall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_subscribebysourcetype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_subscribebyid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDSubscribeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
  if (this->subscribeactiontype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->subscribeactiontype(), output);
  }

  // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
  if (this->has_subscribeall()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::subscribeall(this), output);
  }

  // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
  if (this->has_subscribebysourcetype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::subscribebysourcetype(this), output);
  }

  // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
  if (this->has_subscribebyid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::subscribebyid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDSubscribeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
  if (this->subscribeactiontype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->subscribeactiontype(), target);
  }

  // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
  if (this->has_subscribeall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::subscribeall(this), target);
  }

  // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
  if (this->has_subscribebysourcetype()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::subscribebysourcetype(this), target);
  }

  // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
  if (this->has_subscribebyid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::subscribebyid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDSubscribeRequest)
  return target;
}

size_t MDSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
  if (this->has_subscribeall()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscribeall_);
  }

  // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
  if (this->has_subscribebysourcetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscribebysourcetype_);
  }

  // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
  if (this->has_subscribebyid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscribebyid_);
  }

  // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
  if (this->subscribeactiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->subscribeactiontype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MDSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDSubscribeRequest)
    MergeFrom(*source);
  }
}

void MDSubscribeRequest::MergeFrom(const MDSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscribeall()) {
    mutable_subscribeall()->::com::htsc::mdc::insight::model::SubscribeAll::MergeFrom(from.subscribeall());
  }
  if (from.has_subscribebysourcetype()) {
    mutable_subscribebysourcetype()->::com::htsc::mdc::insight::model::SubscribeBySourceType::MergeFrom(from.subscribebysourcetype());
  }
  if (from.has_subscribebyid()) {
    mutable_subscribebyid()->::com::htsc::mdc::insight::model::SubscribeByID::MergeFrom(from.subscribebyid());
  }
  if (from.subscribeactiontype() != 0) {
    set_subscribeactiontype(from.subscribeactiontype());
  }
}

void MDSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDSubscribeRequest::CopyFrom(const MDSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDSubscribeRequest::IsInitialized() const {
  return true;
}

void MDSubscribeRequest::Swap(MDSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDSubscribeRequest::InternalSwap(MDSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(subscribeall_, other->subscribeall_);
  swap(subscribebysourcetype_, other->subscribebysourcetype_);
  swap(subscribebyid_, other->subscribebyid_);
  swap(subscribeactiontype_, other->subscribeactiontype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeAll::InitAsDefaultInstance() {
}
class SubscribeAll::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeAll::kMarketDataTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeAll::SubscribeAll()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.SubscribeAll)
}
SubscribeAll::SubscribeAll(const SubscribeAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      marketdatatypes_(from.marketdatatypes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeAll)
}

void SubscribeAll::SharedCtor() {
}

SubscribeAll::~SubscribeAll() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeAll)
  SharedDtor();
}

void SubscribeAll::SharedDtor() {
}

void SubscribeAll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeAll& SubscribeAll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeAll_MDSubscribe_2eproto.base);
  return *internal_default_instance();
}


void SubscribeAll::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeAll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketdatatypes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeAll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_marketdatatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_marketdatatypes(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeAll::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.SubscribeAll)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_marketdatatypes(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_marketdatatypes(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.SubscribeAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.SubscribeAll)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeAll::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.SubscribeAll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
  if (this->marketdatatypes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_marketdatatypes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->marketdatatypes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->marketdatatypes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.SubscribeAll)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeAll::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeAll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
  if (this->marketdatatypes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _marketdatatypes_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->marketdatatypes_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeAll)
  return target;
}

size_t SubscribeAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeAll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->marketdatatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->marketdatatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _marketdatatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeAll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.SubscribeAll)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeAll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeAll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.SubscribeAll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.SubscribeAll)
    MergeFrom(*source);
  }
}

void SubscribeAll::MergeFrom(const SubscribeAll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeAll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketdatatypes_.MergeFrom(from.marketdatatypes_);
}

void SubscribeAll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.SubscribeAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAll::CopyFrom(const SubscribeAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAll::IsInitialized() const {
  return true;
}

void SubscribeAll::Swap(SubscribeAll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeAll::InternalSwap(SubscribeAll* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketdatatypes_.InternalSwap(&other->marketdatatypes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeByID::InitAsDefaultInstance() {
}
class SubscribeByID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeByID::kSubscribeByIDDetailsFieldNumber;
const int SubscribeByID::kGlobalMarketDataTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeByID::SubscribeByID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.SubscribeByID)
}
SubscribeByID::SubscribeByID(const SubscribeByID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subscribebyiddetails_(from.subscribebyiddetails_),
      globalmarketdatatypes_(from.globalmarketdatatypes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeByID)
}

void SubscribeByID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeByID_MDSubscribe_2eproto.base);
}

SubscribeByID::~SubscribeByID() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeByID)
  SharedDtor();
}

void SubscribeByID::SharedDtor() {
}

void SubscribeByID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeByID& SubscribeByID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeByID_MDSubscribe_2eproto.base);
  return *internal_default_instance();
}


void SubscribeByID::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeByID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscribebyiddetails_.Clear();
  globalmarketdatatypes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeByID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_subscribebyiddetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_globalmarketdatatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_globalmarketdatatypes(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeByID::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.SubscribeByID)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subscribebyiddetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_globalmarketdatatypes(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_globalmarketdatatypes(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.SubscribeByID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.SubscribeByID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeByID::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.SubscribeByID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscribebyiddetails_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->subscribebyiddetails(static_cast<int>(i)),
      output);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
  if (this->globalmarketdatatypes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_globalmarketdatatypes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->globalmarketdatatypes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->globalmarketdatatypes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.SubscribeByID)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeByID::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeByID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscribebyiddetails_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->subscribebyiddetails(static_cast<int>(i)), target);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
  if (this->globalmarketdatatypes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _globalmarketdatatypes_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->globalmarketdatatypes_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeByID)
  return target;
}

size_t SubscribeByID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeByID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subscribebyiddetails_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subscribebyiddetails(static_cast<int>(i)));
    }
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->globalmarketdatatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->globalmarketdatatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _globalmarketdatatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeByID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.SubscribeByID)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeByID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeByID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.SubscribeByID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.SubscribeByID)
    MergeFrom(*source);
  }
}

void SubscribeByID::MergeFrom(const SubscribeByID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeByID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscribebyiddetails_.MergeFrom(from.subscribebyiddetails_);
  globalmarketdatatypes_.MergeFrom(from.globalmarketdatatypes_);
}

void SubscribeByID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.SubscribeByID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeByID::CopyFrom(const SubscribeByID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeByID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeByID::IsInitialized() const {
  return true;
}

void SubscribeByID::Swap(SubscribeByID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeByID::InternalSwap(SubscribeByID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subscribebyiddetails_)->InternalSwap(CastToBase(&other->subscribebyiddetails_));
  globalmarketdatatypes_.InternalSwap(&other->globalmarketdatatypes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeByID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeByIDDetail::InitAsDefaultInstance() {
}
class SubscribeByIDDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeByIDDetail::kHtscSecurityIDFieldNumber;
const int SubscribeByIDDetail::kMarketDataTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeByIDDetail::SubscribeByIDDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.SubscribeByIDDetail)
}
SubscribeByIDDetail::SubscribeByIDDetail(const SubscribeByIDDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      marketdatatypes_(from.marketdatatypes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeByIDDetail)
}

void SubscribeByIDDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeByIDDetail_MDSubscribe_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubscribeByIDDetail::~SubscribeByIDDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  SharedDtor();
}

void SubscribeByIDDetail::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeByIDDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeByIDDetail& SubscribeByIDDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeByIDDetail_MDSubscribe_2eproto.base);
  return *internal_default_instance();
}


void SubscribeByIDDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketdatatypes_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeByIDDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string htscSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_marketdatatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_marketdatatypes(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeByIDDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string htscSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_marketdatatypes(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_marketdatatypes(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeByIDDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string htscSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  if (this->marketdatatypes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_marketdatatypes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->marketdatatypes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->marketdatatypes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.SubscribeByIDDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeByIDDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string htscSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  if (this->marketdatatypes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _marketdatatypes_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->marketdatatypes_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  return target;
}

size_t SubscribeByIDDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->marketdatatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->marketdatatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _marketdatatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string htscSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeByIDDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeByIDDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeByIDDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.SubscribeByIDDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.SubscribeByIDDetail)
    MergeFrom(*source);
  }
}

void SubscribeByIDDetail::MergeFrom(const SubscribeByIDDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketdatatypes_.MergeFrom(from.marketdatatypes_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
}

void SubscribeByIDDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeByIDDetail::CopyFrom(const SubscribeByIDDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeByIDDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeByIDDetail::IsInitialized() const {
  return true;
}

void SubscribeByIDDetail::Swap(SubscribeByIDDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeByIDDetail::InternalSwap(SubscribeByIDDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketdatatypes_.InternalSwap(&other->marketdatatypes_);
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeByIDDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeBySourceType::InitAsDefaultInstance() {
}
class SubscribeBySourceType::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeBySourceType::kSubscribeBySourceTypeDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeBySourceType::SubscribeBySourceType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.SubscribeBySourceType)
}
SubscribeBySourceType::SubscribeBySourceType(const SubscribeBySourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subscribebysourcetypedetail_(from.subscribebysourcetypedetail_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeBySourceType)
}

void SubscribeBySourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeBySourceType_MDSubscribe_2eproto.base);
}

SubscribeBySourceType::~SubscribeBySourceType() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeBySourceType)
  SharedDtor();
}

void SubscribeBySourceType::SharedDtor() {
}

void SubscribeBySourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeBySourceType& SubscribeBySourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeBySourceType_MDSubscribe_2eproto.base);
  return *internal_default_instance();
}


void SubscribeBySourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscribebysourcetypedetail_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeBySourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_subscribebysourcetypedetail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeBySourceType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subscribebysourcetypedetail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.SubscribeBySourceType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.SubscribeBySourceType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeBySourceType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscribebysourcetypedetail_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->subscribebysourcetypedetail(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.SubscribeBySourceType)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeBySourceType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscribebysourcetypedetail_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->subscribebysourcetypedetail(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeBySourceType)
  return target;
}

size_t SubscribeBySourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subscribebysourcetypedetail_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subscribebysourcetypedetail(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeBySourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeBySourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeBySourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.SubscribeBySourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.SubscribeBySourceType)
    MergeFrom(*source);
  }
}

void SubscribeBySourceType::MergeFrom(const SubscribeBySourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscribebysourcetypedetail_.MergeFrom(from.subscribebysourcetypedetail_);
}

void SubscribeBySourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeBySourceType::CopyFrom(const SubscribeBySourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeBySourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeBySourceType::IsInitialized() const {
  return true;
}

void SubscribeBySourceType::Swap(SubscribeBySourceType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeBySourceType::InternalSwap(SubscribeBySourceType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subscribebysourcetypedetail_)->InternalSwap(CastToBase(&other->subscribebysourcetypedetail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeBySourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeBySourceTypeDetail::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_SubscribeBySourceTypeDetail_default_instance_._instance.get_mutable()->securitysourcetypes_ = const_cast< ::com::htsc::mdc::insight::model::SecuritySourceType*>(
      ::com::htsc::mdc::insight::model::SecuritySourceType::internal_default_instance());
}
class SubscribeBySourceTypeDetail::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::SecuritySourceType& securitysourcetypes(const SubscribeBySourceTypeDetail* msg);
};

const ::com::htsc::mdc::insight::model::SecuritySourceType&
SubscribeBySourceTypeDetail::HasBitSetters::securitysourcetypes(const SubscribeBySourceTypeDetail* msg) {
  return *msg->securitysourcetypes_;
}
void SubscribeBySourceTypeDetail::clear_securitysourcetypes() {
  if (GetArenaNoVirtual() == nullptr && securitysourcetypes_ != nullptr) {
    delete securitysourcetypes_;
  }
  securitysourcetypes_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeBySourceTypeDetail::kSecuritySourceTypesFieldNumber;
const int SubscribeBySourceTypeDetail::kMarketDataTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeBySourceTypeDetail::SubscribeBySourceTypeDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
}
SubscribeBySourceTypeDetail::SubscribeBySourceTypeDetail(const SubscribeBySourceTypeDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      marketdatatypes_(from.marketdatatypes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_securitysourcetypes()) {
    securitysourcetypes_ = new ::com::htsc::mdc::insight::model::SecuritySourceType(*from.securitysourcetypes_);
  } else {
    securitysourcetypes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
}

void SubscribeBySourceTypeDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeBySourceTypeDetail_MDSubscribe_2eproto.base);
  securitysourcetypes_ = nullptr;
}

SubscribeBySourceTypeDetail::~SubscribeBySourceTypeDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  SharedDtor();
}

void SubscribeBySourceTypeDetail::SharedDtor() {
  if (this != internal_default_instance()) delete securitysourcetypes_;
}

void SubscribeBySourceTypeDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeBySourceTypeDetail& SubscribeBySourceTypeDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeBySourceTypeDetail_MDSubscribe_2eproto.base);
  return *internal_default_instance();
}


void SubscribeBySourceTypeDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketdatatypes_.Clear();
  if (GetArenaNoVirtual() == nullptr && securitysourcetypes_ != nullptr) {
    delete securitysourcetypes_;
  }
  securitysourcetypes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeBySourceTypeDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_securitysourcetypes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_marketdatatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_marketdatatypes(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeBySourceTypeDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_securitysourcetypes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_marketdatatypes(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_marketdatatypes(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeBySourceTypeDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
  if (this->has_securitysourcetypes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::securitysourcetypes(this), output);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  if (this->marketdatatypes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_marketdatatypes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->marketdatatypes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->marketdatatypes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeBySourceTypeDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
  if (this->has_securitysourcetypes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::securitysourcetypes(this), target);
  }

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  if (this->marketdatatypes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _marketdatatypes_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->marketdatatypes_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  return target;
}

size_t SubscribeBySourceTypeDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->marketdatatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->marketdatatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _marketdatatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
  if (this->has_securitysourcetypes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *securitysourcetypes_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeBySourceTypeDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeBySourceTypeDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeBySourceTypeDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
    MergeFrom(*source);
  }
}

void SubscribeBySourceTypeDetail::MergeFrom(const SubscribeBySourceTypeDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketdatatypes_.MergeFrom(from.marketdatatypes_);
  if (from.has_securitysourcetypes()) {
    mutable_securitysourcetypes()->::com::htsc::mdc::insight::model::SecuritySourceType::MergeFrom(from.securitysourcetypes());
  }
}

void SubscribeBySourceTypeDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeBySourceTypeDetail::CopyFrom(const SubscribeBySourceTypeDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeBySourceTypeDetail::IsInitialized() const {
  return true;
}

void SubscribeBySourceTypeDetail::Swap(SubscribeBySourceTypeDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeBySourceTypeDetail::InternalSwap(SubscribeBySourceTypeDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketdatatypes_.InternalSwap(&other->marketdatatypes_);
  swap(securitysourcetypes_, other->securitysourcetypes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeBySourceTypeDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MDSubscribeResponse::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_MDSubscribeResponse_default_instance_._instance.get_mutable()->errorcontext_ = const_cast< ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      ::com::htsc::mdc::insight::model::InsightErrorContext::internal_default_instance());
}
class MDSubscribeResponse::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const MDSubscribeResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
MDSubscribeResponse::HasBitSetters::errorcontext(const MDSubscribeResponse* msg) {
  return *msg->errorcontext_;
}
void MDSubscribeResponse::clear_errorcontext() {
  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDSubscribeResponse::kIsSuccessFieldNumber;
const int MDSubscribeResponse::kErrorContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDSubscribeResponse::MDSubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDSubscribeResponse)
}
MDSubscribeResponse::MDSubscribeResponse(const MDSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errorcontext()) {
    errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from.errorcontext_);
  } else {
    errorcontext_ = nullptr;
  }
  issuccess_ = from.issuccess_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDSubscribeResponse)
}

void MDSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MDSubscribeResponse_MDSubscribe_2eproto.base);
  ::memset(&errorcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuccess_) -
      reinterpret_cast<char*>(&errorcontext_)) + sizeof(issuccess_));
}

MDSubscribeResponse::~MDSubscribeResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDSubscribeResponse)
  SharedDtor();
}

void MDSubscribeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete errorcontext_;
}

void MDSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MDSubscribeResponse& MDSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MDSubscribeResponse_MDSubscribe_2eproto.base);
  return *internal_default_instance();
}


void MDSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && errorcontext_ != nullptr) {
    delete errorcontext_;
  }
  errorcontext_ = nullptr;
  issuccess_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MDSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MDSubscribeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isSuccess = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_errorcontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDSubscribeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDSubscribeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MDSubscribeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::errorcontext(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDSubscribeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MDSubscribeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::errorcontext(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDSubscribeResponse)
  return target;
}

size_t MDSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorcontext_);
  }

  // bool isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MDSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MDSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MDSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDSubscribeResponse)
    MergeFrom(*source);
  }
}

void MDSubscribeResponse::MergeFrom(const MDSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errorcontext()) {
    mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(from.errorcontext());
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
}

void MDSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDSubscribeResponse::CopyFrom(const MDSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDSubscribeResponse::IsInitialized() const {
  return true;
}

void MDSubscribeResponse::Swap(MDSubscribeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDSubscribeResponse::InternalSwap(MDSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(errorcontext_, other->errorcontext_);
  swap(issuccess_, other->issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MDSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDSubscribeRequest* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeAll* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeAll >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::SubscribeAll >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeByID* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeByID >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::SubscribeByID >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeByIDDetail* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeBySourceType* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeBySourceType >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::SubscribeBySourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDSubscribeResponse* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDSubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MDSubscribeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
