// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDHKGreyMarket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDHKGreyMarket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDHKGreyMarket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDHKGreyMarket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDHKGreyMarket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDHKGreyMarket_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDHKGreyMarket;
class MDHKGreyMarketDefaultTypeInternal;
extern MDHKGreyMarketDefaultTypeInternal _MDHKGreyMarket_default_instance_;
class MDHKGreyMarket_MarketEntry;
class MDHKGreyMarket_MarketEntryDefaultTypeInternal;
extern MDHKGreyMarket_MarketEntryDefaultTypeInternal _MDHKGreyMarket_MarketEntry_default_instance_;
class MDHKGreyMarket_OrderEntry;
class MDHKGreyMarket_OrderEntryDefaultTypeInternal;
extern MDHKGreyMarket_OrderEntryDefaultTypeInternal _MDHKGreyMarket_OrderEntry_default_instance_;
class MDHKGreyMarket_TradeEntry;
class MDHKGreyMarket_TradeEntryDefaultTypeInternal;
extern MDHKGreyMarket_TradeEntryDefaultTypeInternal _MDHKGreyMarket_TradeEntry_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDHKGreyMarket* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDHKGreyMarket_MarketEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry) */ {
 public:
  MDHKGreyMarket_MarketEntry();
  virtual ~MDHKGreyMarket_MarketEntry();

  MDHKGreyMarket_MarketEntry(const MDHKGreyMarket_MarketEntry& from);
  MDHKGreyMarket_MarketEntry(MDHKGreyMarket_MarketEntry&& from) noexcept
    : MDHKGreyMarket_MarketEntry() {
    *this = ::std::move(from);
  }

  inline MDHKGreyMarket_MarketEntry& operator=(const MDHKGreyMarket_MarketEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDHKGreyMarket_MarketEntry& operator=(MDHKGreyMarket_MarketEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDHKGreyMarket_MarketEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDHKGreyMarket_MarketEntry* internal_default_instance() {
    return reinterpret_cast<const MDHKGreyMarket_MarketEntry*>(
               &_MDHKGreyMarket_MarketEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDHKGreyMarket_MarketEntry* other);
  friend void swap(MDHKGreyMarket_MarketEntry& a, MDHKGreyMarket_MarketEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDHKGreyMarket_MarketEntry* New() const final {
    return CreateMaybeMessage<MDHKGreyMarket_MarketEntry>(nullptr);
  }

  MDHKGreyMarket_MarketEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDHKGreyMarket_MarketEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDHKGreyMarket_MarketEntry& from);
  void MergeFrom(const MDHKGreyMarket_MarketEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDHKGreyMarket_MarketEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDHKGreyMarket_2eproto);
    return ::descriptor_table_MDHKGreyMarket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
  int buyorderentries_size() const;
  void clear_buyorderentries();
  static const int kBuyOrderEntriesFieldNumber = 12;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* mutable_buyorderentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >*
      mutable_buyorderentries();
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& buyorderentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* add_buyorderentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >&
      buyorderentries() const;

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
  int sellorderentries_size() const;
  void clear_sellorderentries();
  static const int kSellOrderEntriesFieldNumber = 13;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* mutable_sellorderentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >*
      mutable_sellorderentries();
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& sellorderentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* add_sellorderentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >&
      sellorderentries() const;

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
  int tradeentries_size() const;
  void clear_tradeentries();
  static const int kTradeEntriesFieldNumber = 14;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* mutable_tradeentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >*
      mutable_tradeentries();
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry& tradeentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* add_tradeentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >&
      tradeentries() const;

  // int32 ChannelType = 1;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 channeltype() const;
  void set_channeltype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool ValidFlag = 2;
  void clear_validflag();
  static const int kValidFlagFieldNumber = 2;
  bool validflag() const;
  void set_validflag(bool value);

  // int64 PreClosePx = 3;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx() const;
  void set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 NumTrades = 4;
  void clear_numtrades();
  static const int kNumTradesFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 numtrades() const;
  void set_numtrades(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalVolumeTrade = 5;
  void clear_totalvolumetrade();
  static const int kTotalVolumeTradeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolumetrade() const;
  void set_totalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TotalValueTrade = 6;
  void clear_totalvaluetrade();
  static const int kTotalValueTradeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvaluetrade() const;
  void set_totalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LastPx = 7;
  void clear_lastpx();
  static const int kLastPxFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx() const;
  void set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OpenPx = 8;
  void clear_openpx();
  static const int kOpenPxFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 openpx() const;
  void set_openpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ClosePx = 9;
  void clear_closepx();
  static const int kClosePxFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 closepx() const;
  void set_closepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HighPx = 10;
  void clear_highpx();
  static const int kHighPxFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 highpx() const;
  void set_highpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 LowPx = 11;
  void clear_lowpx();
  static const int kLowPxFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 lowpx() const;
  void set_lowpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ExchangeDateTime = 15;
  void clear_exchangedatetime();
  static const int kExchangeDateTimeFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 exchangedatetime() const;
  void set_exchangedatetime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry > buyorderentries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry > sellorderentries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry > tradeentries_;
  ::PROTOBUF_NAMESPACE_ID::int32 channeltype_;
  bool validflag_;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 numtrades_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolumetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvaluetrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 openpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 closepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 highpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 lowpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchangedatetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDHKGreyMarket_2eproto;
};
// -------------------------------------------------------------------

class MDHKGreyMarket_OrderEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry) */ {
 public:
  MDHKGreyMarket_OrderEntry();
  virtual ~MDHKGreyMarket_OrderEntry();

  MDHKGreyMarket_OrderEntry(const MDHKGreyMarket_OrderEntry& from);
  MDHKGreyMarket_OrderEntry(MDHKGreyMarket_OrderEntry&& from) noexcept
    : MDHKGreyMarket_OrderEntry() {
    *this = ::std::move(from);
  }

  inline MDHKGreyMarket_OrderEntry& operator=(const MDHKGreyMarket_OrderEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDHKGreyMarket_OrderEntry& operator=(MDHKGreyMarket_OrderEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDHKGreyMarket_OrderEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDHKGreyMarket_OrderEntry* internal_default_instance() {
    return reinterpret_cast<const MDHKGreyMarket_OrderEntry*>(
               &_MDHKGreyMarket_OrderEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MDHKGreyMarket_OrderEntry* other);
  friend void swap(MDHKGreyMarket_OrderEntry& a, MDHKGreyMarket_OrderEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDHKGreyMarket_OrderEntry* New() const final {
    return CreateMaybeMessage<MDHKGreyMarket_OrderEntry>(nullptr);
  }

  MDHKGreyMarket_OrderEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDHKGreyMarket_OrderEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDHKGreyMarket_OrderEntry& from);
  void MergeFrom(const MDHKGreyMarket_OrderEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDHKGreyMarket_OrderEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDHKGreyMarket_2eproto);
    return ::descriptor_table_MDHKGreyMarket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 OrderPrice = 2;
  void clear_orderprice();
  static const int kOrderPriceFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 orderprice() const;
  void set_orderprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 OrderQty = 3;
  void clear_orderqty();
  static const int kOrderQtyFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 orderqty() const;
  void set_orderqty(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 NumOrders = 4;
  void clear_numorders();
  static const int kNumOrdersFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 numorders() const;
  void set_numorders(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 OrderLevel = 1;
  void clear_orderlevel();
  static const int kOrderLevelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 orderlevel() const;
  void set_orderlevel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderqty_;
  ::PROTOBUF_NAMESPACE_ID::int64 numorders_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDHKGreyMarket_2eproto;
};
// -------------------------------------------------------------------

class MDHKGreyMarket_TradeEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry) */ {
 public:
  MDHKGreyMarket_TradeEntry();
  virtual ~MDHKGreyMarket_TradeEntry();

  MDHKGreyMarket_TradeEntry(const MDHKGreyMarket_TradeEntry& from);
  MDHKGreyMarket_TradeEntry(MDHKGreyMarket_TradeEntry&& from) noexcept
    : MDHKGreyMarket_TradeEntry() {
    *this = ::std::move(from);
  }

  inline MDHKGreyMarket_TradeEntry& operator=(const MDHKGreyMarket_TradeEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDHKGreyMarket_TradeEntry& operator=(MDHKGreyMarket_TradeEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDHKGreyMarket_TradeEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDHKGreyMarket_TradeEntry* internal_default_instance() {
    return reinterpret_cast<const MDHKGreyMarket_TradeEntry*>(
               &_MDHKGreyMarket_TradeEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MDHKGreyMarket_TradeEntry* other);
  friend void swap(MDHKGreyMarket_TradeEntry& a, MDHKGreyMarket_TradeEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDHKGreyMarket_TradeEntry* New() const final {
    return CreateMaybeMessage<MDHKGreyMarket_TradeEntry>(nullptr);
  }

  MDHKGreyMarket_TradeEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDHKGreyMarket_TradeEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDHKGreyMarket_TradeEntry& from);
  void MergeFrom(const MDHKGreyMarket_TradeEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDHKGreyMarket_TradeEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDHKGreyMarket_2eproto);
    return ::descriptor_table_MDHKGreyMarket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 TradePrice = 2;
  void clear_tradeprice();
  static const int kTradePriceFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 tradeprice() const;
  void set_tradeprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradeQty = 3;
  void clear_tradeqty();
  static const int kTradeQtyFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 tradeqty() const;
  void set_tradeqty(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradeTime = 4;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 tradetime() const;
  void set_tradetime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 TradeLevel = 1;
  void clear_tradelevel();
  static const int kTradeLevelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 tradelevel() const;
  void set_tradelevel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradeprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradeqty_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 tradelevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDHKGreyMarket_2eproto;
};
// -------------------------------------------------------------------

class MDHKGreyMarket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDHKGreyMarket) */ {
 public:
  MDHKGreyMarket();
  virtual ~MDHKGreyMarket();

  MDHKGreyMarket(const MDHKGreyMarket& from);
  MDHKGreyMarket(MDHKGreyMarket&& from) noexcept
    : MDHKGreyMarket() {
    *this = ::std::move(from);
  }

  inline MDHKGreyMarket& operator=(const MDHKGreyMarket& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDHKGreyMarket& operator=(MDHKGreyMarket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDHKGreyMarket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDHKGreyMarket* internal_default_instance() {
    return reinterpret_cast<const MDHKGreyMarket*>(
               &_MDHKGreyMarket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MDHKGreyMarket* other);
  friend void swap(MDHKGreyMarket& a, MDHKGreyMarket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDHKGreyMarket* New() const final {
    return CreateMaybeMessage<MDHKGreyMarket>(nullptr);
  }

  MDHKGreyMarket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDHKGreyMarket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDHKGreyMarket& from);
  void MergeFrom(const MDHKGreyMarket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDHKGreyMarket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDHKGreyMarket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDHKGreyMarket_2eproto);
    return ::descriptor_table_MDHKGreyMarket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MDHKGreyMarket_MarketEntry MarketEntry;
  typedef MDHKGreyMarket_OrderEntry OrderEntry;
  typedef MDHKGreyMarket_TradeEntry TradeEntry;

  // accessors -------------------------------------------------------

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
  int marketentries_size() const;
  void clear_marketentries();
  static const int kMarketEntriesFieldNumber = 9;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* mutable_marketentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >*
      mutable_marketentries();
  const ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry& marketentries(int index) const;
  ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* add_marketentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >&
      marketentries() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 5;
  const std::string& tradingphasecode() const;
  void set_tradingphasecode(const std::string& value);
  void set_tradingphasecode(std::string&& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  std::string* mutable_tradingphasecode();
  std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int64 ApplSeqNum = 8;
  void clear_applseqnum();
  static const int kApplSeqNumFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 applseqnum() const;
  void set_applseqnum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 DataMultiplePowerOf10 = 10;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDHKGreyMarket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry > marketentries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int64 applseqnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDHKGreyMarket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDHKGreyMarket_MarketEntry

// int32 ChannelType = 1;
inline void MDHKGreyMarket_MarketEntry::clear_channeltype() {
  channeltype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDHKGreyMarket_MarketEntry::channeltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ChannelType)
  return channeltype_;
}
inline void MDHKGreyMarket_MarketEntry::set_channeltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ChannelType)
}

// bool ValidFlag = 2;
inline void MDHKGreyMarket_MarketEntry::clear_validflag() {
  validflag_ = false;
}
inline bool MDHKGreyMarket_MarketEntry::validflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ValidFlag)
  return validflag_;
}
inline void MDHKGreyMarket_MarketEntry::set_validflag(bool value) {
  
  validflag_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ValidFlag)
}

// int64 PreClosePx = 3;
inline void MDHKGreyMarket_MarketEntry::clear_preclosepx() {
  preclosepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.PreClosePx)
  return preclosepx_;
}
inline void MDHKGreyMarket_MarketEntry::set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.PreClosePx)
}

// int64 NumTrades = 4;
inline void MDHKGreyMarket_MarketEntry::clear_numtrades() {
  numtrades_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.NumTrades)
  return numtrades_;
}
inline void MDHKGreyMarket_MarketEntry::set_numtrades(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.NumTrades)
}

// int64 TotalVolumeTrade = 5;
inline void MDHKGreyMarket_MarketEntry::clear_totalvolumetrade() {
  totalvolumetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TotalVolumeTrade)
  return totalvolumetrade_;
}
inline void MDHKGreyMarket_MarketEntry::set_totalvolumetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TotalVolumeTrade)
}

// int64 TotalValueTrade = 6;
inline void MDHKGreyMarket_MarketEntry::clear_totalvaluetrade() {
  totalvaluetrade_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TotalValueTrade)
  return totalvaluetrade_;
}
inline void MDHKGreyMarket_MarketEntry::set_totalvaluetrade(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TotalValueTrade)
}

// int64 LastPx = 7;
inline void MDHKGreyMarket_MarketEntry::clear_lastpx() {
  lastpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.LastPx)
  return lastpx_;
}
inline void MDHKGreyMarket_MarketEntry::set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.LastPx)
}

// int64 OpenPx = 8;
inline void MDHKGreyMarket_MarketEntry::clear_openpx() {
  openpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.OpenPx)
  return openpx_;
}
inline void MDHKGreyMarket_MarketEntry::set_openpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  openpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.OpenPx)
}

// int64 ClosePx = 9;
inline void MDHKGreyMarket_MarketEntry::clear_closepx() {
  closepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ClosePx)
  return closepx_;
}
inline void MDHKGreyMarket_MarketEntry::set_closepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ClosePx)
}

// int64 HighPx = 10;
inline void MDHKGreyMarket_MarketEntry::clear_highpx() {
  highpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.HighPx)
  return highpx_;
}
inline void MDHKGreyMarket_MarketEntry::set_highpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  highpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.HighPx)
}

// int64 LowPx = 11;
inline void MDHKGreyMarket_MarketEntry::clear_lowpx() {
  lowpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.LowPx)
  return lowpx_;
}
inline void MDHKGreyMarket_MarketEntry::set_lowpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.LowPx)
}

// repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
inline int MDHKGreyMarket_MarketEntry::buyorderentries_size() const {
  return buyorderentries_.size();
}
inline void MDHKGreyMarket_MarketEntry::clear_buyorderentries() {
  buyorderentries_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::mutable_buyorderentries(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return buyorderentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >*
MDHKGreyMarket_MarketEntry::mutable_buyorderentries() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return &buyorderentries_;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& MDHKGreyMarket_MarketEntry::buyorderentries(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return buyorderentries_.Get(index);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::add_buyorderentries() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return buyorderentries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >&
MDHKGreyMarket_MarketEntry::buyorderentries() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.BuyOrderEntries)
  return buyorderentries_;
}

// repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
inline int MDHKGreyMarket_MarketEntry::sellorderentries_size() const {
  return sellorderentries_.size();
}
inline void MDHKGreyMarket_MarketEntry::clear_sellorderentries() {
  sellorderentries_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::mutable_sellorderentries(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return sellorderentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >*
MDHKGreyMarket_MarketEntry::mutable_sellorderentries() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return &sellorderentries_;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry& MDHKGreyMarket_MarketEntry::sellorderentries(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return sellorderentries_.Get(index);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry* MDHKGreyMarket_MarketEntry::add_sellorderentries() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return sellorderentries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >&
MDHKGreyMarket_MarketEntry::sellorderentries() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.SellOrderEntries)
  return sellorderentries_;
}

// repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
inline int MDHKGreyMarket_MarketEntry::tradeentries_size() const {
  return tradeentries_.size();
}
inline void MDHKGreyMarket_MarketEntry::clear_tradeentries() {
  tradeentries_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* MDHKGreyMarket_MarketEntry::mutable_tradeentries(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return tradeentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >*
MDHKGreyMarket_MarketEntry::mutable_tradeentries() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return &tradeentries_;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry& MDHKGreyMarket_MarketEntry::tradeentries(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return tradeentries_.Get(index);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry* MDHKGreyMarket_MarketEntry::add_tradeentries() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return tradeentries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >&
MDHKGreyMarket_MarketEntry::tradeentries() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.TradeEntries)
  return tradeentries_;
}

// int64 ExchangeDateTime = 15;
inline void MDHKGreyMarket_MarketEntry::clear_exchangedatetime() {
  exchangedatetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_MarketEntry::exchangedatetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ExchangeDateTime)
  return exchangedatetime_;
}
inline void MDHKGreyMarket_MarketEntry::set_exchangedatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchangedatetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry.ExchangeDateTime)
}

// -------------------------------------------------------------------

// MDHKGreyMarket_OrderEntry

// int32 OrderLevel = 1;
inline void MDHKGreyMarket_OrderEntry::clear_orderlevel() {
  orderlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDHKGreyMarket_OrderEntry::orderlevel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderLevel)
  return orderlevel_;
}
inline void MDHKGreyMarket_OrderEntry::set_orderlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderlevel_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderLevel)
}

// int64 OrderPrice = 2;
inline void MDHKGreyMarket_OrderEntry::clear_orderprice() {
  orderprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_OrderEntry::orderprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderPrice)
  return orderprice_;
}
inline void MDHKGreyMarket_OrderEntry::set_orderprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderPrice)
}

// int64 OrderQty = 3;
inline void MDHKGreyMarket_OrderEntry::clear_orderqty() {
  orderqty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_OrderEntry::orderqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderQty)
  return orderqty_;
}
inline void MDHKGreyMarket_OrderEntry::set_orderqty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.OrderQty)
}

// int64 NumOrders = 4;
inline void MDHKGreyMarket_OrderEntry::clear_numorders() {
  numorders_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_OrderEntry::numorders() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.NumOrders)
  return numorders_;
}
inline void MDHKGreyMarket_OrderEntry::set_numorders(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numorders_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry.NumOrders)
}

// -------------------------------------------------------------------

// MDHKGreyMarket_TradeEntry

// int32 TradeLevel = 1;
inline void MDHKGreyMarket_TradeEntry::clear_tradelevel() {
  tradelevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDHKGreyMarket_TradeEntry::tradelevel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeLevel)
  return tradelevel_;
}
inline void MDHKGreyMarket_TradeEntry::set_tradelevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tradelevel_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeLevel)
}

// int64 TradePrice = 2;
inline void MDHKGreyMarket_TradeEntry::clear_tradeprice() {
  tradeprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_TradeEntry::tradeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradePrice)
  return tradeprice_;
}
inline void MDHKGreyMarket_TradeEntry::set_tradeprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradeprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradePrice)
}

// int64 TradeQty = 3;
inline void MDHKGreyMarket_TradeEntry::clear_tradeqty() {
  tradeqty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_TradeEntry::tradeqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeQty)
  return tradeqty_;
}
inline void MDHKGreyMarket_TradeEntry::set_tradeqty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradeqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeQty)
}

// int64 TradeTime = 4;
inline void MDHKGreyMarket_TradeEntry::clear_tradetime() {
  tradetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket_TradeEntry::tradetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeTime)
  return tradetime_;
}
inline void MDHKGreyMarket_TradeEntry::set_tradetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry.TradeTime)
}

// -------------------------------------------------------------------

// MDHKGreyMarket

// string HTSCSecurityID = 1;
inline void MDHKGreyMarket::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDHKGreyMarket::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void MDHKGreyMarket::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
}
inline void MDHKGreyMarket::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
}
inline void MDHKGreyMarket::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
}
inline void MDHKGreyMarket::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
}
inline std::string* MDHKGreyMarket::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDHKGreyMarket::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDHKGreyMarket::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDHKGreyMarket::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDHKGreyMarket::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MDDate)
  return mddate_;
}
inline void MDHKGreyMarket::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MDDate)
}

// int32 MDTime = 3;
inline void MDHKGreyMarket::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDHKGreyMarket::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MDTime)
  return mdtime_;
}
inline void MDHKGreyMarket::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDHKGreyMarket::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.DataTimestamp)
  return datatimestamp_;
}
inline void MDHKGreyMarket::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDHKGreyMarket::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDHKGreyMarket::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
  return tradingphasecode_.GetNoArena();
}
inline void MDHKGreyMarket::set_tradingphasecode(const std::string& value) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
}
inline void MDHKGreyMarket::set_tradingphasecode(std::string&& value) {
  
  tradingphasecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
}
inline void MDHKGreyMarket::set_tradingphasecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
}
inline void MDHKGreyMarket::set_tradingphasecode(const char* value, size_t size) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
}
inline std::string* MDHKGreyMarket::mutable_tradingphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDHKGreyMarket::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
  
  return tradingphasecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDHKGreyMarket::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  tradingphasecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDHKGreyMarket::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDHKGreyMarket::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void MDHKGreyMarket::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDHKGreyMarket::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDHKGreyMarket::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void MDHKGreyMarket::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.securityType)
}

// int64 ApplSeqNum = 8;
inline void MDHKGreyMarket::clear_applseqnum() {
  applseqnum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDHKGreyMarket::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.ApplSeqNum)
  return applseqnum_;
}
inline void MDHKGreyMarket::set_applseqnum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  applseqnum_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.ApplSeqNum)
}

// repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
inline int MDHKGreyMarket::marketentries_size() const {
  return marketentries_.size();
}
inline void MDHKGreyMarket::clear_marketentries() {
  marketentries_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* MDHKGreyMarket::mutable_marketentries(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return marketentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >*
MDHKGreyMarket::mutable_marketentries() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return &marketentries_;
}
inline const ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry& MDHKGreyMarket::marketentries(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return marketentries_.Get(index);
}
inline ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry* MDHKGreyMarket::add_marketentries() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return marketentries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >&
MDHKGreyMarket::marketentries() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntries)
  return marketentries_;
}

// int32 DataMultiplePowerOf10 = 10;
inline void MDHKGreyMarket::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDHKGreyMarket::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDHKGreyMarket.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void MDHKGreyMarket::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDHKGreyMarket.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDHKGreyMarket_2eproto
