// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBody.proto

#include "MessageBody.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_InsightErrorContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsightErrorContext_InsightErrorContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LoginRequest_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LoginResponse_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDQuery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MDQueryRequest_MDQuery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDQuery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MDQueryResponse_MDQuery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MDSubscribeRequest_MDSubscribe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDSubscribeResponse_MDSubscribe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<42> scc_info_MarketData_MarketData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataStream_MarketData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaybackControlRequest_MDPlayback_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaybackControlResponse_MDPlayback_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaybackPayload_MDPlayback_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaybackRequest_MDPlayback_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaybackResponse_MDPlayback_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaybackStatus_MDPlayback_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaybackStatusRequest_MDPlayback_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceDiscovery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceDiscoveryRequest_ServiceDiscovery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServiceDiscovery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServiceDiscoveryResponse_ServiceDiscovery_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MessageBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageBody> _instance;
} _MessageBody_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_MessageBody_MessageBody_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MessageBody_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MessageBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MessageBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_MessageBody_MessageBody_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 18, InitDefaultsscc_info_MessageBody_MessageBody_2eproto}, {
      &scc_info_InsightErrorContext_InsightErrorContext_2eproto.base,
      &scc_info_LoginRequest_Login_2eproto.base,
      &scc_info_LoginResponse_Login_2eproto.base,
      &scc_info_ServiceDiscoveryRequest_ServiceDiscovery_2eproto.base,
      &scc_info_ServiceDiscoveryResponse_ServiceDiscovery_2eproto.base,
      &scc_info_MDSubscribeRequest_MDSubscribe_2eproto.base,
      &scc_info_MDSubscribeResponse_MDSubscribe_2eproto.base,
      &scc_info_MarketData_MarketData_2eproto.base,
      &scc_info_MarketDataStream_MarketData_2eproto.base,
      &scc_info_MDQueryRequest_MDQuery_2eproto.base,
      &scc_info_MDQueryResponse_MDQuery_2eproto.base,
      &scc_info_PlaybackRequest_MDPlayback_2eproto.base,
      &scc_info_PlaybackResponse_MDPlayback_2eproto.base,
      &scc_info_PlaybackControlRequest_MDPlayback_2eproto.base,
      &scc_info_PlaybackControlResponse_MDPlayback_2eproto.base,
      &scc_info_PlaybackStatusRequest_MDPlayback_2eproto.base,
      &scc_info_PlaybackStatus_MDPlayback_2eproto.base,
      &scc_info_PlaybackPayload_MDPlayback_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MessageBody_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MessageBody_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MessageBody_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MessageBody_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, type_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, interactionid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, generalerrormessage_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, loginrequest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, loginresponse_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, servicediscoveryrequest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, servicediscoveryresponse_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, mdsubscriberequest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, mdsubscriberesponse_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, pushmarketdata_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, pushmarketdatastream_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, mdqueryrequest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, mdqueryresponse_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, playbackrequest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, playbackresponse_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, playbackcontrolrequest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, playbackcontrolresponse_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, playbackstatusrequest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, playbackstatus_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MessageBody, playbackpayload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::MessageBody)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MessageBody_default_instance_),
};

const char descriptor_table_protodef_MessageBody_2eproto[] =
  "\n\021MessageBody.proto\022\032com.htsc.mdc.insigh"
  "t.model\032\022EMessageType.proto\032\013Login.proto"
  "\032\026ServiceDiscovery.proto\032\021MDSubscribe.pr"
  "oto\032\020MarketData.proto\032\031InsightErrorConte"
  "xt.proto\032\rMDQuery.proto\032\020MDPlayback.prot"
  "o\"\236\013\n\013MessageBody\0226\n\004type\030\001 \001(\0162(.com.ht"
  "sc.mdc.insight.model.EMessageType\022\025\n\rint"
  "eractionId\030\002 \001(\003\022L\n\023generalErrorMessage\030"
  "\n \001(\0132/.com.htsc.mdc.insight.model.Insig"
  "htErrorContext\022>\n\014loginRequest\030\013 \001(\0132(.c"
  "om.htsc.mdc.insight.model.LoginRequest\022@"
  "\n\rloginResponse\030\014 \001(\0132).com.htsc.mdc.ins"
  "ight.model.LoginResponse\022T\n\027serviceDisco"
  "veryRequest\030\r \001(\01323.com.htsc.mdc.insight"
  ".model.ServiceDiscoveryRequest\022V\n\030servic"
  "eDiscoveryResponse\030\016 \001(\01324.com.htsc.mdc."
  "insight.model.ServiceDiscoveryResponse\022J"
  "\n\022mdSubscribeRequest\030\017 \001(\0132..com.htsc.md"
  "c.insight.model.MDSubscribeRequest\022L\n\023md"
  "SubscribeResponse\030\020 \001(\0132/.com.htsc.mdc.i"
  "nsight.model.MDSubscribeResponse\022>\n\016push"
  "MarketData\030\024 \001(\0132&.com.htsc.mdc.insight."
  "model.MarketData\022J\n\024pushMarketDataStream"
  "\030\025 \001(\0132,.com.htsc.mdc.insight.model.Mark"
  "etDataStream\022B\n\016mdQueryRequest\030\036 \001(\0132*.c"
  "om.htsc.mdc.insight.model.MDQueryRequest"
  "\022D\n\017mdQueryResponse\030\037 \001(\0132+.com.htsc.mdc"
  ".insight.model.MDQueryResponse\022D\n\017playba"
  "ckRequest\030  \001(\0132+.com.htsc.mdc.insight.m"
  "odel.PlaybackRequest\022F\n\020playbackResponse"
  "\030! \001(\0132,.com.htsc.mdc.insight.model.Play"
  "backResponse\022R\n\026playbackControlRequest\030\""
  " \001(\01322.com.htsc.mdc.insight.model.Playba"
  "ckControlRequest\022T\n\027playbackControlRespo"
  "nse\030# \001(\01323.com.htsc.mdc.insight.model.P"
  "laybackControlResponse\022P\n\025playbackStatus"
  "Request\030$ \001(\01321.com.htsc.mdc.insight.mod"
  "el.PlaybackStatusRequest\022B\n\016playbackStat"
  "us\030% \001(\0132*.com.htsc.mdc.insight.model.Pl"
  "aybackStatus\022D\n\017playbackPayload\030& \001(\0132+."
  "com.htsc.mdc.insight.model.PlaybackPaylo"
  "adB3\n\032com.htsc.mdc.insight.modelB\020Messag"
  "eBodyProtoH\001\240\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MessageBody_2eproto_deps[8] = {
  &::descriptor_table_EMessageType_2eproto,
  &::descriptor_table_InsightErrorContext_2eproto,
  &::descriptor_table_Login_2eproto,
  &::descriptor_table_MDPlayback_2eproto,
  &::descriptor_table_MDQuery_2eproto,
  &::descriptor_table_MDSubscribe_2eproto,
  &::descriptor_table_MarketData_2eproto,
  &::descriptor_table_ServiceDiscovery_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MessageBody_2eproto_sccs[1] = {
  &scc_info_MessageBody_MessageBody_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MessageBody_2eproto_once;
static bool descriptor_table_MessageBody_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageBody_2eproto = {
  &descriptor_table_MessageBody_2eproto_initialized, descriptor_table_protodef_MessageBody_2eproto, "MessageBody.proto", 1703,
  &descriptor_table_MessageBody_2eproto_once, descriptor_table_MessageBody_2eproto_sccs, descriptor_table_MessageBody_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_MessageBody_2eproto::offsets,
  file_level_metadata_MessageBody_2eproto, 1, file_level_enum_descriptors_MessageBody_2eproto, file_level_service_descriptors_MessageBody_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MessageBody_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MessageBody_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void MessageBody::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->generalerrormessage_ = const_cast< ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      ::com::htsc::mdc::insight::model::InsightErrorContext::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->loginrequest_ = const_cast< ::com::htsc::mdc::insight::model::LoginRequest*>(
      ::com::htsc::mdc::insight::model::LoginRequest::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->loginresponse_ = const_cast< ::com::htsc::mdc::insight::model::LoginResponse*>(
      ::com::htsc::mdc::insight::model::LoginResponse::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->servicediscoveryrequest_ = const_cast< ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest*>(
      ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->servicediscoveryresponse_ = const_cast< ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse*>(
      ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->mdsubscriberequest_ = const_cast< ::com::htsc::mdc::insight::model::MDSubscribeRequest*>(
      ::com::htsc::mdc::insight::model::MDSubscribeRequest::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->mdsubscriberesponse_ = const_cast< ::com::htsc::mdc::insight::model::MDSubscribeResponse*>(
      ::com::htsc::mdc::insight::model::MDSubscribeResponse::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->pushmarketdata_ = const_cast< ::com::htsc::mdc::insight::model::MarketData*>(
      ::com::htsc::mdc::insight::model::MarketData::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->pushmarketdatastream_ = const_cast< ::com::htsc::mdc::insight::model::MarketDataStream*>(
      ::com::htsc::mdc::insight::model::MarketDataStream::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->mdqueryrequest_ = const_cast< ::com::htsc::mdc::insight::model::MDQueryRequest*>(
      ::com::htsc::mdc::insight::model::MDQueryRequest::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->mdqueryresponse_ = const_cast< ::com::htsc::mdc::insight::model::MDQueryResponse*>(
      ::com::htsc::mdc::insight::model::MDQueryResponse::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->playbackrequest_ = const_cast< ::com::htsc::mdc::insight::model::PlaybackRequest*>(
      ::com::htsc::mdc::insight::model::PlaybackRequest::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->playbackresponse_ = const_cast< ::com::htsc::mdc::insight::model::PlaybackResponse*>(
      ::com::htsc::mdc::insight::model::PlaybackResponse::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->playbackcontrolrequest_ = const_cast< ::com::htsc::mdc::insight::model::PlaybackControlRequest*>(
      ::com::htsc::mdc::insight::model::PlaybackControlRequest::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->playbackcontrolresponse_ = const_cast< ::com::htsc::mdc::insight::model::PlaybackControlResponse*>(
      ::com::htsc::mdc::insight::model::PlaybackControlResponse::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->playbackstatusrequest_ = const_cast< ::com::htsc::mdc::insight::model::PlaybackStatusRequest*>(
      ::com::htsc::mdc::insight::model::PlaybackStatusRequest::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->playbackstatus_ = const_cast< ::com::htsc::mdc::insight::model::PlaybackStatus*>(
      ::com::htsc::mdc::insight::model::PlaybackStatus::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MessageBody_default_instance_._instance.get_mutable()->playbackpayload_ = const_cast< ::com::htsc::mdc::insight::model::PlaybackPayload*>(
      ::com::htsc::mdc::insight::model::PlaybackPayload::internal_default_instance());
}
class MessageBody::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& generalerrormessage(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::LoginRequest& loginrequest(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::LoginResponse& loginresponse(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest& servicediscoveryrequest(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& servicediscoveryresponse(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::MDSubscribeRequest& mdsubscriberequest(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::MDSubscribeResponse& mdsubscriberesponse(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::MarketData& pushmarketdata(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::MarketDataStream& pushmarketdatastream(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::MDQueryRequest& mdqueryrequest(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::MDQueryResponse& mdqueryresponse(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::PlaybackRequest& playbackrequest(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::PlaybackResponse& playbackresponse(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::PlaybackControlRequest& playbackcontrolrequest(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::PlaybackControlResponse& playbackcontrolresponse(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::PlaybackStatusRequest& playbackstatusrequest(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::PlaybackStatus& playbackstatus(const MessageBody* msg);
  static const ::com::htsc::mdc::insight::model::PlaybackPayload& playbackpayload(const MessageBody* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
MessageBody::HasBitSetters::generalerrormessage(const MessageBody* msg) {
  return *msg->generalerrormessage_;
}
const ::com::htsc::mdc::insight::model::LoginRequest&
MessageBody::HasBitSetters::loginrequest(const MessageBody* msg) {
  return *msg->loginrequest_;
}
const ::com::htsc::mdc::insight::model::LoginResponse&
MessageBody::HasBitSetters::loginresponse(const MessageBody* msg) {
  return *msg->loginresponse_;
}
const ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest&
MessageBody::HasBitSetters::servicediscoveryrequest(const MessageBody* msg) {
  return *msg->servicediscoveryrequest_;
}
const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse&
MessageBody::HasBitSetters::servicediscoveryresponse(const MessageBody* msg) {
  return *msg->servicediscoveryresponse_;
}
const ::com::htsc::mdc::insight::model::MDSubscribeRequest&
MessageBody::HasBitSetters::mdsubscriberequest(const MessageBody* msg) {
  return *msg->mdsubscriberequest_;
}
const ::com::htsc::mdc::insight::model::MDSubscribeResponse&
MessageBody::HasBitSetters::mdsubscriberesponse(const MessageBody* msg) {
  return *msg->mdsubscriberesponse_;
}
const ::com::htsc::mdc::insight::model::MarketData&
MessageBody::HasBitSetters::pushmarketdata(const MessageBody* msg) {
  return *msg->pushmarketdata_;
}
const ::com::htsc::mdc::insight::model::MarketDataStream&
MessageBody::HasBitSetters::pushmarketdatastream(const MessageBody* msg) {
  return *msg->pushmarketdatastream_;
}
const ::com::htsc::mdc::insight::model::MDQueryRequest&
MessageBody::HasBitSetters::mdqueryrequest(const MessageBody* msg) {
  return *msg->mdqueryrequest_;
}
const ::com::htsc::mdc::insight::model::MDQueryResponse&
MessageBody::HasBitSetters::mdqueryresponse(const MessageBody* msg) {
  return *msg->mdqueryresponse_;
}
const ::com::htsc::mdc::insight::model::PlaybackRequest&
MessageBody::HasBitSetters::playbackrequest(const MessageBody* msg) {
  return *msg->playbackrequest_;
}
const ::com::htsc::mdc::insight::model::PlaybackResponse&
MessageBody::HasBitSetters::playbackresponse(const MessageBody* msg) {
  return *msg->playbackresponse_;
}
const ::com::htsc::mdc::insight::model::PlaybackControlRequest&
MessageBody::HasBitSetters::playbackcontrolrequest(const MessageBody* msg) {
  return *msg->playbackcontrolrequest_;
}
const ::com::htsc::mdc::insight::model::PlaybackControlResponse&
MessageBody::HasBitSetters::playbackcontrolresponse(const MessageBody* msg) {
  return *msg->playbackcontrolresponse_;
}
const ::com::htsc::mdc::insight::model::PlaybackStatusRequest&
MessageBody::HasBitSetters::playbackstatusrequest(const MessageBody* msg) {
  return *msg->playbackstatusrequest_;
}
const ::com::htsc::mdc::insight::model::PlaybackStatus&
MessageBody::HasBitSetters::playbackstatus(const MessageBody* msg) {
  return *msg->playbackstatus_;
}
const ::com::htsc::mdc::insight::model::PlaybackPayload&
MessageBody::HasBitSetters::playbackpayload(const MessageBody* msg) {
  return *msg->playbackpayload_;
}
void MessageBody::clear_generalerrormessage() {
  if (GetArenaNoVirtual() == nullptr && generalerrormessage_ != nullptr) {
    delete generalerrormessage_;
  }
  generalerrormessage_ = nullptr;
}
void MessageBody::clear_loginrequest() {
  if (GetArenaNoVirtual() == nullptr && loginrequest_ != nullptr) {
    delete loginrequest_;
  }
  loginrequest_ = nullptr;
}
void MessageBody::clear_loginresponse() {
  if (GetArenaNoVirtual() == nullptr && loginresponse_ != nullptr) {
    delete loginresponse_;
  }
  loginresponse_ = nullptr;
}
void MessageBody::clear_servicediscoveryrequest() {
  if (GetArenaNoVirtual() == nullptr && servicediscoveryrequest_ != nullptr) {
    delete servicediscoveryrequest_;
  }
  servicediscoveryrequest_ = nullptr;
}
void MessageBody::clear_servicediscoveryresponse() {
  if (GetArenaNoVirtual() == nullptr && servicediscoveryresponse_ != nullptr) {
    delete servicediscoveryresponse_;
  }
  servicediscoveryresponse_ = nullptr;
}
void MessageBody::clear_mdsubscriberequest() {
  if (GetArenaNoVirtual() == nullptr && mdsubscriberequest_ != nullptr) {
    delete mdsubscriberequest_;
  }
  mdsubscriberequest_ = nullptr;
}
void MessageBody::clear_mdsubscriberesponse() {
  if (GetArenaNoVirtual() == nullptr && mdsubscriberesponse_ != nullptr) {
    delete mdsubscriberesponse_;
  }
  mdsubscriberesponse_ = nullptr;
}
void MessageBody::clear_pushmarketdata() {
  if (GetArenaNoVirtual() == nullptr && pushmarketdata_ != nullptr) {
    delete pushmarketdata_;
  }
  pushmarketdata_ = nullptr;
}
void MessageBody::clear_pushmarketdatastream() {
  if (GetArenaNoVirtual() == nullptr && pushmarketdatastream_ != nullptr) {
    delete pushmarketdatastream_;
  }
  pushmarketdatastream_ = nullptr;
}
void MessageBody::clear_mdqueryrequest() {
  if (GetArenaNoVirtual() == nullptr && mdqueryrequest_ != nullptr) {
    delete mdqueryrequest_;
  }
  mdqueryrequest_ = nullptr;
}
void MessageBody::clear_mdqueryresponse() {
  if (GetArenaNoVirtual() == nullptr && mdqueryresponse_ != nullptr) {
    delete mdqueryresponse_;
  }
  mdqueryresponse_ = nullptr;
}
void MessageBody::clear_playbackrequest() {
  if (GetArenaNoVirtual() == nullptr && playbackrequest_ != nullptr) {
    delete playbackrequest_;
  }
  playbackrequest_ = nullptr;
}
void MessageBody::clear_playbackresponse() {
  if (GetArenaNoVirtual() == nullptr && playbackresponse_ != nullptr) {
    delete playbackresponse_;
  }
  playbackresponse_ = nullptr;
}
void MessageBody::clear_playbackcontrolrequest() {
  if (GetArenaNoVirtual() == nullptr && playbackcontrolrequest_ != nullptr) {
    delete playbackcontrolrequest_;
  }
  playbackcontrolrequest_ = nullptr;
}
void MessageBody::clear_playbackcontrolresponse() {
  if (GetArenaNoVirtual() == nullptr && playbackcontrolresponse_ != nullptr) {
    delete playbackcontrolresponse_;
  }
  playbackcontrolresponse_ = nullptr;
}
void MessageBody::clear_playbackstatusrequest() {
  if (GetArenaNoVirtual() == nullptr && playbackstatusrequest_ != nullptr) {
    delete playbackstatusrequest_;
  }
  playbackstatusrequest_ = nullptr;
}
void MessageBody::clear_playbackstatus() {
  if (GetArenaNoVirtual() == nullptr && playbackstatus_ != nullptr) {
    delete playbackstatus_;
  }
  playbackstatus_ = nullptr;
}
void MessageBody::clear_playbackpayload() {
  if (GetArenaNoVirtual() == nullptr && playbackpayload_ != nullptr) {
    delete playbackpayload_;
  }
  playbackpayload_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageBody::kTypeFieldNumber;
const int MessageBody::kInteractionIdFieldNumber;
const int MessageBody::kGeneralErrorMessageFieldNumber;
const int MessageBody::kLoginRequestFieldNumber;
const int MessageBody::kLoginResponseFieldNumber;
const int MessageBody::kServiceDiscoveryRequestFieldNumber;
const int MessageBody::kServiceDiscoveryResponseFieldNumber;
const int MessageBody::kMdSubscribeRequestFieldNumber;
const int MessageBody::kMdSubscribeResponseFieldNumber;
const int MessageBody::kPushMarketDataFieldNumber;
const int MessageBody::kPushMarketDataStreamFieldNumber;
const int MessageBody::kMdQueryRequestFieldNumber;
const int MessageBody::kMdQueryResponseFieldNumber;
const int MessageBody::kPlaybackRequestFieldNumber;
const int MessageBody::kPlaybackResponseFieldNumber;
const int MessageBody::kPlaybackControlRequestFieldNumber;
const int MessageBody::kPlaybackControlResponseFieldNumber;
const int MessageBody::kPlaybackStatusRequestFieldNumber;
const int MessageBody::kPlaybackStatusFieldNumber;
const int MessageBody::kPlaybackPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageBody::MessageBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MessageBody)
}
MessageBody::MessageBody(const MessageBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_generalerrormessage()) {
    generalerrormessage_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from.generalerrormessage_);
  } else {
    generalerrormessage_ = nullptr;
  }
  if (from.has_loginrequest()) {
    loginrequest_ = new ::com::htsc::mdc::insight::model::LoginRequest(*from.loginrequest_);
  } else {
    loginrequest_ = nullptr;
  }
  if (from.has_loginresponse()) {
    loginresponse_ = new ::com::htsc::mdc::insight::model::LoginResponse(*from.loginresponse_);
  } else {
    loginresponse_ = nullptr;
  }
  if (from.has_servicediscoveryrequest()) {
    servicediscoveryrequest_ = new ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest(*from.servicediscoveryrequest_);
  } else {
    servicediscoveryrequest_ = nullptr;
  }
  if (from.has_servicediscoveryresponse()) {
    servicediscoveryresponse_ = new ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse(*from.servicediscoveryresponse_);
  } else {
    servicediscoveryresponse_ = nullptr;
  }
  if (from.has_mdsubscriberequest()) {
    mdsubscriberequest_ = new ::com::htsc::mdc::insight::model::MDSubscribeRequest(*from.mdsubscriberequest_);
  } else {
    mdsubscriberequest_ = nullptr;
  }
  if (from.has_mdsubscriberesponse()) {
    mdsubscriberesponse_ = new ::com::htsc::mdc::insight::model::MDSubscribeResponse(*from.mdsubscriberesponse_);
  } else {
    mdsubscriberesponse_ = nullptr;
  }
  if (from.has_pushmarketdata()) {
    pushmarketdata_ = new ::com::htsc::mdc::insight::model::MarketData(*from.pushmarketdata_);
  } else {
    pushmarketdata_ = nullptr;
  }
  if (from.has_pushmarketdatastream()) {
    pushmarketdatastream_ = new ::com::htsc::mdc::insight::model::MarketDataStream(*from.pushmarketdatastream_);
  } else {
    pushmarketdatastream_ = nullptr;
  }
  if (from.has_mdqueryrequest()) {
    mdqueryrequest_ = new ::com::htsc::mdc::insight::model::MDQueryRequest(*from.mdqueryrequest_);
  } else {
    mdqueryrequest_ = nullptr;
  }
  if (from.has_mdqueryresponse()) {
    mdqueryresponse_ = new ::com::htsc::mdc::insight::model::MDQueryResponse(*from.mdqueryresponse_);
  } else {
    mdqueryresponse_ = nullptr;
  }
  if (from.has_playbackrequest()) {
    playbackrequest_ = new ::com::htsc::mdc::insight::model::PlaybackRequest(*from.playbackrequest_);
  } else {
    playbackrequest_ = nullptr;
  }
  if (from.has_playbackresponse()) {
    playbackresponse_ = new ::com::htsc::mdc::insight::model::PlaybackResponse(*from.playbackresponse_);
  } else {
    playbackresponse_ = nullptr;
  }
  if (from.has_playbackcontrolrequest()) {
    playbackcontrolrequest_ = new ::com::htsc::mdc::insight::model::PlaybackControlRequest(*from.playbackcontrolrequest_);
  } else {
    playbackcontrolrequest_ = nullptr;
  }
  if (from.has_playbackcontrolresponse()) {
    playbackcontrolresponse_ = new ::com::htsc::mdc::insight::model::PlaybackControlResponse(*from.playbackcontrolresponse_);
  } else {
    playbackcontrolresponse_ = nullptr;
  }
  if (from.has_playbackstatusrequest()) {
    playbackstatusrequest_ = new ::com::htsc::mdc::insight::model::PlaybackStatusRequest(*from.playbackstatusrequest_);
  } else {
    playbackstatusrequest_ = nullptr;
  }
  if (from.has_playbackstatus()) {
    playbackstatus_ = new ::com::htsc::mdc::insight::model::PlaybackStatus(*from.playbackstatus_);
  } else {
    playbackstatus_ = nullptr;
  }
  if (from.has_playbackpayload()) {
    playbackpayload_ = new ::com::htsc::mdc::insight::model::PlaybackPayload(*from.playbackpayload_);
  } else {
    playbackpayload_ = nullptr;
  }
  ::memcpy(&interactionid_, &from.interactionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&interactionid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MessageBody)
}

void MessageBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageBody_MessageBody_2eproto.base);
  ::memset(&generalerrormessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&generalerrormessage_)) + sizeof(type_));
}

MessageBody::~MessageBody() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MessageBody)
  SharedDtor();
}

void MessageBody::SharedDtor() {
  if (this != internal_default_instance()) delete generalerrormessage_;
  if (this != internal_default_instance()) delete loginrequest_;
  if (this != internal_default_instance()) delete loginresponse_;
  if (this != internal_default_instance()) delete servicediscoveryrequest_;
  if (this != internal_default_instance()) delete servicediscoveryresponse_;
  if (this != internal_default_instance()) delete mdsubscriberequest_;
  if (this != internal_default_instance()) delete mdsubscriberesponse_;
  if (this != internal_default_instance()) delete pushmarketdata_;
  if (this != internal_default_instance()) delete pushmarketdatastream_;
  if (this != internal_default_instance()) delete mdqueryrequest_;
  if (this != internal_default_instance()) delete mdqueryresponse_;
  if (this != internal_default_instance()) delete playbackrequest_;
  if (this != internal_default_instance()) delete playbackresponse_;
  if (this != internal_default_instance()) delete playbackcontrolrequest_;
  if (this != internal_default_instance()) delete playbackcontrolresponse_;
  if (this != internal_default_instance()) delete playbackstatusrequest_;
  if (this != internal_default_instance()) delete playbackstatus_;
  if (this != internal_default_instance()) delete playbackpayload_;
}

void MessageBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageBody& MessageBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageBody_MessageBody_2eproto.base);
  return *internal_default_instance();
}


void MessageBody::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MessageBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && generalerrormessage_ != nullptr) {
    delete generalerrormessage_;
  }
  generalerrormessage_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && loginrequest_ != nullptr) {
    delete loginrequest_;
  }
  loginrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && loginresponse_ != nullptr) {
    delete loginresponse_;
  }
  loginresponse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && servicediscoveryrequest_ != nullptr) {
    delete servicediscoveryrequest_;
  }
  servicediscoveryrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && servicediscoveryresponse_ != nullptr) {
    delete servicediscoveryresponse_;
  }
  servicediscoveryresponse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdsubscriberequest_ != nullptr) {
    delete mdsubscriberequest_;
  }
  mdsubscriberequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdsubscriberesponse_ != nullptr) {
    delete mdsubscriberesponse_;
  }
  mdsubscriberesponse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pushmarketdata_ != nullptr) {
    delete pushmarketdata_;
  }
  pushmarketdata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pushmarketdatastream_ != nullptr) {
    delete pushmarketdatastream_;
  }
  pushmarketdatastream_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdqueryrequest_ != nullptr) {
    delete mdqueryrequest_;
  }
  mdqueryrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdqueryresponse_ != nullptr) {
    delete mdqueryresponse_;
  }
  mdqueryresponse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && playbackrequest_ != nullptr) {
    delete playbackrequest_;
  }
  playbackrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && playbackresponse_ != nullptr) {
    delete playbackresponse_;
  }
  playbackresponse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && playbackcontrolrequest_ != nullptr) {
    delete playbackcontrolrequest_;
  }
  playbackcontrolrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && playbackcontrolresponse_ != nullptr) {
    delete playbackcontrolresponse_;
  }
  playbackcontrolresponse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && playbackstatusrequest_ != nullptr) {
    delete playbackstatusrequest_;
  }
  playbackstatusrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && playbackstatus_ != nullptr) {
    delete playbackstatus_;
  }
  playbackstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && playbackpayload_ != nullptr) {
    delete playbackpayload_;
  }
  playbackpayload_ = nullptr;
  ::memset(&interactionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&interactionid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.htsc.mdc.insight.model.EMessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::com::htsc::mdc::insight::model::EMessageType>(val));
        } else goto handle_unusual;
        continue;
      // int64 interactionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          interactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext generalErrorMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_generalerrormessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.LoginRequest loginRequest = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_loginrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.LoginResponse loginResponse = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_loginresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ServiceDiscoveryRequest serviceDiscoveryRequest = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_servicediscoveryrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_servicediscoveryresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSubscribeRequest mdSubscribeRequest = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_mdsubscriberequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSubscribeResponse mdSubscribeResponse = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_mdsubscriberesponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MarketData pushMarketData = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_pushmarketdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MarketDataStream pushMarketDataStream = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_pushmarketdatastream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDQueryRequest mdQueryRequest = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_mdqueryrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDQueryResponse mdQueryResponse = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_mdqueryresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.PlaybackRequest playbackRequest = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_playbackrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.PlaybackResponse playbackResponse = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_playbackresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.PlaybackControlRequest playbackControlRequest = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_playbackcontrolrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.PlaybackControlResponse playbackControlResponse = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_playbackcontrolresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.PlaybackStatusRequest playbackStatusRequest = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_playbackstatusrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.PlaybackStatus playbackStatus = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_playbackstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.PlaybackPayload playbackPayload = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_playbackpayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MessageBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.htsc.mdc.insight.model.EMessageType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::com::htsc::mdc::insight::model::EMessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 interactionId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &interactionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.InsightErrorContext generalErrorMessage = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generalerrormessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.LoginRequest loginRequest = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_loginrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.LoginResponse loginResponse = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_loginresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ServiceDiscoveryRequest serviceDiscoveryRequest = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_servicediscoveryrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_servicediscoveryresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSubscribeRequest mdSubscribeRequest = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdsubscriberequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSubscribeResponse mdSubscribeResponse = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdsubscriberesponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MarketData pushMarketData = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pushmarketdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MarketDataStream pushMarketDataStream = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pushmarketdatastream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDQueryRequest mdQueryRequest = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdqueryrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDQueryResponse mdQueryResponse = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdqueryresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.PlaybackRequest playbackRequest = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_playbackrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.PlaybackResponse playbackResponse = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_playbackresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.PlaybackControlRequest playbackControlRequest = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_playbackcontrolrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.PlaybackControlResponse playbackControlResponse = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_playbackcontrolresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.PlaybackStatusRequest playbackStatusRequest = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_playbackstatusrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.PlaybackStatus playbackStatus = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_playbackstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.PlaybackPayload playbackPayload = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_playbackpayload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MessageBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MessageBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MessageBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.EMessageType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int64 interactionId = 2;
  if (this->interactionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->interactionid(), output);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext generalErrorMessage = 10;
  if (this->has_generalerrormessage()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::generalerrormessage(this), output);
  }

  // .com.htsc.mdc.insight.model.LoginRequest loginRequest = 11;
  if (this->has_loginrequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::loginrequest(this), output);
  }

  // .com.htsc.mdc.insight.model.LoginResponse loginResponse = 12;
  if (this->has_loginresponse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::loginresponse(this), output);
  }

  // .com.htsc.mdc.insight.model.ServiceDiscoveryRequest serviceDiscoveryRequest = 13;
  if (this->has_servicediscoveryrequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::servicediscoveryrequest(this), output);
  }

  // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 14;
  if (this->has_servicediscoveryresponse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::servicediscoveryresponse(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSubscribeRequest mdSubscribeRequest = 15;
  if (this->has_mdsubscriberequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::mdsubscriberequest(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSubscribeResponse mdSubscribeResponse = 16;
  if (this->has_mdsubscriberesponse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::mdsubscriberesponse(this), output);
  }

  // .com.htsc.mdc.insight.model.MarketData pushMarketData = 20;
  if (this->has_pushmarketdata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::pushmarketdata(this), output);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream pushMarketDataStream = 21;
  if (this->has_pushmarketdatastream()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::pushmarketdatastream(this), output);
  }

  // .com.htsc.mdc.insight.model.MDQueryRequest mdQueryRequest = 30;
  if (this->has_mdqueryrequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, HasBitSetters::mdqueryrequest(this), output);
  }

  // .com.htsc.mdc.insight.model.MDQueryResponse mdQueryResponse = 31;
  if (this->has_mdqueryresponse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, HasBitSetters::mdqueryresponse(this), output);
  }

  // .com.htsc.mdc.insight.model.PlaybackRequest playbackRequest = 32;
  if (this->has_playbackrequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, HasBitSetters::playbackrequest(this), output);
  }

  // .com.htsc.mdc.insight.model.PlaybackResponse playbackResponse = 33;
  if (this->has_playbackresponse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, HasBitSetters::playbackresponse(this), output);
  }

  // .com.htsc.mdc.insight.model.PlaybackControlRequest playbackControlRequest = 34;
  if (this->has_playbackcontrolrequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, HasBitSetters::playbackcontrolrequest(this), output);
  }

  // .com.htsc.mdc.insight.model.PlaybackControlResponse playbackControlResponse = 35;
  if (this->has_playbackcontrolresponse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, HasBitSetters::playbackcontrolresponse(this), output);
  }

  // .com.htsc.mdc.insight.model.PlaybackStatusRequest playbackStatusRequest = 36;
  if (this->has_playbackstatusrequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, HasBitSetters::playbackstatusrequest(this), output);
  }

  // .com.htsc.mdc.insight.model.PlaybackStatus playbackStatus = 37;
  if (this->has_playbackstatus()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, HasBitSetters::playbackstatus(this), output);
  }

  // .com.htsc.mdc.insight.model.PlaybackPayload playbackPayload = 38;
  if (this->has_playbackpayload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, HasBitSetters::playbackpayload(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MessageBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MessageBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.EMessageType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int64 interactionId = 2;
  if (this->interactionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->interactionid(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext generalErrorMessage = 10;
  if (this->has_generalerrormessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::generalerrormessage(this), target);
  }

  // .com.htsc.mdc.insight.model.LoginRequest loginRequest = 11;
  if (this->has_loginrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::loginrequest(this), target);
  }

  // .com.htsc.mdc.insight.model.LoginResponse loginResponse = 12;
  if (this->has_loginresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::loginresponse(this), target);
  }

  // .com.htsc.mdc.insight.model.ServiceDiscoveryRequest serviceDiscoveryRequest = 13;
  if (this->has_servicediscoveryrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::servicediscoveryrequest(this), target);
  }

  // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 14;
  if (this->has_servicediscoveryresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::servicediscoveryresponse(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSubscribeRequest mdSubscribeRequest = 15;
  if (this->has_mdsubscriberequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::mdsubscriberequest(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSubscribeResponse mdSubscribeResponse = 16;
  if (this->has_mdsubscriberesponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::mdsubscriberesponse(this), target);
  }

  // .com.htsc.mdc.insight.model.MarketData pushMarketData = 20;
  if (this->has_pushmarketdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::pushmarketdata(this), target);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream pushMarketDataStream = 21;
  if (this->has_pushmarketdatastream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::pushmarketdatastream(this), target);
  }

  // .com.htsc.mdc.insight.model.MDQueryRequest mdQueryRequest = 30;
  if (this->has_mdqueryrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, HasBitSetters::mdqueryrequest(this), target);
  }

  // .com.htsc.mdc.insight.model.MDQueryResponse mdQueryResponse = 31;
  if (this->has_mdqueryresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, HasBitSetters::mdqueryresponse(this), target);
  }

  // .com.htsc.mdc.insight.model.PlaybackRequest playbackRequest = 32;
  if (this->has_playbackrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, HasBitSetters::playbackrequest(this), target);
  }

  // .com.htsc.mdc.insight.model.PlaybackResponse playbackResponse = 33;
  if (this->has_playbackresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, HasBitSetters::playbackresponse(this), target);
  }

  // .com.htsc.mdc.insight.model.PlaybackControlRequest playbackControlRequest = 34;
  if (this->has_playbackcontrolrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, HasBitSetters::playbackcontrolrequest(this), target);
  }

  // .com.htsc.mdc.insight.model.PlaybackControlResponse playbackControlResponse = 35;
  if (this->has_playbackcontrolresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, HasBitSetters::playbackcontrolresponse(this), target);
  }

  // .com.htsc.mdc.insight.model.PlaybackStatusRequest playbackStatusRequest = 36;
  if (this->has_playbackstatusrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, HasBitSetters::playbackstatusrequest(this), target);
  }

  // .com.htsc.mdc.insight.model.PlaybackStatus playbackStatus = 37;
  if (this->has_playbackstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, HasBitSetters::playbackstatus(this), target);
  }

  // .com.htsc.mdc.insight.model.PlaybackPayload playbackPayload = 38;
  if (this->has_playbackpayload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, HasBitSetters::playbackpayload(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MessageBody)
  return target;
}

size_t MessageBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MessageBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.InsightErrorContext generalErrorMessage = 10;
  if (this->has_generalerrormessage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *generalerrormessage_);
  }

  // .com.htsc.mdc.insight.model.LoginRequest loginRequest = 11;
  if (this->has_loginrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginrequest_);
  }

  // .com.htsc.mdc.insight.model.LoginResponse loginResponse = 12;
  if (this->has_loginresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginresponse_);
  }

  // .com.htsc.mdc.insight.model.ServiceDiscoveryRequest serviceDiscoveryRequest = 13;
  if (this->has_servicediscoveryrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servicediscoveryrequest_);
  }

  // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 14;
  if (this->has_servicediscoveryresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servicediscoveryresponse_);
  }

  // .com.htsc.mdc.insight.model.MDSubscribeRequest mdSubscribeRequest = 15;
  if (this->has_mdsubscriberequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdsubscriberequest_);
  }

  // .com.htsc.mdc.insight.model.MDSubscribeResponse mdSubscribeResponse = 16;
  if (this->has_mdsubscriberesponse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdsubscriberesponse_);
  }

  // .com.htsc.mdc.insight.model.MarketData pushMarketData = 20;
  if (this->has_pushmarketdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pushmarketdata_);
  }

  // .com.htsc.mdc.insight.model.MarketDataStream pushMarketDataStream = 21;
  if (this->has_pushmarketdatastream()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pushmarketdatastream_);
  }

  // .com.htsc.mdc.insight.model.MDQueryRequest mdQueryRequest = 30;
  if (this->has_mdqueryrequest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdqueryrequest_);
  }

  // .com.htsc.mdc.insight.model.MDQueryResponse mdQueryResponse = 31;
  if (this->has_mdqueryresponse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdqueryresponse_);
  }

  // .com.htsc.mdc.insight.model.PlaybackRequest playbackRequest = 32;
  if (this->has_playbackrequest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playbackrequest_);
  }

  // .com.htsc.mdc.insight.model.PlaybackResponse playbackResponse = 33;
  if (this->has_playbackresponse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playbackresponse_);
  }

  // .com.htsc.mdc.insight.model.PlaybackControlRequest playbackControlRequest = 34;
  if (this->has_playbackcontrolrequest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playbackcontrolrequest_);
  }

  // .com.htsc.mdc.insight.model.PlaybackControlResponse playbackControlResponse = 35;
  if (this->has_playbackcontrolresponse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playbackcontrolresponse_);
  }

  // .com.htsc.mdc.insight.model.PlaybackStatusRequest playbackStatusRequest = 36;
  if (this->has_playbackstatusrequest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playbackstatusrequest_);
  }

  // .com.htsc.mdc.insight.model.PlaybackStatus playbackStatus = 37;
  if (this->has_playbackstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playbackstatus_);
  }

  // .com.htsc.mdc.insight.model.PlaybackPayload playbackPayload = 38;
  if (this->has_playbackpayload()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playbackpayload_);
  }

  // int64 interactionId = 2;
  if (this->interactionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->interactionid());
  }

  // .com.htsc.mdc.insight.model.EMessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MessageBody)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MessageBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MessageBody)
    MergeFrom(*source);
  }
}

void MessageBody::MergeFrom(const MessageBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MessageBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_generalerrormessage()) {
    mutable_generalerrormessage()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(from.generalerrormessage());
  }
  if (from.has_loginrequest()) {
    mutable_loginrequest()->::com::htsc::mdc::insight::model::LoginRequest::MergeFrom(from.loginrequest());
  }
  if (from.has_loginresponse()) {
    mutable_loginresponse()->::com::htsc::mdc::insight::model::LoginResponse::MergeFrom(from.loginresponse());
  }
  if (from.has_servicediscoveryrequest()) {
    mutable_servicediscoveryrequest()->::com::htsc::mdc::insight::model::ServiceDiscoveryRequest::MergeFrom(from.servicediscoveryrequest());
  }
  if (from.has_servicediscoveryresponse()) {
    mutable_servicediscoveryresponse()->::com::htsc::mdc::insight::model::ServiceDiscoveryResponse::MergeFrom(from.servicediscoveryresponse());
  }
  if (from.has_mdsubscriberequest()) {
    mutable_mdsubscriberequest()->::com::htsc::mdc::insight::model::MDSubscribeRequest::MergeFrom(from.mdsubscriberequest());
  }
  if (from.has_mdsubscriberesponse()) {
    mutable_mdsubscriberesponse()->::com::htsc::mdc::insight::model::MDSubscribeResponse::MergeFrom(from.mdsubscriberesponse());
  }
  if (from.has_pushmarketdata()) {
    mutable_pushmarketdata()->::com::htsc::mdc::insight::model::MarketData::MergeFrom(from.pushmarketdata());
  }
  if (from.has_pushmarketdatastream()) {
    mutable_pushmarketdatastream()->::com::htsc::mdc::insight::model::MarketDataStream::MergeFrom(from.pushmarketdatastream());
  }
  if (from.has_mdqueryrequest()) {
    mutable_mdqueryrequest()->::com::htsc::mdc::insight::model::MDQueryRequest::MergeFrom(from.mdqueryrequest());
  }
  if (from.has_mdqueryresponse()) {
    mutable_mdqueryresponse()->::com::htsc::mdc::insight::model::MDQueryResponse::MergeFrom(from.mdqueryresponse());
  }
  if (from.has_playbackrequest()) {
    mutable_playbackrequest()->::com::htsc::mdc::insight::model::PlaybackRequest::MergeFrom(from.playbackrequest());
  }
  if (from.has_playbackresponse()) {
    mutable_playbackresponse()->::com::htsc::mdc::insight::model::PlaybackResponse::MergeFrom(from.playbackresponse());
  }
  if (from.has_playbackcontrolrequest()) {
    mutable_playbackcontrolrequest()->::com::htsc::mdc::insight::model::PlaybackControlRequest::MergeFrom(from.playbackcontrolrequest());
  }
  if (from.has_playbackcontrolresponse()) {
    mutable_playbackcontrolresponse()->::com::htsc::mdc::insight::model::PlaybackControlResponse::MergeFrom(from.playbackcontrolresponse());
  }
  if (from.has_playbackstatusrequest()) {
    mutable_playbackstatusrequest()->::com::htsc::mdc::insight::model::PlaybackStatusRequest::MergeFrom(from.playbackstatusrequest());
  }
  if (from.has_playbackstatus()) {
    mutable_playbackstatus()->::com::htsc::mdc::insight::model::PlaybackStatus::MergeFrom(from.playbackstatus());
  }
  if (from.has_playbackpayload()) {
    mutable_playbackpayload()->::com::htsc::mdc::insight::model::PlaybackPayload::MergeFrom(from.playbackpayload());
  }
  if (from.interactionid() != 0) {
    set_interactionid(from.interactionid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MessageBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MessageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBody::CopyFrom(const MessageBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MessageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBody::IsInitialized() const {
  return true;
}

void MessageBody::Swap(MessageBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageBody::InternalSwap(MessageBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(generalerrormessage_, other->generalerrormessage_);
  swap(loginrequest_, other->loginrequest_);
  swap(loginresponse_, other->loginresponse_);
  swap(servicediscoveryrequest_, other->servicediscoveryrequest_);
  swap(servicediscoveryresponse_, other->servicediscoveryresponse_);
  swap(mdsubscriberequest_, other->mdsubscriberequest_);
  swap(mdsubscriberesponse_, other->mdsubscriberesponse_);
  swap(pushmarketdata_, other->pushmarketdata_);
  swap(pushmarketdatastream_, other->pushmarketdatastream_);
  swap(mdqueryrequest_, other->mdqueryrequest_);
  swap(mdqueryresponse_, other->mdqueryresponse_);
  swap(playbackrequest_, other->playbackrequest_);
  swap(playbackresponse_, other->playbackresponse_);
  swap(playbackcontrolrequest_, other->playbackcontrolrequest_);
  swap(playbackcontrolresponse_, other->playbackcontrolresponse_);
  swap(playbackstatusrequest_, other->playbackstatusrequest_);
  swap(playbackstatus_, other->playbackstatus_);
  swap(playbackpayload_, other->playbackpayload_);
  swap(interactionid_, other->interactionid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageBody::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MessageBody* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MessageBody >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MessageBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
