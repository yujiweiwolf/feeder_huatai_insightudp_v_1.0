// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDUSAQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDUSAQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDUSAQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDUSAQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDUSAQuote_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDUSAQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDUSAQuote;
class MDUSAQuoteDefaultTypeInternal;
extern MDUSAQuoteDefaultTypeInternal _MDUSAQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDUSAQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDUSAQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDUSAQuote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDUSAQuote) */ {
 public:
  MDUSAQuote();
  virtual ~MDUSAQuote();

  MDUSAQuote(const MDUSAQuote& from);
  MDUSAQuote(MDUSAQuote&& from) noexcept
    : MDUSAQuote() {
    *this = ::std::move(from);
  }

  inline MDUSAQuote& operator=(const MDUSAQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDUSAQuote& operator=(MDUSAQuote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDUSAQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDUSAQuote* internal_default_instance() {
    return reinterpret_cast<const MDUSAQuote*>(
               &_MDUSAQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDUSAQuote* other);
  friend void swap(MDUSAQuote& a, MDUSAQuote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDUSAQuote* New() const final {
    return CreateMaybeMessage<MDUSAQuote>(nullptr);
  }

  MDUSAQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDUSAQuote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDUSAQuote& from);
  void MergeFrom(const MDUSAQuote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDUSAQuote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDUSAQuote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDUSAQuote_2eproto);
    return ::descriptor_table_MDUSAQuote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 5;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int32 ExchangeDate = 7;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate() const;
  void set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ExchangeTime = 8;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime() const;
  void set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Nanosecond = 9;
  void clear_nanosecond();
  static const int kNanosecondFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 nanosecond() const;
  void set_nanosecond(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 DataMultiplePowerOf10 = 10;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 BidPrice = 12;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 bidprice() const;
  void set_bidprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 BidSize = 13;
  void clear_bidsize();
  static const int kBidSizeFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 bidsize() const;
  void set_bidsize(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 BidSizeNAV = 14;
  void clear_bidsizenav();
  static const int kBidSizeNAVFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 bidsizenav() const;
  void set_bidsizenav(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 TimeIndex = 11;
  void clear_timeindex();
  static const int kTimeIndexFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 timeindex() const;
  void set_timeindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 BidMarket = 18;
  void clear_bidmarket();
  static const int kBidMarketFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 bidmarket() const;
  void set_bidmarket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 AskPrice = 15;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 askprice() const;
  void set_askprice(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AskSize = 16;
  void clear_asksize();
  static const int kAskSizeFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int64 asksize() const;
  void set_asksize(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AskSizeNAV = 17;
  void clear_asksizenav();
  static const int kAskSizeNAVFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int64 asksizenav() const;
  void set_asksizenav(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 BidTime = 19;
  void clear_bidtime();
  static const int kBidTimeFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int64 bidtime() const;
  void set_bidtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 AskTime = 21;
  void clear_asktime();
  static const int kAskTimeFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int64 asktime() const;
  void set_asktime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 DataIndex = 22;
  void clear_dataindex();
  static const int kDataIndexFieldNumber = 22;
  ::PROTOBUF_NAMESPACE_ID::int64 dataindex() const;
  void set_dataindex(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 AskMarket = 20;
  void clear_askmarket();
  static const int kAskMarketFieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int32 askmarket() const;
  void set_askmarket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDUSAQuote)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangedate_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanosecond_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  ::PROTOBUF_NAMESPACE_ID::int64 bidprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 bidsize_;
  ::PROTOBUF_NAMESPACE_ID::int64 bidsizenav_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 bidmarket_;
  ::PROTOBUF_NAMESPACE_ID::int64 askprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 asksize_;
  ::PROTOBUF_NAMESPACE_ID::int64 asksizenav_;
  ::PROTOBUF_NAMESPACE_ID::int64 bidtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 asktime_;
  ::PROTOBUF_NAMESPACE_ID::int64 dataindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 askmarket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDUSAQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDUSAQuote

// string HTSCSecurityID = 1;
inline void MDUSAQuote::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDUSAQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void MDUSAQuote::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID)
}
inline void MDUSAQuote::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID)
}
inline void MDUSAQuote::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID)
}
inline void MDUSAQuote::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID)
}
inline std::string* MDUSAQuote::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDUSAQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDUSAQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDUSAQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDUSAQuote::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.MDDate)
  return mddate_;
}
inline void MDUSAQuote::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDUSAQuote::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.MDTime)
  return mdtime_;
}
inline void MDUSAQuote::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDUSAQuote::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.DataTimestamp)
  return datatimestamp_;
}
inline void MDUSAQuote::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDUSAQuote::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDUSAQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void MDUSAQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDUSAQuote::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDUSAQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void MDUSAQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.securityType)
}

// int32 ExchangeDate = 7;
inline void MDUSAQuote::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.ExchangeDate)
  return exchangedate_;
}
inline void MDUSAQuote::set_exchangedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.ExchangeDate)
}

// int32 ExchangeTime = 8;
inline void MDUSAQuote::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.ExchangeTime)
  return exchangetime_;
}
inline void MDUSAQuote::set_exchangetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.ExchangeTime)
}

// int32 Nanosecond = 9;
inline void MDUSAQuote::clear_nanosecond() {
  nanosecond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::nanosecond() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.Nanosecond)
  return nanosecond_;
}
inline void MDUSAQuote::set_nanosecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nanosecond_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.Nanosecond)
}

// int32 DataMultiplePowerOf10 = 10;
inline void MDUSAQuote::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void MDUSAQuote::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.DataMultiplePowerOf10)
}

// int32 TimeIndex = 11;
inline void MDUSAQuote::clear_timeindex() {
  timeindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::timeindex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.TimeIndex)
  return timeindex_;
}
inline void MDUSAQuote::set_timeindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeindex_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.TimeIndex)
}

// int64 BidPrice = 12;
inline void MDUSAQuote::clear_bidprice() {
  bidprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::bidprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.BidPrice)
  return bidprice_;
}
inline void MDUSAQuote::set_bidprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.BidPrice)
}

// int64 BidSize = 13;
inline void MDUSAQuote::clear_bidsize() {
  bidsize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::bidsize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.BidSize)
  return bidsize_;
}
inline void MDUSAQuote::set_bidsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.BidSize)
}

// int64 BidSizeNAV = 14;
inline void MDUSAQuote::clear_bidsizenav() {
  bidsizenav_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::bidsizenav() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.BidSizeNAV)
  return bidsizenav_;
}
inline void MDUSAQuote::set_bidsizenav(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bidsizenav_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.BidSizeNAV)
}

// int64 AskPrice = 15;
inline void MDUSAQuote::clear_askprice() {
  askprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::askprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.AskPrice)
  return askprice_;
}
inline void MDUSAQuote::set_askprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.AskPrice)
}

// int64 AskSize = 16;
inline void MDUSAQuote::clear_asksize() {
  asksize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::asksize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.AskSize)
  return asksize_;
}
inline void MDUSAQuote::set_asksize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  asksize_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.AskSize)
}

// int64 AskSizeNAV = 17;
inline void MDUSAQuote::clear_asksizenav() {
  asksizenav_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::asksizenav() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.AskSizeNAV)
  return asksizenav_;
}
inline void MDUSAQuote::set_asksizenav(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  asksizenav_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.AskSizeNAV)
}

// int32 BidMarket = 18;
inline void MDUSAQuote::clear_bidmarket() {
  bidmarket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::bidmarket() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.BidMarket)
  return bidmarket_;
}
inline void MDUSAQuote::set_bidmarket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bidmarket_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.BidMarket)
}

// int64 BidTime = 19;
inline void MDUSAQuote::clear_bidtime() {
  bidtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::bidtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.BidTime)
  return bidtime_;
}
inline void MDUSAQuote::set_bidtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bidtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.BidTime)
}

// int32 AskMarket = 20;
inline void MDUSAQuote::clear_askmarket() {
  askmarket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDUSAQuote::askmarket() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.AskMarket)
  return askmarket_;
}
inline void MDUSAQuote::set_askmarket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  askmarket_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.AskMarket)
}

// int64 AskTime = 21;
inline void MDUSAQuote::clear_asktime() {
  asktime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::asktime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.AskTime)
  return asktime_;
}
inline void MDUSAQuote::set_asktime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  asktime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.AskTime)
}

// int64 DataIndex = 22;
inline void MDUSAQuote::clear_dataindex() {
  dataindex_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDUSAQuote::dataindex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSAQuote.DataIndex)
  return dataindex_;
}
inline void MDUSAQuote::set_dataindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dataindex_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSAQuote.DataIndex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDUSAQuote_2eproto
