// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EMarketDataType.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EMarketDataType_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EMarketDataType_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EMarketDataType_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EMarketDataType_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EMarketDataType_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

enum EMarketDataType : int {
  UNKNOWN_DATA_TYPE = 0,
  MD_TICK = 1,
  MD_TRANSACTION = 2,
  MD_ORDER = 3,
  MD_CONSTANT = 4,
  DYNAMIC_PACKET = 5,
  MD_ETF_BASICINFO = 6,
  MD_KLINE_1MIN = 20,
  MD_KLINE_5MIN = 21,
  MD_KLINE_15MIN = 22,
  MD_KLINE_30MIN = 23,
  MD_KLINE_60MIN = 24,
  MD_KLINE_1D = 25,
  MD_KLINE_15S = 26,
  MD_TWAP_1MIN = 30,
  MD_TWAP_1S = 31,
  MD_VWAP_1MIN = 40,
  MD_VWAP_1S = 41,
  MD_SIMPLE_TICK = 50,
  AD_UPSDOWNS_ANALYSIS = 51,
  AD_INDICATORS_RANKING = 52,
  AD_VOLUME_BYPRICE = 53,
  AD_FUND_FLOW_ANALYSIS = 54,
  AD_ORDERBOOK_SNAPSHOT = 55,
  AD_ORDERBOOK_SNAPSHOT_WITH_TICK = 56,
  AD_CHIP_DISTRIBUTION = 57,
  MD_WARRANT = 58,
  MD_SECURITY_LENDING = 59,
  AD_NEWS = 60,
  AD_STARING_RESULT = 61,
  AD_DERIVED_ANALYSIS = 62,
  MD_FI_QUOTE = 70,
  MD_QUOTE = 71,
  MD_QB_QUOTE = 72,
  MD_QB_TRANSACTION = 73,
  MD_SL_ORDER = 74,
  MD_SL_TRANSACTION = 75,
  MD_USA_ORDER = 76,
  MD_USA_TRANSACTION = 77,
  MD_HK_GREY_MARKET = 78,
  MD_SL_INDICATIVE_QUOTE = 79,
  MD_SL_STATISTICS = 80,
  MD_USA_QUOTE = 81,
  REPLAY_MD_TICK_WITH_TRANSACTION = 101,
  REPLAY_MD_TICK_WITH_ORDER = 102,
  REPLAY_MD_TICK_WITH_TRANSACTION_AND_ORDER = 103,
  REPLAY_MD_TICK = 104,
  REPLAY_MD_TRANSACTION = 105,
  REPLAY_MD_ORDER = 106,
  REPLAY_MD_TRANSACTION_AND_ORDER = 107,
  EMarketDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMarketDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMarketDataType_IsValid(int value);
constexpr EMarketDataType EMarketDataType_MIN = UNKNOWN_DATA_TYPE;
constexpr EMarketDataType EMarketDataType_MAX = REPLAY_MD_TRANSACTION_AND_ORDER;
constexpr int EMarketDataType_ARRAYSIZE = EMarketDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketDataType_descriptor();
template<typename T>
inline const std::string& EMarketDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMarketDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMarketDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMarketDataType_descriptor(), enum_t_value);
}
inline bool EMarketDataType_Parse(
    const std::string& name, EMarketDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMarketDataType>(
    EMarketDataType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::EMarketDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::EMarketDataType>() {
  return ::com::htsc::mdc::insight::model::EMarketDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EMarketDataType_2eproto
