// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketData.proto

#include "MarketData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ADChipDistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADChipDistribution_ADChipDistribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADDerivedAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ADDerivedAnalysis_ADDerivedAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADFundFlowAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADFundFlowAnalysis_ADFundFlowAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADIndicatorsRanking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADIndicatorsRanking_ADIndicatorsRanking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADKLine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADKLine_ADKLine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADNews_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ADNews_ADNews_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADOrderbookSnapshot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADOrderbookSnapshot_ADOrderbookSnapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADOrderbookSnapshotWithTick_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ADOrderbookSnapshotWithTick_ADOrderbookSnapshotWithTick_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADStaringResult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADStaringResult_ADStaringResult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADTwap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADTwap_ADTwap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADUpsDownsAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ADUpsDownsAnalysis_ADUpsDownsAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADVolumeByPrice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ADVolumeByPrice_ADVolumeByPrice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADVwap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADVwap_ADVwap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DynamicPacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicPacket_DynamicPacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDBasicInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDBasicInfo_MDBasicInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDBond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDBond_MDBond_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDETFBasicInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDETFBasicInfo_MDETFBasicInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDFIQuote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDFIQuote_MDFIQuote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDForex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDForex_MDForex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDFund_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDFund_MDFund_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDFuture_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDFuture_MDFuture_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDHKGreyMarket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDHKGreyMarket_MDHKGreyMarket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDIndex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDIndex_MDIndex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDOption_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDOption_MDOption_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDOrder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDOrder_MDOrder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDQBQuote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDQBQuote_MDQBQuote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDQBTransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDQBTransaction_MDQBTransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDQuote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDQuote_MDQuote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDRate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDRate_MDRate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSLIndicativeQuote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDSLIndicativeQuote_MDSLIndicativeQuote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSLOrder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDSLOrder_MDSLOrder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSLStatistics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDSLStatistics_MDSLStatistics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSLTransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDSLTransaction_MDSLTransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSecurityLending_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MDSecurityLending_MDSecurityLending_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSimpleTick_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MDSimpleTick_MDSimpleTick_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDSpot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDSpot_MDSpot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDStock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDStock_MDStock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDTransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDTransaction_MDTransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDUSAOrder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDUSAOrder_MDUSAOrder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDUSAQuote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDUSAQuote_MDUSAQuote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDUSATransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDUSATransaction_MDUSATransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MDWarrant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MDWarrant_MDWarrant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<42> scc_info_MarketData_MarketData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataList_MarketData_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MarketDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketData> _instance;
} _MarketData_default_instance_;
class MarketDataStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataStream> _instance;
} _MarketDataStream_default_instance_;
class MarketDataListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataList> _instance;
} _MarketDataList_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_MarketData_MarketData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MarketData_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MarketData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MarketData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<42> scc_info_MarketData_MarketData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 42, InitDefaultsscc_info_MarketData_MarketData_2eproto}, {
      &scc_info_MDStock_MDStock_2eproto.base,
      &scc_info_MDIndex_MDIndex_2eproto.base,
      &scc_info_MDBond_MDBond_2eproto.base,
      &scc_info_MDFund_MDFund_2eproto.base,
      &scc_info_MDOption_MDOption_2eproto.base,
      &scc_info_MDFuture_MDFuture_2eproto.base,
      &scc_info_MDTransaction_MDTransaction_2eproto.base,
      &scc_info_MDOrder_MDOrder_2eproto.base,
      &scc_info_ADKLine_ADKLine_2eproto.base,
      &scc_info_ADTwap_ADTwap_2eproto.base,
      &scc_info_ADVwap_ADVwap_2eproto.base,
      &scc_info_MDBasicInfo_MDBasicInfo_2eproto.base,
      &scc_info_MDSimpleTick_MDSimpleTick_2eproto.base,
      &scc_info_ADUpsDownsAnalysis_ADUpsDownsAnalysis_2eproto.base,
      &scc_info_ADIndicatorsRanking_ADIndicatorsRanking_2eproto.base,
      &scc_info_DynamicPacket_DynamicPacket_2eproto.base,
      &scc_info_ADVolumeByPrice_ADVolumeByPrice_2eproto.base,
      &scc_info_ADFundFlowAnalysis_ADFundFlowAnalysis_2eproto.base,
      &scc_info_MDForex_MDForex_2eproto.base,
      &scc_info_MDSpot_MDSpot_2eproto.base,
      &scc_info_MDRate_MDRate_2eproto.base,
      &scc_info_ADOrderbookSnapshot_ADOrderbookSnapshot_2eproto.base,
      &scc_info_ADOrderbookSnapshotWithTick_ADOrderbookSnapshotWithTick_2eproto.base,
      &scc_info_MDQuote_MDQuote_2eproto.base,
      &scc_info_MDETFBasicInfo_MDETFBasicInfo_2eproto.base,
      &scc_info_MDFIQuote_MDFIQuote_2eproto.base,
      &scc_info_ADChipDistribution_ADChipDistribution_2eproto.base,
      &scc_info_MDWarrant_MDWarrant_2eproto.base,
      &scc_info_MDSecurityLending_MDSecurityLending_2eproto.base,
      &scc_info_ADNews_ADNews_2eproto.base,
      &scc_info_ADStaringResult_ADStaringResult_2eproto.base,
      &scc_info_ADDerivedAnalysis_ADDerivedAnalysis_2eproto.base,
      &scc_info_MDQBQuote_MDQBQuote_2eproto.base,
      &scc_info_MDQBTransaction_MDQBTransaction_2eproto.base,
      &scc_info_MDUSAOrder_MDUSAOrder_2eproto.base,
      &scc_info_MDUSATransaction_MDUSATransaction_2eproto.base,
      &scc_info_MDSLOrder_MDSLOrder_2eproto.base,
      &scc_info_MDSLTransaction_MDSLTransaction_2eproto.base,
      &scc_info_MDHKGreyMarket_MDHKGreyMarket_2eproto.base,
      &scc_info_MDSLIndicativeQuote_MDSLIndicativeQuote_2eproto.base,
      &scc_info_MDSLStatistics_MDSLStatistics_2eproto.base,
      &scc_info_MDUSAQuote_MDUSAQuote_2eproto.base,}};

static void InitDefaultsscc_info_MarketDataList_MarketData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MarketDataList_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MarketDataList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MarketDataList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataList_MarketData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MarketDataList_MarketData_2eproto}, {
      &scc_info_MarketData_MarketData_2eproto.base,}};

static void InitDefaultsscc_info_MarketDataStream_MarketData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::MarketDataStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::MarketDataStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataStream_MarketData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MarketDataStream_MarketData_2eproto}, {
      &scc_info_MarketDataList_MarketData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MarketData_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MarketData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MarketData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MarketData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, marketdatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdstock_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdindex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdbond_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdfund_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdoption_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdfuture_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdtransaction_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdkline_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdtwap_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdvwap_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdconstant_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdsimpletick_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdupsdownsanalysis_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdindicatorsranking_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, dynamicpacket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdvolumebyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdfundflowanalysis_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdforex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdspot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, orderbooksnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, orderbooksnapshotwithtick_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdetfbasicinfo_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdfiquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdchipdistribution_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdwarrant_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdsecuritylending_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdnews_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdstaringresult_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdderivedanalysis_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdqbquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdqbtransaction_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdusaorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdusatransaction_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdslorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdsltransaction_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdhkgreymarket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdslindicativequote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdslstatistics_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketData, mdusaquote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, iscompressed_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, originallength_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, compresseddata_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, marketdatalist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, totalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, serial_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, isfinished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataList, marketdatas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::MarketData)},
  { 48, -1, sizeof(::com::htsc::mdc::insight::model::MarketDataStream)},
  { 60, -1, sizeof(::com::htsc::mdc::insight::model::MarketDataList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MarketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_MarketDataList_default_instance_),
};

const char descriptor_table_protodef_MarketData_2eproto[] =
  "\n\020MarketData.proto\022\032com.htsc.mdc.insight"
  ".model\032\025EMarketDataType.proto\032\rMDStock.p"
  "roto\032\014MDBond.proto\032\014MDFund.proto\032\016MDOpti"
  "on.proto\032\rMDIndex.proto\032\016MDFuture.proto\032"
  "\023MDTransaction.proto\032\rMDOrder.proto\032\rADK"
  "Line.proto\032\014ADTwap.proto\032\014ADVwap.proto\032\021"
  "MDBasicInfo.proto\032\022MDSimpleTick.proto\032\030A"
  "DUpsDownsAnalysis.proto\032\031ADIndicatorsRan"
  "king.proto\032\023DynamicPacket.proto\032\025ADVolum"
  "eByPrice.proto\032\030ADFundFlowAnalysis.proto"
  "\032\rMDForex.proto\032\014MDSpot.proto\032\014MDRate.pr"
  "oto\032\031ADOrderbookSnapshot.proto\032!ADOrderb"
  "ookSnapshotWithTick.proto\032\rMDQuote.proto"
  "\032\024MDETFBasicInfo.proto\032\017MDFIQuote.proto\032"
  "\030ADChipDistribution.proto\032\017MDWarrant.pro"
  "to\032\027MDSecurityLending.proto\032\014ADNews.prot"
  "o\032\025ADStaringResult.proto\032\027ADDerivedAnaly"
  "sis.proto\032\017MDQBQuote.proto\032\025MDQBTransact"
  "ion.proto\032\026MDUSATransaction.proto\032\020MDUSA"
  "Order.proto\032\025MDSLTransaction.proto\032\017MDSL"
  "Order.proto\032\024MDHKGreyMarket.proto\032\031MDSLI"
  "ndicativeQuote.proto\032\024MDSLStatistics.pro"
  "to\032\020MDUSAQuote.proto\"\272\025\n\nMarketData\022C\n\016m"
  "arketDataType\030\001 \001(\0162+.com.htsc.mdc.insig"
  "ht.model.EMarketDataType\0224\n\007mdStock\030\n \001("
  "\0132#.com.htsc.mdc.insight.model.MDStock\0224"
  "\n\007mdIndex\030\013 \001(\0132#.com.htsc.mdc.insight.m"
  "odel.MDIndex\0222\n\006mdBond\030\014 \001(\0132\".com.htsc."
  "mdc.insight.model.MDBond\0222\n\006mdFund\030\r \001(\013"
  "2\".com.htsc.mdc.insight.model.MDFund\0226\n\010"
  "mdOption\030\016 \001(\0132$.com.htsc.mdc.insight.mo"
  "del.MDOption\0226\n\010mdFuture\030\017 \001(\0132$.com.hts"
  "c.mdc.insight.model.MDFuture\022@\n\rmdTransa"
  "ction\030\020 \001(\0132).com.htsc.mdc.insight.model"
  ".MDTransaction\0224\n\007mdOrder\030\021 \001(\0132#.com.ht"
  "sc.mdc.insight.model.MDOrder\0224\n\007mdKLine\030"
  "\022 \001(\0132#.com.htsc.mdc.insight.model.ADKLi"
  "ne\0222\n\006mdTwap\030\023 \001(\0132\".com.htsc.mdc.insigh"
  "t.model.ADTwap\0222\n\006mdVwap\030\024 \001(\0132\".com.hts"
  "c.mdc.insight.model.ADVwap\022;\n\nmdConstant"
  "\030\025 \001(\0132\'.com.htsc.mdc.insight.model.MDBa"
  "sicInfo\022>\n\014mdSimpleTick\030\026 \001(\0132(.com.htsc"
  ".mdc.insight.model.MDSimpleTick\022J\n\022mdUps"
  "DownsAnalysis\030\027 \001(\0132..com.htsc.mdc.insig"
  "ht.model.ADUpsDownsAnalysis\022L\n\023mdIndicat"
  "orsRanking\030\030 \001(\0132/.com.htsc.mdc.insight."
  "model.ADIndicatorsRanking\022@\n\rdynamicPack"
  "et\030\031 \001(\0132).com.htsc.mdc.insight.model.Dy"
  "namicPacket\022D\n\017mdVolumeByPrice\030\032 \001(\0132+.c"
  "om.htsc.mdc.insight.model.ADVolumeByPric"
  "e\022J\n\022mdFundFlowAnalysis\030\033 \001(\0132..com.htsc"
  ".mdc.insight.model.ADFundFlowAnalysis\0224\n"
  "\007mdForex\030\034 \001(\0132#.com.htsc.mdc.insight.mo"
  "del.MDForex\0222\n\006mdSpot\030\035 \001(\0132\".com.htsc.m"
  "dc.insight.model.MDSpot\0222\n\006mdRate\030\036 \001(\0132"
  "\".com.htsc.mdc.insight.model.MDRate\022J\n\021o"
  "rderbookSnapshot\030\037 \001(\0132/.com.htsc.mdc.in"
  "sight.model.ADOrderbookSnapshot\022Z\n\031order"
  "bookSnapshotWithTick\030  \001(\01327.com.htsc.md"
  "c.insight.model.ADOrderbookSnapshotWithT"
  "ick\0224\n\007mdQuote\030! \001(\0132#.com.htsc.mdc.insi"
  "ght.model.MDQuote\022B\n\016mdETFBasicInfo\030\" \001("
  "\0132*.com.htsc.mdc.insight.model.MDETFBasi"
  "cInfo\0228\n\tmdFIQuote\030# \001(\0132%.com.htsc.mdc."
  "insight.model.MDFIQuote\022J\n\022mdChipDistrib"
  "ution\030$ \001(\0132..com.htsc.mdc.insight.model"
  ".ADChipDistribution\0228\n\tmdWarrant\030% \001(\0132%"
  ".com.htsc.mdc.insight.model.MDWarrant\022H\n"
  "\021mdSecurityLending\030& \001(\0132-.com.htsc.mdc."
  "insight.model.MDSecurityLending\0222\n\006mdNew"
  "s\030\' \001(\0132\".com.htsc.mdc.insight.model.ADN"
  "ews\022D\n\017mdStaringResult\030( \001(\0132+.com.htsc."
  "mdc.insight.model.ADStaringResult\022H\n\021mdD"
  "erivedAnalysis\030) \001(\0132-.com.htsc.mdc.insi"
  "ght.model.ADDerivedAnalysis\0228\n\tmdQBQuote"
  "\030* \001(\0132%.com.htsc.mdc.insight.model.MDQB"
  "Quote\022D\n\017mdQBTransaction\030+ \001(\0132+.com.hts"
  "c.mdc.insight.model.MDQBTransaction\022:\n\nm"
  "dUSAOrder\030, \001(\0132&.com.htsc.mdc.insight.m"
  "odel.MDUSAOrder\022F\n\020mdUSATransaction\030- \001("
  "\0132,.com.htsc.mdc.insight.model.MDUSATran"
  "saction\0228\n\tmdSLOrder\030. \001(\0132%.com.htsc.md"
  "c.insight.model.MDSLOrder\022D\n\017mdSLTransac"
  "tion\030/ \001(\0132+.com.htsc.mdc.insight.model."
  "MDSLTransaction\022B\n\016mdHKGreyMarket\0300 \001(\0132"
  "*.com.htsc.mdc.insight.model.MDHKGreyMar"
  "ket\022L\n\023mdSLIndicativeQuote\0301 \001(\0132/.com.h"
  "tsc.mdc.insight.model.MDSLIndicativeQuot"
  "e\022B\n\016mdSLStatistics\0302 \001(\0132*.com.htsc.mdc"
  ".insight.model.MDSLStatistics\022:\n\nmdUSAQu"
  "ote\0303 \001(\0132&.com.htsc.mdc.insight.model.M"
  "DUSAQuote\"\325\001\n\020MarketDataStream\022\024\n\014isComp"
  "ressed\030\001 \001(\010\022\026\n\016originalLength\030\002 \001(\005\022\026\n\016"
  "compressedData\030\003 \001(\014\022B\n\016marketDataList\030\004"
  " \001(\0132*.com.htsc.mdc.insight.model.Market"
  "DataList\022\023\n\013totalNumber\030\005 \001(\005\022\016\n\006serial\030"
  "\006 \001(\005\022\022\n\nisFinished\030\007 \001(\010\"M\n\016MarketDataL"
  "ist\022;\n\013marketDatas\030\001 \003(\0132&.com.htsc.mdc."
  "insight.model.MarketDataB2\n\032com.htsc.mdc"
  ".insight.modelB\017MarketDataProtoH\001\240\001\001b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MarketData_2eproto_deps[43] = {
  &::descriptor_table_ADChipDistribution_2eproto,
  &::descriptor_table_ADDerivedAnalysis_2eproto,
  &::descriptor_table_ADFundFlowAnalysis_2eproto,
  &::descriptor_table_ADIndicatorsRanking_2eproto,
  &::descriptor_table_ADKLine_2eproto,
  &::descriptor_table_ADNews_2eproto,
  &::descriptor_table_ADOrderbookSnapshot_2eproto,
  &::descriptor_table_ADOrderbookSnapshotWithTick_2eproto,
  &::descriptor_table_ADStaringResult_2eproto,
  &::descriptor_table_ADTwap_2eproto,
  &::descriptor_table_ADUpsDownsAnalysis_2eproto,
  &::descriptor_table_ADVolumeByPrice_2eproto,
  &::descriptor_table_ADVwap_2eproto,
  &::descriptor_table_DynamicPacket_2eproto,
  &::descriptor_table_EMarketDataType_2eproto,
  &::descriptor_table_MDBasicInfo_2eproto,
  &::descriptor_table_MDBond_2eproto,
  &::descriptor_table_MDETFBasicInfo_2eproto,
  &::descriptor_table_MDFIQuote_2eproto,
  &::descriptor_table_MDForex_2eproto,
  &::descriptor_table_MDFund_2eproto,
  &::descriptor_table_MDFuture_2eproto,
  &::descriptor_table_MDHKGreyMarket_2eproto,
  &::descriptor_table_MDIndex_2eproto,
  &::descriptor_table_MDOption_2eproto,
  &::descriptor_table_MDOrder_2eproto,
  &::descriptor_table_MDQBQuote_2eproto,
  &::descriptor_table_MDQBTransaction_2eproto,
  &::descriptor_table_MDQuote_2eproto,
  &::descriptor_table_MDRate_2eproto,
  &::descriptor_table_MDSLIndicativeQuote_2eproto,
  &::descriptor_table_MDSLOrder_2eproto,
  &::descriptor_table_MDSLStatistics_2eproto,
  &::descriptor_table_MDSLTransaction_2eproto,
  &::descriptor_table_MDSecurityLending_2eproto,
  &::descriptor_table_MDSimpleTick_2eproto,
  &::descriptor_table_MDSpot_2eproto,
  &::descriptor_table_MDStock_2eproto,
  &::descriptor_table_MDTransaction_2eproto,
  &::descriptor_table_MDUSAOrder_2eproto,
  &::descriptor_table_MDUSAQuote_2eproto,
  &::descriptor_table_MDUSATransaction_2eproto,
  &::descriptor_table_MDWarrant_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MarketData_2eproto_sccs[3] = {
  &scc_info_MarketData_MarketData_2eproto.base,
  &scc_info_MarketDataList_MarketData_2eproto.base,
  &scc_info_MarketDataStream_MarketData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MarketData_2eproto_once;
static bool descriptor_table_MarketData_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MarketData_2eproto = {
  &descriptor_table_MarketData_2eproto_initialized, descriptor_table_protodef_MarketData_2eproto, "MarketData.proto", 4004,
  &descriptor_table_MarketData_2eproto_once, descriptor_table_MarketData_2eproto_sccs, descriptor_table_MarketData_2eproto_deps, 3, 43,
  schemas, file_default_instances, TableStruct_MarketData_2eproto::offsets,
  file_level_metadata_MarketData_2eproto, 3, file_level_enum_descriptors_MarketData_2eproto, file_level_service_descriptors_MarketData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MarketData_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MarketData_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void MarketData::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdstock_ = const_cast< ::com::htsc::mdc::insight::model::MDStock*>(
      ::com::htsc::mdc::insight::model::MDStock::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdindex_ = const_cast< ::com::htsc::mdc::insight::model::MDIndex*>(
      ::com::htsc::mdc::insight::model::MDIndex::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdbond_ = const_cast< ::com::htsc::mdc::insight::model::MDBond*>(
      ::com::htsc::mdc::insight::model::MDBond::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdfund_ = const_cast< ::com::htsc::mdc::insight::model::MDFund*>(
      ::com::htsc::mdc::insight::model::MDFund::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdoption_ = const_cast< ::com::htsc::mdc::insight::model::MDOption*>(
      ::com::htsc::mdc::insight::model::MDOption::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdfuture_ = const_cast< ::com::htsc::mdc::insight::model::MDFuture*>(
      ::com::htsc::mdc::insight::model::MDFuture::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdtransaction_ = const_cast< ::com::htsc::mdc::insight::model::MDTransaction*>(
      ::com::htsc::mdc::insight::model::MDTransaction::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdorder_ = const_cast< ::com::htsc::mdc::insight::model::MDOrder*>(
      ::com::htsc::mdc::insight::model::MDOrder::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdkline_ = const_cast< ::com::htsc::mdc::insight::model::ADKLine*>(
      ::com::htsc::mdc::insight::model::ADKLine::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdtwap_ = const_cast< ::com::htsc::mdc::insight::model::ADTwap*>(
      ::com::htsc::mdc::insight::model::ADTwap::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdvwap_ = const_cast< ::com::htsc::mdc::insight::model::ADVwap*>(
      ::com::htsc::mdc::insight::model::ADVwap::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdconstant_ = const_cast< ::com::htsc::mdc::insight::model::MDBasicInfo*>(
      ::com::htsc::mdc::insight::model::MDBasicInfo::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdsimpletick_ = const_cast< ::com::htsc::mdc::insight::model::MDSimpleTick*>(
      ::com::htsc::mdc::insight::model::MDSimpleTick::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdupsdownsanalysis_ = const_cast< ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis*>(
      ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdindicatorsranking_ = const_cast< ::com::htsc::mdc::insight::model::ADIndicatorsRanking*>(
      ::com::htsc::mdc::insight::model::ADIndicatorsRanking::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->dynamicpacket_ = const_cast< ::com::htsc::mdc::insight::model::DynamicPacket*>(
      ::com::htsc::mdc::insight::model::DynamicPacket::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdvolumebyprice_ = const_cast< ::com::htsc::mdc::insight::model::ADVolumeByPrice*>(
      ::com::htsc::mdc::insight::model::ADVolumeByPrice::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdfundflowanalysis_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowAnalysis*>(
      ::com::htsc::mdc::insight::model::ADFundFlowAnalysis::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdforex_ = const_cast< ::com::htsc::mdc::insight::model::MDForex*>(
      ::com::htsc::mdc::insight::model::MDForex::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdspot_ = const_cast< ::com::htsc::mdc::insight::model::MDSpot*>(
      ::com::htsc::mdc::insight::model::MDSpot::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdrate_ = const_cast< ::com::htsc::mdc::insight::model::MDRate*>(
      ::com::htsc::mdc::insight::model::MDRate::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->orderbooksnapshot_ = const_cast< ::com::htsc::mdc::insight::model::ADOrderbookSnapshot*>(
      ::com::htsc::mdc::insight::model::ADOrderbookSnapshot::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->orderbooksnapshotwithtick_ = const_cast< ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick*>(
      ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdquote_ = const_cast< ::com::htsc::mdc::insight::model::MDQuote*>(
      ::com::htsc::mdc::insight::model::MDQuote::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdetfbasicinfo_ = const_cast< ::com::htsc::mdc::insight::model::MDETFBasicInfo*>(
      ::com::htsc::mdc::insight::model::MDETFBasicInfo::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdfiquote_ = const_cast< ::com::htsc::mdc::insight::model::MDFIQuote*>(
      ::com::htsc::mdc::insight::model::MDFIQuote::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdchipdistribution_ = const_cast< ::com::htsc::mdc::insight::model::ADChipDistribution*>(
      ::com::htsc::mdc::insight::model::ADChipDistribution::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdwarrant_ = const_cast< ::com::htsc::mdc::insight::model::MDWarrant*>(
      ::com::htsc::mdc::insight::model::MDWarrant::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdsecuritylending_ = const_cast< ::com::htsc::mdc::insight::model::MDSecurityLending*>(
      ::com::htsc::mdc::insight::model::MDSecurityLending::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdnews_ = const_cast< ::com::htsc::mdc::insight::model::ADNews*>(
      ::com::htsc::mdc::insight::model::ADNews::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdstaringresult_ = const_cast< ::com::htsc::mdc::insight::model::ADStaringResult*>(
      ::com::htsc::mdc::insight::model::ADStaringResult::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdderivedanalysis_ = const_cast< ::com::htsc::mdc::insight::model::ADDerivedAnalysis*>(
      ::com::htsc::mdc::insight::model::ADDerivedAnalysis::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdqbquote_ = const_cast< ::com::htsc::mdc::insight::model::MDQBQuote*>(
      ::com::htsc::mdc::insight::model::MDQBQuote::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdqbtransaction_ = const_cast< ::com::htsc::mdc::insight::model::MDQBTransaction*>(
      ::com::htsc::mdc::insight::model::MDQBTransaction::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdusaorder_ = const_cast< ::com::htsc::mdc::insight::model::MDUSAOrder*>(
      ::com::htsc::mdc::insight::model::MDUSAOrder::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdusatransaction_ = const_cast< ::com::htsc::mdc::insight::model::MDUSATransaction*>(
      ::com::htsc::mdc::insight::model::MDUSATransaction::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdslorder_ = const_cast< ::com::htsc::mdc::insight::model::MDSLOrder*>(
      ::com::htsc::mdc::insight::model::MDSLOrder::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdsltransaction_ = const_cast< ::com::htsc::mdc::insight::model::MDSLTransaction*>(
      ::com::htsc::mdc::insight::model::MDSLTransaction::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdhkgreymarket_ = const_cast< ::com::htsc::mdc::insight::model::MDHKGreyMarket*>(
      ::com::htsc::mdc::insight::model::MDHKGreyMarket::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdslindicativequote_ = const_cast< ::com::htsc::mdc::insight::model::MDSLIndicativeQuote*>(
      ::com::htsc::mdc::insight::model::MDSLIndicativeQuote::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdslstatistics_ = const_cast< ::com::htsc::mdc::insight::model::MDSLStatistics*>(
      ::com::htsc::mdc::insight::model::MDSLStatistics::internal_default_instance());
  ::com::htsc::mdc::insight::model::_MarketData_default_instance_._instance.get_mutable()->mdusaquote_ = const_cast< ::com::htsc::mdc::insight::model::MDUSAQuote*>(
      ::com::htsc::mdc::insight::model::MDUSAQuote::internal_default_instance());
}
class MarketData::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::MDStock& mdstock(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDIndex& mdindex(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDBond& mdbond(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDFund& mdfund(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDOption& mdoption(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDFuture& mdfuture(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDTransaction& mdtransaction(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDOrder& mdorder(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADKLine& mdkline(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADTwap& mdtwap(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADVwap& mdvwap(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDBasicInfo& mdconstant(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSimpleTick& mdsimpletick(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis& mdupsdownsanalysis(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADIndicatorsRanking& mdindicatorsranking(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::DynamicPacket& dynamicpacket(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADVolumeByPrice& mdvolumebyprice(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowAnalysis& mdfundflowanalysis(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDForex& mdforex(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSpot& mdspot(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDRate& mdrate(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADOrderbookSnapshot& orderbooksnapshot(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick& orderbooksnapshotwithtick(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDQuote& mdquote(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDETFBasicInfo& mdetfbasicinfo(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDFIQuote& mdfiquote(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADChipDistribution& mdchipdistribution(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDWarrant& mdwarrant(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSecurityLending& mdsecuritylending(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADNews& mdnews(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADStaringResult& mdstaringresult(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADDerivedAnalysis& mdderivedanalysis(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDQBQuote& mdqbquote(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDQBTransaction& mdqbtransaction(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDUSAOrder& mdusaorder(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDUSATransaction& mdusatransaction(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLOrder& mdslorder(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLTransaction& mdsltransaction(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDHKGreyMarket& mdhkgreymarket(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLIndicativeQuote& mdslindicativequote(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLStatistics& mdslstatistics(const MarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDUSAQuote& mdusaquote(const MarketData* msg);
};

const ::com::htsc::mdc::insight::model::MDStock&
MarketData::HasBitSetters::mdstock(const MarketData* msg) {
  return *msg->mdstock_;
}
const ::com::htsc::mdc::insight::model::MDIndex&
MarketData::HasBitSetters::mdindex(const MarketData* msg) {
  return *msg->mdindex_;
}
const ::com::htsc::mdc::insight::model::MDBond&
MarketData::HasBitSetters::mdbond(const MarketData* msg) {
  return *msg->mdbond_;
}
const ::com::htsc::mdc::insight::model::MDFund&
MarketData::HasBitSetters::mdfund(const MarketData* msg) {
  return *msg->mdfund_;
}
const ::com::htsc::mdc::insight::model::MDOption&
MarketData::HasBitSetters::mdoption(const MarketData* msg) {
  return *msg->mdoption_;
}
const ::com::htsc::mdc::insight::model::MDFuture&
MarketData::HasBitSetters::mdfuture(const MarketData* msg) {
  return *msg->mdfuture_;
}
const ::com::htsc::mdc::insight::model::MDTransaction&
MarketData::HasBitSetters::mdtransaction(const MarketData* msg) {
  return *msg->mdtransaction_;
}
const ::com::htsc::mdc::insight::model::MDOrder&
MarketData::HasBitSetters::mdorder(const MarketData* msg) {
  return *msg->mdorder_;
}
const ::com::htsc::mdc::insight::model::ADKLine&
MarketData::HasBitSetters::mdkline(const MarketData* msg) {
  return *msg->mdkline_;
}
const ::com::htsc::mdc::insight::model::ADTwap&
MarketData::HasBitSetters::mdtwap(const MarketData* msg) {
  return *msg->mdtwap_;
}
const ::com::htsc::mdc::insight::model::ADVwap&
MarketData::HasBitSetters::mdvwap(const MarketData* msg) {
  return *msg->mdvwap_;
}
const ::com::htsc::mdc::insight::model::MDBasicInfo&
MarketData::HasBitSetters::mdconstant(const MarketData* msg) {
  return *msg->mdconstant_;
}
const ::com::htsc::mdc::insight::model::MDSimpleTick&
MarketData::HasBitSetters::mdsimpletick(const MarketData* msg) {
  return *msg->mdsimpletick_;
}
const ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis&
MarketData::HasBitSetters::mdupsdownsanalysis(const MarketData* msg) {
  return *msg->mdupsdownsanalysis_;
}
const ::com::htsc::mdc::insight::model::ADIndicatorsRanking&
MarketData::HasBitSetters::mdindicatorsranking(const MarketData* msg) {
  return *msg->mdindicatorsranking_;
}
const ::com::htsc::mdc::insight::model::DynamicPacket&
MarketData::HasBitSetters::dynamicpacket(const MarketData* msg) {
  return *msg->dynamicpacket_;
}
const ::com::htsc::mdc::insight::model::ADVolumeByPrice&
MarketData::HasBitSetters::mdvolumebyprice(const MarketData* msg) {
  return *msg->mdvolumebyprice_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowAnalysis&
MarketData::HasBitSetters::mdfundflowanalysis(const MarketData* msg) {
  return *msg->mdfundflowanalysis_;
}
const ::com::htsc::mdc::insight::model::MDForex&
MarketData::HasBitSetters::mdforex(const MarketData* msg) {
  return *msg->mdforex_;
}
const ::com::htsc::mdc::insight::model::MDSpot&
MarketData::HasBitSetters::mdspot(const MarketData* msg) {
  return *msg->mdspot_;
}
const ::com::htsc::mdc::insight::model::MDRate&
MarketData::HasBitSetters::mdrate(const MarketData* msg) {
  return *msg->mdrate_;
}
const ::com::htsc::mdc::insight::model::ADOrderbookSnapshot&
MarketData::HasBitSetters::orderbooksnapshot(const MarketData* msg) {
  return *msg->orderbooksnapshot_;
}
const ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick&
MarketData::HasBitSetters::orderbooksnapshotwithtick(const MarketData* msg) {
  return *msg->orderbooksnapshotwithtick_;
}
const ::com::htsc::mdc::insight::model::MDQuote&
MarketData::HasBitSetters::mdquote(const MarketData* msg) {
  return *msg->mdquote_;
}
const ::com::htsc::mdc::insight::model::MDETFBasicInfo&
MarketData::HasBitSetters::mdetfbasicinfo(const MarketData* msg) {
  return *msg->mdetfbasicinfo_;
}
const ::com::htsc::mdc::insight::model::MDFIQuote&
MarketData::HasBitSetters::mdfiquote(const MarketData* msg) {
  return *msg->mdfiquote_;
}
const ::com::htsc::mdc::insight::model::ADChipDistribution&
MarketData::HasBitSetters::mdchipdistribution(const MarketData* msg) {
  return *msg->mdchipdistribution_;
}
const ::com::htsc::mdc::insight::model::MDWarrant&
MarketData::HasBitSetters::mdwarrant(const MarketData* msg) {
  return *msg->mdwarrant_;
}
const ::com::htsc::mdc::insight::model::MDSecurityLending&
MarketData::HasBitSetters::mdsecuritylending(const MarketData* msg) {
  return *msg->mdsecuritylending_;
}
const ::com::htsc::mdc::insight::model::ADNews&
MarketData::HasBitSetters::mdnews(const MarketData* msg) {
  return *msg->mdnews_;
}
const ::com::htsc::mdc::insight::model::ADStaringResult&
MarketData::HasBitSetters::mdstaringresult(const MarketData* msg) {
  return *msg->mdstaringresult_;
}
const ::com::htsc::mdc::insight::model::ADDerivedAnalysis&
MarketData::HasBitSetters::mdderivedanalysis(const MarketData* msg) {
  return *msg->mdderivedanalysis_;
}
const ::com::htsc::mdc::insight::model::MDQBQuote&
MarketData::HasBitSetters::mdqbquote(const MarketData* msg) {
  return *msg->mdqbquote_;
}
const ::com::htsc::mdc::insight::model::MDQBTransaction&
MarketData::HasBitSetters::mdqbtransaction(const MarketData* msg) {
  return *msg->mdqbtransaction_;
}
const ::com::htsc::mdc::insight::model::MDUSAOrder&
MarketData::HasBitSetters::mdusaorder(const MarketData* msg) {
  return *msg->mdusaorder_;
}
const ::com::htsc::mdc::insight::model::MDUSATransaction&
MarketData::HasBitSetters::mdusatransaction(const MarketData* msg) {
  return *msg->mdusatransaction_;
}
const ::com::htsc::mdc::insight::model::MDSLOrder&
MarketData::HasBitSetters::mdslorder(const MarketData* msg) {
  return *msg->mdslorder_;
}
const ::com::htsc::mdc::insight::model::MDSLTransaction&
MarketData::HasBitSetters::mdsltransaction(const MarketData* msg) {
  return *msg->mdsltransaction_;
}
const ::com::htsc::mdc::insight::model::MDHKGreyMarket&
MarketData::HasBitSetters::mdhkgreymarket(const MarketData* msg) {
  return *msg->mdhkgreymarket_;
}
const ::com::htsc::mdc::insight::model::MDSLIndicativeQuote&
MarketData::HasBitSetters::mdslindicativequote(const MarketData* msg) {
  return *msg->mdslindicativequote_;
}
const ::com::htsc::mdc::insight::model::MDSLStatistics&
MarketData::HasBitSetters::mdslstatistics(const MarketData* msg) {
  return *msg->mdslstatistics_;
}
const ::com::htsc::mdc::insight::model::MDUSAQuote&
MarketData::HasBitSetters::mdusaquote(const MarketData* msg) {
  return *msg->mdusaquote_;
}
void MarketData::clear_mdstock() {
  if (GetArenaNoVirtual() == nullptr && mdstock_ != nullptr) {
    delete mdstock_;
  }
  mdstock_ = nullptr;
}
void MarketData::clear_mdindex() {
  if (GetArenaNoVirtual() == nullptr && mdindex_ != nullptr) {
    delete mdindex_;
  }
  mdindex_ = nullptr;
}
void MarketData::clear_mdbond() {
  if (GetArenaNoVirtual() == nullptr && mdbond_ != nullptr) {
    delete mdbond_;
  }
  mdbond_ = nullptr;
}
void MarketData::clear_mdfund() {
  if (GetArenaNoVirtual() == nullptr && mdfund_ != nullptr) {
    delete mdfund_;
  }
  mdfund_ = nullptr;
}
void MarketData::clear_mdoption() {
  if (GetArenaNoVirtual() == nullptr && mdoption_ != nullptr) {
    delete mdoption_;
  }
  mdoption_ = nullptr;
}
void MarketData::clear_mdfuture() {
  if (GetArenaNoVirtual() == nullptr && mdfuture_ != nullptr) {
    delete mdfuture_;
  }
  mdfuture_ = nullptr;
}
void MarketData::clear_mdtransaction() {
  if (GetArenaNoVirtual() == nullptr && mdtransaction_ != nullptr) {
    delete mdtransaction_;
  }
  mdtransaction_ = nullptr;
}
void MarketData::clear_mdorder() {
  if (GetArenaNoVirtual() == nullptr && mdorder_ != nullptr) {
    delete mdorder_;
  }
  mdorder_ = nullptr;
}
void MarketData::clear_mdkline() {
  if (GetArenaNoVirtual() == nullptr && mdkline_ != nullptr) {
    delete mdkline_;
  }
  mdkline_ = nullptr;
}
void MarketData::clear_mdtwap() {
  if (GetArenaNoVirtual() == nullptr && mdtwap_ != nullptr) {
    delete mdtwap_;
  }
  mdtwap_ = nullptr;
}
void MarketData::clear_mdvwap() {
  if (GetArenaNoVirtual() == nullptr && mdvwap_ != nullptr) {
    delete mdvwap_;
  }
  mdvwap_ = nullptr;
}
void MarketData::clear_mdconstant() {
  if (GetArenaNoVirtual() == nullptr && mdconstant_ != nullptr) {
    delete mdconstant_;
  }
  mdconstant_ = nullptr;
}
void MarketData::clear_mdsimpletick() {
  if (GetArenaNoVirtual() == nullptr && mdsimpletick_ != nullptr) {
    delete mdsimpletick_;
  }
  mdsimpletick_ = nullptr;
}
void MarketData::clear_mdupsdownsanalysis() {
  if (GetArenaNoVirtual() == nullptr && mdupsdownsanalysis_ != nullptr) {
    delete mdupsdownsanalysis_;
  }
  mdupsdownsanalysis_ = nullptr;
}
void MarketData::clear_mdindicatorsranking() {
  if (GetArenaNoVirtual() == nullptr && mdindicatorsranking_ != nullptr) {
    delete mdindicatorsranking_;
  }
  mdindicatorsranking_ = nullptr;
}
void MarketData::clear_dynamicpacket() {
  if (GetArenaNoVirtual() == nullptr && dynamicpacket_ != nullptr) {
    delete dynamicpacket_;
  }
  dynamicpacket_ = nullptr;
}
void MarketData::clear_mdvolumebyprice() {
  if (GetArenaNoVirtual() == nullptr && mdvolumebyprice_ != nullptr) {
    delete mdvolumebyprice_;
  }
  mdvolumebyprice_ = nullptr;
}
void MarketData::clear_mdfundflowanalysis() {
  if (GetArenaNoVirtual() == nullptr && mdfundflowanalysis_ != nullptr) {
    delete mdfundflowanalysis_;
  }
  mdfundflowanalysis_ = nullptr;
}
void MarketData::clear_mdforex() {
  if (GetArenaNoVirtual() == nullptr && mdforex_ != nullptr) {
    delete mdforex_;
  }
  mdforex_ = nullptr;
}
void MarketData::clear_mdspot() {
  if (GetArenaNoVirtual() == nullptr && mdspot_ != nullptr) {
    delete mdspot_;
  }
  mdspot_ = nullptr;
}
void MarketData::clear_mdrate() {
  if (GetArenaNoVirtual() == nullptr && mdrate_ != nullptr) {
    delete mdrate_;
  }
  mdrate_ = nullptr;
}
void MarketData::clear_orderbooksnapshot() {
  if (GetArenaNoVirtual() == nullptr && orderbooksnapshot_ != nullptr) {
    delete orderbooksnapshot_;
  }
  orderbooksnapshot_ = nullptr;
}
void MarketData::clear_orderbooksnapshotwithtick() {
  if (GetArenaNoVirtual() == nullptr && orderbooksnapshotwithtick_ != nullptr) {
    delete orderbooksnapshotwithtick_;
  }
  orderbooksnapshotwithtick_ = nullptr;
}
void MarketData::clear_mdquote() {
  if (GetArenaNoVirtual() == nullptr && mdquote_ != nullptr) {
    delete mdquote_;
  }
  mdquote_ = nullptr;
}
void MarketData::clear_mdetfbasicinfo() {
  if (GetArenaNoVirtual() == nullptr && mdetfbasicinfo_ != nullptr) {
    delete mdetfbasicinfo_;
  }
  mdetfbasicinfo_ = nullptr;
}
void MarketData::clear_mdfiquote() {
  if (GetArenaNoVirtual() == nullptr && mdfiquote_ != nullptr) {
    delete mdfiquote_;
  }
  mdfiquote_ = nullptr;
}
void MarketData::clear_mdchipdistribution() {
  if (GetArenaNoVirtual() == nullptr && mdchipdistribution_ != nullptr) {
    delete mdchipdistribution_;
  }
  mdchipdistribution_ = nullptr;
}
void MarketData::clear_mdwarrant() {
  if (GetArenaNoVirtual() == nullptr && mdwarrant_ != nullptr) {
    delete mdwarrant_;
  }
  mdwarrant_ = nullptr;
}
void MarketData::clear_mdsecuritylending() {
  if (GetArenaNoVirtual() == nullptr && mdsecuritylending_ != nullptr) {
    delete mdsecuritylending_;
  }
  mdsecuritylending_ = nullptr;
}
void MarketData::clear_mdnews() {
  if (GetArenaNoVirtual() == nullptr && mdnews_ != nullptr) {
    delete mdnews_;
  }
  mdnews_ = nullptr;
}
void MarketData::clear_mdstaringresult() {
  if (GetArenaNoVirtual() == nullptr && mdstaringresult_ != nullptr) {
    delete mdstaringresult_;
  }
  mdstaringresult_ = nullptr;
}
void MarketData::clear_mdderivedanalysis() {
  if (GetArenaNoVirtual() == nullptr && mdderivedanalysis_ != nullptr) {
    delete mdderivedanalysis_;
  }
  mdderivedanalysis_ = nullptr;
}
void MarketData::clear_mdqbquote() {
  if (GetArenaNoVirtual() == nullptr && mdqbquote_ != nullptr) {
    delete mdqbquote_;
  }
  mdqbquote_ = nullptr;
}
void MarketData::clear_mdqbtransaction() {
  if (GetArenaNoVirtual() == nullptr && mdqbtransaction_ != nullptr) {
    delete mdqbtransaction_;
  }
  mdqbtransaction_ = nullptr;
}
void MarketData::clear_mdusaorder() {
  if (GetArenaNoVirtual() == nullptr && mdusaorder_ != nullptr) {
    delete mdusaorder_;
  }
  mdusaorder_ = nullptr;
}
void MarketData::clear_mdusatransaction() {
  if (GetArenaNoVirtual() == nullptr && mdusatransaction_ != nullptr) {
    delete mdusatransaction_;
  }
  mdusatransaction_ = nullptr;
}
void MarketData::clear_mdslorder() {
  if (GetArenaNoVirtual() == nullptr && mdslorder_ != nullptr) {
    delete mdslorder_;
  }
  mdslorder_ = nullptr;
}
void MarketData::clear_mdsltransaction() {
  if (GetArenaNoVirtual() == nullptr && mdsltransaction_ != nullptr) {
    delete mdsltransaction_;
  }
  mdsltransaction_ = nullptr;
}
void MarketData::clear_mdhkgreymarket() {
  if (GetArenaNoVirtual() == nullptr && mdhkgreymarket_ != nullptr) {
    delete mdhkgreymarket_;
  }
  mdhkgreymarket_ = nullptr;
}
void MarketData::clear_mdslindicativequote() {
  if (GetArenaNoVirtual() == nullptr && mdslindicativequote_ != nullptr) {
    delete mdslindicativequote_;
  }
  mdslindicativequote_ = nullptr;
}
void MarketData::clear_mdslstatistics() {
  if (GetArenaNoVirtual() == nullptr && mdslstatistics_ != nullptr) {
    delete mdslstatistics_;
  }
  mdslstatistics_ = nullptr;
}
void MarketData::clear_mdusaquote() {
  if (GetArenaNoVirtual() == nullptr && mdusaquote_ != nullptr) {
    delete mdusaquote_;
  }
  mdusaquote_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketData::kMarketDataTypeFieldNumber;
const int MarketData::kMdStockFieldNumber;
const int MarketData::kMdIndexFieldNumber;
const int MarketData::kMdBondFieldNumber;
const int MarketData::kMdFundFieldNumber;
const int MarketData::kMdOptionFieldNumber;
const int MarketData::kMdFutureFieldNumber;
const int MarketData::kMdTransactionFieldNumber;
const int MarketData::kMdOrderFieldNumber;
const int MarketData::kMdKLineFieldNumber;
const int MarketData::kMdTwapFieldNumber;
const int MarketData::kMdVwapFieldNumber;
const int MarketData::kMdConstantFieldNumber;
const int MarketData::kMdSimpleTickFieldNumber;
const int MarketData::kMdUpsDownsAnalysisFieldNumber;
const int MarketData::kMdIndicatorsRankingFieldNumber;
const int MarketData::kDynamicPacketFieldNumber;
const int MarketData::kMdVolumeByPriceFieldNumber;
const int MarketData::kMdFundFlowAnalysisFieldNumber;
const int MarketData::kMdForexFieldNumber;
const int MarketData::kMdSpotFieldNumber;
const int MarketData::kMdRateFieldNumber;
const int MarketData::kOrderbookSnapshotFieldNumber;
const int MarketData::kOrderbookSnapshotWithTickFieldNumber;
const int MarketData::kMdQuoteFieldNumber;
const int MarketData::kMdETFBasicInfoFieldNumber;
const int MarketData::kMdFIQuoteFieldNumber;
const int MarketData::kMdChipDistributionFieldNumber;
const int MarketData::kMdWarrantFieldNumber;
const int MarketData::kMdSecurityLendingFieldNumber;
const int MarketData::kMdNewsFieldNumber;
const int MarketData::kMdStaringResultFieldNumber;
const int MarketData::kMdDerivedAnalysisFieldNumber;
const int MarketData::kMdQBQuoteFieldNumber;
const int MarketData::kMdQBTransactionFieldNumber;
const int MarketData::kMdUSAOrderFieldNumber;
const int MarketData::kMdUSATransactionFieldNumber;
const int MarketData::kMdSLOrderFieldNumber;
const int MarketData::kMdSLTransactionFieldNumber;
const int MarketData::kMdHKGreyMarketFieldNumber;
const int MarketData::kMdSLIndicativeQuoteFieldNumber;
const int MarketData::kMdSLStatisticsFieldNumber;
const int MarketData::kMdUSAQuoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketData::MarketData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MarketData)
}
MarketData::MarketData(const MarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mdstock()) {
    mdstock_ = new ::com::htsc::mdc::insight::model::MDStock(*from.mdstock_);
  } else {
    mdstock_ = nullptr;
  }
  if (from.has_mdindex()) {
    mdindex_ = new ::com::htsc::mdc::insight::model::MDIndex(*from.mdindex_);
  } else {
    mdindex_ = nullptr;
  }
  if (from.has_mdbond()) {
    mdbond_ = new ::com::htsc::mdc::insight::model::MDBond(*from.mdbond_);
  } else {
    mdbond_ = nullptr;
  }
  if (from.has_mdfund()) {
    mdfund_ = new ::com::htsc::mdc::insight::model::MDFund(*from.mdfund_);
  } else {
    mdfund_ = nullptr;
  }
  if (from.has_mdoption()) {
    mdoption_ = new ::com::htsc::mdc::insight::model::MDOption(*from.mdoption_);
  } else {
    mdoption_ = nullptr;
  }
  if (from.has_mdfuture()) {
    mdfuture_ = new ::com::htsc::mdc::insight::model::MDFuture(*from.mdfuture_);
  } else {
    mdfuture_ = nullptr;
  }
  if (from.has_mdtransaction()) {
    mdtransaction_ = new ::com::htsc::mdc::insight::model::MDTransaction(*from.mdtransaction_);
  } else {
    mdtransaction_ = nullptr;
  }
  if (from.has_mdorder()) {
    mdorder_ = new ::com::htsc::mdc::insight::model::MDOrder(*from.mdorder_);
  } else {
    mdorder_ = nullptr;
  }
  if (from.has_mdkline()) {
    mdkline_ = new ::com::htsc::mdc::insight::model::ADKLine(*from.mdkline_);
  } else {
    mdkline_ = nullptr;
  }
  if (from.has_mdtwap()) {
    mdtwap_ = new ::com::htsc::mdc::insight::model::ADTwap(*from.mdtwap_);
  } else {
    mdtwap_ = nullptr;
  }
  if (from.has_mdvwap()) {
    mdvwap_ = new ::com::htsc::mdc::insight::model::ADVwap(*from.mdvwap_);
  } else {
    mdvwap_ = nullptr;
  }
  if (from.has_mdconstant()) {
    mdconstant_ = new ::com::htsc::mdc::insight::model::MDBasicInfo(*from.mdconstant_);
  } else {
    mdconstant_ = nullptr;
  }
  if (from.has_mdsimpletick()) {
    mdsimpletick_ = new ::com::htsc::mdc::insight::model::MDSimpleTick(*from.mdsimpletick_);
  } else {
    mdsimpletick_ = nullptr;
  }
  if (from.has_mdupsdownsanalysis()) {
    mdupsdownsanalysis_ = new ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis(*from.mdupsdownsanalysis_);
  } else {
    mdupsdownsanalysis_ = nullptr;
  }
  if (from.has_mdindicatorsranking()) {
    mdindicatorsranking_ = new ::com::htsc::mdc::insight::model::ADIndicatorsRanking(*from.mdindicatorsranking_);
  } else {
    mdindicatorsranking_ = nullptr;
  }
  if (from.has_dynamicpacket()) {
    dynamicpacket_ = new ::com::htsc::mdc::insight::model::DynamicPacket(*from.dynamicpacket_);
  } else {
    dynamicpacket_ = nullptr;
  }
  if (from.has_mdvolumebyprice()) {
    mdvolumebyprice_ = new ::com::htsc::mdc::insight::model::ADVolumeByPrice(*from.mdvolumebyprice_);
  } else {
    mdvolumebyprice_ = nullptr;
  }
  if (from.has_mdfundflowanalysis()) {
    mdfundflowanalysis_ = new ::com::htsc::mdc::insight::model::ADFundFlowAnalysis(*from.mdfundflowanalysis_);
  } else {
    mdfundflowanalysis_ = nullptr;
  }
  if (from.has_mdforex()) {
    mdforex_ = new ::com::htsc::mdc::insight::model::MDForex(*from.mdforex_);
  } else {
    mdforex_ = nullptr;
  }
  if (from.has_mdspot()) {
    mdspot_ = new ::com::htsc::mdc::insight::model::MDSpot(*from.mdspot_);
  } else {
    mdspot_ = nullptr;
  }
  if (from.has_mdrate()) {
    mdrate_ = new ::com::htsc::mdc::insight::model::MDRate(*from.mdrate_);
  } else {
    mdrate_ = nullptr;
  }
  if (from.has_orderbooksnapshot()) {
    orderbooksnapshot_ = new ::com::htsc::mdc::insight::model::ADOrderbookSnapshot(*from.orderbooksnapshot_);
  } else {
    orderbooksnapshot_ = nullptr;
  }
  if (from.has_orderbooksnapshotwithtick()) {
    orderbooksnapshotwithtick_ = new ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick(*from.orderbooksnapshotwithtick_);
  } else {
    orderbooksnapshotwithtick_ = nullptr;
  }
  if (from.has_mdquote()) {
    mdquote_ = new ::com::htsc::mdc::insight::model::MDQuote(*from.mdquote_);
  } else {
    mdquote_ = nullptr;
  }
  if (from.has_mdetfbasicinfo()) {
    mdetfbasicinfo_ = new ::com::htsc::mdc::insight::model::MDETFBasicInfo(*from.mdetfbasicinfo_);
  } else {
    mdetfbasicinfo_ = nullptr;
  }
  if (from.has_mdfiquote()) {
    mdfiquote_ = new ::com::htsc::mdc::insight::model::MDFIQuote(*from.mdfiquote_);
  } else {
    mdfiquote_ = nullptr;
  }
  if (from.has_mdchipdistribution()) {
    mdchipdistribution_ = new ::com::htsc::mdc::insight::model::ADChipDistribution(*from.mdchipdistribution_);
  } else {
    mdchipdistribution_ = nullptr;
  }
  if (from.has_mdwarrant()) {
    mdwarrant_ = new ::com::htsc::mdc::insight::model::MDWarrant(*from.mdwarrant_);
  } else {
    mdwarrant_ = nullptr;
  }
  if (from.has_mdsecuritylending()) {
    mdsecuritylending_ = new ::com::htsc::mdc::insight::model::MDSecurityLending(*from.mdsecuritylending_);
  } else {
    mdsecuritylending_ = nullptr;
  }
  if (from.has_mdnews()) {
    mdnews_ = new ::com::htsc::mdc::insight::model::ADNews(*from.mdnews_);
  } else {
    mdnews_ = nullptr;
  }
  if (from.has_mdstaringresult()) {
    mdstaringresult_ = new ::com::htsc::mdc::insight::model::ADStaringResult(*from.mdstaringresult_);
  } else {
    mdstaringresult_ = nullptr;
  }
  if (from.has_mdderivedanalysis()) {
    mdderivedanalysis_ = new ::com::htsc::mdc::insight::model::ADDerivedAnalysis(*from.mdderivedanalysis_);
  } else {
    mdderivedanalysis_ = nullptr;
  }
  if (from.has_mdqbquote()) {
    mdqbquote_ = new ::com::htsc::mdc::insight::model::MDQBQuote(*from.mdqbquote_);
  } else {
    mdqbquote_ = nullptr;
  }
  if (from.has_mdqbtransaction()) {
    mdqbtransaction_ = new ::com::htsc::mdc::insight::model::MDQBTransaction(*from.mdqbtransaction_);
  } else {
    mdqbtransaction_ = nullptr;
  }
  if (from.has_mdusaorder()) {
    mdusaorder_ = new ::com::htsc::mdc::insight::model::MDUSAOrder(*from.mdusaorder_);
  } else {
    mdusaorder_ = nullptr;
  }
  if (from.has_mdusatransaction()) {
    mdusatransaction_ = new ::com::htsc::mdc::insight::model::MDUSATransaction(*from.mdusatransaction_);
  } else {
    mdusatransaction_ = nullptr;
  }
  if (from.has_mdslorder()) {
    mdslorder_ = new ::com::htsc::mdc::insight::model::MDSLOrder(*from.mdslorder_);
  } else {
    mdslorder_ = nullptr;
  }
  if (from.has_mdsltransaction()) {
    mdsltransaction_ = new ::com::htsc::mdc::insight::model::MDSLTransaction(*from.mdsltransaction_);
  } else {
    mdsltransaction_ = nullptr;
  }
  if (from.has_mdhkgreymarket()) {
    mdhkgreymarket_ = new ::com::htsc::mdc::insight::model::MDHKGreyMarket(*from.mdhkgreymarket_);
  } else {
    mdhkgreymarket_ = nullptr;
  }
  if (from.has_mdslindicativequote()) {
    mdslindicativequote_ = new ::com::htsc::mdc::insight::model::MDSLIndicativeQuote(*from.mdslindicativequote_);
  } else {
    mdslindicativequote_ = nullptr;
  }
  if (from.has_mdslstatistics()) {
    mdslstatistics_ = new ::com::htsc::mdc::insight::model::MDSLStatistics(*from.mdslstatistics_);
  } else {
    mdslstatistics_ = nullptr;
  }
  if (from.has_mdusaquote()) {
    mdusaquote_ = new ::com::htsc::mdc::insight::model::MDUSAQuote(*from.mdusaquote_);
  } else {
    mdusaquote_ = nullptr;
  }
  marketdatatype_ = from.marketdatatype_;
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MarketData)
}

void MarketData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketData_MarketData_2eproto.base);
  ::memset(&mdstock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketdatatype_) -
      reinterpret_cast<char*>(&mdstock_)) + sizeof(marketdatatype_));
}

MarketData::~MarketData() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MarketData)
  SharedDtor();
}

void MarketData::SharedDtor() {
  if (this != internal_default_instance()) delete mdstock_;
  if (this != internal_default_instance()) delete mdindex_;
  if (this != internal_default_instance()) delete mdbond_;
  if (this != internal_default_instance()) delete mdfund_;
  if (this != internal_default_instance()) delete mdoption_;
  if (this != internal_default_instance()) delete mdfuture_;
  if (this != internal_default_instance()) delete mdtransaction_;
  if (this != internal_default_instance()) delete mdorder_;
  if (this != internal_default_instance()) delete mdkline_;
  if (this != internal_default_instance()) delete mdtwap_;
  if (this != internal_default_instance()) delete mdvwap_;
  if (this != internal_default_instance()) delete mdconstant_;
  if (this != internal_default_instance()) delete mdsimpletick_;
  if (this != internal_default_instance()) delete mdupsdownsanalysis_;
  if (this != internal_default_instance()) delete mdindicatorsranking_;
  if (this != internal_default_instance()) delete dynamicpacket_;
  if (this != internal_default_instance()) delete mdvolumebyprice_;
  if (this != internal_default_instance()) delete mdfundflowanalysis_;
  if (this != internal_default_instance()) delete mdforex_;
  if (this != internal_default_instance()) delete mdspot_;
  if (this != internal_default_instance()) delete mdrate_;
  if (this != internal_default_instance()) delete orderbooksnapshot_;
  if (this != internal_default_instance()) delete orderbooksnapshotwithtick_;
  if (this != internal_default_instance()) delete mdquote_;
  if (this != internal_default_instance()) delete mdetfbasicinfo_;
  if (this != internal_default_instance()) delete mdfiquote_;
  if (this != internal_default_instance()) delete mdchipdistribution_;
  if (this != internal_default_instance()) delete mdwarrant_;
  if (this != internal_default_instance()) delete mdsecuritylending_;
  if (this != internal_default_instance()) delete mdnews_;
  if (this != internal_default_instance()) delete mdstaringresult_;
  if (this != internal_default_instance()) delete mdderivedanalysis_;
  if (this != internal_default_instance()) delete mdqbquote_;
  if (this != internal_default_instance()) delete mdqbtransaction_;
  if (this != internal_default_instance()) delete mdusaorder_;
  if (this != internal_default_instance()) delete mdusatransaction_;
  if (this != internal_default_instance()) delete mdslorder_;
  if (this != internal_default_instance()) delete mdsltransaction_;
  if (this != internal_default_instance()) delete mdhkgreymarket_;
  if (this != internal_default_instance()) delete mdslindicativequote_;
  if (this != internal_default_instance()) delete mdslstatistics_;
  if (this != internal_default_instance()) delete mdusaquote_;
}

void MarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketData& MarketData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketData_MarketData_2eproto.base);
  return *internal_default_instance();
}


void MarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mdstock_ != nullptr) {
    delete mdstock_;
  }
  mdstock_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdindex_ != nullptr) {
    delete mdindex_;
  }
  mdindex_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdbond_ != nullptr) {
    delete mdbond_;
  }
  mdbond_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdfund_ != nullptr) {
    delete mdfund_;
  }
  mdfund_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdoption_ != nullptr) {
    delete mdoption_;
  }
  mdoption_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdfuture_ != nullptr) {
    delete mdfuture_;
  }
  mdfuture_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdtransaction_ != nullptr) {
    delete mdtransaction_;
  }
  mdtransaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdorder_ != nullptr) {
    delete mdorder_;
  }
  mdorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdkline_ != nullptr) {
    delete mdkline_;
  }
  mdkline_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdtwap_ != nullptr) {
    delete mdtwap_;
  }
  mdtwap_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdvwap_ != nullptr) {
    delete mdvwap_;
  }
  mdvwap_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdconstant_ != nullptr) {
    delete mdconstant_;
  }
  mdconstant_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdsimpletick_ != nullptr) {
    delete mdsimpletick_;
  }
  mdsimpletick_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdupsdownsanalysis_ != nullptr) {
    delete mdupsdownsanalysis_;
  }
  mdupsdownsanalysis_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdindicatorsranking_ != nullptr) {
    delete mdindicatorsranking_;
  }
  mdindicatorsranking_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dynamicpacket_ != nullptr) {
    delete dynamicpacket_;
  }
  dynamicpacket_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdvolumebyprice_ != nullptr) {
    delete mdvolumebyprice_;
  }
  mdvolumebyprice_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdfundflowanalysis_ != nullptr) {
    delete mdfundflowanalysis_;
  }
  mdfundflowanalysis_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdforex_ != nullptr) {
    delete mdforex_;
  }
  mdforex_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdspot_ != nullptr) {
    delete mdspot_;
  }
  mdspot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdrate_ != nullptr) {
    delete mdrate_;
  }
  mdrate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orderbooksnapshot_ != nullptr) {
    delete orderbooksnapshot_;
  }
  orderbooksnapshot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orderbooksnapshotwithtick_ != nullptr) {
    delete orderbooksnapshotwithtick_;
  }
  orderbooksnapshotwithtick_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdquote_ != nullptr) {
    delete mdquote_;
  }
  mdquote_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdetfbasicinfo_ != nullptr) {
    delete mdetfbasicinfo_;
  }
  mdetfbasicinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdfiquote_ != nullptr) {
    delete mdfiquote_;
  }
  mdfiquote_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdchipdistribution_ != nullptr) {
    delete mdchipdistribution_;
  }
  mdchipdistribution_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdwarrant_ != nullptr) {
    delete mdwarrant_;
  }
  mdwarrant_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdsecuritylending_ != nullptr) {
    delete mdsecuritylending_;
  }
  mdsecuritylending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdnews_ != nullptr) {
    delete mdnews_;
  }
  mdnews_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdstaringresult_ != nullptr) {
    delete mdstaringresult_;
  }
  mdstaringresult_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdderivedanalysis_ != nullptr) {
    delete mdderivedanalysis_;
  }
  mdderivedanalysis_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdqbquote_ != nullptr) {
    delete mdqbquote_;
  }
  mdqbquote_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdqbtransaction_ != nullptr) {
    delete mdqbtransaction_;
  }
  mdqbtransaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdusaorder_ != nullptr) {
    delete mdusaorder_;
  }
  mdusaorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdusatransaction_ != nullptr) {
    delete mdusatransaction_;
  }
  mdusatransaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdslorder_ != nullptr) {
    delete mdslorder_;
  }
  mdslorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdsltransaction_ != nullptr) {
    delete mdsltransaction_;
  }
  mdsltransaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdhkgreymarket_ != nullptr) {
    delete mdhkgreymarket_;
  }
  mdhkgreymarket_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdslindicativequote_ != nullptr) {
    delete mdslindicativequote_;
  }
  mdslindicativequote_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdslstatistics_ != nullptr) {
    delete mdslstatistics_;
  }
  mdslstatistics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mdusaquote_ != nullptr) {
    delete mdusaquote_;
  }
  mdusaquote_ = nullptr;
  marketdatatype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_marketdatatype(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_mdstock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_mdindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_mdbond(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_mdfund(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_mdoption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_mdfuture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_mdtransaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_mdorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_mdkline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_mdtwap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_mdvwap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_mdconstant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_mdsimpletick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_mdupsdownsanalysis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_mdindicatorsranking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_dynamicpacket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_mdvolumebyprice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_mdfundflowanalysis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_mdforex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_mdspot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_mdrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_orderbooksnapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_orderbooksnapshotwithtick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mdquote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mdetfbasicinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mdfiquote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_mdchipdistribution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_mdwarrant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_mdsecuritylending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_mdnews(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_mdstaringresult(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_mdderivedanalysis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_mdqbquote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_mdqbtransaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_mdusaorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_mdusatransaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_mdslorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_mdsltransaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_mdhkgreymarket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_mdslindicativequote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_mdslstatistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_mdusaquote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MarketData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_marketdatatype(static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdstock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdindex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdbond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdfund()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdoption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdfuture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdtransaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdkline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdtwap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdvwap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdconstant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdsimpletick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdupsdownsanalysis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdindicatorsranking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamicpacket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdvolumebyprice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdfundflowanalysis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdforex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdspot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdrate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orderbooksnapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orderbooksnapshotwithtick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdquote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdetfbasicinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdfiquote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdchipdistribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdwarrant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdsecuritylending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdnews()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdstaringresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdderivedanalysis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdqbquote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdqbtransaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdusaorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdusatransaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdslorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdsltransaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdhkgreymarket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdslindicativequote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdslstatistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdusaquote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
  if (this->marketdatatype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->marketdatatype(), output);
  }

  // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
  if (this->has_mdstock()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::mdstock(this), output);
  }

  // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
  if (this->has_mdindex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::mdindex(this), output);
  }

  // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
  if (this->has_mdbond()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::mdbond(this), output);
  }

  // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
  if (this->has_mdfund()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::mdfund(this), output);
  }

  // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
  if (this->has_mdoption()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::mdoption(this), output);
  }

  // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
  if (this->has_mdfuture()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::mdfuture(this), output);
  }

  // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
  if (this->has_mdtransaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::mdtransaction(this), output);
  }

  // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
  if (this->has_mdorder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::mdorder(this), output);
  }

  // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
  if (this->has_mdkline()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::mdkline(this), output);
  }

  // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
  if (this->has_mdtwap()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::mdtwap(this), output);
  }

  // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
  if (this->has_mdvwap()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::mdvwap(this), output);
  }

  // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
  if (this->has_mdconstant()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::mdconstant(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
  if (this->has_mdsimpletick()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::mdsimpletick(this), output);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
  if (this->has_mdupsdownsanalysis()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::mdupsdownsanalysis(this), output);
  }

  // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
  if (this->has_mdindicatorsranking()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, HasBitSetters::mdindicatorsranking(this), output);
  }

  // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
  if (this->has_dynamicpacket()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::dynamicpacket(this), output);
  }

  // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
  if (this->has_mdvolumebyprice()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, HasBitSetters::mdvolumebyprice(this), output);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
  if (this->has_mdfundflowanalysis()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, HasBitSetters::mdfundflowanalysis(this), output);
  }

  // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
  if (this->has_mdforex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, HasBitSetters::mdforex(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
  if (this->has_mdspot()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, HasBitSetters::mdspot(this), output);
  }

  // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
  if (this->has_mdrate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, HasBitSetters::mdrate(this), output);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
  if (this->has_orderbooksnapshot()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, HasBitSetters::orderbooksnapshot(this), output);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
  if (this->has_orderbooksnapshotwithtick()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, HasBitSetters::orderbooksnapshotwithtick(this), output);
  }

  // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
  if (this->has_mdquote()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, HasBitSetters::mdquote(this), output);
  }

  // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
  if (this->has_mdetfbasicinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, HasBitSetters::mdetfbasicinfo(this), output);
  }

  // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
  if (this->has_mdfiquote()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, HasBitSetters::mdfiquote(this), output);
  }

  // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
  if (this->has_mdchipdistribution()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, HasBitSetters::mdchipdistribution(this), output);
  }

  // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
  if (this->has_mdwarrant()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, HasBitSetters::mdwarrant(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
  if (this->has_mdsecuritylending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, HasBitSetters::mdsecuritylending(this), output);
  }

  // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
  if (this->has_mdnews()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, HasBitSetters::mdnews(this), output);
  }

  // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
  if (this->has_mdstaringresult()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, HasBitSetters::mdstaringresult(this), output);
  }

  // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
  if (this->has_mdderivedanalysis()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, HasBitSetters::mdderivedanalysis(this), output);
  }

  // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
  if (this->has_mdqbquote()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, HasBitSetters::mdqbquote(this), output);
  }

  // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
  if (this->has_mdqbtransaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, HasBitSetters::mdqbtransaction(this), output);
  }

  // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
  if (this->has_mdusaorder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, HasBitSetters::mdusaorder(this), output);
  }

  // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
  if (this->has_mdusatransaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, HasBitSetters::mdusatransaction(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
  if (this->has_mdslorder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, HasBitSetters::mdslorder(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
  if (this->has_mdsltransaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, HasBitSetters::mdsltransaction(this), output);
  }

  // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
  if (this->has_mdhkgreymarket()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, HasBitSetters::mdhkgreymarket(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
  if (this->has_mdslindicativequote()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, HasBitSetters::mdslindicativequote(this), output);
  }

  // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
  if (this->has_mdslstatistics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, HasBitSetters::mdslstatistics(this), output);
  }

  // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
  if (this->has_mdusaquote()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, HasBitSetters::mdusaquote(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MarketData)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
  if (this->marketdatatype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->marketdatatype(), target);
  }

  // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
  if (this->has_mdstock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::mdstock(this), target);
  }

  // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
  if (this->has_mdindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::mdindex(this), target);
  }

  // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
  if (this->has_mdbond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::mdbond(this), target);
  }

  // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
  if (this->has_mdfund()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::mdfund(this), target);
  }

  // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
  if (this->has_mdoption()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::mdoption(this), target);
  }

  // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
  if (this->has_mdfuture()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::mdfuture(this), target);
  }

  // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
  if (this->has_mdtransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::mdtransaction(this), target);
  }

  // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
  if (this->has_mdorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::mdorder(this), target);
  }

  // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
  if (this->has_mdkline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::mdkline(this), target);
  }

  // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
  if (this->has_mdtwap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::mdtwap(this), target);
  }

  // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
  if (this->has_mdvwap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::mdvwap(this), target);
  }

  // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
  if (this->has_mdconstant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::mdconstant(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
  if (this->has_mdsimpletick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::mdsimpletick(this), target);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
  if (this->has_mdupsdownsanalysis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::mdupsdownsanalysis(this), target);
  }

  // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
  if (this->has_mdindicatorsranking()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, HasBitSetters::mdindicatorsranking(this), target);
  }

  // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
  if (this->has_dynamicpacket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::dynamicpacket(this), target);
  }

  // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
  if (this->has_mdvolumebyprice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, HasBitSetters::mdvolumebyprice(this), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
  if (this->has_mdfundflowanalysis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, HasBitSetters::mdfundflowanalysis(this), target);
  }

  // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
  if (this->has_mdforex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, HasBitSetters::mdforex(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
  if (this->has_mdspot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, HasBitSetters::mdspot(this), target);
  }

  // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
  if (this->has_mdrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, HasBitSetters::mdrate(this), target);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
  if (this->has_orderbooksnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, HasBitSetters::orderbooksnapshot(this), target);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
  if (this->has_orderbooksnapshotwithtick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, HasBitSetters::orderbooksnapshotwithtick(this), target);
  }

  // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
  if (this->has_mdquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, HasBitSetters::mdquote(this), target);
  }

  // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
  if (this->has_mdetfbasicinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, HasBitSetters::mdetfbasicinfo(this), target);
  }

  // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
  if (this->has_mdfiquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, HasBitSetters::mdfiquote(this), target);
  }

  // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
  if (this->has_mdchipdistribution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, HasBitSetters::mdchipdistribution(this), target);
  }

  // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
  if (this->has_mdwarrant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, HasBitSetters::mdwarrant(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
  if (this->has_mdsecuritylending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, HasBitSetters::mdsecuritylending(this), target);
  }

  // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
  if (this->has_mdnews()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39, HasBitSetters::mdnews(this), target);
  }

  // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
  if (this->has_mdstaringresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, HasBitSetters::mdstaringresult(this), target);
  }

  // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
  if (this->has_mdderivedanalysis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, HasBitSetters::mdderivedanalysis(this), target);
  }

  // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
  if (this->has_mdqbquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, HasBitSetters::mdqbquote(this), target);
  }

  // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
  if (this->has_mdqbtransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, HasBitSetters::mdqbtransaction(this), target);
  }

  // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
  if (this->has_mdusaorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        44, HasBitSetters::mdusaorder(this), target);
  }

  // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
  if (this->has_mdusatransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        45, HasBitSetters::mdusatransaction(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
  if (this->has_mdslorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        46, HasBitSetters::mdslorder(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
  if (this->has_mdsltransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        47, HasBitSetters::mdsltransaction(this), target);
  }

  // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
  if (this->has_mdhkgreymarket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48, HasBitSetters::mdhkgreymarket(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
  if (this->has_mdslindicativequote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        49, HasBitSetters::mdslindicativequote(this), target);
  }

  // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
  if (this->has_mdslstatistics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, HasBitSetters::mdslstatistics(this), target);
  }

  // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
  if (this->has_mdusaquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, HasBitSetters::mdusaquote(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MarketData)
  return target;
}

size_t MarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
  if (this->has_mdstock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdstock_);
  }

  // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
  if (this->has_mdindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdindex_);
  }

  // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
  if (this->has_mdbond()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdbond_);
  }

  // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
  if (this->has_mdfund()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdfund_);
  }

  // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
  if (this->has_mdoption()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdoption_);
  }

  // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
  if (this->has_mdfuture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdfuture_);
  }

  // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
  if (this->has_mdtransaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdtransaction_);
  }

  // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
  if (this->has_mdorder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdorder_);
  }

  // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
  if (this->has_mdkline()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdkline_);
  }

  // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
  if (this->has_mdtwap()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdtwap_);
  }

  // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
  if (this->has_mdvwap()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdvwap_);
  }

  // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
  if (this->has_mdconstant()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdconstant_);
  }

  // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
  if (this->has_mdsimpletick()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdsimpletick_);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
  if (this->has_mdupsdownsanalysis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdupsdownsanalysis_);
  }

  // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
  if (this->has_mdindicatorsranking()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdindicatorsranking_);
  }

  // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
  if (this->has_dynamicpacket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamicpacket_);
  }

  // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
  if (this->has_mdvolumebyprice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdvolumebyprice_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
  if (this->has_mdfundflowanalysis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdfundflowanalysis_);
  }

  // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
  if (this->has_mdforex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdforex_);
  }

  // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
  if (this->has_mdspot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdspot_);
  }

  // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
  if (this->has_mdrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdrate_);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
  if (this->has_orderbooksnapshot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orderbooksnapshot_);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
  if (this->has_orderbooksnapshotwithtick()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orderbooksnapshotwithtick_);
  }

  // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
  if (this->has_mdquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdquote_);
  }

  // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
  if (this->has_mdetfbasicinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdetfbasicinfo_);
  }

  // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
  if (this->has_mdfiquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdfiquote_);
  }

  // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
  if (this->has_mdchipdistribution()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdchipdistribution_);
  }

  // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
  if (this->has_mdwarrant()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdwarrant_);
  }

  // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
  if (this->has_mdsecuritylending()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdsecuritylending_);
  }

  // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
  if (this->has_mdnews()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdnews_);
  }

  // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
  if (this->has_mdstaringresult()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdstaringresult_);
  }

  // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
  if (this->has_mdderivedanalysis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdderivedanalysis_);
  }

  // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
  if (this->has_mdqbquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdqbquote_);
  }

  // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
  if (this->has_mdqbtransaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdqbtransaction_);
  }

  // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
  if (this->has_mdusaorder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdusaorder_);
  }

  // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
  if (this->has_mdusatransaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdusatransaction_);
  }

  // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
  if (this->has_mdslorder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdslorder_);
  }

  // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
  if (this->has_mdsltransaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdsltransaction_);
  }

  // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
  if (this->has_mdhkgreymarket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdhkgreymarket_);
  }

  // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
  if (this->has_mdslindicativequote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdslindicativequote_);
  }

  // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
  if (this->has_mdslstatistics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdslstatistics_);
  }

  // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
  if (this->has_mdusaquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdusaquote_);
  }

  // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
  if (this->marketdatatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->marketdatatype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MarketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MarketData)
    MergeFrom(*source);
  }
}

void MarketData::MergeFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mdstock()) {
    mutable_mdstock()->::com::htsc::mdc::insight::model::MDStock::MergeFrom(from.mdstock());
  }
  if (from.has_mdindex()) {
    mutable_mdindex()->::com::htsc::mdc::insight::model::MDIndex::MergeFrom(from.mdindex());
  }
  if (from.has_mdbond()) {
    mutable_mdbond()->::com::htsc::mdc::insight::model::MDBond::MergeFrom(from.mdbond());
  }
  if (from.has_mdfund()) {
    mutable_mdfund()->::com::htsc::mdc::insight::model::MDFund::MergeFrom(from.mdfund());
  }
  if (from.has_mdoption()) {
    mutable_mdoption()->::com::htsc::mdc::insight::model::MDOption::MergeFrom(from.mdoption());
  }
  if (from.has_mdfuture()) {
    mutable_mdfuture()->::com::htsc::mdc::insight::model::MDFuture::MergeFrom(from.mdfuture());
  }
  if (from.has_mdtransaction()) {
    mutable_mdtransaction()->::com::htsc::mdc::insight::model::MDTransaction::MergeFrom(from.mdtransaction());
  }
  if (from.has_mdorder()) {
    mutable_mdorder()->::com::htsc::mdc::insight::model::MDOrder::MergeFrom(from.mdorder());
  }
  if (from.has_mdkline()) {
    mutable_mdkline()->::com::htsc::mdc::insight::model::ADKLine::MergeFrom(from.mdkline());
  }
  if (from.has_mdtwap()) {
    mutable_mdtwap()->::com::htsc::mdc::insight::model::ADTwap::MergeFrom(from.mdtwap());
  }
  if (from.has_mdvwap()) {
    mutable_mdvwap()->::com::htsc::mdc::insight::model::ADVwap::MergeFrom(from.mdvwap());
  }
  if (from.has_mdconstant()) {
    mutable_mdconstant()->::com::htsc::mdc::insight::model::MDBasicInfo::MergeFrom(from.mdconstant());
  }
  if (from.has_mdsimpletick()) {
    mutable_mdsimpletick()->::com::htsc::mdc::insight::model::MDSimpleTick::MergeFrom(from.mdsimpletick());
  }
  if (from.has_mdupsdownsanalysis()) {
    mutable_mdupsdownsanalysis()->::com::htsc::mdc::insight::model::ADUpsDownsAnalysis::MergeFrom(from.mdupsdownsanalysis());
  }
  if (from.has_mdindicatorsranking()) {
    mutable_mdindicatorsranking()->::com::htsc::mdc::insight::model::ADIndicatorsRanking::MergeFrom(from.mdindicatorsranking());
  }
  if (from.has_dynamicpacket()) {
    mutable_dynamicpacket()->::com::htsc::mdc::insight::model::DynamicPacket::MergeFrom(from.dynamicpacket());
  }
  if (from.has_mdvolumebyprice()) {
    mutable_mdvolumebyprice()->::com::htsc::mdc::insight::model::ADVolumeByPrice::MergeFrom(from.mdvolumebyprice());
  }
  if (from.has_mdfundflowanalysis()) {
    mutable_mdfundflowanalysis()->::com::htsc::mdc::insight::model::ADFundFlowAnalysis::MergeFrom(from.mdfundflowanalysis());
  }
  if (from.has_mdforex()) {
    mutable_mdforex()->::com::htsc::mdc::insight::model::MDForex::MergeFrom(from.mdforex());
  }
  if (from.has_mdspot()) {
    mutable_mdspot()->::com::htsc::mdc::insight::model::MDSpot::MergeFrom(from.mdspot());
  }
  if (from.has_mdrate()) {
    mutable_mdrate()->::com::htsc::mdc::insight::model::MDRate::MergeFrom(from.mdrate());
  }
  if (from.has_orderbooksnapshot()) {
    mutable_orderbooksnapshot()->::com::htsc::mdc::insight::model::ADOrderbookSnapshot::MergeFrom(from.orderbooksnapshot());
  }
  if (from.has_orderbooksnapshotwithtick()) {
    mutable_orderbooksnapshotwithtick()->::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick::MergeFrom(from.orderbooksnapshotwithtick());
  }
  if (from.has_mdquote()) {
    mutable_mdquote()->::com::htsc::mdc::insight::model::MDQuote::MergeFrom(from.mdquote());
  }
  if (from.has_mdetfbasicinfo()) {
    mutable_mdetfbasicinfo()->::com::htsc::mdc::insight::model::MDETFBasicInfo::MergeFrom(from.mdetfbasicinfo());
  }
  if (from.has_mdfiquote()) {
    mutable_mdfiquote()->::com::htsc::mdc::insight::model::MDFIQuote::MergeFrom(from.mdfiquote());
  }
  if (from.has_mdchipdistribution()) {
    mutable_mdchipdistribution()->::com::htsc::mdc::insight::model::ADChipDistribution::MergeFrom(from.mdchipdistribution());
  }
  if (from.has_mdwarrant()) {
    mutable_mdwarrant()->::com::htsc::mdc::insight::model::MDWarrant::MergeFrom(from.mdwarrant());
  }
  if (from.has_mdsecuritylending()) {
    mutable_mdsecuritylending()->::com::htsc::mdc::insight::model::MDSecurityLending::MergeFrom(from.mdsecuritylending());
  }
  if (from.has_mdnews()) {
    mutable_mdnews()->::com::htsc::mdc::insight::model::ADNews::MergeFrom(from.mdnews());
  }
  if (from.has_mdstaringresult()) {
    mutable_mdstaringresult()->::com::htsc::mdc::insight::model::ADStaringResult::MergeFrom(from.mdstaringresult());
  }
  if (from.has_mdderivedanalysis()) {
    mutable_mdderivedanalysis()->::com::htsc::mdc::insight::model::ADDerivedAnalysis::MergeFrom(from.mdderivedanalysis());
  }
  if (from.has_mdqbquote()) {
    mutable_mdqbquote()->::com::htsc::mdc::insight::model::MDQBQuote::MergeFrom(from.mdqbquote());
  }
  if (from.has_mdqbtransaction()) {
    mutable_mdqbtransaction()->::com::htsc::mdc::insight::model::MDQBTransaction::MergeFrom(from.mdqbtransaction());
  }
  if (from.has_mdusaorder()) {
    mutable_mdusaorder()->::com::htsc::mdc::insight::model::MDUSAOrder::MergeFrom(from.mdusaorder());
  }
  if (from.has_mdusatransaction()) {
    mutable_mdusatransaction()->::com::htsc::mdc::insight::model::MDUSATransaction::MergeFrom(from.mdusatransaction());
  }
  if (from.has_mdslorder()) {
    mutable_mdslorder()->::com::htsc::mdc::insight::model::MDSLOrder::MergeFrom(from.mdslorder());
  }
  if (from.has_mdsltransaction()) {
    mutable_mdsltransaction()->::com::htsc::mdc::insight::model::MDSLTransaction::MergeFrom(from.mdsltransaction());
  }
  if (from.has_mdhkgreymarket()) {
    mutable_mdhkgreymarket()->::com::htsc::mdc::insight::model::MDHKGreyMarket::MergeFrom(from.mdhkgreymarket());
  }
  if (from.has_mdslindicativequote()) {
    mutable_mdslindicativequote()->::com::htsc::mdc::insight::model::MDSLIndicativeQuote::MergeFrom(from.mdslindicativequote());
  }
  if (from.has_mdslstatistics()) {
    mutable_mdslstatistics()->::com::htsc::mdc::insight::model::MDSLStatistics::MergeFrom(from.mdslstatistics());
  }
  if (from.has_mdusaquote()) {
    mutable_mdusaquote()->::com::htsc::mdc::insight::model::MDUSAQuote::MergeFrom(from.mdusaquote());
  }
  if (from.marketdatatype() != 0) {
    set_marketdatatype(from.marketdatatype());
  }
}

void MarketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketData::CopyFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketData::IsInitialized() const {
  return true;
}

void MarketData::Swap(MarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketData::InternalSwap(MarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mdstock_, other->mdstock_);
  swap(mdindex_, other->mdindex_);
  swap(mdbond_, other->mdbond_);
  swap(mdfund_, other->mdfund_);
  swap(mdoption_, other->mdoption_);
  swap(mdfuture_, other->mdfuture_);
  swap(mdtransaction_, other->mdtransaction_);
  swap(mdorder_, other->mdorder_);
  swap(mdkline_, other->mdkline_);
  swap(mdtwap_, other->mdtwap_);
  swap(mdvwap_, other->mdvwap_);
  swap(mdconstant_, other->mdconstant_);
  swap(mdsimpletick_, other->mdsimpletick_);
  swap(mdupsdownsanalysis_, other->mdupsdownsanalysis_);
  swap(mdindicatorsranking_, other->mdindicatorsranking_);
  swap(dynamicpacket_, other->dynamicpacket_);
  swap(mdvolumebyprice_, other->mdvolumebyprice_);
  swap(mdfundflowanalysis_, other->mdfundflowanalysis_);
  swap(mdforex_, other->mdforex_);
  swap(mdspot_, other->mdspot_);
  swap(mdrate_, other->mdrate_);
  swap(orderbooksnapshot_, other->orderbooksnapshot_);
  swap(orderbooksnapshotwithtick_, other->orderbooksnapshotwithtick_);
  swap(mdquote_, other->mdquote_);
  swap(mdetfbasicinfo_, other->mdetfbasicinfo_);
  swap(mdfiquote_, other->mdfiquote_);
  swap(mdchipdistribution_, other->mdchipdistribution_);
  swap(mdwarrant_, other->mdwarrant_);
  swap(mdsecuritylending_, other->mdsecuritylending_);
  swap(mdnews_, other->mdnews_);
  swap(mdstaringresult_, other->mdstaringresult_);
  swap(mdderivedanalysis_, other->mdderivedanalysis_);
  swap(mdqbquote_, other->mdqbquote_);
  swap(mdqbtransaction_, other->mdqbtransaction_);
  swap(mdusaorder_, other->mdusaorder_);
  swap(mdusatransaction_, other->mdusatransaction_);
  swap(mdslorder_, other->mdslorder_);
  swap(mdsltransaction_, other->mdsltransaction_);
  swap(mdhkgreymarket_, other->mdhkgreymarket_);
  swap(mdslindicativequote_, other->mdslindicativequote_);
  swap(mdslstatistics_, other->mdslstatistics_);
  swap(mdusaquote_, other->mdusaquote_);
  swap(marketdatatype_, other->marketdatatype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketDataStream::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_._instance.get_mutable()->marketdatalist_ = const_cast< ::com::htsc::mdc::insight::model::MarketDataList*>(
      ::com::htsc::mdc::insight::model::MarketDataList::internal_default_instance());
}
class MarketDataStream::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::MarketDataList& marketdatalist(const MarketDataStream* msg);
};

const ::com::htsc::mdc::insight::model::MarketDataList&
MarketDataStream::HasBitSetters::marketdatalist(const MarketDataStream* msg) {
  return *msg->marketdatalist_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataStream::kIsCompressedFieldNumber;
const int MarketDataStream::kOriginalLengthFieldNumber;
const int MarketDataStream::kCompressedDataFieldNumber;
const int MarketDataStream::kMarketDataListFieldNumber;
const int MarketDataStream::kTotalNumberFieldNumber;
const int MarketDataStream::kSerialFieldNumber;
const int MarketDataStream::kIsFinishedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataStream::MarketDataStream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MarketDataStream)
}
MarketDataStream::MarketDataStream(const MarketDataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compresseddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.compresseddata().size() > 0) {
    compresseddata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.compresseddata_);
  }
  if (from.has_marketdatalist()) {
    marketdatalist_ = new ::com::htsc::mdc::insight::model::MarketDataList(*from.marketdatalist_);
  } else {
    marketdatalist_ = nullptr;
  }
  ::memcpy(&originallength_, &from.originallength_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&originallength_)) + sizeof(serial_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MarketDataStream)
}

void MarketDataStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataStream_MarketData_2eproto.base);
  compresseddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&marketdatalist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&marketdatalist_)) + sizeof(serial_));
}

MarketDataStream::~MarketDataStream() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MarketDataStream)
  SharedDtor();
}

void MarketDataStream::SharedDtor() {
  compresseddata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete marketdatalist_;
}

void MarketDataStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataStream& MarketDataStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataStream_MarketData_2eproto.base);
  return *internal_default_instance();
}


void MarketDataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MarketDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compresseddata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && marketdatalist_ != nullptr) {
    delete marketdatalist_;
  }
  marketdatalist_ = nullptr;
  ::memset(&originallength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&originallength_)) + sizeof(serial_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDataStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isCompressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iscompressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originalLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          originallength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes compressedData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_compresseddata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_marketdatalist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 serial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFinished = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isfinished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDataStream::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MarketDataStream)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isCompressed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 originalLength = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &originallength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes compressedData = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compresseddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_marketdatalist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 totalNumber = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 serial = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFinished = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MarketDataStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MarketDataStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDataStream::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MarketDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isCompressed = 1;
  if (this->iscompressed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->iscompressed(), output);
  }

  // int32 originalLength = 2;
  if (this->originallength() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->originallength(), output);
  }

  // bytes compressedData = 3;
  if (this->compresseddata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->compresseddata(), output);
  }

  // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
  if (this->has_marketdatalist()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::marketdatalist(this), output);
  }

  // int32 totalNumber = 5;
  if (this->totalnumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->totalnumber(), output);
  }

  // int32 serial = 6;
  if (this->serial() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->serial(), output);
  }

  // bool isFinished = 7;
  if (this->isfinished() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->isfinished(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MarketDataStream)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataStream::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MarketDataStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isCompressed = 1;
  if (this->iscompressed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->iscompressed(), target);
  }

  // int32 originalLength = 2;
  if (this->originallength() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->originallength(), target);
  }

  // bytes compressedData = 3;
  if (this->compresseddata().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->compresseddata(), target);
  }

  // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
  if (this->has_marketdatalist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::marketdatalist(this), target);
  }

  // int32 totalNumber = 5;
  if (this->totalnumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->totalnumber(), target);
  }

  // int32 serial = 6;
  if (this->serial() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->serial(), target);
  }

  // bool isFinished = 7;
  if (this->isfinished() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->isfinished(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MarketDataStream)
  return target;
}

size_t MarketDataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MarketDataStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes compressedData = 3;
  if (this->compresseddata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->compresseddata());
  }

  // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
  if (this->has_marketdatalist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marketdatalist_);
  }

  // int32 originalLength = 2;
  if (this->originallength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->originallength());
  }

  // bool isCompressed = 1;
  if (this->iscompressed() != 0) {
    total_size += 1 + 1;
  }

  // bool isFinished = 7;
  if (this->isfinished() != 0) {
    total_size += 1 + 1;
  }

  // int32 totalNumber = 5;
  if (this->totalnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->totalnumber());
  }

  // int32 serial = 6;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->serial());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MarketDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MarketDataStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MarketDataStream)
    MergeFrom(*source);
  }
}

void MarketDataStream::MergeFrom(const MarketDataStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MarketDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compresseddata().size() > 0) {

    compresseddata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.compresseddata_);
  }
  if (from.has_marketdatalist()) {
    mutable_marketdatalist()->::com::htsc::mdc::insight::model::MarketDataList::MergeFrom(from.marketdatalist());
  }
  if (from.originallength() != 0) {
    set_originallength(from.originallength());
  }
  if (from.iscompressed() != 0) {
    set_iscompressed(from.iscompressed());
  }
  if (from.isfinished() != 0) {
    set_isfinished(from.isfinished());
  }
  if (from.totalnumber() != 0) {
    set_totalnumber(from.totalnumber());
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
}

void MarketDataStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MarketDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataStream::CopyFrom(const MarketDataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MarketDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataStream::IsInitialized() const {
  return true;
}

void MarketDataStream::Swap(MarketDataStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataStream::InternalSwap(MarketDataStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  compresseddata_.Swap(&other->compresseddata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(marketdatalist_, other->marketdatalist_);
  swap(originallength_, other->originallength_);
  swap(iscompressed_, other->iscompressed_);
  swap(isfinished_, other->isfinished_);
  swap(totalnumber_, other->totalnumber_);
  swap(serial_, other->serial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketDataList::InitAsDefaultInstance() {
}
class MarketDataList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataList::kMarketDatasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataList::MarketDataList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MarketDataList)
}
MarketDataList::MarketDataList(const MarketDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      marketdatas_(from.marketdatas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MarketDataList)
}

void MarketDataList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataList_MarketData_2eproto.base);
}

MarketDataList::~MarketDataList() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MarketDataList)
  SharedDtor();
}

void MarketDataList::SharedDtor() {
}

void MarketDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataList& MarketDataList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataList_MarketData_2eproto.base);
  return *internal_default_instance();
}


void MarketDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MarketDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketdatas_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.htsc.mdc.insight.model.MarketData marketDatas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_marketdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDataList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MarketDataList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.htsc.mdc.insight.model.MarketData marketDatas = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_marketdatas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MarketDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MarketDataList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDataList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MarketDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MarketData marketDatas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->marketdatas_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->marketdatas(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MarketDataList)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MarketDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MarketData marketDatas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->marketdatas_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->marketdatas(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MarketDataList)
  return target;
}

size_t MarketDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MarketDataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MarketData marketDatas = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->marketdatas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->marketdatas(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MarketDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MarketDataList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MarketDataList)
    MergeFrom(*source);
  }
}

void MarketDataList::MergeFrom(const MarketDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MarketDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketdatas_.MergeFrom(from.marketdatas_);
}

void MarketDataList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MarketDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataList::CopyFrom(const MarketDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MarketDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataList::IsInitialized() const {
  return true;
}

void MarketDataList::Swap(MarketDataList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataList::InternalSwap(MarketDataList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&marketdatas_)->InternalSwap(CastToBase(&other->marketdatas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MarketData* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MarketData >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MarketDataStream* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MarketDataStream >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MarketDataStream >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MarketDataList* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MarketDataList >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::MarketDataList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
