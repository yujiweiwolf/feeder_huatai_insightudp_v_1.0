// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADUpsDownsAnalysis.proto

#include "ADUpsDownsAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ADUpsDownsAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADUpsDownsCount_ADUpsDownsAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADUpsDownsAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADUpsDownsLimitCount_ADUpsDownsAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ADUpsDownsAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADUpsDownsPartitionDetail_ADUpsDownsAnalysis_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADUpsDownsAnalysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADUpsDownsAnalysis> _instance;
} _ADUpsDownsAnalysis_default_instance_;
class ADUpsDownsCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADUpsDownsCount> _instance;
} _ADUpsDownsCount_default_instance_;
class ADUpsDownsLimitCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADUpsDownsLimitCount> _instance;
} _ADUpsDownsLimitCount_default_instance_;
class ADUpsDownsPartitionDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADUpsDownsPartitionDetail> _instance;
} _ADUpsDownsPartitionDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static void InitDefaultsscc_info_ADUpsDownsAnalysis_ADUpsDownsAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADUpsDownsAnalysis_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ADUpsDownsAnalysis_ADUpsDownsAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ADUpsDownsAnalysis_ADUpsDownsAnalysis_2eproto}, {
      &scc_info_ADUpsDownsCount_ADUpsDownsAnalysis_2eproto.base,
      &scc_info_ADUpsDownsLimitCount_ADUpsDownsAnalysis_2eproto.base,
      &scc_info_ADUpsDownsPartitionDetail_ADUpsDownsAnalysis_2eproto.base,}};

static void InitDefaultsscc_info_ADUpsDownsCount_ADUpsDownsAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADUpsDownsCount_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADUpsDownsCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADUpsDownsCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADUpsDownsCount_ADUpsDownsAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADUpsDownsCount_ADUpsDownsAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADUpsDownsLimitCount_ADUpsDownsAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADUpsDownsLimitCount_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADUpsDownsLimitCount_ADUpsDownsAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADUpsDownsLimitCount_ADUpsDownsAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ADUpsDownsPartitionDetail_ADUpsDownsAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::htsc::mdc::insight::model::_ADUpsDownsPartitionDetail_default_instance_;
    new (ptr) ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADUpsDownsPartitionDetail_ADUpsDownsAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADUpsDownsPartitionDetail_ADUpsDownsAnalysis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ADUpsDownsAnalysis_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ADUpsDownsAnalysis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ADUpsDownsAnalysis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ADUpsDownsAnalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, upsdownscount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, upsdownslimitcount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, upsdownspartitiondetail_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis, datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, ups_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, downs_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, equals_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, preups_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, predowns_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, preequals_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, upspercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsCount, preupspercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, noreachedlimitpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, uplimits_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, downlimits_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, prenoreachedlimitpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, preuplimits_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, predownlimits_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, preuplimitsaveragechangepercent_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount, uplimitspercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail, numbers_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail, partitionchangepercent_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::htsc::mdc::insight::model::ADUpsDownsAnalysis)},
  { 17, -1, sizeof(::com::htsc::mdc::insight::model::ADUpsDownsCount)},
  { 30, -1, sizeof(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount)},
  { 43, -1, sizeof(::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADUpsDownsAnalysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADUpsDownsCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADUpsDownsLimitCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::htsc::mdc::insight::model::_ADUpsDownsPartitionDetail_default_instance_),
};

const char descriptor_table_protodef_ADUpsDownsAnalysis_2eproto[] =
  "\n\030ADUpsDownsAnalysis.proto\022\032com.htsc.mdc"
  ".insight.model\032\023ESecurityType.proto\032\027ESe"
  "curityIDSource.proto\"\222\004\n\022ADUpsDownsAnaly"
  "sis\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 "
  "\001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001"
  "(\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc."
  "mdc.model.ESecurityIDSource\0227\n\014securityT"
  "ype\030\006 \001(\0162!.com.htsc.mdc.model.ESecurity"
  "Type\022B\n\rUpsDownsCount\030\007 \001(\0132+.com.htsc.m"
  "dc.insight.model.ADUpsDownsCount\022L\n\022UpsD"
  "ownsLimitCount\030\010 \001(\01320.com.htsc.mdc.insi"
  "ght.model.ADUpsDownsLimitCount\022V\n\027UpsDow"
  "nsPartitionDetail\030\t \003(\01325.com.htsc.mdc.i"
  "nsight.model.ADUpsDownsPartitionDetail\022\024"
  "\n\014ExchangeDate\030\n \001(\005\022\024\n\014ExchangeTime\030\013 \001"
  "(\005\022\035\n\025DataMultiplePowerOf10\030\014 \001(\005\"\235\001\n\017AD"
  "UpsDownsCount\022\013\n\003Ups\030\001 \001(\005\022\r\n\005Downs\030\002 \001("
  "\005\022\016\n\006Equals\030\003 \001(\005\022\016\n\006PreUps\030\004 \001(\005\022\020\n\010Pre"
  "Downs\030\005 \001(\005\022\021\n\tPreEquals\030\006 \001(\005\022\022\n\nUpsPer"
  "cent\030\007 \001(\001\022\025\n\rPreUpsPercent\030\010 \001(\001\"\341\001\n\024AD"
  "UpsDownsLimitCount\022\030\n\020NoReachedLimitPx\030\001"
  " \001(\005\022\020\n\010UpLimits\030\002 \001(\005\022\022\n\nDownLimits\030\003 \001"
  "(\005\022\033\n\023PreNoReachedLimitPx\030\004 \001(\005\022\023\n\013PreUp"
  "Limits\030\005 \001(\005\022\025\n\rPreDownLimits\030\006 \001(\005\022\'\n\037P"
  "reUpLimitsAverageChangePercent\030\007 \001(\001\022\027\n\017"
  "UpLimitsPercent\030\010 \001(\001\"L\n\031ADUpsDownsParti"
  "tionDetail\022\017\n\007Numbers\030\001 \001(\005\022\036\n\026Partition"
  "ChangePercent\030\002 \001(\005B;\n\032com.htsc.mdc.insi"
  "ght.modelB\030ADUpsDownsAnalysisProtosH\001\240\001\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ADUpsDownsAnalysis_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ADUpsDownsAnalysis_2eproto_sccs[4] = {
  &scc_info_ADUpsDownsAnalysis_ADUpsDownsAnalysis_2eproto.base,
  &scc_info_ADUpsDownsCount_ADUpsDownsAnalysis_2eproto.base,
  &scc_info_ADUpsDownsLimitCount_ADUpsDownsAnalysis_2eproto.base,
  &scc_info_ADUpsDownsPartitionDetail_ADUpsDownsAnalysis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ADUpsDownsAnalysis_2eproto_once;
static bool descriptor_table_ADUpsDownsAnalysis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADUpsDownsAnalysis_2eproto = {
  &descriptor_table_ADUpsDownsAnalysis_2eproto_initialized, descriptor_table_protodef_ADUpsDownsAnalysis_2eproto, "ADUpsDownsAnalysis.proto", 1168,
  &descriptor_table_ADUpsDownsAnalysis_2eproto_once, descriptor_table_ADUpsDownsAnalysis_2eproto_sccs, descriptor_table_ADUpsDownsAnalysis_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_ADUpsDownsAnalysis_2eproto::offsets,
  file_level_metadata_ADUpsDownsAnalysis_2eproto, 4, file_level_enum_descriptors_ADUpsDownsAnalysis_2eproto, file_level_service_descriptors_ADUpsDownsAnalysis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ADUpsDownsAnalysis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ADUpsDownsAnalysis_2eproto), true);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

void ADUpsDownsAnalysis::InitAsDefaultInstance() {
  ::com::htsc::mdc::insight::model::_ADUpsDownsAnalysis_default_instance_._instance.get_mutable()->upsdownscount_ = const_cast< ::com::htsc::mdc::insight::model::ADUpsDownsCount*>(
      ::com::htsc::mdc::insight::model::ADUpsDownsCount::internal_default_instance());
  ::com::htsc::mdc::insight::model::_ADUpsDownsAnalysis_default_instance_._instance.get_mutable()->upsdownslimitcount_ = const_cast< ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount*>(
      ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount::internal_default_instance());
}
class ADUpsDownsAnalysis::HasBitSetters {
 public:
  static const ::com::htsc::mdc::insight::model::ADUpsDownsCount& upsdownscount(const ADUpsDownsAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount& upsdownslimitcount(const ADUpsDownsAnalysis* msg);
};

const ::com::htsc::mdc::insight::model::ADUpsDownsCount&
ADUpsDownsAnalysis::HasBitSetters::upsdownscount(const ADUpsDownsAnalysis* msg) {
  return *msg->upsdownscount_;
}
const ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount&
ADUpsDownsAnalysis::HasBitSetters::upsdownslimitcount(const ADUpsDownsAnalysis* msg) {
  return *msg->upsdownslimitcount_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADUpsDownsAnalysis::kHTSCSecurityIDFieldNumber;
const int ADUpsDownsAnalysis::kMDDateFieldNumber;
const int ADUpsDownsAnalysis::kMDTimeFieldNumber;
const int ADUpsDownsAnalysis::kDataTimestampFieldNumber;
const int ADUpsDownsAnalysis::kSecurityIDSourceFieldNumber;
const int ADUpsDownsAnalysis::kSecurityTypeFieldNumber;
const int ADUpsDownsAnalysis::kUpsDownsCountFieldNumber;
const int ADUpsDownsAnalysis::kUpsDownsLimitCountFieldNumber;
const int ADUpsDownsAnalysis::kUpsDownsPartitionDetailFieldNumber;
const int ADUpsDownsAnalysis::kExchangeDateFieldNumber;
const int ADUpsDownsAnalysis::kExchangeTimeFieldNumber;
const int ADUpsDownsAnalysis::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADUpsDownsAnalysis::ADUpsDownsAnalysis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
}
ADUpsDownsAnalysis::ADUpsDownsAnalysis(const ADUpsDownsAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      upsdownspartitiondetail_(from.upsdownspartitiondetail_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.htscsecurityid().size() > 0) {
    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.has_upsdownscount()) {
    upsdownscount_ = new ::com::htsc::mdc::insight::model::ADUpsDownsCount(*from.upsdownscount_);
  } else {
    upsdownscount_ = nullptr;
  }
  if (from.has_upsdownslimitcount()) {
    upsdownslimitcount_ = new ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount(*from.upsdownslimitcount_);
  } else {
    upsdownslimitcount_ = nullptr;
  }
  ::memcpy(&mddate_, &from.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
}

void ADUpsDownsAnalysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADUpsDownsAnalysis_ADUpsDownsAnalysis_2eproto.base);
  htscsecurityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&upsdownscount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&upsdownscount_)) + sizeof(datamultiplepowerof10_));
}

ADUpsDownsAnalysis::~ADUpsDownsAnalysis() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  SharedDtor();
}

void ADUpsDownsAnalysis::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete upsdownscount_;
  if (this != internal_default_instance()) delete upsdownslimitcount_;
}

void ADUpsDownsAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADUpsDownsAnalysis& ADUpsDownsAnalysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADUpsDownsAnalysis_ADUpsDownsAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADUpsDownsAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upsdownspartitiondetail_.Clear();
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && upsdownscount_ != nullptr) {
    delete upsdownscount_;
  }
  upsdownscount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && upsdownslimitcount_ != nullptr) {
    delete upsdownslimitcount_;
  }
  upsdownslimitcount_ = nullptr;
  ::memset(&mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datamultiplepowerof10_) -
      reinterpret_cast<char*>(&mddate_)) + sizeof(datamultiplepowerof10_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADUpsDownsAnalysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_htscsecurityid(), ptr, ctx, "com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADUpsDownsCount UpsDownsCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_upsdownscount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADUpsDownsLimitCount UpsDownsLimitCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_upsdownslimitcount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail UpsDownsPartitionDetail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_upsdownspartitiondetail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // int32 ExchangeDate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExchangeTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADUpsDownsAnalysis::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string HTSCSecurityID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDDate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MDTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 DataTimestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADUpsDownsCount UpsDownsCount = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_upsdownscount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.htsc.mdc.insight.model.ADUpsDownsLimitCount UpsDownsLimitCount = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_upsdownslimitcount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail UpsDownsPartitionDetail = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_upsdownspartitiondetail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ExchangeDate = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ExchangeTime = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataMultiplePowerOf10 = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADUpsDownsAnalysis::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->securityidsource(), output);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->securitytype(), output);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsCount UpsDownsCount = 7;
  if (this->has_upsdownscount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::upsdownscount(this), output);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsLimitCount UpsDownsLimitCount = 8;
  if (this->has_upsdownslimitcount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::upsdownslimitcount(this), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail UpsDownsPartitionDetail = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->upsdownspartitiondetail_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->upsdownspartitiondetail(static_cast<int>(i)),
      output);
  }

  // int32 ExchangeDate = 10;
  if (this->exchangedate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->exchangedate(), output);
  }

  // int32 ExchangeTime = 11;
  if (this->exchangetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->exchangetime(), output);
  }

  // int32 DataMultiplePowerOf10 = 12;
  if (this->datamultiplepowerof10() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->datamultiplepowerof10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADUpsDownsAnalysis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), static_cast<int>(this->htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->securitytype(), target);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsCount UpsDownsCount = 7;
  if (this->has_upsdownscount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::upsdownscount(this), target);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsLimitCount UpsDownsLimitCount = 8;
  if (this->has_upsdownslimitcount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::upsdownslimitcount(this), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail UpsDownsPartitionDetail = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->upsdownspartitiondetail_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->upsdownspartitiondetail(static_cast<int>(i)), target);
  }

  // int32 ExchangeDate = 10;
  if (this->exchangedate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->exchangedate(), target);
  }

  // int32 ExchangeTime = 11;
  if (this->exchangetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->exchangetime(), target);
  }

  // int32 DataMultiplePowerOf10 = 12;
  if (this->datamultiplepowerof10() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->datamultiplepowerof10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  return target;
}

size_t ADUpsDownsAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail UpsDownsPartitionDetail = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->upsdownspartitiondetail_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->upsdownspartitiondetail(static_cast<int>(i)));
    }
  }

  // string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsCount UpsDownsCount = 7;
  if (this->has_upsdownscount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upsdownscount_);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsLimitCount UpsDownsLimitCount = 8;
  if (this->has_upsdownslimitcount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upsdownslimitcount_);
  }

  // int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // int32 ExchangeDate = 10;
  if (this->exchangedate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // int32 ExchangeTime = 11;
  if (this->exchangetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // int32 DataMultiplePowerOf10 = 12;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADUpsDownsAnalysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const ADUpsDownsAnalysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADUpsDownsAnalysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
    MergeFrom(*source);
  }
}

void ADUpsDownsAnalysis::MergeFrom(const ADUpsDownsAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  upsdownspartitiondetail_.MergeFrom(from.upsdownspartitiondetail_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.has_upsdownscount()) {
    mutable_upsdownscount()->::com::htsc::mdc::insight::model::ADUpsDownsCount::MergeFrom(from.upsdownscount());
  }
  if (from.has_upsdownslimitcount()) {
    mutable_upsdownslimitcount()->::com::htsc::mdc::insight::model::ADUpsDownsLimitCount::MergeFrom(from.upsdownslimitcount());
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void ADUpsDownsAnalysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADUpsDownsAnalysis::CopyFrom(const ADUpsDownsAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADUpsDownsAnalysis::IsInitialized() const {
  return true;
}

void ADUpsDownsAnalysis::Swap(ADUpsDownsAnalysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADUpsDownsAnalysis::InternalSwap(ADUpsDownsAnalysis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&upsdownspartitiondetail_)->InternalSwap(CastToBase(&other->upsdownspartitiondetail_));
  htscsecurityid_.Swap(&other->htscsecurityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upsdownscount_, other->upsdownscount_);
  swap(upsdownslimitcount_, other->upsdownslimitcount_);
  swap(mddate_, other->mddate_);
  swap(mdtime_, other->mdtime_);
  swap(datatimestamp_, other->datatimestamp_);
  swap(securityidsource_, other->securityidsource_);
  swap(securitytype_, other->securitytype_);
  swap(exchangedate_, other->exchangedate_);
  swap(exchangetime_, other->exchangetime_);
  swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADUpsDownsAnalysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADUpsDownsCount::InitAsDefaultInstance() {
}
class ADUpsDownsCount::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADUpsDownsCount::kUpsFieldNumber;
const int ADUpsDownsCount::kDownsFieldNumber;
const int ADUpsDownsCount::kEqualsFieldNumber;
const int ADUpsDownsCount::kPreUpsFieldNumber;
const int ADUpsDownsCount::kPreDownsFieldNumber;
const int ADUpsDownsCount::kPreEqualsFieldNumber;
const int ADUpsDownsCount::kUpsPercentFieldNumber;
const int ADUpsDownsCount::kPreUpsPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADUpsDownsCount::ADUpsDownsCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADUpsDownsCount)
}
ADUpsDownsCount::ADUpsDownsCount(const ADUpsDownsCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ups_, &from.ups_,
    static_cast<size_t>(reinterpret_cast<char*>(&preupspercent_) -
    reinterpret_cast<char*>(&ups_)) + sizeof(preupspercent_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADUpsDownsCount)
}

void ADUpsDownsCount::SharedCtor() {
  ::memset(&ups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preupspercent_) -
      reinterpret_cast<char*>(&ups_)) + sizeof(preupspercent_));
}

ADUpsDownsCount::~ADUpsDownsCount() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADUpsDownsCount)
  SharedDtor();
}

void ADUpsDownsCount::SharedDtor() {
}

void ADUpsDownsCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADUpsDownsCount& ADUpsDownsCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADUpsDownsCount_ADUpsDownsAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADUpsDownsCount::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preupspercent_) -
      reinterpret_cast<char*>(&ups_)) + sizeof(preupspercent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADUpsDownsCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Ups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Downs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          downs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Equals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          equals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PreUps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          preups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PreDowns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          predowns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PreEquals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          preequals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double UpsPercent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          upspercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PreUpsPercent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          preupspercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADUpsDownsCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Ups = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Downs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &downs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Equals = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &equals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PreUps = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &preups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PreDowns = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &predowns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PreEquals = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &preequals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double UpsPercent = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upspercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PreUpsPercent = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preupspercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADUpsDownsCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADUpsDownsCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADUpsDownsCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Ups = 1;
  if (this->ups() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ups(), output);
  }

  // int32 Downs = 2;
  if (this->downs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->downs(), output);
  }

  // int32 Equals = 3;
  if (this->equals() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->equals(), output);
  }

  // int32 PreUps = 4;
  if (this->preups() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->preups(), output);
  }

  // int32 PreDowns = 5;
  if (this->predowns() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->predowns(), output);
  }

  // int32 PreEquals = 6;
  if (this->preequals() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->preequals(), output);
  }

  // double UpsPercent = 7;
  if (!(this->upspercent() <= 0 && this->upspercent() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->upspercent(), output);
  }

  // double PreUpsPercent = 8;
  if (!(this->preupspercent() <= 0 && this->preupspercent() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->preupspercent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADUpsDownsCount)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADUpsDownsCount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Ups = 1;
  if (this->ups() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ups(), target);
  }

  // int32 Downs = 2;
  if (this->downs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->downs(), target);
  }

  // int32 Equals = 3;
  if (this->equals() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->equals(), target);
  }

  // int32 PreUps = 4;
  if (this->preups() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->preups(), target);
  }

  // int32 PreDowns = 5;
  if (this->predowns() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->predowns(), target);
  }

  // int32 PreEquals = 6;
  if (this->preequals() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->preequals(), target);
  }

  // double UpsPercent = 7;
  if (!(this->upspercent() <= 0 && this->upspercent() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->upspercent(), target);
  }

  // double PreUpsPercent = 8;
  if (!(this->preupspercent() <= 0 && this->preupspercent() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->preupspercent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADUpsDownsCount)
  return target;
}

size_t ADUpsDownsCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Ups = 1;
  if (this->ups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ups());
  }

  // int32 Downs = 2;
  if (this->downs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->downs());
  }

  // int32 Equals = 3;
  if (this->equals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->equals());
  }

  // int32 PreUps = 4;
  if (this->preups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->preups());
  }

  // int32 PreDowns = 5;
  if (this->predowns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->predowns());
  }

  // int32 PreEquals = 6;
  if (this->preequals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->preequals());
  }

  // double UpsPercent = 7;
  if (!(this->upspercent() <= 0 && this->upspercent() >= 0)) {
    total_size += 1 + 8;
  }

  // double PreUpsPercent = 8;
  if (!(this->preupspercent() <= 0 && this->preupspercent() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADUpsDownsCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  GOOGLE_DCHECK_NE(&from, this);
  const ADUpsDownsCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADUpsDownsCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADUpsDownsCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADUpsDownsCount)
    MergeFrom(*source);
  }
}

void ADUpsDownsCount::MergeFrom(const ADUpsDownsCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ups() != 0) {
    set_ups(from.ups());
  }
  if (from.downs() != 0) {
    set_downs(from.downs());
  }
  if (from.equals() != 0) {
    set_equals(from.equals());
  }
  if (from.preups() != 0) {
    set_preups(from.preups());
  }
  if (from.predowns() != 0) {
    set_predowns(from.predowns());
  }
  if (from.preequals() != 0) {
    set_preequals(from.preequals());
  }
  if (!(from.upspercent() <= 0 && from.upspercent() >= 0)) {
    set_upspercent(from.upspercent());
  }
  if (!(from.preupspercent() <= 0 && from.preupspercent() >= 0)) {
    set_preupspercent(from.preupspercent());
  }
}

void ADUpsDownsCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADUpsDownsCount::CopyFrom(const ADUpsDownsCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADUpsDownsCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADUpsDownsCount::IsInitialized() const {
  return true;
}

void ADUpsDownsCount::Swap(ADUpsDownsCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADUpsDownsCount::InternalSwap(ADUpsDownsCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ups_, other->ups_);
  swap(downs_, other->downs_);
  swap(equals_, other->equals_);
  swap(preups_, other->preups_);
  swap(predowns_, other->predowns_);
  swap(preequals_, other->preequals_);
  swap(upspercent_, other->upspercent_);
  swap(preupspercent_, other->preupspercent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADUpsDownsCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADUpsDownsLimitCount::InitAsDefaultInstance() {
}
class ADUpsDownsLimitCount::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADUpsDownsLimitCount::kNoReachedLimitPxFieldNumber;
const int ADUpsDownsLimitCount::kUpLimitsFieldNumber;
const int ADUpsDownsLimitCount::kDownLimitsFieldNumber;
const int ADUpsDownsLimitCount::kPreNoReachedLimitPxFieldNumber;
const int ADUpsDownsLimitCount::kPreUpLimitsFieldNumber;
const int ADUpsDownsLimitCount::kPreDownLimitsFieldNumber;
const int ADUpsDownsLimitCount::kPreUpLimitsAverageChangePercentFieldNumber;
const int ADUpsDownsLimitCount::kUpLimitsPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADUpsDownsLimitCount::ADUpsDownsLimitCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
}
ADUpsDownsLimitCount::ADUpsDownsLimitCount(const ADUpsDownsLimitCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&noreachedlimitpx_, &from.noreachedlimitpx_,
    static_cast<size_t>(reinterpret_cast<char*>(&uplimitspercent_) -
    reinterpret_cast<char*>(&noreachedlimitpx_)) + sizeof(uplimitspercent_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
}

void ADUpsDownsLimitCount::SharedCtor() {
  ::memset(&noreachedlimitpx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uplimitspercent_) -
      reinterpret_cast<char*>(&noreachedlimitpx_)) + sizeof(uplimitspercent_));
}

ADUpsDownsLimitCount::~ADUpsDownsLimitCount() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  SharedDtor();
}

void ADUpsDownsLimitCount::SharedDtor() {
}

void ADUpsDownsLimitCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADUpsDownsLimitCount& ADUpsDownsLimitCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADUpsDownsLimitCount_ADUpsDownsAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADUpsDownsLimitCount::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&noreachedlimitpx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uplimitspercent_) -
      reinterpret_cast<char*>(&noreachedlimitpx_)) + sizeof(uplimitspercent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADUpsDownsLimitCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NoReachedLimitPx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          noreachedlimitpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UpLimits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uplimits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DownLimits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          downlimits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PreNoReachedLimitPx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prenoreachedlimitpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PreUpLimits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          preuplimits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PreDownLimits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          predownlimits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double PreUpLimitsAverageChangePercent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          preuplimitsaveragechangepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double UpLimitsPercent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          uplimitspercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADUpsDownsLimitCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 NoReachedLimitPx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &noreachedlimitpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UpLimits = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uplimits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DownLimits = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &downlimits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PreNoReachedLimitPx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &prenoreachedlimitpx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PreUpLimits = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &preuplimits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PreDownLimits = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &predownlimits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PreUpLimitsAverageChangePercent = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preuplimitsaveragechangepercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double UpLimitsPercent = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uplimitspercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADUpsDownsLimitCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NoReachedLimitPx = 1;
  if (this->noreachedlimitpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->noreachedlimitpx(), output);
  }

  // int32 UpLimits = 2;
  if (this->uplimits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->uplimits(), output);
  }

  // int32 DownLimits = 3;
  if (this->downlimits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->downlimits(), output);
  }

  // int32 PreNoReachedLimitPx = 4;
  if (this->prenoreachedlimitpx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->prenoreachedlimitpx(), output);
  }

  // int32 PreUpLimits = 5;
  if (this->preuplimits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->preuplimits(), output);
  }

  // int32 PreDownLimits = 6;
  if (this->predownlimits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->predownlimits(), output);
  }

  // double PreUpLimitsAverageChangePercent = 7;
  if (!(this->preuplimitsaveragechangepercent() <= 0 && this->preuplimitsaveragechangepercent() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->preuplimitsaveragechangepercent(), output);
  }

  // double UpLimitsPercent = 8;
  if (!(this->uplimitspercent() <= 0 && this->uplimitspercent() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->uplimitspercent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADUpsDownsLimitCount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NoReachedLimitPx = 1;
  if (this->noreachedlimitpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->noreachedlimitpx(), target);
  }

  // int32 UpLimits = 2;
  if (this->uplimits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->uplimits(), target);
  }

  // int32 DownLimits = 3;
  if (this->downlimits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->downlimits(), target);
  }

  // int32 PreNoReachedLimitPx = 4;
  if (this->prenoreachedlimitpx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->prenoreachedlimitpx(), target);
  }

  // int32 PreUpLimits = 5;
  if (this->preuplimits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->preuplimits(), target);
  }

  // int32 PreDownLimits = 6;
  if (this->predownlimits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->predownlimits(), target);
  }

  // double PreUpLimitsAverageChangePercent = 7;
  if (!(this->preuplimitsaveragechangepercent() <= 0 && this->preuplimitsaveragechangepercent() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->preuplimitsaveragechangepercent(), target);
  }

  // double UpLimitsPercent = 8;
  if (!(this->uplimitspercent() <= 0 && this->uplimitspercent() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->uplimitspercent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  return target;
}

size_t ADUpsDownsLimitCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NoReachedLimitPx = 1;
  if (this->noreachedlimitpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->noreachedlimitpx());
  }

  // int32 UpLimits = 2;
  if (this->uplimits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->uplimits());
  }

  // int32 DownLimits = 3;
  if (this->downlimits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->downlimits());
  }

  // int32 PreNoReachedLimitPx = 4;
  if (this->prenoreachedlimitpx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->prenoreachedlimitpx());
  }

  // int32 PreUpLimits = 5;
  if (this->preuplimits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->preuplimits());
  }

  // int32 PreDownLimits = 6;
  if (this->predownlimits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->predownlimits());
  }

  // double PreUpLimitsAverageChangePercent = 7;
  if (!(this->preuplimitsaveragechangepercent() <= 0 && this->preuplimitsaveragechangepercent() >= 0)) {
    total_size += 1 + 8;
  }

  // double UpLimitsPercent = 8;
  if (!(this->uplimitspercent() <= 0 && this->uplimitspercent() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADUpsDownsLimitCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  GOOGLE_DCHECK_NE(&from, this);
  const ADUpsDownsLimitCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADUpsDownsLimitCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
    MergeFrom(*source);
  }
}

void ADUpsDownsLimitCount::MergeFrom(const ADUpsDownsLimitCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.noreachedlimitpx() != 0) {
    set_noreachedlimitpx(from.noreachedlimitpx());
  }
  if (from.uplimits() != 0) {
    set_uplimits(from.uplimits());
  }
  if (from.downlimits() != 0) {
    set_downlimits(from.downlimits());
  }
  if (from.prenoreachedlimitpx() != 0) {
    set_prenoreachedlimitpx(from.prenoreachedlimitpx());
  }
  if (from.preuplimits() != 0) {
    set_preuplimits(from.preuplimits());
  }
  if (from.predownlimits() != 0) {
    set_predownlimits(from.predownlimits());
  }
  if (!(from.preuplimitsaveragechangepercent() <= 0 && from.preuplimitsaveragechangepercent() >= 0)) {
    set_preuplimitsaveragechangepercent(from.preuplimitsaveragechangepercent());
  }
  if (!(from.uplimitspercent() <= 0 && from.uplimitspercent() >= 0)) {
    set_uplimitspercent(from.uplimitspercent());
  }
}

void ADUpsDownsLimitCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADUpsDownsLimitCount::CopyFrom(const ADUpsDownsLimitCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADUpsDownsLimitCount::IsInitialized() const {
  return true;
}

void ADUpsDownsLimitCount::Swap(ADUpsDownsLimitCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADUpsDownsLimitCount::InternalSwap(ADUpsDownsLimitCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(noreachedlimitpx_, other->noreachedlimitpx_);
  swap(uplimits_, other->uplimits_);
  swap(downlimits_, other->downlimits_);
  swap(prenoreachedlimitpx_, other->prenoreachedlimitpx_);
  swap(preuplimits_, other->preuplimits_);
  swap(predownlimits_, other->predownlimits_);
  swap(preuplimitsaveragechangepercent_, other->preuplimitsaveragechangepercent_);
  swap(uplimitspercent_, other->uplimitspercent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADUpsDownsLimitCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADUpsDownsPartitionDetail::InitAsDefaultInstance() {
}
class ADUpsDownsPartitionDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADUpsDownsPartitionDetail::kNumbersFieldNumber;
const int ADUpsDownsPartitionDetail::kPartitionChangePercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADUpsDownsPartitionDetail::ADUpsDownsPartitionDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
}
ADUpsDownsPartitionDetail::ADUpsDownsPartitionDetail(const ADUpsDownsPartitionDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&numbers_, &from.numbers_,
    static_cast<size_t>(reinterpret_cast<char*>(&partitionchangepercent_) -
    reinterpret_cast<char*>(&numbers_)) + sizeof(partitionchangepercent_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
}

void ADUpsDownsPartitionDetail::SharedCtor() {
  ::memset(&numbers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partitionchangepercent_) -
      reinterpret_cast<char*>(&numbers_)) + sizeof(partitionchangepercent_));
}

ADUpsDownsPartitionDetail::~ADUpsDownsPartitionDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  SharedDtor();
}

void ADUpsDownsPartitionDetail::SharedDtor() {
}

void ADUpsDownsPartitionDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADUpsDownsPartitionDetail& ADUpsDownsPartitionDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADUpsDownsPartitionDetail_ADUpsDownsAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ADUpsDownsPartitionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&numbers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partitionchangepercent_) -
      reinterpret_cast<char*>(&numbers_)) + sizeof(partitionchangepercent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADUpsDownsPartitionDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          numbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PartitionChangePercent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          partitionchangepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADUpsDownsPartitionDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Numbers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &numbers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PartitionChangePercent = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionchangepercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADUpsDownsPartitionDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Numbers = 1;
  if (this->numbers() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->numbers(), output);
  }

  // int32 PartitionChangePercent = 2;
  if (this->partitionchangepercent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->partitionchangepercent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADUpsDownsPartitionDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Numbers = 1;
  if (this->numbers() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->numbers(), target);
  }

  // int32 PartitionChangePercent = 2;
  if (this->partitionchangepercent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->partitionchangepercent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  return target;
}

size_t ADUpsDownsPartitionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Numbers = 1;
  if (this->numbers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->numbers());
  }

  // int32 PartitionChangePercent = 2;
  if (this->partitionchangepercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->partitionchangepercent());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADUpsDownsPartitionDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ADUpsDownsPartitionDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADUpsDownsPartitionDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
    MergeFrom(*source);
  }
}

void ADUpsDownsPartitionDetail::MergeFrom(const ADUpsDownsPartitionDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.numbers() != 0) {
    set_numbers(from.numbers());
  }
  if (from.partitionchangepercent() != 0) {
    set_partitionchangepercent(from.partitionchangepercent());
  }
}

void ADUpsDownsPartitionDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADUpsDownsPartitionDetail::CopyFrom(const ADUpsDownsPartitionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADUpsDownsPartitionDetail::IsInitialized() const {
  return true;
}

void ADUpsDownsPartitionDetail::Swap(ADUpsDownsPartitionDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADUpsDownsPartitionDetail::InternalSwap(ADUpsDownsPartitionDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(numbers_, other->numbers_);
  swap(partitionchangepercent_, other->partitionchangepercent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADUpsDownsPartitionDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADUpsDownsCount* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADUpsDownsCount >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADUpsDownsCount >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail >(Arena* arena) {
  return Arena::CreateInternal< ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
