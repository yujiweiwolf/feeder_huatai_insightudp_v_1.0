// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDSLIndicativeQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDSLIndicativeQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDSLIndicativeQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDSLIndicativeQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDSLIndicativeQuote_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDSLIndicativeQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDSLIndicativeQuote;
class MDSLIndicativeQuoteDefaultTypeInternal;
extern MDSLIndicativeQuoteDefaultTypeInternal _MDSLIndicativeQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSLIndicativeQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDSLIndicativeQuote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDSLIndicativeQuote) */ {
 public:
  MDSLIndicativeQuote();
  virtual ~MDSLIndicativeQuote();

  MDSLIndicativeQuote(const MDSLIndicativeQuote& from);
  MDSLIndicativeQuote(MDSLIndicativeQuote&& from) noexcept
    : MDSLIndicativeQuote() {
    *this = ::std::move(from);
  }

  inline MDSLIndicativeQuote& operator=(const MDSLIndicativeQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDSLIndicativeQuote& operator=(MDSLIndicativeQuote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MDSLIndicativeQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MDSLIndicativeQuote* internal_default_instance() {
    return reinterpret_cast<const MDSLIndicativeQuote*>(
               &_MDSLIndicativeQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MDSLIndicativeQuote* other);
  friend void swap(MDSLIndicativeQuote& a, MDSLIndicativeQuote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MDSLIndicativeQuote* New() const final {
    return CreateMaybeMessage<MDSLIndicativeQuote>(nullptr);
  }

  MDSLIndicativeQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MDSLIndicativeQuote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MDSLIndicativeQuote& from);
  void MergeFrom(const MDSLIndicativeQuote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDSLIndicativeQuote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDSLIndicativeQuote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MDSLIndicativeQuote_2eproto);
    return ::descriptor_table_MDSLIndicativeQuote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const std::string& htscsecurityid() const;
  void set_htscsecurityid(const std::string& value);
  void set_htscsecurityid(std::string&& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  std::string* mutable_htscsecurityid();
  std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 5;
  const std::string& tradingphasecode() const;
  void set_tradingphasecode(const std::string& value);
  void set_tradingphasecode(std::string&& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  std::string* mutable_tradingphasecode();
  std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);

  // string HtscLendTerms = 11;
  void clear_htsclendterms();
  static const int kHtscLendTermsFieldNumber = 11;
  const std::string& htsclendterms() const;
  void set_htsclendterms(const std::string& value);
  void set_htsclendterms(std::string&& value);
  void set_htsclendterms(const char* value);
  void set_htsclendterms(const char* value, size_t size);
  std::string* mutable_htsclendterms();
  std::string* release_htsclendterms();
  void set_allocated_htsclendterms(std::string* htsclendterms);

  // string HtscBorrowTerms = 14;
  void clear_htscborrowterms();
  static const int kHtscBorrowTermsFieldNumber = 14;
  const std::string& htscborrowterms() const;
  void set_htscborrowterms(const std::string& value);
  void set_htscborrowterms(std::string&& value);
  void set_htscborrowterms(const char* value);
  void set_htscborrowterms(const char* value, size_t size);
  std::string* mutable_htscborrowterms();
  std::string* release_htscborrowterms();
  void set_allocated_htscborrowterms(std::string* htscborrowterms);

  // int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate() const;
  void set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime() const;
  void set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp() const;
  void set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // int64 LastPx = 8;
  void clear_lastpx();
  static const int kLastPxFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx() const;
  void set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreClosePx = 9;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx() const;
  void set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HtscLendAmount = 10;
  void clear_htsclendamount();
  static const int kHtscLendAmountFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 htsclendamount() const;
  void set_htsclendamount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HtscBestLendRate = 12;
  void clear_htscbestlendrate();
  static const int kHtscBestLendRateFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 htscbestlendrate() const;
  void set_htscbestlendrate(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HtscBorrowAmount = 13;
  void clear_htscborrowamount();
  static const int kHtscBorrowAmountFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 htscborrowamount() const;
  void set_htscborrowamount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 HtscBorrowRate = 15;
  void clear_htscborrowrate();
  static const int kHtscBorrowRateFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 htscborrowrate() const;
  void set_htscborrowrate(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradeVolume = 16;
  void clear_tradevolume();
  static const int kTradeVolumeFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int64 tradevolume() const;
  void set_tradevolume(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 TradeMoney = 17;
  void clear_trademoney();
  static const int kTradeMoneyFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int64 trademoney() const;
  void set_trademoney(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreTradeVolume = 18;
  void clear_pretradevolume();
  static const int kPreTradeVolumeFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int64 pretradevolume() const;
  void set_pretradevolume(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 PreTradeMoney = 19;
  void clear_pretrademoney();
  static const int kPreTradeMoneyFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int64 pretrademoney() const;
  void set_pretrademoney(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 DataMultiplePowerOf10 = 20;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDSLIndicativeQuote)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htsclendterms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscborrowterms_;
  ::PROTOBUF_NAMESPACE_ID::int32 mddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastpx_;
  ::PROTOBUF_NAMESPACE_ID::int64 preclosepx_;
  ::PROTOBUF_NAMESPACE_ID::int64 htsclendamount_;
  ::PROTOBUF_NAMESPACE_ID::int64 htscbestlendrate_;
  ::PROTOBUF_NAMESPACE_ID::int64 htscborrowamount_;
  ::PROTOBUF_NAMESPACE_ID::int64 htscborrowrate_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradevolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 trademoney_;
  ::PROTOBUF_NAMESPACE_ID::int64 pretradevolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 pretrademoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 datamultiplepowerof10_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MDSLIndicativeQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDSLIndicativeQuote

// string HTSCSecurityID = 1;
inline void MDSLIndicativeQuote::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDSLIndicativeQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
  return htscsecurityid_.GetNoArena();
}
inline void MDSLIndicativeQuote::set_htscsecurityid(const std::string& value) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
}
inline void MDSLIndicativeQuote::set_htscsecurityid(std::string&& value) {
  
  htscsecurityid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
}
inline void MDSLIndicativeQuote::set_htscsecurityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
}
inline void MDSLIndicativeQuote::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
}
inline std::string* MDSLIndicativeQuote::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDSLIndicativeQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDSLIndicativeQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDSLIndicativeQuote::clear_mddate() {
  mddate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDSLIndicativeQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.MDDate)
  return mddate_;
}
inline void MDSLIndicativeQuote::set_mddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDSLIndicativeQuote::clear_mdtime() {
  mdtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDSLIndicativeQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.MDTime)
  return mdtime_;
}
inline void MDSLIndicativeQuote::set_mdtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDSLIndicativeQuote::clear_datatimestamp() {
  datatimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.DataTimestamp)
  return datatimestamp_;
}
inline void MDSLIndicativeQuote::set_datatimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDSLIndicativeQuote::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDSLIndicativeQuote::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
  return tradingphasecode_.GetNoArena();
}
inline void MDSLIndicativeQuote::set_tradingphasecode(const std::string& value) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
}
inline void MDSLIndicativeQuote::set_tradingphasecode(std::string&& value) {
  
  tradingphasecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
}
inline void MDSLIndicativeQuote::set_tradingphasecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
}
inline void MDSLIndicativeQuote::set_tradingphasecode(const char* value, size_t size) {
  
  tradingphasecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
}
inline std::string* MDSLIndicativeQuote::mutable_tradingphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDSLIndicativeQuote::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
  
  return tradingphasecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDSLIndicativeQuote::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  tradingphasecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDSLIndicativeQuote::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDSLIndicativeQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void MDSLIndicativeQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDSLIndicativeQuote::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDSLIndicativeQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void MDSLIndicativeQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.securityType)
}

// int64 LastPx = 8;
inline void MDSLIndicativeQuote::clear_lastpx() {
  lastpx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.LastPx)
  return lastpx_;
}
inline void MDSLIndicativeQuote::set_lastpx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.LastPx)
}

// int64 PreClosePx = 9;
inline void MDSLIndicativeQuote::clear_preclosepx() {
  preclosepx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreClosePx)
  return preclosepx_;
}
inline void MDSLIndicativeQuote::set_preclosepx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreClosePx)
}

// int64 HtscLendAmount = 10;
inline void MDSLIndicativeQuote::clear_htsclendamount() {
  htsclendamount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::htsclendamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendAmount)
  return htsclendamount_;
}
inline void MDSLIndicativeQuote::set_htsclendamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  htsclendamount_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendAmount)
}

// string HtscLendTerms = 11;
inline void MDSLIndicativeQuote::clear_htsclendterms() {
  htsclendterms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDSLIndicativeQuote::htsclendterms() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
  return htsclendterms_.GetNoArena();
}
inline void MDSLIndicativeQuote::set_htsclendterms(const std::string& value) {
  
  htsclendterms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
}
inline void MDSLIndicativeQuote::set_htsclendterms(std::string&& value) {
  
  htsclendterms_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
}
inline void MDSLIndicativeQuote::set_htsclendterms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htsclendterms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
}
inline void MDSLIndicativeQuote::set_htsclendterms(const char* value, size_t size) {
  
  htsclendterms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
}
inline std::string* MDSLIndicativeQuote::mutable_htsclendterms() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
  return htsclendterms_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDSLIndicativeQuote::release_htsclendterms() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
  
  return htsclendterms_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDSLIndicativeQuote::set_allocated_htsclendterms(std::string* htsclendterms) {
  if (htsclendterms != nullptr) {
    
  } else {
    
  }
  htsclendterms_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htsclendterms);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
}

// int64 HtscBestLendRate = 12;
inline void MDSLIndicativeQuote::clear_htscbestlendrate() {
  htscbestlendrate_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::htscbestlendrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBestLendRate)
  return htscbestlendrate_;
}
inline void MDSLIndicativeQuote::set_htscbestlendrate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  htscbestlendrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBestLendRate)
}

// int64 HtscBorrowAmount = 13;
inline void MDSLIndicativeQuote::clear_htscborrowamount() {
  htscborrowamount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::htscborrowamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowAmount)
  return htscborrowamount_;
}
inline void MDSLIndicativeQuote::set_htscborrowamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  htscborrowamount_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowAmount)
}

// string HtscBorrowTerms = 14;
inline void MDSLIndicativeQuote::clear_htscborrowterms() {
  htscborrowterms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MDSLIndicativeQuote::htscborrowterms() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
  return htscborrowterms_.GetNoArena();
}
inline void MDSLIndicativeQuote::set_htscborrowterms(const std::string& value) {
  
  htscborrowterms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
}
inline void MDSLIndicativeQuote::set_htscborrowterms(std::string&& value) {
  
  htscborrowterms_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
}
inline void MDSLIndicativeQuote::set_htscborrowterms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  htscborrowterms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
}
inline void MDSLIndicativeQuote::set_htscborrowterms(const char* value, size_t size) {
  
  htscborrowterms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
}
inline std::string* MDSLIndicativeQuote::mutable_htscborrowterms() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
  return htscborrowterms_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MDSLIndicativeQuote::release_htscborrowterms() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
  
  return htscborrowterms_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MDSLIndicativeQuote::set_allocated_htscborrowterms(std::string* htscborrowterms) {
  if (htscborrowterms != nullptr) {
    
  } else {
    
  }
  htscborrowterms_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), htscborrowterms);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
}

// int64 HtscBorrowRate = 15;
inline void MDSLIndicativeQuote::clear_htscborrowrate() {
  htscborrowrate_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::htscborrowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowRate)
  return htscborrowrate_;
}
inline void MDSLIndicativeQuote::set_htscborrowrate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  htscborrowrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowRate)
}

// int64 TradeVolume = 16;
inline void MDSLIndicativeQuote::clear_tradevolume() {
  tradevolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::tradevolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradeVolume)
  return tradevolume_;
}
inline void MDSLIndicativeQuote::set_tradevolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradevolume_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradeVolume)
}

// int64 TradeMoney = 17;
inline void MDSLIndicativeQuote::clear_trademoney() {
  trademoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::trademoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradeMoney)
  return trademoney_;
}
inline void MDSLIndicativeQuote::set_trademoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trademoney_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradeMoney)
}

// int64 PreTradeVolume = 18;
inline void MDSLIndicativeQuote::clear_pretradevolume() {
  pretradevolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::pretradevolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreTradeVolume)
  return pretradevolume_;
}
inline void MDSLIndicativeQuote::set_pretradevolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pretradevolume_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreTradeVolume)
}

// int64 PreTradeMoney = 19;
inline void MDSLIndicativeQuote::clear_pretrademoney() {
  pretrademoney_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MDSLIndicativeQuote::pretrademoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreTradeMoney)
  return pretrademoney_;
}
inline void MDSLIndicativeQuote::set_pretrademoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pretrademoney_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreTradeMoney)
}

// int32 DataMultiplePowerOf10 = 20;
inline void MDSLIndicativeQuote::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MDSLIndicativeQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void MDSLIndicativeQuote::set_datamultiplepowerof10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDSLIndicativeQuote_2eproto
