// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCnexQuote.proto

#include "MDCnexQuote.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDCnexQuote::MDCnexQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bondquote_)*/nullptr
  , /*decltype(_impl_.cnyrepoquote_)*/nullptr
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.quotecategory_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDCnexQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDCnexQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDCnexQuoteDefaultTypeInternal() {}
  union {
    MDCnexQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDCnexQuoteDefaultTypeInternal _MDCnexQuote_default_instance_;
PROTOBUF_CONSTEXPR MDBondQuote::MDBondQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quoteid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cnexsecuritytype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creditrating_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.maturitymonthyear_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matchid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tenor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issuedatatime_)*/int64_t{0}
  , /*decltype(_impl_.cnexdatatype_)*/0
  , /*decltype(_impl_.quotetype_)*/0
  , /*decltype(_impl_.quoteprice_)*/int64_t{0}
  , /*decltype(_impl_.quotesize_)*/int64_t{0}
  , /*decltype(_impl_.yield_)*/int64_t{0}
  , /*decltype(_impl_.quotedate_)*/0
  , /*decltype(_impl_.quotetime_)*/0
  , /*decltype(_impl_.quotestatus_)*/0
  , /*decltype(_impl_.quotepricetype_)*/0
  , /*decltype(_impl_.maturitydate_)*/0
  , /*decltype(_impl_.underlyingprice_)*/0
  , /*decltype(_impl_.workbench_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDBondQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDBondQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDBondQuoteDefaultTypeInternal() {}
  union {
    MDBondQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDBondQuoteDefaultTypeInternal _MDBondQuote_default_instance_;
PROTOBUF_CONSTEXPR MDCnyRepoQuote::MDCnyRepoQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quoteid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.floatprice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fixedrate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.volume_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.specialterm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.zhilian_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.underwriterlevel1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.atadd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dealtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.issuedatatime_)*/int64_t{0}
  , /*decltype(_impl_.cnexdatatype_)*/0
  , /*decltype(_impl_.quotetype_)*/0
  , /*decltype(_impl_.quotedate_)*/0
  , /*decltype(_impl_.quotetime_)*/0
  , /*decltype(_impl_.quotestatus_)*/0
  , /*decltype(_impl_.quotepricetype_)*/0
  , /*decltype(_impl_.createdate_)*/int64_t{0}
  , /*decltype(_impl_.modifydate_)*/int64_t{0}
  , /*decltype(_impl_.baseterm_)*/0
  , /*decltype(_impl_.floattype_)*/0
  , /*decltype(_impl_.volumeaboveorbelow_)*/0
  , /*decltype(_impl_.volcansplit_)*/0
  , /*decltype(_impl_.at1_)*/0
  , /*decltype(_impl_.at2_)*/0
  , /*decltype(_impl_.atcreditrating_)*/0
  , /*decltype(_impl_.atbanklimited_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDCnyRepoQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDCnyRepoQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDCnyRepoQuoteDefaultTypeInternal() {}
  union {
    MDCnyRepoQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDCnyRepoQuoteDefaultTypeInternal _MDCnyRepoQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDCnexQuote_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDCnexQuote_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDCnexQuote_2eproto = nullptr;

const uint32_t TableStruct_MDCnexQuote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.quotecategory_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.bondquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.cnyrepoquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnexQuote, _impl_.datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.cnexdatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.issuedatatime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.quoteid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.quotetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.quoteprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.quotesize_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.yield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.quotedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.quotetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.quotestatus_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.quotepricetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.maturitydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.cnexsecuritytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.creditrating_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.maturitymonthyear_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.underlyingprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.workbench_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDBondQuote, _impl_.tenor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.cnexdatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.issuedatatime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.quoteid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.quotetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.quotedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.quotetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.quotestatus_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.quotepricetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.createdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.modifydate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.baseterm_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.floattype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.floatprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.fixedrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.volumeaboveorbelow_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.volcansplit_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.specialterm_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.at1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.at2_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.atcreditrating_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.atbanklimited_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.zhilian_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.underwriterlevel1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.atadd_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCnyRepoQuote, _impl_.dealtype_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDCnexQuote)},
  { 16, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDBondQuote)},
  { 42, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDCnyRepoQuote)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDCnexQuote_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDBondQuote_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDCnyRepoQuote_default_instance_._instance,
};

const char descriptor_table_protodef_MDCnexQuote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021MDCnexQuote.proto\022\032com.htsc.mdc.insigh"
  "t.model\032\027ESecurityIDSource.proto\032\023ESecur"
  "ityType.proto\"\212\003\n\013MDCnexQuote\022\026\n\016HTSCSec"
  "urityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030"
  "\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020security"
  "IDSource\030\005 \001(\0162%.com.htsc.mdc.model.ESec"
  "urityIDSource\0227\n\014securityType\030\006 \001(\0162!.co"
  "m.htsc.mdc.model.ESecurityType\022\025\n\rQuoteC"
  "ategory\030\007 \001(\005\022:\n\tBondQuote\030\010 \001(\0132\'.com.h"
  "tsc.mdc.insight.model.MDBondQuote\022@\n\014Cny"
  "RepoQuote\030\t \001(\0132*.com.htsc.mdc.insight.m"
  "odel.MDCnyRepoQuote\022\035\n\025DataMultiplePower"
  "Of10\030\n \001(\005\"\242\003\n\013MDBondQuote\022\024\n\014CnexDataTy"
  "pe\030\001 \001(\005\022\025\n\rIssueDataTime\030\002 \001(\003\022\017\n\007Quote"
  "ID\030\003 \001(\t\022\021\n\tQuoteType\030\004 \001(\005\022\022\n\nQuotePric"
  "e\030\005 \001(\003\022\021\n\tQuoteSize\030\006 \001(\003\022\r\n\005Yield\030\007 \001("
  "\003\022\021\n\tQuoteDate\030\010 \001(\005\022\021\n\tQuoteTime\030\t \001(\005\022"
  "\023\n\013QuoteStatus\030\n \001(\005\022\026\n\016QuotePriceType\030\013"
  " \001(\005\022\024\n\014MaturityDate\030\014 \001(\005\022\030\n\020CnexSecuri"
  "tyType\030\r \001(\t\022\024\n\014CreditRating\030\016 \001(\t\022\014\n\004Te"
  "xt\030\017 \001(\t\022\031\n\021MaturityMonthYear\030\020 \001(\t\022\027\n\017U"
  "nderlyingPrice\030\021 \001(\005\022\017\n\007MatchId\030\022 \001(\t\022\021\n"
  "\tWorkBench\030\023 \001(\005\022\r\n\005Tenor\030\024 \001(\t\"\224\004\n\016MDCn"
  "yRepoQuote\022\024\n\014CnexDataType\030\001 \001(\005\022\025\n\rIssu"
  "eDataTime\030\002 \001(\003\022\017\n\007QuoteID\030\003 \001(\t\022\021\n\tQuot"
  "eType\030\004 \001(\005\022\021\n\tQuoteDate\030\005 \001(\005\022\021\n\tQuoteT"
  "ime\030\006 \001(\005\022\023\n\013QuoteStatus\030\007 \001(\005\022\026\n\016QuoteP"
  "riceType\030\010 \001(\005\022\022\n\nCreateDate\030\t \001(\003\022\022\n\nMo"
  "difyDate\030\n \001(\003\022\020\n\010BaseTerm\030\013 \001(\005\022\021\n\tFloa"
  "tType\030\014 \001(\005\022\022\n\nFloatPrice\030\r \001(\t\022\021\n\tFixed"
  "Rate\030\016 \001(\t\022\016\n\006Volume\030\017 \001(\t\022\032\n\022VolumeAbov"
  "eOrBelow\030\020 \001(\005\022\023\n\013VolCanSplit\030\021 \001(\005\022\023\n\013S"
  "pecialTerm\030\022 \001(\t\022\013\n\003At1\030\023 \001(\005\022\013\n\003At2\030\024 \001"
  "(\005\022\026\n\016ATCreditRating\030\025 \001(\005\022\025\n\rATBankLimi"
  "ted\030\026 \001(\005\022\017\n\007ZhiLian\030\027 \001(\t\022\031\n\021Underwrite"
  "rLevel1\030\030 \001(\t\022\r\n\005ATAdd\030\031 \001(\t\022\020\n\010Dealtype"
  "\030\032 \001(\tB4\n\032com.htsc.mdc.insight.modelB\021MD"
  "CnexQuoteProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDCnexQuote_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDCnexQuote_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDCnexQuote_2eproto = {
    false, false, 1508, descriptor_table_protodef_MDCnexQuote_2eproto,
    "MDCnexQuote.proto",
    &descriptor_table_MDCnexQuote_2eproto_once, descriptor_table_MDCnexQuote_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_MDCnexQuote_2eproto::offsets,
    file_level_metadata_MDCnexQuote_2eproto, file_level_enum_descriptors_MDCnexQuote_2eproto,
    file_level_service_descriptors_MDCnexQuote_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDCnexQuote_2eproto_getter() {
  return &descriptor_table_MDCnexQuote_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDCnexQuote_2eproto(&descriptor_table_MDCnexQuote_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCnexQuote::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::MDBondQuote& bondquote(const MDCnexQuote* msg);
  static const ::com::htsc::mdc::insight::model::MDCnyRepoQuote& cnyrepoquote(const MDCnexQuote* msg);
};

const ::com::htsc::mdc::insight::model::MDBondQuote&
MDCnexQuote::_Internal::bondquote(const MDCnexQuote* msg) {
  return *msg->_impl_.bondquote_;
}
const ::com::htsc::mdc::insight::model::MDCnyRepoQuote&
MDCnexQuote::_Internal::cnyrepoquote(const MDCnexQuote* msg) {
  return *msg->_impl_.cnyrepoquote_;
}
MDCnexQuote::MDCnexQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDCnexQuote)
}
MDCnexQuote::MDCnexQuote(const MDCnexQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDCnexQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.bondquote_){nullptr}
    , decltype(_impl_.cnyrepoquote_){nullptr}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.quotecategory_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_bondquote()) {
    _this->_impl_.bondquote_ = new ::com::htsc::mdc::insight::model::MDBondQuote(*from._impl_.bondquote_);
  }
  if (from._internal_has_cnyrepoquote()) {
    _this->_impl_.cnyrepoquote_ = new ::com::htsc::mdc::insight::model::MDCnyRepoQuote(*from._impl_.cnyrepoquote_);
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCnexQuote)
}

inline void MDCnexQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.bondquote_){nullptr}
    , decltype(_impl_.cnyrepoquote_){nullptr}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.quotecategory_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDCnexQuote::~MDCnexQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCnexQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDCnexQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bondquote_;
  if (this != internal_default_instance()) delete _impl_.cnyrepoquote_;
}

void MDCnexQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDCnexQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCnexQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.bondquote_ != nullptr) {
    delete _impl_.bondquote_;
  }
  _impl_.bondquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cnyrepoquote_ != nullptr) {
    delete _impl_.cnyrepoquote_;
  }
  _impl_.cnyrepoquote_ = nullptr;
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDCnexQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnexQuote.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteCategory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.quotecategory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDBondQuote BondQuote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bondquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDCnyRepoQuote CnyRepoQuote = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cnyrepoquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDCnexQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCnexQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnexQuote.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // int32 QuoteCategory = 7;
  if (this->_internal_quotecategory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_quotecategory(), target);
  }

  // .com.htsc.mdc.insight.model.MDBondQuote BondQuote = 8;
  if (this->_internal_has_bondquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::bondquote(this),
        _Internal::bondquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDCnyRepoQuote CnyRepoQuote = 9;
  if (this->_internal_has_cnyrepoquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::cnyrepoquote(this),
        _Internal::cnyrepoquote(this).GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCnexQuote)
  return target;
}

size_t MDCnexQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCnexQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // .com.htsc.mdc.insight.model.MDBondQuote BondQuote = 8;
  if (this->_internal_has_bondquote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bondquote_);
  }

  // .com.htsc.mdc.insight.model.MDCnyRepoQuote CnyRepoQuote = 9;
  if (this->_internal_has_cnyrepoquote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cnyrepoquote_);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 QuoteCategory = 7;
  if (this->_internal_quotecategory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotecategory());
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDCnexQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDCnexQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDCnexQuote::GetClassData() const { return &_class_data_; }


void MDCnexQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDCnexQuote*>(&to_msg);
  auto& from = static_cast<const MDCnexQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCnexQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (from._internal_has_bondquote()) {
    _this->_internal_mutable_bondquote()->::com::htsc::mdc::insight::model::MDBondQuote::MergeFrom(
        from._internal_bondquote());
  }
  if (from._internal_has_cnyrepoquote()) {
    _this->_internal_mutable_cnyrepoquote()->::com::htsc::mdc::insight::model::MDCnyRepoQuote::MergeFrom(
        from._internal_cnyrepoquote());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_quotecategory() != 0) {
    _this->_internal_set_quotecategory(from._internal_quotecategory());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDCnexQuote::CopyFrom(const MDCnexQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCnexQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDCnexQuote::IsInitialized() const {
  return true;
}

void MDCnexQuote::InternalSwap(MDCnexQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDCnexQuote, _impl_.datamultiplepowerof10_)
      + sizeof(MDCnexQuote::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDCnexQuote, _impl_.bondquote_)>(
          reinterpret_cast<char*>(&_impl_.bondquote_),
          reinterpret_cast<char*>(&other->_impl_.bondquote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDCnexQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCnexQuote_2eproto_getter, &descriptor_table_MDCnexQuote_2eproto_once,
      file_level_metadata_MDCnexQuote_2eproto[0]);
}

// ===================================================================

class MDBondQuote::_Internal {
 public:
};

MDBondQuote::MDBondQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDBondQuote)
}
MDBondQuote::MDBondQuote(const MDBondQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDBondQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quoteid_){}
    , decltype(_impl_.cnexsecuritytype_){}
    , decltype(_impl_.creditrating_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.maturitymonthyear_){}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.tenor_){}
    , decltype(_impl_.issuedatatime_){}
    , decltype(_impl_.cnexdatatype_){}
    , decltype(_impl_.quotetype_){}
    , decltype(_impl_.quoteprice_){}
    , decltype(_impl_.quotesize_){}
    , decltype(_impl_.yield_){}
    , decltype(_impl_.quotedate_){}
    , decltype(_impl_.quotetime_){}
    , decltype(_impl_.quotestatus_){}
    , decltype(_impl_.quotepricetype_){}
    , decltype(_impl_.maturitydate_){}
    , decltype(_impl_.underlyingprice_){}
    , decltype(_impl_.workbench_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quoteid().empty()) {
    _this->_impl_.quoteid_.Set(from._internal_quoteid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cnexsecuritytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cnexsecuritytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cnexsecuritytype().empty()) {
    _this->_impl_.cnexsecuritytype_.Set(from._internal_cnexsecuritytype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creditrating_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creditrating_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creditrating().empty()) {
    _this->_impl_.creditrating_.Set(from._internal_creditrating(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.maturitymonthyear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maturitymonthyear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maturitymonthyear().empty()) {
    _this->_impl_.maturitymonthyear_.Set(from._internal_maturitymonthyear(), 
      _this->GetArenaForAllocation());
  }
  _impl_.matchid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matchid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matchid().empty()) {
    _this->_impl_.matchid_.Set(from._internal_matchid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tenor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tenor().empty()) {
    _this->_impl_.tenor_.Set(from._internal_tenor(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.issuedatatime_, &from._impl_.issuedatatime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.workbench_) -
    reinterpret_cast<char*>(&_impl_.issuedatatime_)) + sizeof(_impl_.workbench_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDBondQuote)
}

inline void MDBondQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quoteid_){}
    , decltype(_impl_.cnexsecuritytype_){}
    , decltype(_impl_.creditrating_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.maturitymonthyear_){}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.tenor_){}
    , decltype(_impl_.issuedatatime_){int64_t{0}}
    , decltype(_impl_.cnexdatatype_){0}
    , decltype(_impl_.quotetype_){0}
    , decltype(_impl_.quoteprice_){int64_t{0}}
    , decltype(_impl_.quotesize_){int64_t{0}}
    , decltype(_impl_.yield_){int64_t{0}}
    , decltype(_impl_.quotedate_){0}
    , decltype(_impl_.quotetime_){0}
    , decltype(_impl_.quotestatus_){0}
    , decltype(_impl_.quotepricetype_){0}
    , decltype(_impl_.maturitydate_){0}
    , decltype(_impl_.underlyingprice_){0}
    , decltype(_impl_.workbench_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cnexsecuritytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cnexsecuritytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creditrating_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creditrating_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maturitymonthyear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maturitymonthyear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.matchid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matchid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tenor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDBondQuote::~MDBondQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDBondQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDBondQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quoteid_.Destroy();
  _impl_.cnexsecuritytype_.Destroy();
  _impl_.creditrating_.Destroy();
  _impl_.text_.Destroy();
  _impl_.maturitymonthyear_.Destroy();
  _impl_.matchid_.Destroy();
  _impl_.tenor_.Destroy();
}

void MDBondQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDBondQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDBondQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quoteid_.ClearToEmpty();
  _impl_.cnexsecuritytype_.ClearToEmpty();
  _impl_.creditrating_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.maturitymonthyear_.ClearToEmpty();
  _impl_.matchid_.ClearToEmpty();
  _impl_.tenor_.ClearToEmpty();
  ::memset(&_impl_.issuedatatime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.workbench_) -
      reinterpret_cast<char*>(&_impl_.issuedatatime_)) + sizeof(_impl_.workbench_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDBondQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CnexDataType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cnexdatatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IssueDataTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.issuedatatime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string QuoteID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quoteid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBondQuote.QuoteID"));
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.quotetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 QuotePrice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quoteprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 QuoteSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.quotesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Yield = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.yield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteDate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.quotedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.quotetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.quotestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuotePriceType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.quotepricetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaturityDate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.maturitydate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string CnexSecurityType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_cnexsecuritytype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBondQuote.CnexSecurityType"));
        } else
          goto handle_unusual;
        continue;
      // string CreditRating = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_creditrating();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBondQuote.CreditRating"));
        } else
          goto handle_unusual;
        continue;
      // string Text = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBondQuote.Text"));
        } else
          goto handle_unusual;
        continue;
      // string MaturityMonthYear = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_maturitymonthyear();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBondQuote.MaturityMonthYear"));
        } else
          goto handle_unusual;
        continue;
      // int32 UnderlyingPrice = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.underlyingprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MatchId = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_matchid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBondQuote.MatchId"));
        } else
          goto handle_unusual;
        continue;
      // int32 WorkBench = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.workbench_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Tenor = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_tenor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDBondQuote.Tenor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDBondQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDBondQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CnexDataType = 1;
  if (this->_internal_cnexdatatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cnexdatatype(), target);
  }

  // int64 IssueDataTime = 2;
  if (this->_internal_issuedatatime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_issuedatatime(), target);
  }

  // string QuoteID = 3;
  if (!this->_internal_quoteid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quoteid().data(), static_cast<int>(this->_internal_quoteid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBondQuote.QuoteID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_quoteid(), target);
  }

  // int32 QuoteType = 4;
  if (this->_internal_quotetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_quotetype(), target);
  }

  // int64 QuotePrice = 5;
  if (this->_internal_quoteprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_quoteprice(), target);
  }

  // int64 QuoteSize = 6;
  if (this->_internal_quotesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_quotesize(), target);
  }

  // int64 Yield = 7;
  if (this->_internal_yield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_yield(), target);
  }

  // int32 QuoteDate = 8;
  if (this->_internal_quotedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_quotedate(), target);
  }

  // int32 QuoteTime = 9;
  if (this->_internal_quotetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_quotetime(), target);
  }

  // int32 QuoteStatus = 10;
  if (this->_internal_quotestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_quotestatus(), target);
  }

  // int32 QuotePriceType = 11;
  if (this->_internal_quotepricetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_quotepricetype(), target);
  }

  // int32 MaturityDate = 12;
  if (this->_internal_maturitydate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_maturitydate(), target);
  }

  // string CnexSecurityType = 13;
  if (!this->_internal_cnexsecuritytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cnexsecuritytype().data(), static_cast<int>(this->_internal_cnexsecuritytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBondQuote.CnexSecurityType");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_cnexsecuritytype(), target);
  }

  // string CreditRating = 14;
  if (!this->_internal_creditrating().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creditrating().data(), static_cast<int>(this->_internal_creditrating().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBondQuote.CreditRating");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_creditrating(), target);
  }

  // string Text = 15;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBondQuote.Text");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_text(), target);
  }

  // string MaturityMonthYear = 16;
  if (!this->_internal_maturitymonthyear().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maturitymonthyear().data(), static_cast<int>(this->_internal_maturitymonthyear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBondQuote.MaturityMonthYear");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_maturitymonthyear(), target);
  }

  // int32 UnderlyingPrice = 17;
  if (this->_internal_underlyingprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_underlyingprice(), target);
  }

  // string MatchId = 18;
  if (!this->_internal_matchid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchid().data(), static_cast<int>(this->_internal_matchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBondQuote.MatchId");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_matchid(), target);
  }

  // int32 WorkBench = 19;
  if (this->_internal_workbench() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_workbench(), target);
  }

  // string Tenor = 20;
  if (!this->_internal_tenor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenor().data(), static_cast<int>(this->_internal_tenor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDBondQuote.Tenor");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_tenor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDBondQuote)
  return target;
}

size_t MDBondQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDBondQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string QuoteID = 3;
  if (!this->_internal_quoteid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quoteid());
  }

  // string CnexSecurityType = 13;
  if (!this->_internal_cnexsecuritytype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cnexsecuritytype());
  }

  // string CreditRating = 14;
  if (!this->_internal_creditrating().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creditrating());
  }

  // string Text = 15;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string MaturityMonthYear = 16;
  if (!this->_internal_maturitymonthyear().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maturitymonthyear());
  }

  // string MatchId = 18;
  if (!this->_internal_matchid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchid());
  }

  // string Tenor = 20;
  if (!this->_internal_tenor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenor());
  }

  // int64 IssueDataTime = 2;
  if (this->_internal_issuedatatime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_issuedatatime());
  }

  // int32 CnexDataType = 1;
  if (this->_internal_cnexdatatype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cnexdatatype());
  }

  // int32 QuoteType = 4;
  if (this->_internal_quotetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotetype());
  }

  // int64 QuotePrice = 5;
  if (this->_internal_quoteprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quoteprice());
  }

  // int64 QuoteSize = 6;
  if (this->_internal_quotesize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quotesize());
  }

  // int64 Yield = 7;
  if (this->_internal_yield() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_yield());
  }

  // int32 QuoteDate = 8;
  if (this->_internal_quotedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotedate());
  }

  // int32 QuoteTime = 9;
  if (this->_internal_quotetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotetime());
  }

  // int32 QuoteStatus = 10;
  if (this->_internal_quotestatus() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotestatus());
  }

  // int32 QuotePriceType = 11;
  if (this->_internal_quotepricetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotepricetype());
  }

  // int32 MaturityDate = 12;
  if (this->_internal_maturitydate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maturitydate());
  }

  // int32 UnderlyingPrice = 17;
  if (this->_internal_underlyingprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_underlyingprice());
  }

  // int32 WorkBench = 19;
  if (this->_internal_workbench() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_workbench());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDBondQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDBondQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDBondQuote::GetClassData() const { return &_class_data_; }


void MDBondQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDBondQuote*>(&to_msg);
  auto& from = static_cast<const MDBondQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDBondQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quoteid().empty()) {
    _this->_internal_set_quoteid(from._internal_quoteid());
  }
  if (!from._internal_cnexsecuritytype().empty()) {
    _this->_internal_set_cnexsecuritytype(from._internal_cnexsecuritytype());
  }
  if (!from._internal_creditrating().empty()) {
    _this->_internal_set_creditrating(from._internal_creditrating());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_maturitymonthyear().empty()) {
    _this->_internal_set_maturitymonthyear(from._internal_maturitymonthyear());
  }
  if (!from._internal_matchid().empty()) {
    _this->_internal_set_matchid(from._internal_matchid());
  }
  if (!from._internal_tenor().empty()) {
    _this->_internal_set_tenor(from._internal_tenor());
  }
  if (from._internal_issuedatatime() != 0) {
    _this->_internal_set_issuedatatime(from._internal_issuedatatime());
  }
  if (from._internal_cnexdatatype() != 0) {
    _this->_internal_set_cnexdatatype(from._internal_cnexdatatype());
  }
  if (from._internal_quotetype() != 0) {
    _this->_internal_set_quotetype(from._internal_quotetype());
  }
  if (from._internal_quoteprice() != 0) {
    _this->_internal_set_quoteprice(from._internal_quoteprice());
  }
  if (from._internal_quotesize() != 0) {
    _this->_internal_set_quotesize(from._internal_quotesize());
  }
  if (from._internal_yield() != 0) {
    _this->_internal_set_yield(from._internal_yield());
  }
  if (from._internal_quotedate() != 0) {
    _this->_internal_set_quotedate(from._internal_quotedate());
  }
  if (from._internal_quotetime() != 0) {
    _this->_internal_set_quotetime(from._internal_quotetime());
  }
  if (from._internal_quotestatus() != 0) {
    _this->_internal_set_quotestatus(from._internal_quotestatus());
  }
  if (from._internal_quotepricetype() != 0) {
    _this->_internal_set_quotepricetype(from._internal_quotepricetype());
  }
  if (from._internal_maturitydate() != 0) {
    _this->_internal_set_maturitydate(from._internal_maturitydate());
  }
  if (from._internal_underlyingprice() != 0) {
    _this->_internal_set_underlyingprice(from._internal_underlyingprice());
  }
  if (from._internal_workbench() != 0) {
    _this->_internal_set_workbench(from._internal_workbench());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDBondQuote::CopyFrom(const MDBondQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDBondQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDBondQuote::IsInitialized() const {
  return true;
}

void MDBondQuote::InternalSwap(MDBondQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quoteid_, lhs_arena,
      &other->_impl_.quoteid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cnexsecuritytype_, lhs_arena,
      &other->_impl_.cnexsecuritytype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creditrating_, lhs_arena,
      &other->_impl_.creditrating_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.maturitymonthyear_, lhs_arena,
      &other->_impl_.maturitymonthyear_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matchid_, lhs_arena,
      &other->_impl_.matchid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tenor_, lhs_arena,
      &other->_impl_.tenor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDBondQuote, _impl_.workbench_)
      + sizeof(MDBondQuote::_impl_.workbench_)
      - PROTOBUF_FIELD_OFFSET(MDBondQuote, _impl_.issuedatatime_)>(
          reinterpret_cast<char*>(&_impl_.issuedatatime_),
          reinterpret_cast<char*>(&other->_impl_.issuedatatime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDBondQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCnexQuote_2eproto_getter, &descriptor_table_MDCnexQuote_2eproto_once,
      file_level_metadata_MDCnexQuote_2eproto[1]);
}

// ===================================================================

class MDCnyRepoQuote::_Internal {
 public:
};

MDCnyRepoQuote::MDCnyRepoQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDCnyRepoQuote)
}
MDCnyRepoQuote::MDCnyRepoQuote(const MDCnyRepoQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDCnyRepoQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quoteid_){}
    , decltype(_impl_.floatprice_){}
    , decltype(_impl_.fixedrate_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.specialterm_){}
    , decltype(_impl_.zhilian_){}
    , decltype(_impl_.underwriterlevel1_){}
    , decltype(_impl_.atadd_){}
    , decltype(_impl_.dealtype_){}
    , decltype(_impl_.issuedatatime_){}
    , decltype(_impl_.cnexdatatype_){}
    , decltype(_impl_.quotetype_){}
    , decltype(_impl_.quotedate_){}
    , decltype(_impl_.quotetime_){}
    , decltype(_impl_.quotestatus_){}
    , decltype(_impl_.quotepricetype_){}
    , decltype(_impl_.createdate_){}
    , decltype(_impl_.modifydate_){}
    , decltype(_impl_.baseterm_){}
    , decltype(_impl_.floattype_){}
    , decltype(_impl_.volumeaboveorbelow_){}
    , decltype(_impl_.volcansplit_){}
    , decltype(_impl_.at1_){}
    , decltype(_impl_.at2_){}
    , decltype(_impl_.atcreditrating_){}
    , decltype(_impl_.atbanklimited_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quoteid().empty()) {
    _this->_impl_.quoteid_.Set(from._internal_quoteid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.floatprice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.floatprice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_floatprice().empty()) {
    _this->_impl_.floatprice_.Set(from._internal_floatprice(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fixedrate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fixedrate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fixedrate().empty()) {
    _this->_impl_.fixedrate_.Set(from._internal_fixedrate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.volume_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.volume_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_volume().empty()) {
    _this->_impl_.volume_.Set(from._internal_volume(), 
      _this->GetArenaForAllocation());
  }
  _impl_.specialterm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.specialterm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_specialterm().empty()) {
    _this->_impl_.specialterm_.Set(from._internal_specialterm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.zhilian_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zhilian_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zhilian().empty()) {
    _this->_impl_.zhilian_.Set(from._internal_zhilian(), 
      _this->GetArenaForAllocation());
  }
  _impl_.underwriterlevel1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underwriterlevel1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underwriterlevel1().empty()) {
    _this->_impl_.underwriterlevel1_.Set(from._internal_underwriterlevel1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.atadd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atadd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_atadd().empty()) {
    _this->_impl_.atadd_.Set(from._internal_atadd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dealtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dealtype().empty()) {
    _this->_impl_.dealtype_.Set(from._internal_dealtype(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.issuedatatime_, &from._impl_.issuedatatime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.atbanklimited_) -
    reinterpret_cast<char*>(&_impl_.issuedatatime_)) + sizeof(_impl_.atbanklimited_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCnyRepoQuote)
}

inline void MDCnyRepoQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quoteid_){}
    , decltype(_impl_.floatprice_){}
    , decltype(_impl_.fixedrate_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.specialterm_){}
    , decltype(_impl_.zhilian_){}
    , decltype(_impl_.underwriterlevel1_){}
    , decltype(_impl_.atadd_){}
    , decltype(_impl_.dealtype_){}
    , decltype(_impl_.issuedatatime_){int64_t{0}}
    , decltype(_impl_.cnexdatatype_){0}
    , decltype(_impl_.quotetype_){0}
    , decltype(_impl_.quotedate_){0}
    , decltype(_impl_.quotetime_){0}
    , decltype(_impl_.quotestatus_){0}
    , decltype(_impl_.quotepricetype_){0}
    , decltype(_impl_.createdate_){int64_t{0}}
    , decltype(_impl_.modifydate_){int64_t{0}}
    , decltype(_impl_.baseterm_){0}
    , decltype(_impl_.floattype_){0}
    , decltype(_impl_.volumeaboveorbelow_){0}
    , decltype(_impl_.volcansplit_){0}
    , decltype(_impl_.at1_){0}
    , decltype(_impl_.at2_){0}
    , decltype(_impl_.atcreditrating_){0}
    , decltype(_impl_.atbanklimited_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.floatprice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.floatprice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fixedrate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fixedrate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.volume_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.volume_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.specialterm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.specialterm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zhilian_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zhilian_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.underwriterlevel1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underwriterlevel1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.atadd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atadd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dealtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDCnyRepoQuote::~MDCnyRepoQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCnyRepoQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDCnyRepoQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quoteid_.Destroy();
  _impl_.floatprice_.Destroy();
  _impl_.fixedrate_.Destroy();
  _impl_.volume_.Destroy();
  _impl_.specialterm_.Destroy();
  _impl_.zhilian_.Destroy();
  _impl_.underwriterlevel1_.Destroy();
  _impl_.atadd_.Destroy();
  _impl_.dealtype_.Destroy();
}

void MDCnyRepoQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDCnyRepoQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCnyRepoQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quoteid_.ClearToEmpty();
  _impl_.floatprice_.ClearToEmpty();
  _impl_.fixedrate_.ClearToEmpty();
  _impl_.volume_.ClearToEmpty();
  _impl_.specialterm_.ClearToEmpty();
  _impl_.zhilian_.ClearToEmpty();
  _impl_.underwriterlevel1_.ClearToEmpty();
  _impl_.atadd_.ClearToEmpty();
  _impl_.dealtype_.ClearToEmpty();
  ::memset(&_impl_.issuedatatime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.atbanklimited_) -
      reinterpret_cast<char*>(&_impl_.issuedatatime_)) + sizeof(_impl_.atbanklimited_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDCnyRepoQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CnexDataType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cnexdatatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IssueDataTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.issuedatatime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string QuoteID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quoteid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteID"));
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.quotetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quotedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.quotetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.quotestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuotePriceType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.quotepricetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CreateDate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.createdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ModifyDate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.modifydate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BaseTerm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.baseterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FloatType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.floattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string FloatPrice = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_floatprice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatPrice"));
        } else
          goto handle_unusual;
        continue;
      // string FixedRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_fixedrate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.FixedRate"));
        } else
          goto handle_unusual;
        continue;
      // string Volume = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_volume();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.Volume"));
        } else
          goto handle_unusual;
        continue;
      // int32 VolumeAboveOrBelow = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.volumeaboveorbelow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 VolCanSplit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.volcansplit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SpecialTerm = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_specialterm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.SpecialTerm"));
        } else
          goto handle_unusual;
        continue;
      // int32 At1 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.at1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 At2 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.at2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ATCreditRating = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.atcreditrating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ATBankLimited = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.atbanklimited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ZhiLian = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_zhilian();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.ZhiLian"));
        } else
          goto handle_unusual;
        continue;
      // string UnderwriterLevel1 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_underwriterlevel1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.UnderwriterLevel1"));
        } else
          goto handle_unusual;
        continue;
      // string ATAdd = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_atadd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.ATAdd"));
        } else
          goto handle_unusual;
        continue;
      // string Dealtype = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_dealtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCnyRepoQuote.Dealtype"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDCnyRepoQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCnyRepoQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CnexDataType = 1;
  if (this->_internal_cnexdatatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cnexdatatype(), target);
  }

  // int64 IssueDataTime = 2;
  if (this->_internal_issuedatatime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_issuedatatime(), target);
  }

  // string QuoteID = 3;
  if (!this->_internal_quoteid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quoteid().data(), static_cast<int>(this->_internal_quoteid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.QuoteID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_quoteid(), target);
  }

  // int32 QuoteType = 4;
  if (this->_internal_quotetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_quotetype(), target);
  }

  // int32 QuoteDate = 5;
  if (this->_internal_quotedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quotedate(), target);
  }

  // int32 QuoteTime = 6;
  if (this->_internal_quotetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_quotetime(), target);
  }

  // int32 QuoteStatus = 7;
  if (this->_internal_quotestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_quotestatus(), target);
  }

  // int32 QuotePriceType = 8;
  if (this->_internal_quotepricetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_quotepricetype(), target);
  }

  // int64 CreateDate = 9;
  if (this->_internal_createdate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_createdate(), target);
  }

  // int64 ModifyDate = 10;
  if (this->_internal_modifydate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_modifydate(), target);
  }

  // int32 BaseTerm = 11;
  if (this->_internal_baseterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_baseterm(), target);
  }

  // int32 FloatType = 12;
  if (this->_internal_floattype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_floattype(), target);
  }

  // string FloatPrice = 13;
  if (!this->_internal_floatprice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_floatprice().data(), static_cast<int>(this->_internal_floatprice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.FloatPrice");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_floatprice(), target);
  }

  // string FixedRate = 14;
  if (!this->_internal_fixedrate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixedrate().data(), static_cast<int>(this->_internal_fixedrate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.FixedRate");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_fixedrate(), target);
  }

  // string Volume = 15;
  if (!this->_internal_volume().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume().data(), static_cast<int>(this->_internal_volume().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.Volume");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_volume(), target);
  }

  // int32 VolumeAboveOrBelow = 16;
  if (this->_internal_volumeaboveorbelow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_volumeaboveorbelow(), target);
  }

  // int32 VolCanSplit = 17;
  if (this->_internal_volcansplit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_volcansplit(), target);
  }

  // string SpecialTerm = 18;
  if (!this->_internal_specialterm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_specialterm().data(), static_cast<int>(this->_internal_specialterm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.SpecialTerm");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_specialterm(), target);
  }

  // int32 At1 = 19;
  if (this->_internal_at1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_at1(), target);
  }

  // int32 At2 = 20;
  if (this->_internal_at2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_at2(), target);
  }

  // int32 ATCreditRating = 21;
  if (this->_internal_atcreditrating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_atcreditrating(), target);
  }

  // int32 ATBankLimited = 22;
  if (this->_internal_atbanklimited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_atbanklimited(), target);
  }

  // string ZhiLian = 23;
  if (!this->_internal_zhilian().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zhilian().data(), static_cast<int>(this->_internal_zhilian().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.ZhiLian");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_zhilian(), target);
  }

  // string UnderwriterLevel1 = 24;
  if (!this->_internal_underwriterlevel1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_underwriterlevel1().data(), static_cast<int>(this->_internal_underwriterlevel1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.UnderwriterLevel1");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_underwriterlevel1(), target);
  }

  // string ATAdd = 25;
  if (!this->_internal_atadd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atadd().data(), static_cast<int>(this->_internal_atadd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.ATAdd");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_atadd(), target);
  }

  // string Dealtype = 26;
  if (!this->_internal_dealtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dealtype().data(), static_cast<int>(this->_internal_dealtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCnyRepoQuote.Dealtype");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_dealtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCnyRepoQuote)
  return target;
}

size_t MDCnyRepoQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCnyRepoQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string QuoteID = 3;
  if (!this->_internal_quoteid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quoteid());
  }

  // string FloatPrice = 13;
  if (!this->_internal_floatprice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_floatprice());
  }

  // string FixedRate = 14;
  if (!this->_internal_fixedrate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fixedrate());
  }

  // string Volume = 15;
  if (!this->_internal_volume().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume());
  }

  // string SpecialTerm = 18;
  if (!this->_internal_specialterm().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_specialterm());
  }

  // string ZhiLian = 23;
  if (!this->_internal_zhilian().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zhilian());
  }

  // string UnderwriterLevel1 = 24;
  if (!this->_internal_underwriterlevel1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_underwriterlevel1());
  }

  // string ATAdd = 25;
  if (!this->_internal_atadd().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atadd());
  }

  // string Dealtype = 26;
  if (!this->_internal_dealtype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dealtype());
  }

  // int64 IssueDataTime = 2;
  if (this->_internal_issuedatatime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_issuedatatime());
  }

  // int32 CnexDataType = 1;
  if (this->_internal_cnexdatatype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cnexdatatype());
  }

  // int32 QuoteType = 4;
  if (this->_internal_quotetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotetype());
  }

  // int32 QuoteDate = 5;
  if (this->_internal_quotedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotedate());
  }

  // int32 QuoteTime = 6;
  if (this->_internal_quotetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotetime());
  }

  // int32 QuoteStatus = 7;
  if (this->_internal_quotestatus() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotestatus());
  }

  // int32 QuotePriceType = 8;
  if (this->_internal_quotepricetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotepricetype());
  }

  // int64 CreateDate = 9;
  if (this->_internal_createdate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createdate());
  }

  // int64 ModifyDate = 10;
  if (this->_internal_modifydate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_modifydate());
  }

  // int32 BaseTerm = 11;
  if (this->_internal_baseterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_baseterm());
  }

  // int32 FloatType = 12;
  if (this->_internal_floattype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_floattype());
  }

  // int32 VolumeAboveOrBelow = 16;
  if (this->_internal_volumeaboveorbelow() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_volumeaboveorbelow());
  }

  // int32 VolCanSplit = 17;
  if (this->_internal_volcansplit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_volcansplit());
  }

  // int32 At1 = 19;
  if (this->_internal_at1() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_at1());
  }

  // int32 At2 = 20;
  if (this->_internal_at2() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_at2());
  }

  // int32 ATCreditRating = 21;
  if (this->_internal_atcreditrating() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_atcreditrating());
  }

  // int32 ATBankLimited = 22;
  if (this->_internal_atbanklimited() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_atbanklimited());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDCnyRepoQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDCnyRepoQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDCnyRepoQuote::GetClassData() const { return &_class_data_; }


void MDCnyRepoQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDCnyRepoQuote*>(&to_msg);
  auto& from = static_cast<const MDCnyRepoQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCnyRepoQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quoteid().empty()) {
    _this->_internal_set_quoteid(from._internal_quoteid());
  }
  if (!from._internal_floatprice().empty()) {
    _this->_internal_set_floatprice(from._internal_floatprice());
  }
  if (!from._internal_fixedrate().empty()) {
    _this->_internal_set_fixedrate(from._internal_fixedrate());
  }
  if (!from._internal_volume().empty()) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (!from._internal_specialterm().empty()) {
    _this->_internal_set_specialterm(from._internal_specialterm());
  }
  if (!from._internal_zhilian().empty()) {
    _this->_internal_set_zhilian(from._internal_zhilian());
  }
  if (!from._internal_underwriterlevel1().empty()) {
    _this->_internal_set_underwriterlevel1(from._internal_underwriterlevel1());
  }
  if (!from._internal_atadd().empty()) {
    _this->_internal_set_atadd(from._internal_atadd());
  }
  if (!from._internal_dealtype().empty()) {
    _this->_internal_set_dealtype(from._internal_dealtype());
  }
  if (from._internal_issuedatatime() != 0) {
    _this->_internal_set_issuedatatime(from._internal_issuedatatime());
  }
  if (from._internal_cnexdatatype() != 0) {
    _this->_internal_set_cnexdatatype(from._internal_cnexdatatype());
  }
  if (from._internal_quotetype() != 0) {
    _this->_internal_set_quotetype(from._internal_quotetype());
  }
  if (from._internal_quotedate() != 0) {
    _this->_internal_set_quotedate(from._internal_quotedate());
  }
  if (from._internal_quotetime() != 0) {
    _this->_internal_set_quotetime(from._internal_quotetime());
  }
  if (from._internal_quotestatus() != 0) {
    _this->_internal_set_quotestatus(from._internal_quotestatus());
  }
  if (from._internal_quotepricetype() != 0) {
    _this->_internal_set_quotepricetype(from._internal_quotepricetype());
  }
  if (from._internal_createdate() != 0) {
    _this->_internal_set_createdate(from._internal_createdate());
  }
  if (from._internal_modifydate() != 0) {
    _this->_internal_set_modifydate(from._internal_modifydate());
  }
  if (from._internal_baseterm() != 0) {
    _this->_internal_set_baseterm(from._internal_baseterm());
  }
  if (from._internal_floattype() != 0) {
    _this->_internal_set_floattype(from._internal_floattype());
  }
  if (from._internal_volumeaboveorbelow() != 0) {
    _this->_internal_set_volumeaboveorbelow(from._internal_volumeaboveorbelow());
  }
  if (from._internal_volcansplit() != 0) {
    _this->_internal_set_volcansplit(from._internal_volcansplit());
  }
  if (from._internal_at1() != 0) {
    _this->_internal_set_at1(from._internal_at1());
  }
  if (from._internal_at2() != 0) {
    _this->_internal_set_at2(from._internal_at2());
  }
  if (from._internal_atcreditrating() != 0) {
    _this->_internal_set_atcreditrating(from._internal_atcreditrating());
  }
  if (from._internal_atbanklimited() != 0) {
    _this->_internal_set_atbanklimited(from._internal_atbanklimited());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDCnyRepoQuote::CopyFrom(const MDCnyRepoQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCnyRepoQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDCnyRepoQuote::IsInitialized() const {
  return true;
}

void MDCnyRepoQuote::InternalSwap(MDCnyRepoQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quoteid_, lhs_arena,
      &other->_impl_.quoteid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.floatprice_, lhs_arena,
      &other->_impl_.floatprice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fixedrate_, lhs_arena,
      &other->_impl_.fixedrate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.volume_, lhs_arena,
      &other->_impl_.volume_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.specialterm_, lhs_arena,
      &other->_impl_.specialterm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.zhilian_, lhs_arena,
      &other->_impl_.zhilian_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.underwriterlevel1_, lhs_arena,
      &other->_impl_.underwriterlevel1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.atadd_, lhs_arena,
      &other->_impl_.atadd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dealtype_, lhs_arena,
      &other->_impl_.dealtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDCnyRepoQuote, _impl_.atbanklimited_)
      + sizeof(MDCnyRepoQuote::_impl_.atbanklimited_)
      - PROTOBUF_FIELD_OFFSET(MDCnyRepoQuote, _impl_.issuedatatime_)>(
          reinterpret_cast<char*>(&_impl_.issuedatatime_),
          reinterpret_cast<char*>(&other->_impl_.issuedatatime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDCnyRepoQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDCnexQuote_2eproto_getter, &descriptor_table_MDCnexQuote_2eproto_once,
      file_level_metadata_MDCnexQuote_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDCnexQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDCnexQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDCnexQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDBondQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDBondQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDBondQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDCnyRepoQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDCnyRepoQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDCnyRepoQuote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
