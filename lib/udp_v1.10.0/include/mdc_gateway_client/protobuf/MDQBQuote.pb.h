// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQBQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDQBQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDQBQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDQBQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDQBQuote_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDQBQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDQBQuote;
struct MDQBQuoteDefaultTypeInternal;
extern MDQBQuoteDefaultTypeInternal _MDQBQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDQBQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQBQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQBQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDQBQuote) */ {
 public:
  inline MDQBQuote() : MDQBQuote(nullptr) {}
  ~MDQBQuote() override;
  explicit PROTOBUF_CONSTEXPR MDQBQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDQBQuote(const MDQBQuote& from);
  MDQBQuote(MDQBQuote&& from) noexcept
    : MDQBQuote() {
    *this = ::std::move(from);
  }

  inline MDQBQuote& operator=(const MDQBQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDQBQuote& operator=(MDQBQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDQBQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDQBQuote* internal_default_instance() {
    return reinterpret_cast<const MDQBQuote*>(
               &_MDQBQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDQBQuote& a, MDQBQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDQBQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDQBQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDQBQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDQBQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDQBQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDQBQuote& from) {
    MDQBQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDQBQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDQBQuote";
  }
  protected:
  explicit MDQBQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kBidCommentFieldNumber = 18,
    kBidIDFieldNumber = 19,
    kOfferCommentFieldNumber = 27,
    kOfferIDFieldNumber = 28,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kExchangeDateFieldNumber = 8,
    kExchangeTimeFieldNumber = 9,
    kApplSeqNumFieldNumber = 11,
    kBidPxFieldNumber = 12,
    kBidSizeFieldNumber = 13,
    kChannelNoFieldNumber = 10,
    kBidBargainFlagFieldNumber = 16,
    kBidYieldFieldNumber = 14,
    kBidNetPriceFieldNumber = 15,
    kBidRelationFlagFieldNumber = 17,
    kBidSsDetectFieldNumber = 20,
    kOfferPxFieldNumber = 21,
    kOfferSizeFieldNumber = 22,
    kOfferYieldFieldNumber = 23,
    kOfferNetPriceFieldNumber = 24,
    kOfferBargainFlagFieldNumber = 25,
    kOfferRelationFlagFieldNumber = 26,
    kOfferSsDetectFieldNumber = 29,
    kBrokerDataTypeFieldNumber = 30,
    kBidExerciseFlagFieldNumber = 31,
    kOfrExerciseFlagFieldNumber = 32,
    kDataMultiplePowerOf10FieldNumber = 33,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // string BidComment = 18;
  void clear_bidcomment();
  const std::string& bidcomment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bidcomment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bidcomment();
  PROTOBUF_NODISCARD std::string* release_bidcomment();
  void set_allocated_bidcomment(std::string* bidcomment);
  private:
  const std::string& _internal_bidcomment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bidcomment(const std::string& value);
  std::string* _internal_mutable_bidcomment();
  public:

  // string BidID = 19;
  void clear_bidid();
  const std::string& bidid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bidid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bidid();
  PROTOBUF_NODISCARD std::string* release_bidid();
  void set_allocated_bidid(std::string* bidid);
  private:
  const std::string& _internal_bidid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bidid(const std::string& value);
  std::string* _internal_mutable_bidid();
  public:

  // string OfferComment = 27;
  void clear_offercomment();
  const std::string& offercomment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offercomment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offercomment();
  PROTOBUF_NODISCARD std::string* release_offercomment();
  void set_allocated_offercomment(std::string* offercomment);
  private:
  const std::string& _internal_offercomment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offercomment(const std::string& value);
  std::string* _internal_mutable_offercomment();
  public:

  // string OfferID = 28;
  void clear_offerid();
  const std::string& offerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offerid();
  PROTOBUF_NODISCARD std::string* release_offerid();
  void set_allocated_offerid(std::string* offerid);
  private:
  const std::string& _internal_offerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offerid(const std::string& value);
  std::string* _internal_mutable_offerid();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 8;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 9;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int64 ApplSeqNum = 11;
  void clear_applseqnum();
  int64_t applseqnum() const;
  void set_applseqnum(int64_t value);
  private:
  int64_t _internal_applseqnum() const;
  void _internal_set_applseqnum(int64_t value);
  public:

  // int64 BidPx = 12;
  void clear_bidpx();
  int64_t bidpx() const;
  void set_bidpx(int64_t value);
  private:
  int64_t _internal_bidpx() const;
  void _internal_set_bidpx(int64_t value);
  public:

  // int64 BidSize = 13;
  void clear_bidsize();
  int64_t bidsize() const;
  void set_bidsize(int64_t value);
  private:
  int64_t _internal_bidsize() const;
  void _internal_set_bidsize(int64_t value);
  public:

  // int32 ChannelNo = 10;
  void clear_channelno();
  int32_t channelno() const;
  void set_channelno(int32_t value);
  private:
  int32_t _internal_channelno() const;
  void _internal_set_channelno(int32_t value);
  public:

  // int32 BidBargainFlag = 16;
  void clear_bidbargainflag();
  int32_t bidbargainflag() const;
  void set_bidbargainflag(int32_t value);
  private:
  int32_t _internal_bidbargainflag() const;
  void _internal_set_bidbargainflag(int32_t value);
  public:

  // int64 BidYield = 14;
  void clear_bidyield();
  int64_t bidyield() const;
  void set_bidyield(int64_t value);
  private:
  int64_t _internal_bidyield() const;
  void _internal_set_bidyield(int64_t value);
  public:

  // int64 BidNetPrice = 15;
  void clear_bidnetprice();
  int64_t bidnetprice() const;
  void set_bidnetprice(int64_t value);
  private:
  int64_t _internal_bidnetprice() const;
  void _internal_set_bidnetprice(int64_t value);
  public:

  // int32 BidRelationFlag = 17;
  void clear_bidrelationflag();
  int32_t bidrelationflag() const;
  void set_bidrelationflag(int32_t value);
  private:
  int32_t _internal_bidrelationflag() const;
  void _internal_set_bidrelationflag(int32_t value);
  public:

  // int32 BidSsDetect = 20;
  void clear_bidssdetect();
  int32_t bidssdetect() const;
  void set_bidssdetect(int32_t value);
  private:
  int32_t _internal_bidssdetect() const;
  void _internal_set_bidssdetect(int32_t value);
  public:

  // int64 OfferPx = 21;
  void clear_offerpx();
  int64_t offerpx() const;
  void set_offerpx(int64_t value);
  private:
  int64_t _internal_offerpx() const;
  void _internal_set_offerpx(int64_t value);
  public:

  // int64 OfferSize = 22;
  void clear_offersize();
  int64_t offersize() const;
  void set_offersize(int64_t value);
  private:
  int64_t _internal_offersize() const;
  void _internal_set_offersize(int64_t value);
  public:

  // int64 OfferYield = 23;
  void clear_offeryield();
  int64_t offeryield() const;
  void set_offeryield(int64_t value);
  private:
  int64_t _internal_offeryield() const;
  void _internal_set_offeryield(int64_t value);
  public:

  // int64 OfferNetPrice = 24;
  void clear_offernetprice();
  int64_t offernetprice() const;
  void set_offernetprice(int64_t value);
  private:
  int64_t _internal_offernetprice() const;
  void _internal_set_offernetprice(int64_t value);
  public:

  // int32 OfferBargainFlag = 25;
  void clear_offerbargainflag();
  int32_t offerbargainflag() const;
  void set_offerbargainflag(int32_t value);
  private:
  int32_t _internal_offerbargainflag() const;
  void _internal_set_offerbargainflag(int32_t value);
  public:

  // int32 OfferRelationFlag = 26;
  void clear_offerrelationflag();
  int32_t offerrelationflag() const;
  void set_offerrelationflag(int32_t value);
  private:
  int32_t _internal_offerrelationflag() const;
  void _internal_set_offerrelationflag(int32_t value);
  public:

  // int32 OfferSsDetect = 29;
  void clear_offerssdetect();
  int32_t offerssdetect() const;
  void set_offerssdetect(int32_t value);
  private:
  int32_t _internal_offerssdetect() const;
  void _internal_set_offerssdetect(int32_t value);
  public:

  // int32 BrokerDataType = 30;
  void clear_brokerdatatype();
  int32_t brokerdatatype() const;
  void set_brokerdatatype(int32_t value);
  private:
  int32_t _internal_brokerdatatype() const;
  void _internal_set_brokerdatatype(int32_t value);
  public:

  // int32 BidExerciseFlag = 31;
  void clear_bidexerciseflag();
  int32_t bidexerciseflag() const;
  void set_bidexerciseflag(int32_t value);
  private:
  int32_t _internal_bidexerciseflag() const;
  void _internal_set_bidexerciseflag(int32_t value);
  public:

  // int32 OfrExerciseFlag = 32;
  void clear_ofrexerciseflag();
  int32_t ofrexerciseflag() const;
  void set_ofrexerciseflag(int32_t value);
  private:
  int32_t _internal_ofrexerciseflag() const;
  void _internal_set_ofrexerciseflag(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 33;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDQBQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bidcomment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bidid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offercomment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offerid_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int64_t applseqnum_;
    int64_t bidpx_;
    int64_t bidsize_;
    int32_t channelno_;
    int32_t bidbargainflag_;
    int64_t bidyield_;
    int64_t bidnetprice_;
    int32_t bidrelationflag_;
    int32_t bidssdetect_;
    int64_t offerpx_;
    int64_t offersize_;
    int64_t offeryield_;
    int64_t offernetprice_;
    int32_t offerbargainflag_;
    int32_t offerrelationflag_;
    int32_t offerssdetect_;
    int32_t brokerdatatype_;
    int32_t bidexerciseflag_;
    int32_t ofrexerciseflag_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDQBQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDQBQuote

// string HTSCSecurityID = 1;
inline void MDQBQuote::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDQBQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBQuote::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.HTSCSecurityID)
}
inline std::string* MDQBQuote::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBQuote.HTSCSecurityID)
  return _s;
}
inline const std::string& MDQBQuote::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDQBQuote::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBQuote::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBQuote.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDQBQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDQBQuote::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDQBQuote::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDQBQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.MDDate)
  return _internal_mddate();
}
inline void MDQBQuote::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDQBQuote::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDQBQuote::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDQBQuote::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDQBQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.MDTime)
  return _internal_mdtime();
}
inline void MDQBQuote::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDQBQuote::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDQBQuote::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDQBQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDQBQuote::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDQBQuote::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDQBQuote::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDQBQuote::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBQuote::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.TradingPhaseCode)
}
inline std::string* MDQBQuote::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBQuote.TradingPhaseCode)
  return _s;
}
inline const std::string& MDQBQuote::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDQBQuote::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBQuote::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBQuote::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBQuote.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDQBQuote::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBQuote.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDQBQuote::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDQBQuote::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDQBQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.securityIDSource)
  return _internal_securityidsource();
}
inline void MDQBQuote::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDQBQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDQBQuote::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDQBQuote::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDQBQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.securityType)
  return _internal_securitytype();
}
inline void MDQBQuote::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDQBQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.securityType)
}

// int32 ExchangeDate = 8;
inline void MDQBQuote::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDQBQuote::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDQBQuote::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDQBQuote::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDQBQuote::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.ExchangeDate)
}

// int32 ExchangeTime = 9;
inline void MDQBQuote::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDQBQuote::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDQBQuote::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDQBQuote::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDQBQuote::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.ExchangeTime)
}

// int32 ChannelNo = 10;
inline void MDQBQuote::clear_channelno() {
  _impl_.channelno_ = 0;
}
inline int32_t MDQBQuote::_internal_channelno() const {
  return _impl_.channelno_;
}
inline int32_t MDQBQuote::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.ChannelNo)
  return _internal_channelno();
}
inline void MDQBQuote::_internal_set_channelno(int32_t value) {
  
  _impl_.channelno_ = value;
}
inline void MDQBQuote::set_channelno(int32_t value) {
  _internal_set_channelno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.ChannelNo)
}

// int64 ApplSeqNum = 11;
inline void MDQBQuote::clear_applseqnum() {
  _impl_.applseqnum_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_applseqnum() const {
  return _impl_.applseqnum_;
}
inline int64_t MDQBQuote::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.ApplSeqNum)
  return _internal_applseqnum();
}
inline void MDQBQuote::_internal_set_applseqnum(int64_t value) {
  
  _impl_.applseqnum_ = value;
}
inline void MDQBQuote::set_applseqnum(int64_t value) {
  _internal_set_applseqnum(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.ApplSeqNum)
}

// int64 BidPx = 12;
inline void MDQBQuote::clear_bidpx() {
  _impl_.bidpx_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_bidpx() const {
  return _impl_.bidpx_;
}
inline int64_t MDQBQuote::bidpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidPx)
  return _internal_bidpx();
}
inline void MDQBQuote::_internal_set_bidpx(int64_t value) {
  
  _impl_.bidpx_ = value;
}
inline void MDQBQuote::set_bidpx(int64_t value) {
  _internal_set_bidpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidPx)
}

// int64 BidSize = 13;
inline void MDQBQuote::clear_bidsize() {
  _impl_.bidsize_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_bidsize() const {
  return _impl_.bidsize_;
}
inline int64_t MDQBQuote::bidsize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidSize)
  return _internal_bidsize();
}
inline void MDQBQuote::_internal_set_bidsize(int64_t value) {
  
  _impl_.bidsize_ = value;
}
inline void MDQBQuote::set_bidsize(int64_t value) {
  _internal_set_bidsize(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidSize)
}

// int64 BidYield = 14;
inline void MDQBQuote::clear_bidyield() {
  _impl_.bidyield_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_bidyield() const {
  return _impl_.bidyield_;
}
inline int64_t MDQBQuote::bidyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidYield)
  return _internal_bidyield();
}
inline void MDQBQuote::_internal_set_bidyield(int64_t value) {
  
  _impl_.bidyield_ = value;
}
inline void MDQBQuote::set_bidyield(int64_t value) {
  _internal_set_bidyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidYield)
}

// int64 BidNetPrice = 15;
inline void MDQBQuote::clear_bidnetprice() {
  _impl_.bidnetprice_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_bidnetprice() const {
  return _impl_.bidnetprice_;
}
inline int64_t MDQBQuote::bidnetprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidNetPrice)
  return _internal_bidnetprice();
}
inline void MDQBQuote::_internal_set_bidnetprice(int64_t value) {
  
  _impl_.bidnetprice_ = value;
}
inline void MDQBQuote::set_bidnetprice(int64_t value) {
  _internal_set_bidnetprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidNetPrice)
}

// int32 BidBargainFlag = 16;
inline void MDQBQuote::clear_bidbargainflag() {
  _impl_.bidbargainflag_ = 0;
}
inline int32_t MDQBQuote::_internal_bidbargainflag() const {
  return _impl_.bidbargainflag_;
}
inline int32_t MDQBQuote::bidbargainflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidBargainFlag)
  return _internal_bidbargainflag();
}
inline void MDQBQuote::_internal_set_bidbargainflag(int32_t value) {
  
  _impl_.bidbargainflag_ = value;
}
inline void MDQBQuote::set_bidbargainflag(int32_t value) {
  _internal_set_bidbargainflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidBargainFlag)
}

// int32 BidRelationFlag = 17;
inline void MDQBQuote::clear_bidrelationflag() {
  _impl_.bidrelationflag_ = 0;
}
inline int32_t MDQBQuote::_internal_bidrelationflag() const {
  return _impl_.bidrelationflag_;
}
inline int32_t MDQBQuote::bidrelationflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidRelationFlag)
  return _internal_bidrelationflag();
}
inline void MDQBQuote::_internal_set_bidrelationflag(int32_t value) {
  
  _impl_.bidrelationflag_ = value;
}
inline void MDQBQuote::set_bidrelationflag(int32_t value) {
  _internal_set_bidrelationflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidRelationFlag)
}

// string BidComment = 18;
inline void MDQBQuote::clear_bidcomment() {
  _impl_.bidcomment_.ClearToEmpty();
}
inline const std::string& MDQBQuote::bidcomment() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidComment)
  return _internal_bidcomment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBQuote::set_bidcomment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bidcomment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidComment)
}
inline std::string* MDQBQuote::mutable_bidcomment() {
  std::string* _s = _internal_mutable_bidcomment();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBQuote.BidComment)
  return _s;
}
inline const std::string& MDQBQuote::_internal_bidcomment() const {
  return _impl_.bidcomment_.Get();
}
inline void MDQBQuote::_internal_set_bidcomment(const std::string& value) {
  
  _impl_.bidcomment_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBQuote::_internal_mutable_bidcomment() {
  
  return _impl_.bidcomment_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBQuote::release_bidcomment() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBQuote.BidComment)
  return _impl_.bidcomment_.Release();
}
inline void MDQBQuote::set_allocated_bidcomment(std::string* bidcomment) {
  if (bidcomment != nullptr) {
    
  } else {
    
  }
  _impl_.bidcomment_.SetAllocated(bidcomment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bidcomment_.IsDefault()) {
    _impl_.bidcomment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBQuote.BidComment)
}

// string BidID = 19;
inline void MDQBQuote::clear_bidid() {
  _impl_.bidid_.ClearToEmpty();
}
inline const std::string& MDQBQuote::bidid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidID)
  return _internal_bidid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBQuote::set_bidid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bidid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidID)
}
inline std::string* MDQBQuote::mutable_bidid() {
  std::string* _s = _internal_mutable_bidid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBQuote.BidID)
  return _s;
}
inline const std::string& MDQBQuote::_internal_bidid() const {
  return _impl_.bidid_.Get();
}
inline void MDQBQuote::_internal_set_bidid(const std::string& value) {
  
  _impl_.bidid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBQuote::_internal_mutable_bidid() {
  
  return _impl_.bidid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBQuote::release_bidid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBQuote.BidID)
  return _impl_.bidid_.Release();
}
inline void MDQBQuote::set_allocated_bidid(std::string* bidid) {
  if (bidid != nullptr) {
    
  } else {
    
  }
  _impl_.bidid_.SetAllocated(bidid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bidid_.IsDefault()) {
    _impl_.bidid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBQuote.BidID)
}

// int32 BidSsDetect = 20;
inline void MDQBQuote::clear_bidssdetect() {
  _impl_.bidssdetect_ = 0;
}
inline int32_t MDQBQuote::_internal_bidssdetect() const {
  return _impl_.bidssdetect_;
}
inline int32_t MDQBQuote::bidssdetect() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidSsDetect)
  return _internal_bidssdetect();
}
inline void MDQBQuote::_internal_set_bidssdetect(int32_t value) {
  
  _impl_.bidssdetect_ = value;
}
inline void MDQBQuote::set_bidssdetect(int32_t value) {
  _internal_set_bidssdetect(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidSsDetect)
}

// int64 OfferPx = 21;
inline void MDQBQuote::clear_offerpx() {
  _impl_.offerpx_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_offerpx() const {
  return _impl_.offerpx_;
}
inline int64_t MDQBQuote::offerpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferPx)
  return _internal_offerpx();
}
inline void MDQBQuote::_internal_set_offerpx(int64_t value) {
  
  _impl_.offerpx_ = value;
}
inline void MDQBQuote::set_offerpx(int64_t value) {
  _internal_set_offerpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferPx)
}

// int64 OfferSize = 22;
inline void MDQBQuote::clear_offersize() {
  _impl_.offersize_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_offersize() const {
  return _impl_.offersize_;
}
inline int64_t MDQBQuote::offersize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferSize)
  return _internal_offersize();
}
inline void MDQBQuote::_internal_set_offersize(int64_t value) {
  
  _impl_.offersize_ = value;
}
inline void MDQBQuote::set_offersize(int64_t value) {
  _internal_set_offersize(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferSize)
}

// int64 OfferYield = 23;
inline void MDQBQuote::clear_offeryield() {
  _impl_.offeryield_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_offeryield() const {
  return _impl_.offeryield_;
}
inline int64_t MDQBQuote::offeryield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferYield)
  return _internal_offeryield();
}
inline void MDQBQuote::_internal_set_offeryield(int64_t value) {
  
  _impl_.offeryield_ = value;
}
inline void MDQBQuote::set_offeryield(int64_t value) {
  _internal_set_offeryield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferYield)
}

// int64 OfferNetPrice = 24;
inline void MDQBQuote::clear_offernetprice() {
  _impl_.offernetprice_ = int64_t{0};
}
inline int64_t MDQBQuote::_internal_offernetprice() const {
  return _impl_.offernetprice_;
}
inline int64_t MDQBQuote::offernetprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferNetPrice)
  return _internal_offernetprice();
}
inline void MDQBQuote::_internal_set_offernetprice(int64_t value) {
  
  _impl_.offernetprice_ = value;
}
inline void MDQBQuote::set_offernetprice(int64_t value) {
  _internal_set_offernetprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferNetPrice)
}

// int32 OfferBargainFlag = 25;
inline void MDQBQuote::clear_offerbargainflag() {
  _impl_.offerbargainflag_ = 0;
}
inline int32_t MDQBQuote::_internal_offerbargainflag() const {
  return _impl_.offerbargainflag_;
}
inline int32_t MDQBQuote::offerbargainflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferBargainFlag)
  return _internal_offerbargainflag();
}
inline void MDQBQuote::_internal_set_offerbargainflag(int32_t value) {
  
  _impl_.offerbargainflag_ = value;
}
inline void MDQBQuote::set_offerbargainflag(int32_t value) {
  _internal_set_offerbargainflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferBargainFlag)
}

// int32 OfferRelationFlag = 26;
inline void MDQBQuote::clear_offerrelationflag() {
  _impl_.offerrelationflag_ = 0;
}
inline int32_t MDQBQuote::_internal_offerrelationflag() const {
  return _impl_.offerrelationflag_;
}
inline int32_t MDQBQuote::offerrelationflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferRelationFlag)
  return _internal_offerrelationflag();
}
inline void MDQBQuote::_internal_set_offerrelationflag(int32_t value) {
  
  _impl_.offerrelationflag_ = value;
}
inline void MDQBQuote::set_offerrelationflag(int32_t value) {
  _internal_set_offerrelationflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferRelationFlag)
}

// string OfferComment = 27;
inline void MDQBQuote::clear_offercomment() {
  _impl_.offercomment_.ClearToEmpty();
}
inline const std::string& MDQBQuote::offercomment() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferComment)
  return _internal_offercomment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBQuote::set_offercomment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.offercomment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferComment)
}
inline std::string* MDQBQuote::mutable_offercomment() {
  std::string* _s = _internal_mutable_offercomment();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBQuote.OfferComment)
  return _s;
}
inline const std::string& MDQBQuote::_internal_offercomment() const {
  return _impl_.offercomment_.Get();
}
inline void MDQBQuote::_internal_set_offercomment(const std::string& value) {
  
  _impl_.offercomment_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBQuote::_internal_mutable_offercomment() {
  
  return _impl_.offercomment_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBQuote::release_offercomment() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBQuote.OfferComment)
  return _impl_.offercomment_.Release();
}
inline void MDQBQuote::set_allocated_offercomment(std::string* offercomment) {
  if (offercomment != nullptr) {
    
  } else {
    
  }
  _impl_.offercomment_.SetAllocated(offercomment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.offercomment_.IsDefault()) {
    _impl_.offercomment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBQuote.OfferComment)
}

// string OfferID = 28;
inline void MDQBQuote::clear_offerid() {
  _impl_.offerid_.ClearToEmpty();
}
inline const std::string& MDQBQuote::offerid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferID)
  return _internal_offerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBQuote::set_offerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.offerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferID)
}
inline std::string* MDQBQuote::mutable_offerid() {
  std::string* _s = _internal_mutable_offerid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBQuote.OfferID)
  return _s;
}
inline const std::string& MDQBQuote::_internal_offerid() const {
  return _impl_.offerid_.Get();
}
inline void MDQBQuote::_internal_set_offerid(const std::string& value) {
  
  _impl_.offerid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBQuote::_internal_mutable_offerid() {
  
  return _impl_.offerid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBQuote::release_offerid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBQuote.OfferID)
  return _impl_.offerid_.Release();
}
inline void MDQBQuote::set_allocated_offerid(std::string* offerid) {
  if (offerid != nullptr) {
    
  } else {
    
  }
  _impl_.offerid_.SetAllocated(offerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.offerid_.IsDefault()) {
    _impl_.offerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBQuote.OfferID)
}

// int32 OfferSsDetect = 29;
inline void MDQBQuote::clear_offerssdetect() {
  _impl_.offerssdetect_ = 0;
}
inline int32_t MDQBQuote::_internal_offerssdetect() const {
  return _impl_.offerssdetect_;
}
inline int32_t MDQBQuote::offerssdetect() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfferSsDetect)
  return _internal_offerssdetect();
}
inline void MDQBQuote::_internal_set_offerssdetect(int32_t value) {
  
  _impl_.offerssdetect_ = value;
}
inline void MDQBQuote::set_offerssdetect(int32_t value) {
  _internal_set_offerssdetect(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfferSsDetect)
}

// int32 BrokerDataType = 30;
inline void MDQBQuote::clear_brokerdatatype() {
  _impl_.brokerdatatype_ = 0;
}
inline int32_t MDQBQuote::_internal_brokerdatatype() const {
  return _impl_.brokerdatatype_;
}
inline int32_t MDQBQuote::brokerdatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BrokerDataType)
  return _internal_brokerdatatype();
}
inline void MDQBQuote::_internal_set_brokerdatatype(int32_t value) {
  
  _impl_.brokerdatatype_ = value;
}
inline void MDQBQuote::set_brokerdatatype(int32_t value) {
  _internal_set_brokerdatatype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BrokerDataType)
}

// int32 BidExerciseFlag = 31;
inline void MDQBQuote::clear_bidexerciseflag() {
  _impl_.bidexerciseflag_ = 0;
}
inline int32_t MDQBQuote::_internal_bidexerciseflag() const {
  return _impl_.bidexerciseflag_;
}
inline int32_t MDQBQuote::bidexerciseflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.BidExerciseFlag)
  return _internal_bidexerciseflag();
}
inline void MDQBQuote::_internal_set_bidexerciseflag(int32_t value) {
  
  _impl_.bidexerciseflag_ = value;
}
inline void MDQBQuote::set_bidexerciseflag(int32_t value) {
  _internal_set_bidexerciseflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.BidExerciseFlag)
}

// int32 OfrExerciseFlag = 32;
inline void MDQBQuote::clear_ofrexerciseflag() {
  _impl_.ofrexerciseflag_ = 0;
}
inline int32_t MDQBQuote::_internal_ofrexerciseflag() const {
  return _impl_.ofrexerciseflag_;
}
inline int32_t MDQBQuote::ofrexerciseflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.OfrExerciseFlag)
  return _internal_ofrexerciseflag();
}
inline void MDQBQuote::_internal_set_ofrexerciseflag(int32_t value) {
  
  _impl_.ofrexerciseflag_ = value;
}
inline void MDQBQuote::set_ofrexerciseflag(int32_t value) {
  _internal_set_ofrexerciseflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.OfrExerciseFlag)
}

// int32 DataMultiplePowerOf10 = 33;
inline void MDQBQuote::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDQBQuote::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDQBQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBQuote.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDQBQuote::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDQBQuote::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBQuote.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDQBQuote_2eproto
