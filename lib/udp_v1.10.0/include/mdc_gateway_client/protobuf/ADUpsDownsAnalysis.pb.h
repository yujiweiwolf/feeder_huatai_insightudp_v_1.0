// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADUpsDownsAnalysis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADUpsDownsAnalysis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADUpsDownsAnalysis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADUpsDownsAnalysis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADUpsDownsAnalysis_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADUpsDownsAnalysis_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADUpsDownsAnalysis;
struct ADUpsDownsAnalysisDefaultTypeInternal;
extern ADUpsDownsAnalysisDefaultTypeInternal _ADUpsDownsAnalysis_default_instance_;
class ADUpsDownsCount;
struct ADUpsDownsCountDefaultTypeInternal;
extern ADUpsDownsCountDefaultTypeInternal _ADUpsDownsCount_default_instance_;
class ADUpsDownsLimitCount;
struct ADUpsDownsLimitCountDefaultTypeInternal;
extern ADUpsDownsLimitCountDefaultTypeInternal _ADUpsDownsLimitCount_default_instance_;
class ADUpsDownsPartitionDetail;
struct ADUpsDownsPartitionDetailDefaultTypeInternal;
extern ADUpsDownsPartitionDetailDefaultTypeInternal _ADUpsDownsPartitionDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADUpsDownsAnalysis>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADUpsDownsCount* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADUpsDownsCount>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADUpsDownsLimitCount>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADUpsDownsAnalysis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADUpsDownsAnalysis) */ {
 public:
  inline ADUpsDownsAnalysis() : ADUpsDownsAnalysis(nullptr) {}
  ~ADUpsDownsAnalysis() override;
  explicit PROTOBUF_CONSTEXPR ADUpsDownsAnalysis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADUpsDownsAnalysis(const ADUpsDownsAnalysis& from);
  ADUpsDownsAnalysis(ADUpsDownsAnalysis&& from) noexcept
    : ADUpsDownsAnalysis() {
    *this = ::std::move(from);
  }

  inline ADUpsDownsAnalysis& operator=(const ADUpsDownsAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADUpsDownsAnalysis& operator=(ADUpsDownsAnalysis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADUpsDownsAnalysis& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADUpsDownsAnalysis* internal_default_instance() {
    return reinterpret_cast<const ADUpsDownsAnalysis*>(
               &_ADUpsDownsAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADUpsDownsAnalysis& a, ADUpsDownsAnalysis& b) {
    a.Swap(&b);
  }
  inline void Swap(ADUpsDownsAnalysis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADUpsDownsAnalysis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADUpsDownsAnalysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADUpsDownsAnalysis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADUpsDownsAnalysis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADUpsDownsAnalysis& from) {
    ADUpsDownsAnalysis::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADUpsDownsAnalysis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADUpsDownsAnalysis";
  }
  protected:
  explicit ADUpsDownsAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpsDownsPartitionDetailFieldNumber = 9,
    kHTSCSecurityIDFieldNumber = 1,
    kUpsDownsCountFieldNumber = 7,
    kUpsDownsLimitCountFieldNumber = 8,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kExchangeDateFieldNumber = 10,
    kExchangeTimeFieldNumber = 11,
    kDataMultiplePowerOf10FieldNumber = 12,
  };
  // repeated .com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail UpsDownsPartitionDetail = 9;
  int upsdownspartitiondetail_size() const;
  private:
  int _internal_upsdownspartitiondetail_size() const;
  public:
  void clear_upsdownspartitiondetail();
  ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* mutable_upsdownspartitiondetail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail >*
      mutable_upsdownspartitiondetail();
  private:
  const ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail& _internal_upsdownspartitiondetail(int index) const;
  ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* _internal_add_upsdownspartitiondetail();
  public:
  const ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail& upsdownspartitiondetail(int index) const;
  ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* add_upsdownspartitiondetail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail >&
      upsdownspartitiondetail() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // .com.htsc.mdc.insight.model.ADUpsDownsCount UpsDownsCount = 7;
  bool has_upsdownscount() const;
  private:
  bool _internal_has_upsdownscount() const;
  public:
  void clear_upsdownscount();
  const ::com::htsc::mdc::insight::model::ADUpsDownsCount& upsdownscount() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADUpsDownsCount* release_upsdownscount();
  ::com::htsc::mdc::insight::model::ADUpsDownsCount* mutable_upsdownscount();
  void set_allocated_upsdownscount(::com::htsc::mdc::insight::model::ADUpsDownsCount* upsdownscount);
  private:
  const ::com::htsc::mdc::insight::model::ADUpsDownsCount& _internal_upsdownscount() const;
  ::com::htsc::mdc::insight::model::ADUpsDownsCount* _internal_mutable_upsdownscount();
  public:
  void unsafe_arena_set_allocated_upsdownscount(
      ::com::htsc::mdc::insight::model::ADUpsDownsCount* upsdownscount);
  ::com::htsc::mdc::insight::model::ADUpsDownsCount* unsafe_arena_release_upsdownscount();

  // .com.htsc.mdc.insight.model.ADUpsDownsLimitCount UpsDownsLimitCount = 8;
  bool has_upsdownslimitcount() const;
  private:
  bool _internal_has_upsdownslimitcount() const;
  public:
  void clear_upsdownslimitcount();
  const ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount& upsdownslimitcount() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* release_upsdownslimitcount();
  ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* mutable_upsdownslimitcount();
  void set_allocated_upsdownslimitcount(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* upsdownslimitcount);
  private:
  const ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount& _internal_upsdownslimitcount() const;
  ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* _internal_mutable_upsdownslimitcount();
  public:
  void unsafe_arena_set_allocated_upsdownslimitcount(
      ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* upsdownslimitcount);
  ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* unsafe_arena_release_upsdownslimitcount();

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 10;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 11;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 12;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADUpsDownsAnalysis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail > upsdownspartitiondetail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::com::htsc::mdc::insight::model::ADUpsDownsCount* upsdownscount_;
    ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* upsdownslimitcount_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADUpsDownsAnalysis_2eproto;
};
// -------------------------------------------------------------------

class ADUpsDownsCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADUpsDownsCount) */ {
 public:
  inline ADUpsDownsCount() : ADUpsDownsCount(nullptr) {}
  ~ADUpsDownsCount() override;
  explicit PROTOBUF_CONSTEXPR ADUpsDownsCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADUpsDownsCount(const ADUpsDownsCount& from);
  ADUpsDownsCount(ADUpsDownsCount&& from) noexcept
    : ADUpsDownsCount() {
    *this = ::std::move(from);
  }

  inline ADUpsDownsCount& operator=(const ADUpsDownsCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADUpsDownsCount& operator=(ADUpsDownsCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADUpsDownsCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADUpsDownsCount* internal_default_instance() {
    return reinterpret_cast<const ADUpsDownsCount*>(
               &_ADUpsDownsCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ADUpsDownsCount& a, ADUpsDownsCount& b) {
    a.Swap(&b);
  }
  inline void Swap(ADUpsDownsCount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADUpsDownsCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADUpsDownsCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADUpsDownsCount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADUpsDownsCount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADUpsDownsCount& from) {
    ADUpsDownsCount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADUpsDownsCount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADUpsDownsCount";
  }
  protected:
  explicit ADUpsDownsCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpsFieldNumber = 1,
    kDownsFieldNumber = 2,
    kEqualsFieldNumber = 3,
    kPreUpsFieldNumber = 4,
    kPreDownsFieldNumber = 5,
    kPreEqualsFieldNumber = 6,
    kUpsPercentFieldNumber = 7,
    kPreUpsPercentFieldNumber = 8,
  };
  // int32 Ups = 1;
  void clear_ups();
  int32_t ups() const;
  void set_ups(int32_t value);
  private:
  int32_t _internal_ups() const;
  void _internal_set_ups(int32_t value);
  public:

  // int32 Downs = 2;
  void clear_downs();
  int32_t downs() const;
  void set_downs(int32_t value);
  private:
  int32_t _internal_downs() const;
  void _internal_set_downs(int32_t value);
  public:

  // int32 Equals = 3;
  void clear_equals();
  int32_t equals() const;
  void set_equals(int32_t value);
  private:
  int32_t _internal_equals() const;
  void _internal_set_equals(int32_t value);
  public:

  // int32 PreUps = 4;
  void clear_preups();
  int32_t preups() const;
  void set_preups(int32_t value);
  private:
  int32_t _internal_preups() const;
  void _internal_set_preups(int32_t value);
  public:

  // int32 PreDowns = 5;
  void clear_predowns();
  int32_t predowns() const;
  void set_predowns(int32_t value);
  private:
  int32_t _internal_predowns() const;
  void _internal_set_predowns(int32_t value);
  public:

  // int32 PreEquals = 6;
  void clear_preequals();
  int32_t preequals() const;
  void set_preequals(int32_t value);
  private:
  int32_t _internal_preequals() const;
  void _internal_set_preequals(int32_t value);
  public:

  // double UpsPercent = 7;
  void clear_upspercent();
  double upspercent() const;
  void set_upspercent(double value);
  private:
  double _internal_upspercent() const;
  void _internal_set_upspercent(double value);
  public:

  // double PreUpsPercent = 8;
  void clear_preupspercent();
  double preupspercent() const;
  void set_preupspercent(double value);
  private:
  double _internal_preupspercent() const;
  void _internal_set_preupspercent(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADUpsDownsCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t ups_;
    int32_t downs_;
    int32_t equals_;
    int32_t preups_;
    int32_t predowns_;
    int32_t preequals_;
    double upspercent_;
    double preupspercent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADUpsDownsAnalysis_2eproto;
};
// -------------------------------------------------------------------

class ADUpsDownsLimitCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADUpsDownsLimitCount) */ {
 public:
  inline ADUpsDownsLimitCount() : ADUpsDownsLimitCount(nullptr) {}
  ~ADUpsDownsLimitCount() override;
  explicit PROTOBUF_CONSTEXPR ADUpsDownsLimitCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADUpsDownsLimitCount(const ADUpsDownsLimitCount& from);
  ADUpsDownsLimitCount(ADUpsDownsLimitCount&& from) noexcept
    : ADUpsDownsLimitCount() {
    *this = ::std::move(from);
  }

  inline ADUpsDownsLimitCount& operator=(const ADUpsDownsLimitCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADUpsDownsLimitCount& operator=(ADUpsDownsLimitCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADUpsDownsLimitCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADUpsDownsLimitCount* internal_default_instance() {
    return reinterpret_cast<const ADUpsDownsLimitCount*>(
               &_ADUpsDownsLimitCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ADUpsDownsLimitCount& a, ADUpsDownsLimitCount& b) {
    a.Swap(&b);
  }
  inline void Swap(ADUpsDownsLimitCount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADUpsDownsLimitCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADUpsDownsLimitCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADUpsDownsLimitCount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADUpsDownsLimitCount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADUpsDownsLimitCount& from) {
    ADUpsDownsLimitCount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADUpsDownsLimitCount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADUpsDownsLimitCount";
  }
  protected:
  explicit ADUpsDownsLimitCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoReachedLimitPxFieldNumber = 1,
    kUpLimitsFieldNumber = 2,
    kDownLimitsFieldNumber = 3,
    kPreNoReachedLimitPxFieldNumber = 4,
    kPreUpLimitsFieldNumber = 5,
    kPreDownLimitsFieldNumber = 6,
    kPreUpLimitsAverageChangePercentFieldNumber = 7,
    kUpLimitsPercentFieldNumber = 8,
  };
  // int32 NoReachedLimitPx = 1;
  void clear_noreachedlimitpx();
  int32_t noreachedlimitpx() const;
  void set_noreachedlimitpx(int32_t value);
  private:
  int32_t _internal_noreachedlimitpx() const;
  void _internal_set_noreachedlimitpx(int32_t value);
  public:

  // int32 UpLimits = 2;
  void clear_uplimits();
  int32_t uplimits() const;
  void set_uplimits(int32_t value);
  private:
  int32_t _internal_uplimits() const;
  void _internal_set_uplimits(int32_t value);
  public:

  // int32 DownLimits = 3;
  void clear_downlimits();
  int32_t downlimits() const;
  void set_downlimits(int32_t value);
  private:
  int32_t _internal_downlimits() const;
  void _internal_set_downlimits(int32_t value);
  public:

  // int32 PreNoReachedLimitPx = 4;
  void clear_prenoreachedlimitpx();
  int32_t prenoreachedlimitpx() const;
  void set_prenoreachedlimitpx(int32_t value);
  private:
  int32_t _internal_prenoreachedlimitpx() const;
  void _internal_set_prenoreachedlimitpx(int32_t value);
  public:

  // int32 PreUpLimits = 5;
  void clear_preuplimits();
  int32_t preuplimits() const;
  void set_preuplimits(int32_t value);
  private:
  int32_t _internal_preuplimits() const;
  void _internal_set_preuplimits(int32_t value);
  public:

  // int32 PreDownLimits = 6;
  void clear_predownlimits();
  int32_t predownlimits() const;
  void set_predownlimits(int32_t value);
  private:
  int32_t _internal_predownlimits() const;
  void _internal_set_predownlimits(int32_t value);
  public:

  // double PreUpLimitsAverageChangePercent = 7;
  void clear_preuplimitsaveragechangepercent();
  double preuplimitsaveragechangepercent() const;
  void set_preuplimitsaveragechangepercent(double value);
  private:
  double _internal_preuplimitsaveragechangepercent() const;
  void _internal_set_preuplimitsaveragechangepercent(double value);
  public:

  // double UpLimitsPercent = 8;
  void clear_uplimitspercent();
  double uplimitspercent() const;
  void set_uplimitspercent(double value);
  private:
  double _internal_uplimitspercent() const;
  void _internal_set_uplimitspercent(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADUpsDownsLimitCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t noreachedlimitpx_;
    int32_t uplimits_;
    int32_t downlimits_;
    int32_t prenoreachedlimitpx_;
    int32_t preuplimits_;
    int32_t predownlimits_;
    double preuplimitsaveragechangepercent_;
    double uplimitspercent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADUpsDownsAnalysis_2eproto;
};
// -------------------------------------------------------------------

class ADUpsDownsPartitionDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail) */ {
 public:
  inline ADUpsDownsPartitionDetail() : ADUpsDownsPartitionDetail(nullptr) {}
  ~ADUpsDownsPartitionDetail() override;
  explicit PROTOBUF_CONSTEXPR ADUpsDownsPartitionDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADUpsDownsPartitionDetail(const ADUpsDownsPartitionDetail& from);
  ADUpsDownsPartitionDetail(ADUpsDownsPartitionDetail&& from) noexcept
    : ADUpsDownsPartitionDetail() {
    *this = ::std::move(from);
  }

  inline ADUpsDownsPartitionDetail& operator=(const ADUpsDownsPartitionDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADUpsDownsPartitionDetail& operator=(ADUpsDownsPartitionDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADUpsDownsPartitionDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADUpsDownsPartitionDetail* internal_default_instance() {
    return reinterpret_cast<const ADUpsDownsPartitionDetail*>(
               &_ADUpsDownsPartitionDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ADUpsDownsPartitionDetail& a, ADUpsDownsPartitionDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ADUpsDownsPartitionDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADUpsDownsPartitionDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADUpsDownsPartitionDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADUpsDownsPartitionDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADUpsDownsPartitionDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADUpsDownsPartitionDetail& from) {
    ADUpsDownsPartitionDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADUpsDownsPartitionDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail";
  }
  protected:
  explicit ADUpsDownsPartitionDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 1,
    kPartitionChangePercentFieldNumber = 2,
  };
  // int32 Numbers = 1;
  void clear_numbers();
  int32_t numbers() const;
  void set_numbers(int32_t value);
  private:
  int32_t _internal_numbers() const;
  void _internal_set_numbers(int32_t value);
  public:

  // int32 PartitionChangePercent = 2;
  void clear_partitionchangepercent();
  int32_t partitionchangepercent() const;
  void set_partitionchangepercent(int32_t value);
  private:
  int32_t _internal_partitionchangepercent() const;
  void _internal_set_partitionchangepercent(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t numbers_;
    int32_t partitionchangepercent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADUpsDownsAnalysis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADUpsDownsAnalysis

// string HTSCSecurityID = 1;
inline void ADUpsDownsAnalysis::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADUpsDownsAnalysis::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADUpsDownsAnalysis::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID)
}
inline std::string* ADUpsDownsAnalysis::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID)
  return _s;
}
inline const std::string& ADUpsDownsAnalysis::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADUpsDownsAnalysis::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADUpsDownsAnalysis::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADUpsDownsAnalysis::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADUpsDownsAnalysis::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADUpsDownsAnalysis::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t ADUpsDownsAnalysis::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t ADUpsDownsAnalysis::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.MDDate)
  return _internal_mddate();
}
inline void ADUpsDownsAnalysis::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void ADUpsDownsAnalysis::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.MDDate)
}

// int32 MDTime = 3;
inline void ADUpsDownsAnalysis::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t ADUpsDownsAnalysis::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t ADUpsDownsAnalysis::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.MDTime)
  return _internal_mdtime();
}
inline void ADUpsDownsAnalysis::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void ADUpsDownsAnalysis::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADUpsDownsAnalysis::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t ADUpsDownsAnalysis::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t ADUpsDownsAnalysis::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.DataTimestamp)
  return _internal_datatimestamp();
}
inline void ADUpsDownsAnalysis::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void ADUpsDownsAnalysis::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADUpsDownsAnalysis::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADUpsDownsAnalysis::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADUpsDownsAnalysis::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.securityIDSource)
  return _internal_securityidsource();
}
inline void ADUpsDownsAnalysis::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void ADUpsDownsAnalysis::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADUpsDownsAnalysis::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADUpsDownsAnalysis::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType ADUpsDownsAnalysis::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.securityType)
  return _internal_securitytype();
}
inline void ADUpsDownsAnalysis::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void ADUpsDownsAnalysis::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.securityType)
}

// .com.htsc.mdc.insight.model.ADUpsDownsCount UpsDownsCount = 7;
inline bool ADUpsDownsAnalysis::_internal_has_upsdownscount() const {
  return this != internal_default_instance() && _impl_.upsdownscount_ != nullptr;
}
inline bool ADUpsDownsAnalysis::has_upsdownscount() const {
  return _internal_has_upsdownscount();
}
inline void ADUpsDownsAnalysis::clear_upsdownscount() {
  if (GetArenaForAllocation() == nullptr && _impl_.upsdownscount_ != nullptr) {
    delete _impl_.upsdownscount_;
  }
  _impl_.upsdownscount_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADUpsDownsCount& ADUpsDownsAnalysis::_internal_upsdownscount() const {
  const ::com::htsc::mdc::insight::model::ADUpsDownsCount* p = _impl_.upsdownscount_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADUpsDownsCount&>(
      ::com::htsc::mdc::insight::model::_ADUpsDownsCount_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADUpsDownsCount& ADUpsDownsAnalysis::upsdownscount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsCount)
  return _internal_upsdownscount();
}
inline void ADUpsDownsAnalysis::unsafe_arena_set_allocated_upsdownscount(
    ::com::htsc::mdc::insight::model::ADUpsDownsCount* upsdownscount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upsdownscount_);
  }
  _impl_.upsdownscount_ = upsdownscount;
  if (upsdownscount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsCount)
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsCount* ADUpsDownsAnalysis::release_upsdownscount() {
  
  ::com::htsc::mdc::insight::model::ADUpsDownsCount* temp = _impl_.upsdownscount_;
  _impl_.upsdownscount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsCount* ADUpsDownsAnalysis::unsafe_arena_release_upsdownscount() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsCount)
  
  ::com::htsc::mdc::insight::model::ADUpsDownsCount* temp = _impl_.upsdownscount_;
  _impl_.upsdownscount_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsCount* ADUpsDownsAnalysis::_internal_mutable_upsdownscount() {
  
  if (_impl_.upsdownscount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADUpsDownsCount>(GetArenaForAllocation());
    _impl_.upsdownscount_ = p;
  }
  return _impl_.upsdownscount_;
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsCount* ADUpsDownsAnalysis::mutable_upsdownscount() {
  ::com::htsc::mdc::insight::model::ADUpsDownsCount* _msg = _internal_mutable_upsdownscount();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsCount)
  return _msg;
}
inline void ADUpsDownsAnalysis::set_allocated_upsdownscount(::com::htsc::mdc::insight::model::ADUpsDownsCount* upsdownscount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upsdownscount_;
  }
  if (upsdownscount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upsdownscount);
    if (message_arena != submessage_arena) {
      upsdownscount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upsdownscount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upsdownscount_ = upsdownscount;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsCount)
}

// .com.htsc.mdc.insight.model.ADUpsDownsLimitCount UpsDownsLimitCount = 8;
inline bool ADUpsDownsAnalysis::_internal_has_upsdownslimitcount() const {
  return this != internal_default_instance() && _impl_.upsdownslimitcount_ != nullptr;
}
inline bool ADUpsDownsAnalysis::has_upsdownslimitcount() const {
  return _internal_has_upsdownslimitcount();
}
inline void ADUpsDownsAnalysis::clear_upsdownslimitcount() {
  if (GetArenaForAllocation() == nullptr && _impl_.upsdownslimitcount_ != nullptr) {
    delete _impl_.upsdownslimitcount_;
  }
  _impl_.upsdownslimitcount_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount& ADUpsDownsAnalysis::_internal_upsdownslimitcount() const {
  const ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* p = _impl_.upsdownslimitcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount&>(
      ::com::htsc::mdc::insight::model::_ADUpsDownsLimitCount_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount& ADUpsDownsAnalysis::upsdownslimitcount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsLimitCount)
  return _internal_upsdownslimitcount();
}
inline void ADUpsDownsAnalysis::unsafe_arena_set_allocated_upsdownslimitcount(
    ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* upsdownslimitcount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upsdownslimitcount_);
  }
  _impl_.upsdownslimitcount_ = upsdownslimitcount;
  if (upsdownslimitcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsLimitCount)
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* ADUpsDownsAnalysis::release_upsdownslimitcount() {
  
  ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* temp = _impl_.upsdownslimitcount_;
  _impl_.upsdownslimitcount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* ADUpsDownsAnalysis::unsafe_arena_release_upsdownslimitcount() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsLimitCount)
  
  ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* temp = _impl_.upsdownslimitcount_;
  _impl_.upsdownslimitcount_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* ADUpsDownsAnalysis::_internal_mutable_upsdownslimitcount() {
  
  if (_impl_.upsdownslimitcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADUpsDownsLimitCount>(GetArenaForAllocation());
    _impl_.upsdownslimitcount_ = p;
  }
  return _impl_.upsdownslimitcount_;
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* ADUpsDownsAnalysis::mutable_upsdownslimitcount() {
  ::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* _msg = _internal_mutable_upsdownslimitcount();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsLimitCount)
  return _msg;
}
inline void ADUpsDownsAnalysis::set_allocated_upsdownslimitcount(::com::htsc::mdc::insight::model::ADUpsDownsLimitCount* upsdownslimitcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upsdownslimitcount_;
  }
  if (upsdownslimitcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upsdownslimitcount);
    if (message_arena != submessage_arena) {
      upsdownslimitcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upsdownslimitcount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upsdownslimitcount_ = upsdownslimitcount;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsLimitCount)
}

// repeated .com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail UpsDownsPartitionDetail = 9;
inline int ADUpsDownsAnalysis::_internal_upsdownspartitiondetail_size() const {
  return _impl_.upsdownspartitiondetail_.size();
}
inline int ADUpsDownsAnalysis::upsdownspartitiondetail_size() const {
  return _internal_upsdownspartitiondetail_size();
}
inline void ADUpsDownsAnalysis::clear_upsdownspartitiondetail() {
  _impl_.upsdownspartitiondetail_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* ADUpsDownsAnalysis::mutable_upsdownspartitiondetail(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsPartitionDetail)
  return _impl_.upsdownspartitiondetail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail >*
ADUpsDownsAnalysis::mutable_upsdownspartitiondetail() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsPartitionDetail)
  return &_impl_.upsdownspartitiondetail_;
}
inline const ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail& ADUpsDownsAnalysis::_internal_upsdownspartitiondetail(int index) const {
  return _impl_.upsdownspartitiondetail_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail& ADUpsDownsAnalysis::upsdownspartitiondetail(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsPartitionDetail)
  return _internal_upsdownspartitiondetail(index);
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* ADUpsDownsAnalysis::_internal_add_upsdownspartitiondetail() {
  return _impl_.upsdownspartitiondetail_.Add();
}
inline ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* ADUpsDownsAnalysis::add_upsdownspartitiondetail() {
  ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail* _add = _internal_add_upsdownspartitiondetail();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsPartitionDetail)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADUpsDownsPartitionDetail >&
ADUpsDownsAnalysis::upsdownspartitiondetail() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.UpsDownsPartitionDetail)
  return _impl_.upsdownspartitiondetail_;
}

// int32 ExchangeDate = 10;
inline void ADUpsDownsAnalysis::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t ADUpsDownsAnalysis::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t ADUpsDownsAnalysis::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.ExchangeDate)
  return _internal_exchangedate();
}
inline void ADUpsDownsAnalysis::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void ADUpsDownsAnalysis::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.ExchangeDate)
}

// int32 ExchangeTime = 11;
inline void ADUpsDownsAnalysis::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t ADUpsDownsAnalysis::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t ADUpsDownsAnalysis::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.ExchangeTime)
  return _internal_exchangetime();
}
inline void ADUpsDownsAnalysis::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void ADUpsDownsAnalysis::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.ExchangeTime)
}

// int32 DataMultiplePowerOf10 = 12;
inline void ADUpsDownsAnalysis::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t ADUpsDownsAnalysis::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t ADUpsDownsAnalysis::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void ADUpsDownsAnalysis::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void ADUpsDownsAnalysis::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsAnalysis.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// ADUpsDownsCount

// int32 Ups = 1;
inline void ADUpsDownsCount::clear_ups() {
  _impl_.ups_ = 0;
}
inline int32_t ADUpsDownsCount::_internal_ups() const {
  return _impl_.ups_;
}
inline int32_t ADUpsDownsCount::ups() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsCount.Ups)
  return _internal_ups();
}
inline void ADUpsDownsCount::_internal_set_ups(int32_t value) {
  
  _impl_.ups_ = value;
}
inline void ADUpsDownsCount::set_ups(int32_t value) {
  _internal_set_ups(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsCount.Ups)
}

// int32 Downs = 2;
inline void ADUpsDownsCount::clear_downs() {
  _impl_.downs_ = 0;
}
inline int32_t ADUpsDownsCount::_internal_downs() const {
  return _impl_.downs_;
}
inline int32_t ADUpsDownsCount::downs() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsCount.Downs)
  return _internal_downs();
}
inline void ADUpsDownsCount::_internal_set_downs(int32_t value) {
  
  _impl_.downs_ = value;
}
inline void ADUpsDownsCount::set_downs(int32_t value) {
  _internal_set_downs(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsCount.Downs)
}

// int32 Equals = 3;
inline void ADUpsDownsCount::clear_equals() {
  _impl_.equals_ = 0;
}
inline int32_t ADUpsDownsCount::_internal_equals() const {
  return _impl_.equals_;
}
inline int32_t ADUpsDownsCount::equals() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsCount.Equals)
  return _internal_equals();
}
inline void ADUpsDownsCount::_internal_set_equals(int32_t value) {
  
  _impl_.equals_ = value;
}
inline void ADUpsDownsCount::set_equals(int32_t value) {
  _internal_set_equals(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsCount.Equals)
}

// int32 PreUps = 4;
inline void ADUpsDownsCount::clear_preups() {
  _impl_.preups_ = 0;
}
inline int32_t ADUpsDownsCount::_internal_preups() const {
  return _impl_.preups_;
}
inline int32_t ADUpsDownsCount::preups() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsCount.PreUps)
  return _internal_preups();
}
inline void ADUpsDownsCount::_internal_set_preups(int32_t value) {
  
  _impl_.preups_ = value;
}
inline void ADUpsDownsCount::set_preups(int32_t value) {
  _internal_set_preups(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsCount.PreUps)
}

// int32 PreDowns = 5;
inline void ADUpsDownsCount::clear_predowns() {
  _impl_.predowns_ = 0;
}
inline int32_t ADUpsDownsCount::_internal_predowns() const {
  return _impl_.predowns_;
}
inline int32_t ADUpsDownsCount::predowns() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsCount.PreDowns)
  return _internal_predowns();
}
inline void ADUpsDownsCount::_internal_set_predowns(int32_t value) {
  
  _impl_.predowns_ = value;
}
inline void ADUpsDownsCount::set_predowns(int32_t value) {
  _internal_set_predowns(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsCount.PreDowns)
}

// int32 PreEquals = 6;
inline void ADUpsDownsCount::clear_preequals() {
  _impl_.preequals_ = 0;
}
inline int32_t ADUpsDownsCount::_internal_preequals() const {
  return _impl_.preequals_;
}
inline int32_t ADUpsDownsCount::preequals() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsCount.PreEquals)
  return _internal_preequals();
}
inline void ADUpsDownsCount::_internal_set_preequals(int32_t value) {
  
  _impl_.preequals_ = value;
}
inline void ADUpsDownsCount::set_preequals(int32_t value) {
  _internal_set_preequals(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsCount.PreEquals)
}

// double UpsPercent = 7;
inline void ADUpsDownsCount::clear_upspercent() {
  _impl_.upspercent_ = 0;
}
inline double ADUpsDownsCount::_internal_upspercent() const {
  return _impl_.upspercent_;
}
inline double ADUpsDownsCount::upspercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsCount.UpsPercent)
  return _internal_upspercent();
}
inline void ADUpsDownsCount::_internal_set_upspercent(double value) {
  
  _impl_.upspercent_ = value;
}
inline void ADUpsDownsCount::set_upspercent(double value) {
  _internal_set_upspercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsCount.UpsPercent)
}

// double PreUpsPercent = 8;
inline void ADUpsDownsCount::clear_preupspercent() {
  _impl_.preupspercent_ = 0;
}
inline double ADUpsDownsCount::_internal_preupspercent() const {
  return _impl_.preupspercent_;
}
inline double ADUpsDownsCount::preupspercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsCount.PreUpsPercent)
  return _internal_preupspercent();
}
inline void ADUpsDownsCount::_internal_set_preupspercent(double value) {
  
  _impl_.preupspercent_ = value;
}
inline void ADUpsDownsCount::set_preupspercent(double value) {
  _internal_set_preupspercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsCount.PreUpsPercent)
}

// -------------------------------------------------------------------

// ADUpsDownsLimitCount

// int32 NoReachedLimitPx = 1;
inline void ADUpsDownsLimitCount::clear_noreachedlimitpx() {
  _impl_.noreachedlimitpx_ = 0;
}
inline int32_t ADUpsDownsLimitCount::_internal_noreachedlimitpx() const {
  return _impl_.noreachedlimitpx_;
}
inline int32_t ADUpsDownsLimitCount::noreachedlimitpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.NoReachedLimitPx)
  return _internal_noreachedlimitpx();
}
inline void ADUpsDownsLimitCount::_internal_set_noreachedlimitpx(int32_t value) {
  
  _impl_.noreachedlimitpx_ = value;
}
inline void ADUpsDownsLimitCount::set_noreachedlimitpx(int32_t value) {
  _internal_set_noreachedlimitpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.NoReachedLimitPx)
}

// int32 UpLimits = 2;
inline void ADUpsDownsLimitCount::clear_uplimits() {
  _impl_.uplimits_ = 0;
}
inline int32_t ADUpsDownsLimitCount::_internal_uplimits() const {
  return _impl_.uplimits_;
}
inline int32_t ADUpsDownsLimitCount::uplimits() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.UpLimits)
  return _internal_uplimits();
}
inline void ADUpsDownsLimitCount::_internal_set_uplimits(int32_t value) {
  
  _impl_.uplimits_ = value;
}
inline void ADUpsDownsLimitCount::set_uplimits(int32_t value) {
  _internal_set_uplimits(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.UpLimits)
}

// int32 DownLimits = 3;
inline void ADUpsDownsLimitCount::clear_downlimits() {
  _impl_.downlimits_ = 0;
}
inline int32_t ADUpsDownsLimitCount::_internal_downlimits() const {
  return _impl_.downlimits_;
}
inline int32_t ADUpsDownsLimitCount::downlimits() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.DownLimits)
  return _internal_downlimits();
}
inline void ADUpsDownsLimitCount::_internal_set_downlimits(int32_t value) {
  
  _impl_.downlimits_ = value;
}
inline void ADUpsDownsLimitCount::set_downlimits(int32_t value) {
  _internal_set_downlimits(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.DownLimits)
}

// int32 PreNoReachedLimitPx = 4;
inline void ADUpsDownsLimitCount::clear_prenoreachedlimitpx() {
  _impl_.prenoreachedlimitpx_ = 0;
}
inline int32_t ADUpsDownsLimitCount::_internal_prenoreachedlimitpx() const {
  return _impl_.prenoreachedlimitpx_;
}
inline int32_t ADUpsDownsLimitCount::prenoreachedlimitpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.PreNoReachedLimitPx)
  return _internal_prenoreachedlimitpx();
}
inline void ADUpsDownsLimitCount::_internal_set_prenoreachedlimitpx(int32_t value) {
  
  _impl_.prenoreachedlimitpx_ = value;
}
inline void ADUpsDownsLimitCount::set_prenoreachedlimitpx(int32_t value) {
  _internal_set_prenoreachedlimitpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.PreNoReachedLimitPx)
}

// int32 PreUpLimits = 5;
inline void ADUpsDownsLimitCount::clear_preuplimits() {
  _impl_.preuplimits_ = 0;
}
inline int32_t ADUpsDownsLimitCount::_internal_preuplimits() const {
  return _impl_.preuplimits_;
}
inline int32_t ADUpsDownsLimitCount::preuplimits() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.PreUpLimits)
  return _internal_preuplimits();
}
inline void ADUpsDownsLimitCount::_internal_set_preuplimits(int32_t value) {
  
  _impl_.preuplimits_ = value;
}
inline void ADUpsDownsLimitCount::set_preuplimits(int32_t value) {
  _internal_set_preuplimits(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.PreUpLimits)
}

// int32 PreDownLimits = 6;
inline void ADUpsDownsLimitCount::clear_predownlimits() {
  _impl_.predownlimits_ = 0;
}
inline int32_t ADUpsDownsLimitCount::_internal_predownlimits() const {
  return _impl_.predownlimits_;
}
inline int32_t ADUpsDownsLimitCount::predownlimits() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.PreDownLimits)
  return _internal_predownlimits();
}
inline void ADUpsDownsLimitCount::_internal_set_predownlimits(int32_t value) {
  
  _impl_.predownlimits_ = value;
}
inline void ADUpsDownsLimitCount::set_predownlimits(int32_t value) {
  _internal_set_predownlimits(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.PreDownLimits)
}

// double PreUpLimitsAverageChangePercent = 7;
inline void ADUpsDownsLimitCount::clear_preuplimitsaveragechangepercent() {
  _impl_.preuplimitsaveragechangepercent_ = 0;
}
inline double ADUpsDownsLimitCount::_internal_preuplimitsaveragechangepercent() const {
  return _impl_.preuplimitsaveragechangepercent_;
}
inline double ADUpsDownsLimitCount::preuplimitsaveragechangepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.PreUpLimitsAverageChangePercent)
  return _internal_preuplimitsaveragechangepercent();
}
inline void ADUpsDownsLimitCount::_internal_set_preuplimitsaveragechangepercent(double value) {
  
  _impl_.preuplimitsaveragechangepercent_ = value;
}
inline void ADUpsDownsLimitCount::set_preuplimitsaveragechangepercent(double value) {
  _internal_set_preuplimitsaveragechangepercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.PreUpLimitsAverageChangePercent)
}

// double UpLimitsPercent = 8;
inline void ADUpsDownsLimitCount::clear_uplimitspercent() {
  _impl_.uplimitspercent_ = 0;
}
inline double ADUpsDownsLimitCount::_internal_uplimitspercent() const {
  return _impl_.uplimitspercent_;
}
inline double ADUpsDownsLimitCount::uplimitspercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.UpLimitsPercent)
  return _internal_uplimitspercent();
}
inline void ADUpsDownsLimitCount::_internal_set_uplimitspercent(double value) {
  
  _impl_.uplimitspercent_ = value;
}
inline void ADUpsDownsLimitCount::set_uplimitspercent(double value) {
  _internal_set_uplimitspercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsLimitCount.UpLimitsPercent)
}

// -------------------------------------------------------------------

// ADUpsDownsPartitionDetail

// int32 Numbers = 1;
inline void ADUpsDownsPartitionDetail::clear_numbers() {
  _impl_.numbers_ = 0;
}
inline int32_t ADUpsDownsPartitionDetail::_internal_numbers() const {
  return _impl_.numbers_;
}
inline int32_t ADUpsDownsPartitionDetail::numbers() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail.Numbers)
  return _internal_numbers();
}
inline void ADUpsDownsPartitionDetail::_internal_set_numbers(int32_t value) {
  
  _impl_.numbers_ = value;
}
inline void ADUpsDownsPartitionDetail::set_numbers(int32_t value) {
  _internal_set_numbers(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail.Numbers)
}

// int32 PartitionChangePercent = 2;
inline void ADUpsDownsPartitionDetail::clear_partitionchangepercent() {
  _impl_.partitionchangepercent_ = 0;
}
inline int32_t ADUpsDownsPartitionDetail::_internal_partitionchangepercent() const {
  return _impl_.partitionchangepercent_;
}
inline int32_t ADUpsDownsPartitionDetail::partitionchangepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail.PartitionChangePercent)
  return _internal_partitionchangepercent();
}
inline void ADUpsDownsPartitionDetail::_internal_set_partitionchangepercent(int32_t value) {
  
  _impl_.partitionchangepercent_ = value;
}
inline void ADUpsDownsPartitionDetail::set_partitionchangepercent(int32_t value) {
  _internal_set_partitionchangepercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADUpsDownsPartitionDetail.PartitionChangePercent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADUpsDownsAnalysis_2eproto
