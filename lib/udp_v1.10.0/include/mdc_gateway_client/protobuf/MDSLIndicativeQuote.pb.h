// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDSLIndicativeQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDSLIndicativeQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDSLIndicativeQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDSLIndicativeQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDSLIndicativeQuote_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDSLIndicativeQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDSLIndicativeQuote;
struct MDSLIndicativeQuoteDefaultTypeInternal;
extern MDSLIndicativeQuoteDefaultTypeInternal _MDSLIndicativeQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDSLIndicativeQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSLIndicativeQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDSLIndicativeQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDSLIndicativeQuote) */ {
 public:
  inline MDSLIndicativeQuote() : MDSLIndicativeQuote(nullptr) {}
  ~MDSLIndicativeQuote() override;
  explicit PROTOBUF_CONSTEXPR MDSLIndicativeQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDSLIndicativeQuote(const MDSLIndicativeQuote& from);
  MDSLIndicativeQuote(MDSLIndicativeQuote&& from) noexcept
    : MDSLIndicativeQuote() {
    *this = ::std::move(from);
  }

  inline MDSLIndicativeQuote& operator=(const MDSLIndicativeQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDSLIndicativeQuote& operator=(MDSLIndicativeQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDSLIndicativeQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDSLIndicativeQuote* internal_default_instance() {
    return reinterpret_cast<const MDSLIndicativeQuote*>(
               &_MDSLIndicativeQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDSLIndicativeQuote& a, MDSLIndicativeQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDSLIndicativeQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDSLIndicativeQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDSLIndicativeQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDSLIndicativeQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDSLIndicativeQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDSLIndicativeQuote& from) {
    MDSLIndicativeQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDSLIndicativeQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDSLIndicativeQuote";
  }
  protected:
  explicit MDSLIndicativeQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kHtscLendTermsFieldNumber = 11,
    kHtscBorrowTermsFieldNumber = 14,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kLastPxFieldNumber = 8,
    kPreClosePxFieldNumber = 9,
    kHtscLendAmountFieldNumber = 10,
    kHtscBestLendRateFieldNumber = 12,
    kHtscBorrowAmountFieldNumber = 13,
    kHtscBorrowRateFieldNumber = 15,
    kTradeVolumeFieldNumber = 16,
    kTradeMoneyFieldNumber = 17,
    kPreTradeVolumeFieldNumber = 18,
    kPreTradeMoneyFieldNumber = 19,
    kDataMultiplePowerOf10FieldNumber = 20,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // string HtscLendTerms = 11;
  void clear_htsclendterms();
  const std::string& htsclendterms() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htsclendterms(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htsclendterms();
  PROTOBUF_NODISCARD std::string* release_htsclendterms();
  void set_allocated_htsclendterms(std::string* htsclendterms);
  private:
  const std::string& _internal_htsclendterms() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htsclendterms(const std::string& value);
  std::string* _internal_mutable_htsclendterms();
  public:

  // string HtscBorrowTerms = 14;
  void clear_htscborrowterms();
  const std::string& htscborrowterms() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscborrowterms(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscborrowterms();
  PROTOBUF_NODISCARD std::string* release_htscborrowterms();
  void set_allocated_htscborrowterms(std::string* htscborrowterms);
  private:
  const std::string& _internal_htscborrowterms() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscborrowterms(const std::string& value);
  std::string* _internal_mutable_htscborrowterms();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 LastPx = 8;
  void clear_lastpx();
  int64_t lastpx() const;
  void set_lastpx(int64_t value);
  private:
  int64_t _internal_lastpx() const;
  void _internal_set_lastpx(int64_t value);
  public:

  // int64 PreClosePx = 9;
  void clear_preclosepx();
  int64_t preclosepx() const;
  void set_preclosepx(int64_t value);
  private:
  int64_t _internal_preclosepx() const;
  void _internal_set_preclosepx(int64_t value);
  public:

  // int64 HtscLendAmount = 10;
  void clear_htsclendamount();
  int64_t htsclendamount() const;
  void set_htsclendamount(int64_t value);
  private:
  int64_t _internal_htsclendamount() const;
  void _internal_set_htsclendamount(int64_t value);
  public:

  // int64 HtscBestLendRate = 12;
  void clear_htscbestlendrate();
  int64_t htscbestlendrate() const;
  void set_htscbestlendrate(int64_t value);
  private:
  int64_t _internal_htscbestlendrate() const;
  void _internal_set_htscbestlendrate(int64_t value);
  public:

  // int64 HtscBorrowAmount = 13;
  void clear_htscborrowamount();
  int64_t htscborrowamount() const;
  void set_htscborrowamount(int64_t value);
  private:
  int64_t _internal_htscborrowamount() const;
  void _internal_set_htscborrowamount(int64_t value);
  public:

  // int64 HtscBorrowRate = 15;
  void clear_htscborrowrate();
  int64_t htscborrowrate() const;
  void set_htscborrowrate(int64_t value);
  private:
  int64_t _internal_htscborrowrate() const;
  void _internal_set_htscborrowrate(int64_t value);
  public:

  // int64 TradeVolume = 16;
  void clear_tradevolume();
  int64_t tradevolume() const;
  void set_tradevolume(int64_t value);
  private:
  int64_t _internal_tradevolume() const;
  void _internal_set_tradevolume(int64_t value);
  public:

  // int64 TradeMoney = 17;
  void clear_trademoney();
  int64_t trademoney() const;
  void set_trademoney(int64_t value);
  private:
  int64_t _internal_trademoney() const;
  void _internal_set_trademoney(int64_t value);
  public:

  // int64 PreTradeVolume = 18;
  void clear_pretradevolume();
  int64_t pretradevolume() const;
  void set_pretradevolume(int64_t value);
  private:
  int64_t _internal_pretradevolume() const;
  void _internal_set_pretradevolume(int64_t value);
  public:

  // int64 PreTradeMoney = 19;
  void clear_pretrademoney();
  int64_t pretrademoney() const;
  void set_pretrademoney(int64_t value);
  private:
  int64_t _internal_pretrademoney() const;
  void _internal_set_pretrademoney(int64_t value);
  public:

  // int32 DataMultiplePowerOf10 = 20;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDSLIndicativeQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htsclendterms_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscborrowterms_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t lastpx_;
    int64_t preclosepx_;
    int64_t htsclendamount_;
    int64_t htscbestlendrate_;
    int64_t htscborrowamount_;
    int64_t htscborrowrate_;
    int64_t tradevolume_;
    int64_t trademoney_;
    int64_t pretradevolume_;
    int64_t pretrademoney_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDSLIndicativeQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDSLIndicativeQuote

// string HTSCSecurityID = 1;
inline void MDSLIndicativeQuote::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDSLIndicativeQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDSLIndicativeQuote::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
}
inline std::string* MDSLIndicativeQuote::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
  return _s;
}
inline const std::string& MDSLIndicativeQuote::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDSLIndicativeQuote::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDSLIndicativeQuote::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDSLIndicativeQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDSLIndicativeQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDSLIndicativeQuote::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDSLIndicativeQuote::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDSLIndicativeQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.MDDate)
  return _internal_mddate();
}
inline void MDSLIndicativeQuote::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDSLIndicativeQuote::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDSLIndicativeQuote::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDSLIndicativeQuote::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDSLIndicativeQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.MDTime)
  return _internal_mdtime();
}
inline void MDSLIndicativeQuote::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDSLIndicativeQuote::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDSLIndicativeQuote::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDSLIndicativeQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDSLIndicativeQuote::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDSLIndicativeQuote::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDSLIndicativeQuote::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDSLIndicativeQuote::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDSLIndicativeQuote::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
}
inline std::string* MDSLIndicativeQuote::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
  return _s;
}
inline const std::string& MDSLIndicativeQuote::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDSLIndicativeQuote::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDSLIndicativeQuote::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDSLIndicativeQuote::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDSLIndicativeQuote::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDSLIndicativeQuote::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDSLIndicativeQuote::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDSLIndicativeQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.securityIDSource)
  return _internal_securityidsource();
}
inline void MDSLIndicativeQuote::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDSLIndicativeQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDSLIndicativeQuote::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDSLIndicativeQuote::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDSLIndicativeQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.securityType)
  return _internal_securitytype();
}
inline void MDSLIndicativeQuote::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDSLIndicativeQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.securityType)
}

// int64 LastPx = 8;
inline void MDSLIndicativeQuote::clear_lastpx() {
  _impl_.lastpx_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_lastpx() const {
  return _impl_.lastpx_;
}
inline int64_t MDSLIndicativeQuote::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.LastPx)
  return _internal_lastpx();
}
inline void MDSLIndicativeQuote::_internal_set_lastpx(int64_t value) {
  
  _impl_.lastpx_ = value;
}
inline void MDSLIndicativeQuote::set_lastpx(int64_t value) {
  _internal_set_lastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.LastPx)
}

// int64 PreClosePx = 9;
inline void MDSLIndicativeQuote::clear_preclosepx() {
  _impl_.preclosepx_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_preclosepx() const {
  return _impl_.preclosepx_;
}
inline int64_t MDSLIndicativeQuote::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreClosePx)
  return _internal_preclosepx();
}
inline void MDSLIndicativeQuote::_internal_set_preclosepx(int64_t value) {
  
  _impl_.preclosepx_ = value;
}
inline void MDSLIndicativeQuote::set_preclosepx(int64_t value) {
  _internal_set_preclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreClosePx)
}

// int64 HtscLendAmount = 10;
inline void MDSLIndicativeQuote::clear_htsclendamount() {
  _impl_.htsclendamount_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_htsclendamount() const {
  return _impl_.htsclendamount_;
}
inline int64_t MDSLIndicativeQuote::htsclendamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendAmount)
  return _internal_htsclendamount();
}
inline void MDSLIndicativeQuote::_internal_set_htsclendamount(int64_t value) {
  
  _impl_.htsclendamount_ = value;
}
inline void MDSLIndicativeQuote::set_htsclendamount(int64_t value) {
  _internal_set_htsclendamount(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendAmount)
}

// string HtscLendTerms = 11;
inline void MDSLIndicativeQuote::clear_htsclendterms() {
  _impl_.htsclendterms_.ClearToEmpty();
}
inline const std::string& MDSLIndicativeQuote::htsclendterms() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
  return _internal_htsclendterms();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDSLIndicativeQuote::set_htsclendterms(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htsclendterms_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
}
inline std::string* MDSLIndicativeQuote::mutable_htsclendterms() {
  std::string* _s = _internal_mutable_htsclendterms();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
  return _s;
}
inline const std::string& MDSLIndicativeQuote::_internal_htsclendterms() const {
  return _impl_.htsclendterms_.Get();
}
inline void MDSLIndicativeQuote::_internal_set_htsclendterms(const std::string& value) {
  
  _impl_.htsclendterms_.Set(value, GetArenaForAllocation());
}
inline std::string* MDSLIndicativeQuote::_internal_mutable_htsclendterms() {
  
  return _impl_.htsclendterms_.Mutable(GetArenaForAllocation());
}
inline std::string* MDSLIndicativeQuote::release_htsclendterms() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
  return _impl_.htsclendterms_.Release();
}
inline void MDSLIndicativeQuote::set_allocated_htsclendterms(std::string* htsclendterms) {
  if (htsclendterms != nullptr) {
    
  } else {
    
  }
  _impl_.htsclendterms_.SetAllocated(htsclendterms, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htsclendterms_.IsDefault()) {
    _impl_.htsclendterms_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscLendTerms)
}

// int64 HtscBestLendRate = 12;
inline void MDSLIndicativeQuote::clear_htscbestlendrate() {
  _impl_.htscbestlendrate_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_htscbestlendrate() const {
  return _impl_.htscbestlendrate_;
}
inline int64_t MDSLIndicativeQuote::htscbestlendrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBestLendRate)
  return _internal_htscbestlendrate();
}
inline void MDSLIndicativeQuote::_internal_set_htscbestlendrate(int64_t value) {
  
  _impl_.htscbestlendrate_ = value;
}
inline void MDSLIndicativeQuote::set_htscbestlendrate(int64_t value) {
  _internal_set_htscbestlendrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBestLendRate)
}

// int64 HtscBorrowAmount = 13;
inline void MDSLIndicativeQuote::clear_htscborrowamount() {
  _impl_.htscborrowamount_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_htscborrowamount() const {
  return _impl_.htscborrowamount_;
}
inline int64_t MDSLIndicativeQuote::htscborrowamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowAmount)
  return _internal_htscborrowamount();
}
inline void MDSLIndicativeQuote::_internal_set_htscborrowamount(int64_t value) {
  
  _impl_.htscborrowamount_ = value;
}
inline void MDSLIndicativeQuote::set_htscborrowamount(int64_t value) {
  _internal_set_htscborrowamount(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowAmount)
}

// string HtscBorrowTerms = 14;
inline void MDSLIndicativeQuote::clear_htscborrowterms() {
  _impl_.htscborrowterms_.ClearToEmpty();
}
inline const std::string& MDSLIndicativeQuote::htscborrowterms() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
  return _internal_htscborrowterms();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDSLIndicativeQuote::set_htscborrowterms(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscborrowterms_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
}
inline std::string* MDSLIndicativeQuote::mutable_htscborrowterms() {
  std::string* _s = _internal_mutable_htscborrowterms();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
  return _s;
}
inline const std::string& MDSLIndicativeQuote::_internal_htscborrowterms() const {
  return _impl_.htscborrowterms_.Get();
}
inline void MDSLIndicativeQuote::_internal_set_htscborrowterms(const std::string& value) {
  
  _impl_.htscborrowterms_.Set(value, GetArenaForAllocation());
}
inline std::string* MDSLIndicativeQuote::_internal_mutable_htscborrowterms() {
  
  return _impl_.htscborrowterms_.Mutable(GetArenaForAllocation());
}
inline std::string* MDSLIndicativeQuote::release_htscborrowterms() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
  return _impl_.htscborrowterms_.Release();
}
inline void MDSLIndicativeQuote::set_allocated_htscborrowterms(std::string* htscborrowterms) {
  if (htscborrowterms != nullptr) {
    
  } else {
    
  }
  _impl_.htscborrowterms_.SetAllocated(htscborrowterms, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscborrowterms_.IsDefault()) {
    _impl_.htscborrowterms_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowTerms)
}

// int64 HtscBorrowRate = 15;
inline void MDSLIndicativeQuote::clear_htscborrowrate() {
  _impl_.htscborrowrate_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_htscborrowrate() const {
  return _impl_.htscborrowrate_;
}
inline int64_t MDSLIndicativeQuote::htscborrowrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowRate)
  return _internal_htscborrowrate();
}
inline void MDSLIndicativeQuote::_internal_set_htscborrowrate(int64_t value) {
  
  _impl_.htscborrowrate_ = value;
}
inline void MDSLIndicativeQuote::set_htscborrowrate(int64_t value) {
  _internal_set_htscborrowrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.HtscBorrowRate)
}

// int64 TradeVolume = 16;
inline void MDSLIndicativeQuote::clear_tradevolume() {
  _impl_.tradevolume_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_tradevolume() const {
  return _impl_.tradevolume_;
}
inline int64_t MDSLIndicativeQuote::tradevolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradeVolume)
  return _internal_tradevolume();
}
inline void MDSLIndicativeQuote::_internal_set_tradevolume(int64_t value) {
  
  _impl_.tradevolume_ = value;
}
inline void MDSLIndicativeQuote::set_tradevolume(int64_t value) {
  _internal_set_tradevolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradeVolume)
}

// int64 TradeMoney = 17;
inline void MDSLIndicativeQuote::clear_trademoney() {
  _impl_.trademoney_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_trademoney() const {
  return _impl_.trademoney_;
}
inline int64_t MDSLIndicativeQuote::trademoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradeMoney)
  return _internal_trademoney();
}
inline void MDSLIndicativeQuote::_internal_set_trademoney(int64_t value) {
  
  _impl_.trademoney_ = value;
}
inline void MDSLIndicativeQuote::set_trademoney(int64_t value) {
  _internal_set_trademoney(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.TradeMoney)
}

// int64 PreTradeVolume = 18;
inline void MDSLIndicativeQuote::clear_pretradevolume() {
  _impl_.pretradevolume_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_pretradevolume() const {
  return _impl_.pretradevolume_;
}
inline int64_t MDSLIndicativeQuote::pretradevolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreTradeVolume)
  return _internal_pretradevolume();
}
inline void MDSLIndicativeQuote::_internal_set_pretradevolume(int64_t value) {
  
  _impl_.pretradevolume_ = value;
}
inline void MDSLIndicativeQuote::set_pretradevolume(int64_t value) {
  _internal_set_pretradevolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreTradeVolume)
}

// int64 PreTradeMoney = 19;
inline void MDSLIndicativeQuote::clear_pretrademoney() {
  _impl_.pretrademoney_ = int64_t{0};
}
inline int64_t MDSLIndicativeQuote::_internal_pretrademoney() const {
  return _impl_.pretrademoney_;
}
inline int64_t MDSLIndicativeQuote::pretrademoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreTradeMoney)
  return _internal_pretrademoney();
}
inline void MDSLIndicativeQuote::_internal_set_pretrademoney(int64_t value) {
  
  _impl_.pretrademoney_ = value;
}
inline void MDSLIndicativeQuote::set_pretrademoney(int64_t value) {
  _internal_set_pretrademoney(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.PreTradeMoney)
}

// int32 DataMultiplePowerOf10 = 20;
inline void MDSLIndicativeQuote::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDSLIndicativeQuote::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDSLIndicativeQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSLIndicativeQuote.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDSLIndicativeQuote::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDSLIndicativeQuote::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSLIndicativeQuote.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDSLIndicativeQuote_2eproto
