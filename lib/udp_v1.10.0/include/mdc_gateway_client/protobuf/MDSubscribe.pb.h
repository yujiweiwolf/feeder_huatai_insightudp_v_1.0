// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDSubscribe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDSubscribe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDSubscribe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "SecuritySourceType.pb.h"
#include "EMarketDataType.pb.h"
#include "InsightErrorContext.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDSubscribe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDSubscribe_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDSubscribe_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDSubscribeRequest;
struct MDSubscribeRequestDefaultTypeInternal;
extern MDSubscribeRequestDefaultTypeInternal _MDSubscribeRequest_default_instance_;
class MDSubscribeResponse;
struct MDSubscribeResponseDefaultTypeInternal;
extern MDSubscribeResponseDefaultTypeInternal _MDSubscribeResponse_default_instance_;
class SubscribeAll;
struct SubscribeAllDefaultTypeInternal;
extern SubscribeAllDefaultTypeInternal _SubscribeAll_default_instance_;
class SubscribeByID;
struct SubscribeByIDDefaultTypeInternal;
extern SubscribeByIDDefaultTypeInternal _SubscribeByID_default_instance_;
class SubscribeByIDDetail;
struct SubscribeByIDDetailDefaultTypeInternal;
extern SubscribeByIDDetailDefaultTypeInternal _SubscribeByIDDetail_default_instance_;
class SubscribeBySourceType;
struct SubscribeBySourceTypeDefaultTypeInternal;
extern SubscribeBySourceTypeDefaultTypeInternal _SubscribeBySourceType_default_instance_;
class SubscribeBySourceTypeDetail;
struct SubscribeBySourceTypeDetailDefaultTypeInternal;
extern SubscribeBySourceTypeDetailDefaultTypeInternal _SubscribeBySourceTypeDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDSubscribeRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSubscribeRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDSubscribeResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSubscribeResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeAll* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeAll>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeByID* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeByID>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeByIDDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeByIDDetail>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeBySourceType* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeBySourceType>(Arena*);
template<> ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

enum ESubscribeActionType : int {
  COVERAGE = 0,
  ADD = 1,
  DECREASE = 2,
  CANCEL = 3,
  ESubscribeActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ESubscribeActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ESubscribeActionType_IsValid(int value);
constexpr ESubscribeActionType ESubscribeActionType_MIN = COVERAGE;
constexpr ESubscribeActionType ESubscribeActionType_MAX = CANCEL;
constexpr int ESubscribeActionType_ARRAYSIZE = ESubscribeActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESubscribeActionType_descriptor();
template<typename T>
inline const std::string& ESubscribeActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESubscribeActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESubscribeActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESubscribeActionType_descriptor(), enum_t_value);
}
inline bool ESubscribeActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESubscribeActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESubscribeActionType>(
    ESubscribeActionType_descriptor(), name, value);
}
// ===================================================================

class MDSubscribeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDSubscribeRequest) */ {
 public:
  inline MDSubscribeRequest() : MDSubscribeRequest(nullptr) {}
  ~MDSubscribeRequest() override;
  explicit PROTOBUF_CONSTEXPR MDSubscribeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDSubscribeRequest(const MDSubscribeRequest& from);
  MDSubscribeRequest(MDSubscribeRequest&& from) noexcept
    : MDSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MDSubscribeRequest& operator=(const MDSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDSubscribeRequest& operator=(MDSubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDSubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MDSubscribeRequest*>(
               &_MDSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDSubscribeRequest& a, MDSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MDSubscribeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDSubscribeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDSubscribeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDSubscribeRequest& from) {
    MDSubscribeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDSubscribeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDSubscribeRequest";
  }
  protected:
  explicit MDSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeAllFieldNumber = 2,
    kSubscribeBySourceTypeFieldNumber = 3,
    kSubscribeByIDFieldNumber = 4,
    kSubscribeActionTypeFieldNumber = 1,
  };
  // .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
  bool has_subscribeall() const;
  private:
  bool _internal_has_subscribeall() const;
  public:
  void clear_subscribeall();
  const ::com::htsc::mdc::insight::model::SubscribeAll& subscribeall() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SubscribeAll* release_subscribeall();
  ::com::htsc::mdc::insight::model::SubscribeAll* mutable_subscribeall();
  void set_allocated_subscribeall(::com::htsc::mdc::insight::model::SubscribeAll* subscribeall);
  private:
  const ::com::htsc::mdc::insight::model::SubscribeAll& _internal_subscribeall() const;
  ::com::htsc::mdc::insight::model::SubscribeAll* _internal_mutable_subscribeall();
  public:
  void unsafe_arena_set_allocated_subscribeall(
      ::com::htsc::mdc::insight::model::SubscribeAll* subscribeall);
  ::com::htsc::mdc::insight::model::SubscribeAll* unsafe_arena_release_subscribeall();

  // .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
  bool has_subscribebysourcetype() const;
  private:
  bool _internal_has_subscribebysourcetype() const;
  public:
  void clear_subscribebysourcetype();
  const ::com::htsc::mdc::insight::model::SubscribeBySourceType& subscribebysourcetype() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SubscribeBySourceType* release_subscribebysourcetype();
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* mutable_subscribebysourcetype();
  void set_allocated_subscribebysourcetype(::com::htsc::mdc::insight::model::SubscribeBySourceType* subscribebysourcetype);
  private:
  const ::com::htsc::mdc::insight::model::SubscribeBySourceType& _internal_subscribebysourcetype() const;
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* _internal_mutable_subscribebysourcetype();
  public:
  void unsafe_arena_set_allocated_subscribebysourcetype(
      ::com::htsc::mdc::insight::model::SubscribeBySourceType* subscribebysourcetype);
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* unsafe_arena_release_subscribebysourcetype();

  // .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
  bool has_subscribebyid() const;
  private:
  bool _internal_has_subscribebyid() const;
  public:
  void clear_subscribebyid();
  const ::com::htsc::mdc::insight::model::SubscribeByID& subscribebyid() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SubscribeByID* release_subscribebyid();
  ::com::htsc::mdc::insight::model::SubscribeByID* mutable_subscribebyid();
  void set_allocated_subscribebyid(::com::htsc::mdc::insight::model::SubscribeByID* subscribebyid);
  private:
  const ::com::htsc::mdc::insight::model::SubscribeByID& _internal_subscribebyid() const;
  ::com::htsc::mdc::insight::model::SubscribeByID* _internal_mutable_subscribebyid();
  public:
  void unsafe_arena_set_allocated_subscribebyid(
      ::com::htsc::mdc::insight::model::SubscribeByID* subscribebyid);
  ::com::htsc::mdc::insight::model::SubscribeByID* unsafe_arena_release_subscribebyid();

  // .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
  void clear_subscribeactiontype();
  ::com::htsc::mdc::insight::model::ESubscribeActionType subscribeactiontype() const;
  void set_subscribeactiontype(::com::htsc::mdc::insight::model::ESubscribeActionType value);
  private:
  ::com::htsc::mdc::insight::model::ESubscribeActionType _internal_subscribeactiontype() const;
  void _internal_set_subscribeactiontype(::com::htsc::mdc::insight::model::ESubscribeActionType value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::htsc::mdc::insight::model::SubscribeAll* subscribeall_;
    ::com::htsc::mdc::insight::model::SubscribeBySourceType* subscribebysourcetype_;
    ::com::htsc::mdc::insight::model::SubscribeByID* subscribebyid_;
    int subscribeactiontype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeAll) */ {
 public:
  inline SubscribeAll() : SubscribeAll(nullptr) {}
  ~SubscribeAll() override;
  explicit PROTOBUF_CONSTEXPR SubscribeAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeAll(const SubscribeAll& from);
  SubscribeAll(SubscribeAll&& from) noexcept
    : SubscribeAll() {
    *this = ::std::move(from);
  }

  inline SubscribeAll& operator=(const SubscribeAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAll& operator=(SubscribeAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeAll* internal_default_instance() {
    return reinterpret_cast<const SubscribeAll*>(
               &_SubscribeAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubscribeAll& a, SubscribeAll& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeAll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeAll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeAll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubscribeAll& from) {
    SubscribeAll::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeAll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeAll";
  }
  protected:
  explicit SubscribeAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDataTypesFieldNumber = 1,
  };
  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
  int marketdatatypes_size() const;
  private:
  int _internal_marketdatatypes_size() const;
  public:
  void clear_marketdatatypes();
  private:
  ::com::htsc::mdc::insight::model::EMarketDataType _internal_marketdatatypes(int index) const;
  void _internal_add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_marketdatatypes();
  public:
  ::com::htsc::mdc::insight::model::EMarketDataType marketdatatypes(int index) const;
  void set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value);
  void add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& marketdatatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_marketdatatypes();

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> marketdatatypes_;
    mutable std::atomic<int> _marketdatatypes_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeByID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeByID) */ {
 public:
  inline SubscribeByID() : SubscribeByID(nullptr) {}
  ~SubscribeByID() override;
  explicit PROTOBUF_CONSTEXPR SubscribeByID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeByID(const SubscribeByID& from);
  SubscribeByID(SubscribeByID&& from) noexcept
    : SubscribeByID() {
    *this = ::std::move(from);
  }

  inline SubscribeByID& operator=(const SubscribeByID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeByID& operator=(SubscribeByID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeByID& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeByID* internal_default_instance() {
    return reinterpret_cast<const SubscribeByID*>(
               &_SubscribeByID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeByID& a, SubscribeByID& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeByID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeByID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeByID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeByID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeByID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubscribeByID& from) {
    SubscribeByID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeByID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeByID";
  }
  protected:
  explicit SubscribeByID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeByIDDetailsFieldNumber = 1,
    kGlobalMarketDataTypesFieldNumber = 2,
  };
  // repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
  int subscribebyiddetails_size() const;
  private:
  int _internal_subscribebyiddetails_size() const;
  public:
  void clear_subscribebyiddetails();
  ::com::htsc::mdc::insight::model::SubscribeByIDDetail* mutable_subscribebyiddetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >*
      mutable_subscribebyiddetails();
  private:
  const ::com::htsc::mdc::insight::model::SubscribeByIDDetail& _internal_subscribebyiddetails(int index) const;
  ::com::htsc::mdc::insight::model::SubscribeByIDDetail* _internal_add_subscribebyiddetails();
  public:
  const ::com::htsc::mdc::insight::model::SubscribeByIDDetail& subscribebyiddetails(int index) const;
  ::com::htsc::mdc::insight::model::SubscribeByIDDetail* add_subscribebyiddetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >&
      subscribebyiddetails() const;

  // repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
  int globalmarketdatatypes_size() const;
  private:
  int _internal_globalmarketdatatypes_size() const;
  public:
  void clear_globalmarketdatatypes();
  private:
  ::com::htsc::mdc::insight::model::EMarketDataType _internal_globalmarketdatatypes(int index) const;
  void _internal_add_globalmarketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_globalmarketdatatypes();
  public:
  ::com::htsc::mdc::insight::model::EMarketDataType globalmarketdatatypes(int index) const;
  void set_globalmarketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value);
  void add_globalmarketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& globalmarketdatatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_globalmarketdatatypes();

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeByID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail > subscribebyiddetails_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> globalmarketdatatypes_;
    mutable std::atomic<int> _globalmarketdatatypes_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeByIDDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeByIDDetail) */ {
 public:
  inline SubscribeByIDDetail() : SubscribeByIDDetail(nullptr) {}
  ~SubscribeByIDDetail() override;
  explicit PROTOBUF_CONSTEXPR SubscribeByIDDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeByIDDetail(const SubscribeByIDDetail& from);
  SubscribeByIDDetail(SubscribeByIDDetail&& from) noexcept
    : SubscribeByIDDetail() {
    *this = ::std::move(from);
  }

  inline SubscribeByIDDetail& operator=(const SubscribeByIDDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeByIDDetail& operator=(SubscribeByIDDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeByIDDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeByIDDetail* internal_default_instance() {
    return reinterpret_cast<const SubscribeByIDDetail*>(
               &_SubscribeByIDDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubscribeByIDDetail& a, SubscribeByIDDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeByIDDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeByIDDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeByIDDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeByIDDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeByIDDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubscribeByIDDetail& from) {
    SubscribeByIDDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeByIDDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeByIDDetail";
  }
  protected:
  explicit SubscribeByIDDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDataTypesFieldNumber = 2,
    kHtscSecurityIDFieldNumber = 1,
  };
  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  int marketdatatypes_size() const;
  private:
  int _internal_marketdatatypes_size() const;
  public:
  void clear_marketdatatypes();
  private:
  ::com::htsc::mdc::insight::model::EMarketDataType _internal_marketdatatypes(int index) const;
  void _internal_add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_marketdatatypes();
  public:
  ::com::htsc::mdc::insight::model::EMarketDataType marketdatatypes(int index) const;
  void set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value);
  void add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& marketdatatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_marketdatatypes();

  // string htscSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeByIDDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> marketdatatypes_;
    mutable std::atomic<int> _marketdatatypes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeBySourceType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeBySourceType) */ {
 public:
  inline SubscribeBySourceType() : SubscribeBySourceType(nullptr) {}
  ~SubscribeBySourceType() override;
  explicit PROTOBUF_CONSTEXPR SubscribeBySourceType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeBySourceType(const SubscribeBySourceType& from);
  SubscribeBySourceType(SubscribeBySourceType&& from) noexcept
    : SubscribeBySourceType() {
    *this = ::std::move(from);
  }

  inline SubscribeBySourceType& operator=(const SubscribeBySourceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeBySourceType& operator=(SubscribeBySourceType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeBySourceType& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeBySourceType* internal_default_instance() {
    return reinterpret_cast<const SubscribeBySourceType*>(
               &_SubscribeBySourceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeBySourceType& a, SubscribeBySourceType& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeBySourceType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeBySourceType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeBySourceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeBySourceType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeBySourceType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubscribeBySourceType& from) {
    SubscribeBySourceType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeBySourceType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeBySourceType";
  }
  protected:
  explicit SubscribeBySourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeBySourceTypeDetailFieldNumber = 1,
  };
  // repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
  int subscribebysourcetypedetail_size() const;
  private:
  int _internal_subscribebysourcetypedetail_size() const;
  public:
  void clear_subscribebysourcetypedetail();
  ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* mutable_subscribebysourcetypedetail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >*
      mutable_subscribebysourcetypedetail();
  private:
  const ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail& _internal_subscribebysourcetypedetail(int index) const;
  ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* _internal_add_subscribebysourcetypedetail();
  public:
  const ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail& subscribebysourcetypedetail(int index) const;
  ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* add_subscribebysourcetypedetail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >&
      subscribebysourcetypedetail() const;

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeBySourceType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail > subscribebysourcetypedetail_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class SubscribeBySourceTypeDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail) */ {
 public:
  inline SubscribeBySourceTypeDetail() : SubscribeBySourceTypeDetail(nullptr) {}
  ~SubscribeBySourceTypeDetail() override;
  explicit PROTOBUF_CONSTEXPR SubscribeBySourceTypeDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeBySourceTypeDetail(const SubscribeBySourceTypeDetail& from);
  SubscribeBySourceTypeDetail(SubscribeBySourceTypeDetail&& from) noexcept
    : SubscribeBySourceTypeDetail() {
    *this = ::std::move(from);
  }

  inline SubscribeBySourceTypeDetail& operator=(const SubscribeBySourceTypeDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeBySourceTypeDetail& operator=(SubscribeBySourceTypeDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeBySourceTypeDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeBySourceTypeDetail* internal_default_instance() {
    return reinterpret_cast<const SubscribeBySourceTypeDetail*>(
               &_SubscribeBySourceTypeDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SubscribeBySourceTypeDetail& a, SubscribeBySourceTypeDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeBySourceTypeDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeBySourceTypeDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeBySourceTypeDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeBySourceTypeDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeBySourceTypeDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubscribeBySourceTypeDetail& from) {
    SubscribeBySourceTypeDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeBySourceTypeDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail";
  }
  protected:
  explicit SubscribeBySourceTypeDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDataTypesFieldNumber = 2,
    kSecuritySourceTypesFieldNumber = 1,
  };
  // repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
  int marketdatatypes_size() const;
  private:
  int _internal_marketdatatypes_size() const;
  public:
  void clear_marketdatatypes();
  private:
  ::com::htsc::mdc::insight::model::EMarketDataType _internal_marketdatatypes(int index) const;
  void _internal_add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_marketdatatypes();
  public:
  ::com::htsc::mdc::insight::model::EMarketDataType marketdatatypes(int index) const;
  void set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value);
  void add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& marketdatatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_marketdatatypes();

  // .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
  bool has_securitysourcetypes() const;
  private:
  bool _internal_has_securitysourcetypes() const;
  public:
  void clear_securitysourcetypes();
  const ::com::htsc::mdc::insight::model::SecuritySourceType& securitysourcetypes() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::SecuritySourceType* release_securitysourcetypes();
  ::com::htsc::mdc::insight::model::SecuritySourceType* mutable_securitysourcetypes();
  void set_allocated_securitysourcetypes(::com::htsc::mdc::insight::model::SecuritySourceType* securitysourcetypes);
  private:
  const ::com::htsc::mdc::insight::model::SecuritySourceType& _internal_securitysourcetypes() const;
  ::com::htsc::mdc::insight::model::SecuritySourceType* _internal_mutable_securitysourcetypes();
  public:
  void unsafe_arena_set_allocated_securitysourcetypes(
      ::com::htsc::mdc::insight::model::SecuritySourceType* securitysourcetypes);
  ::com::htsc::mdc::insight::model::SecuritySourceType* unsafe_arena_release_securitysourcetypes();

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> marketdatatypes_;
    mutable std::atomic<int> _marketdatatypes_cached_byte_size_;
    ::com::htsc::mdc::insight::model::SecuritySourceType* securitysourcetypes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// -------------------------------------------------------------------

class MDSubscribeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDSubscribeResponse) */ {
 public:
  inline MDSubscribeResponse() : MDSubscribeResponse(nullptr) {}
  ~MDSubscribeResponse() override;
  explicit PROTOBUF_CONSTEXPR MDSubscribeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDSubscribeResponse(const MDSubscribeResponse& from);
  MDSubscribeResponse(MDSubscribeResponse&& from) noexcept
    : MDSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline MDSubscribeResponse& operator=(const MDSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDSubscribeResponse& operator=(MDSubscribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDSubscribeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const MDSubscribeResponse*>(
               &_MDSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MDSubscribeResponse& a, MDSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MDSubscribeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDSubscribeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDSubscribeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDSubscribeResponse& from) {
    MDSubscribeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDSubscribeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDSubscribeResponse";
  }
  protected:
  explicit MDSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorContextFieldNumber = 2,
    kIsSuccessFieldNumber = 1,
  };
  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  bool has_errorcontext() const;
  private:
  bool _internal_has_errorcontext() const;
  public:
  void clear_errorcontext();
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);
  private:
  const ::com::htsc::mdc::insight::model::InsightErrorContext& _internal_errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* _internal_mutable_errorcontext();
  public:
  void unsafe_arena_set_allocated_errorcontext(
      ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);
  ::com::htsc::mdc::insight::model::InsightErrorContext* unsafe_arena_release_errorcontext();

  // bool isSuccess = 1;
  void clear_issuccess();
  bool issuccess() const;
  void set_issuccess(bool value);
  private:
  bool _internal_issuccess() const;
  void _internal_set_issuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
    bool issuccess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDSubscribe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDSubscribeRequest

// .com.htsc.mdc.insight.model.ESubscribeActionType subscribeActionType = 1;
inline void MDSubscribeRequest::clear_subscribeactiontype() {
  _impl_.subscribeactiontype_ = 0;
}
inline ::com::htsc::mdc::insight::model::ESubscribeActionType MDSubscribeRequest::_internal_subscribeactiontype() const {
  return static_cast< ::com::htsc::mdc::insight::model::ESubscribeActionType >(_impl_.subscribeactiontype_);
}
inline ::com::htsc::mdc::insight::model::ESubscribeActionType MDSubscribeRequest::subscribeactiontype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeActionType)
  return _internal_subscribeactiontype();
}
inline void MDSubscribeRequest::_internal_set_subscribeactiontype(::com::htsc::mdc::insight::model::ESubscribeActionType value) {
  
  _impl_.subscribeactiontype_ = value;
}
inline void MDSubscribeRequest::set_subscribeactiontype(::com::htsc::mdc::insight::model::ESubscribeActionType value) {
  _internal_set_subscribeactiontype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeActionType)
}

// .com.htsc.mdc.insight.model.SubscribeAll subscribeAll = 2;
inline bool MDSubscribeRequest::_internal_has_subscribeall() const {
  return this != internal_default_instance() && _impl_.subscribeall_ != nullptr;
}
inline bool MDSubscribeRequest::has_subscribeall() const {
  return _internal_has_subscribeall();
}
inline void MDSubscribeRequest::clear_subscribeall() {
  if (GetArenaForAllocation() == nullptr && _impl_.subscribeall_ != nullptr) {
    delete _impl_.subscribeall_;
  }
  _impl_.subscribeall_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SubscribeAll& MDSubscribeRequest::_internal_subscribeall() const {
  const ::com::htsc::mdc::insight::model::SubscribeAll* p = _impl_.subscribeall_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SubscribeAll&>(
      ::com::htsc::mdc::insight::model::_SubscribeAll_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SubscribeAll& MDSubscribeRequest::subscribeall() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
  return _internal_subscribeall();
}
inline void MDSubscribeRequest::unsafe_arena_set_allocated_subscribeall(
    ::com::htsc::mdc::insight::model::SubscribeAll* subscribeall) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subscribeall_);
  }
  _impl_.subscribeall_ = subscribeall;
  if (subscribeall) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
}
inline ::com::htsc::mdc::insight::model::SubscribeAll* MDSubscribeRequest::release_subscribeall() {
  
  ::com::htsc::mdc::insight::model::SubscribeAll* temp = _impl_.subscribeall_;
  _impl_.subscribeall_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeAll* MDSubscribeRequest::unsafe_arena_release_subscribeall() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
  
  ::com::htsc::mdc::insight::model::SubscribeAll* temp = _impl_.subscribeall_;
  _impl_.subscribeall_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeAll* MDSubscribeRequest::_internal_mutable_subscribeall() {
  
  if (_impl_.subscribeall_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeAll>(GetArenaForAllocation());
    _impl_.subscribeall_ = p;
  }
  return _impl_.subscribeall_;
}
inline ::com::htsc::mdc::insight::model::SubscribeAll* MDSubscribeRequest::mutable_subscribeall() {
  ::com::htsc::mdc::insight::model::SubscribeAll* _msg = _internal_mutable_subscribeall();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
  return _msg;
}
inline void MDSubscribeRequest::set_allocated_subscribeall(::com::htsc::mdc::insight::model::SubscribeAll* subscribeall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subscribeall_;
  }
  if (subscribeall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribeall);
    if (message_arena != submessage_arena) {
      subscribeall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribeall, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subscribeall_ = subscribeall;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeAll)
}

// .com.htsc.mdc.insight.model.SubscribeBySourceType subscribeBySourceType = 3;
inline bool MDSubscribeRequest::_internal_has_subscribebysourcetype() const {
  return this != internal_default_instance() && _impl_.subscribebysourcetype_ != nullptr;
}
inline bool MDSubscribeRequest::has_subscribebysourcetype() const {
  return _internal_has_subscribebysourcetype();
}
inline void MDSubscribeRequest::clear_subscribebysourcetype() {
  if (GetArenaForAllocation() == nullptr && _impl_.subscribebysourcetype_ != nullptr) {
    delete _impl_.subscribebysourcetype_;
  }
  _impl_.subscribebysourcetype_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SubscribeBySourceType& MDSubscribeRequest::_internal_subscribebysourcetype() const {
  const ::com::htsc::mdc::insight::model::SubscribeBySourceType* p = _impl_.subscribebysourcetype_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SubscribeBySourceType&>(
      ::com::htsc::mdc::insight::model::_SubscribeBySourceType_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SubscribeBySourceType& MDSubscribeRequest::subscribebysourcetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
  return _internal_subscribebysourcetype();
}
inline void MDSubscribeRequest::unsafe_arena_set_allocated_subscribebysourcetype(
    ::com::htsc::mdc::insight::model::SubscribeBySourceType* subscribebysourcetype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subscribebysourcetype_);
  }
  _impl_.subscribebysourcetype_ = subscribebysourcetype;
  if (subscribebysourcetype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceType* MDSubscribeRequest::release_subscribebysourcetype() {
  
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* temp = _impl_.subscribebysourcetype_;
  _impl_.subscribebysourcetype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceType* MDSubscribeRequest::unsafe_arena_release_subscribebysourcetype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
  
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* temp = _impl_.subscribebysourcetype_;
  _impl_.subscribebysourcetype_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceType* MDSubscribeRequest::_internal_mutable_subscribebysourcetype() {
  
  if (_impl_.subscribebysourcetype_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeBySourceType>(GetArenaForAllocation());
    _impl_.subscribebysourcetype_ = p;
  }
  return _impl_.subscribebysourcetype_;
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceType* MDSubscribeRequest::mutable_subscribebysourcetype() {
  ::com::htsc::mdc::insight::model::SubscribeBySourceType* _msg = _internal_mutable_subscribebysourcetype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
  return _msg;
}
inline void MDSubscribeRequest::set_allocated_subscribebysourcetype(::com::htsc::mdc::insight::model::SubscribeBySourceType* subscribebysourcetype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subscribebysourcetype_;
  }
  if (subscribebysourcetype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribebysourcetype);
    if (message_arena != submessage_arena) {
      subscribebysourcetype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribebysourcetype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subscribebysourcetype_ = subscribebysourcetype;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeBySourceType)
}

// .com.htsc.mdc.insight.model.SubscribeByID subscribeByID = 4;
inline bool MDSubscribeRequest::_internal_has_subscribebyid() const {
  return this != internal_default_instance() && _impl_.subscribebyid_ != nullptr;
}
inline bool MDSubscribeRequest::has_subscribebyid() const {
  return _internal_has_subscribebyid();
}
inline void MDSubscribeRequest::clear_subscribebyid() {
  if (GetArenaForAllocation() == nullptr && _impl_.subscribebyid_ != nullptr) {
    delete _impl_.subscribebyid_;
  }
  _impl_.subscribebyid_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::SubscribeByID& MDSubscribeRequest::_internal_subscribebyid() const {
  const ::com::htsc::mdc::insight::model::SubscribeByID* p = _impl_.subscribebyid_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SubscribeByID&>(
      ::com::htsc::mdc::insight::model::_SubscribeByID_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SubscribeByID& MDSubscribeRequest::subscribebyid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
  return _internal_subscribebyid();
}
inline void MDSubscribeRequest::unsafe_arena_set_allocated_subscribebyid(
    ::com::htsc::mdc::insight::model::SubscribeByID* subscribebyid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subscribebyid_);
  }
  _impl_.subscribebyid_ = subscribebyid;
  if (subscribebyid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
}
inline ::com::htsc::mdc::insight::model::SubscribeByID* MDSubscribeRequest::release_subscribebyid() {
  
  ::com::htsc::mdc::insight::model::SubscribeByID* temp = _impl_.subscribebyid_;
  _impl_.subscribebyid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeByID* MDSubscribeRequest::unsafe_arena_release_subscribebyid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
  
  ::com::htsc::mdc::insight::model::SubscribeByID* temp = _impl_.subscribebyid_;
  _impl_.subscribebyid_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SubscribeByID* MDSubscribeRequest::_internal_mutable_subscribebyid() {
  
  if (_impl_.subscribebyid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SubscribeByID>(GetArenaForAllocation());
    _impl_.subscribebyid_ = p;
  }
  return _impl_.subscribebyid_;
}
inline ::com::htsc::mdc::insight::model::SubscribeByID* MDSubscribeRequest::mutable_subscribebyid() {
  ::com::htsc::mdc::insight::model::SubscribeByID* _msg = _internal_mutable_subscribebyid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
  return _msg;
}
inline void MDSubscribeRequest::set_allocated_subscribebyid(::com::htsc::mdc::insight::model::SubscribeByID* subscribebyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subscribebyid_;
  }
  if (subscribebyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribebyid);
    if (message_arena != submessage_arena) {
      subscribebyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribebyid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subscribebyid_ = subscribebyid;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSubscribeRequest.subscribeByID)
}

// -------------------------------------------------------------------

// SubscribeAll

// repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 1;
inline int SubscribeAll::_internal_marketdatatypes_size() const {
  return _impl_.marketdatatypes_.size();
}
inline int SubscribeAll::marketdatatypes_size() const {
  return _internal_marketdatatypes_size();
}
inline void SubscribeAll::clear_marketdatatypes() {
  _impl_.marketdatatypes_.Clear();
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeAll::_internal_marketdatatypes(int index) const {
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(_impl_.marketdatatypes_.Get(index));
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeAll::marketdatatypes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
  return _internal_marketdatatypes(index);
}
inline void SubscribeAll::set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value) {
  _impl_.marketdatatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
}
inline void SubscribeAll::_internal_add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _impl_.marketdatatypes_.Add(value);
}
inline void SubscribeAll::add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _internal_add_marketdatatypes(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubscribeAll::marketdatatypes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
  return _impl_.marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeAll::_internal_mutable_marketdatatypes() {
  return &_impl_.marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeAll::mutable_marketdatatypes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeAll.marketDataTypes)
  return _internal_mutable_marketdatatypes();
}

// -------------------------------------------------------------------

// SubscribeByID

// repeated .com.htsc.mdc.insight.model.SubscribeByIDDetail subscribeByIDDetails = 1;
inline int SubscribeByID::_internal_subscribebyiddetails_size() const {
  return _impl_.subscribebyiddetails_.size();
}
inline int SubscribeByID::subscribebyiddetails_size() const {
  return _internal_subscribebyiddetails_size();
}
inline void SubscribeByID::clear_subscribebyiddetails() {
  _impl_.subscribebyiddetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::SubscribeByIDDetail* SubscribeByID::mutable_subscribebyiddetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return _impl_.subscribebyiddetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >*
SubscribeByID::mutable_subscribebyiddetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return &_impl_.subscribebyiddetails_;
}
inline const ::com::htsc::mdc::insight::model::SubscribeByIDDetail& SubscribeByID::_internal_subscribebyiddetails(int index) const {
  return _impl_.subscribebyiddetails_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::SubscribeByIDDetail& SubscribeByID::subscribebyiddetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return _internal_subscribebyiddetails(index);
}
inline ::com::htsc::mdc::insight::model::SubscribeByIDDetail* SubscribeByID::_internal_add_subscribebyiddetails() {
  return _impl_.subscribebyiddetails_.Add();
}
inline ::com::htsc::mdc::insight::model::SubscribeByIDDetail* SubscribeByID::add_subscribebyiddetails() {
  ::com::htsc::mdc::insight::model::SubscribeByIDDetail* _add = _internal_add_subscribebyiddetails();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeByIDDetail >&
SubscribeByID::subscribebyiddetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeByID.subscribeByIDDetails)
  return _impl_.subscribebyiddetails_;
}

// repeated .com.htsc.mdc.insight.model.EMarketDataType globalMarketDataTypes = 2;
inline int SubscribeByID::_internal_globalmarketdatatypes_size() const {
  return _impl_.globalmarketdatatypes_.size();
}
inline int SubscribeByID::globalmarketdatatypes_size() const {
  return _internal_globalmarketdatatypes_size();
}
inline void SubscribeByID::clear_globalmarketdatatypes() {
  _impl_.globalmarketdatatypes_.Clear();
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeByID::_internal_globalmarketdatatypes(int index) const {
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(_impl_.globalmarketdatatypes_.Get(index));
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeByID::globalmarketdatatypes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
  return _internal_globalmarketdatatypes(index);
}
inline void SubscribeByID::set_globalmarketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value) {
  _impl_.globalmarketdatatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
}
inline void SubscribeByID::_internal_add_globalmarketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _impl_.globalmarketdatatypes_.Add(value);
}
inline void SubscribeByID::add_globalmarketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _internal_add_globalmarketdatatypes(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubscribeByID::globalmarketdatatypes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
  return _impl_.globalmarketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeByID::_internal_mutable_globalmarketdatatypes() {
  return &_impl_.globalmarketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeByID::mutable_globalmarketdatatypes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeByID.globalMarketDataTypes)
  return _internal_mutable_globalmarketdatatypes();
}

// -------------------------------------------------------------------

// SubscribeByIDDetail

// string htscSecurityID = 1;
inline void SubscribeByIDDetail::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& SubscribeByIDDetail::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubscribeByIDDetail::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
}
inline std::string* SubscribeByIDDetail::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
  return _s;
}
inline const std::string& SubscribeByIDDetail::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void SubscribeByIDDetail::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* SubscribeByIDDetail::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* SubscribeByIDDetail::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void SubscribeByIDDetail::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SubscribeByIDDetail.htscSecurityID)
}

// repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
inline int SubscribeByIDDetail::_internal_marketdatatypes_size() const {
  return _impl_.marketdatatypes_.size();
}
inline int SubscribeByIDDetail::marketdatatypes_size() const {
  return _internal_marketdatatypes_size();
}
inline void SubscribeByIDDetail::clear_marketdatatypes() {
  _impl_.marketdatatypes_.Clear();
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeByIDDetail::_internal_marketdatatypes(int index) const {
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(_impl_.marketdatatypes_.Get(index));
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeByIDDetail::marketdatatypes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
  return _internal_marketdatatypes(index);
}
inline void SubscribeByIDDetail::set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value) {
  _impl_.marketdatatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
}
inline void SubscribeByIDDetail::_internal_add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _impl_.marketdatatypes_.Add(value);
}
inline void SubscribeByIDDetail::add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _internal_add_marketdatatypes(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubscribeByIDDetail::marketdatatypes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
  return _impl_.marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeByIDDetail::_internal_mutable_marketdatatypes() {
  return &_impl_.marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeByIDDetail::mutable_marketdatatypes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeByIDDetail.marketDataTypes)
  return _internal_mutable_marketdatatypes();
}

// -------------------------------------------------------------------

// SubscribeBySourceType

// repeated .com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail subscribeBySourceTypeDetail = 1;
inline int SubscribeBySourceType::_internal_subscribebysourcetypedetail_size() const {
  return _impl_.subscribebysourcetypedetail_.size();
}
inline int SubscribeBySourceType::subscribebysourcetypedetail_size() const {
  return _internal_subscribebysourcetypedetail_size();
}
inline void SubscribeBySourceType::clear_subscribebysourcetypedetail() {
  _impl_.subscribebysourcetypedetail_.Clear();
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* SubscribeBySourceType::mutable_subscribebysourcetypedetail(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return _impl_.subscribebysourcetypedetail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >*
SubscribeBySourceType::mutable_subscribebysourcetypedetail() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return &_impl_.subscribebysourcetypedetail_;
}
inline const ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail& SubscribeBySourceType::_internal_subscribebysourcetypedetail(int index) const {
  return _impl_.subscribebysourcetypedetail_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail& SubscribeBySourceType::subscribebysourcetypedetail(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return _internal_subscribebysourcetypedetail(index);
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* SubscribeBySourceType::_internal_add_subscribebysourcetypedetail() {
  return _impl_.subscribebysourcetypedetail_.Add();
}
inline ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* SubscribeBySourceType::add_subscribebysourcetypedetail() {
  ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail* _add = _internal_add_subscribebysourcetypedetail();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SubscribeBySourceTypeDetail >&
SubscribeBySourceType::subscribebysourcetypedetail() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeBySourceType.subscribeBySourceTypeDetail)
  return _impl_.subscribebysourcetypedetail_;
}

// -------------------------------------------------------------------

// SubscribeBySourceTypeDetail

// .com.htsc.mdc.insight.model.SecuritySourceType securitySourceTypes = 1;
inline bool SubscribeBySourceTypeDetail::_internal_has_securitysourcetypes() const {
  return this != internal_default_instance() && _impl_.securitysourcetypes_ != nullptr;
}
inline bool SubscribeBySourceTypeDetail::has_securitysourcetypes() const {
  return _internal_has_securitysourcetypes();
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& SubscribeBySourceTypeDetail::_internal_securitysourcetypes() const {
  const ::com::htsc::mdc::insight::model::SecuritySourceType* p = _impl_.securitysourcetypes_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::SecuritySourceType&>(
      ::com::htsc::mdc::insight::model::_SecuritySourceType_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& SubscribeBySourceTypeDetail::securitysourcetypes() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
  return _internal_securitysourcetypes();
}
inline void SubscribeBySourceTypeDetail::unsafe_arena_set_allocated_securitysourcetypes(
    ::com::htsc::mdc::insight::model::SecuritySourceType* securitysourcetypes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.securitysourcetypes_);
  }
  _impl_.securitysourcetypes_ = securitysourcetypes;
  if (securitysourcetypes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* SubscribeBySourceTypeDetail::release_securitysourcetypes() {
  
  ::com::htsc::mdc::insight::model::SecuritySourceType* temp = _impl_.securitysourcetypes_;
  _impl_.securitysourcetypes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* SubscribeBySourceTypeDetail::unsafe_arena_release_securitysourcetypes() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
  
  ::com::htsc::mdc::insight::model::SecuritySourceType* temp = _impl_.securitysourcetypes_;
  _impl_.securitysourcetypes_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* SubscribeBySourceTypeDetail::_internal_mutable_securitysourcetypes() {
  
  if (_impl_.securitysourcetypes_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::SecuritySourceType>(GetArenaForAllocation());
    _impl_.securitysourcetypes_ = p;
  }
  return _impl_.securitysourcetypes_;
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* SubscribeBySourceTypeDetail::mutable_securitysourcetypes() {
  ::com::htsc::mdc::insight::model::SecuritySourceType* _msg = _internal_mutable_securitysourcetypes();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
  return _msg;
}
inline void SubscribeBySourceTypeDetail::set_allocated_securitysourcetypes(::com::htsc::mdc::insight::model::SecuritySourceType* securitysourcetypes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.securitysourcetypes_);
  }
  if (securitysourcetypes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitysourcetypes));
    if (message_arena != submessage_arena) {
      securitysourcetypes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securitysourcetypes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.securitysourcetypes_ = securitysourcetypes;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.securitySourceTypes)
}

// repeated .com.htsc.mdc.insight.model.EMarketDataType marketDataTypes = 2;
inline int SubscribeBySourceTypeDetail::_internal_marketdatatypes_size() const {
  return _impl_.marketdatatypes_.size();
}
inline int SubscribeBySourceTypeDetail::marketdatatypes_size() const {
  return _internal_marketdatatypes_size();
}
inline void SubscribeBySourceTypeDetail::clear_marketdatatypes() {
  _impl_.marketdatatypes_.Clear();
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeBySourceTypeDetail::_internal_marketdatatypes(int index) const {
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(_impl_.marketdatatypes_.Get(index));
}
inline ::com::htsc::mdc::insight::model::EMarketDataType SubscribeBySourceTypeDetail::marketdatatypes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
  return _internal_marketdatatypes(index);
}
inline void SubscribeBySourceTypeDetail::set_marketdatatypes(int index, ::com::htsc::mdc::insight::model::EMarketDataType value) {
  _impl_.marketdatatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
}
inline void SubscribeBySourceTypeDetail::_internal_add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _impl_.marketdatatypes_.Add(value);
}
inline void SubscribeBySourceTypeDetail::add_marketdatatypes(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _internal_add_marketdatatypes(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubscribeBySourceTypeDetail::marketdatatypes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
  return _impl_.marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeBySourceTypeDetail::_internal_mutable_marketdatatypes() {
  return &_impl_.marketdatatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubscribeBySourceTypeDetail::mutable_marketdatatypes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail.marketDataTypes)
  return _internal_mutable_marketdatatypes();
}

// -------------------------------------------------------------------

// MDSubscribeResponse

// bool isSuccess = 1;
inline void MDSubscribeResponse::clear_issuccess() {
  _impl_.issuccess_ = false;
}
inline bool MDSubscribeResponse::_internal_issuccess() const {
  return _impl_.issuccess_;
}
inline bool MDSubscribeResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeResponse.isSuccess)
  return _internal_issuccess();
}
inline void MDSubscribeResponse::_internal_set_issuccess(bool value) {
  
  _impl_.issuccess_ = value;
}
inline void MDSubscribeResponse::set_issuccess(bool value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDSubscribeResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
inline bool MDSubscribeResponse::_internal_has_errorcontext() const {
  return this != internal_default_instance() && _impl_.errorcontext_ != nullptr;
}
inline bool MDSubscribeResponse::has_errorcontext() const {
  return _internal_has_errorcontext();
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& MDSubscribeResponse::_internal_errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = _impl_.errorcontext_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext&>(
      ::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& MDSubscribeResponse::errorcontext() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
  return _internal_errorcontext();
}
inline void MDSubscribeResponse::unsafe_arena_set_allocated_errorcontext(
    ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.errorcontext_);
  }
  _impl_.errorcontext_ = errorcontext;
  if (errorcontext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDSubscribeResponse::release_errorcontext() {
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.errorcontext_;
  _impl_.errorcontext_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDSubscribeResponse::unsafe_arena_release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.errorcontext_;
  _impl_.errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDSubscribeResponse::_internal_mutable_errorcontext() {
  
  if (_impl_.errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaForAllocation());
    _impl_.errorcontext_ = p;
  }
  return _impl_.errorcontext_;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDSubscribeResponse::mutable_errorcontext() {
  ::com::htsc::mdc::insight::model::InsightErrorContext* _msg = _internal_mutable_errorcontext();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
  return _msg;
}
inline void MDSubscribeResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext));
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDSubscribeResponse.errorContext)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::ESubscribeActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::ESubscribeActionType>() {
  return ::com::htsc::mdc::insight::model::ESubscribeActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDSubscribe_2eproto
