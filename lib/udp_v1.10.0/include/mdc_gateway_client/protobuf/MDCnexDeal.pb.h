// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDCnexDeal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDCnexDeal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDCnexDeal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDCnexDeal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDCnexDeal_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDCnexDeal_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDCnexDeal;
struct MDCnexDealDefaultTypeInternal;
extern MDCnexDealDefaultTypeInternal _MDCnexDeal_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDCnexDeal* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCnexDeal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDCnexDeal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCnexDeal) */ {
 public:
  inline MDCnexDeal() : MDCnexDeal(nullptr) {}
  ~MDCnexDeal() override;
  explicit PROTOBUF_CONSTEXPR MDCnexDeal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDCnexDeal(const MDCnexDeal& from);
  MDCnexDeal(MDCnexDeal&& from) noexcept
    : MDCnexDeal() {
    *this = ::std::move(from);
  }

  inline MDCnexDeal& operator=(const MDCnexDeal& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCnexDeal& operator=(MDCnexDeal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDCnexDeal& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDCnexDeal* internal_default_instance() {
    return reinterpret_cast<const MDCnexDeal*>(
               &_MDCnexDeal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDCnexDeal& a, MDCnexDeal& b) {
    a.Swap(&b);
  }
  inline void Swap(MDCnexDeal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDCnexDeal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDCnexDeal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDCnexDeal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDCnexDeal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDCnexDeal& from) {
    MDCnexDeal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCnexDeal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCnexDeal";
  }
  protected:
  explicit MDCnexDeal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kDealIDFieldNumber = 9,
    kCnexSecurityTypeFieldNumber = 19,
    kCreditRatingFieldNumber = 20,
    kTextFieldNumber = 21,
    kExerciseFlagFieldNumber = 23,
    kTenorFieldNumber = 24,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kIssueDataTimeFieldNumber = 8,
    kCnexDataTypeFieldNumber = 7,
    kDealTypeFieldNumber = 10,
    kDealPriceFieldNumber = 11,
    kDealSizeFieldNumber = 12,
    kYieldFieldNumber = 13,
    kDealDateFieldNumber = 14,
    kDealTimeFieldNumber = 15,
    kQuoteStatusFieldNumber = 16,
    kQuotePriceTypeFieldNumber = 17,
    kMaturityDateFieldNumber = 18,
    kStatusValueFieldNumber = 22,
    kWorkBenchFieldNumber = 25,
    kDataMultiplePowerOf10FieldNumber = 26,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string DealID = 9;
  void clear_dealid();
  const std::string& dealid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dealid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dealid();
  PROTOBUF_NODISCARD std::string* release_dealid();
  void set_allocated_dealid(std::string* dealid);
  private:
  const std::string& _internal_dealid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dealid(const std::string& value);
  std::string* _internal_mutable_dealid();
  public:

  // string CnexSecurityType = 19;
  void clear_cnexsecuritytype();
  const std::string& cnexsecuritytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cnexsecuritytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cnexsecuritytype();
  PROTOBUF_NODISCARD std::string* release_cnexsecuritytype();
  void set_allocated_cnexsecuritytype(std::string* cnexsecuritytype);
  private:
  const std::string& _internal_cnexsecuritytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cnexsecuritytype(const std::string& value);
  std::string* _internal_mutable_cnexsecuritytype();
  public:

  // string CreditRating = 20;
  void clear_creditrating();
  const std::string& creditrating() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creditrating(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creditrating();
  PROTOBUF_NODISCARD std::string* release_creditrating();
  void set_allocated_creditrating(std::string* creditrating);
  private:
  const std::string& _internal_creditrating() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creditrating(const std::string& value);
  std::string* _internal_mutable_creditrating();
  public:

  // string Text = 21;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string ExerciseFlag = 23;
  void clear_exerciseflag();
  const std::string& exerciseflag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exerciseflag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exerciseflag();
  PROTOBUF_NODISCARD std::string* release_exerciseflag();
  void set_allocated_exerciseflag(std::string* exerciseflag);
  private:
  const std::string& _internal_exerciseflag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exerciseflag(const std::string& value);
  std::string* _internal_mutable_exerciseflag();
  public:

  // string Tenor = 24;
  void clear_tenor();
  const std::string& tenor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tenor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tenor();
  PROTOBUF_NODISCARD std::string* release_tenor();
  void set_allocated_tenor(std::string* tenor);
  private:
  const std::string& _internal_tenor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tenor(const std::string& value);
  std::string* _internal_mutable_tenor();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 IssueDataTime = 8;
  void clear_issuedatatime();
  int64_t issuedatatime() const;
  void set_issuedatatime(int64_t value);
  private:
  int64_t _internal_issuedatatime() const;
  void _internal_set_issuedatatime(int64_t value);
  public:

  // int32 CnexDataType = 7;
  void clear_cnexdatatype();
  int32_t cnexdatatype() const;
  void set_cnexdatatype(int32_t value);
  private:
  int32_t _internal_cnexdatatype() const;
  void _internal_set_cnexdatatype(int32_t value);
  public:

  // int32 DealType = 10;
  void clear_dealtype();
  int32_t dealtype() const;
  void set_dealtype(int32_t value);
  private:
  int32_t _internal_dealtype() const;
  void _internal_set_dealtype(int32_t value);
  public:

  // int64 DealPrice = 11;
  void clear_dealprice();
  int64_t dealprice() const;
  void set_dealprice(int64_t value);
  private:
  int64_t _internal_dealprice() const;
  void _internal_set_dealprice(int64_t value);
  public:

  // int64 DealSize = 12;
  void clear_dealsize();
  int64_t dealsize() const;
  void set_dealsize(int64_t value);
  private:
  int64_t _internal_dealsize() const;
  void _internal_set_dealsize(int64_t value);
  public:

  // int64 Yield = 13;
  void clear_yield();
  int64_t yield() const;
  void set_yield(int64_t value);
  private:
  int64_t _internal_yield() const;
  void _internal_set_yield(int64_t value);
  public:

  // int32 DealDate = 14;
  void clear_dealdate();
  int32_t dealdate() const;
  void set_dealdate(int32_t value);
  private:
  int32_t _internal_dealdate() const;
  void _internal_set_dealdate(int32_t value);
  public:

  // int32 DealTime = 15;
  void clear_dealtime();
  int32_t dealtime() const;
  void set_dealtime(int32_t value);
  private:
  int32_t _internal_dealtime() const;
  void _internal_set_dealtime(int32_t value);
  public:

  // int32 QuoteStatus = 16;
  void clear_quotestatus();
  int32_t quotestatus() const;
  void set_quotestatus(int32_t value);
  private:
  int32_t _internal_quotestatus() const;
  void _internal_set_quotestatus(int32_t value);
  public:

  // int32 QuotePriceType = 17;
  void clear_quotepricetype();
  int32_t quotepricetype() const;
  void set_quotepricetype(int32_t value);
  private:
  int32_t _internal_quotepricetype() const;
  void _internal_set_quotepricetype(int32_t value);
  public:

  // int32 MaturityDate = 18;
  void clear_maturitydate();
  int32_t maturitydate() const;
  void set_maturitydate(int32_t value);
  private:
  int32_t _internal_maturitydate() const;
  void _internal_set_maturitydate(int32_t value);
  public:

  // int32 StatusValue = 22;
  void clear_statusvalue();
  int32_t statusvalue() const;
  void set_statusvalue(int32_t value);
  private:
  int32_t _internal_statusvalue() const;
  void _internal_set_statusvalue(int32_t value);
  public:

  // int32 WorkBench = 25;
  void clear_workbench();
  int32_t workbench() const;
  void set_workbench(int32_t value);
  private:
  int32_t _internal_workbench() const;
  void _internal_set_workbench(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 26;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCnexDeal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dealid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cnexsecuritytype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creditrating_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exerciseflag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenor_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t issuedatatime_;
    int32_t cnexdatatype_;
    int32_t dealtype_;
    int64_t dealprice_;
    int64_t dealsize_;
    int64_t yield_;
    int32_t dealdate_;
    int32_t dealtime_;
    int32_t quotestatus_;
    int32_t quotepricetype_;
    int32_t maturitydate_;
    int32_t statusvalue_;
    int32_t workbench_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDCnexDeal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDCnexDeal

// string HTSCSecurityID = 1;
inline void MDCnexDeal::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDCnexDeal::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnexDeal::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.HTSCSecurityID)
}
inline std::string* MDCnexDeal::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexDeal.HTSCSecurityID)
  return _s;
}
inline const std::string& MDCnexDeal::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDCnexDeal::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnexDeal::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnexDeal::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexDeal.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDCnexDeal::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexDeal.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDCnexDeal::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDCnexDeal::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDCnexDeal::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.MDDate)
  return _internal_mddate();
}
inline void MDCnexDeal::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDCnexDeal::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.MDDate)
}

// int32 MDTime = 3;
inline void MDCnexDeal::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDCnexDeal::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDCnexDeal::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.MDTime)
  return _internal_mdtime();
}
inline void MDCnexDeal::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDCnexDeal::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDCnexDeal::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDCnexDeal::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDCnexDeal::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDCnexDeal::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDCnexDeal::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDCnexDeal::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCnexDeal::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDCnexDeal::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.securityIDSource)
  return _internal_securityidsource();
}
inline void MDCnexDeal::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDCnexDeal::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDCnexDeal::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDCnexDeal::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDCnexDeal::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.securityType)
  return _internal_securitytype();
}
inline void MDCnexDeal::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDCnexDeal::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.securityType)
}

// int32 CnexDataType = 7;
inline void MDCnexDeal::clear_cnexdatatype() {
  _impl_.cnexdatatype_ = 0;
}
inline int32_t MDCnexDeal::_internal_cnexdatatype() const {
  return _impl_.cnexdatatype_;
}
inline int32_t MDCnexDeal::cnexdatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.CnexDataType)
  return _internal_cnexdatatype();
}
inline void MDCnexDeal::_internal_set_cnexdatatype(int32_t value) {
  
  _impl_.cnexdatatype_ = value;
}
inline void MDCnexDeal::set_cnexdatatype(int32_t value) {
  _internal_set_cnexdatatype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.CnexDataType)
}

// int64 IssueDataTime = 8;
inline void MDCnexDeal::clear_issuedatatime() {
  _impl_.issuedatatime_ = int64_t{0};
}
inline int64_t MDCnexDeal::_internal_issuedatatime() const {
  return _impl_.issuedatatime_;
}
inline int64_t MDCnexDeal::issuedatatime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.IssueDataTime)
  return _internal_issuedatatime();
}
inline void MDCnexDeal::_internal_set_issuedatatime(int64_t value) {
  
  _impl_.issuedatatime_ = value;
}
inline void MDCnexDeal::set_issuedatatime(int64_t value) {
  _internal_set_issuedatatime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.IssueDataTime)
}

// string DealID = 9;
inline void MDCnexDeal::clear_dealid() {
  _impl_.dealid_.ClearToEmpty();
}
inline const std::string& MDCnexDeal::dealid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.DealID)
  return _internal_dealid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnexDeal::set_dealid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dealid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.DealID)
}
inline std::string* MDCnexDeal::mutable_dealid() {
  std::string* _s = _internal_mutable_dealid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexDeal.DealID)
  return _s;
}
inline const std::string& MDCnexDeal::_internal_dealid() const {
  return _impl_.dealid_.Get();
}
inline void MDCnexDeal::_internal_set_dealid(const std::string& value) {
  
  _impl_.dealid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnexDeal::_internal_mutable_dealid() {
  
  return _impl_.dealid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnexDeal::release_dealid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexDeal.DealID)
  return _impl_.dealid_.Release();
}
inline void MDCnexDeal::set_allocated_dealid(std::string* dealid) {
  if (dealid != nullptr) {
    
  } else {
    
  }
  _impl_.dealid_.SetAllocated(dealid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dealid_.IsDefault()) {
    _impl_.dealid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexDeal.DealID)
}

// int32 DealType = 10;
inline void MDCnexDeal::clear_dealtype() {
  _impl_.dealtype_ = 0;
}
inline int32_t MDCnexDeal::_internal_dealtype() const {
  return _impl_.dealtype_;
}
inline int32_t MDCnexDeal::dealtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.DealType)
  return _internal_dealtype();
}
inline void MDCnexDeal::_internal_set_dealtype(int32_t value) {
  
  _impl_.dealtype_ = value;
}
inline void MDCnexDeal::set_dealtype(int32_t value) {
  _internal_set_dealtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.DealType)
}

// int64 DealPrice = 11;
inline void MDCnexDeal::clear_dealprice() {
  _impl_.dealprice_ = int64_t{0};
}
inline int64_t MDCnexDeal::_internal_dealprice() const {
  return _impl_.dealprice_;
}
inline int64_t MDCnexDeal::dealprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.DealPrice)
  return _internal_dealprice();
}
inline void MDCnexDeal::_internal_set_dealprice(int64_t value) {
  
  _impl_.dealprice_ = value;
}
inline void MDCnexDeal::set_dealprice(int64_t value) {
  _internal_set_dealprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.DealPrice)
}

// int64 DealSize = 12;
inline void MDCnexDeal::clear_dealsize() {
  _impl_.dealsize_ = int64_t{0};
}
inline int64_t MDCnexDeal::_internal_dealsize() const {
  return _impl_.dealsize_;
}
inline int64_t MDCnexDeal::dealsize() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.DealSize)
  return _internal_dealsize();
}
inline void MDCnexDeal::_internal_set_dealsize(int64_t value) {
  
  _impl_.dealsize_ = value;
}
inline void MDCnexDeal::set_dealsize(int64_t value) {
  _internal_set_dealsize(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.DealSize)
}

// int64 Yield = 13;
inline void MDCnexDeal::clear_yield() {
  _impl_.yield_ = int64_t{0};
}
inline int64_t MDCnexDeal::_internal_yield() const {
  return _impl_.yield_;
}
inline int64_t MDCnexDeal::yield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.Yield)
  return _internal_yield();
}
inline void MDCnexDeal::_internal_set_yield(int64_t value) {
  
  _impl_.yield_ = value;
}
inline void MDCnexDeal::set_yield(int64_t value) {
  _internal_set_yield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.Yield)
}

// int32 DealDate = 14;
inline void MDCnexDeal::clear_dealdate() {
  _impl_.dealdate_ = 0;
}
inline int32_t MDCnexDeal::_internal_dealdate() const {
  return _impl_.dealdate_;
}
inline int32_t MDCnexDeal::dealdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.DealDate)
  return _internal_dealdate();
}
inline void MDCnexDeal::_internal_set_dealdate(int32_t value) {
  
  _impl_.dealdate_ = value;
}
inline void MDCnexDeal::set_dealdate(int32_t value) {
  _internal_set_dealdate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.DealDate)
}

// int32 DealTime = 15;
inline void MDCnexDeal::clear_dealtime() {
  _impl_.dealtime_ = 0;
}
inline int32_t MDCnexDeal::_internal_dealtime() const {
  return _impl_.dealtime_;
}
inline int32_t MDCnexDeal::dealtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.DealTime)
  return _internal_dealtime();
}
inline void MDCnexDeal::_internal_set_dealtime(int32_t value) {
  
  _impl_.dealtime_ = value;
}
inline void MDCnexDeal::set_dealtime(int32_t value) {
  _internal_set_dealtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.DealTime)
}

// int32 QuoteStatus = 16;
inline void MDCnexDeal::clear_quotestatus() {
  _impl_.quotestatus_ = 0;
}
inline int32_t MDCnexDeal::_internal_quotestatus() const {
  return _impl_.quotestatus_;
}
inline int32_t MDCnexDeal::quotestatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.QuoteStatus)
  return _internal_quotestatus();
}
inline void MDCnexDeal::_internal_set_quotestatus(int32_t value) {
  
  _impl_.quotestatus_ = value;
}
inline void MDCnexDeal::set_quotestatus(int32_t value) {
  _internal_set_quotestatus(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.QuoteStatus)
}

// int32 QuotePriceType = 17;
inline void MDCnexDeal::clear_quotepricetype() {
  _impl_.quotepricetype_ = 0;
}
inline int32_t MDCnexDeal::_internal_quotepricetype() const {
  return _impl_.quotepricetype_;
}
inline int32_t MDCnexDeal::quotepricetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.QuotePriceType)
  return _internal_quotepricetype();
}
inline void MDCnexDeal::_internal_set_quotepricetype(int32_t value) {
  
  _impl_.quotepricetype_ = value;
}
inline void MDCnexDeal::set_quotepricetype(int32_t value) {
  _internal_set_quotepricetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.QuotePriceType)
}

// int32 MaturityDate = 18;
inline void MDCnexDeal::clear_maturitydate() {
  _impl_.maturitydate_ = 0;
}
inline int32_t MDCnexDeal::_internal_maturitydate() const {
  return _impl_.maturitydate_;
}
inline int32_t MDCnexDeal::maturitydate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.MaturityDate)
  return _internal_maturitydate();
}
inline void MDCnexDeal::_internal_set_maturitydate(int32_t value) {
  
  _impl_.maturitydate_ = value;
}
inline void MDCnexDeal::set_maturitydate(int32_t value) {
  _internal_set_maturitydate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.MaturityDate)
}

// string CnexSecurityType = 19;
inline void MDCnexDeal::clear_cnexsecuritytype() {
  _impl_.cnexsecuritytype_.ClearToEmpty();
}
inline const std::string& MDCnexDeal::cnexsecuritytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.CnexSecurityType)
  return _internal_cnexsecuritytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnexDeal::set_cnexsecuritytype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cnexsecuritytype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.CnexSecurityType)
}
inline std::string* MDCnexDeal::mutable_cnexsecuritytype() {
  std::string* _s = _internal_mutable_cnexsecuritytype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexDeal.CnexSecurityType)
  return _s;
}
inline const std::string& MDCnexDeal::_internal_cnexsecuritytype() const {
  return _impl_.cnexsecuritytype_.Get();
}
inline void MDCnexDeal::_internal_set_cnexsecuritytype(const std::string& value) {
  
  _impl_.cnexsecuritytype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnexDeal::_internal_mutable_cnexsecuritytype() {
  
  return _impl_.cnexsecuritytype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnexDeal::release_cnexsecuritytype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexDeal.CnexSecurityType)
  return _impl_.cnexsecuritytype_.Release();
}
inline void MDCnexDeal::set_allocated_cnexsecuritytype(std::string* cnexsecuritytype) {
  if (cnexsecuritytype != nullptr) {
    
  } else {
    
  }
  _impl_.cnexsecuritytype_.SetAllocated(cnexsecuritytype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cnexsecuritytype_.IsDefault()) {
    _impl_.cnexsecuritytype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexDeal.CnexSecurityType)
}

// string CreditRating = 20;
inline void MDCnexDeal::clear_creditrating() {
  _impl_.creditrating_.ClearToEmpty();
}
inline const std::string& MDCnexDeal::creditrating() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.CreditRating)
  return _internal_creditrating();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnexDeal::set_creditrating(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creditrating_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.CreditRating)
}
inline std::string* MDCnexDeal::mutable_creditrating() {
  std::string* _s = _internal_mutable_creditrating();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexDeal.CreditRating)
  return _s;
}
inline const std::string& MDCnexDeal::_internal_creditrating() const {
  return _impl_.creditrating_.Get();
}
inline void MDCnexDeal::_internal_set_creditrating(const std::string& value) {
  
  _impl_.creditrating_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnexDeal::_internal_mutable_creditrating() {
  
  return _impl_.creditrating_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnexDeal::release_creditrating() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexDeal.CreditRating)
  return _impl_.creditrating_.Release();
}
inline void MDCnexDeal::set_allocated_creditrating(std::string* creditrating) {
  if (creditrating != nullptr) {
    
  } else {
    
  }
  _impl_.creditrating_.SetAllocated(creditrating, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creditrating_.IsDefault()) {
    _impl_.creditrating_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexDeal.CreditRating)
}

// string Text = 21;
inline void MDCnexDeal::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& MDCnexDeal::text() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.Text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnexDeal::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.Text)
}
inline std::string* MDCnexDeal::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexDeal.Text)
  return _s;
}
inline const std::string& MDCnexDeal::_internal_text() const {
  return _impl_.text_.Get();
}
inline void MDCnexDeal::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnexDeal::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnexDeal::release_text() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexDeal.Text)
  return _impl_.text_.Release();
}
inline void MDCnexDeal::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexDeal.Text)
}

// int32 StatusValue = 22;
inline void MDCnexDeal::clear_statusvalue() {
  _impl_.statusvalue_ = 0;
}
inline int32_t MDCnexDeal::_internal_statusvalue() const {
  return _impl_.statusvalue_;
}
inline int32_t MDCnexDeal::statusvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.StatusValue)
  return _internal_statusvalue();
}
inline void MDCnexDeal::_internal_set_statusvalue(int32_t value) {
  
  _impl_.statusvalue_ = value;
}
inline void MDCnexDeal::set_statusvalue(int32_t value) {
  _internal_set_statusvalue(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.StatusValue)
}

// string ExerciseFlag = 23;
inline void MDCnexDeal::clear_exerciseflag() {
  _impl_.exerciseflag_.ClearToEmpty();
}
inline const std::string& MDCnexDeal::exerciseflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.ExerciseFlag)
  return _internal_exerciseflag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnexDeal::set_exerciseflag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exerciseflag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.ExerciseFlag)
}
inline std::string* MDCnexDeal::mutable_exerciseflag() {
  std::string* _s = _internal_mutable_exerciseflag();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexDeal.ExerciseFlag)
  return _s;
}
inline const std::string& MDCnexDeal::_internal_exerciseflag() const {
  return _impl_.exerciseflag_.Get();
}
inline void MDCnexDeal::_internal_set_exerciseflag(const std::string& value) {
  
  _impl_.exerciseflag_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnexDeal::_internal_mutable_exerciseflag() {
  
  return _impl_.exerciseflag_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnexDeal::release_exerciseflag() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexDeal.ExerciseFlag)
  return _impl_.exerciseflag_.Release();
}
inline void MDCnexDeal::set_allocated_exerciseflag(std::string* exerciseflag) {
  if (exerciseflag != nullptr) {
    
  } else {
    
  }
  _impl_.exerciseflag_.SetAllocated(exerciseflag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exerciseflag_.IsDefault()) {
    _impl_.exerciseflag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexDeal.ExerciseFlag)
}

// string Tenor = 24;
inline void MDCnexDeal::clear_tenor() {
  _impl_.tenor_.ClearToEmpty();
}
inline const std::string& MDCnexDeal::tenor() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.Tenor)
  return _internal_tenor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCnexDeal::set_tenor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tenor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.Tenor)
}
inline std::string* MDCnexDeal::mutable_tenor() {
  std::string* _s = _internal_mutable_tenor();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCnexDeal.Tenor)
  return _s;
}
inline const std::string& MDCnexDeal::_internal_tenor() const {
  return _impl_.tenor_.Get();
}
inline void MDCnexDeal::_internal_set_tenor(const std::string& value) {
  
  _impl_.tenor_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCnexDeal::_internal_mutable_tenor() {
  
  return _impl_.tenor_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCnexDeal::release_tenor() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCnexDeal.Tenor)
  return _impl_.tenor_.Release();
}
inline void MDCnexDeal::set_allocated_tenor(std::string* tenor) {
  if (tenor != nullptr) {
    
  } else {
    
  }
  _impl_.tenor_.SetAllocated(tenor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tenor_.IsDefault()) {
    _impl_.tenor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCnexDeal.Tenor)
}

// int32 WorkBench = 25;
inline void MDCnexDeal::clear_workbench() {
  _impl_.workbench_ = 0;
}
inline int32_t MDCnexDeal::_internal_workbench() const {
  return _impl_.workbench_;
}
inline int32_t MDCnexDeal::workbench() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.WorkBench)
  return _internal_workbench();
}
inline void MDCnexDeal::_internal_set_workbench(int32_t value) {
  
  _impl_.workbench_ = value;
}
inline void MDCnexDeal::set_workbench(int32_t value) {
  _internal_set_workbench(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.WorkBench)
}

// int32 DataMultiplePowerOf10 = 26;
inline void MDCnexDeal::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDCnexDeal::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDCnexDeal::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCnexDeal.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDCnexDeal::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDCnexDeal::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCnexDeal.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDCnexDeal_2eproto
