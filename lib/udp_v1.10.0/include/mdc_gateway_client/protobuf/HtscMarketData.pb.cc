// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HtscMarketData.proto

#include "HtscMarketData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR HtscMarketData::HtscMarketData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mdstock_)*/nullptr
  , /*decltype(_impl_.mdindex_)*/nullptr
  , /*decltype(_impl_.mdbond_)*/nullptr
  , /*decltype(_impl_.mdfund_)*/nullptr
  , /*decltype(_impl_.mdoption_)*/nullptr
  , /*decltype(_impl_.mdfuture_)*/nullptr
  , /*decltype(_impl_.mdtransaction_)*/nullptr
  , /*decltype(_impl_.mdorder_)*/nullptr
  , /*decltype(_impl_.mdkline_)*/nullptr
  , /*decltype(_impl_.mdtwap_)*/nullptr
  , /*decltype(_impl_.mdvwap_)*/nullptr
  , /*decltype(_impl_.mdconstant_)*/nullptr
  , /*decltype(_impl_.mdsimpletick_)*/nullptr
  , /*decltype(_impl_.mdupsdownsanalysis_)*/nullptr
  , /*decltype(_impl_.mdindicatorsranking_)*/nullptr
  , /*decltype(_impl_.dynamicpacket_)*/nullptr
  , /*decltype(_impl_.mdvolumebyprice_)*/nullptr
  , /*decltype(_impl_.mdfundflowanalysis_)*/nullptr
  , /*decltype(_impl_.mdforex_)*/nullptr
  , /*decltype(_impl_.mdspot_)*/nullptr
  , /*decltype(_impl_.mdrate_)*/nullptr
  , /*decltype(_impl_.orderbooksnapshot_)*/nullptr
  , /*decltype(_impl_.orderbooksnapshotwithtick_)*/nullptr
  , /*decltype(_impl_.mdquote_)*/nullptr
  , /*decltype(_impl_.mdetfbasicinfo_)*/nullptr
  , /*decltype(_impl_.mdfiquote_)*/nullptr
  , /*decltype(_impl_.mdchipdistribution_)*/nullptr
  , /*decltype(_impl_.mdwarrant_)*/nullptr
  , /*decltype(_impl_.mdsecuritylending_)*/nullptr
  , /*decltype(_impl_.mdnews_)*/nullptr
  , /*decltype(_impl_.mdstaringresult_)*/nullptr
  , /*decltype(_impl_.mdderivedanalysis_)*/nullptr
  , /*decltype(_impl_.mdqbquote_)*/nullptr
  , /*decltype(_impl_.mdqbtransaction_)*/nullptr
  , /*decltype(_impl_.mdusaorder_)*/nullptr
  , /*decltype(_impl_.mdusatransaction_)*/nullptr
  , /*decltype(_impl_.mdslorder_)*/nullptr
  , /*decltype(_impl_.mdsltransaction_)*/nullptr
  , /*decltype(_impl_.mdhkgreymarket_)*/nullptr
  , /*decltype(_impl_.mdslindicativequote_)*/nullptr
  , /*decltype(_impl_.mdslstatistics_)*/nullptr
  , /*decltype(_impl_.mdusaquote_)*/nullptr
  , /*decltype(_impl_.mdslestimation_)*/nullptr
  , /*decltype(_impl_.mdcnexdeal_)*/nullptr
  , /*decltype(_impl_.mdcnexquote_)*/nullptr
  , /*decltype(_impl_.messagechannelnumber_)*/int64_t{0}
  , /*decltype(_impl_.marketdatatype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HtscMarketDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HtscMarketDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HtscMarketDataDefaultTypeInternal() {}
  union {
    HtscMarketData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HtscMarketDataDefaultTypeInternal _HtscMarketData_default_instance_;
PROTOBUF_CONSTEXPR MarketDataStream::MarketDataStream(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compresseddata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.marketdatalist_)*/nullptr
  , /*decltype(_impl_.originallength_)*/0
  , /*decltype(_impl_.iscompressed_)*/false
  , /*decltype(_impl_.isfinished_)*/false
  , /*decltype(_impl_.totalnumber_)*/0
  , /*decltype(_impl_.serial_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDataStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataStreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataStreamDefaultTypeInternal() {}
  union {
    MarketDataStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataStreamDefaultTypeInternal _MarketDataStream_default_instance_;
PROTOBUF_CONSTEXPR MarketDataList::MarketDataList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.marketdatas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDataListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataListDefaultTypeInternal() {}
  union {
    MarketDataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataListDefaultTypeInternal _MarketDataList_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_HtscMarketData_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_HtscMarketData_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_HtscMarketData_2eproto = nullptr;

const uint32_t TableStruct_HtscMarketData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.marketdatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.messagechannelnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdstock_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdindex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdbond_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdfund_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdoption_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdfuture_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdtransaction_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdkline_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdtwap_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdvwap_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdconstant_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdsimpletick_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdupsdownsanalysis_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdindicatorsranking_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.dynamicpacket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdvolumebyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdfundflowanalysis_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdforex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdspot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.orderbooksnapshot_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.orderbooksnapshotwithtick_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdetfbasicinfo_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdfiquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdchipdistribution_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdwarrant_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdsecuritylending_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdnews_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdstaringresult_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdderivedanalysis_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdqbquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdqbtransaction_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdusaorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdusatransaction_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdslorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdsltransaction_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdhkgreymarket_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdslindicativequote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdslstatistics_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdusaquote_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdslestimation_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdcnexdeal_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::HtscMarketData, _impl_.mdcnexquote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _impl_.iscompressed_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _impl_.originallength_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _impl_.compresseddata_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _impl_.marketdatalist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _impl_.totalnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _impl_.serial_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataStream, _impl_.isfinished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MarketDataList, _impl_.marketdatas_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::HtscMarketData)},
  { 53, -1, -1, sizeof(::com::htsc::mdc::insight::model::MarketDataStream)},
  { 66, -1, -1, sizeof(::com::htsc::mdc::insight::model::MarketDataList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_HtscMarketData_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MarketDataList_default_instance_._instance,
};

const char descriptor_table_protodef_HtscMarketData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024HtscMarketData.proto\022\032com.htsc.mdc.ins"
  "ight.model\032\025EMarketDataType.proto\032\rMDSto"
  "ck.proto\032\014MDBond.proto\032\014MDFund.proto\032\016MD"
  "Option.proto\032\rMDIndex.proto\032\016MDFuture.pr"
  "oto\032\023MDTransaction.proto\032\rMDOrder.proto\032"
  "\rADKLine.proto\032\014ADTwap.proto\032\014ADVwap.pro"
  "to\032\021MDBasicInfo.proto\032\022MDSimpleTick.prot"
  "o\032\030ADUpsDownsAnalysis.proto\032\031ADIndicator"
  "sRanking.proto\032\023DynamicPacket.proto\032\025ADV"
  "olumeByPrice.proto\032\030ADFundFlowAnalysis.p"
  "roto\032\rMDForex.proto\032\014MDSpot.proto\032\014MDRat"
  "e.proto\032\031ADOrderbookSnapshot.proto\032!ADOr"
  "derbookSnapshotWithTick.proto\032\rMDQuote.p"
  "roto\032\024MDETFBasicInfo.proto\032\017MDFIQuote.pr"
  "oto\032\030ADChipDistribution.proto\032\017MDWarrant"
  ".proto\032\027MDSecurityLending.proto\032\014ADNews."
  "proto\032\025ADStaringResult.proto\032\027ADDerivedA"
  "nalysis.proto\032\017MDQBQuote.proto\032\025MDQBTran"
  "saction.proto\032\026MDUSATransaction.proto\032\020M"
  "DUSAOrder.proto\032\025MDSLTransaction.proto\032\017"
  "MDSLOrder.proto\032\024MDHKGreyMarket.proto\032\031M"
  "DSLIndicativeQuote.proto\032\024MDSLStatistics"
  ".proto\032\020MDUSAQuote.proto\032\024MDSLEstimation"
  ".proto\032\020MDCnexDeal.proto\032\021MDCnexQuote.pr"
  "oto\"\232\027\n\016HtscMarketData\022C\n\016marketDataType"
  "\030\001 \001(\0162+.com.htsc.mdc.insight.model.EMar"
  "ketDataType\022\034\n\024MessageChannelNumber\030\002 \001("
  "\003\0224\n\007mdStock\030\n \001(\0132#.com.htsc.mdc.insigh"
  "t.model.MDStock\0224\n\007mdIndex\030\013 \001(\0132#.com.h"
  "tsc.mdc.insight.model.MDIndex\0222\n\006mdBond\030"
  "\014 \001(\0132\".com.htsc.mdc.insight.model.MDBon"
  "d\0222\n\006mdFund\030\r \001(\0132\".com.htsc.mdc.insight"
  ".model.MDFund\0226\n\010mdOption\030\016 \001(\0132$.com.ht"
  "sc.mdc.insight.model.MDOption\0226\n\010mdFutur"
  "e\030\017 \001(\0132$.com.htsc.mdc.insight.model.MDF"
  "uture\022@\n\rmdTransaction\030\020 \001(\0132).com.htsc."
  "mdc.insight.model.MDTransaction\0224\n\007mdOrd"
  "er\030\021 \001(\0132#.com.htsc.mdc.insight.model.MD"
  "Order\0224\n\007mdKLine\030\022 \001(\0132#.com.htsc.mdc.in"
  "sight.model.ADKLine\0222\n\006mdTwap\030\023 \001(\0132\".co"
  "m.htsc.mdc.insight.model.ADTwap\0222\n\006mdVwa"
  "p\030\024 \001(\0132\".com.htsc.mdc.insight.model.ADV"
  "wap\022;\n\nmdConstant\030\025 \001(\0132\'.com.htsc.mdc.i"
  "nsight.model.MDBasicInfo\022>\n\014mdSimpleTick"
  "\030\026 \001(\0132(.com.htsc.mdc.insight.model.MDSi"
  "mpleTick\022J\n\022mdUpsDownsAnalysis\030\027 \001(\0132..c"
  "om.htsc.mdc.insight.model.ADUpsDownsAnal"
  "ysis\022L\n\023mdIndicatorsRanking\030\030 \001(\0132/.com."
  "htsc.mdc.insight.model.ADIndicatorsRanki"
  "ng\022@\n\rdynamicPacket\030\031 \001(\0132).com.htsc.mdc"
  ".insight.model.DynamicPacket\022D\n\017mdVolume"
  "ByPrice\030\032 \001(\0132+.com.htsc.mdc.insight.mod"
  "el.ADVolumeByPrice\022J\n\022mdFundFlowAnalysis"
  "\030\033 \001(\0132..com.htsc.mdc.insight.model.ADFu"
  "ndFlowAnalysis\0224\n\007mdForex\030\034 \001(\0132#.com.ht"
  "sc.mdc.insight.model.MDForex\0222\n\006mdSpot\030\035"
  " \001(\0132\".com.htsc.mdc.insight.model.MDSpot"
  "\0222\n\006mdRate\030\036 \001(\0132\".com.htsc.mdc.insight."
  "model.MDRate\022J\n\021orderbookSnapshot\030\037 \001(\0132"
  "/.com.htsc.mdc.insight.model.ADOrderbook"
  "Snapshot\022Z\n\031orderbookSnapshotWithTick\030  "
  "\001(\01327.com.htsc.mdc.insight.model.ADOrder"
  "bookSnapshotWithTick\0224\n\007mdQuote\030! \001(\0132#."
  "com.htsc.mdc.insight.model.MDQuote\022B\n\016md"
  "ETFBasicInfo\030\" \001(\0132*.com.htsc.mdc.insigh"
  "t.model.MDETFBasicInfo\0228\n\tmdFIQuote\030# \001("
  "\0132%.com.htsc.mdc.insight.model.MDFIQuote"
  "\022J\n\022mdChipDistribution\030$ \001(\0132..com.htsc."
  "mdc.insight.model.ADChipDistribution\0228\n\t"
  "mdWarrant\030% \001(\0132%.com.htsc.mdc.insight.m"
  "odel.MDWarrant\022H\n\021mdSecurityLending\030& \001("
  "\0132-.com.htsc.mdc.insight.model.MDSecurit"
  "yLending\0222\n\006mdNews\030\' \001(\0132\".com.htsc.mdc."
  "insight.model.ADNews\022D\n\017mdStaringResult\030"
  "( \001(\0132+.com.htsc.mdc.insight.model.ADSta"
  "ringResult\022H\n\021mdDerivedAnalysis\030) \001(\0132-."
  "com.htsc.mdc.insight.model.ADDerivedAnal"
  "ysis\0228\n\tmdQBQuote\030* \001(\0132%.com.htsc.mdc.i"
  "nsight.model.MDQBQuote\022D\n\017mdQBTransactio"
  "n\030+ \001(\0132+.com.htsc.mdc.insight.model.MDQ"
  "BTransaction\022:\n\nmdUSAOrder\030, \001(\0132&.com.h"
  "tsc.mdc.insight.model.MDUSAOrder\022F\n\020mdUS"
  "ATransaction\030- \001(\0132,.com.htsc.mdc.insigh"
  "t.model.MDUSATransaction\0228\n\tmdSLOrder\030. "
  "\001(\0132%.com.htsc.mdc.insight.model.MDSLOrd"
  "er\022D\n\017mdSLTransaction\030/ \001(\0132+.com.htsc.m"
  "dc.insight.model.MDSLTransaction\022B\n\016mdHK"
  "GreyMarket\0300 \001(\0132*.com.htsc.mdc.insight."
  "model.MDHKGreyMarket\022L\n\023mdSLIndicativeQu"
  "ote\0301 \001(\0132/.com.htsc.mdc.insight.model.M"
  "DSLIndicativeQuote\022B\n\016mdSLStatistics\0302 \001"
  "(\0132*.com.htsc.mdc.insight.model.MDSLStat"
  "istics\022:\n\nmdUSAQuote\0303 \001(\0132&.com.htsc.md"
  "c.insight.model.MDUSAQuote\022B\n\016mdSLEstima"
  "tion\0304 \001(\0132*.com.htsc.mdc.insight.model."
  "MDSLEstimation\022:\n\nmdCnexDeal\0305 \001(\0132&.com"
  ".htsc.mdc.insight.model.MDCnexDeal\022<\n\013md"
  "CnexQuote\0306 \001(\0132\'.com.htsc.mdc.insight.m"
  "odel.MDCnexQuote\"\325\001\n\020MarketDataStream\022\024\n"
  "\014isCompressed\030\001 \001(\010\022\026\n\016originalLength\030\002 "
  "\001(\005\022\026\n\016compressedData\030\003 \001(\014\022B\n\016marketDat"
  "aList\030\004 \001(\0132*.com.htsc.mdc.insight.model"
  ".MarketDataList\022\023\n\013totalNumber\030\005 \001(\005\022\016\n\006"
  "serial\030\006 \001(\005\022\022\n\nisFinished\030\007 \001(\010\"Q\n\016Mark"
  "etDataList\022\?\n\013marketDatas\030\001 \003(\0132*.com.ht"
  "sc.mdc.insight.model.HtscMarketDataB2\n\032c"
  "om.htsc.mdc.insight.modelB\017MarketDataPro"
  "toH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_HtscMarketData_2eproto_deps[46] = {
  &::descriptor_table_ADChipDistribution_2eproto,
  &::descriptor_table_ADDerivedAnalysis_2eproto,
  &::descriptor_table_ADFundFlowAnalysis_2eproto,
  &::descriptor_table_ADIndicatorsRanking_2eproto,
  &::descriptor_table_ADKLine_2eproto,
  &::descriptor_table_ADNews_2eproto,
  &::descriptor_table_ADOrderbookSnapshot_2eproto,
  &::descriptor_table_ADOrderbookSnapshotWithTick_2eproto,
  &::descriptor_table_ADStaringResult_2eproto,
  &::descriptor_table_ADTwap_2eproto,
  &::descriptor_table_ADUpsDownsAnalysis_2eproto,
  &::descriptor_table_ADVolumeByPrice_2eproto,
  &::descriptor_table_ADVwap_2eproto,
  &::descriptor_table_DynamicPacket_2eproto,
  &::descriptor_table_EMarketDataType_2eproto,
  &::descriptor_table_MDBasicInfo_2eproto,
  &::descriptor_table_MDBond_2eproto,
  &::descriptor_table_MDCnexDeal_2eproto,
  &::descriptor_table_MDCnexQuote_2eproto,
  &::descriptor_table_MDETFBasicInfo_2eproto,
  &::descriptor_table_MDFIQuote_2eproto,
  &::descriptor_table_MDForex_2eproto,
  &::descriptor_table_MDFund_2eproto,
  &::descriptor_table_MDFuture_2eproto,
  &::descriptor_table_MDHKGreyMarket_2eproto,
  &::descriptor_table_MDIndex_2eproto,
  &::descriptor_table_MDOption_2eproto,
  &::descriptor_table_MDOrder_2eproto,
  &::descriptor_table_MDQBQuote_2eproto,
  &::descriptor_table_MDQBTransaction_2eproto,
  &::descriptor_table_MDQuote_2eproto,
  &::descriptor_table_MDRate_2eproto,
  &::descriptor_table_MDSLEstimation_2eproto,
  &::descriptor_table_MDSLIndicativeQuote_2eproto,
  &::descriptor_table_MDSLOrder_2eproto,
  &::descriptor_table_MDSLStatistics_2eproto,
  &::descriptor_table_MDSLTransaction_2eproto,
  &::descriptor_table_MDSecurityLending_2eproto,
  &::descriptor_table_MDSimpleTick_2eproto,
  &::descriptor_table_MDSpot_2eproto,
  &::descriptor_table_MDStock_2eproto,
  &::descriptor_table_MDTransaction_2eproto,
  &::descriptor_table_MDUSAOrder_2eproto,
  &::descriptor_table_MDUSAQuote_2eproto,
  &::descriptor_table_MDUSATransaction_2eproto,
  &::descriptor_table_MDWarrant_2eproto,
};
static ::_pbi::once_flag descriptor_table_HtscMarketData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_HtscMarketData_2eproto = {
    false, false, 4295, descriptor_table_protodef_HtscMarketData_2eproto,
    "HtscMarketData.proto",
    &descriptor_table_HtscMarketData_2eproto_once, descriptor_table_HtscMarketData_2eproto_deps, 46, 3,
    schemas, file_default_instances, TableStruct_HtscMarketData_2eproto::offsets,
    file_level_metadata_HtscMarketData_2eproto, file_level_enum_descriptors_HtscMarketData_2eproto,
    file_level_service_descriptors_HtscMarketData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_HtscMarketData_2eproto_getter() {
  return &descriptor_table_HtscMarketData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_HtscMarketData_2eproto(&descriptor_table_HtscMarketData_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class HtscMarketData::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::MDStock& mdstock(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDIndex& mdindex(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDBond& mdbond(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDFund& mdfund(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDOption& mdoption(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDFuture& mdfuture(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDTransaction& mdtransaction(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDOrder& mdorder(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADKLine& mdkline(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADTwap& mdtwap(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADVwap& mdvwap(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDBasicInfo& mdconstant(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSimpleTick& mdsimpletick(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis& mdupsdownsanalysis(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADIndicatorsRanking& mdindicatorsranking(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::DynamicPacket& dynamicpacket(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADVolumeByPrice& mdvolumebyprice(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowAnalysis& mdfundflowanalysis(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDForex& mdforex(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSpot& mdspot(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDRate& mdrate(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADOrderbookSnapshot& orderbooksnapshot(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick& orderbooksnapshotwithtick(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDQuote& mdquote(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDETFBasicInfo& mdetfbasicinfo(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDFIQuote& mdfiquote(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADChipDistribution& mdchipdistribution(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDWarrant& mdwarrant(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSecurityLending& mdsecuritylending(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADNews& mdnews(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADStaringResult& mdstaringresult(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::ADDerivedAnalysis& mdderivedanalysis(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDQBQuote& mdqbquote(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDQBTransaction& mdqbtransaction(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDUSAOrder& mdusaorder(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDUSATransaction& mdusatransaction(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLOrder& mdslorder(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLTransaction& mdsltransaction(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDHKGreyMarket& mdhkgreymarket(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLIndicativeQuote& mdslindicativequote(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLStatistics& mdslstatistics(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDUSAQuote& mdusaquote(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDSLEstimation& mdslestimation(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDCnexDeal& mdcnexdeal(const HtscMarketData* msg);
  static const ::com::htsc::mdc::insight::model::MDCnexQuote& mdcnexquote(const HtscMarketData* msg);
};

const ::com::htsc::mdc::insight::model::MDStock&
HtscMarketData::_Internal::mdstock(const HtscMarketData* msg) {
  return *msg->_impl_.mdstock_;
}
const ::com::htsc::mdc::insight::model::MDIndex&
HtscMarketData::_Internal::mdindex(const HtscMarketData* msg) {
  return *msg->_impl_.mdindex_;
}
const ::com::htsc::mdc::insight::model::MDBond&
HtscMarketData::_Internal::mdbond(const HtscMarketData* msg) {
  return *msg->_impl_.mdbond_;
}
const ::com::htsc::mdc::insight::model::MDFund&
HtscMarketData::_Internal::mdfund(const HtscMarketData* msg) {
  return *msg->_impl_.mdfund_;
}
const ::com::htsc::mdc::insight::model::MDOption&
HtscMarketData::_Internal::mdoption(const HtscMarketData* msg) {
  return *msg->_impl_.mdoption_;
}
const ::com::htsc::mdc::insight::model::MDFuture&
HtscMarketData::_Internal::mdfuture(const HtscMarketData* msg) {
  return *msg->_impl_.mdfuture_;
}
const ::com::htsc::mdc::insight::model::MDTransaction&
HtscMarketData::_Internal::mdtransaction(const HtscMarketData* msg) {
  return *msg->_impl_.mdtransaction_;
}
const ::com::htsc::mdc::insight::model::MDOrder&
HtscMarketData::_Internal::mdorder(const HtscMarketData* msg) {
  return *msg->_impl_.mdorder_;
}
const ::com::htsc::mdc::insight::model::ADKLine&
HtscMarketData::_Internal::mdkline(const HtscMarketData* msg) {
  return *msg->_impl_.mdkline_;
}
const ::com::htsc::mdc::insight::model::ADTwap&
HtscMarketData::_Internal::mdtwap(const HtscMarketData* msg) {
  return *msg->_impl_.mdtwap_;
}
const ::com::htsc::mdc::insight::model::ADVwap&
HtscMarketData::_Internal::mdvwap(const HtscMarketData* msg) {
  return *msg->_impl_.mdvwap_;
}
const ::com::htsc::mdc::insight::model::MDBasicInfo&
HtscMarketData::_Internal::mdconstant(const HtscMarketData* msg) {
  return *msg->_impl_.mdconstant_;
}
const ::com::htsc::mdc::insight::model::MDSimpleTick&
HtscMarketData::_Internal::mdsimpletick(const HtscMarketData* msg) {
  return *msg->_impl_.mdsimpletick_;
}
const ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis&
HtscMarketData::_Internal::mdupsdownsanalysis(const HtscMarketData* msg) {
  return *msg->_impl_.mdupsdownsanalysis_;
}
const ::com::htsc::mdc::insight::model::ADIndicatorsRanking&
HtscMarketData::_Internal::mdindicatorsranking(const HtscMarketData* msg) {
  return *msg->_impl_.mdindicatorsranking_;
}
const ::com::htsc::mdc::insight::model::DynamicPacket&
HtscMarketData::_Internal::dynamicpacket(const HtscMarketData* msg) {
  return *msg->_impl_.dynamicpacket_;
}
const ::com::htsc::mdc::insight::model::ADVolumeByPrice&
HtscMarketData::_Internal::mdvolumebyprice(const HtscMarketData* msg) {
  return *msg->_impl_.mdvolumebyprice_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowAnalysis&
HtscMarketData::_Internal::mdfundflowanalysis(const HtscMarketData* msg) {
  return *msg->_impl_.mdfundflowanalysis_;
}
const ::com::htsc::mdc::insight::model::MDForex&
HtscMarketData::_Internal::mdforex(const HtscMarketData* msg) {
  return *msg->_impl_.mdforex_;
}
const ::com::htsc::mdc::insight::model::MDSpot&
HtscMarketData::_Internal::mdspot(const HtscMarketData* msg) {
  return *msg->_impl_.mdspot_;
}
const ::com::htsc::mdc::insight::model::MDRate&
HtscMarketData::_Internal::mdrate(const HtscMarketData* msg) {
  return *msg->_impl_.mdrate_;
}
const ::com::htsc::mdc::insight::model::ADOrderbookSnapshot&
HtscMarketData::_Internal::orderbooksnapshot(const HtscMarketData* msg) {
  return *msg->_impl_.orderbooksnapshot_;
}
const ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick&
HtscMarketData::_Internal::orderbooksnapshotwithtick(const HtscMarketData* msg) {
  return *msg->_impl_.orderbooksnapshotwithtick_;
}
const ::com::htsc::mdc::insight::model::MDQuote&
HtscMarketData::_Internal::mdquote(const HtscMarketData* msg) {
  return *msg->_impl_.mdquote_;
}
const ::com::htsc::mdc::insight::model::MDETFBasicInfo&
HtscMarketData::_Internal::mdetfbasicinfo(const HtscMarketData* msg) {
  return *msg->_impl_.mdetfbasicinfo_;
}
const ::com::htsc::mdc::insight::model::MDFIQuote&
HtscMarketData::_Internal::mdfiquote(const HtscMarketData* msg) {
  return *msg->_impl_.mdfiquote_;
}
const ::com::htsc::mdc::insight::model::ADChipDistribution&
HtscMarketData::_Internal::mdchipdistribution(const HtscMarketData* msg) {
  return *msg->_impl_.mdchipdistribution_;
}
const ::com::htsc::mdc::insight::model::MDWarrant&
HtscMarketData::_Internal::mdwarrant(const HtscMarketData* msg) {
  return *msg->_impl_.mdwarrant_;
}
const ::com::htsc::mdc::insight::model::MDSecurityLending&
HtscMarketData::_Internal::mdsecuritylending(const HtscMarketData* msg) {
  return *msg->_impl_.mdsecuritylending_;
}
const ::com::htsc::mdc::insight::model::ADNews&
HtscMarketData::_Internal::mdnews(const HtscMarketData* msg) {
  return *msg->_impl_.mdnews_;
}
const ::com::htsc::mdc::insight::model::ADStaringResult&
HtscMarketData::_Internal::mdstaringresult(const HtscMarketData* msg) {
  return *msg->_impl_.mdstaringresult_;
}
const ::com::htsc::mdc::insight::model::ADDerivedAnalysis&
HtscMarketData::_Internal::mdderivedanalysis(const HtscMarketData* msg) {
  return *msg->_impl_.mdderivedanalysis_;
}
const ::com::htsc::mdc::insight::model::MDQBQuote&
HtscMarketData::_Internal::mdqbquote(const HtscMarketData* msg) {
  return *msg->_impl_.mdqbquote_;
}
const ::com::htsc::mdc::insight::model::MDQBTransaction&
HtscMarketData::_Internal::mdqbtransaction(const HtscMarketData* msg) {
  return *msg->_impl_.mdqbtransaction_;
}
const ::com::htsc::mdc::insight::model::MDUSAOrder&
HtscMarketData::_Internal::mdusaorder(const HtscMarketData* msg) {
  return *msg->_impl_.mdusaorder_;
}
const ::com::htsc::mdc::insight::model::MDUSATransaction&
HtscMarketData::_Internal::mdusatransaction(const HtscMarketData* msg) {
  return *msg->_impl_.mdusatransaction_;
}
const ::com::htsc::mdc::insight::model::MDSLOrder&
HtscMarketData::_Internal::mdslorder(const HtscMarketData* msg) {
  return *msg->_impl_.mdslorder_;
}
const ::com::htsc::mdc::insight::model::MDSLTransaction&
HtscMarketData::_Internal::mdsltransaction(const HtscMarketData* msg) {
  return *msg->_impl_.mdsltransaction_;
}
const ::com::htsc::mdc::insight::model::MDHKGreyMarket&
HtscMarketData::_Internal::mdhkgreymarket(const HtscMarketData* msg) {
  return *msg->_impl_.mdhkgreymarket_;
}
const ::com::htsc::mdc::insight::model::MDSLIndicativeQuote&
HtscMarketData::_Internal::mdslindicativequote(const HtscMarketData* msg) {
  return *msg->_impl_.mdslindicativequote_;
}
const ::com::htsc::mdc::insight::model::MDSLStatistics&
HtscMarketData::_Internal::mdslstatistics(const HtscMarketData* msg) {
  return *msg->_impl_.mdslstatistics_;
}
const ::com::htsc::mdc::insight::model::MDUSAQuote&
HtscMarketData::_Internal::mdusaquote(const HtscMarketData* msg) {
  return *msg->_impl_.mdusaquote_;
}
const ::com::htsc::mdc::insight::model::MDSLEstimation&
HtscMarketData::_Internal::mdslestimation(const HtscMarketData* msg) {
  return *msg->_impl_.mdslestimation_;
}
const ::com::htsc::mdc::insight::model::MDCnexDeal&
HtscMarketData::_Internal::mdcnexdeal(const HtscMarketData* msg) {
  return *msg->_impl_.mdcnexdeal_;
}
const ::com::htsc::mdc::insight::model::MDCnexQuote&
HtscMarketData::_Internal::mdcnexquote(const HtscMarketData* msg) {
  return *msg->_impl_.mdcnexquote_;
}
void HtscMarketData::clear_mdstock() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdstock_ != nullptr) {
    delete _impl_.mdstock_;
  }
  _impl_.mdstock_ = nullptr;
}
void HtscMarketData::clear_mdindex() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdindex_ != nullptr) {
    delete _impl_.mdindex_;
  }
  _impl_.mdindex_ = nullptr;
}
void HtscMarketData::clear_mdbond() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdbond_ != nullptr) {
    delete _impl_.mdbond_;
  }
  _impl_.mdbond_ = nullptr;
}
void HtscMarketData::clear_mdfund() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdfund_ != nullptr) {
    delete _impl_.mdfund_;
  }
  _impl_.mdfund_ = nullptr;
}
void HtscMarketData::clear_mdoption() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdoption_ != nullptr) {
    delete _impl_.mdoption_;
  }
  _impl_.mdoption_ = nullptr;
}
void HtscMarketData::clear_mdfuture() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdfuture_ != nullptr) {
    delete _impl_.mdfuture_;
  }
  _impl_.mdfuture_ = nullptr;
}
void HtscMarketData::clear_mdtransaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdtransaction_ != nullptr) {
    delete _impl_.mdtransaction_;
  }
  _impl_.mdtransaction_ = nullptr;
}
void HtscMarketData::clear_mdorder() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdorder_ != nullptr) {
    delete _impl_.mdorder_;
  }
  _impl_.mdorder_ = nullptr;
}
void HtscMarketData::clear_mdkline() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdkline_ != nullptr) {
    delete _impl_.mdkline_;
  }
  _impl_.mdkline_ = nullptr;
}
void HtscMarketData::clear_mdtwap() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdtwap_ != nullptr) {
    delete _impl_.mdtwap_;
  }
  _impl_.mdtwap_ = nullptr;
}
void HtscMarketData::clear_mdvwap() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdvwap_ != nullptr) {
    delete _impl_.mdvwap_;
  }
  _impl_.mdvwap_ = nullptr;
}
void HtscMarketData::clear_mdconstant() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdconstant_ != nullptr) {
    delete _impl_.mdconstant_;
  }
  _impl_.mdconstant_ = nullptr;
}
void HtscMarketData::clear_mdsimpletick() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdsimpletick_ != nullptr) {
    delete _impl_.mdsimpletick_;
  }
  _impl_.mdsimpletick_ = nullptr;
}
void HtscMarketData::clear_mdupsdownsanalysis() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdupsdownsanalysis_ != nullptr) {
    delete _impl_.mdupsdownsanalysis_;
  }
  _impl_.mdupsdownsanalysis_ = nullptr;
}
void HtscMarketData::clear_mdindicatorsranking() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdindicatorsranking_ != nullptr) {
    delete _impl_.mdindicatorsranking_;
  }
  _impl_.mdindicatorsranking_ = nullptr;
}
void HtscMarketData::clear_dynamicpacket() {
  if (GetArenaForAllocation() == nullptr && _impl_.dynamicpacket_ != nullptr) {
    delete _impl_.dynamicpacket_;
  }
  _impl_.dynamicpacket_ = nullptr;
}
void HtscMarketData::clear_mdvolumebyprice() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdvolumebyprice_ != nullptr) {
    delete _impl_.mdvolumebyprice_;
  }
  _impl_.mdvolumebyprice_ = nullptr;
}
void HtscMarketData::clear_mdfundflowanalysis() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdfundflowanalysis_ != nullptr) {
    delete _impl_.mdfundflowanalysis_;
  }
  _impl_.mdfundflowanalysis_ = nullptr;
}
void HtscMarketData::clear_mdforex() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdforex_ != nullptr) {
    delete _impl_.mdforex_;
  }
  _impl_.mdforex_ = nullptr;
}
void HtscMarketData::clear_mdspot() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdspot_ != nullptr) {
    delete _impl_.mdspot_;
  }
  _impl_.mdspot_ = nullptr;
}
void HtscMarketData::clear_mdrate() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdrate_ != nullptr) {
    delete _impl_.mdrate_;
  }
  _impl_.mdrate_ = nullptr;
}
void HtscMarketData::clear_orderbooksnapshot() {
  if (GetArenaForAllocation() == nullptr && _impl_.orderbooksnapshot_ != nullptr) {
    delete _impl_.orderbooksnapshot_;
  }
  _impl_.orderbooksnapshot_ = nullptr;
}
void HtscMarketData::clear_orderbooksnapshotwithtick() {
  if (GetArenaForAllocation() == nullptr && _impl_.orderbooksnapshotwithtick_ != nullptr) {
    delete _impl_.orderbooksnapshotwithtick_;
  }
  _impl_.orderbooksnapshotwithtick_ = nullptr;
}
void HtscMarketData::clear_mdquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdquote_ != nullptr) {
    delete _impl_.mdquote_;
  }
  _impl_.mdquote_ = nullptr;
}
void HtscMarketData::clear_mdetfbasicinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdetfbasicinfo_ != nullptr) {
    delete _impl_.mdetfbasicinfo_;
  }
  _impl_.mdetfbasicinfo_ = nullptr;
}
void HtscMarketData::clear_mdfiquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdfiquote_ != nullptr) {
    delete _impl_.mdfiquote_;
  }
  _impl_.mdfiquote_ = nullptr;
}
void HtscMarketData::clear_mdchipdistribution() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdchipdistribution_ != nullptr) {
    delete _impl_.mdchipdistribution_;
  }
  _impl_.mdchipdistribution_ = nullptr;
}
void HtscMarketData::clear_mdwarrant() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdwarrant_ != nullptr) {
    delete _impl_.mdwarrant_;
  }
  _impl_.mdwarrant_ = nullptr;
}
void HtscMarketData::clear_mdsecuritylending() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdsecuritylending_ != nullptr) {
    delete _impl_.mdsecuritylending_;
  }
  _impl_.mdsecuritylending_ = nullptr;
}
void HtscMarketData::clear_mdnews() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdnews_ != nullptr) {
    delete _impl_.mdnews_;
  }
  _impl_.mdnews_ = nullptr;
}
void HtscMarketData::clear_mdstaringresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdstaringresult_ != nullptr) {
    delete _impl_.mdstaringresult_;
  }
  _impl_.mdstaringresult_ = nullptr;
}
void HtscMarketData::clear_mdderivedanalysis() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdderivedanalysis_ != nullptr) {
    delete _impl_.mdderivedanalysis_;
  }
  _impl_.mdderivedanalysis_ = nullptr;
}
void HtscMarketData::clear_mdqbquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdqbquote_ != nullptr) {
    delete _impl_.mdqbquote_;
  }
  _impl_.mdqbquote_ = nullptr;
}
void HtscMarketData::clear_mdqbtransaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdqbtransaction_ != nullptr) {
    delete _impl_.mdqbtransaction_;
  }
  _impl_.mdqbtransaction_ = nullptr;
}
void HtscMarketData::clear_mdusaorder() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdusaorder_ != nullptr) {
    delete _impl_.mdusaorder_;
  }
  _impl_.mdusaorder_ = nullptr;
}
void HtscMarketData::clear_mdusatransaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdusatransaction_ != nullptr) {
    delete _impl_.mdusatransaction_;
  }
  _impl_.mdusatransaction_ = nullptr;
}
void HtscMarketData::clear_mdslorder() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdslorder_ != nullptr) {
    delete _impl_.mdslorder_;
  }
  _impl_.mdslorder_ = nullptr;
}
void HtscMarketData::clear_mdsltransaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdsltransaction_ != nullptr) {
    delete _impl_.mdsltransaction_;
  }
  _impl_.mdsltransaction_ = nullptr;
}
void HtscMarketData::clear_mdhkgreymarket() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdhkgreymarket_ != nullptr) {
    delete _impl_.mdhkgreymarket_;
  }
  _impl_.mdhkgreymarket_ = nullptr;
}
void HtscMarketData::clear_mdslindicativequote() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdslindicativequote_ != nullptr) {
    delete _impl_.mdslindicativequote_;
  }
  _impl_.mdslindicativequote_ = nullptr;
}
void HtscMarketData::clear_mdslstatistics() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdslstatistics_ != nullptr) {
    delete _impl_.mdslstatistics_;
  }
  _impl_.mdslstatistics_ = nullptr;
}
void HtscMarketData::clear_mdusaquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdusaquote_ != nullptr) {
    delete _impl_.mdusaquote_;
  }
  _impl_.mdusaquote_ = nullptr;
}
void HtscMarketData::clear_mdslestimation() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdslestimation_ != nullptr) {
    delete _impl_.mdslestimation_;
  }
  _impl_.mdslestimation_ = nullptr;
}
void HtscMarketData::clear_mdcnexdeal() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdcnexdeal_ != nullptr) {
    delete _impl_.mdcnexdeal_;
  }
  _impl_.mdcnexdeal_ = nullptr;
}
void HtscMarketData::clear_mdcnexquote() {
  if (GetArenaForAllocation() == nullptr && _impl_.mdcnexquote_ != nullptr) {
    delete _impl_.mdcnexquote_;
  }
  _impl_.mdcnexquote_ = nullptr;
}
HtscMarketData::HtscMarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.HtscMarketData)
}
HtscMarketData::HtscMarketData(const HtscMarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HtscMarketData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mdstock_){nullptr}
    , decltype(_impl_.mdindex_){nullptr}
    , decltype(_impl_.mdbond_){nullptr}
    , decltype(_impl_.mdfund_){nullptr}
    , decltype(_impl_.mdoption_){nullptr}
    , decltype(_impl_.mdfuture_){nullptr}
    , decltype(_impl_.mdtransaction_){nullptr}
    , decltype(_impl_.mdorder_){nullptr}
    , decltype(_impl_.mdkline_){nullptr}
    , decltype(_impl_.mdtwap_){nullptr}
    , decltype(_impl_.mdvwap_){nullptr}
    , decltype(_impl_.mdconstant_){nullptr}
    , decltype(_impl_.mdsimpletick_){nullptr}
    , decltype(_impl_.mdupsdownsanalysis_){nullptr}
    , decltype(_impl_.mdindicatorsranking_){nullptr}
    , decltype(_impl_.dynamicpacket_){nullptr}
    , decltype(_impl_.mdvolumebyprice_){nullptr}
    , decltype(_impl_.mdfundflowanalysis_){nullptr}
    , decltype(_impl_.mdforex_){nullptr}
    , decltype(_impl_.mdspot_){nullptr}
    , decltype(_impl_.mdrate_){nullptr}
    , decltype(_impl_.orderbooksnapshot_){nullptr}
    , decltype(_impl_.orderbooksnapshotwithtick_){nullptr}
    , decltype(_impl_.mdquote_){nullptr}
    , decltype(_impl_.mdetfbasicinfo_){nullptr}
    , decltype(_impl_.mdfiquote_){nullptr}
    , decltype(_impl_.mdchipdistribution_){nullptr}
    , decltype(_impl_.mdwarrant_){nullptr}
    , decltype(_impl_.mdsecuritylending_){nullptr}
    , decltype(_impl_.mdnews_){nullptr}
    , decltype(_impl_.mdstaringresult_){nullptr}
    , decltype(_impl_.mdderivedanalysis_){nullptr}
    , decltype(_impl_.mdqbquote_){nullptr}
    , decltype(_impl_.mdqbtransaction_){nullptr}
    , decltype(_impl_.mdusaorder_){nullptr}
    , decltype(_impl_.mdusatransaction_){nullptr}
    , decltype(_impl_.mdslorder_){nullptr}
    , decltype(_impl_.mdsltransaction_){nullptr}
    , decltype(_impl_.mdhkgreymarket_){nullptr}
    , decltype(_impl_.mdslindicativequote_){nullptr}
    , decltype(_impl_.mdslstatistics_){nullptr}
    , decltype(_impl_.mdusaquote_){nullptr}
    , decltype(_impl_.mdslestimation_){nullptr}
    , decltype(_impl_.mdcnexdeal_){nullptr}
    , decltype(_impl_.mdcnexquote_){nullptr}
    , decltype(_impl_.messagechannelnumber_){}
    , decltype(_impl_.marketdatatype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mdstock()) {
    _this->_impl_.mdstock_ = new ::com::htsc::mdc::insight::model::MDStock(*from._impl_.mdstock_);
  }
  if (from._internal_has_mdindex()) {
    _this->_impl_.mdindex_ = new ::com::htsc::mdc::insight::model::MDIndex(*from._impl_.mdindex_);
  }
  if (from._internal_has_mdbond()) {
    _this->_impl_.mdbond_ = new ::com::htsc::mdc::insight::model::MDBond(*from._impl_.mdbond_);
  }
  if (from._internal_has_mdfund()) {
    _this->_impl_.mdfund_ = new ::com::htsc::mdc::insight::model::MDFund(*from._impl_.mdfund_);
  }
  if (from._internal_has_mdoption()) {
    _this->_impl_.mdoption_ = new ::com::htsc::mdc::insight::model::MDOption(*from._impl_.mdoption_);
  }
  if (from._internal_has_mdfuture()) {
    _this->_impl_.mdfuture_ = new ::com::htsc::mdc::insight::model::MDFuture(*from._impl_.mdfuture_);
  }
  if (from._internal_has_mdtransaction()) {
    _this->_impl_.mdtransaction_ = new ::com::htsc::mdc::insight::model::MDTransaction(*from._impl_.mdtransaction_);
  }
  if (from._internal_has_mdorder()) {
    _this->_impl_.mdorder_ = new ::com::htsc::mdc::insight::model::MDOrder(*from._impl_.mdorder_);
  }
  if (from._internal_has_mdkline()) {
    _this->_impl_.mdkline_ = new ::com::htsc::mdc::insight::model::ADKLine(*from._impl_.mdkline_);
  }
  if (from._internal_has_mdtwap()) {
    _this->_impl_.mdtwap_ = new ::com::htsc::mdc::insight::model::ADTwap(*from._impl_.mdtwap_);
  }
  if (from._internal_has_mdvwap()) {
    _this->_impl_.mdvwap_ = new ::com::htsc::mdc::insight::model::ADVwap(*from._impl_.mdvwap_);
  }
  if (from._internal_has_mdconstant()) {
    _this->_impl_.mdconstant_ = new ::com::htsc::mdc::insight::model::MDBasicInfo(*from._impl_.mdconstant_);
  }
  if (from._internal_has_mdsimpletick()) {
    _this->_impl_.mdsimpletick_ = new ::com::htsc::mdc::insight::model::MDSimpleTick(*from._impl_.mdsimpletick_);
  }
  if (from._internal_has_mdupsdownsanalysis()) {
    _this->_impl_.mdupsdownsanalysis_ = new ::com::htsc::mdc::insight::model::ADUpsDownsAnalysis(*from._impl_.mdupsdownsanalysis_);
  }
  if (from._internal_has_mdindicatorsranking()) {
    _this->_impl_.mdindicatorsranking_ = new ::com::htsc::mdc::insight::model::ADIndicatorsRanking(*from._impl_.mdindicatorsranking_);
  }
  if (from._internal_has_dynamicpacket()) {
    _this->_impl_.dynamicpacket_ = new ::com::htsc::mdc::insight::model::DynamicPacket(*from._impl_.dynamicpacket_);
  }
  if (from._internal_has_mdvolumebyprice()) {
    _this->_impl_.mdvolumebyprice_ = new ::com::htsc::mdc::insight::model::ADVolumeByPrice(*from._impl_.mdvolumebyprice_);
  }
  if (from._internal_has_mdfundflowanalysis()) {
    _this->_impl_.mdfundflowanalysis_ = new ::com::htsc::mdc::insight::model::ADFundFlowAnalysis(*from._impl_.mdfundflowanalysis_);
  }
  if (from._internal_has_mdforex()) {
    _this->_impl_.mdforex_ = new ::com::htsc::mdc::insight::model::MDForex(*from._impl_.mdforex_);
  }
  if (from._internal_has_mdspot()) {
    _this->_impl_.mdspot_ = new ::com::htsc::mdc::insight::model::MDSpot(*from._impl_.mdspot_);
  }
  if (from._internal_has_mdrate()) {
    _this->_impl_.mdrate_ = new ::com::htsc::mdc::insight::model::MDRate(*from._impl_.mdrate_);
  }
  if (from._internal_has_orderbooksnapshot()) {
    _this->_impl_.orderbooksnapshot_ = new ::com::htsc::mdc::insight::model::ADOrderbookSnapshot(*from._impl_.orderbooksnapshot_);
  }
  if (from._internal_has_orderbooksnapshotwithtick()) {
    _this->_impl_.orderbooksnapshotwithtick_ = new ::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick(*from._impl_.orderbooksnapshotwithtick_);
  }
  if (from._internal_has_mdquote()) {
    _this->_impl_.mdquote_ = new ::com::htsc::mdc::insight::model::MDQuote(*from._impl_.mdquote_);
  }
  if (from._internal_has_mdetfbasicinfo()) {
    _this->_impl_.mdetfbasicinfo_ = new ::com::htsc::mdc::insight::model::MDETFBasicInfo(*from._impl_.mdetfbasicinfo_);
  }
  if (from._internal_has_mdfiquote()) {
    _this->_impl_.mdfiquote_ = new ::com::htsc::mdc::insight::model::MDFIQuote(*from._impl_.mdfiquote_);
  }
  if (from._internal_has_mdchipdistribution()) {
    _this->_impl_.mdchipdistribution_ = new ::com::htsc::mdc::insight::model::ADChipDistribution(*from._impl_.mdchipdistribution_);
  }
  if (from._internal_has_mdwarrant()) {
    _this->_impl_.mdwarrant_ = new ::com::htsc::mdc::insight::model::MDWarrant(*from._impl_.mdwarrant_);
  }
  if (from._internal_has_mdsecuritylending()) {
    _this->_impl_.mdsecuritylending_ = new ::com::htsc::mdc::insight::model::MDSecurityLending(*from._impl_.mdsecuritylending_);
  }
  if (from._internal_has_mdnews()) {
    _this->_impl_.mdnews_ = new ::com::htsc::mdc::insight::model::ADNews(*from._impl_.mdnews_);
  }
  if (from._internal_has_mdstaringresult()) {
    _this->_impl_.mdstaringresult_ = new ::com::htsc::mdc::insight::model::ADStaringResult(*from._impl_.mdstaringresult_);
  }
  if (from._internal_has_mdderivedanalysis()) {
    _this->_impl_.mdderivedanalysis_ = new ::com::htsc::mdc::insight::model::ADDerivedAnalysis(*from._impl_.mdderivedanalysis_);
  }
  if (from._internal_has_mdqbquote()) {
    _this->_impl_.mdqbquote_ = new ::com::htsc::mdc::insight::model::MDQBQuote(*from._impl_.mdqbquote_);
  }
  if (from._internal_has_mdqbtransaction()) {
    _this->_impl_.mdqbtransaction_ = new ::com::htsc::mdc::insight::model::MDQBTransaction(*from._impl_.mdqbtransaction_);
  }
  if (from._internal_has_mdusaorder()) {
    _this->_impl_.mdusaorder_ = new ::com::htsc::mdc::insight::model::MDUSAOrder(*from._impl_.mdusaorder_);
  }
  if (from._internal_has_mdusatransaction()) {
    _this->_impl_.mdusatransaction_ = new ::com::htsc::mdc::insight::model::MDUSATransaction(*from._impl_.mdusatransaction_);
  }
  if (from._internal_has_mdslorder()) {
    _this->_impl_.mdslorder_ = new ::com::htsc::mdc::insight::model::MDSLOrder(*from._impl_.mdslorder_);
  }
  if (from._internal_has_mdsltransaction()) {
    _this->_impl_.mdsltransaction_ = new ::com::htsc::mdc::insight::model::MDSLTransaction(*from._impl_.mdsltransaction_);
  }
  if (from._internal_has_mdhkgreymarket()) {
    _this->_impl_.mdhkgreymarket_ = new ::com::htsc::mdc::insight::model::MDHKGreyMarket(*from._impl_.mdhkgreymarket_);
  }
  if (from._internal_has_mdslindicativequote()) {
    _this->_impl_.mdslindicativequote_ = new ::com::htsc::mdc::insight::model::MDSLIndicativeQuote(*from._impl_.mdslindicativequote_);
  }
  if (from._internal_has_mdslstatistics()) {
    _this->_impl_.mdslstatistics_ = new ::com::htsc::mdc::insight::model::MDSLStatistics(*from._impl_.mdslstatistics_);
  }
  if (from._internal_has_mdusaquote()) {
    _this->_impl_.mdusaquote_ = new ::com::htsc::mdc::insight::model::MDUSAQuote(*from._impl_.mdusaquote_);
  }
  if (from._internal_has_mdslestimation()) {
    _this->_impl_.mdslestimation_ = new ::com::htsc::mdc::insight::model::MDSLEstimation(*from._impl_.mdslestimation_);
  }
  if (from._internal_has_mdcnexdeal()) {
    _this->_impl_.mdcnexdeal_ = new ::com::htsc::mdc::insight::model::MDCnexDeal(*from._impl_.mdcnexdeal_);
  }
  if (from._internal_has_mdcnexquote()) {
    _this->_impl_.mdcnexquote_ = new ::com::htsc::mdc::insight::model::MDCnexQuote(*from._impl_.mdcnexquote_);
  }
  ::memcpy(&_impl_.messagechannelnumber_, &from._impl_.messagechannelnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.marketdatatype_) -
    reinterpret_cast<char*>(&_impl_.messagechannelnumber_)) + sizeof(_impl_.marketdatatype_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.HtscMarketData)
}

inline void HtscMarketData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mdstock_){nullptr}
    , decltype(_impl_.mdindex_){nullptr}
    , decltype(_impl_.mdbond_){nullptr}
    , decltype(_impl_.mdfund_){nullptr}
    , decltype(_impl_.mdoption_){nullptr}
    , decltype(_impl_.mdfuture_){nullptr}
    , decltype(_impl_.mdtransaction_){nullptr}
    , decltype(_impl_.mdorder_){nullptr}
    , decltype(_impl_.mdkline_){nullptr}
    , decltype(_impl_.mdtwap_){nullptr}
    , decltype(_impl_.mdvwap_){nullptr}
    , decltype(_impl_.mdconstant_){nullptr}
    , decltype(_impl_.mdsimpletick_){nullptr}
    , decltype(_impl_.mdupsdownsanalysis_){nullptr}
    , decltype(_impl_.mdindicatorsranking_){nullptr}
    , decltype(_impl_.dynamicpacket_){nullptr}
    , decltype(_impl_.mdvolumebyprice_){nullptr}
    , decltype(_impl_.mdfundflowanalysis_){nullptr}
    , decltype(_impl_.mdforex_){nullptr}
    , decltype(_impl_.mdspot_){nullptr}
    , decltype(_impl_.mdrate_){nullptr}
    , decltype(_impl_.orderbooksnapshot_){nullptr}
    , decltype(_impl_.orderbooksnapshotwithtick_){nullptr}
    , decltype(_impl_.mdquote_){nullptr}
    , decltype(_impl_.mdetfbasicinfo_){nullptr}
    , decltype(_impl_.mdfiquote_){nullptr}
    , decltype(_impl_.mdchipdistribution_){nullptr}
    , decltype(_impl_.mdwarrant_){nullptr}
    , decltype(_impl_.mdsecuritylending_){nullptr}
    , decltype(_impl_.mdnews_){nullptr}
    , decltype(_impl_.mdstaringresult_){nullptr}
    , decltype(_impl_.mdderivedanalysis_){nullptr}
    , decltype(_impl_.mdqbquote_){nullptr}
    , decltype(_impl_.mdqbtransaction_){nullptr}
    , decltype(_impl_.mdusaorder_){nullptr}
    , decltype(_impl_.mdusatransaction_){nullptr}
    , decltype(_impl_.mdslorder_){nullptr}
    , decltype(_impl_.mdsltransaction_){nullptr}
    , decltype(_impl_.mdhkgreymarket_){nullptr}
    , decltype(_impl_.mdslindicativequote_){nullptr}
    , decltype(_impl_.mdslstatistics_){nullptr}
    , decltype(_impl_.mdusaquote_){nullptr}
    , decltype(_impl_.mdslestimation_){nullptr}
    , decltype(_impl_.mdcnexdeal_){nullptr}
    , decltype(_impl_.mdcnexquote_){nullptr}
    , decltype(_impl_.messagechannelnumber_){int64_t{0}}
    , decltype(_impl_.marketdatatype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HtscMarketData::~HtscMarketData() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.HtscMarketData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HtscMarketData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mdstock_;
  if (this != internal_default_instance()) delete _impl_.mdindex_;
  if (this != internal_default_instance()) delete _impl_.mdbond_;
  if (this != internal_default_instance()) delete _impl_.mdfund_;
  if (this != internal_default_instance()) delete _impl_.mdoption_;
  if (this != internal_default_instance()) delete _impl_.mdfuture_;
  if (this != internal_default_instance()) delete _impl_.mdtransaction_;
  if (this != internal_default_instance()) delete _impl_.mdorder_;
  if (this != internal_default_instance()) delete _impl_.mdkline_;
  if (this != internal_default_instance()) delete _impl_.mdtwap_;
  if (this != internal_default_instance()) delete _impl_.mdvwap_;
  if (this != internal_default_instance()) delete _impl_.mdconstant_;
  if (this != internal_default_instance()) delete _impl_.mdsimpletick_;
  if (this != internal_default_instance()) delete _impl_.mdupsdownsanalysis_;
  if (this != internal_default_instance()) delete _impl_.mdindicatorsranking_;
  if (this != internal_default_instance()) delete _impl_.dynamicpacket_;
  if (this != internal_default_instance()) delete _impl_.mdvolumebyprice_;
  if (this != internal_default_instance()) delete _impl_.mdfundflowanalysis_;
  if (this != internal_default_instance()) delete _impl_.mdforex_;
  if (this != internal_default_instance()) delete _impl_.mdspot_;
  if (this != internal_default_instance()) delete _impl_.mdrate_;
  if (this != internal_default_instance()) delete _impl_.orderbooksnapshot_;
  if (this != internal_default_instance()) delete _impl_.orderbooksnapshotwithtick_;
  if (this != internal_default_instance()) delete _impl_.mdquote_;
  if (this != internal_default_instance()) delete _impl_.mdetfbasicinfo_;
  if (this != internal_default_instance()) delete _impl_.mdfiquote_;
  if (this != internal_default_instance()) delete _impl_.mdchipdistribution_;
  if (this != internal_default_instance()) delete _impl_.mdwarrant_;
  if (this != internal_default_instance()) delete _impl_.mdsecuritylending_;
  if (this != internal_default_instance()) delete _impl_.mdnews_;
  if (this != internal_default_instance()) delete _impl_.mdstaringresult_;
  if (this != internal_default_instance()) delete _impl_.mdderivedanalysis_;
  if (this != internal_default_instance()) delete _impl_.mdqbquote_;
  if (this != internal_default_instance()) delete _impl_.mdqbtransaction_;
  if (this != internal_default_instance()) delete _impl_.mdusaorder_;
  if (this != internal_default_instance()) delete _impl_.mdusatransaction_;
  if (this != internal_default_instance()) delete _impl_.mdslorder_;
  if (this != internal_default_instance()) delete _impl_.mdsltransaction_;
  if (this != internal_default_instance()) delete _impl_.mdhkgreymarket_;
  if (this != internal_default_instance()) delete _impl_.mdslindicativequote_;
  if (this != internal_default_instance()) delete _impl_.mdslstatistics_;
  if (this != internal_default_instance()) delete _impl_.mdusaquote_;
  if (this != internal_default_instance()) delete _impl_.mdslestimation_;
  if (this != internal_default_instance()) delete _impl_.mdcnexdeal_;
  if (this != internal_default_instance()) delete _impl_.mdcnexquote_;
}

void HtscMarketData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HtscMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.HtscMarketData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mdstock_ != nullptr) {
    delete _impl_.mdstock_;
  }
  _impl_.mdstock_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdindex_ != nullptr) {
    delete _impl_.mdindex_;
  }
  _impl_.mdindex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdbond_ != nullptr) {
    delete _impl_.mdbond_;
  }
  _impl_.mdbond_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdfund_ != nullptr) {
    delete _impl_.mdfund_;
  }
  _impl_.mdfund_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdoption_ != nullptr) {
    delete _impl_.mdoption_;
  }
  _impl_.mdoption_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdfuture_ != nullptr) {
    delete _impl_.mdfuture_;
  }
  _impl_.mdfuture_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdtransaction_ != nullptr) {
    delete _impl_.mdtransaction_;
  }
  _impl_.mdtransaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdorder_ != nullptr) {
    delete _impl_.mdorder_;
  }
  _impl_.mdorder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdkline_ != nullptr) {
    delete _impl_.mdkline_;
  }
  _impl_.mdkline_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdtwap_ != nullptr) {
    delete _impl_.mdtwap_;
  }
  _impl_.mdtwap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdvwap_ != nullptr) {
    delete _impl_.mdvwap_;
  }
  _impl_.mdvwap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdconstant_ != nullptr) {
    delete _impl_.mdconstant_;
  }
  _impl_.mdconstant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdsimpletick_ != nullptr) {
    delete _impl_.mdsimpletick_;
  }
  _impl_.mdsimpletick_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdupsdownsanalysis_ != nullptr) {
    delete _impl_.mdupsdownsanalysis_;
  }
  _impl_.mdupsdownsanalysis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdindicatorsranking_ != nullptr) {
    delete _impl_.mdindicatorsranking_;
  }
  _impl_.mdindicatorsranking_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dynamicpacket_ != nullptr) {
    delete _impl_.dynamicpacket_;
  }
  _impl_.dynamicpacket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdvolumebyprice_ != nullptr) {
    delete _impl_.mdvolumebyprice_;
  }
  _impl_.mdvolumebyprice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdfundflowanalysis_ != nullptr) {
    delete _impl_.mdfundflowanalysis_;
  }
  _impl_.mdfundflowanalysis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdforex_ != nullptr) {
    delete _impl_.mdforex_;
  }
  _impl_.mdforex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdspot_ != nullptr) {
    delete _impl_.mdspot_;
  }
  _impl_.mdspot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdrate_ != nullptr) {
    delete _impl_.mdrate_;
  }
  _impl_.mdrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.orderbooksnapshot_ != nullptr) {
    delete _impl_.orderbooksnapshot_;
  }
  _impl_.orderbooksnapshot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.orderbooksnapshotwithtick_ != nullptr) {
    delete _impl_.orderbooksnapshotwithtick_;
  }
  _impl_.orderbooksnapshotwithtick_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdquote_ != nullptr) {
    delete _impl_.mdquote_;
  }
  _impl_.mdquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdetfbasicinfo_ != nullptr) {
    delete _impl_.mdetfbasicinfo_;
  }
  _impl_.mdetfbasicinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdfiquote_ != nullptr) {
    delete _impl_.mdfiquote_;
  }
  _impl_.mdfiquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdchipdistribution_ != nullptr) {
    delete _impl_.mdchipdistribution_;
  }
  _impl_.mdchipdistribution_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdwarrant_ != nullptr) {
    delete _impl_.mdwarrant_;
  }
  _impl_.mdwarrant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdsecuritylending_ != nullptr) {
    delete _impl_.mdsecuritylending_;
  }
  _impl_.mdsecuritylending_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdnews_ != nullptr) {
    delete _impl_.mdnews_;
  }
  _impl_.mdnews_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdstaringresult_ != nullptr) {
    delete _impl_.mdstaringresult_;
  }
  _impl_.mdstaringresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdderivedanalysis_ != nullptr) {
    delete _impl_.mdderivedanalysis_;
  }
  _impl_.mdderivedanalysis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdqbquote_ != nullptr) {
    delete _impl_.mdqbquote_;
  }
  _impl_.mdqbquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdqbtransaction_ != nullptr) {
    delete _impl_.mdqbtransaction_;
  }
  _impl_.mdqbtransaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdusaorder_ != nullptr) {
    delete _impl_.mdusaorder_;
  }
  _impl_.mdusaorder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdusatransaction_ != nullptr) {
    delete _impl_.mdusatransaction_;
  }
  _impl_.mdusatransaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdslorder_ != nullptr) {
    delete _impl_.mdslorder_;
  }
  _impl_.mdslorder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdsltransaction_ != nullptr) {
    delete _impl_.mdsltransaction_;
  }
  _impl_.mdsltransaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdhkgreymarket_ != nullptr) {
    delete _impl_.mdhkgreymarket_;
  }
  _impl_.mdhkgreymarket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdslindicativequote_ != nullptr) {
    delete _impl_.mdslindicativequote_;
  }
  _impl_.mdslindicativequote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdslstatistics_ != nullptr) {
    delete _impl_.mdslstatistics_;
  }
  _impl_.mdslstatistics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdusaquote_ != nullptr) {
    delete _impl_.mdusaquote_;
  }
  _impl_.mdusaquote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdslestimation_ != nullptr) {
    delete _impl_.mdslestimation_;
  }
  _impl_.mdslestimation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdcnexdeal_ != nullptr) {
    delete _impl_.mdcnexdeal_;
  }
  _impl_.mdcnexdeal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mdcnexquote_ != nullptr) {
    delete _impl_.mdcnexquote_;
  }
  _impl_.mdcnexquote_ = nullptr;
  ::memset(&_impl_.messagechannelnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.marketdatatype_) -
      reinterpret_cast<char*>(&_impl_.messagechannelnumber_)) + sizeof(_impl_.marketdatatype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HtscMarketData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_marketdatatype(static_cast<::com::htsc::mdc::insight::model::EMarketDataType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 MessageChannelNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.messagechannelnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdstock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdindex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdbond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdfund(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdoption(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdfuture(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdtransaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdkline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdtwap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdvwap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdconstant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdsimpletick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdupsdownsanalysis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdindicatorsranking(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamicpacket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdvolumebyprice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdfundflowanalysis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdforex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdspot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbooksnapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbooksnapshotwithtick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdetfbasicinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdfiquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdchipdistribution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdwarrant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdsecuritylending(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdnews(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdstaringresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdderivedanalysis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdqbquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdqbtransaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdusaorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdusatransaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdslorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdsltransaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdhkgreymarket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdslindicativequote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdslstatistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdusaquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDSLEstimation mdSLEstimation = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdslestimation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDCnexDeal mdCnexDeal = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdcnexdeal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MDCnexQuote mdCnexQuote = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdcnexquote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HtscMarketData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.HtscMarketData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
  if (this->_internal_marketdatatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_marketdatatype(), target);
  }

  // int64 MessageChannelNumber = 2;
  if (this->_internal_messagechannelnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_messagechannelnumber(), target);
  }

  // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
  if (this->_internal_has_mdstock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::mdstock(this),
        _Internal::mdstock(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
  if (this->_internal_has_mdindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::mdindex(this),
        _Internal::mdindex(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
  if (this->_internal_has_mdbond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::mdbond(this),
        _Internal::mdbond(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
  if (this->_internal_has_mdfund()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::mdfund(this),
        _Internal::mdfund(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
  if (this->_internal_has_mdoption()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::mdoption(this),
        _Internal::mdoption(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
  if (this->_internal_has_mdfuture()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::mdfuture(this),
        _Internal::mdfuture(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
  if (this->_internal_has_mdtransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::mdtransaction(this),
        _Internal::mdtransaction(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
  if (this->_internal_has_mdorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::mdorder(this),
        _Internal::mdorder(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
  if (this->_internal_has_mdkline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::mdkline(this),
        _Internal::mdkline(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
  if (this->_internal_has_mdtwap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::mdtwap(this),
        _Internal::mdtwap(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
  if (this->_internal_has_mdvwap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::mdvwap(this),
        _Internal::mdvwap(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
  if (this->_internal_has_mdconstant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::mdconstant(this),
        _Internal::mdconstant(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
  if (this->_internal_has_mdsimpletick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::mdsimpletick(this),
        _Internal::mdsimpletick(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
  if (this->_internal_has_mdupsdownsanalysis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::mdupsdownsanalysis(this),
        _Internal::mdupsdownsanalysis(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
  if (this->_internal_has_mdindicatorsranking()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::mdindicatorsranking(this),
        _Internal::mdindicatorsranking(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
  if (this->_internal_has_dynamicpacket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::dynamicpacket(this),
        _Internal::dynamicpacket(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
  if (this->_internal_has_mdvolumebyprice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::mdvolumebyprice(this),
        _Internal::mdvolumebyprice(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
  if (this->_internal_has_mdfundflowanalysis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::mdfundflowanalysis(this),
        _Internal::mdfundflowanalysis(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
  if (this->_internal_has_mdforex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::mdforex(this),
        _Internal::mdforex(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
  if (this->_internal_has_mdspot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::mdspot(this),
        _Internal::mdspot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
  if (this->_internal_has_mdrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::mdrate(this),
        _Internal::mdrate(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
  if (this->_internal_has_orderbooksnapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::orderbooksnapshot(this),
        _Internal::orderbooksnapshot(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
  if (this->_internal_has_orderbooksnapshotwithtick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::orderbooksnapshotwithtick(this),
        _Internal::orderbooksnapshotwithtick(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
  if (this->_internal_has_mdquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::mdquote(this),
        _Internal::mdquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
  if (this->_internal_has_mdetfbasicinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::mdetfbasicinfo(this),
        _Internal::mdetfbasicinfo(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
  if (this->_internal_has_mdfiquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::mdfiquote(this),
        _Internal::mdfiquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
  if (this->_internal_has_mdchipdistribution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::mdchipdistribution(this),
        _Internal::mdchipdistribution(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
  if (this->_internal_has_mdwarrant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::mdwarrant(this),
        _Internal::mdwarrant(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
  if (this->_internal_has_mdsecuritylending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::mdsecuritylending(this),
        _Internal::mdsecuritylending(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
  if (this->_internal_has_mdnews()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::mdnews(this),
        _Internal::mdnews(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
  if (this->_internal_has_mdstaringresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::mdstaringresult(this),
        _Internal::mdstaringresult(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
  if (this->_internal_has_mdderivedanalysis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::mdderivedanalysis(this),
        _Internal::mdderivedanalysis(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
  if (this->_internal_has_mdqbquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::mdqbquote(this),
        _Internal::mdqbquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
  if (this->_internal_has_mdqbtransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::mdqbtransaction(this),
        _Internal::mdqbtransaction(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
  if (this->_internal_has_mdusaorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::mdusaorder(this),
        _Internal::mdusaorder(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
  if (this->_internal_has_mdusatransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::mdusatransaction(this),
        _Internal::mdusatransaction(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
  if (this->_internal_has_mdslorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::mdslorder(this),
        _Internal::mdslorder(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
  if (this->_internal_has_mdsltransaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::mdsltransaction(this),
        _Internal::mdsltransaction(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
  if (this->_internal_has_mdhkgreymarket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::mdhkgreymarket(this),
        _Internal::mdhkgreymarket(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
  if (this->_internal_has_mdslindicativequote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::mdslindicativequote(this),
        _Internal::mdslindicativequote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
  if (this->_internal_has_mdslstatistics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::mdslstatistics(this),
        _Internal::mdslstatistics(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
  if (this->_internal_has_mdusaquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::mdusaquote(this),
        _Internal::mdusaquote(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDSLEstimation mdSLEstimation = 52;
  if (this->_internal_has_mdslestimation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::mdslestimation(this),
        _Internal::mdslestimation(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDCnexDeal mdCnexDeal = 53;
  if (this->_internal_has_mdcnexdeal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::mdcnexdeal(this),
        _Internal::mdcnexdeal(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.MDCnexQuote mdCnexQuote = 54;
  if (this->_internal_has_mdcnexquote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::mdcnexquote(this),
        _Internal::mdcnexquote(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.HtscMarketData)
  return target;
}

size_t HtscMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.HtscMarketData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.htsc.mdc.insight.model.MDStock mdStock = 10;
  if (this->_internal_has_mdstock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdstock_);
  }

  // .com.htsc.mdc.insight.model.MDIndex mdIndex = 11;
  if (this->_internal_has_mdindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdindex_);
  }

  // .com.htsc.mdc.insight.model.MDBond mdBond = 12;
  if (this->_internal_has_mdbond()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdbond_);
  }

  // .com.htsc.mdc.insight.model.MDFund mdFund = 13;
  if (this->_internal_has_mdfund()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdfund_);
  }

  // .com.htsc.mdc.insight.model.MDOption mdOption = 14;
  if (this->_internal_has_mdoption()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdoption_);
  }

  // .com.htsc.mdc.insight.model.MDFuture mdFuture = 15;
  if (this->_internal_has_mdfuture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdfuture_);
  }

  // .com.htsc.mdc.insight.model.MDTransaction mdTransaction = 16;
  if (this->_internal_has_mdtransaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdtransaction_);
  }

  // .com.htsc.mdc.insight.model.MDOrder mdOrder = 17;
  if (this->_internal_has_mdorder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdorder_);
  }

  // .com.htsc.mdc.insight.model.ADKLine mdKLine = 18;
  if (this->_internal_has_mdkline()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdkline_);
  }

  // .com.htsc.mdc.insight.model.ADTwap mdTwap = 19;
  if (this->_internal_has_mdtwap()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdtwap_);
  }

  // .com.htsc.mdc.insight.model.ADVwap mdVwap = 20;
  if (this->_internal_has_mdvwap()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdvwap_);
  }

  // .com.htsc.mdc.insight.model.MDBasicInfo mdConstant = 21;
  if (this->_internal_has_mdconstant()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdconstant_);
  }

  // .com.htsc.mdc.insight.model.MDSimpleTick mdSimpleTick = 22;
  if (this->_internal_has_mdsimpletick()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdsimpletick_);
  }

  // .com.htsc.mdc.insight.model.ADUpsDownsAnalysis mdUpsDownsAnalysis = 23;
  if (this->_internal_has_mdupsdownsanalysis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdupsdownsanalysis_);
  }

  // .com.htsc.mdc.insight.model.ADIndicatorsRanking mdIndicatorsRanking = 24;
  if (this->_internal_has_mdindicatorsranking()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdindicatorsranking_);
  }

  // .com.htsc.mdc.insight.model.DynamicPacket dynamicPacket = 25;
  if (this->_internal_has_dynamicpacket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dynamicpacket_);
  }

  // .com.htsc.mdc.insight.model.ADVolumeByPrice mdVolumeByPrice = 26;
  if (this->_internal_has_mdvolumebyprice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdvolumebyprice_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowAnalysis mdFundFlowAnalysis = 27;
  if (this->_internal_has_mdfundflowanalysis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdfundflowanalysis_);
  }

  // .com.htsc.mdc.insight.model.MDForex mdForex = 28;
  if (this->_internal_has_mdforex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdforex_);
  }

  // .com.htsc.mdc.insight.model.MDSpot mdSpot = 29;
  if (this->_internal_has_mdspot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdspot_);
  }

  // .com.htsc.mdc.insight.model.MDRate mdRate = 30;
  if (this->_internal_has_mdrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdrate_);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshot orderbookSnapshot = 31;
  if (this->_internal_has_orderbooksnapshot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbooksnapshot_);
  }

  // .com.htsc.mdc.insight.model.ADOrderbookSnapshotWithTick orderbookSnapshotWithTick = 32;
  if (this->_internal_has_orderbooksnapshotwithtick()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbooksnapshotwithtick_);
  }

  // .com.htsc.mdc.insight.model.MDQuote mdQuote = 33;
  if (this->_internal_has_mdquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdquote_);
  }

  // .com.htsc.mdc.insight.model.MDETFBasicInfo mdETFBasicInfo = 34;
  if (this->_internal_has_mdetfbasicinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdetfbasicinfo_);
  }

  // .com.htsc.mdc.insight.model.MDFIQuote mdFIQuote = 35;
  if (this->_internal_has_mdfiquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdfiquote_);
  }

  // .com.htsc.mdc.insight.model.ADChipDistribution mdChipDistribution = 36;
  if (this->_internal_has_mdchipdistribution()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdchipdistribution_);
  }

  // .com.htsc.mdc.insight.model.MDWarrant mdWarrant = 37;
  if (this->_internal_has_mdwarrant()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdwarrant_);
  }

  // .com.htsc.mdc.insight.model.MDSecurityLending mdSecurityLending = 38;
  if (this->_internal_has_mdsecuritylending()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdsecuritylending_);
  }

  // .com.htsc.mdc.insight.model.ADNews mdNews = 39;
  if (this->_internal_has_mdnews()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdnews_);
  }

  // .com.htsc.mdc.insight.model.ADStaringResult mdStaringResult = 40;
  if (this->_internal_has_mdstaringresult()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdstaringresult_);
  }

  // .com.htsc.mdc.insight.model.ADDerivedAnalysis mdDerivedAnalysis = 41;
  if (this->_internal_has_mdderivedanalysis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdderivedanalysis_);
  }

  // .com.htsc.mdc.insight.model.MDQBQuote mdQBQuote = 42;
  if (this->_internal_has_mdqbquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdqbquote_);
  }

  // .com.htsc.mdc.insight.model.MDQBTransaction mdQBTransaction = 43;
  if (this->_internal_has_mdqbtransaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdqbtransaction_);
  }

  // .com.htsc.mdc.insight.model.MDUSAOrder mdUSAOrder = 44;
  if (this->_internal_has_mdusaorder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdusaorder_);
  }

  // .com.htsc.mdc.insight.model.MDUSATransaction mdUSATransaction = 45;
  if (this->_internal_has_mdusatransaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdusatransaction_);
  }

  // .com.htsc.mdc.insight.model.MDSLOrder mdSLOrder = 46;
  if (this->_internal_has_mdslorder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdslorder_);
  }

  // .com.htsc.mdc.insight.model.MDSLTransaction mdSLTransaction = 47;
  if (this->_internal_has_mdsltransaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdsltransaction_);
  }

  // .com.htsc.mdc.insight.model.MDHKGreyMarket mdHKGreyMarket = 48;
  if (this->_internal_has_mdhkgreymarket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdhkgreymarket_);
  }

  // .com.htsc.mdc.insight.model.MDSLIndicativeQuote mdSLIndicativeQuote = 49;
  if (this->_internal_has_mdslindicativequote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdslindicativequote_);
  }

  // .com.htsc.mdc.insight.model.MDSLStatistics mdSLStatistics = 50;
  if (this->_internal_has_mdslstatistics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdslstatistics_);
  }

  // .com.htsc.mdc.insight.model.MDUSAQuote mdUSAQuote = 51;
  if (this->_internal_has_mdusaquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdusaquote_);
  }

  // .com.htsc.mdc.insight.model.MDSLEstimation mdSLEstimation = 52;
  if (this->_internal_has_mdslestimation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdslestimation_);
  }

  // .com.htsc.mdc.insight.model.MDCnexDeal mdCnexDeal = 53;
  if (this->_internal_has_mdcnexdeal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdcnexdeal_);
  }

  // .com.htsc.mdc.insight.model.MDCnexQuote mdCnexQuote = 54;
  if (this->_internal_has_mdcnexquote()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mdcnexquote_);
  }

  // int64 MessageChannelNumber = 2;
  if (this->_internal_messagechannelnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagechannelnumber());
  }

  // .com.htsc.mdc.insight.model.EMarketDataType marketDataType = 1;
  if (this->_internal_marketdatatype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_marketdatatype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HtscMarketData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HtscMarketData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HtscMarketData::GetClassData() const { return &_class_data_; }


void HtscMarketData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HtscMarketData*>(&to_msg);
  auto& from = static_cast<const HtscMarketData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.HtscMarketData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mdstock()) {
    _this->_internal_mutable_mdstock()->::com::htsc::mdc::insight::model::MDStock::MergeFrom(
        from._internal_mdstock());
  }
  if (from._internal_has_mdindex()) {
    _this->_internal_mutable_mdindex()->::com::htsc::mdc::insight::model::MDIndex::MergeFrom(
        from._internal_mdindex());
  }
  if (from._internal_has_mdbond()) {
    _this->_internal_mutable_mdbond()->::com::htsc::mdc::insight::model::MDBond::MergeFrom(
        from._internal_mdbond());
  }
  if (from._internal_has_mdfund()) {
    _this->_internal_mutable_mdfund()->::com::htsc::mdc::insight::model::MDFund::MergeFrom(
        from._internal_mdfund());
  }
  if (from._internal_has_mdoption()) {
    _this->_internal_mutable_mdoption()->::com::htsc::mdc::insight::model::MDOption::MergeFrom(
        from._internal_mdoption());
  }
  if (from._internal_has_mdfuture()) {
    _this->_internal_mutable_mdfuture()->::com::htsc::mdc::insight::model::MDFuture::MergeFrom(
        from._internal_mdfuture());
  }
  if (from._internal_has_mdtransaction()) {
    _this->_internal_mutable_mdtransaction()->::com::htsc::mdc::insight::model::MDTransaction::MergeFrom(
        from._internal_mdtransaction());
  }
  if (from._internal_has_mdorder()) {
    _this->_internal_mutable_mdorder()->::com::htsc::mdc::insight::model::MDOrder::MergeFrom(
        from._internal_mdorder());
  }
  if (from._internal_has_mdkline()) {
    _this->_internal_mutable_mdkline()->::com::htsc::mdc::insight::model::ADKLine::MergeFrom(
        from._internal_mdkline());
  }
  if (from._internal_has_mdtwap()) {
    _this->_internal_mutable_mdtwap()->::com::htsc::mdc::insight::model::ADTwap::MergeFrom(
        from._internal_mdtwap());
  }
  if (from._internal_has_mdvwap()) {
    _this->_internal_mutable_mdvwap()->::com::htsc::mdc::insight::model::ADVwap::MergeFrom(
        from._internal_mdvwap());
  }
  if (from._internal_has_mdconstant()) {
    _this->_internal_mutable_mdconstant()->::com::htsc::mdc::insight::model::MDBasicInfo::MergeFrom(
        from._internal_mdconstant());
  }
  if (from._internal_has_mdsimpletick()) {
    _this->_internal_mutable_mdsimpletick()->::com::htsc::mdc::insight::model::MDSimpleTick::MergeFrom(
        from._internal_mdsimpletick());
  }
  if (from._internal_has_mdupsdownsanalysis()) {
    _this->_internal_mutable_mdupsdownsanalysis()->::com::htsc::mdc::insight::model::ADUpsDownsAnalysis::MergeFrom(
        from._internal_mdupsdownsanalysis());
  }
  if (from._internal_has_mdindicatorsranking()) {
    _this->_internal_mutable_mdindicatorsranking()->::com::htsc::mdc::insight::model::ADIndicatorsRanking::MergeFrom(
        from._internal_mdindicatorsranking());
  }
  if (from._internal_has_dynamicpacket()) {
    _this->_internal_mutable_dynamicpacket()->::com::htsc::mdc::insight::model::DynamicPacket::MergeFrom(
        from._internal_dynamicpacket());
  }
  if (from._internal_has_mdvolumebyprice()) {
    _this->_internal_mutable_mdvolumebyprice()->::com::htsc::mdc::insight::model::ADVolumeByPrice::MergeFrom(
        from._internal_mdvolumebyprice());
  }
  if (from._internal_has_mdfundflowanalysis()) {
    _this->_internal_mutable_mdfundflowanalysis()->::com::htsc::mdc::insight::model::ADFundFlowAnalysis::MergeFrom(
        from._internal_mdfundflowanalysis());
  }
  if (from._internal_has_mdforex()) {
    _this->_internal_mutable_mdforex()->::com::htsc::mdc::insight::model::MDForex::MergeFrom(
        from._internal_mdforex());
  }
  if (from._internal_has_mdspot()) {
    _this->_internal_mutable_mdspot()->::com::htsc::mdc::insight::model::MDSpot::MergeFrom(
        from._internal_mdspot());
  }
  if (from._internal_has_mdrate()) {
    _this->_internal_mutable_mdrate()->::com::htsc::mdc::insight::model::MDRate::MergeFrom(
        from._internal_mdrate());
  }
  if (from._internal_has_orderbooksnapshot()) {
    _this->_internal_mutable_orderbooksnapshot()->::com::htsc::mdc::insight::model::ADOrderbookSnapshot::MergeFrom(
        from._internal_orderbooksnapshot());
  }
  if (from._internal_has_orderbooksnapshotwithtick()) {
    _this->_internal_mutable_orderbooksnapshotwithtick()->::com::htsc::mdc::insight::model::ADOrderbookSnapshotWithTick::MergeFrom(
        from._internal_orderbooksnapshotwithtick());
  }
  if (from._internal_has_mdquote()) {
    _this->_internal_mutable_mdquote()->::com::htsc::mdc::insight::model::MDQuote::MergeFrom(
        from._internal_mdquote());
  }
  if (from._internal_has_mdetfbasicinfo()) {
    _this->_internal_mutable_mdetfbasicinfo()->::com::htsc::mdc::insight::model::MDETFBasicInfo::MergeFrom(
        from._internal_mdetfbasicinfo());
  }
  if (from._internal_has_mdfiquote()) {
    _this->_internal_mutable_mdfiquote()->::com::htsc::mdc::insight::model::MDFIQuote::MergeFrom(
        from._internal_mdfiquote());
  }
  if (from._internal_has_mdchipdistribution()) {
    _this->_internal_mutable_mdchipdistribution()->::com::htsc::mdc::insight::model::ADChipDistribution::MergeFrom(
        from._internal_mdchipdistribution());
  }
  if (from._internal_has_mdwarrant()) {
    _this->_internal_mutable_mdwarrant()->::com::htsc::mdc::insight::model::MDWarrant::MergeFrom(
        from._internal_mdwarrant());
  }
  if (from._internal_has_mdsecuritylending()) {
    _this->_internal_mutable_mdsecuritylending()->::com::htsc::mdc::insight::model::MDSecurityLending::MergeFrom(
        from._internal_mdsecuritylending());
  }
  if (from._internal_has_mdnews()) {
    _this->_internal_mutable_mdnews()->::com::htsc::mdc::insight::model::ADNews::MergeFrom(
        from._internal_mdnews());
  }
  if (from._internal_has_mdstaringresult()) {
    _this->_internal_mutable_mdstaringresult()->::com::htsc::mdc::insight::model::ADStaringResult::MergeFrom(
        from._internal_mdstaringresult());
  }
  if (from._internal_has_mdderivedanalysis()) {
    _this->_internal_mutable_mdderivedanalysis()->::com::htsc::mdc::insight::model::ADDerivedAnalysis::MergeFrom(
        from._internal_mdderivedanalysis());
  }
  if (from._internal_has_mdqbquote()) {
    _this->_internal_mutable_mdqbquote()->::com::htsc::mdc::insight::model::MDQBQuote::MergeFrom(
        from._internal_mdqbquote());
  }
  if (from._internal_has_mdqbtransaction()) {
    _this->_internal_mutable_mdqbtransaction()->::com::htsc::mdc::insight::model::MDQBTransaction::MergeFrom(
        from._internal_mdqbtransaction());
  }
  if (from._internal_has_mdusaorder()) {
    _this->_internal_mutable_mdusaorder()->::com::htsc::mdc::insight::model::MDUSAOrder::MergeFrom(
        from._internal_mdusaorder());
  }
  if (from._internal_has_mdusatransaction()) {
    _this->_internal_mutable_mdusatransaction()->::com::htsc::mdc::insight::model::MDUSATransaction::MergeFrom(
        from._internal_mdusatransaction());
  }
  if (from._internal_has_mdslorder()) {
    _this->_internal_mutable_mdslorder()->::com::htsc::mdc::insight::model::MDSLOrder::MergeFrom(
        from._internal_mdslorder());
  }
  if (from._internal_has_mdsltransaction()) {
    _this->_internal_mutable_mdsltransaction()->::com::htsc::mdc::insight::model::MDSLTransaction::MergeFrom(
        from._internal_mdsltransaction());
  }
  if (from._internal_has_mdhkgreymarket()) {
    _this->_internal_mutable_mdhkgreymarket()->::com::htsc::mdc::insight::model::MDHKGreyMarket::MergeFrom(
        from._internal_mdhkgreymarket());
  }
  if (from._internal_has_mdslindicativequote()) {
    _this->_internal_mutable_mdslindicativequote()->::com::htsc::mdc::insight::model::MDSLIndicativeQuote::MergeFrom(
        from._internal_mdslindicativequote());
  }
  if (from._internal_has_mdslstatistics()) {
    _this->_internal_mutable_mdslstatistics()->::com::htsc::mdc::insight::model::MDSLStatistics::MergeFrom(
        from._internal_mdslstatistics());
  }
  if (from._internal_has_mdusaquote()) {
    _this->_internal_mutable_mdusaquote()->::com::htsc::mdc::insight::model::MDUSAQuote::MergeFrom(
        from._internal_mdusaquote());
  }
  if (from._internal_has_mdslestimation()) {
    _this->_internal_mutable_mdslestimation()->::com::htsc::mdc::insight::model::MDSLEstimation::MergeFrom(
        from._internal_mdslestimation());
  }
  if (from._internal_has_mdcnexdeal()) {
    _this->_internal_mutable_mdcnexdeal()->::com::htsc::mdc::insight::model::MDCnexDeal::MergeFrom(
        from._internal_mdcnexdeal());
  }
  if (from._internal_has_mdcnexquote()) {
    _this->_internal_mutable_mdcnexquote()->::com::htsc::mdc::insight::model::MDCnexQuote::MergeFrom(
        from._internal_mdcnexquote());
  }
  if (from._internal_messagechannelnumber() != 0) {
    _this->_internal_set_messagechannelnumber(from._internal_messagechannelnumber());
  }
  if (from._internal_marketdatatype() != 0) {
    _this->_internal_set_marketdatatype(from._internal_marketdatatype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HtscMarketData::CopyFrom(const HtscMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.HtscMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtscMarketData::IsInitialized() const {
  return true;
}

void HtscMarketData::InternalSwap(HtscMarketData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HtscMarketData, _impl_.marketdatatype_)
      + sizeof(HtscMarketData::_impl_.marketdatatype_)
      - PROTOBUF_FIELD_OFFSET(HtscMarketData, _impl_.mdstock_)>(
          reinterpret_cast<char*>(&_impl_.mdstock_),
          reinterpret_cast<char*>(&other->_impl_.mdstock_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HtscMarketData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HtscMarketData_2eproto_getter, &descriptor_table_HtscMarketData_2eproto_once,
      file_level_metadata_HtscMarketData_2eproto[0]);
}

// ===================================================================

class MarketDataStream::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::MarketDataList& marketdatalist(const MarketDataStream* msg);
};

const ::com::htsc::mdc::insight::model::MarketDataList&
MarketDataStream::_Internal::marketdatalist(const MarketDataStream* msg) {
  return *msg->_impl_.marketdatalist_;
}
MarketDataStream::MarketDataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MarketDataStream)
}
MarketDataStream::MarketDataStream(const MarketDataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDataStream* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compresseddata_){}
    , decltype(_impl_.marketdatalist_){nullptr}
    , decltype(_impl_.originallength_){}
    , decltype(_impl_.iscompressed_){}
    , decltype(_impl_.isfinished_){}
    , decltype(_impl_.totalnumber_){}
    , decltype(_impl_.serial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.compresseddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compresseddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compresseddata().empty()) {
    _this->_impl_.compresseddata_.Set(from._internal_compresseddata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_marketdatalist()) {
    _this->_impl_.marketdatalist_ = new ::com::htsc::mdc::insight::model::MarketDataList(*from._impl_.marketdatalist_);
  }
  ::memcpy(&_impl_.originallength_, &from._impl_.originallength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serial_) -
    reinterpret_cast<char*>(&_impl_.originallength_)) + sizeof(_impl_.serial_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MarketDataStream)
}

inline void MarketDataStream::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compresseddata_){}
    , decltype(_impl_.marketdatalist_){nullptr}
    , decltype(_impl_.originallength_){0}
    , decltype(_impl_.iscompressed_){false}
    , decltype(_impl_.isfinished_){false}
    , decltype(_impl_.totalnumber_){0}
    , decltype(_impl_.serial_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.compresseddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compresseddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketDataStream::~MarketDataStream() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MarketDataStream)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDataStream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.compresseddata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.marketdatalist_;
}

void MarketDataStream::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MarketDataStream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compresseddata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.marketdatalist_ != nullptr) {
    delete _impl_.marketdatalist_;
  }
  _impl_.marketdatalist_ = nullptr;
  ::memset(&_impl_.originallength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serial_) -
      reinterpret_cast<char*>(&_impl_.originallength_)) + sizeof(_impl_.serial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataStream::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isCompressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.iscompressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 originalLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.originallength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes compressedData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_compresseddata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketdatalist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 totalNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.totalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isFinished = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isfinished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketDataStream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MarketDataStream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isCompressed = 1;
  if (this->_internal_iscompressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_iscompressed(), target);
  }

  // int32 originalLength = 2;
  if (this->_internal_originallength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_originallength(), target);
  }

  // bytes compressedData = 3;
  if (!this->_internal_compresseddata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_compresseddata(), target);
  }

  // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
  if (this->_internal_has_marketdatalist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::marketdatalist(this),
        _Internal::marketdatalist(this).GetCachedSize(), target, stream);
  }

  // int32 totalNumber = 5;
  if (this->_internal_totalnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_totalnumber(), target);
  }

  // int32 serial = 6;
  if (this->_internal_serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_serial(), target);
  }

  // bool isFinished = 7;
  if (this->_internal_isfinished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isfinished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MarketDataStream)
  return target;
}

size_t MarketDataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MarketDataStream)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes compressedData = 3;
  if (!this->_internal_compresseddata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_compresseddata());
  }

  // .com.htsc.mdc.insight.model.MarketDataList marketDataList = 4;
  if (this->_internal_has_marketdatalist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.marketdatalist_);
  }

  // int32 originalLength = 2;
  if (this->_internal_originallength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_originallength());
  }

  // bool isCompressed = 1;
  if (this->_internal_iscompressed() != 0) {
    total_size += 1 + 1;
  }

  // bool isFinished = 7;
  if (this->_internal_isfinished() != 0) {
    total_size += 1 + 1;
  }

  // int32 totalNumber = 5;
  if (this->_internal_totalnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_totalnumber());
  }

  // int32 serial = 6;
  if (this->_internal_serial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serial());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDataStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDataStream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDataStream::GetClassData() const { return &_class_data_; }


void MarketDataStream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDataStream*>(&to_msg);
  auto& from = static_cast<const MarketDataStream&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MarketDataStream)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_compresseddata().empty()) {
    _this->_internal_set_compresseddata(from._internal_compresseddata());
  }
  if (from._internal_has_marketdatalist()) {
    _this->_internal_mutable_marketdatalist()->::com::htsc::mdc::insight::model::MarketDataList::MergeFrom(
        from._internal_marketdatalist());
  }
  if (from._internal_originallength() != 0) {
    _this->_internal_set_originallength(from._internal_originallength());
  }
  if (from._internal_iscompressed() != 0) {
    _this->_internal_set_iscompressed(from._internal_iscompressed());
  }
  if (from._internal_isfinished() != 0) {
    _this->_internal_set_isfinished(from._internal_isfinished());
  }
  if (from._internal_totalnumber() != 0) {
    _this->_internal_set_totalnumber(from._internal_totalnumber());
  }
  if (from._internal_serial() != 0) {
    _this->_internal_set_serial(from._internal_serial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataStream::CopyFrom(const MarketDataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MarketDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataStream::IsInitialized() const {
  return true;
}

void MarketDataStream::InternalSwap(MarketDataStream* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compresseddata_, lhs_arena,
      &other->_impl_.compresseddata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDataStream, _impl_.serial_)
      + sizeof(MarketDataStream::_impl_.serial_)
      - PROTOBUF_FIELD_OFFSET(MarketDataStream, _impl_.marketdatalist_)>(
          reinterpret_cast<char*>(&_impl_.marketdatalist_),
          reinterpret_cast<char*>(&other->_impl_.marketdatalist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HtscMarketData_2eproto_getter, &descriptor_table_HtscMarketData_2eproto_once,
      file_level_metadata_HtscMarketData_2eproto[1]);
}

// ===================================================================

class MarketDataList::_Internal {
 public:
};

MarketDataList::MarketDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MarketDataList)
}
MarketDataList::MarketDataList(const MarketDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDataList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.marketdatas_){from._impl_.marketdatas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MarketDataList)
}

inline void MarketDataList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.marketdatas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketDataList::~MarketDataList() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MarketDataList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.marketdatas_.~RepeatedPtrField();
}

void MarketDataList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MarketDataList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.marketdatas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.htsc.mdc.insight.model.HtscMarketData marketDatas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_marketdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketDataList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MarketDataList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.HtscMarketData marketDatas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_marketdatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_marketdatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MarketDataList)
  return target;
}

size_t MarketDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MarketDataList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.HtscMarketData marketDatas = 1;
  total_size += 1UL * this->_internal_marketdatas_size();
  for (const auto& msg : this->_impl_.marketdatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDataList::GetClassData() const { return &_class_data_; }


void MarketDataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDataList*>(&to_msg);
  auto& from = static_cast<const MarketDataList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MarketDataList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.marketdatas_.MergeFrom(from._impl_.marketdatas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataList::CopyFrom(const MarketDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MarketDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataList::IsInitialized() const {
  return true;
}

void MarketDataList::InternalSwap(MarketDataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.marketdatas_.InternalSwap(&other->_impl_.marketdatas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HtscMarketData_2eproto_getter, &descriptor_table_HtscMarketData_2eproto_once,
      file_level_metadata_HtscMarketData_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::HtscMarketData*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::HtscMarketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::HtscMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MarketDataStream*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MarketDataStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MarketDataStream >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MarketDataList*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MarketDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MarketDataList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
