// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADChipDistribution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADChipDistribution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADChipDistribution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADChipDistribution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADChipDistribution_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADChipDistribution_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADChipDistribution;
struct ADChipDistributionDefaultTypeInternal;
extern ADChipDistributionDefaultTypeInternal _ADChipDistribution_default_instance_;
class ADChipDistributionDetail;
struct ADChipDistributionDetailDefaultTypeInternal;
extern ADChipDistributionDetailDefaultTypeInternal _ADChipDistributionDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADChipDistribution* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADChipDistribution>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADChipDistributionDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADChipDistributionDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADChipDistribution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADChipDistribution) */ {
 public:
  inline ADChipDistribution() : ADChipDistribution(nullptr) {}
  ~ADChipDistribution() override;
  explicit PROTOBUF_CONSTEXPR ADChipDistribution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADChipDistribution(const ADChipDistribution& from);
  ADChipDistribution(ADChipDistribution&& from) noexcept
    : ADChipDistribution() {
    *this = ::std::move(from);
  }

  inline ADChipDistribution& operator=(const ADChipDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADChipDistribution& operator=(ADChipDistribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADChipDistribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADChipDistribution* internal_default_instance() {
    return reinterpret_cast<const ADChipDistribution*>(
               &_ADChipDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADChipDistribution& a, ADChipDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(ADChipDistribution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADChipDistribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADChipDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADChipDistribution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADChipDistribution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADChipDistribution& from) {
    ADChipDistribution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADChipDistribution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADChipDistribution";
  }
  protected:
  explicit ADChipDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradableDetailsFieldNumber = 20,
    kRestrictedDetailsFieldNumber = 40,
    kRestrictedHoldDetailsFieldNumber = 48,
    kLargeShareholdersDetailsFieldNumber = 50,
    kHTSCSecurityIDFieldNumber = 1,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kExchangeDateFieldNumber = 7,
    kExchangeTimeFieldNumber = 8,
    kLastPxFieldNumber = 11,
    kPreClosePxFieldNumber = 12,
    kShareTotalNumberFieldNumber = 13,
    kTotalShareFieldNumber = 15,
    kATotalShareFieldNumber = 16,
    kAListedTotalShareFieldNumber = 17,
    kTradableMCSTFieldNumber = 21,
    kTradableMaxCostOfPositionsFieldNumber = 22,
    kTradableMinCostOfPositionsFieldNumber = 23,
    kTradableProfitPercentFieldNumber = 24,
    kTradableChipDispersionPercentFieldNumber = 25,
    kTradablePreProfitPercentFieldNumber = 26,
    kTradableProfitChangePercentFieldNumber = 27,
    kTradableCentralizedPercentFieldNumber = 28,
    kTradableCentralizedMaxCostOfPositionsFieldNumber = 29,
    kTradableCentralizedMinCostOfPositionsFieldNumber = 30,
    kTradableShareTotalNumberFieldNumber = 31,
    kTradableSharePercentFieldNumber = 32,
    kIsFinalSettlementFieldNumber = 14,
    kDataMultiplePowerOf10FieldNumber = 56,
    kRestrictedMCSTFieldNumber = 41,
    kRestrictedMaxCostOfPositionsFieldNumber = 42,
    kRestrictedMinCostOfPositionsFieldNumber = 43,
    kRestrictedShareTotalNumberFieldNumber = 46,
    kRestrictedSharePercentFieldNumber = 47,
    kLargeShareholdersMCSTFieldNumber = 51,
    kLargeShareholdersMaxCostOfPositionsFieldNumber = 52,
    kLargeShareholdersMinCostOfPositionsFieldNumber = 53,
    kLargeShareholdersShareTotalNumberFieldNumber = 54,
    kLargeShareholdersSharePercentFieldNumber = 55,
  };
  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  int tradabledetails_size() const;
  private:
  int _internal_tradabledetails_size() const;
  public:
  void clear_tradabledetails();
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* mutable_tradabledetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
      mutable_tradabledetails();
  private:
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& _internal_tradabledetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* _internal_add_tradabledetails();
  public:
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& tradabledetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* add_tradabledetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
      tradabledetails() const;

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  int restricteddetails_size() const;
  private:
  int _internal_restricteddetails_size() const;
  public:
  void clear_restricteddetails();
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* mutable_restricteddetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
      mutable_restricteddetails();
  private:
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& _internal_restricteddetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* _internal_add_restricteddetails();
  public:
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& restricteddetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* add_restricteddetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
      restricteddetails() const;

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  int restrictedholddetails_size() const;
  private:
  int _internal_restrictedholddetails_size() const;
  public:
  void clear_restrictedholddetails();
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* mutable_restrictedholddetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
      mutable_restrictedholddetails();
  private:
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& _internal_restrictedholddetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* _internal_add_restrictedholddetails();
  public:
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& restrictedholddetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* add_restrictedholddetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
      restrictedholddetails() const;

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  int largeshareholdersdetails_size() const;
  private:
  int _internal_largeshareholdersdetails_size() const;
  public:
  void clear_largeshareholdersdetails();
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* mutable_largeshareholdersdetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
      mutable_largeshareholdersdetails();
  private:
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& _internal_largeshareholdersdetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* _internal_add_largeshareholdersdetails();
  public:
  const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& largeshareholdersdetails(int index) const;
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* add_largeshareholdersdetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
      largeshareholdersdetails() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 7;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 8;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int64 LastPx = 11;
  void clear_lastpx();
  int64_t lastpx() const;
  void set_lastpx(int64_t value);
  private:
  int64_t _internal_lastpx() const;
  void _internal_set_lastpx(int64_t value);
  public:

  // int64 PreClosePx = 12;
  void clear_preclosepx();
  int64_t preclosepx() const;
  void set_preclosepx(int64_t value);
  private:
  int64_t _internal_preclosepx() const;
  void _internal_set_preclosepx(int64_t value);
  public:

  // int64 ShareTotalNumber = 13;
  void clear_sharetotalnumber();
  int64_t sharetotalnumber() const;
  void set_sharetotalnumber(int64_t value);
  private:
  int64_t _internal_sharetotalnumber() const;
  void _internal_set_sharetotalnumber(int64_t value);
  public:

  // int64 TotalShare = 15;
  void clear_totalshare();
  int64_t totalshare() const;
  void set_totalshare(int64_t value);
  private:
  int64_t _internal_totalshare() const;
  void _internal_set_totalshare(int64_t value);
  public:

  // int64 ATotalShare = 16;
  void clear_atotalshare();
  int64_t atotalshare() const;
  void set_atotalshare(int64_t value);
  private:
  int64_t _internal_atotalshare() const;
  void _internal_set_atotalshare(int64_t value);
  public:

  // int64 AListedTotalShare = 17;
  void clear_alistedtotalshare();
  int64_t alistedtotalshare() const;
  void set_alistedtotalshare(int64_t value);
  private:
  int64_t _internal_alistedtotalshare() const;
  void _internal_set_alistedtotalshare(int64_t value);
  public:

  // int64 TradableMCST = 21;
  void clear_tradablemcst();
  int64_t tradablemcst() const;
  void set_tradablemcst(int64_t value);
  private:
  int64_t _internal_tradablemcst() const;
  void _internal_set_tradablemcst(int64_t value);
  public:

  // int64 TradableMaxCostOfPositions = 22;
  void clear_tradablemaxcostofpositions();
  int64_t tradablemaxcostofpositions() const;
  void set_tradablemaxcostofpositions(int64_t value);
  private:
  int64_t _internal_tradablemaxcostofpositions() const;
  void _internal_set_tradablemaxcostofpositions(int64_t value);
  public:

  // int64 TradableMinCostOfPositions = 23;
  void clear_tradablemincostofpositions();
  int64_t tradablemincostofpositions() const;
  void set_tradablemincostofpositions(int64_t value);
  private:
  int64_t _internal_tradablemincostofpositions() const;
  void _internal_set_tradablemincostofpositions(int64_t value);
  public:

  // int64 TradableProfitPercent = 24;
  void clear_tradableprofitpercent();
  int64_t tradableprofitpercent() const;
  void set_tradableprofitpercent(int64_t value);
  private:
  int64_t _internal_tradableprofitpercent() const;
  void _internal_set_tradableprofitpercent(int64_t value);
  public:

  // int64 TradableChipDispersionPercent = 25;
  void clear_tradablechipdispersionpercent();
  int64_t tradablechipdispersionpercent() const;
  void set_tradablechipdispersionpercent(int64_t value);
  private:
  int64_t _internal_tradablechipdispersionpercent() const;
  void _internal_set_tradablechipdispersionpercent(int64_t value);
  public:

  // int64 TradablePreProfitPercent = 26;
  void clear_tradablepreprofitpercent();
  int64_t tradablepreprofitpercent() const;
  void set_tradablepreprofitpercent(int64_t value);
  private:
  int64_t _internal_tradablepreprofitpercent() const;
  void _internal_set_tradablepreprofitpercent(int64_t value);
  public:

  // int64 TradableProfitChangePercent = 27;
  void clear_tradableprofitchangepercent();
  int64_t tradableprofitchangepercent() const;
  void set_tradableprofitchangepercent(int64_t value);
  private:
  int64_t _internal_tradableprofitchangepercent() const;
  void _internal_set_tradableprofitchangepercent(int64_t value);
  public:

  // int64 TradableCentralizedPercent = 28;
  void clear_tradablecentralizedpercent();
  int64_t tradablecentralizedpercent() const;
  void set_tradablecentralizedpercent(int64_t value);
  private:
  int64_t _internal_tradablecentralizedpercent() const;
  void _internal_set_tradablecentralizedpercent(int64_t value);
  public:

  // int64 TradableCentralizedMaxCostOfPositions = 29;
  void clear_tradablecentralizedmaxcostofpositions();
  int64_t tradablecentralizedmaxcostofpositions() const;
  void set_tradablecentralizedmaxcostofpositions(int64_t value);
  private:
  int64_t _internal_tradablecentralizedmaxcostofpositions() const;
  void _internal_set_tradablecentralizedmaxcostofpositions(int64_t value);
  public:

  // int64 TradableCentralizedMinCostOfPositions = 30;
  void clear_tradablecentralizedmincostofpositions();
  int64_t tradablecentralizedmincostofpositions() const;
  void set_tradablecentralizedmincostofpositions(int64_t value);
  private:
  int64_t _internal_tradablecentralizedmincostofpositions() const;
  void _internal_set_tradablecentralizedmincostofpositions(int64_t value);
  public:

  // int64 TradableShareTotalNumber = 31;
  void clear_tradablesharetotalnumber();
  int64_t tradablesharetotalnumber() const;
  void set_tradablesharetotalnumber(int64_t value);
  private:
  int64_t _internal_tradablesharetotalnumber() const;
  void _internal_set_tradablesharetotalnumber(int64_t value);
  public:

  // int64 TradableSharePercent = 32;
  void clear_tradablesharepercent();
  int64_t tradablesharepercent() const;
  void set_tradablesharepercent(int64_t value);
  private:
  int64_t _internal_tradablesharepercent() const;
  void _internal_set_tradablesharepercent(int64_t value);
  public:

  // bool IsFinalSettlement = 14;
  void clear_isfinalsettlement();
  bool isfinalsettlement() const;
  void set_isfinalsettlement(bool value);
  private:
  bool _internal_isfinalsettlement() const;
  void _internal_set_isfinalsettlement(bool value);
  public:

  // int32 DataMultiplePowerOf10 = 56;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // int64 RestrictedMCST = 41;
  void clear_restrictedmcst();
  int64_t restrictedmcst() const;
  void set_restrictedmcst(int64_t value);
  private:
  int64_t _internal_restrictedmcst() const;
  void _internal_set_restrictedmcst(int64_t value);
  public:

  // int64 RestrictedMaxCostOfPositions = 42;
  void clear_restrictedmaxcostofpositions();
  int64_t restrictedmaxcostofpositions() const;
  void set_restrictedmaxcostofpositions(int64_t value);
  private:
  int64_t _internal_restrictedmaxcostofpositions() const;
  void _internal_set_restrictedmaxcostofpositions(int64_t value);
  public:

  // int64 RestrictedMinCostOfPositions = 43;
  void clear_restrictedmincostofpositions();
  int64_t restrictedmincostofpositions() const;
  void set_restrictedmincostofpositions(int64_t value);
  private:
  int64_t _internal_restrictedmincostofpositions() const;
  void _internal_set_restrictedmincostofpositions(int64_t value);
  public:

  // int64 RestrictedShareTotalNumber = 46;
  void clear_restrictedsharetotalnumber();
  int64_t restrictedsharetotalnumber() const;
  void set_restrictedsharetotalnumber(int64_t value);
  private:
  int64_t _internal_restrictedsharetotalnumber() const;
  void _internal_set_restrictedsharetotalnumber(int64_t value);
  public:

  // int64 RestrictedSharePercent = 47;
  void clear_restrictedsharepercent();
  int64_t restrictedsharepercent() const;
  void set_restrictedsharepercent(int64_t value);
  private:
  int64_t _internal_restrictedsharepercent() const;
  void _internal_set_restrictedsharepercent(int64_t value);
  public:

  // int64 LargeShareholdersMCST = 51;
  void clear_largeshareholdersmcst();
  int64_t largeshareholdersmcst() const;
  void set_largeshareholdersmcst(int64_t value);
  private:
  int64_t _internal_largeshareholdersmcst() const;
  void _internal_set_largeshareholdersmcst(int64_t value);
  public:

  // int64 LargeShareholdersMaxCostOfPositions = 52;
  void clear_largeshareholdersmaxcostofpositions();
  int64_t largeshareholdersmaxcostofpositions() const;
  void set_largeshareholdersmaxcostofpositions(int64_t value);
  private:
  int64_t _internal_largeshareholdersmaxcostofpositions() const;
  void _internal_set_largeshareholdersmaxcostofpositions(int64_t value);
  public:

  // int64 LargeShareholdersMinCostOfPositions = 53;
  void clear_largeshareholdersmincostofpositions();
  int64_t largeshareholdersmincostofpositions() const;
  void set_largeshareholdersmincostofpositions(int64_t value);
  private:
  int64_t _internal_largeshareholdersmincostofpositions() const;
  void _internal_set_largeshareholdersmincostofpositions(int64_t value);
  public:

  // int64 LargeShareholdersShareTotalNumber = 54;
  void clear_largeshareholderssharetotalnumber();
  int64_t largeshareholderssharetotalnumber() const;
  void set_largeshareholderssharetotalnumber(int64_t value);
  private:
  int64_t _internal_largeshareholderssharetotalnumber() const;
  void _internal_set_largeshareholderssharetotalnumber(int64_t value);
  public:

  // int64 LargeShareholdersSharePercent = 55;
  void clear_largeshareholderssharepercent();
  int64_t largeshareholderssharepercent() const;
  void set_largeshareholderssharepercent(int64_t value);
  private:
  int64_t _internal_largeshareholderssharepercent() const;
  void _internal_set_largeshareholderssharepercent(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADChipDistribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail > tradabledetails_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail > restricteddetails_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail > restrictedholddetails_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail > largeshareholdersdetails_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int64_t lastpx_;
    int64_t preclosepx_;
    int64_t sharetotalnumber_;
    int64_t totalshare_;
    int64_t atotalshare_;
    int64_t alistedtotalshare_;
    int64_t tradablemcst_;
    int64_t tradablemaxcostofpositions_;
    int64_t tradablemincostofpositions_;
    int64_t tradableprofitpercent_;
    int64_t tradablechipdispersionpercent_;
    int64_t tradablepreprofitpercent_;
    int64_t tradableprofitchangepercent_;
    int64_t tradablecentralizedpercent_;
    int64_t tradablecentralizedmaxcostofpositions_;
    int64_t tradablecentralizedmincostofpositions_;
    int64_t tradablesharetotalnumber_;
    int64_t tradablesharepercent_;
    bool isfinalsettlement_;
    int32_t datamultiplepowerof10_;
    int64_t restrictedmcst_;
    int64_t restrictedmaxcostofpositions_;
    int64_t restrictedmincostofpositions_;
    int64_t restrictedsharetotalnumber_;
    int64_t restrictedsharepercent_;
    int64_t largeshareholdersmcst_;
    int64_t largeshareholdersmaxcostofpositions_;
    int64_t largeshareholdersmincostofpositions_;
    int64_t largeshareholderssharetotalnumber_;
    int64_t largeshareholderssharepercent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADChipDistribution_2eproto;
};
// -------------------------------------------------------------------

class ADChipDistributionDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADChipDistributionDetail) */ {
 public:
  inline ADChipDistributionDetail() : ADChipDistributionDetail(nullptr) {}
  ~ADChipDistributionDetail() override;
  explicit PROTOBUF_CONSTEXPR ADChipDistributionDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADChipDistributionDetail(const ADChipDistributionDetail& from);
  ADChipDistributionDetail(ADChipDistributionDetail&& from) noexcept
    : ADChipDistributionDetail() {
    *this = ::std::move(from);
  }

  inline ADChipDistributionDetail& operator=(const ADChipDistributionDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADChipDistributionDetail& operator=(ADChipDistributionDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADChipDistributionDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADChipDistributionDetail* internal_default_instance() {
    return reinterpret_cast<const ADChipDistributionDetail*>(
               &_ADChipDistributionDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ADChipDistributionDetail& a, ADChipDistributionDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ADChipDistributionDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADChipDistributionDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADChipDistributionDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADChipDistributionDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADChipDistributionDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADChipDistributionDetail& from) {
    ADChipDistributionDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADChipDistributionDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADChipDistributionDetail";
  }
  protected:
  explicit ADChipDistributionDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareHolderNameFieldNumber = 5,
    kPriceFieldNumber = 1,
    kNumberOfSharesFieldNumber = 2,
    kNumberOfSharesPercentFieldNumber = 3,
    kListedDateFieldNumber = 4,
  };
  // string ShareHolderName = 5;
  void clear_shareholdername();
  const std::string& shareholdername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shareholdername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shareholdername();
  PROTOBUF_NODISCARD std::string* release_shareholdername();
  void set_allocated_shareholdername(std::string* shareholdername);
  private:
  const std::string& _internal_shareholdername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shareholdername(const std::string& value);
  std::string* _internal_mutable_shareholdername();
  public:

  // int64 Price = 1;
  void clear_price();
  int64_t price() const;
  void set_price(int64_t value);
  private:
  int64_t _internal_price() const;
  void _internal_set_price(int64_t value);
  public:

  // int64 NumberOfShares = 2;
  void clear_numberofshares();
  int64_t numberofshares() const;
  void set_numberofshares(int64_t value);
  private:
  int64_t _internal_numberofshares() const;
  void _internal_set_numberofshares(int64_t value);
  public:

  // int64 NumberOfSharesPercent = 3;
  void clear_numberofsharespercent();
  int64_t numberofsharespercent() const;
  void set_numberofsharespercent(int64_t value);
  private:
  int64_t _internal_numberofsharespercent() const;
  void _internal_set_numberofsharespercent(int64_t value);
  public:

  // int64 ListedDate = 4;
  void clear_listeddate();
  int64_t listeddate() const;
  void set_listeddate(int64_t value);
  private:
  int64_t _internal_listeddate() const;
  void _internal_set_listeddate(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADChipDistributionDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shareholdername_;
    int64_t price_;
    int64_t numberofshares_;
    int64_t numberofsharespercent_;
    int64_t listeddate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADChipDistribution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADChipDistribution

// string HTSCSecurityID = 1;
inline void ADChipDistribution::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADChipDistribution::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADChipDistribution::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}
inline std::string* ADChipDistribution::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  return _s;
}
inline const std::string& ADChipDistribution::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADChipDistribution::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADChipDistribution::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADChipDistribution::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADChipDistribution::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADChipDistribution::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t ADChipDistribution::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t ADChipDistribution::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.MDDate)
  return _internal_mddate();
}
inline void ADChipDistribution::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void ADChipDistribution::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.MDDate)
}

// int32 MDTime = 3;
inline void ADChipDistribution::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t ADChipDistribution::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t ADChipDistribution::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.MDTime)
  return _internal_mdtime();
}
inline void ADChipDistribution::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void ADChipDistribution::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADChipDistribution::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t ADChipDistribution::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.DataTimestamp)
  return _internal_datatimestamp();
}
inline void ADChipDistribution::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void ADChipDistribution::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADChipDistribution::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADChipDistribution::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADChipDistribution::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.securityIDSource)
  return _internal_securityidsource();
}
inline void ADChipDistribution::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void ADChipDistribution::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADChipDistribution::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADChipDistribution::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType ADChipDistribution::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.securityType)
  return _internal_securitytype();
}
inline void ADChipDistribution::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void ADChipDistribution::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.securityType)
}

// int32 ExchangeDate = 7;
inline void ADChipDistribution::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t ADChipDistribution::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t ADChipDistribution::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeDate)
  return _internal_exchangedate();
}
inline void ADChipDistribution::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void ADChipDistribution::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeDate)
}

// int32 ExchangeTime = 8;
inline void ADChipDistribution::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t ADChipDistribution::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t ADChipDistribution::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeTime)
  return _internal_exchangetime();
}
inline void ADChipDistribution::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void ADChipDistribution::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeTime)
}

// int64 LastPx = 11;
inline void ADChipDistribution::clear_lastpx() {
  _impl_.lastpx_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_lastpx() const {
  return _impl_.lastpx_;
}
inline int64_t ADChipDistribution::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LastPx)
  return _internal_lastpx();
}
inline void ADChipDistribution::_internal_set_lastpx(int64_t value) {
  
  _impl_.lastpx_ = value;
}
inline void ADChipDistribution::set_lastpx(int64_t value) {
  _internal_set_lastpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LastPx)
}

// int64 PreClosePx = 12;
inline void ADChipDistribution::clear_preclosepx() {
  _impl_.preclosepx_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_preclosepx() const {
  return _impl_.preclosepx_;
}
inline int64_t ADChipDistribution::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.PreClosePx)
  return _internal_preclosepx();
}
inline void ADChipDistribution::_internal_set_preclosepx(int64_t value) {
  
  _impl_.preclosepx_ = value;
}
inline void ADChipDistribution::set_preclosepx(int64_t value) {
  _internal_set_preclosepx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.PreClosePx)
}

// int64 ShareTotalNumber = 13;
inline void ADChipDistribution::clear_sharetotalnumber() {
  _impl_.sharetotalnumber_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_sharetotalnumber() const {
  return _impl_.sharetotalnumber_;
}
inline int64_t ADChipDistribution::sharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ShareTotalNumber)
  return _internal_sharetotalnumber();
}
inline void ADChipDistribution::_internal_set_sharetotalnumber(int64_t value) {
  
  _impl_.sharetotalnumber_ = value;
}
inline void ADChipDistribution::set_sharetotalnumber(int64_t value) {
  _internal_set_sharetotalnumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ShareTotalNumber)
}

// bool IsFinalSettlement = 14;
inline void ADChipDistribution::clear_isfinalsettlement() {
  _impl_.isfinalsettlement_ = false;
}
inline bool ADChipDistribution::_internal_isfinalsettlement() const {
  return _impl_.isfinalsettlement_;
}
inline bool ADChipDistribution::isfinalsettlement() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.IsFinalSettlement)
  return _internal_isfinalsettlement();
}
inline void ADChipDistribution::_internal_set_isfinalsettlement(bool value) {
  
  _impl_.isfinalsettlement_ = value;
}
inline void ADChipDistribution::set_isfinalsettlement(bool value) {
  _internal_set_isfinalsettlement(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.IsFinalSettlement)
}

// int64 TotalShare = 15;
inline void ADChipDistribution::clear_totalshare() {
  _impl_.totalshare_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_totalshare() const {
  return _impl_.totalshare_;
}
inline int64_t ADChipDistribution::totalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TotalShare)
  return _internal_totalshare();
}
inline void ADChipDistribution::_internal_set_totalshare(int64_t value) {
  
  _impl_.totalshare_ = value;
}
inline void ADChipDistribution::set_totalshare(int64_t value) {
  _internal_set_totalshare(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TotalShare)
}

// int64 ATotalShare = 16;
inline void ADChipDistribution::clear_atotalshare() {
  _impl_.atotalshare_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_atotalshare() const {
  return _impl_.atotalshare_;
}
inline int64_t ADChipDistribution::atotalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ATotalShare)
  return _internal_atotalshare();
}
inline void ADChipDistribution::_internal_set_atotalshare(int64_t value) {
  
  _impl_.atotalshare_ = value;
}
inline void ADChipDistribution::set_atotalshare(int64_t value) {
  _internal_set_atotalshare(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ATotalShare)
}

// int64 AListedTotalShare = 17;
inline void ADChipDistribution::clear_alistedtotalshare() {
  _impl_.alistedtotalshare_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_alistedtotalshare() const {
  return _impl_.alistedtotalshare_;
}
inline int64_t ADChipDistribution::alistedtotalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.AListedTotalShare)
  return _internal_alistedtotalshare();
}
inline void ADChipDistribution::_internal_set_alistedtotalshare(int64_t value) {
  
  _impl_.alistedtotalshare_ = value;
}
inline void ADChipDistribution::set_alistedtotalshare(int64_t value) {
  _internal_set_alistedtotalshare(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.AListedTotalShare)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
inline int ADChipDistribution::_internal_tradabledetails_size() const {
  return _impl_.tradabledetails_.size();
}
inline int ADChipDistribution::tradabledetails_size() const {
  return _internal_tradabledetails_size();
}
inline void ADChipDistribution::clear_tradabledetails() {
  _impl_.tradabledetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_tradabledetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return _impl_.tradabledetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_tradabledetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return &_impl_.tradabledetails_;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::_internal_tradabledetails(int index) const {
  return _impl_.tradabledetails_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::tradabledetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return _internal_tradabledetails(index);
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::_internal_add_tradabledetails() {
  return _impl_.tradabledetails_.Add();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_tradabledetails() {
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* _add = _internal_add_tradabledetails();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::tradabledetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return _impl_.tradabledetails_;
}

// int64 TradableMCST = 21;
inline void ADChipDistribution::clear_tradablemcst() {
  _impl_.tradablemcst_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablemcst() const {
  return _impl_.tradablemcst_;
}
inline int64_t ADChipDistribution::tradablemcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMCST)
  return _internal_tradablemcst();
}
inline void ADChipDistribution::_internal_set_tradablemcst(int64_t value) {
  
  _impl_.tradablemcst_ = value;
}
inline void ADChipDistribution::set_tradablemcst(int64_t value) {
  _internal_set_tradablemcst(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMCST)
}

// int64 TradableMaxCostOfPositions = 22;
inline void ADChipDistribution::clear_tradablemaxcostofpositions() {
  _impl_.tradablemaxcostofpositions_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablemaxcostofpositions() const {
  return _impl_.tradablemaxcostofpositions_;
}
inline int64_t ADChipDistribution::tradablemaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMaxCostOfPositions)
  return _internal_tradablemaxcostofpositions();
}
inline void ADChipDistribution::_internal_set_tradablemaxcostofpositions(int64_t value) {
  
  _impl_.tradablemaxcostofpositions_ = value;
}
inline void ADChipDistribution::set_tradablemaxcostofpositions(int64_t value) {
  _internal_set_tradablemaxcostofpositions(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMaxCostOfPositions)
}

// int64 TradableMinCostOfPositions = 23;
inline void ADChipDistribution::clear_tradablemincostofpositions() {
  _impl_.tradablemincostofpositions_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablemincostofpositions() const {
  return _impl_.tradablemincostofpositions_;
}
inline int64_t ADChipDistribution::tradablemincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMinCostOfPositions)
  return _internal_tradablemincostofpositions();
}
inline void ADChipDistribution::_internal_set_tradablemincostofpositions(int64_t value) {
  
  _impl_.tradablemincostofpositions_ = value;
}
inline void ADChipDistribution::set_tradablemincostofpositions(int64_t value) {
  _internal_set_tradablemincostofpositions(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMinCostOfPositions)
}

// int64 TradableProfitPercent = 24;
inline void ADChipDistribution::clear_tradableprofitpercent() {
  _impl_.tradableprofitpercent_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradableprofitpercent() const {
  return _impl_.tradableprofitpercent_;
}
inline int64_t ADChipDistribution::tradableprofitpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitPercent)
  return _internal_tradableprofitpercent();
}
inline void ADChipDistribution::_internal_set_tradableprofitpercent(int64_t value) {
  
  _impl_.tradableprofitpercent_ = value;
}
inline void ADChipDistribution::set_tradableprofitpercent(int64_t value) {
  _internal_set_tradableprofitpercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitPercent)
}

// int64 TradableChipDispersionPercent = 25;
inline void ADChipDistribution::clear_tradablechipdispersionpercent() {
  _impl_.tradablechipdispersionpercent_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablechipdispersionpercent() const {
  return _impl_.tradablechipdispersionpercent_;
}
inline int64_t ADChipDistribution::tradablechipdispersionpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableChipDispersionPercent)
  return _internal_tradablechipdispersionpercent();
}
inline void ADChipDistribution::_internal_set_tradablechipdispersionpercent(int64_t value) {
  
  _impl_.tradablechipdispersionpercent_ = value;
}
inline void ADChipDistribution::set_tradablechipdispersionpercent(int64_t value) {
  _internal_set_tradablechipdispersionpercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableChipDispersionPercent)
}

// int64 TradablePreProfitPercent = 26;
inline void ADChipDistribution::clear_tradablepreprofitpercent() {
  _impl_.tradablepreprofitpercent_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablepreprofitpercent() const {
  return _impl_.tradablepreprofitpercent_;
}
inline int64_t ADChipDistribution::tradablepreprofitpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradablePreProfitPercent)
  return _internal_tradablepreprofitpercent();
}
inline void ADChipDistribution::_internal_set_tradablepreprofitpercent(int64_t value) {
  
  _impl_.tradablepreprofitpercent_ = value;
}
inline void ADChipDistribution::set_tradablepreprofitpercent(int64_t value) {
  _internal_set_tradablepreprofitpercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradablePreProfitPercent)
}

// int64 TradableProfitChangePercent = 27;
inline void ADChipDistribution::clear_tradableprofitchangepercent() {
  _impl_.tradableprofitchangepercent_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradableprofitchangepercent() const {
  return _impl_.tradableprofitchangepercent_;
}
inline int64_t ADChipDistribution::tradableprofitchangepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitChangePercent)
  return _internal_tradableprofitchangepercent();
}
inline void ADChipDistribution::_internal_set_tradableprofitchangepercent(int64_t value) {
  
  _impl_.tradableprofitchangepercent_ = value;
}
inline void ADChipDistribution::set_tradableprofitchangepercent(int64_t value) {
  _internal_set_tradableprofitchangepercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitChangePercent)
}

// int64 TradableCentralizedPercent = 28;
inline void ADChipDistribution::clear_tradablecentralizedpercent() {
  _impl_.tradablecentralizedpercent_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablecentralizedpercent() const {
  return _impl_.tradablecentralizedpercent_;
}
inline int64_t ADChipDistribution::tradablecentralizedpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedPercent)
  return _internal_tradablecentralizedpercent();
}
inline void ADChipDistribution::_internal_set_tradablecentralizedpercent(int64_t value) {
  
  _impl_.tradablecentralizedpercent_ = value;
}
inline void ADChipDistribution::set_tradablecentralizedpercent(int64_t value) {
  _internal_set_tradablecentralizedpercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedPercent)
}

// int64 TradableCentralizedMaxCostOfPositions = 29;
inline void ADChipDistribution::clear_tradablecentralizedmaxcostofpositions() {
  _impl_.tradablecentralizedmaxcostofpositions_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablecentralizedmaxcostofpositions() const {
  return _impl_.tradablecentralizedmaxcostofpositions_;
}
inline int64_t ADChipDistribution::tradablecentralizedmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMaxCostOfPositions)
  return _internal_tradablecentralizedmaxcostofpositions();
}
inline void ADChipDistribution::_internal_set_tradablecentralizedmaxcostofpositions(int64_t value) {
  
  _impl_.tradablecentralizedmaxcostofpositions_ = value;
}
inline void ADChipDistribution::set_tradablecentralizedmaxcostofpositions(int64_t value) {
  _internal_set_tradablecentralizedmaxcostofpositions(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMaxCostOfPositions)
}

// int64 TradableCentralizedMinCostOfPositions = 30;
inline void ADChipDistribution::clear_tradablecentralizedmincostofpositions() {
  _impl_.tradablecentralizedmincostofpositions_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablecentralizedmincostofpositions() const {
  return _impl_.tradablecentralizedmincostofpositions_;
}
inline int64_t ADChipDistribution::tradablecentralizedmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMinCostOfPositions)
  return _internal_tradablecentralizedmincostofpositions();
}
inline void ADChipDistribution::_internal_set_tradablecentralizedmincostofpositions(int64_t value) {
  
  _impl_.tradablecentralizedmincostofpositions_ = value;
}
inline void ADChipDistribution::set_tradablecentralizedmincostofpositions(int64_t value) {
  _internal_set_tradablecentralizedmincostofpositions(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMinCostOfPositions)
}

// int64 TradableShareTotalNumber = 31;
inline void ADChipDistribution::clear_tradablesharetotalnumber() {
  _impl_.tradablesharetotalnumber_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablesharetotalnumber() const {
  return _impl_.tradablesharetotalnumber_;
}
inline int64_t ADChipDistribution::tradablesharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableShareTotalNumber)
  return _internal_tradablesharetotalnumber();
}
inline void ADChipDistribution::_internal_set_tradablesharetotalnumber(int64_t value) {
  
  _impl_.tradablesharetotalnumber_ = value;
}
inline void ADChipDistribution::set_tradablesharetotalnumber(int64_t value) {
  _internal_set_tradablesharetotalnumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableShareTotalNumber)
}

// int64 TradableSharePercent = 32;
inline void ADChipDistribution::clear_tradablesharepercent() {
  _impl_.tradablesharepercent_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_tradablesharepercent() const {
  return _impl_.tradablesharepercent_;
}
inline int64_t ADChipDistribution::tradablesharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableSharePercent)
  return _internal_tradablesharepercent();
}
inline void ADChipDistribution::_internal_set_tradablesharepercent(int64_t value) {
  
  _impl_.tradablesharepercent_ = value;
}
inline void ADChipDistribution::set_tradablesharepercent(int64_t value) {
  _internal_set_tradablesharepercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableSharePercent)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
inline int ADChipDistribution::_internal_restricteddetails_size() const {
  return _impl_.restricteddetails_.size();
}
inline int ADChipDistribution::restricteddetails_size() const {
  return _internal_restricteddetails_size();
}
inline void ADChipDistribution::clear_restricteddetails() {
  _impl_.restricteddetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_restricteddetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return _impl_.restricteddetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_restricteddetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return &_impl_.restricteddetails_;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::_internal_restricteddetails(int index) const {
  return _impl_.restricteddetails_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::restricteddetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return _internal_restricteddetails(index);
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::_internal_add_restricteddetails() {
  return _impl_.restricteddetails_.Add();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_restricteddetails() {
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* _add = _internal_add_restricteddetails();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::restricteddetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return _impl_.restricteddetails_;
}

// int64 RestrictedMCST = 41;
inline void ADChipDistribution::clear_restrictedmcst() {
  _impl_.restrictedmcst_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_restrictedmcst() const {
  return _impl_.restrictedmcst_;
}
inline int64_t ADChipDistribution::restrictedmcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMCST)
  return _internal_restrictedmcst();
}
inline void ADChipDistribution::_internal_set_restrictedmcst(int64_t value) {
  
  _impl_.restrictedmcst_ = value;
}
inline void ADChipDistribution::set_restrictedmcst(int64_t value) {
  _internal_set_restrictedmcst(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMCST)
}

// int64 RestrictedMaxCostOfPositions = 42;
inline void ADChipDistribution::clear_restrictedmaxcostofpositions() {
  _impl_.restrictedmaxcostofpositions_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_restrictedmaxcostofpositions() const {
  return _impl_.restrictedmaxcostofpositions_;
}
inline int64_t ADChipDistribution::restrictedmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMaxCostOfPositions)
  return _internal_restrictedmaxcostofpositions();
}
inline void ADChipDistribution::_internal_set_restrictedmaxcostofpositions(int64_t value) {
  
  _impl_.restrictedmaxcostofpositions_ = value;
}
inline void ADChipDistribution::set_restrictedmaxcostofpositions(int64_t value) {
  _internal_set_restrictedmaxcostofpositions(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMaxCostOfPositions)
}

// int64 RestrictedMinCostOfPositions = 43;
inline void ADChipDistribution::clear_restrictedmincostofpositions() {
  _impl_.restrictedmincostofpositions_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_restrictedmincostofpositions() const {
  return _impl_.restrictedmincostofpositions_;
}
inline int64_t ADChipDistribution::restrictedmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMinCostOfPositions)
  return _internal_restrictedmincostofpositions();
}
inline void ADChipDistribution::_internal_set_restrictedmincostofpositions(int64_t value) {
  
  _impl_.restrictedmincostofpositions_ = value;
}
inline void ADChipDistribution::set_restrictedmincostofpositions(int64_t value) {
  _internal_set_restrictedmincostofpositions(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMinCostOfPositions)
}

// int64 RestrictedShareTotalNumber = 46;
inline void ADChipDistribution::clear_restrictedsharetotalnumber() {
  _impl_.restrictedsharetotalnumber_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_restrictedsharetotalnumber() const {
  return _impl_.restrictedsharetotalnumber_;
}
inline int64_t ADChipDistribution::restrictedsharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedShareTotalNumber)
  return _internal_restrictedsharetotalnumber();
}
inline void ADChipDistribution::_internal_set_restrictedsharetotalnumber(int64_t value) {
  
  _impl_.restrictedsharetotalnumber_ = value;
}
inline void ADChipDistribution::set_restrictedsharetotalnumber(int64_t value) {
  _internal_set_restrictedsharetotalnumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedShareTotalNumber)
}

// int64 RestrictedSharePercent = 47;
inline void ADChipDistribution::clear_restrictedsharepercent() {
  _impl_.restrictedsharepercent_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_restrictedsharepercent() const {
  return _impl_.restrictedsharepercent_;
}
inline int64_t ADChipDistribution::restrictedsharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedSharePercent)
  return _internal_restrictedsharepercent();
}
inline void ADChipDistribution::_internal_set_restrictedsharepercent(int64_t value) {
  
  _impl_.restrictedsharepercent_ = value;
}
inline void ADChipDistribution::set_restrictedsharepercent(int64_t value) {
  _internal_set_restrictedsharepercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedSharePercent)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
inline int ADChipDistribution::_internal_restrictedholddetails_size() const {
  return _impl_.restrictedholddetails_.size();
}
inline int ADChipDistribution::restrictedholddetails_size() const {
  return _internal_restrictedholddetails_size();
}
inline void ADChipDistribution::clear_restrictedholddetails() {
  _impl_.restrictedholddetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_restrictedholddetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return _impl_.restrictedholddetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_restrictedholddetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return &_impl_.restrictedholddetails_;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::_internal_restrictedholddetails(int index) const {
  return _impl_.restrictedholddetails_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::restrictedholddetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return _internal_restrictedholddetails(index);
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::_internal_add_restrictedholddetails() {
  return _impl_.restrictedholddetails_.Add();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_restrictedholddetails() {
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* _add = _internal_add_restrictedholddetails();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::restrictedholddetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return _impl_.restrictedholddetails_;
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
inline int ADChipDistribution::_internal_largeshareholdersdetails_size() const {
  return _impl_.largeshareholdersdetails_.size();
}
inline int ADChipDistribution::largeshareholdersdetails_size() const {
  return _internal_largeshareholdersdetails_size();
}
inline void ADChipDistribution::clear_largeshareholdersdetails() {
  _impl_.largeshareholdersdetails_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_largeshareholdersdetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return _impl_.largeshareholdersdetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_largeshareholdersdetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return &_impl_.largeshareholdersdetails_;
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::_internal_largeshareholdersdetails(int index) const {
  return _impl_.largeshareholdersdetails_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::largeshareholdersdetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return _internal_largeshareholdersdetails(index);
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::_internal_add_largeshareholdersdetails() {
  return _impl_.largeshareholdersdetails_.Add();
}
inline ::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_largeshareholdersdetails() {
  ::com::htsc::mdc::insight::model::ADChipDistributionDetail* _add = _internal_add_largeshareholdersdetails();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::largeshareholdersdetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return _impl_.largeshareholdersdetails_;
}

// int64 LargeShareholdersMCST = 51;
inline void ADChipDistribution::clear_largeshareholdersmcst() {
  _impl_.largeshareholdersmcst_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_largeshareholdersmcst() const {
  return _impl_.largeshareholdersmcst_;
}
inline int64_t ADChipDistribution::largeshareholdersmcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMCST)
  return _internal_largeshareholdersmcst();
}
inline void ADChipDistribution::_internal_set_largeshareholdersmcst(int64_t value) {
  
  _impl_.largeshareholdersmcst_ = value;
}
inline void ADChipDistribution::set_largeshareholdersmcst(int64_t value) {
  _internal_set_largeshareholdersmcst(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMCST)
}

// int64 LargeShareholdersMaxCostOfPositions = 52;
inline void ADChipDistribution::clear_largeshareholdersmaxcostofpositions() {
  _impl_.largeshareholdersmaxcostofpositions_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_largeshareholdersmaxcostofpositions() const {
  return _impl_.largeshareholdersmaxcostofpositions_;
}
inline int64_t ADChipDistribution::largeshareholdersmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMaxCostOfPositions)
  return _internal_largeshareholdersmaxcostofpositions();
}
inline void ADChipDistribution::_internal_set_largeshareholdersmaxcostofpositions(int64_t value) {
  
  _impl_.largeshareholdersmaxcostofpositions_ = value;
}
inline void ADChipDistribution::set_largeshareholdersmaxcostofpositions(int64_t value) {
  _internal_set_largeshareholdersmaxcostofpositions(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMaxCostOfPositions)
}

// int64 LargeShareholdersMinCostOfPositions = 53;
inline void ADChipDistribution::clear_largeshareholdersmincostofpositions() {
  _impl_.largeshareholdersmincostofpositions_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_largeshareholdersmincostofpositions() const {
  return _impl_.largeshareholdersmincostofpositions_;
}
inline int64_t ADChipDistribution::largeshareholdersmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMinCostOfPositions)
  return _internal_largeshareholdersmincostofpositions();
}
inline void ADChipDistribution::_internal_set_largeshareholdersmincostofpositions(int64_t value) {
  
  _impl_.largeshareholdersmincostofpositions_ = value;
}
inline void ADChipDistribution::set_largeshareholdersmincostofpositions(int64_t value) {
  _internal_set_largeshareholdersmincostofpositions(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMinCostOfPositions)
}

// int64 LargeShareholdersShareTotalNumber = 54;
inline void ADChipDistribution::clear_largeshareholderssharetotalnumber() {
  _impl_.largeshareholderssharetotalnumber_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_largeshareholderssharetotalnumber() const {
  return _impl_.largeshareholderssharetotalnumber_;
}
inline int64_t ADChipDistribution::largeshareholderssharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersShareTotalNumber)
  return _internal_largeshareholderssharetotalnumber();
}
inline void ADChipDistribution::_internal_set_largeshareholderssharetotalnumber(int64_t value) {
  
  _impl_.largeshareholderssharetotalnumber_ = value;
}
inline void ADChipDistribution::set_largeshareholderssharetotalnumber(int64_t value) {
  _internal_set_largeshareholderssharetotalnumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersShareTotalNumber)
}

// int64 LargeShareholdersSharePercent = 55;
inline void ADChipDistribution::clear_largeshareholderssharepercent() {
  _impl_.largeshareholderssharepercent_ = int64_t{0};
}
inline int64_t ADChipDistribution::_internal_largeshareholderssharepercent() const {
  return _impl_.largeshareholderssharepercent_;
}
inline int64_t ADChipDistribution::largeshareholderssharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersSharePercent)
  return _internal_largeshareholderssharepercent();
}
inline void ADChipDistribution::_internal_set_largeshareholderssharepercent(int64_t value) {
  
  _impl_.largeshareholderssharepercent_ = value;
}
inline void ADChipDistribution::set_largeshareholderssharepercent(int64_t value) {
  _internal_set_largeshareholderssharepercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersSharePercent)
}

// int32 DataMultiplePowerOf10 = 56;
inline void ADChipDistribution::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t ADChipDistribution::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t ADChipDistribution::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void ADChipDistribution::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void ADChipDistribution::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// ADChipDistributionDetail

// int64 Price = 1;
inline void ADChipDistributionDetail::clear_price() {
  _impl_.price_ = int64_t{0};
}
inline int64_t ADChipDistributionDetail::_internal_price() const {
  return _impl_.price_;
}
inline int64_t ADChipDistributionDetail::price() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.Price)
  return _internal_price();
}
inline void ADChipDistributionDetail::_internal_set_price(int64_t value) {
  
  _impl_.price_ = value;
}
inline void ADChipDistributionDetail::set_price(int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.Price)
}

// int64 NumberOfShares = 2;
inline void ADChipDistributionDetail::clear_numberofshares() {
  _impl_.numberofshares_ = int64_t{0};
}
inline int64_t ADChipDistributionDetail::_internal_numberofshares() const {
  return _impl_.numberofshares_;
}
inline int64_t ADChipDistributionDetail::numberofshares() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfShares)
  return _internal_numberofshares();
}
inline void ADChipDistributionDetail::_internal_set_numberofshares(int64_t value) {
  
  _impl_.numberofshares_ = value;
}
inline void ADChipDistributionDetail::set_numberofshares(int64_t value) {
  _internal_set_numberofshares(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfShares)
}

// int64 NumberOfSharesPercent = 3;
inline void ADChipDistributionDetail::clear_numberofsharespercent() {
  _impl_.numberofsharespercent_ = int64_t{0};
}
inline int64_t ADChipDistributionDetail::_internal_numberofsharespercent() const {
  return _impl_.numberofsharespercent_;
}
inline int64_t ADChipDistributionDetail::numberofsharespercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfSharesPercent)
  return _internal_numberofsharespercent();
}
inline void ADChipDistributionDetail::_internal_set_numberofsharespercent(int64_t value) {
  
  _impl_.numberofsharespercent_ = value;
}
inline void ADChipDistributionDetail::set_numberofsharespercent(int64_t value) {
  _internal_set_numberofsharespercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfSharesPercent)
}

// int64 ListedDate = 4;
inline void ADChipDistributionDetail::clear_listeddate() {
  _impl_.listeddate_ = int64_t{0};
}
inline int64_t ADChipDistributionDetail::_internal_listeddate() const {
  return _impl_.listeddate_;
}
inline int64_t ADChipDistributionDetail::listeddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.ListedDate)
  return _internal_listeddate();
}
inline void ADChipDistributionDetail::_internal_set_listeddate(int64_t value) {
  
  _impl_.listeddate_ = value;
}
inline void ADChipDistributionDetail::set_listeddate(int64_t value) {
  _internal_set_listeddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.ListedDate)
}

// string ShareHolderName = 5;
inline void ADChipDistributionDetail::clear_shareholdername() {
  _impl_.shareholdername_.ClearToEmpty();
}
inline const std::string& ADChipDistributionDetail::shareholdername() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  return _internal_shareholdername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADChipDistributionDetail::set_shareholdername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shareholdername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}
inline std::string* ADChipDistributionDetail::mutable_shareholdername() {
  std::string* _s = _internal_mutable_shareholdername();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  return _s;
}
inline const std::string& ADChipDistributionDetail::_internal_shareholdername() const {
  return _impl_.shareholdername_.Get();
}
inline void ADChipDistributionDetail::_internal_set_shareholdername(const std::string& value) {
  
  _impl_.shareholdername_.Set(value, GetArenaForAllocation());
}
inline std::string* ADChipDistributionDetail::_internal_mutable_shareholdername() {
  
  return _impl_.shareholdername_.Mutable(GetArenaForAllocation());
}
inline std::string* ADChipDistributionDetail::release_shareholdername() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  return _impl_.shareholdername_.Release();
}
inline void ADChipDistributionDetail::set_allocated_shareholdername(std::string* shareholdername) {
  if (shareholdername != nullptr) {
    
  } else {
    
  }
  _impl_.shareholdername_.SetAllocated(shareholdername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shareholdername_.IsDefault()) {
    _impl_.shareholdername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADChipDistribution_2eproto
