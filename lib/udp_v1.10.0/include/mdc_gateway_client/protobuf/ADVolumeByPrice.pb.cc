// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADVolumeByPrice.proto

#include "ADVolumeByPrice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR ADVolumeByPrice::ADVolumeByPrice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.totalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADVolumeByPriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVolumeByPriceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVolumeByPriceDefaultTypeInternal() {}
  union {
    ADVolumeByPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVolumeByPriceDefaultTypeInternal _ADVolumeByPrice_default_instance_;
PROTOBUF_CONSTEXPR ADVolumeByPriceDetail::ADVolumeByPriceDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tradeprice_)*/int64_t{0}
  , /*decltype(_impl_.totalqty_)*/int64_t{0}
  , /*decltype(_impl_.buyqty_)*/int64_t{0}
  , /*decltype(_impl_.sellqty_)*/int64_t{0}
  , /*decltype(_impl_.totalnumbers_)*/int64_t{0}
  , /*decltype(_impl_.buynumbers_)*/int64_t{0}
  , /*decltype(_impl_.sellnumbers_)*/int64_t{0}
  , /*decltype(_impl_.volumepernumber_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADVolumeByPriceDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVolumeByPriceDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVolumeByPriceDetailDefaultTypeInternal() {}
  union {
    ADVolumeByPriceDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVolumeByPriceDetailDefaultTypeInternal _ADVolumeByPriceDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_ADVolumeByPrice_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ADVolumeByPrice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ADVolumeByPrice_2eproto = nullptr;

const uint32_t TableStruct_ADVolumeByPrice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPrice, _impl_.datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _impl_.tradeprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _impl_.totalqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _impl_.buyqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _impl_.sellqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _impl_.totalnumbers_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _impl_.buynumbers_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _impl_.sellnumbers_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail, _impl_.volumepernumber_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADVolumeByPrice)},
  { 17, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADVolumeByPriceDetail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_ADVolumeByPrice_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADVolumeByPriceDetail_default_instance_._instance,
};

const char descriptor_table_protodef_ADVolumeByPrice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ADVolumeByPrice.proto\022\032com.htsc.mdc.in"
  "sight.model\032\023ESecurityType.proto\032\027ESecur"
  "ityIDSource.proto\"\203\003\n\017ADVolumeByPrice\022\026\n"
  "\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n"
  "\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020"
  "securityIDSource\030\005 \001(\0162%.com.htsc.mdc.mo"
  "del.ESecurityIDSource\0227\n\014securityType\030\006 "
  "\001(\0162!.com.htsc.mdc.model.ESecurityType\022\030"
  "\n\020TotalVolumeTrade\030\007 \001(\003\022B\n\007Details\030\010 \003("
  "\01321.com.htsc.mdc.insight.model.ADVolumeB"
  "yPriceDetail\022\024\n\014ExchangeDate\030\t \001(\005\022\024\n\014Ex"
  "changeTime\030\n \001(\005\022\035\n\025DataMultiplePowerOf1"
  "0\030\013 \001(\005\"\266\001\n\025ADVolumeByPriceDetail\022\022\n\nTra"
  "dePrice\030\001 \001(\003\022\020\n\010TotalQty\030\002 \001(\003\022\016\n\006BuyQt"
  "y\030\003 \001(\003\022\017\n\007SellQty\030\004 \001(\003\022\024\n\014TotalNumbers"
  "\030\005 \001(\003\022\022\n\nBuyNumbers\030\006 \001(\003\022\023\n\013SellNumber"
  "s\030\007 \001(\003\022\027\n\017VolumePerNumber\030\010 \001(\003B8\n\032com."
  "htsc.mdc.insight.modelB\025ADVolumeByPriceP"
  "rotosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ADVolumeByPrice_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_ADVolumeByPrice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ADVolumeByPrice_2eproto = {
    false, false, 738, descriptor_table_protodef_ADVolumeByPrice_2eproto,
    "ADVolumeByPrice.proto",
    &descriptor_table_ADVolumeByPrice_2eproto_once, descriptor_table_ADVolumeByPrice_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_ADVolumeByPrice_2eproto::offsets,
    file_level_metadata_ADVolumeByPrice_2eproto, file_level_enum_descriptors_ADVolumeByPrice_2eproto,
    file_level_service_descriptors_ADVolumeByPrice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ADVolumeByPrice_2eproto_getter() {
  return &descriptor_table_ADVolumeByPrice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ADVolumeByPrice_2eproto(&descriptor_table_ADVolumeByPrice_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADVolumeByPrice::_Internal {
 public:
};

ADVolumeByPrice::ADVolumeByPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADVolumeByPrice)
}
ADVolumeByPrice::ADVolumeByPrice(const ADVolumeByPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVolumeByPrice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){from._impl_.details_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.totalvolumetrade_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADVolumeByPrice)
}

inline void ADVolumeByPrice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.totalvolumetrade_){int64_t{0}}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADVolumeByPrice::~ADVolumeByPrice() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADVolumeByPrice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVolumeByPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
}

void ADVolumeByPrice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVolumeByPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADVolumeByPrice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVolumeByPrice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADVolumeByPrice.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADVolumeByPriceDetail Details = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVolumeByPrice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADVolumeByPrice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADVolumeByPrice.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // int64 TotalVolumeTrade = 7;
  if (this->_internal_totalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_totalvolumetrade(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADVolumeByPriceDetail Details = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 ExchangeDate = 9;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 10;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_exchangetime(), target);
  }

  // int32 DataMultiplePowerOf10 = 11;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADVolumeByPrice)
  return target;
}

size_t ADVolumeByPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADVolumeByPrice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADVolumeByPriceDetail Details = 8;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->_impl_.details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 TotalVolumeTrade = 7;
  if (this->_internal_totalvolumetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvolumetrade());
  }

  // int32 ExchangeDate = 9;
  if (this->_internal_exchangedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 10;
  if (this->_internal_exchangetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangetime());
  }

  // int32 DataMultiplePowerOf10 = 11;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVolumeByPrice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVolumeByPrice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVolumeByPrice::GetClassData() const { return &_class_data_; }


void ADVolumeByPrice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVolumeByPrice*>(&to_msg);
  auto& from = static_cast<const ADVolumeByPrice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADVolumeByPrice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_totalvolumetrade() != 0) {
    _this->_internal_set_totalvolumetrade(from._internal_totalvolumetrade());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVolumeByPrice::CopyFrom(const ADVolumeByPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADVolumeByPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVolumeByPrice::IsInitialized() const {
  return true;
}

void ADVolumeByPrice::InternalSwap(ADVolumeByPrice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADVolumeByPrice, _impl_.datamultiplepowerof10_)
      + sizeof(ADVolumeByPrice::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(ADVolumeByPrice, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVolumeByPrice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADVolumeByPrice_2eproto_getter, &descriptor_table_ADVolumeByPrice_2eproto_once,
      file_level_metadata_ADVolumeByPrice_2eproto[0]);
}

// ===================================================================

class ADVolumeByPriceDetail::_Internal {
 public:
};

ADVolumeByPriceDetail::ADVolumeByPriceDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
}
ADVolumeByPriceDetail::ADVolumeByPriceDetail(const ADVolumeByPriceDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVolumeByPriceDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tradeprice_){}
    , decltype(_impl_.totalqty_){}
    , decltype(_impl_.buyqty_){}
    , decltype(_impl_.sellqty_){}
    , decltype(_impl_.totalnumbers_){}
    , decltype(_impl_.buynumbers_){}
    , decltype(_impl_.sellnumbers_){}
    , decltype(_impl_.volumepernumber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tradeprice_, &from._impl_.tradeprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.volumepernumber_) -
    reinterpret_cast<char*>(&_impl_.tradeprice_)) + sizeof(_impl_.volumepernumber_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
}

inline void ADVolumeByPriceDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tradeprice_){int64_t{0}}
    , decltype(_impl_.totalqty_){int64_t{0}}
    , decltype(_impl_.buyqty_){int64_t{0}}
    , decltype(_impl_.sellqty_){int64_t{0}}
    , decltype(_impl_.totalnumbers_){int64_t{0}}
    , decltype(_impl_.buynumbers_){int64_t{0}}
    , decltype(_impl_.sellnumbers_){int64_t{0}}
    , decltype(_impl_.volumepernumber_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADVolumeByPriceDetail::~ADVolumeByPriceDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVolumeByPriceDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADVolumeByPriceDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVolumeByPriceDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tradeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.volumepernumber_) -
      reinterpret_cast<char*>(&_impl_.tradeprice_)) + sizeof(_impl_.volumepernumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVolumeByPriceDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 TradePrice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tradeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalQty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.totalqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BuyQty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buyqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellQty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sellqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalNumbers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.totalnumbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BuyNumbers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.buynumbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellNumbers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.sellnumbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 VolumePerNumber = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.volumepernumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVolumeByPriceDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 TradePrice = 1;
  if (this->_internal_tradeprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_tradeprice(), target);
  }

  // int64 TotalQty = 2;
  if (this->_internal_totalqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_totalqty(), target);
  }

  // int64 BuyQty = 3;
  if (this->_internal_buyqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_buyqty(), target);
  }

  // int64 SellQty = 4;
  if (this->_internal_sellqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sellqty(), target);
  }

  // int64 TotalNumbers = 5;
  if (this->_internal_totalnumbers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_totalnumbers(), target);
  }

  // int64 BuyNumbers = 6;
  if (this->_internal_buynumbers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_buynumbers(), target);
  }

  // int64 SellNumbers = 7;
  if (this->_internal_sellnumbers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_sellnumbers(), target);
  }

  // int64 VolumePerNumber = 8;
  if (this->_internal_volumepernumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_volumepernumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
  return target;
}

size_t ADVolumeByPriceDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 TradePrice = 1;
  if (this->_internal_tradeprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradeprice());
  }

  // int64 TotalQty = 2;
  if (this->_internal_totalqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalqty());
  }

  // int64 BuyQty = 3;
  if (this->_internal_buyqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buyqty());
  }

  // int64 SellQty = 4;
  if (this->_internal_sellqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sellqty());
  }

  // int64 TotalNumbers = 5;
  if (this->_internal_totalnumbers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalnumbers());
  }

  // int64 BuyNumbers = 6;
  if (this->_internal_buynumbers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buynumbers());
  }

  // int64 SellNumbers = 7;
  if (this->_internal_sellnumbers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sellnumbers());
  }

  // int64 VolumePerNumber = 8;
  if (this->_internal_volumepernumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_volumepernumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVolumeByPriceDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVolumeByPriceDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVolumeByPriceDetail::GetClassData() const { return &_class_data_; }


void ADVolumeByPriceDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVolumeByPriceDetail*>(&to_msg);
  auto& from = static_cast<const ADVolumeByPriceDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tradeprice() != 0) {
    _this->_internal_set_tradeprice(from._internal_tradeprice());
  }
  if (from._internal_totalqty() != 0) {
    _this->_internal_set_totalqty(from._internal_totalqty());
  }
  if (from._internal_buyqty() != 0) {
    _this->_internal_set_buyqty(from._internal_buyqty());
  }
  if (from._internal_sellqty() != 0) {
    _this->_internal_set_sellqty(from._internal_sellqty());
  }
  if (from._internal_totalnumbers() != 0) {
    _this->_internal_set_totalnumbers(from._internal_totalnumbers());
  }
  if (from._internal_buynumbers() != 0) {
    _this->_internal_set_buynumbers(from._internal_buynumbers());
  }
  if (from._internal_sellnumbers() != 0) {
    _this->_internal_set_sellnumbers(from._internal_sellnumbers());
  }
  if (from._internal_volumepernumber() != 0) {
    _this->_internal_set_volumepernumber(from._internal_volumepernumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVolumeByPriceDetail::CopyFrom(const ADVolumeByPriceDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVolumeByPriceDetail::IsInitialized() const {
  return true;
}

void ADVolumeByPriceDetail::InternalSwap(ADVolumeByPriceDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADVolumeByPriceDetail, _impl_.volumepernumber_)
      + sizeof(ADVolumeByPriceDetail::_impl_.volumepernumber_)
      - PROTOBUF_FIELD_OFFSET(ADVolumeByPriceDetail, _impl_.tradeprice_)>(
          reinterpret_cast<char*>(&_impl_.tradeprice_),
          reinterpret_cast<char*>(&other->_impl_.tradeprice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVolumeByPriceDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADVolumeByPrice_2eproto_getter, &descriptor_table_ADVolumeByPrice_2eproto_once,
      file_level_metadata_ADVolumeByPrice_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADVolumeByPrice*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADVolumeByPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADVolumeByPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
