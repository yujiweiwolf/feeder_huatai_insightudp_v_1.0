// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDSimpleTick.proto

#include "MDSimpleTick.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDSimpleTick::MDSimpleTick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.adindicators_)*/nullptr
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.numtrades_)*/int64_t{0}
  , /*decltype(_impl_.totalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.lastpx_)*/int64_t{0}
  , /*decltype(_impl_.openpx_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.highpx_)*/int64_t{0}
  , /*decltype(_impl_.lowpx_)*/int64_t{0}
  , /*decltype(_impl_.iopv_)*/int64_t{0}
  , /*decltype(_impl_.preiopv_)*/int64_t{0}
  , /*decltype(_impl_.openinterest_)*/int64_t{0}
  , /*decltype(_impl_.preopeninterest_)*/int64_t{0}
  , /*decltype(_impl_.settleprice_)*/int64_t{0}
  , /*decltype(_impl_.presettleprice_)*/int64_t{0}
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDSimpleTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDSimpleTickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDSimpleTickDefaultTypeInternal() {}
  union {
    MDSimpleTick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDSimpleTickDefaultTypeInternal _MDSimpleTick_default_instance_;
PROTOBUF_CONSTEXPR ADIndicators::ADIndicators(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ind1101_)*/int64_t{0}
  , /*decltype(_impl_.ind1102_)*/int64_t{0}
  , /*decltype(_impl_.ind1103_)*/int64_t{0}
  , /*decltype(_impl_.ind1104_)*/int64_t{0}
  , /*decltype(_impl_.ind1105_)*/int64_t{0}
  , /*decltype(_impl_.ind1106_)*/int64_t{0}
  , /*decltype(_impl_.ind1107_)*/int64_t{0}
  , /*decltype(_impl_.ind1108_)*/int64_t{0}
  , /*decltype(_impl_.ind1109_)*/int64_t{0}
  , /*decltype(_impl_.ind1110_)*/int64_t{0}
  , /*decltype(_impl_.ind1111_)*/int64_t{0}
  , /*decltype(_impl_.ind1112_)*/int64_t{0}
  , /*decltype(_impl_.ind1113_)*/int64_t{0}
  , /*decltype(_impl_.ind1114_)*/int64_t{0}
  , /*decltype(_impl_.ind1115_)*/int64_t{0}
  , /*decltype(_impl_.ind1116_)*/int64_t{0}
  , /*decltype(_impl_.ind1117_)*/int64_t{0}
  , /*decltype(_impl_.ind1118_)*/int64_t{0}
  , /*decltype(_impl_.ind1119_)*/int64_t{0}
  , /*decltype(_impl_.ind1120_)*/int64_t{0}
  , /*decltype(_impl_.ind1121_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADIndicatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADIndicatorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADIndicatorsDefaultTypeInternal() {}
  union {
    ADIndicators _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADIndicatorsDefaultTypeInternal _ADIndicators_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDSimpleTick_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDSimpleTick_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDSimpleTick_2eproto = nullptr;

const uint32_t TableStruct_MDSimpleTick_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.iopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.preiopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.openinterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.preopeninterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.settleprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.presettleprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDSimpleTick, _impl_.adindicators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1101_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1102_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1103_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1104_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1105_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1106_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1107_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1108_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1109_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1110_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1111_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1112_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1113_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1114_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1115_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1116_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1117_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1118_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1119_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1120_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADIndicators, _impl_.ind1121_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDSimpleTick)},
  { 32, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADIndicators)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDSimpleTick_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADIndicators_default_instance_._instance,
};

const char descriptor_table_protodef_MDSimpleTick_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022MDSimpleTick.proto\022\032com.htsc.mdc.insig"
  "ht.model\032\023ESecurityType.proto\032\027ESecurity"
  "IDSource.proto\"\241\005\n\014MDSimpleTick\022\026\n\016HTSCS"
  "ecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTim"
  "e\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\030\n\020Tradin"
  "gPhaseCode\030\005 \001(\t\022\?\n\020securityIDSource\030\006 \001"
  "(\0162%.com.htsc.mdc.model.ESecurityIDSourc"
  "e\0227\n\014securityType\030\007 \001(\0162!.com.htsc.mdc.m"
  "odel.ESecurityType\022\021\n\tNumTrades\030\010 \001(\003\022\030\n"
  "\020TotalVolumeTrade\030\t \001(\003\022\027\n\017TotalValueTra"
  "de\030\n \001(\003\022\022\n\nPreClosePx\030\013 \001(\003\022\016\n\006LastPx\030\014"
  " \001(\003\022\016\n\006OpenPx\030\r \001(\003\022\017\n\007ClosePx\030\016 \001(\003\022\016\n"
  "\006HighPx\030\017 \001(\003\022\r\n\005LowPx\030\020 \001(\003\022\014\n\004IOPV\030\021 \001"
  "(\003\022\017\n\007PreIOPV\030\022 \001(\003\022\024\n\014OpenInterest\030\023 \001("
  "\003\022\027\n\017PreOpenInterest\030\024 \001(\003\022\023\n\013SettlePric"
  "e\030\025 \001(\003\022\026\n\016PreSettlePrice\030\026 \001(\003\022\024\n\014Excha"
  "ngeDate\030\027 \001(\005\022\024\n\014ExchangeTime\030\030 \001(\005\022\035\n\025D"
  "ataMultiplePowerOf10\030\031 \001(\005\022>\n\014ADIndicato"
  "rs\030( \001(\0132(.com.htsc.mdc.insight.model.AD"
  "Indicators\"\363\002\n\014ADIndicators\022\017\n\007Ind1101\030\001"
  " \001(\003\022\017\n\007Ind1102\030\002 \001(\003\022\017\n\007Ind1103\030\003 \001(\003\022\017"
  "\n\007Ind1104\030\004 \001(\003\022\017\n\007Ind1105\030\005 \001(\003\022\017\n\007Ind1"
  "106\030\006 \001(\003\022\017\n\007Ind1107\030\007 \001(\003\022\017\n\007Ind1108\030\010 "
  "\001(\003\022\017\n\007Ind1109\030\t \001(\003\022\017\n\007Ind1110\030\n \001(\003\022\017\n"
  "\007Ind1111\030\013 \001(\003\022\017\n\007Ind1112\030\014 \001(\003\022\017\n\007Ind11"
  "13\030\r \001(\003\022\017\n\007Ind1114\030\016 \001(\003\022\017\n\007Ind1115\030\017 \001"
  "(\003\022\017\n\007Ind1116\030\020 \001(\003\022\017\n\007Ind1117\030\021 \001(\003\022\017\n\007"
  "Ind1118\030\022 \001(\003\022\017\n\007Ind1119\030\023 \001(\003\022\017\n\007Ind112"
  "0\030\024 \001(\003\022\017\n\007Ind1121\030\025 \001(\003B5\n\032com.htsc.mdc"
  ".insight.modelB\022MDSimpleTickProtosH\001\240\001\001b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDSimpleTick_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDSimpleTick_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDSimpleTick_2eproto = {
    false, false, 1207, descriptor_table_protodef_MDSimpleTick_2eproto,
    "MDSimpleTick.proto",
    &descriptor_table_MDSimpleTick_2eproto_once, descriptor_table_MDSimpleTick_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_MDSimpleTick_2eproto::offsets,
    file_level_metadata_MDSimpleTick_2eproto, file_level_enum_descriptors_MDSimpleTick_2eproto,
    file_level_service_descriptors_MDSimpleTick_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDSimpleTick_2eproto_getter() {
  return &descriptor_table_MDSimpleTick_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDSimpleTick_2eproto(&descriptor_table_MDSimpleTick_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDSimpleTick::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::ADIndicators& adindicators(const MDSimpleTick* msg);
};

const ::com::htsc::mdc::insight::model::ADIndicators&
MDSimpleTick::_Internal::adindicators(const MDSimpleTick* msg) {
  return *msg->_impl_.adindicators_;
}
MDSimpleTick::MDSimpleTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDSimpleTick)
}
MDSimpleTick::MDSimpleTick(const MDSimpleTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDSimpleTick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.adindicators_){nullptr}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.numtrades_){}
    , decltype(_impl_.totalvolumetrade_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.lastpx_){}
    , decltype(_impl_.openpx_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.highpx_){}
    , decltype(_impl_.lowpx_){}
    , decltype(_impl_.iopv_){}
    , decltype(_impl_.preiopv_){}
    , decltype(_impl_.openinterest_){}
    , decltype(_impl_.preopeninterest_){}
    , decltype(_impl_.settleprice_){}
    , decltype(_impl_.presettleprice_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_adindicators()) {
    _this->_impl_.adindicators_ = new ::com::htsc::mdc::insight::model::ADIndicators(*from._impl_.adindicators_);
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDSimpleTick)
}

inline void MDSimpleTick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.adindicators_){nullptr}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.numtrades_){int64_t{0}}
    , decltype(_impl_.totalvolumetrade_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.lastpx_){int64_t{0}}
    , decltype(_impl_.openpx_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.highpx_){int64_t{0}}
    , decltype(_impl_.lowpx_){int64_t{0}}
    , decltype(_impl_.iopv_){int64_t{0}}
    , decltype(_impl_.preiopv_){int64_t{0}}
    , decltype(_impl_.openinterest_){int64_t{0}}
    , decltype(_impl_.preopeninterest_){int64_t{0}}
    , decltype(_impl_.settleprice_){int64_t{0}}
    , decltype(_impl_.presettleprice_){int64_t{0}}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDSimpleTick::~MDSimpleTick() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDSimpleTick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDSimpleTick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.adindicators_;
}

void MDSimpleTick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDSimpleTick::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDSimpleTick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.adindicators_ != nullptr) {
    delete _impl_.adindicators_;
  }
  _impl_.adindicators_ = nullptr;
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDSimpleTick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDSimpleTick.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDSimpleTick.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 NumTrades = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastPx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenPx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighPx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowPx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IOPV = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.iopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreIOPV = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.preiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenInterest = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreOpenInterest = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.preopeninterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SettlePrice = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.settleprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreSettlePrice = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.presettleprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADIndicators ADIndicators = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_adindicators(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDSimpleTick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDSimpleTick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDSimpleTick.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDSimpleTick.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int64 NumTrades = 8;
  if (this->_internal_numtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_numtrades(), target);
  }

  // int64 TotalVolumeTrade = 9;
  if (this->_internal_totalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 10;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_totalvaluetrade(), target);
  }

  // int64 PreClosePx = 11;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_preclosepx(), target);
  }

  // int64 LastPx = 12;
  if (this->_internal_lastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_lastpx(), target);
  }

  // int64 OpenPx = 13;
  if (this->_internal_openpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_openpx(), target);
  }

  // int64 ClosePx = 14;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_closepx(), target);
  }

  // int64 HighPx = 15;
  if (this->_internal_highpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_highpx(), target);
  }

  // int64 LowPx = 16;
  if (this->_internal_lowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_lowpx(), target);
  }

  // int64 IOPV = 17;
  if (this->_internal_iopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_iopv(), target);
  }

  // int64 PreIOPV = 18;
  if (this->_internal_preiopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_preiopv(), target);
  }

  // int64 OpenInterest = 19;
  if (this->_internal_openinterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_openinterest(), target);
  }

  // int64 PreOpenInterest = 20;
  if (this->_internal_preopeninterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(20, this->_internal_preopeninterest(), target);
  }

  // int64 SettlePrice = 21;
  if (this->_internal_settleprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_settleprice(), target);
  }

  // int64 PreSettlePrice = 22;
  if (this->_internal_presettleprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_presettleprice(), target);
  }

  // int32 ExchangeDate = 23;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 24;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_exchangetime(), target);
  }

  // int32 DataMultiplePowerOf10 = 25;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_datamultiplepowerof10(), target);
  }

  // .com.htsc.mdc.insight.model.ADIndicators ADIndicators = 40;
  if (this->_internal_has_adindicators()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::adindicators(this),
        _Internal::adindicators(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDSimpleTick)
  return target;
}

size_t MDSimpleTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDSimpleTick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // .com.htsc.mdc.insight.model.ADIndicators ADIndicators = 40;
  if (this->_internal_has_adindicators()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adindicators_);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 NumTrades = 8;
  if (this->_internal_numtrades() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numtrades());
  }

  // int64 TotalVolumeTrade = 9;
  if (this->_internal_totalvolumetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvolumetrade());
  }

  // int64 TotalValueTrade = 10;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 PreClosePx = 11;
  if (this->_internal_preclosepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preclosepx());
  }

  // int64 LastPx = 12;
  if (this->_internal_lastpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpx());
  }

  // int64 OpenPx = 13;
  if (this->_internal_openpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openpx());
  }

  // int64 ClosePx = 14;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  // int64 HighPx = 15;
  if (this->_internal_highpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highpx());
  }

  // int64 LowPx = 16;
  if (this->_internal_lowpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lowpx());
  }

  // int64 IOPV = 17;
  if (this->_internal_iopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_iopv());
  }

  // int64 PreIOPV = 18;
  if (this->_internal_preiopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preiopv());
  }

  // int64 OpenInterest = 19;
  if (this->_internal_openinterest() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_openinterest());
  }

  // int64 PreOpenInterest = 20;
  if (this->_internal_preopeninterest() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preopeninterest());
  }

  // int64 SettlePrice = 21;
  if (this->_internal_settleprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_settleprice());
  }

  // int64 PreSettlePrice = 22;
  if (this->_internal_presettleprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_presettleprice());
  }

  // int32 ExchangeDate = 23;
  if (this->_internal_exchangedate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 24;
  if (this->_internal_exchangetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangetime());
  }

  // int32 DataMultiplePowerOf10 = 25;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDSimpleTick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDSimpleTick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDSimpleTick::GetClassData() const { return &_class_data_; }


void MDSimpleTick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDSimpleTick*>(&to_msg);
  auto& from = static_cast<const MDSimpleTick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDSimpleTick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (from._internal_has_adindicators()) {
    _this->_internal_mutable_adindicators()->::com::htsc::mdc::insight::model::ADIndicators::MergeFrom(
        from._internal_adindicators());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_numtrades() != 0) {
    _this->_internal_set_numtrades(from._internal_numtrades());
  }
  if (from._internal_totalvolumetrade() != 0) {
    _this->_internal_set_totalvolumetrade(from._internal_totalvolumetrade());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_lastpx() != 0) {
    _this->_internal_set_lastpx(from._internal_lastpx());
  }
  if (from._internal_openpx() != 0) {
    _this->_internal_set_openpx(from._internal_openpx());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_highpx() != 0) {
    _this->_internal_set_highpx(from._internal_highpx());
  }
  if (from._internal_lowpx() != 0) {
    _this->_internal_set_lowpx(from._internal_lowpx());
  }
  if (from._internal_iopv() != 0) {
    _this->_internal_set_iopv(from._internal_iopv());
  }
  if (from._internal_preiopv() != 0) {
    _this->_internal_set_preiopv(from._internal_preiopv());
  }
  if (from._internal_openinterest() != 0) {
    _this->_internal_set_openinterest(from._internal_openinterest());
  }
  if (from._internal_preopeninterest() != 0) {
    _this->_internal_set_preopeninterest(from._internal_preopeninterest());
  }
  if (from._internal_settleprice() != 0) {
    _this->_internal_set_settleprice(from._internal_settleprice());
  }
  if (from._internal_presettleprice() != 0) {
    _this->_internal_set_presettleprice(from._internal_presettleprice());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDSimpleTick::CopyFrom(const MDSimpleTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDSimpleTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDSimpleTick::IsInitialized() const {
  return true;
}

void MDSimpleTick::InternalSwap(MDSimpleTick* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDSimpleTick, _impl_.datamultiplepowerof10_)
      + sizeof(MDSimpleTick::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDSimpleTick, _impl_.adindicators_)>(
          reinterpret_cast<char*>(&_impl_.adindicators_),
          reinterpret_cast<char*>(&other->_impl_.adindicators_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDSimpleTick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSimpleTick_2eproto_getter, &descriptor_table_MDSimpleTick_2eproto_once,
      file_level_metadata_MDSimpleTick_2eproto[0]);
}

// ===================================================================

class ADIndicators::_Internal {
 public:
};

ADIndicators::ADIndicators(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADIndicators)
}
ADIndicators::ADIndicators(const ADIndicators& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADIndicators* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ind1101_){}
    , decltype(_impl_.ind1102_){}
    , decltype(_impl_.ind1103_){}
    , decltype(_impl_.ind1104_){}
    , decltype(_impl_.ind1105_){}
    , decltype(_impl_.ind1106_){}
    , decltype(_impl_.ind1107_){}
    , decltype(_impl_.ind1108_){}
    , decltype(_impl_.ind1109_){}
    , decltype(_impl_.ind1110_){}
    , decltype(_impl_.ind1111_){}
    , decltype(_impl_.ind1112_){}
    , decltype(_impl_.ind1113_){}
    , decltype(_impl_.ind1114_){}
    , decltype(_impl_.ind1115_){}
    , decltype(_impl_.ind1116_){}
    , decltype(_impl_.ind1117_){}
    , decltype(_impl_.ind1118_){}
    , decltype(_impl_.ind1119_){}
    , decltype(_impl_.ind1120_){}
    , decltype(_impl_.ind1121_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ind1101_, &from._impl_.ind1101_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ind1121_) -
    reinterpret_cast<char*>(&_impl_.ind1101_)) + sizeof(_impl_.ind1121_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADIndicators)
}

inline void ADIndicators::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ind1101_){int64_t{0}}
    , decltype(_impl_.ind1102_){int64_t{0}}
    , decltype(_impl_.ind1103_){int64_t{0}}
    , decltype(_impl_.ind1104_){int64_t{0}}
    , decltype(_impl_.ind1105_){int64_t{0}}
    , decltype(_impl_.ind1106_){int64_t{0}}
    , decltype(_impl_.ind1107_){int64_t{0}}
    , decltype(_impl_.ind1108_){int64_t{0}}
    , decltype(_impl_.ind1109_){int64_t{0}}
    , decltype(_impl_.ind1110_){int64_t{0}}
    , decltype(_impl_.ind1111_){int64_t{0}}
    , decltype(_impl_.ind1112_){int64_t{0}}
    , decltype(_impl_.ind1113_){int64_t{0}}
    , decltype(_impl_.ind1114_){int64_t{0}}
    , decltype(_impl_.ind1115_){int64_t{0}}
    , decltype(_impl_.ind1116_){int64_t{0}}
    , decltype(_impl_.ind1117_){int64_t{0}}
    , decltype(_impl_.ind1118_){int64_t{0}}
    , decltype(_impl_.ind1119_){int64_t{0}}
    , decltype(_impl_.ind1120_){int64_t{0}}
    , decltype(_impl_.ind1121_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADIndicators::~ADIndicators() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADIndicators)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADIndicators::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADIndicators::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADIndicators)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ind1101_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ind1121_) -
      reinterpret_cast<char*>(&_impl_.ind1101_)) + sizeof(_impl_.ind1121_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADIndicators::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Ind1101 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ind1101_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1102 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ind1102_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1103 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ind1103_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1104 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ind1104_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1105 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ind1105_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1106 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ind1106_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1107 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ind1107_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1108 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.ind1108_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1109 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.ind1109_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1110 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ind1110_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1111 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.ind1111_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1112 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.ind1112_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1113 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.ind1113_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1114 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.ind1114_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1115 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.ind1115_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1116 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.ind1116_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1117 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.ind1117_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1118 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.ind1118_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1119 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.ind1119_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1120 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.ind1120_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ind1121 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.ind1121_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADIndicators::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADIndicators)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Ind1101 = 1;
  if (this->_internal_ind1101() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_ind1101(), target);
  }

  // int64 Ind1102 = 2;
  if (this->_internal_ind1102() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ind1102(), target);
  }

  // int64 Ind1103 = 3;
  if (this->_internal_ind1103() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ind1103(), target);
  }

  // int64 Ind1104 = 4;
  if (this->_internal_ind1104() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_ind1104(), target);
  }

  // int64 Ind1105 = 5;
  if (this->_internal_ind1105() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_ind1105(), target);
  }

  // int64 Ind1106 = 6;
  if (this->_internal_ind1106() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_ind1106(), target);
  }

  // int64 Ind1107 = 7;
  if (this->_internal_ind1107() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_ind1107(), target);
  }

  // int64 Ind1108 = 8;
  if (this->_internal_ind1108() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_ind1108(), target);
  }

  // int64 Ind1109 = 9;
  if (this->_internal_ind1109() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_ind1109(), target);
  }

  // int64 Ind1110 = 10;
  if (this->_internal_ind1110() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_ind1110(), target);
  }

  // int64 Ind1111 = 11;
  if (this->_internal_ind1111() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_ind1111(), target);
  }

  // int64 Ind1112 = 12;
  if (this->_internal_ind1112() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_ind1112(), target);
  }

  // int64 Ind1113 = 13;
  if (this->_internal_ind1113() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_ind1113(), target);
  }

  // int64 Ind1114 = 14;
  if (this->_internal_ind1114() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_ind1114(), target);
  }

  // int64 Ind1115 = 15;
  if (this->_internal_ind1115() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_ind1115(), target);
  }

  // int64 Ind1116 = 16;
  if (this->_internal_ind1116() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_ind1116(), target);
  }

  // int64 Ind1117 = 17;
  if (this->_internal_ind1117() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_ind1117(), target);
  }

  // int64 Ind1118 = 18;
  if (this->_internal_ind1118() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_ind1118(), target);
  }

  // int64 Ind1119 = 19;
  if (this->_internal_ind1119() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_ind1119(), target);
  }

  // int64 Ind1120 = 20;
  if (this->_internal_ind1120() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(20, this->_internal_ind1120(), target);
  }

  // int64 Ind1121 = 21;
  if (this->_internal_ind1121() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_ind1121(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADIndicators)
  return target;
}

size_t ADIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADIndicators)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Ind1101 = 1;
  if (this->_internal_ind1101() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1101());
  }

  // int64 Ind1102 = 2;
  if (this->_internal_ind1102() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1102());
  }

  // int64 Ind1103 = 3;
  if (this->_internal_ind1103() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1103());
  }

  // int64 Ind1104 = 4;
  if (this->_internal_ind1104() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1104());
  }

  // int64 Ind1105 = 5;
  if (this->_internal_ind1105() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1105());
  }

  // int64 Ind1106 = 6;
  if (this->_internal_ind1106() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1106());
  }

  // int64 Ind1107 = 7;
  if (this->_internal_ind1107() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1107());
  }

  // int64 Ind1108 = 8;
  if (this->_internal_ind1108() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1108());
  }

  // int64 Ind1109 = 9;
  if (this->_internal_ind1109() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1109());
  }

  // int64 Ind1110 = 10;
  if (this->_internal_ind1110() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1110());
  }

  // int64 Ind1111 = 11;
  if (this->_internal_ind1111() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1111());
  }

  // int64 Ind1112 = 12;
  if (this->_internal_ind1112() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1112());
  }

  // int64 Ind1113 = 13;
  if (this->_internal_ind1113() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1113());
  }

  // int64 Ind1114 = 14;
  if (this->_internal_ind1114() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1114());
  }

  // int64 Ind1115 = 15;
  if (this->_internal_ind1115() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ind1115());
  }

  // int64 Ind1116 = 16;
  if (this->_internal_ind1116() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ind1116());
  }

  // int64 Ind1117 = 17;
  if (this->_internal_ind1117() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ind1117());
  }

  // int64 Ind1118 = 18;
  if (this->_internal_ind1118() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ind1118());
  }

  // int64 Ind1119 = 19;
  if (this->_internal_ind1119() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ind1119());
  }

  // int64 Ind1120 = 20;
  if (this->_internal_ind1120() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ind1120());
  }

  // int64 Ind1121 = 21;
  if (this->_internal_ind1121() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ind1121());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADIndicators::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADIndicators::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADIndicators::GetClassData() const { return &_class_data_; }


void ADIndicators::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADIndicators*>(&to_msg);
  auto& from = static_cast<const ADIndicators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADIndicators)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ind1101() != 0) {
    _this->_internal_set_ind1101(from._internal_ind1101());
  }
  if (from._internal_ind1102() != 0) {
    _this->_internal_set_ind1102(from._internal_ind1102());
  }
  if (from._internal_ind1103() != 0) {
    _this->_internal_set_ind1103(from._internal_ind1103());
  }
  if (from._internal_ind1104() != 0) {
    _this->_internal_set_ind1104(from._internal_ind1104());
  }
  if (from._internal_ind1105() != 0) {
    _this->_internal_set_ind1105(from._internal_ind1105());
  }
  if (from._internal_ind1106() != 0) {
    _this->_internal_set_ind1106(from._internal_ind1106());
  }
  if (from._internal_ind1107() != 0) {
    _this->_internal_set_ind1107(from._internal_ind1107());
  }
  if (from._internal_ind1108() != 0) {
    _this->_internal_set_ind1108(from._internal_ind1108());
  }
  if (from._internal_ind1109() != 0) {
    _this->_internal_set_ind1109(from._internal_ind1109());
  }
  if (from._internal_ind1110() != 0) {
    _this->_internal_set_ind1110(from._internal_ind1110());
  }
  if (from._internal_ind1111() != 0) {
    _this->_internal_set_ind1111(from._internal_ind1111());
  }
  if (from._internal_ind1112() != 0) {
    _this->_internal_set_ind1112(from._internal_ind1112());
  }
  if (from._internal_ind1113() != 0) {
    _this->_internal_set_ind1113(from._internal_ind1113());
  }
  if (from._internal_ind1114() != 0) {
    _this->_internal_set_ind1114(from._internal_ind1114());
  }
  if (from._internal_ind1115() != 0) {
    _this->_internal_set_ind1115(from._internal_ind1115());
  }
  if (from._internal_ind1116() != 0) {
    _this->_internal_set_ind1116(from._internal_ind1116());
  }
  if (from._internal_ind1117() != 0) {
    _this->_internal_set_ind1117(from._internal_ind1117());
  }
  if (from._internal_ind1118() != 0) {
    _this->_internal_set_ind1118(from._internal_ind1118());
  }
  if (from._internal_ind1119() != 0) {
    _this->_internal_set_ind1119(from._internal_ind1119());
  }
  if (from._internal_ind1120() != 0) {
    _this->_internal_set_ind1120(from._internal_ind1120());
  }
  if (from._internal_ind1121() != 0) {
    _this->_internal_set_ind1121(from._internal_ind1121());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADIndicators::CopyFrom(const ADIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADIndicators::IsInitialized() const {
  return true;
}

void ADIndicators::InternalSwap(ADIndicators* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADIndicators, _impl_.ind1121_)
      + sizeof(ADIndicators::_impl_.ind1121_)
      - PROTOBUF_FIELD_OFFSET(ADIndicators, _impl_.ind1101_)>(
          reinterpret_cast<char*>(&_impl_.ind1101_),
          reinterpret_cast<char*>(&other->_impl_.ind1101_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADIndicators::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDSimpleTick_2eproto_getter, &descriptor_table_MDSimpleTick_2eproto_once,
      file_level_metadata_MDSimpleTick_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDSimpleTick*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDSimpleTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDSimpleTick >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADIndicators*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADIndicators >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADIndicators >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
