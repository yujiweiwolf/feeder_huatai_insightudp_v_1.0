// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADFundFlowAnalysis.proto

#include "ADFundFlowAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR ADFundFlowAnalysis::ADFundFlowAnalysis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.thelast5daysmainlist_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.superlargeorder_)*/nullptr
  , /*decltype(_impl_.largeorder_)*/nullptr
  , /*decltype(_impl_.mediumorder_)*/nullptr
  , /*decltype(_impl_.smallorder_)*/nullptr
  , /*decltype(_impl_.mainorder_)*/nullptr
  , /*decltype(_impl_.thelast5daysmain_)*/nullptr
  , /*decltype(_impl_.thelast10daysmain_)*/nullptr
  , /*decltype(_impl_.thelast20daysmain_)*/nullptr
  , /*decltype(_impl_.thelast60daysmain_)*/nullptr
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADFundFlowAnalysisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADFundFlowAnalysisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADFundFlowAnalysisDefaultTypeInternal() {}
  union {
    ADFundFlowAnalysis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADFundFlowAnalysisDefaultTypeInternal _ADFundFlowAnalysis_default_instance_;
PROTOBUF_CONSTEXPR ADFundFlowDetail::ADFundFlowDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.outflowvalue_)*/int64_t{0}
  , /*decltype(_impl_.inflowvalue_)*/int64_t{0}
  , /*decltype(_impl_.outflowqty_)*/int64_t{0}
  , /*decltype(_impl_.inflowqty_)*/int64_t{0}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADFundFlowDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADFundFlowDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADFundFlowDetailDefaultTypeInternal() {}
  union {
    ADFundFlowDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADFundFlowDetailDefaultTypeInternal _ADFundFlowDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_ADFundFlowAnalysis_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ADFundFlowAnalysis_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ADFundFlowAnalysis_2eproto = nullptr;

const uint32_t TableStruct_ADFundFlowAnalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.superlargeorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.largeorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.mediumorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.smallorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.mainorder_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.thelast5daysmain_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.thelast10daysmain_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.thelast20daysmain_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.thelast60daysmain_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.thelast5daysmainlist_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowAnalysis, _impl_.datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, _impl_.outflowvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, _impl_.inflowvalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, _impl_.outflowqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, _impl_.inflowqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFundFlowDetail, _impl_.mddate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADFundFlowAnalysis)},
  { 25, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADFundFlowDetail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_ADFundFlowAnalysis_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_._instance,
};

const char descriptor_table_protodef_ADFundFlowAnalysis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030ADFundFlowAnalysis.proto\022\032com.htsc.mdc"
  ".insight.model\032\023ESecurityType.proto\032\027ESe"
  "curityIDSource.proto\"\346\007\n\022ADFundFlowAnaly"
  "sis\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 "
  "\001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001"
  "(\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc."
  "mdc.model.ESecurityIDSource\0227\n\014securityT"
  "ype\030\006 \001(\0162!.com.htsc.mdc.model.ESecurity"
  "Type\022E\n\017SuperLargeOrder\030\007 \001(\0132,.com.htsc"
  ".mdc.insight.model.ADFundFlowDetail\022@\n\nL"
  "argeOrder\030\010 \001(\0132,.com.htsc.mdc.insight.m"
  "odel.ADFundFlowDetail\022A\n\013MediumOrder\030\t \001"
  "(\0132,.com.htsc.mdc.insight.model.ADFundFl"
  "owDetail\022@\n\nSmallOrder\030\n \001(\0132,.com.htsc."
  "mdc.insight.model.ADFundFlowDetail\022\?\n\tMa"
  "inOrder\030\013 \001(\0132,.com.htsc.mdc.insight.mod"
  "el.ADFundFlowDetail\022F\n\020TheLast5DaysMain\030"
  "\014 \001(\0132,.com.htsc.mdc.insight.model.ADFun"
  "dFlowDetail\022G\n\021TheLast10DaysMain\030\r \001(\0132,"
  ".com.htsc.mdc.insight.model.ADFundFlowDe"
  "tail\022G\n\021TheLast20DaysMain\030\016 \001(\0132,.com.ht"
  "sc.mdc.insight.model.ADFundFlowDetail\022G\n"
  "\021TheLast60DaysMain\030\017 \001(\0132,.com.htsc.mdc."
  "insight.model.ADFundFlowDetail\022J\n\024TheLas"
  "t5DaysMainList\030\020 \003(\0132,.com.htsc.mdc.insi"
  "ght.model.ADFundFlowDetail\022\024\n\014ExchangeDa"
  "te\030\021 \001(\005\022\024\n\014ExchangeTime\030\022 \001(\005\022\035\n\025DataMu"
  "ltiplePowerOf10\030\023 \001(\005\"t\n\020ADFundFlowDetai"
  "l\022\024\n\014OutflowValue\030\001 \001(\003\022\023\n\013InflowValue\030\002"
  " \001(\003\022\022\n\nOutflowQty\030\003 \001(\003\022\021\n\tInflowQty\030\004 "
  "\001(\003\022\016\n\006MDDate\030\005 \001(\005B;\n\032com.htsc.mdc.insi"
  "ght.modelB\030ADFundFlowAnalysisProtosH\001\240\001\001"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ADFundFlowAnalysis_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_ADFundFlowAnalysis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ADFundFlowAnalysis_2eproto = {
    false, false, 1288, descriptor_table_protodef_ADFundFlowAnalysis_2eproto,
    "ADFundFlowAnalysis.proto",
    &descriptor_table_ADFundFlowAnalysis_2eproto_once, descriptor_table_ADFundFlowAnalysis_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_ADFundFlowAnalysis_2eproto::offsets,
    file_level_metadata_ADFundFlowAnalysis_2eproto, file_level_enum_descriptors_ADFundFlowAnalysis_2eproto,
    file_level_service_descriptors_ADFundFlowAnalysis_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ADFundFlowAnalysis_2eproto_getter() {
  return &descriptor_table_ADFundFlowAnalysis_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ADFundFlowAnalysis_2eproto(&descriptor_table_ADFundFlowAnalysis_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADFundFlowAnalysis::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& superlargeorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& largeorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mediumorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& smallorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mainorder(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast5daysmain(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast10daysmain(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast20daysmain(const ADFundFlowAnalysis* msg);
  static const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast60daysmain(const ADFundFlowAnalysis* msg);
};

const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::superlargeorder(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.superlargeorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::largeorder(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.largeorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::mediumorder(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.mediumorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::smallorder(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.smallorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::mainorder(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.mainorder_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::thelast5daysmain(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.thelast5daysmain_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::thelast10daysmain(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.thelast10daysmain_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::thelast20daysmain(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.thelast20daysmain_;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail&
ADFundFlowAnalysis::_Internal::thelast60daysmain(const ADFundFlowAnalysis* msg) {
  return *msg->_impl_.thelast60daysmain_;
}
ADFundFlowAnalysis::ADFundFlowAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
}
ADFundFlowAnalysis::ADFundFlowAnalysis(const ADFundFlowAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADFundFlowAnalysis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.thelast5daysmainlist_){from._impl_.thelast5daysmainlist_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.superlargeorder_){nullptr}
    , decltype(_impl_.largeorder_){nullptr}
    , decltype(_impl_.mediumorder_){nullptr}
    , decltype(_impl_.smallorder_){nullptr}
    , decltype(_impl_.mainorder_){nullptr}
    , decltype(_impl_.thelast5daysmain_){nullptr}
    , decltype(_impl_.thelast10daysmain_){nullptr}
    , decltype(_impl_.thelast20daysmain_){nullptr}
    , decltype(_impl_.thelast60daysmain_){nullptr}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_superlargeorder()) {
    _this->_impl_.superlargeorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.superlargeorder_);
  }
  if (from._internal_has_largeorder()) {
    _this->_impl_.largeorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.largeorder_);
  }
  if (from._internal_has_mediumorder()) {
    _this->_impl_.mediumorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.mediumorder_);
  }
  if (from._internal_has_smallorder()) {
    _this->_impl_.smallorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.smallorder_);
  }
  if (from._internal_has_mainorder()) {
    _this->_impl_.mainorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.mainorder_);
  }
  if (from._internal_has_thelast5daysmain()) {
    _this->_impl_.thelast5daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.thelast5daysmain_);
  }
  if (from._internal_has_thelast10daysmain()) {
    _this->_impl_.thelast10daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.thelast10daysmain_);
  }
  if (from._internal_has_thelast20daysmain()) {
    _this->_impl_.thelast20daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.thelast20daysmain_);
  }
  if (from._internal_has_thelast60daysmain()) {
    _this->_impl_.thelast60daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail(*from._impl_.thelast60daysmain_);
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
}

inline void ADFundFlowAnalysis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.thelast5daysmainlist_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.superlargeorder_){nullptr}
    , decltype(_impl_.largeorder_){nullptr}
    , decltype(_impl_.mediumorder_){nullptr}
    , decltype(_impl_.smallorder_){nullptr}
    , decltype(_impl_.mainorder_){nullptr}
    , decltype(_impl_.thelast5daysmain_){nullptr}
    , decltype(_impl_.thelast10daysmain_){nullptr}
    , decltype(_impl_.thelast20daysmain_){nullptr}
    , decltype(_impl_.thelast60daysmain_){nullptr}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADFundFlowAnalysis::~ADFundFlowAnalysis() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADFundFlowAnalysis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.thelast5daysmainlist_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.superlargeorder_;
  if (this != internal_default_instance()) delete _impl_.largeorder_;
  if (this != internal_default_instance()) delete _impl_.mediumorder_;
  if (this != internal_default_instance()) delete _impl_.smallorder_;
  if (this != internal_default_instance()) delete _impl_.mainorder_;
  if (this != internal_default_instance()) delete _impl_.thelast5daysmain_;
  if (this != internal_default_instance()) delete _impl_.thelast10daysmain_;
  if (this != internal_default_instance()) delete _impl_.thelast20daysmain_;
  if (this != internal_default_instance()) delete _impl_.thelast60daysmain_;
}

void ADFundFlowAnalysis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADFundFlowAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.thelast5daysmainlist_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.superlargeorder_ != nullptr) {
    delete _impl_.superlargeorder_;
  }
  _impl_.superlargeorder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.largeorder_ != nullptr) {
    delete _impl_.largeorder_;
  }
  _impl_.largeorder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mediumorder_ != nullptr) {
    delete _impl_.mediumorder_;
  }
  _impl_.mediumorder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.smallorder_ != nullptr) {
    delete _impl_.smallorder_;
  }
  _impl_.smallorder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mainorder_ != nullptr) {
    delete _impl_.mainorder_;
  }
  _impl_.mainorder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.thelast5daysmain_ != nullptr) {
    delete _impl_.thelast5daysmain_;
  }
  _impl_.thelast5daysmain_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.thelast10daysmain_ != nullptr) {
    delete _impl_.thelast10daysmain_;
  }
  _impl_.thelast10daysmain_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.thelast20daysmain_ != nullptr) {
    delete _impl_.thelast20daysmain_;
  }
  _impl_.thelast20daysmain_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.thelast60daysmain_ != nullptr) {
    delete _impl_.thelast60daysmain_;
  }
  _impl_.thelast60daysmain_ = nullptr;
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADFundFlowAnalysis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_superlargeorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_largeorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediumorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_smallorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mainorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_thelast5daysmain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_thelast10daysmain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_thelast20daysmain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_thelast60daysmain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_thelast5daysmainlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADFundFlowAnalysis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  if (this->_internal_has_superlargeorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::superlargeorder(this),
        _Internal::superlargeorder(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  if (this->_internal_has_largeorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::largeorder(this),
        _Internal::largeorder(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  if (this->_internal_has_mediumorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::mediumorder(this),
        _Internal::mediumorder(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  if (this->_internal_has_smallorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::smallorder(this),
        _Internal::smallorder(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  if (this->_internal_has_mainorder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::mainorder(this),
        _Internal::mainorder(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  if (this->_internal_has_thelast5daysmain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::thelast5daysmain(this),
        _Internal::thelast5daysmain(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  if (this->_internal_has_thelast10daysmain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::thelast10daysmain(this),
        _Internal::thelast10daysmain(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  if (this->_internal_has_thelast20daysmain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::thelast20daysmain(this),
        _Internal::thelast20daysmain(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  if (this->_internal_has_thelast60daysmain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::thelast60daysmain(this),
        _Internal::thelast60daysmain(this).GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thelast5daysmainlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_thelast5daysmainlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 ExchangeDate = 17;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 18;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_exchangetime(), target);
  }

  // int32 DataMultiplePowerOf10 = 19;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  return target;
}

size_t ADFundFlowAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  total_size += 2UL * this->_internal_thelast5daysmainlist_size();
  for (const auto& msg : this->_impl_.thelast5daysmainlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  if (this->_internal_has_superlargeorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.superlargeorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  if (this->_internal_has_largeorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.largeorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  if (this->_internal_has_mediumorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mediumorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  if (this->_internal_has_smallorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.smallorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  if (this->_internal_has_mainorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mainorder_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  if (this->_internal_has_thelast5daysmain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.thelast5daysmain_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  if (this->_internal_has_thelast10daysmain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.thelast10daysmain_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  if (this->_internal_has_thelast20daysmain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.thelast20daysmain_);
  }

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  if (this->_internal_has_thelast60daysmain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.thelast60daysmain_);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ExchangeDate = 17;
  if (this->_internal_exchangedate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 18;
  if (this->_internal_exchangetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangetime());
  }

  // int32 DataMultiplePowerOf10 = 19;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADFundFlowAnalysis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADFundFlowAnalysis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADFundFlowAnalysis::GetClassData() const { return &_class_data_; }


void ADFundFlowAnalysis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADFundFlowAnalysis*>(&to_msg);
  auto& from = static_cast<const ADFundFlowAnalysis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.thelast5daysmainlist_.MergeFrom(from._impl_.thelast5daysmainlist_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (from._internal_has_superlargeorder()) {
    _this->_internal_mutable_superlargeorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_superlargeorder());
  }
  if (from._internal_has_largeorder()) {
    _this->_internal_mutable_largeorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_largeorder());
  }
  if (from._internal_has_mediumorder()) {
    _this->_internal_mutable_mediumorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_mediumorder());
  }
  if (from._internal_has_smallorder()) {
    _this->_internal_mutable_smallorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_smallorder());
  }
  if (from._internal_has_mainorder()) {
    _this->_internal_mutable_mainorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_mainorder());
  }
  if (from._internal_has_thelast5daysmain()) {
    _this->_internal_mutable_thelast5daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_thelast5daysmain());
  }
  if (from._internal_has_thelast10daysmain()) {
    _this->_internal_mutable_thelast10daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_thelast10daysmain());
  }
  if (from._internal_has_thelast20daysmain()) {
    _this->_internal_mutable_thelast20daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_thelast20daysmain());
  }
  if (from._internal_has_thelast60daysmain()) {
    _this->_internal_mutable_thelast60daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(
        from._internal_thelast60daysmain());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADFundFlowAnalysis::CopyFrom(const ADFundFlowAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADFundFlowAnalysis::IsInitialized() const {
  return true;
}

void ADFundFlowAnalysis::InternalSwap(ADFundFlowAnalysis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.thelast5daysmainlist_.InternalSwap(&other->_impl_.thelast5daysmainlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADFundFlowAnalysis, _impl_.datamultiplepowerof10_)
      + sizeof(ADFundFlowAnalysis::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(ADFundFlowAnalysis, _impl_.superlargeorder_)>(
          reinterpret_cast<char*>(&_impl_.superlargeorder_),
          reinterpret_cast<char*>(&other->_impl_.superlargeorder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADFundFlowAnalysis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADFundFlowAnalysis_2eproto_getter, &descriptor_table_ADFundFlowAnalysis_2eproto_once,
      file_level_metadata_ADFundFlowAnalysis_2eproto[0]);
}

// ===================================================================

class ADFundFlowDetail::_Internal {
 public:
};

ADFundFlowDetail::ADFundFlowDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
}
ADFundFlowDetail::ADFundFlowDetail(const ADFundFlowDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADFundFlowDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.outflowvalue_){}
    , decltype(_impl_.inflowvalue_){}
    , decltype(_impl_.outflowqty_){}
    , decltype(_impl_.inflowqty_){}
    , decltype(_impl_.mddate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.outflowvalue_, &from._impl_.outflowvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mddate_) -
    reinterpret_cast<char*>(&_impl_.outflowvalue_)) + sizeof(_impl_.mddate_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
}

inline void ADFundFlowDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.outflowvalue_){int64_t{0}}
    , decltype(_impl_.inflowvalue_){int64_t{0}}
    , decltype(_impl_.outflowqty_){int64_t{0}}
    , decltype(_impl_.inflowqty_){int64_t{0}}
    , decltype(_impl_.mddate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADFundFlowDetail::~ADFundFlowDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADFundFlowDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADFundFlowDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADFundFlowDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.outflowvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mddate_) -
      reinterpret_cast<char*>(&_impl_.outflowvalue_)) + sizeof(_impl_.mddate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADFundFlowDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 OutflowValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.outflowvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 InflowValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.inflowvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OutflowQty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.outflowqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 InflowQty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.inflowqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADFundFlowDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 OutflowValue = 1;
  if (this->_internal_outflowvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_outflowvalue(), target);
  }

  // int64 InflowValue = 2;
  if (this->_internal_inflowvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_inflowvalue(), target);
  }

  // int64 OutflowQty = 3;
  if (this->_internal_outflowqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_outflowqty(), target);
  }

  // int64 InflowQty = 4;
  if (this->_internal_inflowqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_inflowqty(), target);
  }

  // int32 MDDate = 5;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mddate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADFundFlowDetail)
  return target;
}

size_t ADFundFlowDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 OutflowValue = 1;
  if (this->_internal_outflowvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_outflowvalue());
  }

  // int64 InflowValue = 2;
  if (this->_internal_inflowvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_inflowvalue());
  }

  // int64 OutflowQty = 3;
  if (this->_internal_outflowqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_outflowqty());
  }

  // int64 InflowQty = 4;
  if (this->_internal_inflowqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_inflowqty());
  }

  // int32 MDDate = 5;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADFundFlowDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADFundFlowDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADFundFlowDetail::GetClassData() const { return &_class_data_; }


void ADFundFlowDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADFundFlowDetail*>(&to_msg);
  auto& from = static_cast<const ADFundFlowDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_outflowvalue() != 0) {
    _this->_internal_set_outflowvalue(from._internal_outflowvalue());
  }
  if (from._internal_inflowvalue() != 0) {
    _this->_internal_set_inflowvalue(from._internal_inflowvalue());
  }
  if (from._internal_outflowqty() != 0) {
    _this->_internal_set_outflowqty(from._internal_outflowqty());
  }
  if (from._internal_inflowqty() != 0) {
    _this->_internal_set_inflowqty(from._internal_inflowqty());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADFundFlowDetail::CopyFrom(const ADFundFlowDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADFundFlowDetail::IsInitialized() const {
  return true;
}

void ADFundFlowDetail::InternalSwap(ADFundFlowDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADFundFlowDetail, _impl_.mddate_)
      + sizeof(ADFundFlowDetail::_impl_.mddate_)
      - PROTOBUF_FIELD_OFFSET(ADFundFlowDetail, _impl_.outflowvalue_)>(
          reinterpret_cast<char*>(&_impl_.outflowvalue_),
          reinterpret_cast<char*>(&other->_impl_.outflowvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADFundFlowDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADFundFlowAnalysis_2eproto_getter, &descriptor_table_ADFundFlowAnalysis_2eproto_once,
      file_level_metadata_ADFundFlowAnalysis_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADFundFlowAnalysis*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADFundFlowAnalysis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADFundFlowAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADFundFlowDetail*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADFundFlowDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADFundFlowDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
