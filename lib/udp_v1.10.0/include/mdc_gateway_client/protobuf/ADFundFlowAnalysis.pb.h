// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADFundFlowAnalysis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADFundFlowAnalysis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADFundFlowAnalysis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADFundFlowAnalysis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADFundFlowAnalysis_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADFundFlowAnalysis_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADFundFlowAnalysis;
struct ADFundFlowAnalysisDefaultTypeInternal;
extern ADFundFlowAnalysisDefaultTypeInternal _ADFundFlowAnalysis_default_instance_;
class ADFundFlowDetail;
struct ADFundFlowDetailDefaultTypeInternal;
extern ADFundFlowDetailDefaultTypeInternal _ADFundFlowDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADFundFlowAnalysis* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowAnalysis>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADFundFlowDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADFundFlowAnalysis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADFundFlowAnalysis) */ {
 public:
  inline ADFundFlowAnalysis() : ADFundFlowAnalysis(nullptr) {}
  ~ADFundFlowAnalysis() override;
  explicit PROTOBUF_CONSTEXPR ADFundFlowAnalysis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADFundFlowAnalysis(const ADFundFlowAnalysis& from);
  ADFundFlowAnalysis(ADFundFlowAnalysis&& from) noexcept
    : ADFundFlowAnalysis() {
    *this = ::std::move(from);
  }

  inline ADFundFlowAnalysis& operator=(const ADFundFlowAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADFundFlowAnalysis& operator=(ADFundFlowAnalysis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADFundFlowAnalysis& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADFundFlowAnalysis* internal_default_instance() {
    return reinterpret_cast<const ADFundFlowAnalysis*>(
               &_ADFundFlowAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADFundFlowAnalysis& a, ADFundFlowAnalysis& b) {
    a.Swap(&b);
  }
  inline void Swap(ADFundFlowAnalysis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADFundFlowAnalysis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADFundFlowAnalysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADFundFlowAnalysis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADFundFlowAnalysis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADFundFlowAnalysis& from) {
    ADFundFlowAnalysis::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADFundFlowAnalysis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADFundFlowAnalysis";
  }
  protected:
  explicit ADFundFlowAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTheLast5DaysMainListFieldNumber = 16,
    kHTSCSecurityIDFieldNumber = 1,
    kSuperLargeOrderFieldNumber = 7,
    kLargeOrderFieldNumber = 8,
    kMediumOrderFieldNumber = 9,
    kSmallOrderFieldNumber = 10,
    kMainOrderFieldNumber = 11,
    kTheLast5DaysMainFieldNumber = 12,
    kTheLast10DaysMainFieldNumber = 13,
    kTheLast20DaysMainFieldNumber = 14,
    kTheLast60DaysMainFieldNumber = 15,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kExchangeDateFieldNumber = 17,
    kExchangeTimeFieldNumber = 18,
    kDataMultiplePowerOf10FieldNumber = 19,
  };
  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  int thelast5daysmainlist_size() const;
  private:
  int _internal_thelast5daysmainlist_size() const;
  public:
  void clear_thelast5daysmainlist();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast5daysmainlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >*
      mutable_thelast5daysmainlist();
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_thelast5daysmainlist(int index) const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_add_thelast5daysmainlist();
  public:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast5daysmainlist(int index) const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* add_thelast5daysmainlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >&
      thelast5daysmainlist() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  bool has_superlargeorder() const;
  private:
  bool _internal_has_superlargeorder() const;
  public:
  void clear_superlargeorder();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& superlargeorder() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_superlargeorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_superlargeorder();
  void set_allocated_superlargeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_superlargeorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_superlargeorder();
  public:
  void unsafe_arena_set_allocated_superlargeorder(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_superlargeorder();

  // .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  bool has_largeorder() const;
  private:
  bool _internal_has_largeorder() const;
  public:
  void clear_largeorder();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& largeorder() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_largeorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_largeorder();
  void set_allocated_largeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_largeorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_largeorder();
  public:
  void unsafe_arena_set_allocated_largeorder(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_largeorder();

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  bool has_mediumorder() const;
  private:
  bool _internal_has_mediumorder() const;
  public:
  void clear_mediumorder();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mediumorder() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_mediumorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_mediumorder();
  void set_allocated_mediumorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_mediumorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_mediumorder();
  public:
  void unsafe_arena_set_allocated_mediumorder(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_mediumorder();

  // .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  bool has_smallorder() const;
  private:
  bool _internal_has_smallorder() const;
  public:
  void clear_smallorder();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& smallorder() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_smallorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_smallorder();
  void set_allocated_smallorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_smallorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_smallorder();
  public:
  void unsafe_arena_set_allocated_smallorder(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_smallorder();

  // .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  bool has_mainorder() const;
  private:
  bool _internal_has_mainorder() const;
  public:
  void clear_mainorder();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mainorder() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_mainorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_mainorder();
  void set_allocated_mainorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_mainorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_mainorder();
  public:
  void unsafe_arena_set_allocated_mainorder(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_mainorder();

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  bool has_thelast5daysmain() const;
  private:
  bool _internal_has_thelast5daysmain() const;
  public:
  void clear_thelast5daysmain();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast5daysmain() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast5daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast5daysmain();
  void set_allocated_thelast5daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_thelast5daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_thelast5daysmain();
  public:
  void unsafe_arena_set_allocated_thelast5daysmain(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_thelast5daysmain();

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  bool has_thelast10daysmain() const;
  private:
  bool _internal_has_thelast10daysmain() const;
  public:
  void clear_thelast10daysmain();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast10daysmain() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast10daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast10daysmain();
  void set_allocated_thelast10daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_thelast10daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_thelast10daysmain();
  public:
  void unsafe_arena_set_allocated_thelast10daysmain(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_thelast10daysmain();

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  bool has_thelast20daysmain() const;
  private:
  bool _internal_has_thelast20daysmain() const;
  public:
  void clear_thelast20daysmain();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast20daysmain() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast20daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast20daysmain();
  void set_allocated_thelast20daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_thelast20daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_thelast20daysmain();
  public:
  void unsafe_arena_set_allocated_thelast20daysmain(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_thelast20daysmain();

  // .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  bool has_thelast60daysmain() const;
  private:
  bool _internal_has_thelast60daysmain() const;
  public:
  void clear_thelast60daysmain();
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast60daysmain() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast60daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast60daysmain();
  void set_allocated_thelast60daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain);
  private:
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& _internal_thelast60daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _internal_mutable_thelast60daysmain();
  public:
  void unsafe_arena_set_allocated_thelast60daysmain(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* unsafe_arena_release_thelast60daysmain();

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 17;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 18;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 19;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail > thelast5daysmainlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain_;
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADFundFlowAnalysis_2eproto;
};
// -------------------------------------------------------------------

class ADFundFlowDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADFundFlowDetail) */ {
 public:
  inline ADFundFlowDetail() : ADFundFlowDetail(nullptr) {}
  ~ADFundFlowDetail() override;
  explicit PROTOBUF_CONSTEXPR ADFundFlowDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADFundFlowDetail(const ADFundFlowDetail& from);
  ADFundFlowDetail(ADFundFlowDetail&& from) noexcept
    : ADFundFlowDetail() {
    *this = ::std::move(from);
  }

  inline ADFundFlowDetail& operator=(const ADFundFlowDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADFundFlowDetail& operator=(ADFundFlowDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADFundFlowDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADFundFlowDetail* internal_default_instance() {
    return reinterpret_cast<const ADFundFlowDetail*>(
               &_ADFundFlowDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ADFundFlowDetail& a, ADFundFlowDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ADFundFlowDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADFundFlowDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADFundFlowDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADFundFlowDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADFundFlowDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADFundFlowDetail& from) {
    ADFundFlowDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADFundFlowDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADFundFlowDetail";
  }
  protected:
  explicit ADFundFlowDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutflowValueFieldNumber = 1,
    kInflowValueFieldNumber = 2,
    kOutflowQtyFieldNumber = 3,
    kInflowQtyFieldNumber = 4,
    kMDDateFieldNumber = 5,
  };
  // int64 OutflowValue = 1;
  void clear_outflowvalue();
  int64_t outflowvalue() const;
  void set_outflowvalue(int64_t value);
  private:
  int64_t _internal_outflowvalue() const;
  void _internal_set_outflowvalue(int64_t value);
  public:

  // int64 InflowValue = 2;
  void clear_inflowvalue();
  int64_t inflowvalue() const;
  void set_inflowvalue(int64_t value);
  private:
  int64_t _internal_inflowvalue() const;
  void _internal_set_inflowvalue(int64_t value);
  public:

  // int64 OutflowQty = 3;
  void clear_outflowqty();
  int64_t outflowqty() const;
  void set_outflowqty(int64_t value);
  private:
  int64_t _internal_outflowqty() const;
  void _internal_set_outflowqty(int64_t value);
  public:

  // int64 InflowQty = 4;
  void clear_inflowqty();
  int64_t inflowqty() const;
  void set_inflowqty(int64_t value);
  private:
  int64_t _internal_inflowqty() const;
  void _internal_set_inflowqty(int64_t value);
  public:

  // int32 MDDate = 5;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADFundFlowDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t outflowvalue_;
    int64_t inflowvalue_;
    int64_t outflowqty_;
    int64_t inflowqty_;
    int32_t mddate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADFundFlowAnalysis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADFundFlowAnalysis

// string HTSCSecurityID = 1;
inline void ADFundFlowAnalysis::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADFundFlowAnalysis::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADFundFlowAnalysis::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
inline std::string* ADFundFlowAnalysis::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return _s;
}
inline const std::string& ADFundFlowAnalysis::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADFundFlowAnalysis::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADFundFlowAnalysis::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADFundFlowAnalysis::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADFundFlowAnalysis::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADFundFlowAnalysis::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t ADFundFlowAnalysis::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t ADFundFlowAnalysis::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDDate)
  return _internal_mddate();
}
inline void ADFundFlowAnalysis::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void ADFundFlowAnalysis::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDDate)
}

// int32 MDTime = 3;
inline void ADFundFlowAnalysis::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t ADFundFlowAnalysis::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t ADFundFlowAnalysis::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDTime)
  return _internal_mdtime();
}
inline void ADFundFlowAnalysis::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void ADFundFlowAnalysis::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADFundFlowAnalysis::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t ADFundFlowAnalysis::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t ADFundFlowAnalysis::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataTimestamp)
  return _internal_datatimestamp();
}
inline void ADFundFlowAnalysis::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void ADFundFlowAnalysis::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADFundFlowAnalysis::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADFundFlowAnalysis::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADFundFlowAnalysis::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityIDSource)
  return _internal_securityidsource();
}
inline void ADFundFlowAnalysis::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void ADFundFlowAnalysis::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADFundFlowAnalysis::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADFundFlowAnalysis::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType ADFundFlowAnalysis::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityType)
  return _internal_securitytype();
}
inline void ADFundFlowAnalysis::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void ADFundFlowAnalysis::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityType)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
inline bool ADFundFlowAnalysis::_internal_has_superlargeorder() const {
  return this != internal_default_instance() && _impl_.superlargeorder_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_superlargeorder() const {
  return _internal_has_superlargeorder();
}
inline void ADFundFlowAnalysis::clear_superlargeorder() {
  if (GetArenaForAllocation() == nullptr && _impl_.superlargeorder_ != nullptr) {
    delete _impl_.superlargeorder_;
  }
  _impl_.superlargeorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_superlargeorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.superlargeorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::superlargeorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  return _internal_superlargeorder();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_superlargeorder(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.superlargeorder_);
  }
  _impl_.superlargeorder_ = superlargeorder;
  if (superlargeorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_superlargeorder() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.superlargeorder_;
  _impl_.superlargeorder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_superlargeorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.superlargeorder_;
  _impl_.superlargeorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_superlargeorder() {
  
  if (_impl_.superlargeorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.superlargeorder_ = p;
  }
  return _impl_.superlargeorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_superlargeorder() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_superlargeorder();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_superlargeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.superlargeorder_;
  }
  if (superlargeorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(superlargeorder);
    if (message_arena != submessage_arena) {
      superlargeorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, superlargeorder, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.superlargeorder_ = superlargeorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
inline bool ADFundFlowAnalysis::_internal_has_largeorder() const {
  return this != internal_default_instance() && _impl_.largeorder_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_largeorder() const {
  return _internal_has_largeorder();
}
inline void ADFundFlowAnalysis::clear_largeorder() {
  if (GetArenaForAllocation() == nullptr && _impl_.largeorder_ != nullptr) {
    delete _impl_.largeorder_;
  }
  _impl_.largeorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_largeorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.largeorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::largeorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  return _internal_largeorder();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_largeorder(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.largeorder_);
  }
  _impl_.largeorder_ = largeorder;
  if (largeorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_largeorder() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.largeorder_;
  _impl_.largeorder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_largeorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.largeorder_;
  _impl_.largeorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_largeorder() {
  
  if (_impl_.largeorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.largeorder_ = p;
  }
  return _impl_.largeorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_largeorder() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_largeorder();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_largeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.largeorder_;
  }
  if (largeorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(largeorder);
    if (message_arena != submessage_arena) {
      largeorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, largeorder, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.largeorder_ = largeorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
inline bool ADFundFlowAnalysis::_internal_has_mediumorder() const {
  return this != internal_default_instance() && _impl_.mediumorder_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_mediumorder() const {
  return _internal_has_mediumorder();
}
inline void ADFundFlowAnalysis::clear_mediumorder() {
  if (GetArenaForAllocation() == nullptr && _impl_.mediumorder_ != nullptr) {
    delete _impl_.mediumorder_;
  }
  _impl_.mediumorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_mediumorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.mediumorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::mediumorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  return _internal_mediumorder();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_mediumorder(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mediumorder_);
  }
  _impl_.mediumorder_ = mediumorder;
  if (mediumorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_mediumorder() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.mediumorder_;
  _impl_.mediumorder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_mediumorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.mediumorder_;
  _impl_.mediumorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_mediumorder() {
  
  if (_impl_.mediumorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.mediumorder_ = p;
  }
  return _impl_.mediumorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_mediumorder() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_mediumorder();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_mediumorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mediumorder_;
  }
  if (mediumorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mediumorder);
    if (message_arena != submessage_arena) {
      mediumorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mediumorder, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mediumorder_ = mediumorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
inline bool ADFundFlowAnalysis::_internal_has_smallorder() const {
  return this != internal_default_instance() && _impl_.smallorder_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_smallorder() const {
  return _internal_has_smallorder();
}
inline void ADFundFlowAnalysis::clear_smallorder() {
  if (GetArenaForAllocation() == nullptr && _impl_.smallorder_ != nullptr) {
    delete _impl_.smallorder_;
  }
  _impl_.smallorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_smallorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.smallorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::smallorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  return _internal_smallorder();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_smallorder(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.smallorder_);
  }
  _impl_.smallorder_ = smallorder;
  if (smallorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_smallorder() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.smallorder_;
  _impl_.smallorder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_smallorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.smallorder_;
  _impl_.smallorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_smallorder() {
  
  if (_impl_.smallorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.smallorder_ = p;
  }
  return _impl_.smallorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_smallorder() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_smallorder();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_smallorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.smallorder_;
  }
  if (smallorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(smallorder);
    if (message_arena != submessage_arena) {
      smallorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smallorder, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.smallorder_ = smallorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
inline bool ADFundFlowAnalysis::_internal_has_mainorder() const {
  return this != internal_default_instance() && _impl_.mainorder_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_mainorder() const {
  return _internal_has_mainorder();
}
inline void ADFundFlowAnalysis::clear_mainorder() {
  if (GetArenaForAllocation() == nullptr && _impl_.mainorder_ != nullptr) {
    delete _impl_.mainorder_;
  }
  _impl_.mainorder_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_mainorder() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.mainorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::mainorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  return _internal_mainorder();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_mainorder(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mainorder_);
  }
  _impl_.mainorder_ = mainorder;
  if (mainorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_mainorder() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.mainorder_;
  _impl_.mainorder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_mainorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.mainorder_;
  _impl_.mainorder_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_mainorder() {
  
  if (_impl_.mainorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.mainorder_ = p;
  }
  return _impl_.mainorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_mainorder() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_mainorder();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_mainorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mainorder_;
  }
  if (mainorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mainorder);
    if (message_arena != submessage_arena) {
      mainorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mainorder, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mainorder_ = mainorder;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
inline bool ADFundFlowAnalysis::_internal_has_thelast5daysmain() const {
  return this != internal_default_instance() && _impl_.thelast5daysmain_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_thelast5daysmain() const {
  return _internal_has_thelast5daysmain();
}
inline void ADFundFlowAnalysis::clear_thelast5daysmain() {
  if (GetArenaForAllocation() == nullptr && _impl_.thelast5daysmain_ != nullptr) {
    delete _impl_.thelast5daysmain_;
  }
  _impl_.thelast5daysmain_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_thelast5daysmain() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.thelast5daysmain_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast5daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  return _internal_thelast5daysmain();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_thelast5daysmain(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thelast5daysmain_);
  }
  _impl_.thelast5daysmain_ = thelast5daysmain;
  if (thelast5daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast5daysmain() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.thelast5daysmain_;
  _impl_.thelast5daysmain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_thelast5daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.thelast5daysmain_;
  _impl_.thelast5daysmain_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_thelast5daysmain() {
  
  if (_impl_.thelast5daysmain_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.thelast5daysmain_ = p;
  }
  return _impl_.thelast5daysmain_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast5daysmain() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_thelast5daysmain();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_thelast5daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.thelast5daysmain_;
  }
  if (thelast5daysmain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(thelast5daysmain);
    if (message_arena != submessage_arena) {
      thelast5daysmain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thelast5daysmain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.thelast5daysmain_ = thelast5daysmain;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
inline bool ADFundFlowAnalysis::_internal_has_thelast10daysmain() const {
  return this != internal_default_instance() && _impl_.thelast10daysmain_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_thelast10daysmain() const {
  return _internal_has_thelast10daysmain();
}
inline void ADFundFlowAnalysis::clear_thelast10daysmain() {
  if (GetArenaForAllocation() == nullptr && _impl_.thelast10daysmain_ != nullptr) {
    delete _impl_.thelast10daysmain_;
  }
  _impl_.thelast10daysmain_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_thelast10daysmain() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.thelast10daysmain_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast10daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  return _internal_thelast10daysmain();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_thelast10daysmain(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thelast10daysmain_);
  }
  _impl_.thelast10daysmain_ = thelast10daysmain;
  if (thelast10daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast10daysmain() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.thelast10daysmain_;
  _impl_.thelast10daysmain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_thelast10daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.thelast10daysmain_;
  _impl_.thelast10daysmain_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_thelast10daysmain() {
  
  if (_impl_.thelast10daysmain_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.thelast10daysmain_ = p;
  }
  return _impl_.thelast10daysmain_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast10daysmain() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_thelast10daysmain();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_thelast10daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.thelast10daysmain_;
  }
  if (thelast10daysmain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(thelast10daysmain);
    if (message_arena != submessage_arena) {
      thelast10daysmain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thelast10daysmain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.thelast10daysmain_ = thelast10daysmain;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
inline bool ADFundFlowAnalysis::_internal_has_thelast20daysmain() const {
  return this != internal_default_instance() && _impl_.thelast20daysmain_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_thelast20daysmain() const {
  return _internal_has_thelast20daysmain();
}
inline void ADFundFlowAnalysis::clear_thelast20daysmain() {
  if (GetArenaForAllocation() == nullptr && _impl_.thelast20daysmain_ != nullptr) {
    delete _impl_.thelast20daysmain_;
  }
  _impl_.thelast20daysmain_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_thelast20daysmain() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.thelast20daysmain_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast20daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  return _internal_thelast20daysmain();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_thelast20daysmain(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thelast20daysmain_);
  }
  _impl_.thelast20daysmain_ = thelast20daysmain;
  if (thelast20daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast20daysmain() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.thelast20daysmain_;
  _impl_.thelast20daysmain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_thelast20daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.thelast20daysmain_;
  _impl_.thelast20daysmain_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_thelast20daysmain() {
  
  if (_impl_.thelast20daysmain_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.thelast20daysmain_ = p;
  }
  return _impl_.thelast20daysmain_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast20daysmain() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_thelast20daysmain();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_thelast20daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.thelast20daysmain_;
  }
  if (thelast20daysmain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(thelast20daysmain);
    if (message_arena != submessage_arena) {
      thelast20daysmain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thelast20daysmain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.thelast20daysmain_ = thelast20daysmain;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
}

// .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
inline bool ADFundFlowAnalysis::_internal_has_thelast60daysmain() const {
  return this != internal_default_instance() && _impl_.thelast60daysmain_ != nullptr;
}
inline bool ADFundFlowAnalysis::has_thelast60daysmain() const {
  return _internal_has_thelast60daysmain();
}
inline void ADFundFlowAnalysis::clear_thelast60daysmain() {
  if (GetArenaForAllocation() == nullptr && _impl_.thelast60daysmain_ != nullptr) {
    delete _impl_.thelast60daysmain_;
  }
  _impl_.thelast60daysmain_ = nullptr;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_thelast60daysmain() const {
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail* p = _impl_.thelast60daysmain_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ADFundFlowDetail&>(
      ::com::htsc::mdc::insight::model::_ADFundFlowDetail_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast60daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  return _internal_thelast60daysmain();
}
inline void ADFundFlowAnalysis::unsafe_arena_set_allocated_thelast60daysmain(
    ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thelast60daysmain_);
  }
  _impl_.thelast60daysmain_ = thelast60daysmain;
  if (thelast60daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast60daysmain() {
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.thelast60daysmain_;
  _impl_.thelast60daysmain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::unsafe_arena_release_thelast60daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = _impl_.thelast60daysmain_;
  _impl_.thelast60daysmain_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_mutable_thelast60daysmain() {
  
  if (_impl_.thelast60daysmain_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFundFlowDetail>(GetArenaForAllocation());
    _impl_.thelast60daysmain_ = p;
  }
  return _impl_.thelast60daysmain_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast60daysmain() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _msg = _internal_mutable_thelast60daysmain();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  return _msg;
}
inline void ADFundFlowAnalysis::set_allocated_thelast60daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.thelast60daysmain_;
  }
  if (thelast60daysmain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(thelast60daysmain);
    if (message_arena != submessage_arena) {
      thelast60daysmain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thelast60daysmain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.thelast60daysmain_ = thelast60daysmain;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
}

// repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
inline int ADFundFlowAnalysis::_internal_thelast5daysmainlist_size() const {
  return _impl_.thelast5daysmainlist_.size();
}
inline int ADFundFlowAnalysis::thelast5daysmainlist_size() const {
  return _internal_thelast5daysmainlist_size();
}
inline void ADFundFlowAnalysis::clear_thelast5daysmainlist() {
  _impl_.thelast5daysmainlist_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast5daysmainlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return _impl_.thelast5daysmainlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >*
ADFundFlowAnalysis::mutable_thelast5daysmainlist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return &_impl_.thelast5daysmainlist_;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::_internal_thelast5daysmainlist(int index) const {
  return _impl_.thelast5daysmainlist_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast5daysmainlist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return _internal_thelast5daysmainlist(index);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::_internal_add_thelast5daysmainlist() {
  return _impl_.thelast5daysmainlist_.Add();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::add_thelast5daysmainlist() {
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* _add = _internal_add_thelast5daysmainlist();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >&
ADFundFlowAnalysis::thelast5daysmainlist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return _impl_.thelast5daysmainlist_;
}

// int32 ExchangeDate = 17;
inline void ADFundFlowAnalysis::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t ADFundFlowAnalysis::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t ADFundFlowAnalysis::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeDate)
  return _internal_exchangedate();
}
inline void ADFundFlowAnalysis::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void ADFundFlowAnalysis::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeDate)
}

// int32 ExchangeTime = 18;
inline void ADFundFlowAnalysis::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t ADFundFlowAnalysis::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t ADFundFlowAnalysis::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeTime)
  return _internal_exchangetime();
}
inline void ADFundFlowAnalysis::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void ADFundFlowAnalysis::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeTime)
}

// int32 DataMultiplePowerOf10 = 19;
inline void ADFundFlowAnalysis::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t ADFundFlowAnalysis::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t ADFundFlowAnalysis::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void ADFundFlowAnalysis::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void ADFundFlowAnalysis::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// ADFundFlowDetail

// int64 OutflowValue = 1;
inline void ADFundFlowDetail::clear_outflowvalue() {
  _impl_.outflowvalue_ = int64_t{0};
}
inline int64_t ADFundFlowDetail::_internal_outflowvalue() const {
  return _impl_.outflowvalue_;
}
inline int64_t ADFundFlowDetail::outflowvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowValue)
  return _internal_outflowvalue();
}
inline void ADFundFlowDetail::_internal_set_outflowvalue(int64_t value) {
  
  _impl_.outflowvalue_ = value;
}
inline void ADFundFlowDetail::set_outflowvalue(int64_t value) {
  _internal_set_outflowvalue(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowValue)
}

// int64 InflowValue = 2;
inline void ADFundFlowDetail::clear_inflowvalue() {
  _impl_.inflowvalue_ = int64_t{0};
}
inline int64_t ADFundFlowDetail::_internal_inflowvalue() const {
  return _impl_.inflowvalue_;
}
inline int64_t ADFundFlowDetail::inflowvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowValue)
  return _internal_inflowvalue();
}
inline void ADFundFlowDetail::_internal_set_inflowvalue(int64_t value) {
  
  _impl_.inflowvalue_ = value;
}
inline void ADFundFlowDetail::set_inflowvalue(int64_t value) {
  _internal_set_inflowvalue(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowValue)
}

// int64 OutflowQty = 3;
inline void ADFundFlowDetail::clear_outflowqty() {
  _impl_.outflowqty_ = int64_t{0};
}
inline int64_t ADFundFlowDetail::_internal_outflowqty() const {
  return _impl_.outflowqty_;
}
inline int64_t ADFundFlowDetail::outflowqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowQty)
  return _internal_outflowqty();
}
inline void ADFundFlowDetail::_internal_set_outflowqty(int64_t value) {
  
  _impl_.outflowqty_ = value;
}
inline void ADFundFlowDetail::set_outflowqty(int64_t value) {
  _internal_set_outflowqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowQty)
}

// int64 InflowQty = 4;
inline void ADFundFlowDetail::clear_inflowqty() {
  _impl_.inflowqty_ = int64_t{0};
}
inline int64_t ADFundFlowDetail::_internal_inflowqty() const {
  return _impl_.inflowqty_;
}
inline int64_t ADFundFlowDetail::inflowqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowQty)
  return _internal_inflowqty();
}
inline void ADFundFlowDetail::_internal_set_inflowqty(int64_t value) {
  
  _impl_.inflowqty_ = value;
}
inline void ADFundFlowDetail::set_inflowqty(int64_t value) {
  _internal_set_inflowqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowQty)
}

// int32 MDDate = 5;
inline void ADFundFlowDetail::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t ADFundFlowDetail::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t ADFundFlowDetail::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.MDDate)
  return _internal_mddate();
}
inline void ADFundFlowDetail::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void ADFundFlowDetail::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.MDDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADFundFlowAnalysis_2eproto
