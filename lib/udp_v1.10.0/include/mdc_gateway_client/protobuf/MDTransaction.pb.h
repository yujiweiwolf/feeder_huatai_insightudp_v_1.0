// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDTransaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDTransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDTransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDTransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDTransaction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDTransaction_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDTransaction;
struct MDTransactionDefaultTypeInternal;
extern MDTransactionDefaultTypeInternal _MDTransaction_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDTransaction* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDTransaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDTransaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDTransaction) */ {
 public:
  inline MDTransaction() : MDTransaction(nullptr) {}
  ~MDTransaction() override;
  explicit PROTOBUF_CONSTEXPR MDTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDTransaction(const MDTransaction& from);
  MDTransaction(MDTransaction&& from) noexcept
    : MDTransaction() {
    *this = ::std::move(from);
  }

  inline MDTransaction& operator=(const MDTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDTransaction& operator=(MDTransaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDTransaction* internal_default_instance() {
    return reinterpret_cast<const MDTransaction*>(
               &_MDTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDTransaction& a, MDTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(MDTransaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDTransaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDTransaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDTransaction& from) {
    MDTransaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDTransaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDTransaction";
  }
  protected:
  explicit MDTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kFITradingMethodFieldNumber = 23,
    kSecondaryOrderIDFieldNumber = 32,
    kDealDateFieldNumber = 35,
    kDealTimeFieldNumber = 36,
    kDealNumberFieldNumber = 37,
    kBondCodeFieldNumber = 42,
    kBondNameFieldNumber = 43,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kTradeIndexFieldNumber = 7,
    kTradeBuyNoFieldNumber = 8,
    kTradeSellNoFieldNumber = 9,
    kTradeTypeFieldNumber = 10,
    kTradeBSFlagFieldNumber = 11,
    kTradePriceFieldNumber = 12,
    kTradeQtyFieldNumber = 13,
    kTradeMoneyFieldNumber = 14,
    kApplSeqNumFieldNumber = 15,
    kChannelNoFieldNumber = 16,
    kExchangeDateFieldNumber = 17,
    kTradeCleanPriceFieldNumber = 19,
    kAccruedInterestAmtFieldNumber = 20,
    kTradeDirtyPriceFieldNumber = 21,
    kMaturityYieldFieldNumber = 22,
    kExchangeTimeFieldNumber = 18,
    kSettlPeriodFieldNumber = 28,
    kAccruedInterestOtdFieldNumber = 24,
    kDurationFieldNumber = 25,
    kModifiedDurationFieldNumber = 26,
    kConvexityFieldNumber = 27,
    kSettlTypeFieldNumber = 29,
    kHKTradeTypeFieldNumber = 30,
    kDataMultiplePowerOf10FieldNumber = 31,
    kBidExecInstTypeFieldNumber = 33,
    kMarginPriceFieldNumber = 34,
    kMarketIndicatorFieldNumber = 38,
    kRepoTermFieldNumber = 39,
    kLegSettlementAmount1StFieldNumber = 40,
    kLegSettlementAmount2NdFieldNumber = 41,
    kTotalFacevalueFieldNumber = 44,
    kLegCleanPrice1StFieldNumber = 45,
    kLegCleanPrice2NdFieldNumber = 46,
    kLegYield1StFieldNumber = 47,
    kLegYield2NdFieldNumber = 48,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string FITradingMethod = 23;
  void clear_fitradingmethod();
  const std::string& fitradingmethod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fitradingmethod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fitradingmethod();
  PROTOBUF_NODISCARD std::string* release_fitradingmethod();
  void set_allocated_fitradingmethod(std::string* fitradingmethod);
  private:
  const std::string& _internal_fitradingmethod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fitradingmethod(const std::string& value);
  std::string* _internal_mutable_fitradingmethod();
  public:

  // string SecondaryOrderID = 32;
  void clear_secondaryorderid();
  const std::string& secondaryorderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondaryorderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondaryorderid();
  PROTOBUF_NODISCARD std::string* release_secondaryorderid();
  void set_allocated_secondaryorderid(std::string* secondaryorderid);
  private:
  const std::string& _internal_secondaryorderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondaryorderid(const std::string& value);
  std::string* _internal_mutable_secondaryorderid();
  public:

  // string DealDate = 35;
  void clear_dealdate();
  const std::string& dealdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dealdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dealdate();
  PROTOBUF_NODISCARD std::string* release_dealdate();
  void set_allocated_dealdate(std::string* dealdate);
  private:
  const std::string& _internal_dealdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dealdate(const std::string& value);
  std::string* _internal_mutable_dealdate();
  public:

  // string DealTime = 36;
  void clear_dealtime();
  const std::string& dealtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dealtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dealtime();
  PROTOBUF_NODISCARD std::string* release_dealtime();
  void set_allocated_dealtime(std::string* dealtime);
  private:
  const std::string& _internal_dealtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dealtime(const std::string& value);
  std::string* _internal_mutable_dealtime();
  public:

  // string DealNumber = 37;
  void clear_dealnumber();
  const std::string& dealnumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dealnumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dealnumber();
  PROTOBUF_NODISCARD std::string* release_dealnumber();
  void set_allocated_dealnumber(std::string* dealnumber);
  private:
  const std::string& _internal_dealnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dealnumber(const std::string& value);
  std::string* _internal_mutable_dealnumber();
  public:

  // string BondCode = 42;
  void clear_bondcode();
  const std::string& bondcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bondcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bondcode();
  PROTOBUF_NODISCARD std::string* release_bondcode();
  void set_allocated_bondcode(std::string* bondcode);
  private:
  const std::string& _internal_bondcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bondcode(const std::string& value);
  std::string* _internal_mutable_bondcode();
  public:

  // string BondName = 43;
  void clear_bondname();
  const std::string& bondname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bondname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bondname();
  PROTOBUF_NODISCARD std::string* release_bondname();
  void set_allocated_bondname(std::string* bondname);
  private:
  const std::string& _internal_bondname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bondname(const std::string& value);
  std::string* _internal_mutable_bondname();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 TradeIndex = 7;
  void clear_tradeindex();
  int64_t tradeindex() const;
  void set_tradeindex(int64_t value);
  private:
  int64_t _internal_tradeindex() const;
  void _internal_set_tradeindex(int64_t value);
  public:

  // int64 TradeBuyNo = 8;
  void clear_tradebuyno();
  int64_t tradebuyno() const;
  void set_tradebuyno(int64_t value);
  private:
  int64_t _internal_tradebuyno() const;
  void _internal_set_tradebuyno(int64_t value);
  public:

  // int64 TradeSellNo = 9;
  void clear_tradesellno();
  int64_t tradesellno() const;
  void set_tradesellno(int64_t value);
  private:
  int64_t _internal_tradesellno() const;
  void _internal_set_tradesellno(int64_t value);
  public:

  // int32 TradeType = 10;
  void clear_tradetype();
  int32_t tradetype() const;
  void set_tradetype(int32_t value);
  private:
  int32_t _internal_tradetype() const;
  void _internal_set_tradetype(int32_t value);
  public:

  // int32 TradeBSFlag = 11;
  void clear_tradebsflag();
  int32_t tradebsflag() const;
  void set_tradebsflag(int32_t value);
  private:
  int32_t _internal_tradebsflag() const;
  void _internal_set_tradebsflag(int32_t value);
  public:

  // int64 TradePrice = 12;
  void clear_tradeprice();
  int64_t tradeprice() const;
  void set_tradeprice(int64_t value);
  private:
  int64_t _internal_tradeprice() const;
  void _internal_set_tradeprice(int64_t value);
  public:

  // int64 TradeQty = 13;
  void clear_tradeqty();
  int64_t tradeqty() const;
  void set_tradeqty(int64_t value);
  private:
  int64_t _internal_tradeqty() const;
  void _internal_set_tradeqty(int64_t value);
  public:

  // int64 TradeMoney = 14;
  void clear_trademoney();
  int64_t trademoney() const;
  void set_trademoney(int64_t value);
  private:
  int64_t _internal_trademoney() const;
  void _internal_set_trademoney(int64_t value);
  public:

  // int64 ApplSeqNum = 15;
  void clear_applseqnum();
  int64_t applseqnum() const;
  void set_applseqnum(int64_t value);
  private:
  int64_t _internal_applseqnum() const;
  void _internal_set_applseqnum(int64_t value);
  public:

  // int32 ChannelNo = 16;
  void clear_channelno();
  int32_t channelno() const;
  void set_channelno(int32_t value);
  private:
  int32_t _internal_channelno() const;
  void _internal_set_channelno(int32_t value);
  public:

  // int32 ExchangeDate = 17;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int64 TradeCleanPrice = 19;
  void clear_tradecleanprice();
  int64_t tradecleanprice() const;
  void set_tradecleanprice(int64_t value);
  private:
  int64_t _internal_tradecleanprice() const;
  void _internal_set_tradecleanprice(int64_t value);
  public:

  // int64 AccruedInterestAmt = 20;
  void clear_accruedinterestamt();
  int64_t accruedinterestamt() const;
  void set_accruedinterestamt(int64_t value);
  private:
  int64_t _internal_accruedinterestamt() const;
  void _internal_set_accruedinterestamt(int64_t value);
  public:

  // int64 TradeDirtyPrice = 21;
  void clear_tradedirtyprice();
  int64_t tradedirtyprice() const;
  void set_tradedirtyprice(int64_t value);
  private:
  int64_t _internal_tradedirtyprice() const;
  void _internal_set_tradedirtyprice(int64_t value);
  public:

  // int64 MaturityYield = 22;
  void clear_maturityyield();
  int64_t maturityyield() const;
  void set_maturityyield(int64_t value);
  private:
  int64_t _internal_maturityyield() const;
  void _internal_set_maturityyield(int64_t value);
  public:

  // int32 ExchangeTime = 18;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int32 SettlPeriod = 28;
  void clear_settlperiod();
  int32_t settlperiod() const;
  void set_settlperiod(int32_t value);
  private:
  int32_t _internal_settlperiod() const;
  void _internal_set_settlperiod(int32_t value);
  public:

  // int64 AccruedInterestOtd = 24;
  void clear_accruedinterestotd();
  int64_t accruedinterestotd() const;
  void set_accruedinterestotd(int64_t value);
  private:
  int64_t _internal_accruedinterestotd() const;
  void _internal_set_accruedinterestotd(int64_t value);
  public:

  // int64 Duration = 25;
  void clear_duration();
  int64_t duration() const;
  void set_duration(int64_t value);
  private:
  int64_t _internal_duration() const;
  void _internal_set_duration(int64_t value);
  public:

  // int64 ModifiedDuration = 26;
  void clear_modifiedduration();
  int64_t modifiedduration() const;
  void set_modifiedduration(int64_t value);
  private:
  int64_t _internal_modifiedduration() const;
  void _internal_set_modifiedduration(int64_t value);
  public:

  // int64 Convexity = 27;
  void clear_convexity();
  int64_t convexity() const;
  void set_convexity(int64_t value);
  private:
  int64_t _internal_convexity() const;
  void _internal_set_convexity(int64_t value);
  public:

  // int32 SettlType = 29;
  void clear_settltype();
  int32_t settltype() const;
  void set_settltype(int32_t value);
  private:
  int32_t _internal_settltype() const;
  void _internal_set_settltype(int32_t value);
  public:

  // int32 HKTradeType = 30;
  void clear_hktradetype();
  int32_t hktradetype() const;
  void set_hktradetype(int32_t value);
  private:
  int32_t _internal_hktradetype() const;
  void _internal_set_hktradetype(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 31;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // int32 BidExecInstType = 33;
  void clear_bidexecinsttype();
  int32_t bidexecinsttype() const;
  void set_bidexecinsttype(int32_t value);
  private:
  int32_t _internal_bidexecinsttype() const;
  void _internal_set_bidexecinsttype(int32_t value);
  public:

  // int64 MarginPrice = 34;
  void clear_marginprice();
  int64_t marginprice() const;
  void set_marginprice(int64_t value);
  private:
  int64_t _internal_marginprice() const;
  void _internal_set_marginprice(int64_t value);
  public:

  // int32 MarketIndicator = 38;
  void clear_marketindicator();
  int32_t marketindicator() const;
  void set_marketindicator(int32_t value);
  private:
  int32_t _internal_marketindicator() const;
  void _internal_set_marketindicator(int32_t value);
  public:

  // int32 RepoTerm = 39;
  void clear_repoterm();
  int32_t repoterm() const;
  void set_repoterm(int32_t value);
  private:
  int32_t _internal_repoterm() const;
  void _internal_set_repoterm(int32_t value);
  public:

  // int64 LegSettlementAmount1st = 40;
  void clear_legsettlementamount1st();
  int64_t legsettlementamount1st() const;
  void set_legsettlementamount1st(int64_t value);
  private:
  int64_t _internal_legsettlementamount1st() const;
  void _internal_set_legsettlementamount1st(int64_t value);
  public:

  // int64 LegSettlementAmount2nd = 41;
  void clear_legsettlementamount2nd();
  int64_t legsettlementamount2nd() const;
  void set_legsettlementamount2nd(int64_t value);
  private:
  int64_t _internal_legsettlementamount2nd() const;
  void _internal_set_legsettlementamount2nd(int64_t value);
  public:

  // int64 TotalFacevalue = 44;
  void clear_totalfacevalue();
  int64_t totalfacevalue() const;
  void set_totalfacevalue(int64_t value);
  private:
  int64_t _internal_totalfacevalue() const;
  void _internal_set_totalfacevalue(int64_t value);
  public:

  // int64 LegCleanPrice1st = 45;
  void clear_legcleanprice1st();
  int64_t legcleanprice1st() const;
  void set_legcleanprice1st(int64_t value);
  private:
  int64_t _internal_legcleanprice1st() const;
  void _internal_set_legcleanprice1st(int64_t value);
  public:

  // int64 LegCleanPrice2nd = 46;
  void clear_legcleanprice2nd();
  int64_t legcleanprice2nd() const;
  void set_legcleanprice2nd(int64_t value);
  private:
  int64_t _internal_legcleanprice2nd() const;
  void _internal_set_legcleanprice2nd(int64_t value);
  public:

  // int64 LegYield1st = 47;
  void clear_legyield1st();
  int64_t legyield1st() const;
  void set_legyield1st(int64_t value);
  private:
  int64_t _internal_legyield1st() const;
  void _internal_set_legyield1st(int64_t value);
  public:

  // int64 LegYield2nd = 48;
  void clear_legyield2nd();
  int64_t legyield2nd() const;
  void set_legyield2nd(int64_t value);
  private:
  int64_t _internal_legyield2nd() const;
  void _internal_set_legyield2nd(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fitradingmethod_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondaryorderid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dealdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dealtime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dealnumber_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bondcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bondname_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t tradeindex_;
    int64_t tradebuyno_;
    int64_t tradesellno_;
    int32_t tradetype_;
    int32_t tradebsflag_;
    int64_t tradeprice_;
    int64_t tradeqty_;
    int64_t trademoney_;
    int64_t applseqnum_;
    int32_t channelno_;
    int32_t exchangedate_;
    int64_t tradecleanprice_;
    int64_t accruedinterestamt_;
    int64_t tradedirtyprice_;
    int64_t maturityyield_;
    int32_t exchangetime_;
    int32_t settlperiod_;
    int64_t accruedinterestotd_;
    int64_t duration_;
    int64_t modifiedduration_;
    int64_t convexity_;
    int32_t settltype_;
    int32_t hktradetype_;
    int32_t datamultiplepowerof10_;
    int32_t bidexecinsttype_;
    int64_t marginprice_;
    int32_t marketindicator_;
    int32_t repoterm_;
    int64_t legsettlementamount1st_;
    int64_t legsettlementamount2nd_;
    int64_t totalfacevalue_;
    int64_t legcleanprice1st_;
    int64_t legcleanprice2nd_;
    int64_t legyield1st_;
    int64_t legyield2nd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDTransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDTransaction

// string HTSCSecurityID = 1;
inline void MDTransaction::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDTransaction::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDTransaction::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
}
inline std::string* MDTransaction::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
  return _s;
}
inline const std::string& MDTransaction::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDTransaction::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDTransaction::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDTransaction::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDTransaction::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDTransaction::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDTransaction::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDTransaction::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.MDDate)
  return _internal_mddate();
}
inline void MDTransaction::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDTransaction::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.MDDate)
}

// int32 MDTime = 3;
inline void MDTransaction::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDTransaction::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDTransaction::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.MDTime)
  return _internal_mdtime();
}
inline void MDTransaction::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDTransaction::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDTransaction::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDTransaction::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDTransaction::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDTransaction::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDTransaction::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDTransaction::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDTransaction::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.securityIDSource)
  return _internal_securityidsource();
}
inline void MDTransaction::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDTransaction::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDTransaction::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDTransaction::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDTransaction::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.securityType)
  return _internal_securitytype();
}
inline void MDTransaction::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDTransaction::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.securityType)
}

// int64 TradeIndex = 7;
inline void MDTransaction::clear_tradeindex() {
  _impl_.tradeindex_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_tradeindex() const {
  return _impl_.tradeindex_;
}
inline int64_t MDTransaction::tradeindex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeIndex)
  return _internal_tradeindex();
}
inline void MDTransaction::_internal_set_tradeindex(int64_t value) {
  
  _impl_.tradeindex_ = value;
}
inline void MDTransaction::set_tradeindex(int64_t value) {
  _internal_set_tradeindex(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeIndex)
}

// int64 TradeBuyNo = 8;
inline void MDTransaction::clear_tradebuyno() {
  _impl_.tradebuyno_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_tradebuyno() const {
  return _impl_.tradebuyno_;
}
inline int64_t MDTransaction::tradebuyno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeBuyNo)
  return _internal_tradebuyno();
}
inline void MDTransaction::_internal_set_tradebuyno(int64_t value) {
  
  _impl_.tradebuyno_ = value;
}
inline void MDTransaction::set_tradebuyno(int64_t value) {
  _internal_set_tradebuyno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeBuyNo)
}

// int64 TradeSellNo = 9;
inline void MDTransaction::clear_tradesellno() {
  _impl_.tradesellno_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_tradesellno() const {
  return _impl_.tradesellno_;
}
inline int64_t MDTransaction::tradesellno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeSellNo)
  return _internal_tradesellno();
}
inline void MDTransaction::_internal_set_tradesellno(int64_t value) {
  
  _impl_.tradesellno_ = value;
}
inline void MDTransaction::set_tradesellno(int64_t value) {
  _internal_set_tradesellno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeSellNo)
}

// int32 TradeType = 10;
inline void MDTransaction::clear_tradetype() {
  _impl_.tradetype_ = 0;
}
inline int32_t MDTransaction::_internal_tradetype() const {
  return _impl_.tradetype_;
}
inline int32_t MDTransaction::tradetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeType)
  return _internal_tradetype();
}
inline void MDTransaction::_internal_set_tradetype(int32_t value) {
  
  _impl_.tradetype_ = value;
}
inline void MDTransaction::set_tradetype(int32_t value) {
  _internal_set_tradetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeType)
}

// int32 TradeBSFlag = 11;
inline void MDTransaction::clear_tradebsflag() {
  _impl_.tradebsflag_ = 0;
}
inline int32_t MDTransaction::_internal_tradebsflag() const {
  return _impl_.tradebsflag_;
}
inline int32_t MDTransaction::tradebsflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeBSFlag)
  return _internal_tradebsflag();
}
inline void MDTransaction::_internal_set_tradebsflag(int32_t value) {
  
  _impl_.tradebsflag_ = value;
}
inline void MDTransaction::set_tradebsflag(int32_t value) {
  _internal_set_tradebsflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeBSFlag)
}

// int64 TradePrice = 12;
inline void MDTransaction::clear_tradeprice() {
  _impl_.tradeprice_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_tradeprice() const {
  return _impl_.tradeprice_;
}
inline int64_t MDTransaction::tradeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradePrice)
  return _internal_tradeprice();
}
inline void MDTransaction::_internal_set_tradeprice(int64_t value) {
  
  _impl_.tradeprice_ = value;
}
inline void MDTransaction::set_tradeprice(int64_t value) {
  _internal_set_tradeprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradePrice)
}

// int64 TradeQty = 13;
inline void MDTransaction::clear_tradeqty() {
  _impl_.tradeqty_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_tradeqty() const {
  return _impl_.tradeqty_;
}
inline int64_t MDTransaction::tradeqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeQty)
  return _internal_tradeqty();
}
inline void MDTransaction::_internal_set_tradeqty(int64_t value) {
  
  _impl_.tradeqty_ = value;
}
inline void MDTransaction::set_tradeqty(int64_t value) {
  _internal_set_tradeqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeQty)
}

// int64 TradeMoney = 14;
inline void MDTransaction::clear_trademoney() {
  _impl_.trademoney_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_trademoney() const {
  return _impl_.trademoney_;
}
inline int64_t MDTransaction::trademoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeMoney)
  return _internal_trademoney();
}
inline void MDTransaction::_internal_set_trademoney(int64_t value) {
  
  _impl_.trademoney_ = value;
}
inline void MDTransaction::set_trademoney(int64_t value) {
  _internal_set_trademoney(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeMoney)
}

// int64 ApplSeqNum = 15;
inline void MDTransaction::clear_applseqnum() {
  _impl_.applseqnum_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_applseqnum() const {
  return _impl_.applseqnum_;
}
inline int64_t MDTransaction::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.ApplSeqNum)
  return _internal_applseqnum();
}
inline void MDTransaction::_internal_set_applseqnum(int64_t value) {
  
  _impl_.applseqnum_ = value;
}
inline void MDTransaction::set_applseqnum(int64_t value) {
  _internal_set_applseqnum(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.ApplSeqNum)
}

// int32 ChannelNo = 16;
inline void MDTransaction::clear_channelno() {
  _impl_.channelno_ = 0;
}
inline int32_t MDTransaction::_internal_channelno() const {
  return _impl_.channelno_;
}
inline int32_t MDTransaction::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.ChannelNo)
  return _internal_channelno();
}
inline void MDTransaction::_internal_set_channelno(int32_t value) {
  
  _impl_.channelno_ = value;
}
inline void MDTransaction::set_channelno(int32_t value) {
  _internal_set_channelno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.ChannelNo)
}

// int32 ExchangeDate = 17;
inline void MDTransaction::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDTransaction::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDTransaction::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDTransaction::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDTransaction::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.ExchangeDate)
}

// int32 ExchangeTime = 18;
inline void MDTransaction::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDTransaction::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDTransaction::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDTransaction::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDTransaction::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.ExchangeTime)
}

// int64 TradeCleanPrice = 19;
inline void MDTransaction::clear_tradecleanprice() {
  _impl_.tradecleanprice_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_tradecleanprice() const {
  return _impl_.tradecleanprice_;
}
inline int64_t MDTransaction::tradecleanprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeCleanPrice)
  return _internal_tradecleanprice();
}
inline void MDTransaction::_internal_set_tradecleanprice(int64_t value) {
  
  _impl_.tradecleanprice_ = value;
}
inline void MDTransaction::set_tradecleanprice(int64_t value) {
  _internal_set_tradecleanprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeCleanPrice)
}

// int64 AccruedInterestAmt = 20;
inline void MDTransaction::clear_accruedinterestamt() {
  _impl_.accruedinterestamt_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_accruedinterestamt() const {
  return _impl_.accruedinterestamt_;
}
inline int64_t MDTransaction::accruedinterestamt() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.AccruedInterestAmt)
  return _internal_accruedinterestamt();
}
inline void MDTransaction::_internal_set_accruedinterestamt(int64_t value) {
  
  _impl_.accruedinterestamt_ = value;
}
inline void MDTransaction::set_accruedinterestamt(int64_t value) {
  _internal_set_accruedinterestamt(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.AccruedInterestAmt)
}

// int64 TradeDirtyPrice = 21;
inline void MDTransaction::clear_tradedirtyprice() {
  _impl_.tradedirtyprice_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_tradedirtyprice() const {
  return _impl_.tradedirtyprice_;
}
inline int64_t MDTransaction::tradedirtyprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeDirtyPrice)
  return _internal_tradedirtyprice();
}
inline void MDTransaction::_internal_set_tradedirtyprice(int64_t value) {
  
  _impl_.tradedirtyprice_ = value;
}
inline void MDTransaction::set_tradedirtyprice(int64_t value) {
  _internal_set_tradedirtyprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeDirtyPrice)
}

// int64 MaturityYield = 22;
inline void MDTransaction::clear_maturityyield() {
  _impl_.maturityyield_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_maturityyield() const {
  return _impl_.maturityyield_;
}
inline int64_t MDTransaction::maturityyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.MaturityYield)
  return _internal_maturityyield();
}
inline void MDTransaction::_internal_set_maturityyield(int64_t value) {
  
  _impl_.maturityyield_ = value;
}
inline void MDTransaction::set_maturityyield(int64_t value) {
  _internal_set_maturityyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.MaturityYield)
}

// string FITradingMethod = 23;
inline void MDTransaction::clear_fitradingmethod() {
  _impl_.fitradingmethod_.ClearToEmpty();
}
inline const std::string& MDTransaction::fitradingmethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
  return _internal_fitradingmethod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDTransaction::set_fitradingmethod(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fitradingmethod_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
}
inline std::string* MDTransaction::mutable_fitradingmethod() {
  std::string* _s = _internal_mutable_fitradingmethod();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
  return _s;
}
inline const std::string& MDTransaction::_internal_fitradingmethod() const {
  return _impl_.fitradingmethod_.Get();
}
inline void MDTransaction::_internal_set_fitradingmethod(const std::string& value) {
  
  _impl_.fitradingmethod_.Set(value, GetArenaForAllocation());
}
inline std::string* MDTransaction::_internal_mutable_fitradingmethod() {
  
  return _impl_.fitradingmethod_.Mutable(GetArenaForAllocation());
}
inline std::string* MDTransaction::release_fitradingmethod() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
  return _impl_.fitradingmethod_.Release();
}
inline void MDTransaction::set_allocated_fitradingmethod(std::string* fitradingmethod) {
  if (fitradingmethod != nullptr) {
    
  } else {
    
  }
  _impl_.fitradingmethod_.SetAllocated(fitradingmethod, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fitradingmethod_.IsDefault()) {
    _impl_.fitradingmethod_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
}

// int64 AccruedInterestOtd = 24;
inline void MDTransaction::clear_accruedinterestotd() {
  _impl_.accruedinterestotd_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_accruedinterestotd() const {
  return _impl_.accruedinterestotd_;
}
inline int64_t MDTransaction::accruedinterestotd() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.AccruedInterestOtd)
  return _internal_accruedinterestotd();
}
inline void MDTransaction::_internal_set_accruedinterestotd(int64_t value) {
  
  _impl_.accruedinterestotd_ = value;
}
inline void MDTransaction::set_accruedinterestotd(int64_t value) {
  _internal_set_accruedinterestotd(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.AccruedInterestOtd)
}

// int64 Duration = 25;
inline void MDTransaction::clear_duration() {
  _impl_.duration_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_duration() const {
  return _impl_.duration_;
}
inline int64_t MDTransaction::duration() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.Duration)
  return _internal_duration();
}
inline void MDTransaction::_internal_set_duration(int64_t value) {
  
  _impl_.duration_ = value;
}
inline void MDTransaction::set_duration(int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.Duration)
}

// int64 ModifiedDuration = 26;
inline void MDTransaction::clear_modifiedduration() {
  _impl_.modifiedduration_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_modifiedduration() const {
  return _impl_.modifiedduration_;
}
inline int64_t MDTransaction::modifiedduration() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.ModifiedDuration)
  return _internal_modifiedduration();
}
inline void MDTransaction::_internal_set_modifiedduration(int64_t value) {
  
  _impl_.modifiedduration_ = value;
}
inline void MDTransaction::set_modifiedduration(int64_t value) {
  _internal_set_modifiedduration(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.ModifiedDuration)
}

// int64 Convexity = 27;
inline void MDTransaction::clear_convexity() {
  _impl_.convexity_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_convexity() const {
  return _impl_.convexity_;
}
inline int64_t MDTransaction::convexity() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.Convexity)
  return _internal_convexity();
}
inline void MDTransaction::_internal_set_convexity(int64_t value) {
  
  _impl_.convexity_ = value;
}
inline void MDTransaction::set_convexity(int64_t value) {
  _internal_set_convexity(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.Convexity)
}

// int32 SettlPeriod = 28;
inline void MDTransaction::clear_settlperiod() {
  _impl_.settlperiod_ = 0;
}
inline int32_t MDTransaction::_internal_settlperiod() const {
  return _impl_.settlperiod_;
}
inline int32_t MDTransaction::settlperiod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.SettlPeriod)
  return _internal_settlperiod();
}
inline void MDTransaction::_internal_set_settlperiod(int32_t value) {
  
  _impl_.settlperiod_ = value;
}
inline void MDTransaction::set_settlperiod(int32_t value) {
  _internal_set_settlperiod(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.SettlPeriod)
}

// int32 SettlType = 29;
inline void MDTransaction::clear_settltype() {
  _impl_.settltype_ = 0;
}
inline int32_t MDTransaction::_internal_settltype() const {
  return _impl_.settltype_;
}
inline int32_t MDTransaction::settltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.SettlType)
  return _internal_settltype();
}
inline void MDTransaction::_internal_set_settltype(int32_t value) {
  
  _impl_.settltype_ = value;
}
inline void MDTransaction::set_settltype(int32_t value) {
  _internal_set_settltype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.SettlType)
}

// int32 HKTradeType = 30;
inline void MDTransaction::clear_hktradetype() {
  _impl_.hktradetype_ = 0;
}
inline int32_t MDTransaction::_internal_hktradetype() const {
  return _impl_.hktradetype_;
}
inline int32_t MDTransaction::hktradetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.HKTradeType)
  return _internal_hktradetype();
}
inline void MDTransaction::_internal_set_hktradetype(int32_t value) {
  
  _impl_.hktradetype_ = value;
}
inline void MDTransaction::set_hktradetype(int32_t value) {
  _internal_set_hktradetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.HKTradeType)
}

// int32 DataMultiplePowerOf10 = 31;
inline void MDTransaction::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDTransaction::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDTransaction::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDTransaction::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDTransaction::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.DataMultiplePowerOf10)
}

// string SecondaryOrderID = 32;
inline void MDTransaction::clear_secondaryorderid() {
  _impl_.secondaryorderid_.ClearToEmpty();
}
inline const std::string& MDTransaction::secondaryorderid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.SecondaryOrderID)
  return _internal_secondaryorderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDTransaction::set_secondaryorderid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondaryorderid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.SecondaryOrderID)
}
inline std::string* MDTransaction::mutable_secondaryorderid() {
  std::string* _s = _internal_mutable_secondaryorderid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.SecondaryOrderID)
  return _s;
}
inline const std::string& MDTransaction::_internal_secondaryorderid() const {
  return _impl_.secondaryorderid_.Get();
}
inline void MDTransaction::_internal_set_secondaryorderid(const std::string& value) {
  
  _impl_.secondaryorderid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDTransaction::_internal_mutable_secondaryorderid() {
  
  return _impl_.secondaryorderid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDTransaction::release_secondaryorderid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.SecondaryOrderID)
  return _impl_.secondaryorderid_.Release();
}
inline void MDTransaction::set_allocated_secondaryorderid(std::string* secondaryorderid) {
  if (secondaryorderid != nullptr) {
    
  } else {
    
  }
  _impl_.secondaryorderid_.SetAllocated(secondaryorderid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondaryorderid_.IsDefault()) {
    _impl_.secondaryorderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.SecondaryOrderID)
}

// int32 BidExecInstType = 33;
inline void MDTransaction::clear_bidexecinsttype() {
  _impl_.bidexecinsttype_ = 0;
}
inline int32_t MDTransaction::_internal_bidexecinsttype() const {
  return _impl_.bidexecinsttype_;
}
inline int32_t MDTransaction::bidexecinsttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.BidExecInstType)
  return _internal_bidexecinsttype();
}
inline void MDTransaction::_internal_set_bidexecinsttype(int32_t value) {
  
  _impl_.bidexecinsttype_ = value;
}
inline void MDTransaction::set_bidexecinsttype(int32_t value) {
  _internal_set_bidexecinsttype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.BidExecInstType)
}

// int64 MarginPrice = 34;
inline void MDTransaction::clear_marginprice() {
  _impl_.marginprice_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_marginprice() const {
  return _impl_.marginprice_;
}
inline int64_t MDTransaction::marginprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.MarginPrice)
  return _internal_marginprice();
}
inline void MDTransaction::_internal_set_marginprice(int64_t value) {
  
  _impl_.marginprice_ = value;
}
inline void MDTransaction::set_marginprice(int64_t value) {
  _internal_set_marginprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.MarginPrice)
}

// string DealDate = 35;
inline void MDTransaction::clear_dealdate() {
  _impl_.dealdate_.ClearToEmpty();
}
inline const std::string& MDTransaction::dealdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.DealDate)
  return _internal_dealdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDTransaction::set_dealdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dealdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.DealDate)
}
inline std::string* MDTransaction::mutable_dealdate() {
  std::string* _s = _internal_mutable_dealdate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.DealDate)
  return _s;
}
inline const std::string& MDTransaction::_internal_dealdate() const {
  return _impl_.dealdate_.Get();
}
inline void MDTransaction::_internal_set_dealdate(const std::string& value) {
  
  _impl_.dealdate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDTransaction::_internal_mutable_dealdate() {
  
  return _impl_.dealdate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDTransaction::release_dealdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.DealDate)
  return _impl_.dealdate_.Release();
}
inline void MDTransaction::set_allocated_dealdate(std::string* dealdate) {
  if (dealdate != nullptr) {
    
  } else {
    
  }
  _impl_.dealdate_.SetAllocated(dealdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dealdate_.IsDefault()) {
    _impl_.dealdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.DealDate)
}

// string DealTime = 36;
inline void MDTransaction::clear_dealtime() {
  _impl_.dealtime_.ClearToEmpty();
}
inline const std::string& MDTransaction::dealtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.DealTime)
  return _internal_dealtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDTransaction::set_dealtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dealtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.DealTime)
}
inline std::string* MDTransaction::mutable_dealtime() {
  std::string* _s = _internal_mutable_dealtime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.DealTime)
  return _s;
}
inline const std::string& MDTransaction::_internal_dealtime() const {
  return _impl_.dealtime_.Get();
}
inline void MDTransaction::_internal_set_dealtime(const std::string& value) {
  
  _impl_.dealtime_.Set(value, GetArenaForAllocation());
}
inline std::string* MDTransaction::_internal_mutable_dealtime() {
  
  return _impl_.dealtime_.Mutable(GetArenaForAllocation());
}
inline std::string* MDTransaction::release_dealtime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.DealTime)
  return _impl_.dealtime_.Release();
}
inline void MDTransaction::set_allocated_dealtime(std::string* dealtime) {
  if (dealtime != nullptr) {
    
  } else {
    
  }
  _impl_.dealtime_.SetAllocated(dealtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dealtime_.IsDefault()) {
    _impl_.dealtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.DealTime)
}

// string DealNumber = 37;
inline void MDTransaction::clear_dealnumber() {
  _impl_.dealnumber_.ClearToEmpty();
}
inline const std::string& MDTransaction::dealnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.DealNumber)
  return _internal_dealnumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDTransaction::set_dealnumber(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dealnumber_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.DealNumber)
}
inline std::string* MDTransaction::mutable_dealnumber() {
  std::string* _s = _internal_mutable_dealnumber();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.DealNumber)
  return _s;
}
inline const std::string& MDTransaction::_internal_dealnumber() const {
  return _impl_.dealnumber_.Get();
}
inline void MDTransaction::_internal_set_dealnumber(const std::string& value) {
  
  _impl_.dealnumber_.Set(value, GetArenaForAllocation());
}
inline std::string* MDTransaction::_internal_mutable_dealnumber() {
  
  return _impl_.dealnumber_.Mutable(GetArenaForAllocation());
}
inline std::string* MDTransaction::release_dealnumber() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.DealNumber)
  return _impl_.dealnumber_.Release();
}
inline void MDTransaction::set_allocated_dealnumber(std::string* dealnumber) {
  if (dealnumber != nullptr) {
    
  } else {
    
  }
  _impl_.dealnumber_.SetAllocated(dealnumber, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dealnumber_.IsDefault()) {
    _impl_.dealnumber_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.DealNumber)
}

// int32 MarketIndicator = 38;
inline void MDTransaction::clear_marketindicator() {
  _impl_.marketindicator_ = 0;
}
inline int32_t MDTransaction::_internal_marketindicator() const {
  return _impl_.marketindicator_;
}
inline int32_t MDTransaction::marketindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.MarketIndicator)
  return _internal_marketindicator();
}
inline void MDTransaction::_internal_set_marketindicator(int32_t value) {
  
  _impl_.marketindicator_ = value;
}
inline void MDTransaction::set_marketindicator(int32_t value) {
  _internal_set_marketindicator(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.MarketIndicator)
}

// int32 RepoTerm = 39;
inline void MDTransaction::clear_repoterm() {
  _impl_.repoterm_ = 0;
}
inline int32_t MDTransaction::_internal_repoterm() const {
  return _impl_.repoterm_;
}
inline int32_t MDTransaction::repoterm() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.RepoTerm)
  return _internal_repoterm();
}
inline void MDTransaction::_internal_set_repoterm(int32_t value) {
  
  _impl_.repoterm_ = value;
}
inline void MDTransaction::set_repoterm(int32_t value) {
  _internal_set_repoterm(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.RepoTerm)
}

// int64 LegSettlementAmount1st = 40;
inline void MDTransaction::clear_legsettlementamount1st() {
  _impl_.legsettlementamount1st_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_legsettlementamount1st() const {
  return _impl_.legsettlementamount1st_;
}
inline int64_t MDTransaction::legsettlementamount1st() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.LegSettlementAmount1st)
  return _internal_legsettlementamount1st();
}
inline void MDTransaction::_internal_set_legsettlementamount1st(int64_t value) {
  
  _impl_.legsettlementamount1st_ = value;
}
inline void MDTransaction::set_legsettlementamount1st(int64_t value) {
  _internal_set_legsettlementamount1st(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.LegSettlementAmount1st)
}

// int64 LegSettlementAmount2nd = 41;
inline void MDTransaction::clear_legsettlementamount2nd() {
  _impl_.legsettlementamount2nd_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_legsettlementamount2nd() const {
  return _impl_.legsettlementamount2nd_;
}
inline int64_t MDTransaction::legsettlementamount2nd() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.LegSettlementAmount2nd)
  return _internal_legsettlementamount2nd();
}
inline void MDTransaction::_internal_set_legsettlementamount2nd(int64_t value) {
  
  _impl_.legsettlementamount2nd_ = value;
}
inline void MDTransaction::set_legsettlementamount2nd(int64_t value) {
  _internal_set_legsettlementamount2nd(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.LegSettlementAmount2nd)
}

// string BondCode = 42;
inline void MDTransaction::clear_bondcode() {
  _impl_.bondcode_.ClearToEmpty();
}
inline const std::string& MDTransaction::bondcode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.BondCode)
  return _internal_bondcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDTransaction::set_bondcode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bondcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.BondCode)
}
inline std::string* MDTransaction::mutable_bondcode() {
  std::string* _s = _internal_mutable_bondcode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.BondCode)
  return _s;
}
inline const std::string& MDTransaction::_internal_bondcode() const {
  return _impl_.bondcode_.Get();
}
inline void MDTransaction::_internal_set_bondcode(const std::string& value) {
  
  _impl_.bondcode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDTransaction::_internal_mutable_bondcode() {
  
  return _impl_.bondcode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDTransaction::release_bondcode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.BondCode)
  return _impl_.bondcode_.Release();
}
inline void MDTransaction::set_allocated_bondcode(std::string* bondcode) {
  if (bondcode != nullptr) {
    
  } else {
    
  }
  _impl_.bondcode_.SetAllocated(bondcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bondcode_.IsDefault()) {
    _impl_.bondcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.BondCode)
}

// string BondName = 43;
inline void MDTransaction::clear_bondname() {
  _impl_.bondname_.ClearToEmpty();
}
inline const std::string& MDTransaction::bondname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.BondName)
  return _internal_bondname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDTransaction::set_bondname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bondname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.BondName)
}
inline std::string* MDTransaction::mutable_bondname() {
  std::string* _s = _internal_mutable_bondname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.BondName)
  return _s;
}
inline const std::string& MDTransaction::_internal_bondname() const {
  return _impl_.bondname_.Get();
}
inline void MDTransaction::_internal_set_bondname(const std::string& value) {
  
  _impl_.bondname_.Set(value, GetArenaForAllocation());
}
inline std::string* MDTransaction::_internal_mutable_bondname() {
  
  return _impl_.bondname_.Mutable(GetArenaForAllocation());
}
inline std::string* MDTransaction::release_bondname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.BondName)
  return _impl_.bondname_.Release();
}
inline void MDTransaction::set_allocated_bondname(std::string* bondname) {
  if (bondname != nullptr) {
    
  } else {
    
  }
  _impl_.bondname_.SetAllocated(bondname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bondname_.IsDefault()) {
    _impl_.bondname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.BondName)
}

// int64 TotalFacevalue = 44;
inline void MDTransaction::clear_totalfacevalue() {
  _impl_.totalfacevalue_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_totalfacevalue() const {
  return _impl_.totalfacevalue_;
}
inline int64_t MDTransaction::totalfacevalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TotalFacevalue)
  return _internal_totalfacevalue();
}
inline void MDTransaction::_internal_set_totalfacevalue(int64_t value) {
  
  _impl_.totalfacevalue_ = value;
}
inline void MDTransaction::set_totalfacevalue(int64_t value) {
  _internal_set_totalfacevalue(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TotalFacevalue)
}

// int64 LegCleanPrice1st = 45;
inline void MDTransaction::clear_legcleanprice1st() {
  _impl_.legcleanprice1st_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_legcleanprice1st() const {
  return _impl_.legcleanprice1st_;
}
inline int64_t MDTransaction::legcleanprice1st() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.LegCleanPrice1st)
  return _internal_legcleanprice1st();
}
inline void MDTransaction::_internal_set_legcleanprice1st(int64_t value) {
  
  _impl_.legcleanprice1st_ = value;
}
inline void MDTransaction::set_legcleanprice1st(int64_t value) {
  _internal_set_legcleanprice1st(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.LegCleanPrice1st)
}

// int64 LegCleanPrice2nd = 46;
inline void MDTransaction::clear_legcleanprice2nd() {
  _impl_.legcleanprice2nd_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_legcleanprice2nd() const {
  return _impl_.legcleanprice2nd_;
}
inline int64_t MDTransaction::legcleanprice2nd() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.LegCleanPrice2nd)
  return _internal_legcleanprice2nd();
}
inline void MDTransaction::_internal_set_legcleanprice2nd(int64_t value) {
  
  _impl_.legcleanprice2nd_ = value;
}
inline void MDTransaction::set_legcleanprice2nd(int64_t value) {
  _internal_set_legcleanprice2nd(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.LegCleanPrice2nd)
}

// int64 LegYield1st = 47;
inline void MDTransaction::clear_legyield1st() {
  _impl_.legyield1st_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_legyield1st() const {
  return _impl_.legyield1st_;
}
inline int64_t MDTransaction::legyield1st() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.LegYield1st)
  return _internal_legyield1st();
}
inline void MDTransaction::_internal_set_legyield1st(int64_t value) {
  
  _impl_.legyield1st_ = value;
}
inline void MDTransaction::set_legyield1st(int64_t value) {
  _internal_set_legyield1st(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.LegYield1st)
}

// int64 LegYield2nd = 48;
inline void MDTransaction::clear_legyield2nd() {
  _impl_.legyield2nd_ = int64_t{0};
}
inline int64_t MDTransaction::_internal_legyield2nd() const {
  return _impl_.legyield2nd_;
}
inline int64_t MDTransaction::legyield2nd() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.LegYield2nd)
  return _internal_legyield2nd();
}
inline void MDTransaction::_internal_set_legyield2nd(int64_t value) {
  
  _impl_.legyield2nd_ = value;
}
inline void MDTransaction::set_legyield2nd(int64_t value) {
  _internal_set_legyield2nd(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.LegYield2nd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDTransaction_2eproto
