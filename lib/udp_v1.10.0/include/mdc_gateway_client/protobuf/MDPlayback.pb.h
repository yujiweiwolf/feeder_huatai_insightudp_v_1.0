// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDPlayback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDPlayback_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDPlayback_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "EMarketDataType.pb.h"
#include "HtscMarketData.pb.h"
#include "InsightErrorContext.pb.h"
#include "SecuritySourceType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDPlayback_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDPlayback_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDPlayback_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class PlaybackControlRequest;
struct PlaybackControlRequestDefaultTypeInternal;
extern PlaybackControlRequestDefaultTypeInternal _PlaybackControlRequest_default_instance_;
class PlaybackControlResponse;
struct PlaybackControlResponseDefaultTypeInternal;
extern PlaybackControlResponseDefaultTypeInternal _PlaybackControlResponse_default_instance_;
class PlaybackPayload;
struct PlaybackPayloadDefaultTypeInternal;
extern PlaybackPayloadDefaultTypeInternal _PlaybackPayload_default_instance_;
class PlaybackRequest;
struct PlaybackRequestDefaultTypeInternal;
extern PlaybackRequestDefaultTypeInternal _PlaybackRequest_default_instance_;
class PlaybackResponse;
struct PlaybackResponseDefaultTypeInternal;
extern PlaybackResponseDefaultTypeInternal _PlaybackResponse_default_instance_;
class PlaybackStatus;
struct PlaybackStatusDefaultTypeInternal;
extern PlaybackStatusDefaultTypeInternal _PlaybackStatus_default_instance_;
class PlaybackStatusRequest;
struct PlaybackStatusRequestDefaultTypeInternal;
extern PlaybackStatusRequestDefaultTypeInternal _PlaybackStatusRequest_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::PlaybackControlRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackControlRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackControlResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackControlResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackPayload* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackPayload>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackStatus* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackStatus>(Arena*);
template<> ::com::htsc::mdc::insight::model::PlaybackStatusRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackStatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

enum EPlaybackExrightsType : int {
  DEFAULT_EXRIGHTS_TYPE = 0,
  NO_EXRIGHTS = 10,
  FORWARD_EXRIGHTS = 11,
  BACKWARD_EXRIGHTS = 12,
  EPlaybackExrightsType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EPlaybackExrightsType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EPlaybackExrightsType_IsValid(int value);
constexpr EPlaybackExrightsType EPlaybackExrightsType_MIN = DEFAULT_EXRIGHTS_TYPE;
constexpr EPlaybackExrightsType EPlaybackExrightsType_MAX = BACKWARD_EXRIGHTS;
constexpr int EPlaybackExrightsType_ARRAYSIZE = EPlaybackExrightsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackExrightsType_descriptor();
template<typename T>
inline const std::string& EPlaybackExrightsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlaybackExrightsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlaybackExrightsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlaybackExrightsType_descriptor(), enum_t_value);
}
inline bool EPlaybackExrightsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPlaybackExrightsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlaybackExrightsType>(
    EPlaybackExrightsType_descriptor(), name, value);
}
enum EPlaybackTaskControlType : int {
  DEFAULT_CONTROL_TYPE = 0,
  CANCEL_TASK = 1,
  SET_PLAYBACK_RATE = 2,
  EPlaybackTaskControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EPlaybackTaskControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EPlaybackTaskControlType_IsValid(int value);
constexpr EPlaybackTaskControlType EPlaybackTaskControlType_MIN = DEFAULT_CONTROL_TYPE;
constexpr EPlaybackTaskControlType EPlaybackTaskControlType_MAX = SET_PLAYBACK_RATE;
constexpr int EPlaybackTaskControlType_ARRAYSIZE = EPlaybackTaskControlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackTaskControlType_descriptor();
template<typename T>
inline const std::string& EPlaybackTaskControlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlaybackTaskControlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlaybackTaskControlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlaybackTaskControlType_descriptor(), enum_t_value);
}
inline bool EPlaybackTaskControlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPlaybackTaskControlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlaybackTaskControlType>(
    EPlaybackTaskControlType_descriptor(), name, value);
}
enum EPlaybackTaskStatus : int {
  DEFAULT_STATUS = 0,
  INITIALIZING = 11,
  PREPARING = 12,
  PREPARED = 13,
  RUNNING = 14,
  APPENDING = 15,
  CANCELED = 16,
  COMPLETED = 17,
  FAILED = 18,
  EPlaybackTaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EPlaybackTaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EPlaybackTaskStatus_IsValid(int value);
constexpr EPlaybackTaskStatus EPlaybackTaskStatus_MIN = DEFAULT_STATUS;
constexpr EPlaybackTaskStatus EPlaybackTaskStatus_MAX = FAILED;
constexpr int EPlaybackTaskStatus_ARRAYSIZE = EPlaybackTaskStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaybackTaskStatus_descriptor();
template<typename T>
inline const std::string& EPlaybackTaskStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlaybackTaskStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlaybackTaskStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlaybackTaskStatus_descriptor(), enum_t_value);
}
inline bool EPlaybackTaskStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPlaybackTaskStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlaybackTaskStatus>(
    EPlaybackTaskStatus_descriptor(), name, value);
}
// ===================================================================

class PlaybackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackRequest) */ {
 public:
  inline PlaybackRequest() : PlaybackRequest(nullptr) {}
  ~PlaybackRequest() override;
  explicit PROTOBUF_CONSTEXPR PlaybackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackRequest(const PlaybackRequest& from);
  PlaybackRequest(PlaybackRequest&& from) noexcept
    : PlaybackRequest() {
    *this = ::std::move(from);
  }

  inline PlaybackRequest& operator=(const PlaybackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackRequest& operator=(PlaybackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackRequest* internal_default_instance() {
    return reinterpret_cast<const PlaybackRequest*>(
               &_PlaybackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlaybackRequest& a, PlaybackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackRequest& from) {
    PlaybackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackRequest";
  }
  protected:
  explicit PlaybackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHtscSecurityIDsFieldNumber = 2,
    kSecuritySourceTypeFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kStartTimeFieldNumber = 4,
    kStopTimeFieldNumber = 5,
    kInitialDataStartTimeFieldNumber = 10,
    kReplayDataTypeFieldNumber = 6,
    kReplayRateFieldNumber = 7,
    kExrightsTypeFieldNumber = 8,
    kIsNeedInitialDataFieldNumber = 9,
    kReplayFuncTypeFieldNumber = 11,
    kSortTypeFieldNumber = 12,
  };
  // repeated string htscSecurityIDs = 2;
  int htscsecurityids_size() const;
  private:
  int _internal_htscsecurityids_size() const;
  public:
  void clear_htscsecurityids();
  const std::string& htscsecurityids(int index) const;
  std::string* mutable_htscsecurityids(int index);
  void set_htscsecurityids(int index, const std::string& value);
  void set_htscsecurityids(int index, std::string&& value);
  void set_htscsecurityids(int index, const char* value);
  void set_htscsecurityids(int index, const char* value, size_t size);
  std::string* add_htscsecurityids();
  void add_htscsecurityids(const std::string& value);
  void add_htscsecurityids(std::string&& value);
  void add_htscsecurityids(const char* value);
  void add_htscsecurityids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& htscsecurityids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_htscsecurityids();
  private:
  const std::string& _internal_htscsecurityids(int index) const;
  std::string* _internal_add_htscsecurityids();
  public:

  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
  int securitysourcetype_size() const;
  private:
  int _internal_securitysourcetype_size() const;
  public:
  void clear_securitysourcetype();
  ::com::htsc::mdc::insight::model::SecuritySourceType* mutable_securitysourcetype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >*
      mutable_securitysourcetype();
  private:
  const ::com::htsc::mdc::insight::model::SecuritySourceType& _internal_securitysourcetype(int index) const;
  ::com::htsc::mdc::insight::model::SecuritySourceType* _internal_add_securitysourcetype();
  public:
  const ::com::htsc::mdc::insight::model::SecuritySourceType& securitysourcetype(int index) const;
  ::com::htsc::mdc::insight::model::SecuritySourceType* add_securitysourcetype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >&
      securitysourcetype() const;

  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string startTime = 4;
  void clear_starttime();
  const std::string& starttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starttime();
  PROTOBUF_NODISCARD std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // string stopTime = 5;
  void clear_stoptime();
  const std::string& stoptime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stoptime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stoptime();
  PROTOBUF_NODISCARD std::string* release_stoptime();
  void set_allocated_stoptime(std::string* stoptime);
  private:
  const std::string& _internal_stoptime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stoptime(const std::string& value);
  std::string* _internal_mutable_stoptime();
  public:

  // string initialDataStartTime = 10;
  void clear_initialdatastarttime();
  const std::string& initialdatastarttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initialdatastarttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initialdatastarttime();
  PROTOBUF_NODISCARD std::string* release_initialdatastarttime();
  void set_allocated_initialdatastarttime(std::string* initialdatastarttime);
  private:
  const std::string& _internal_initialdatastarttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initialdatastarttime(const std::string& value);
  std::string* _internal_mutable_initialdatastarttime();
  public:

  // .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
  void clear_replaydatatype();
  ::com::htsc::mdc::insight::model::EMarketDataType replaydatatype() const;
  void set_replaydatatype(::com::htsc::mdc::insight::model::EMarketDataType value);
  private:
  ::com::htsc::mdc::insight::model::EMarketDataType _internal_replaydatatype() const;
  void _internal_set_replaydatatype(::com::htsc::mdc::insight::model::EMarketDataType value);
  public:

  // int32 replayRate = 7;
  void clear_replayrate();
  int32_t replayrate() const;
  void set_replayrate(int32_t value);
  private:
  int32_t _internal_replayrate() const;
  void _internal_set_replayrate(int32_t value);
  public:

  // .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
  void clear_exrightstype();
  ::com::htsc::mdc::insight::model::EPlaybackExrightsType exrightstype() const;
  void set_exrightstype(::com::htsc::mdc::insight::model::EPlaybackExrightsType value);
  private:
  ::com::htsc::mdc::insight::model::EPlaybackExrightsType _internal_exrightstype() const;
  void _internal_set_exrightstype(::com::htsc::mdc::insight::model::EPlaybackExrightsType value);
  public:

  // bool isNeedInitialData = 9;
  void clear_isneedinitialdata();
  bool isneedinitialdata() const;
  void set_isneedinitialdata(bool value);
  private:
  bool _internal_isneedinitialdata() const;
  void _internal_set_isneedinitialdata(bool value);
  public:

  // int32 replayFuncType = 11;
  void clear_replayfunctype();
  int32_t replayfunctype() const;
  void set_replayfunctype(int32_t value);
  private:
  int32_t _internal_replayfunctype() const;
  void _internal_set_replayfunctype(int32_t value);
  public:

  // int32 sortType = 12;
  void clear_sorttype();
  int32_t sorttype() const;
  void set_sorttype(int32_t value);
  private:
  int32_t _internal_sorttype() const;
  void _internal_set_sorttype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> htscsecurityids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType > securitysourcetype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stoptime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initialdatastarttime_;
    int replaydatatype_;
    int32_t replayrate_;
    int exrightstype_;
    bool isneedinitialdata_;
    int32_t replayfunctype_;
    int32_t sorttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackResponse) */ {
 public:
  inline PlaybackResponse() : PlaybackResponse(nullptr) {}
  ~PlaybackResponse() override;
  explicit PROTOBUF_CONSTEXPR PlaybackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackResponse(const PlaybackResponse& from);
  PlaybackResponse(PlaybackResponse&& from) noexcept
    : PlaybackResponse() {
    *this = ::std::move(from);
  }

  inline PlaybackResponse& operator=(const PlaybackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackResponse& operator=(PlaybackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackResponse* internal_default_instance() {
    return reinterpret_cast<const PlaybackResponse*>(
               &_PlaybackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlaybackResponse& a, PlaybackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackResponse& from) {
    PlaybackResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackResponse";
  }
  protected:
  explicit PlaybackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kErrorContextFieldNumber = 3,
    kIsSuccessFieldNumber = 2,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  bool has_errorcontext() const;
  private:
  bool _internal_has_errorcontext() const;
  public:
  void clear_errorcontext();
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);
  private:
  const ::com::htsc::mdc::insight::model::InsightErrorContext& _internal_errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* _internal_mutable_errorcontext();
  public:
  void unsafe_arena_set_allocated_errorcontext(
      ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);
  ::com::htsc::mdc::insight::model::InsightErrorContext* unsafe_arena_release_errorcontext();

  // bool isSuccess = 2;
  void clear_issuccess();
  bool issuccess() const;
  void set_issuccess(bool value);
  private:
  bool _internal_issuccess() const;
  void _internal_set_issuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
    ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
    bool issuccess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackControlRequest) */ {
 public:
  inline PlaybackControlRequest() : PlaybackControlRequest(nullptr) {}
  ~PlaybackControlRequest() override;
  explicit PROTOBUF_CONSTEXPR PlaybackControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackControlRequest(const PlaybackControlRequest& from);
  PlaybackControlRequest(PlaybackControlRequest&& from) noexcept
    : PlaybackControlRequest() {
    *this = ::std::move(from);
  }

  inline PlaybackControlRequest& operator=(const PlaybackControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackControlRequest& operator=(PlaybackControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackControlRequest* internal_default_instance() {
    return reinterpret_cast<const PlaybackControlRequest*>(
               &_PlaybackControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlaybackControlRequest& a, PlaybackControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackControlRequest& from) {
    PlaybackControlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackControlRequest";
  }
  protected:
  explicit PlaybackControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kControlTypeFieldNumber = 2,
    kReplayRateFieldNumber = 3,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
  void clear_controltype();
  ::com::htsc::mdc::insight::model::EPlaybackTaskControlType controltype() const;
  void set_controltype(::com::htsc::mdc::insight::model::EPlaybackTaskControlType value);
  private:
  ::com::htsc::mdc::insight::model::EPlaybackTaskControlType _internal_controltype() const;
  void _internal_set_controltype(::com::htsc::mdc::insight::model::EPlaybackTaskControlType value);
  public:

  // int32 replayRate = 3;
  void clear_replayrate();
  int32_t replayrate() const;
  void set_replayrate(int32_t value);
  private:
  int32_t _internal_replayrate() const;
  void _internal_set_replayrate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
    int controltype_;
    int32_t replayrate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackControlResponse) */ {
 public:
  inline PlaybackControlResponse() : PlaybackControlResponse(nullptr) {}
  ~PlaybackControlResponse() override;
  explicit PROTOBUF_CONSTEXPR PlaybackControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackControlResponse(const PlaybackControlResponse& from);
  PlaybackControlResponse(PlaybackControlResponse&& from) noexcept
    : PlaybackControlResponse() {
    *this = ::std::move(from);
  }

  inline PlaybackControlResponse& operator=(const PlaybackControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackControlResponse& operator=(PlaybackControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackControlResponse* internal_default_instance() {
    return reinterpret_cast<const PlaybackControlResponse*>(
               &_PlaybackControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlaybackControlResponse& a, PlaybackControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackControlResponse& from) {
    PlaybackControlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackControlResponse";
  }
  protected:
  explicit PlaybackControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kErrorContextFieldNumber = 3,
    kIsSuccessFieldNumber = 2,
    kCurrentReplayRateFieldNumber = 4,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  bool has_errorcontext() const;
  private:
  bool _internal_has_errorcontext() const;
  public:
  void clear_errorcontext();
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);
  private:
  const ::com::htsc::mdc::insight::model::InsightErrorContext& _internal_errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* _internal_mutable_errorcontext();
  public:
  void unsafe_arena_set_allocated_errorcontext(
      ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);
  ::com::htsc::mdc::insight::model::InsightErrorContext* unsafe_arena_release_errorcontext();

  // bool isSuccess = 2;
  void clear_issuccess();
  bool issuccess() const;
  void set_issuccess(bool value);
  private:
  bool _internal_issuccess() const;
  void _internal_set_issuccess(bool value);
  public:

  // int32 currentReplayRate = 4;
  void clear_currentreplayrate();
  int32_t currentreplayrate() const;
  void set_currentreplayrate(int32_t value);
  private:
  int32_t _internal_currentreplayrate() const;
  void _internal_set_currentreplayrate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
    ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
    bool issuccess_;
    int32_t currentreplayrate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackStatusRequest) */ {
 public:
  inline PlaybackStatusRequest() : PlaybackStatusRequest(nullptr) {}
  ~PlaybackStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR PlaybackStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackStatusRequest(const PlaybackStatusRequest& from);
  PlaybackStatusRequest(PlaybackStatusRequest&& from) noexcept
    : PlaybackStatusRequest() {
    *this = ::std::move(from);
  }

  inline PlaybackStatusRequest& operator=(const PlaybackStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackStatusRequest& operator=(PlaybackStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PlaybackStatusRequest*>(
               &_PlaybackStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlaybackStatusRequest& a, PlaybackStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackStatusRequest& from) {
    PlaybackStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackStatusRequest";
  }
  protected:
  explicit PlaybackStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackStatus) */ {
 public:
  inline PlaybackStatus() : PlaybackStatus(nullptr) {}
  ~PlaybackStatus() override;
  explicit PROTOBUF_CONSTEXPR PlaybackStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackStatus(const PlaybackStatus& from);
  PlaybackStatus(PlaybackStatus&& from) noexcept
    : PlaybackStatus() {
    *this = ::std::move(from);
  }

  inline PlaybackStatus& operator=(const PlaybackStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackStatus& operator=(PlaybackStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackStatus* internal_default_instance() {
    return reinterpret_cast<const PlaybackStatus*>(
               &_PlaybackStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlaybackStatus& a, PlaybackStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackStatus& from) {
    PlaybackStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackStatus";
  }
  protected:
  explicit PlaybackStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kTaskStatusFieldNumber = 2,
    kReplayPercentFieldNumber = 3,
    kCurrentReplayRateFieldNumber = 4,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
  void clear_taskstatus();
  ::com::htsc::mdc::insight::model::EPlaybackTaskStatus taskstatus() const;
  void set_taskstatus(::com::htsc::mdc::insight::model::EPlaybackTaskStatus value);
  private:
  ::com::htsc::mdc::insight::model::EPlaybackTaskStatus _internal_taskstatus() const;
  void _internal_set_taskstatus(::com::htsc::mdc::insight::model::EPlaybackTaskStatus value);
  public:

  // int32 replayPercent = 3;
  void clear_replaypercent();
  int32_t replaypercent() const;
  void set_replaypercent(int32_t value);
  private:
  int32_t _internal_replaypercent() const;
  void _internal_set_replaypercent(int32_t value);
  public:

  // int32 currentReplayRate = 4;
  void clear_currentreplayrate();
  int32_t currentreplayrate() const;
  void set_currentreplayrate(int32_t value);
  private:
  int32_t _internal_currentreplayrate() const;
  void _internal_set_currentreplayrate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
    int taskstatus_;
    int32_t replaypercent_;
    int32_t currentreplayrate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// -------------------------------------------------------------------

class PlaybackPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.PlaybackPayload) */ {
 public:
  inline PlaybackPayload() : PlaybackPayload(nullptr) {}
  ~PlaybackPayload() override;
  explicit PROTOBUF_CONSTEXPR PlaybackPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackPayload(const PlaybackPayload& from);
  PlaybackPayload(PlaybackPayload&& from) noexcept
    : PlaybackPayload() {
    *this = ::std::move(from);
  }

  inline PlaybackPayload& operator=(const PlaybackPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackPayload& operator=(PlaybackPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackPayload* internal_default_instance() {
    return reinterpret_cast<const PlaybackPayload*>(
               &_PlaybackPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlaybackPayload& a, PlaybackPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackPayload& from) {
    PlaybackPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.PlaybackPayload";
  }
  protected:
  explicit PlaybackPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kMarketDataStreamFieldNumber = 2,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
  bool has_marketdatastream() const;
  private:
  bool _internal_has_marketdatastream() const;
  public:
  void clear_marketdatastream();
  const ::com::htsc::mdc::insight::model::MarketDataStream& marketdatastream() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MarketDataStream* release_marketdatastream();
  ::com::htsc::mdc::insight::model::MarketDataStream* mutable_marketdatastream();
  void set_allocated_marketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream);
  private:
  const ::com::htsc::mdc::insight::model::MarketDataStream& _internal_marketdatastream() const;
  ::com::htsc::mdc::insight::model::MarketDataStream* _internal_mutable_marketdatastream();
  public:
  void unsafe_arena_set_allocated_marketdatastream(
      ::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream);
  ::com::htsc::mdc::insight::model::MarketDataStream* unsafe_arena_release_marketdatastream();

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.PlaybackPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
    ::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDPlayback_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlaybackRequest

// string taskId = 1;
inline void PlaybackRequest::clear_taskid() {
  _impl_.taskid_.ClearToEmpty();
}
inline const std::string& PlaybackRequest::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackRequest::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.taskid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
}
inline std::string* PlaybackRequest::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
  return _s;
}
inline const std::string& PlaybackRequest::_internal_taskid() const {
  return _impl_.taskid_.Get();
}
inline void PlaybackRequest::_internal_set_taskid(const std::string& value) {
  
  _impl_.taskid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackRequest::_internal_mutable_taskid() {
  
  return _impl_.taskid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
  return _impl_.taskid_.Release();
}
inline void PlaybackRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  _impl_.taskid_.SetAllocated(taskid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.taskid_.IsDefault()) {
    _impl_.taskid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackRequest.taskId)
}

// repeated string htscSecurityIDs = 2;
inline int PlaybackRequest::_internal_htscsecurityids_size() const {
  return _impl_.htscsecurityids_.size();
}
inline int PlaybackRequest::htscsecurityids_size() const {
  return _internal_htscsecurityids_size();
}
inline void PlaybackRequest::clear_htscsecurityids() {
  _impl_.htscsecurityids_.Clear();
}
inline std::string* PlaybackRequest::add_htscsecurityids() {
  std::string* _s = _internal_add_htscsecurityids();
  // @@protoc_insertion_point(field_add_mutable:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return _s;
}
inline const std::string& PlaybackRequest::_internal_htscsecurityids(int index) const {
  return _impl_.htscsecurityids_.Get(index);
}
inline const std::string& PlaybackRequest::htscsecurityids(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return _internal_htscsecurityids(index);
}
inline std::string* PlaybackRequest::mutable_htscsecurityids(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return _impl_.htscsecurityids_.Mutable(index);
}
inline void PlaybackRequest::set_htscsecurityids(int index, const std::string& value) {
  _impl_.htscsecurityids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::set_htscsecurityids(int index, std::string&& value) {
  _impl_.htscsecurityids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::set_htscsecurityids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.htscsecurityids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::set_htscsecurityids(int index, const char* value, size_t size) {
  _impl_.htscsecurityids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline std::string* PlaybackRequest::_internal_add_htscsecurityids() {
  return _impl_.htscsecurityids_.Add();
}
inline void PlaybackRequest::add_htscsecurityids(const std::string& value) {
  _impl_.htscsecurityids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::add_htscsecurityids(std::string&& value) {
  _impl_.htscsecurityids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::add_htscsecurityids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.htscsecurityids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline void PlaybackRequest::add_htscsecurityids(const char* value, size_t size) {
  _impl_.htscsecurityids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlaybackRequest::htscsecurityids() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return _impl_.htscsecurityids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlaybackRequest::mutable_htscsecurityids() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.PlaybackRequest.htscSecurityIDs)
  return &_impl_.htscsecurityids_;
}

// repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 3;
inline int PlaybackRequest::_internal_securitysourcetype_size() const {
  return _impl_.securitysourcetype_.size();
}
inline int PlaybackRequest::securitysourcetype_size() const {
  return _internal_securitysourcetype_size();
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* PlaybackRequest::mutable_securitysourcetype(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return _impl_.securitysourcetype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >*
PlaybackRequest::mutable_securitysourcetype() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return &_impl_.securitysourcetype_;
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& PlaybackRequest::_internal_securitysourcetype(int index) const {
  return _impl_.securitysourcetype_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& PlaybackRequest::securitysourcetype(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return _internal_securitysourcetype(index);
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* PlaybackRequest::_internal_add_securitysourcetype() {
  return _impl_.securitysourcetype_.Add();
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* PlaybackRequest::add_securitysourcetype() {
  ::com::htsc::mdc::insight::model::SecuritySourceType* _add = _internal_add_securitysourcetype();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >&
PlaybackRequest::securitysourcetype() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.PlaybackRequest.securitySourceType)
  return _impl_.securitysourcetype_;
}

// string startTime = 4;
inline void PlaybackRequest::clear_starttime() {
  _impl_.starttime_.ClearToEmpty();
}
inline const std::string& PlaybackRequest::starttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
  return _internal_starttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackRequest::set_starttime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
}
inline std::string* PlaybackRequest::mutable_starttime() {
  std::string* _s = _internal_mutable_starttime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
  return _s;
}
inline const std::string& PlaybackRequest::_internal_starttime() const {
  return _impl_.starttime_.Get();
}
inline void PlaybackRequest::_internal_set_starttime(const std::string& value) {
  
  _impl_.starttime_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackRequest::_internal_mutable_starttime() {
  
  return _impl_.starttime_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackRequest::release_starttime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
  return _impl_.starttime_.Release();
}
inline void PlaybackRequest::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  _impl_.starttime_.SetAllocated(starttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starttime_.IsDefault()) {
    _impl_.starttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackRequest.startTime)
}

// string stopTime = 5;
inline void PlaybackRequest::clear_stoptime() {
  _impl_.stoptime_.ClearToEmpty();
}
inline const std::string& PlaybackRequest::stoptime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
  return _internal_stoptime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackRequest::set_stoptime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stoptime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
}
inline std::string* PlaybackRequest::mutable_stoptime() {
  std::string* _s = _internal_mutable_stoptime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
  return _s;
}
inline const std::string& PlaybackRequest::_internal_stoptime() const {
  return _impl_.stoptime_.Get();
}
inline void PlaybackRequest::_internal_set_stoptime(const std::string& value) {
  
  _impl_.stoptime_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackRequest::_internal_mutable_stoptime() {
  
  return _impl_.stoptime_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackRequest::release_stoptime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
  return _impl_.stoptime_.Release();
}
inline void PlaybackRequest::set_allocated_stoptime(std::string* stoptime) {
  if (stoptime != nullptr) {
    
  } else {
    
  }
  _impl_.stoptime_.SetAllocated(stoptime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stoptime_.IsDefault()) {
    _impl_.stoptime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackRequest.stopTime)
}

// .com.htsc.mdc.insight.model.EMarketDataType replayDataType = 6;
inline void PlaybackRequest::clear_replaydatatype() {
  _impl_.replaydatatype_ = 0;
}
inline ::com::htsc::mdc::insight::model::EMarketDataType PlaybackRequest::_internal_replaydatatype() const {
  return static_cast< ::com::htsc::mdc::insight::model::EMarketDataType >(_impl_.replaydatatype_);
}
inline ::com::htsc::mdc::insight::model::EMarketDataType PlaybackRequest::replaydatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.replayDataType)
  return _internal_replaydatatype();
}
inline void PlaybackRequest::_internal_set_replaydatatype(::com::htsc::mdc::insight::model::EMarketDataType value) {
  
  _impl_.replaydatatype_ = value;
}
inline void PlaybackRequest::set_replaydatatype(::com::htsc::mdc::insight::model::EMarketDataType value) {
  _internal_set_replaydatatype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.replayDataType)
}

// int32 replayRate = 7;
inline void PlaybackRequest::clear_replayrate() {
  _impl_.replayrate_ = 0;
}
inline int32_t PlaybackRequest::_internal_replayrate() const {
  return _impl_.replayrate_;
}
inline int32_t PlaybackRequest::replayrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.replayRate)
  return _internal_replayrate();
}
inline void PlaybackRequest::_internal_set_replayrate(int32_t value) {
  
  _impl_.replayrate_ = value;
}
inline void PlaybackRequest::set_replayrate(int32_t value) {
  _internal_set_replayrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.replayRate)
}

// .com.htsc.mdc.insight.model.EPlaybackExrightsType exrightsType = 8;
inline void PlaybackRequest::clear_exrightstype() {
  _impl_.exrightstype_ = 0;
}
inline ::com::htsc::mdc::insight::model::EPlaybackExrightsType PlaybackRequest::_internal_exrightstype() const {
  return static_cast< ::com::htsc::mdc::insight::model::EPlaybackExrightsType >(_impl_.exrightstype_);
}
inline ::com::htsc::mdc::insight::model::EPlaybackExrightsType PlaybackRequest::exrightstype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.exrightsType)
  return _internal_exrightstype();
}
inline void PlaybackRequest::_internal_set_exrightstype(::com::htsc::mdc::insight::model::EPlaybackExrightsType value) {
  
  _impl_.exrightstype_ = value;
}
inline void PlaybackRequest::set_exrightstype(::com::htsc::mdc::insight::model::EPlaybackExrightsType value) {
  _internal_set_exrightstype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.exrightsType)
}

// bool isNeedInitialData = 9;
inline void PlaybackRequest::clear_isneedinitialdata() {
  _impl_.isneedinitialdata_ = false;
}
inline bool PlaybackRequest::_internal_isneedinitialdata() const {
  return _impl_.isneedinitialdata_;
}
inline bool PlaybackRequest::isneedinitialdata() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.isNeedInitialData)
  return _internal_isneedinitialdata();
}
inline void PlaybackRequest::_internal_set_isneedinitialdata(bool value) {
  
  _impl_.isneedinitialdata_ = value;
}
inline void PlaybackRequest::set_isneedinitialdata(bool value) {
  _internal_set_isneedinitialdata(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.isNeedInitialData)
}

// string initialDataStartTime = 10;
inline void PlaybackRequest::clear_initialdatastarttime() {
  _impl_.initialdatastarttime_.ClearToEmpty();
}
inline const std::string& PlaybackRequest::initialdatastarttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
  return _internal_initialdatastarttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackRequest::set_initialdatastarttime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.initialdatastarttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
}
inline std::string* PlaybackRequest::mutable_initialdatastarttime() {
  std::string* _s = _internal_mutable_initialdatastarttime();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
  return _s;
}
inline const std::string& PlaybackRequest::_internal_initialdatastarttime() const {
  return _impl_.initialdatastarttime_.Get();
}
inline void PlaybackRequest::_internal_set_initialdatastarttime(const std::string& value) {
  
  _impl_.initialdatastarttime_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackRequest::_internal_mutable_initialdatastarttime() {
  
  return _impl_.initialdatastarttime_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackRequest::release_initialdatastarttime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
  return _impl_.initialdatastarttime_.Release();
}
inline void PlaybackRequest::set_allocated_initialdatastarttime(std::string* initialdatastarttime) {
  if (initialdatastarttime != nullptr) {
    
  } else {
    
  }
  _impl_.initialdatastarttime_.SetAllocated(initialdatastarttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.initialdatastarttime_.IsDefault()) {
    _impl_.initialdatastarttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackRequest.initialDataStartTime)
}

// int32 replayFuncType = 11;
inline void PlaybackRequest::clear_replayfunctype() {
  _impl_.replayfunctype_ = 0;
}
inline int32_t PlaybackRequest::_internal_replayfunctype() const {
  return _impl_.replayfunctype_;
}
inline int32_t PlaybackRequest::replayfunctype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.replayFuncType)
  return _internal_replayfunctype();
}
inline void PlaybackRequest::_internal_set_replayfunctype(int32_t value) {
  
  _impl_.replayfunctype_ = value;
}
inline void PlaybackRequest::set_replayfunctype(int32_t value) {
  _internal_set_replayfunctype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.replayFuncType)
}

// int32 sortType = 12;
inline void PlaybackRequest::clear_sorttype() {
  _impl_.sorttype_ = 0;
}
inline int32_t PlaybackRequest::_internal_sorttype() const {
  return _impl_.sorttype_;
}
inline int32_t PlaybackRequest::sorttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackRequest.sortType)
  return _internal_sorttype();
}
inline void PlaybackRequest::_internal_set_sorttype(int32_t value) {
  
  _impl_.sorttype_ = value;
}
inline void PlaybackRequest::set_sorttype(int32_t value) {
  _internal_set_sorttype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackRequest.sortType)
}

// -------------------------------------------------------------------

// PlaybackResponse

// string taskId = 1;
inline void PlaybackResponse::clear_taskid() {
  _impl_.taskid_.ClearToEmpty();
}
inline const std::string& PlaybackResponse::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackResponse::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.taskid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
}
inline std::string* PlaybackResponse::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
  return _s;
}
inline const std::string& PlaybackResponse::_internal_taskid() const {
  return _impl_.taskid_.Get();
}
inline void PlaybackResponse::_internal_set_taskid(const std::string& value) {
  
  _impl_.taskid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackResponse::_internal_mutable_taskid() {
  
  return _impl_.taskid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackResponse::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
  return _impl_.taskid_.Release();
}
inline void PlaybackResponse::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  _impl_.taskid_.SetAllocated(taskid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.taskid_.IsDefault()) {
    _impl_.taskid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackResponse.taskId)
}

// bool isSuccess = 2;
inline void PlaybackResponse::clear_issuccess() {
  _impl_.issuccess_ = false;
}
inline bool PlaybackResponse::_internal_issuccess() const {
  return _impl_.issuccess_;
}
inline bool PlaybackResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackResponse.isSuccess)
  return _internal_issuccess();
}
inline void PlaybackResponse::_internal_set_issuccess(bool value) {
  
  _impl_.issuccess_ = value;
}
inline void PlaybackResponse::set_issuccess(bool value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
inline bool PlaybackResponse::_internal_has_errorcontext() const {
  return this != internal_default_instance() && _impl_.errorcontext_ != nullptr;
}
inline bool PlaybackResponse::has_errorcontext() const {
  return _internal_has_errorcontext();
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& PlaybackResponse::_internal_errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = _impl_.errorcontext_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext&>(
      ::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& PlaybackResponse::errorcontext() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
  return _internal_errorcontext();
}
inline void PlaybackResponse::unsafe_arena_set_allocated_errorcontext(
    ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.errorcontext_);
  }
  _impl_.errorcontext_ = errorcontext;
  if (errorcontext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackResponse::release_errorcontext() {
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.errorcontext_;
  _impl_.errorcontext_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackResponse::unsafe_arena_release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.errorcontext_;
  _impl_.errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackResponse::_internal_mutable_errorcontext() {
  
  if (_impl_.errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaForAllocation());
    _impl_.errorcontext_ = p;
  }
  return _impl_.errorcontext_;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackResponse::mutable_errorcontext() {
  ::com::htsc::mdc::insight::model::InsightErrorContext* _msg = _internal_mutable_errorcontext();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
  return _msg;
}
inline void PlaybackResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext));
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackResponse.errorContext)
}

// -------------------------------------------------------------------

// PlaybackControlRequest

// string taskId = 1;
inline void PlaybackControlRequest::clear_taskid() {
  _impl_.taskid_.ClearToEmpty();
}
inline const std::string& PlaybackControlRequest::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackControlRequest::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.taskid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
}
inline std::string* PlaybackControlRequest::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
  return _s;
}
inline const std::string& PlaybackControlRequest::_internal_taskid() const {
  return _impl_.taskid_.Get();
}
inline void PlaybackControlRequest::_internal_set_taskid(const std::string& value) {
  
  _impl_.taskid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackControlRequest::_internal_mutable_taskid() {
  
  return _impl_.taskid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackControlRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
  return _impl_.taskid_.Release();
}
inline void PlaybackControlRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  _impl_.taskid_.SetAllocated(taskid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.taskid_.IsDefault()) {
    _impl_.taskid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackControlRequest.taskId)
}

// .com.htsc.mdc.insight.model.EPlaybackTaskControlType controlType = 2;
inline void PlaybackControlRequest::clear_controltype() {
  _impl_.controltype_ = 0;
}
inline ::com::htsc::mdc::insight::model::EPlaybackTaskControlType PlaybackControlRequest::_internal_controltype() const {
  return static_cast< ::com::htsc::mdc::insight::model::EPlaybackTaskControlType >(_impl_.controltype_);
}
inline ::com::htsc::mdc::insight::model::EPlaybackTaskControlType PlaybackControlRequest::controltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlRequest.controlType)
  return _internal_controltype();
}
inline void PlaybackControlRequest::_internal_set_controltype(::com::htsc::mdc::insight::model::EPlaybackTaskControlType value) {
  
  _impl_.controltype_ = value;
}
inline void PlaybackControlRequest::set_controltype(::com::htsc::mdc::insight::model::EPlaybackTaskControlType value) {
  _internal_set_controltype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlRequest.controlType)
}

// int32 replayRate = 3;
inline void PlaybackControlRequest::clear_replayrate() {
  _impl_.replayrate_ = 0;
}
inline int32_t PlaybackControlRequest::_internal_replayrate() const {
  return _impl_.replayrate_;
}
inline int32_t PlaybackControlRequest::replayrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlRequest.replayRate)
  return _internal_replayrate();
}
inline void PlaybackControlRequest::_internal_set_replayrate(int32_t value) {
  
  _impl_.replayrate_ = value;
}
inline void PlaybackControlRequest::set_replayrate(int32_t value) {
  _internal_set_replayrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlRequest.replayRate)
}

// -------------------------------------------------------------------

// PlaybackControlResponse

// string taskId = 1;
inline void PlaybackControlResponse::clear_taskid() {
  _impl_.taskid_.ClearToEmpty();
}
inline const std::string& PlaybackControlResponse::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackControlResponse::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.taskid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
}
inline std::string* PlaybackControlResponse::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
  return _s;
}
inline const std::string& PlaybackControlResponse::_internal_taskid() const {
  return _impl_.taskid_.Get();
}
inline void PlaybackControlResponse::_internal_set_taskid(const std::string& value) {
  
  _impl_.taskid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackControlResponse::_internal_mutable_taskid() {
  
  return _impl_.taskid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackControlResponse::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
  return _impl_.taskid_.Release();
}
inline void PlaybackControlResponse::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  _impl_.taskid_.SetAllocated(taskid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.taskid_.IsDefault()) {
    _impl_.taskid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackControlResponse.taskId)
}

// bool isSuccess = 2;
inline void PlaybackControlResponse::clear_issuccess() {
  _impl_.issuccess_ = false;
}
inline bool PlaybackControlResponse::_internal_issuccess() const {
  return _impl_.issuccess_;
}
inline bool PlaybackControlResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlResponse.isSuccess)
  return _internal_issuccess();
}
inline void PlaybackControlResponse::_internal_set_issuccess(bool value) {
  
  _impl_.issuccess_ = value;
}
inline void PlaybackControlResponse::set_issuccess(bool value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
inline bool PlaybackControlResponse::_internal_has_errorcontext() const {
  return this != internal_default_instance() && _impl_.errorcontext_ != nullptr;
}
inline bool PlaybackControlResponse::has_errorcontext() const {
  return _internal_has_errorcontext();
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& PlaybackControlResponse::_internal_errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = _impl_.errorcontext_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext&>(
      ::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& PlaybackControlResponse::errorcontext() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
  return _internal_errorcontext();
}
inline void PlaybackControlResponse::unsafe_arena_set_allocated_errorcontext(
    ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.errorcontext_);
  }
  _impl_.errorcontext_ = errorcontext;
  if (errorcontext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackControlResponse::release_errorcontext() {
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.errorcontext_;
  _impl_.errorcontext_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackControlResponse::unsafe_arena_release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.errorcontext_;
  _impl_.errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackControlResponse::_internal_mutable_errorcontext() {
  
  if (_impl_.errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaForAllocation());
    _impl_.errorcontext_ = p;
  }
  return _impl_.errorcontext_;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* PlaybackControlResponse::mutable_errorcontext() {
  ::com::htsc::mdc::insight::model::InsightErrorContext* _msg = _internal_mutable_errorcontext();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
  return _msg;
}
inline void PlaybackControlResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext));
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackControlResponse.errorContext)
}

// int32 currentReplayRate = 4;
inline void PlaybackControlResponse::clear_currentreplayrate() {
  _impl_.currentreplayrate_ = 0;
}
inline int32_t PlaybackControlResponse::_internal_currentreplayrate() const {
  return _impl_.currentreplayrate_;
}
inline int32_t PlaybackControlResponse::currentreplayrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackControlResponse.currentReplayRate)
  return _internal_currentreplayrate();
}
inline void PlaybackControlResponse::_internal_set_currentreplayrate(int32_t value) {
  
  _impl_.currentreplayrate_ = value;
}
inline void PlaybackControlResponse::set_currentreplayrate(int32_t value) {
  _internal_set_currentreplayrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackControlResponse.currentReplayRate)
}

// -------------------------------------------------------------------

// PlaybackStatusRequest

// string taskId = 1;
inline void PlaybackStatusRequest::clear_taskid() {
  _impl_.taskid_.ClearToEmpty();
}
inline const std::string& PlaybackStatusRequest::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackStatusRequest::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.taskid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
}
inline std::string* PlaybackStatusRequest::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
  return _s;
}
inline const std::string& PlaybackStatusRequest::_internal_taskid() const {
  return _impl_.taskid_.Get();
}
inline void PlaybackStatusRequest::_internal_set_taskid(const std::string& value) {
  
  _impl_.taskid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackStatusRequest::_internal_mutable_taskid() {
  
  return _impl_.taskid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackStatusRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
  return _impl_.taskid_.Release();
}
inline void PlaybackStatusRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  _impl_.taskid_.SetAllocated(taskid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.taskid_.IsDefault()) {
    _impl_.taskid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackStatusRequest.taskId)
}

// -------------------------------------------------------------------

// PlaybackStatus

// string taskId = 1;
inline void PlaybackStatus::clear_taskid() {
  _impl_.taskid_.ClearToEmpty();
}
inline const std::string& PlaybackStatus::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackStatus::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.taskid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
}
inline std::string* PlaybackStatus::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
  return _s;
}
inline const std::string& PlaybackStatus::_internal_taskid() const {
  return _impl_.taskid_.Get();
}
inline void PlaybackStatus::_internal_set_taskid(const std::string& value) {
  
  _impl_.taskid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackStatus::_internal_mutable_taskid() {
  
  return _impl_.taskid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackStatus::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
  return _impl_.taskid_.Release();
}
inline void PlaybackStatus::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  _impl_.taskid_.SetAllocated(taskid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.taskid_.IsDefault()) {
    _impl_.taskid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackStatus.taskId)
}

// .com.htsc.mdc.insight.model.EPlaybackTaskStatus taskStatus = 2;
inline void PlaybackStatus::clear_taskstatus() {
  _impl_.taskstatus_ = 0;
}
inline ::com::htsc::mdc::insight::model::EPlaybackTaskStatus PlaybackStatus::_internal_taskstatus() const {
  return static_cast< ::com::htsc::mdc::insight::model::EPlaybackTaskStatus >(_impl_.taskstatus_);
}
inline ::com::htsc::mdc::insight::model::EPlaybackTaskStatus PlaybackStatus::taskstatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatus.taskStatus)
  return _internal_taskstatus();
}
inline void PlaybackStatus::_internal_set_taskstatus(::com::htsc::mdc::insight::model::EPlaybackTaskStatus value) {
  
  _impl_.taskstatus_ = value;
}
inline void PlaybackStatus::set_taskstatus(::com::htsc::mdc::insight::model::EPlaybackTaskStatus value) {
  _internal_set_taskstatus(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatus.taskStatus)
}

// int32 replayPercent = 3;
inline void PlaybackStatus::clear_replaypercent() {
  _impl_.replaypercent_ = 0;
}
inline int32_t PlaybackStatus::_internal_replaypercent() const {
  return _impl_.replaypercent_;
}
inline int32_t PlaybackStatus::replaypercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatus.replayPercent)
  return _internal_replaypercent();
}
inline void PlaybackStatus::_internal_set_replaypercent(int32_t value) {
  
  _impl_.replaypercent_ = value;
}
inline void PlaybackStatus::set_replaypercent(int32_t value) {
  _internal_set_replaypercent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatus.replayPercent)
}

// int32 currentReplayRate = 4;
inline void PlaybackStatus::clear_currentreplayrate() {
  _impl_.currentreplayrate_ = 0;
}
inline int32_t PlaybackStatus::_internal_currentreplayrate() const {
  return _impl_.currentreplayrate_;
}
inline int32_t PlaybackStatus::currentreplayrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackStatus.currentReplayRate)
  return _internal_currentreplayrate();
}
inline void PlaybackStatus::_internal_set_currentreplayrate(int32_t value) {
  
  _impl_.currentreplayrate_ = value;
}
inline void PlaybackStatus::set_currentreplayrate(int32_t value) {
  _internal_set_currentreplayrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackStatus.currentReplayRate)
}

// -------------------------------------------------------------------

// PlaybackPayload

// string taskId = 1;
inline void PlaybackPayload::clear_taskid() {
  _impl_.taskid_.ClearToEmpty();
}
inline const std::string& PlaybackPayload::taskid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackPayload::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.taskid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
}
inline std::string* PlaybackPayload::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
  return _s;
}
inline const std::string& PlaybackPayload::_internal_taskid() const {
  return _impl_.taskid_.Get();
}
inline void PlaybackPayload::_internal_set_taskid(const std::string& value) {
  
  _impl_.taskid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackPayload::_internal_mutable_taskid() {
  
  return _impl_.taskid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlaybackPayload::release_taskid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
  return _impl_.taskid_.Release();
}
inline void PlaybackPayload::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  _impl_.taskid_.SetAllocated(taskid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.taskid_.IsDefault()) {
    _impl_.taskid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackPayload.taskId)
}

// .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 2;
inline bool PlaybackPayload::_internal_has_marketdatastream() const {
  return this != internal_default_instance() && _impl_.marketdatastream_ != nullptr;
}
inline bool PlaybackPayload::has_marketdatastream() const {
  return _internal_has_marketdatastream();
}
inline const ::com::htsc::mdc::insight::model::MarketDataStream& PlaybackPayload::_internal_marketdatastream() const {
  const ::com::htsc::mdc::insight::model::MarketDataStream* p = _impl_.marketdatastream_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MarketDataStream&>(
      ::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MarketDataStream& PlaybackPayload::marketdatastream() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
  return _internal_marketdatastream();
}
inline void PlaybackPayload::unsafe_arena_set_allocated_marketdatastream(
    ::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.marketdatastream_);
  }
  _impl_.marketdatastream_ = marketdatastream;
  if (marketdatastream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* PlaybackPayload::release_marketdatastream() {
  
  ::com::htsc::mdc::insight::model::MarketDataStream* temp = _impl_.marketdatastream_;
  _impl_.marketdatastream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* PlaybackPayload::unsafe_arena_release_marketdatastream() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
  
  ::com::htsc::mdc::insight::model::MarketDataStream* temp = _impl_.marketdatastream_;
  _impl_.marketdatastream_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* PlaybackPayload::_internal_mutable_marketdatastream() {
  
  if (_impl_.marketdatastream_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketDataStream>(GetArenaForAllocation());
    _impl_.marketdatastream_ = p;
  }
  return _impl_.marketdatastream_;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* PlaybackPayload::mutable_marketdatastream() {
  ::com::htsc::mdc::insight::model::MarketDataStream* _msg = _internal_mutable_marketdatastream();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
  return _msg;
}
inline void PlaybackPayload::set_allocated_marketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.marketdatastream_);
  }
  if (marketdatastream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdatastream));
    if (message_arena != submessage_arena) {
      marketdatastream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketdatastream, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.marketdatastream_ = marketdatastream;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.PlaybackPayload.marketDataStream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::EPlaybackExrightsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::EPlaybackExrightsType>() {
  return ::com::htsc::mdc::insight::model::EPlaybackExrightsType_descriptor();
}
template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::EPlaybackTaskControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::EPlaybackTaskControlType>() {
  return ::com::htsc::mdc::insight::model::EPlaybackTaskControlType_descriptor();
}
template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::EPlaybackTaskStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::EPlaybackTaskStatus>() {
  return ::com::htsc::mdc::insight::model::EPlaybackTaskStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDPlayback_2eproto
