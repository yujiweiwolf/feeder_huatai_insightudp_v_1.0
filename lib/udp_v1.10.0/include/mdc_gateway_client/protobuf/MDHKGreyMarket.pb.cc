// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDHKGreyMarket.proto

#include "MDHKGreyMarket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDHKGreyMarket_MarketEntry::MDHKGreyMarket_MarketEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buyorderentries_)*/{}
  , /*decltype(_impl_.sellorderentries_)*/{}
  , /*decltype(_impl_.tradeentries_)*/{}
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.validflag_)*/false
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.numtrades_)*/int64_t{0}
  , /*decltype(_impl_.totalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.lastpx_)*/int64_t{0}
  , /*decltype(_impl_.openpx_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.highpx_)*/int64_t{0}
  , /*decltype(_impl_.lowpx_)*/int64_t{0}
  , /*decltype(_impl_.exchangedatetime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDHKGreyMarket_MarketEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDHKGreyMarket_MarketEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDHKGreyMarket_MarketEntryDefaultTypeInternal() {}
  union {
    MDHKGreyMarket_MarketEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDHKGreyMarket_MarketEntryDefaultTypeInternal _MDHKGreyMarket_MarketEntry_default_instance_;
PROTOBUF_CONSTEXPR MDHKGreyMarket_OrderEntry::MDHKGreyMarket_OrderEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orderprice_)*/int64_t{0}
  , /*decltype(_impl_.orderqty_)*/int64_t{0}
  , /*decltype(_impl_.numorders_)*/int64_t{0}
  , /*decltype(_impl_.orderlevel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDHKGreyMarket_OrderEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDHKGreyMarket_OrderEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDHKGreyMarket_OrderEntryDefaultTypeInternal() {}
  union {
    MDHKGreyMarket_OrderEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDHKGreyMarket_OrderEntryDefaultTypeInternal _MDHKGreyMarket_OrderEntry_default_instance_;
PROTOBUF_CONSTEXPR MDHKGreyMarket_TradeEntry::MDHKGreyMarket_TradeEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tradeprice_)*/int64_t{0}
  , /*decltype(_impl_.tradeqty_)*/int64_t{0}
  , /*decltype(_impl_.tradetime_)*/int64_t{0}
  , /*decltype(_impl_.tradelevel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDHKGreyMarket_TradeEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDHKGreyMarket_TradeEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDHKGreyMarket_TradeEntryDefaultTypeInternal() {}
  union {
    MDHKGreyMarket_TradeEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDHKGreyMarket_TradeEntryDefaultTypeInternal _MDHKGreyMarket_TradeEntry_default_instance_;
PROTOBUF_CONSTEXPR MDHKGreyMarket::MDHKGreyMarket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.marketentries_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.applseqnum_)*/int64_t{0}
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDHKGreyMarketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDHKGreyMarketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDHKGreyMarketDefaultTypeInternal() {}
  union {
    MDHKGreyMarket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDHKGreyMarketDefaultTypeInternal _MDHKGreyMarket_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDHKGreyMarket_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDHKGreyMarket_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDHKGreyMarket_2eproto = nullptr;

const uint32_t TableStruct_MDHKGreyMarket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.validflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.buyorderentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.sellorderentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.tradeentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry, _impl_.exchangedatetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, _impl_.orderlevel_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, _impl_.orderprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, _impl_.orderqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry, _impl_.numorders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, _impl_.tradelevel_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, _impl_.tradeprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, _impl_.tradeqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry, _impl_.tradetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.applseqnum_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.marketentries_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDHKGreyMarket, _impl_.datamultiplepowerof10_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry)},
  { 21, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry)},
  { 31, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry)},
  { 41, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDHKGreyMarket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDHKGreyMarket_MarketEntry_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDHKGreyMarket_OrderEntry_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDHKGreyMarket_TradeEntry_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDHKGreyMarket_default_instance_._instance,
};

const char descriptor_table_protodef_MDHKGreyMarket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024MDHKGreyMarket.proto\022\032com.htsc.mdc.ins"
  "ight.model\032\023ESecurityType.proto\032\027ESecuri"
  "tyIDSource.proto\"\225\010\n\016MDHKGreyMarket\022\026\n\016H"
  "TSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006M"
  "DTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\030\n\020Tr"
  "adingPhaseCode\030\005 \001(\t\022\?\n\020securityIDSource"
  "\030\006 \001(\0162%.com.htsc.mdc.model.ESecurityIDS"
  "ource\0227\n\014securityType\030\007 \001(\0162!.com.htsc.m"
  "dc.model.ESecurityType\022\022\n\nApplSeqNum\030\010 \001"
  "(\003\022M\n\rMarketEntries\030\t \003(\01326.com.htsc.mdc"
  ".insight.model.MDHKGreyMarket.MarketEntr"
  "y\022\035\n\025DataMultiplePowerOf10\030\n \001(\005\032\347\003\n\013Mar"
  "ketEntry\022\023\n\013ChannelType\030\001 \001(\005\022\021\n\tValidFl"
  "ag\030\002 \001(\010\022\022\n\nPreClosePx\030\003 \001(\003\022\021\n\tNumTrade"
  "s\030\004 \001(\003\022\030\n\020TotalVolumeTrade\030\005 \001(\003\022\027\n\017Tot"
  "alValueTrade\030\006 \001(\003\022\016\n\006LastPx\030\007 \001(\003\022\016\n\006Op"
  "enPx\030\010 \001(\003\022\017\n\007ClosePx\030\t \001(\003\022\016\n\006HighPx\030\n "
  "\001(\003\022\r\n\005LowPx\030\013 \001(\003\022N\n\017BuyOrderEntries\030\014 "
  "\003(\01325.com.htsc.mdc.insight.model.MDHKGre"
  "yMarket.OrderEntry\022O\n\020SellOrderEntries\030\r"
  " \003(\01325.com.htsc.mdc.insight.model.MDHKGr"
  "eyMarket.OrderEntry\022K\n\014TradeEntries\030\016 \003("
  "\01325.com.htsc.mdc.insight.model.MDHKGreyM"
  "arket.TradeEntry\022\030\n\020ExchangeDateTime\030\017 \001"
  "(\003\032Y\n\nOrderEntry\022\022\n\nOrderLevel\030\001 \001(\005\022\022\n\n"
  "OrderPrice\030\002 \001(\003\022\020\n\010OrderQty\030\003 \001(\003\022\021\n\tNu"
  "mOrders\030\004 \001(\003\032Y\n\nTradeEntry\022\022\n\nTradeLeve"
  "l\030\001 \001(\005\022\022\n\nTradePrice\030\002 \001(\003\022\020\n\010TradeQty\030"
  "\003 \001(\003\022\021\n\tTradeTime\030\004 \001(\003B7\n\032com.htsc.mdc"
  ".insight.modelB\024MDHKGreyMarketProtosH\001\240\001"
  "\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDHKGreyMarket_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDHKGreyMarket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDHKGreyMarket_2eproto = {
    false, false, 1209, descriptor_table_protodef_MDHKGreyMarket_2eproto,
    "MDHKGreyMarket.proto",
    &descriptor_table_MDHKGreyMarket_2eproto_once, descriptor_table_MDHKGreyMarket_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_MDHKGreyMarket_2eproto::offsets,
    file_level_metadata_MDHKGreyMarket_2eproto, file_level_enum_descriptors_MDHKGreyMarket_2eproto,
    file_level_service_descriptors_MDHKGreyMarket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDHKGreyMarket_2eproto_getter() {
  return &descriptor_table_MDHKGreyMarket_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDHKGreyMarket_2eproto(&descriptor_table_MDHKGreyMarket_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDHKGreyMarket_MarketEntry::_Internal {
 public:
};

MDHKGreyMarket_MarketEntry::MDHKGreyMarket_MarketEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
}
MDHKGreyMarket_MarketEntry::MDHKGreyMarket_MarketEntry(const MDHKGreyMarket_MarketEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDHKGreyMarket_MarketEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buyorderentries_){from._impl_.buyorderentries_}
    , decltype(_impl_.sellorderentries_){from._impl_.sellorderentries_}
    , decltype(_impl_.tradeentries_){from._impl_.tradeentries_}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.validflag_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.numtrades_){}
    , decltype(_impl_.totalvolumetrade_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.lastpx_){}
    , decltype(_impl_.openpx_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.highpx_){}
    , decltype(_impl_.lowpx_){}
    , decltype(_impl_.exchangedatetime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.channeltype_, &from._impl_.channeltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exchangedatetime_) -
    reinterpret_cast<char*>(&_impl_.channeltype_)) + sizeof(_impl_.exchangedatetime_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
}

inline void MDHKGreyMarket_MarketEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buyorderentries_){arena}
    , decltype(_impl_.sellorderentries_){arena}
    , decltype(_impl_.tradeentries_){arena}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.validflag_){false}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.numtrades_){int64_t{0}}
    , decltype(_impl_.totalvolumetrade_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.lastpx_){int64_t{0}}
    , decltype(_impl_.openpx_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.highpx_){int64_t{0}}
    , decltype(_impl_.lowpx_){int64_t{0}}
    , decltype(_impl_.exchangedatetime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MDHKGreyMarket_MarketEntry::~MDHKGreyMarket_MarketEntry() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDHKGreyMarket_MarketEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buyorderentries_.~RepeatedPtrField();
  _impl_.sellorderentries_.~RepeatedPtrField();
  _impl_.tradeentries_.~RepeatedPtrField();
}

void MDHKGreyMarket_MarketEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDHKGreyMarket_MarketEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buyorderentries_.Clear();
  _impl_.sellorderentries_.Clear();
  _impl_.tradeentries_.Clear();
  ::memset(&_impl_.channeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exchangedatetime_) -
      reinterpret_cast<char*>(&_impl_.channeltype_)) + sizeof(_impl_.exchangedatetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDHKGreyMarket_MarketEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ChannelType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channeltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ValidFlag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.validflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NumTrades = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastPx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenPx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighPx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowPx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buyorderentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sellorderentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tradeentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 ExchangeDateTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.exchangedatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDHKGreyMarket_MarketEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ChannelType = 1;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channeltype(), target);
  }

  // bool ValidFlag = 2;
  if (this->_internal_validflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_validflag(), target);
  }

  // int64 PreClosePx = 3;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_preclosepx(), target);
  }

  // int64 NumTrades = 4;
  if (this->_internal_numtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_numtrades(), target);
  }

  // int64 TotalVolumeTrade = 5;
  if (this->_internal_totalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 6;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_totalvaluetrade(), target);
  }

  // int64 LastPx = 7;
  if (this->_internal_lastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_lastpx(), target);
  }

  // int64 OpenPx = 8;
  if (this->_internal_openpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_openpx(), target);
  }

  // int64 ClosePx = 9;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_closepx(), target);
  }

  // int64 HighPx = 10;
  if (this->_internal_highpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_highpx(), target);
  }

  // int64 LowPx = 11;
  if (this->_internal_lowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_lowpx(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buyorderentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_buyorderentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sellorderentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_sellorderentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tradeentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_tradeentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 ExchangeDateTime = 15;
  if (this->_internal_exchangedatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_exchangedatetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  return target;
}

size_t MDHKGreyMarket_MarketEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry BuyOrderEntries = 12;
  total_size += 1UL * this->_internal_buyorderentries_size();
  for (const auto& msg : this->_impl_.buyorderentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry SellOrderEntries = 13;
  total_size += 1UL * this->_internal_sellorderentries_size();
  for (const auto& msg : this->_impl_.sellorderentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry TradeEntries = 14;
  total_size += 1UL * this->_internal_tradeentries_size();
  for (const auto& msg : this->_impl_.tradeentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ChannelType = 1;
  if (this->_internal_channeltype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channeltype());
  }

  // bool ValidFlag = 2;
  if (this->_internal_validflag() != 0) {
    total_size += 1 + 1;
  }

  // int64 PreClosePx = 3;
  if (this->_internal_preclosepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preclosepx());
  }

  // int64 NumTrades = 4;
  if (this->_internal_numtrades() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numtrades());
  }

  // int64 TotalVolumeTrade = 5;
  if (this->_internal_totalvolumetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvolumetrade());
  }

  // int64 TotalValueTrade = 6;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 LastPx = 7;
  if (this->_internal_lastpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpx());
  }

  // int64 OpenPx = 8;
  if (this->_internal_openpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openpx());
  }

  // int64 ClosePx = 9;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  // int64 HighPx = 10;
  if (this->_internal_highpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highpx());
  }

  // int64 LowPx = 11;
  if (this->_internal_lowpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowpx());
  }

  // int64 ExchangeDateTime = 15;
  if (this->_internal_exchangedatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_exchangedatetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDHKGreyMarket_MarketEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDHKGreyMarket_MarketEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDHKGreyMarket_MarketEntry::GetClassData() const { return &_class_data_; }


void MDHKGreyMarket_MarketEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDHKGreyMarket_MarketEntry*>(&to_msg);
  auto& from = static_cast<const MDHKGreyMarket_MarketEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buyorderentries_.MergeFrom(from._impl_.buyorderentries_);
  _this->_impl_.sellorderentries_.MergeFrom(from._impl_.sellorderentries_);
  _this->_impl_.tradeentries_.MergeFrom(from._impl_.tradeentries_);
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_validflag() != 0) {
    _this->_internal_set_validflag(from._internal_validflag());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_numtrades() != 0) {
    _this->_internal_set_numtrades(from._internal_numtrades());
  }
  if (from._internal_totalvolumetrade() != 0) {
    _this->_internal_set_totalvolumetrade(from._internal_totalvolumetrade());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_lastpx() != 0) {
    _this->_internal_set_lastpx(from._internal_lastpx());
  }
  if (from._internal_openpx() != 0) {
    _this->_internal_set_openpx(from._internal_openpx());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_highpx() != 0) {
    _this->_internal_set_highpx(from._internal_highpx());
  }
  if (from._internal_lowpx() != 0) {
    _this->_internal_set_lowpx(from._internal_lowpx());
  }
  if (from._internal_exchangedatetime() != 0) {
    _this->_internal_set_exchangedatetime(from._internal_exchangedatetime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDHKGreyMarket_MarketEntry::CopyFrom(const MDHKGreyMarket_MarketEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDHKGreyMarket_MarketEntry::IsInitialized() const {
  return true;
}

void MDHKGreyMarket_MarketEntry::InternalSwap(MDHKGreyMarket_MarketEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buyorderentries_.InternalSwap(&other->_impl_.buyorderentries_);
  _impl_.sellorderentries_.InternalSwap(&other->_impl_.sellorderentries_);
  _impl_.tradeentries_.InternalSwap(&other->_impl_.tradeentries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDHKGreyMarket_MarketEntry, _impl_.exchangedatetime_)
      + sizeof(MDHKGreyMarket_MarketEntry::_impl_.exchangedatetime_)
      - PROTOBUF_FIELD_OFFSET(MDHKGreyMarket_MarketEntry, _impl_.channeltype_)>(
          reinterpret_cast<char*>(&_impl_.channeltype_),
          reinterpret_cast<char*>(&other->_impl_.channeltype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDHKGreyMarket_MarketEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDHKGreyMarket_2eproto_getter, &descriptor_table_MDHKGreyMarket_2eproto_once,
      file_level_metadata_MDHKGreyMarket_2eproto[0]);
}

// ===================================================================

class MDHKGreyMarket_OrderEntry::_Internal {
 public:
};

MDHKGreyMarket_OrderEntry::MDHKGreyMarket_OrderEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
}
MDHKGreyMarket_OrderEntry::MDHKGreyMarket_OrderEntry(const MDHKGreyMarket_OrderEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDHKGreyMarket_OrderEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orderprice_){}
    , decltype(_impl_.orderqty_){}
    , decltype(_impl_.numorders_){}
    , decltype(_impl_.orderlevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.orderprice_, &from._impl_.orderprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.orderlevel_) -
    reinterpret_cast<char*>(&_impl_.orderprice_)) + sizeof(_impl_.orderlevel_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
}

inline void MDHKGreyMarket_OrderEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.orderprice_){int64_t{0}}
    , decltype(_impl_.orderqty_){int64_t{0}}
    , decltype(_impl_.numorders_){int64_t{0}}
    , decltype(_impl_.orderlevel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MDHKGreyMarket_OrderEntry::~MDHKGreyMarket_OrderEntry() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDHKGreyMarket_OrderEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MDHKGreyMarket_OrderEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDHKGreyMarket_OrderEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.orderprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.orderlevel_) -
      reinterpret_cast<char*>(&_impl_.orderprice_)) + sizeof(_impl_.orderlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDHKGreyMarket_OrderEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 OrderLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.orderlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OrderPrice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.orderprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OrderQty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.orderqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NumOrders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.numorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDHKGreyMarket_OrderEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 OrderLevel = 1;
  if (this->_internal_orderlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_orderlevel(), target);
  }

  // int64 OrderPrice = 2;
  if (this->_internal_orderprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_orderprice(), target);
  }

  // int64 OrderQty = 3;
  if (this->_internal_orderqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_orderqty(), target);
  }

  // int64 NumOrders = 4;
  if (this->_internal_numorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_numorders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  return target;
}

size_t MDHKGreyMarket_OrderEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 OrderPrice = 2;
  if (this->_internal_orderprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_orderprice());
  }

  // int64 OrderQty = 3;
  if (this->_internal_orderqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_orderqty());
  }

  // int64 NumOrders = 4;
  if (this->_internal_numorders() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numorders());
  }

  // int32 OrderLevel = 1;
  if (this->_internal_orderlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_orderlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDHKGreyMarket_OrderEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDHKGreyMarket_OrderEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDHKGreyMarket_OrderEntry::GetClassData() const { return &_class_data_; }


void MDHKGreyMarket_OrderEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDHKGreyMarket_OrderEntry*>(&to_msg);
  auto& from = static_cast<const MDHKGreyMarket_OrderEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_orderprice() != 0) {
    _this->_internal_set_orderprice(from._internal_orderprice());
  }
  if (from._internal_orderqty() != 0) {
    _this->_internal_set_orderqty(from._internal_orderqty());
  }
  if (from._internal_numorders() != 0) {
    _this->_internal_set_numorders(from._internal_numorders());
  }
  if (from._internal_orderlevel() != 0) {
    _this->_internal_set_orderlevel(from._internal_orderlevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDHKGreyMarket_OrderEntry::CopyFrom(const MDHKGreyMarket_OrderEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.OrderEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDHKGreyMarket_OrderEntry::IsInitialized() const {
  return true;
}

void MDHKGreyMarket_OrderEntry::InternalSwap(MDHKGreyMarket_OrderEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDHKGreyMarket_OrderEntry, _impl_.orderlevel_)
      + sizeof(MDHKGreyMarket_OrderEntry::_impl_.orderlevel_)
      - PROTOBUF_FIELD_OFFSET(MDHKGreyMarket_OrderEntry, _impl_.orderprice_)>(
          reinterpret_cast<char*>(&_impl_.orderprice_),
          reinterpret_cast<char*>(&other->_impl_.orderprice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDHKGreyMarket_OrderEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDHKGreyMarket_2eproto_getter, &descriptor_table_MDHKGreyMarket_2eproto_once,
      file_level_metadata_MDHKGreyMarket_2eproto[1]);
}

// ===================================================================

class MDHKGreyMarket_TradeEntry::_Internal {
 public:
};

MDHKGreyMarket_TradeEntry::MDHKGreyMarket_TradeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
}
MDHKGreyMarket_TradeEntry::MDHKGreyMarket_TradeEntry(const MDHKGreyMarket_TradeEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDHKGreyMarket_TradeEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tradeprice_){}
    , decltype(_impl_.tradeqty_){}
    , decltype(_impl_.tradetime_){}
    , decltype(_impl_.tradelevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tradeprice_, &from._impl_.tradeprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tradelevel_) -
    reinterpret_cast<char*>(&_impl_.tradeprice_)) + sizeof(_impl_.tradelevel_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
}

inline void MDHKGreyMarket_TradeEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tradeprice_){int64_t{0}}
    , decltype(_impl_.tradeqty_){int64_t{0}}
    , decltype(_impl_.tradetime_){int64_t{0}}
    , decltype(_impl_.tradelevel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MDHKGreyMarket_TradeEntry::~MDHKGreyMarket_TradeEntry() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDHKGreyMarket_TradeEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MDHKGreyMarket_TradeEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDHKGreyMarket_TradeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tradeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tradelevel_) -
      reinterpret_cast<char*>(&_impl_.tradeprice_)) + sizeof(_impl_.tradelevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDHKGreyMarket_TradeEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 TradeLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tradelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradePrice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tradeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradeQty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tradeqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradeTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tradetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDHKGreyMarket_TradeEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TradeLevel = 1;
  if (this->_internal_tradelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tradelevel(), target);
  }

  // int64 TradePrice = 2;
  if (this->_internal_tradeprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_tradeprice(), target);
  }

  // int64 TradeQty = 3;
  if (this->_internal_tradeqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_tradeqty(), target);
  }

  // int64 TradeTime = 4;
  if (this->_internal_tradetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_tradetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  return target;
}

size_t MDHKGreyMarket_TradeEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 TradePrice = 2;
  if (this->_internal_tradeprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradeprice());
  }

  // int64 TradeQty = 3;
  if (this->_internal_tradeqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradeqty());
  }

  // int64 TradeTime = 4;
  if (this->_internal_tradetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradetime());
  }

  // int32 TradeLevel = 1;
  if (this->_internal_tradelevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tradelevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDHKGreyMarket_TradeEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDHKGreyMarket_TradeEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDHKGreyMarket_TradeEntry::GetClassData() const { return &_class_data_; }


void MDHKGreyMarket_TradeEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDHKGreyMarket_TradeEntry*>(&to_msg);
  auto& from = static_cast<const MDHKGreyMarket_TradeEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tradeprice() != 0) {
    _this->_internal_set_tradeprice(from._internal_tradeprice());
  }
  if (from._internal_tradeqty() != 0) {
    _this->_internal_set_tradeqty(from._internal_tradeqty());
  }
  if (from._internal_tradetime() != 0) {
    _this->_internal_set_tradetime(from._internal_tradetime());
  }
  if (from._internal_tradelevel() != 0) {
    _this->_internal_set_tradelevel(from._internal_tradelevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDHKGreyMarket_TradeEntry::CopyFrom(const MDHKGreyMarket_TradeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket.TradeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDHKGreyMarket_TradeEntry::IsInitialized() const {
  return true;
}

void MDHKGreyMarket_TradeEntry::InternalSwap(MDHKGreyMarket_TradeEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDHKGreyMarket_TradeEntry, _impl_.tradelevel_)
      + sizeof(MDHKGreyMarket_TradeEntry::_impl_.tradelevel_)
      - PROTOBUF_FIELD_OFFSET(MDHKGreyMarket_TradeEntry, _impl_.tradeprice_)>(
          reinterpret_cast<char*>(&_impl_.tradeprice_),
          reinterpret_cast<char*>(&other->_impl_.tradeprice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDHKGreyMarket_TradeEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDHKGreyMarket_2eproto_getter, &descriptor_table_MDHKGreyMarket_2eproto_once,
      file_level_metadata_MDHKGreyMarket_2eproto[2]);
}

// ===================================================================

class MDHKGreyMarket::_Internal {
 public:
};

MDHKGreyMarket::MDHKGreyMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket)
}
MDHKGreyMarket::MDHKGreyMarket(const MDHKGreyMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDHKGreyMarket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.marketentries_){from._impl_.marketentries_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.applseqnum_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDHKGreyMarket)
}

inline void MDHKGreyMarket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.marketentries_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.applseqnum_){int64_t{0}}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDHKGreyMarket::~MDHKGreyMarket() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDHKGreyMarket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDHKGreyMarket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.marketentries_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
}

void MDHKGreyMarket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDHKGreyMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.marketentries_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDHKGreyMarket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 ApplSeqNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.applseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_marketentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDHKGreyMarket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDHKGreyMarket.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDHKGreyMarket.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int64 ApplSeqNum = 8;
  if (this->_internal_applseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_applseqnum(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_marketentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_marketentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDHKGreyMarket)
  return target;
}

size_t MDHKGreyMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDHKGreyMarket.MarketEntry MarketEntries = 9;
  total_size += 1UL * this->_internal_marketentries_size();
  for (const auto& msg : this->_impl_.marketentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 ApplSeqNum = 8;
  if (this->_internal_applseqnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_applseqnum());
  }

  // int32 DataMultiplePowerOf10 = 10;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDHKGreyMarket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDHKGreyMarket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDHKGreyMarket::GetClassData() const { return &_class_data_; }


void MDHKGreyMarket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDHKGreyMarket*>(&to_msg);
  auto& from = static_cast<const MDHKGreyMarket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.marketentries_.MergeFrom(from._impl_.marketentries_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_applseqnum() != 0) {
    _this->_internal_set_applseqnum(from._internal_applseqnum());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDHKGreyMarket::CopyFrom(const MDHKGreyMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDHKGreyMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDHKGreyMarket::IsInitialized() const {
  return true;
}

void MDHKGreyMarket::InternalSwap(MDHKGreyMarket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.marketentries_.InternalSwap(&other->_impl_.marketentries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDHKGreyMarket, _impl_.datamultiplepowerof10_)
      + sizeof(MDHKGreyMarket::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDHKGreyMarket, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDHKGreyMarket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDHKGreyMarket_2eproto_getter, &descriptor_table_MDHKGreyMarket_2eproto_once,
      file_level_metadata_MDHKGreyMarket_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDHKGreyMarket_MarketEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDHKGreyMarket_OrderEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDHKGreyMarket_TradeEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDHKGreyMarket*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDHKGreyMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDHKGreyMarket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
