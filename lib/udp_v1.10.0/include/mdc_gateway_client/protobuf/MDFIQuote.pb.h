// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDFIQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDFIQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDFIQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDFIQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDFIQuote_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDFIQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADFIQuote;
struct ADFIQuoteDefaultTypeInternal;
extern ADFIQuoteDefaultTypeInternal _ADFIQuote_default_instance_;
class MDFIQuote;
struct MDFIQuoteDefaultTypeInternal;
extern MDFIQuoteDefaultTypeInternal _MDFIQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADFIQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADFIQuote>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDFIQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDFIQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDFIQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDFIQuote) */ {
 public:
  inline MDFIQuote() : MDFIQuote(nullptr) {}
  ~MDFIQuote() override;
  explicit PROTOBUF_CONSTEXPR MDFIQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDFIQuote(const MDFIQuote& from);
  MDFIQuote(MDFIQuote&& from) noexcept
    : MDFIQuote() {
    *this = ::std::move(from);
  }

  inline MDFIQuote& operator=(const MDFIQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDFIQuote& operator=(MDFIQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDFIQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDFIQuote* internal_default_instance() {
    return reinterpret_cast<const MDFIQuote*>(
               &_MDFIQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDFIQuote& a, MDFIQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDFIQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDFIQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDFIQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDFIQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDFIQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDFIQuote& from) {
    MDFIQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDFIQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDFIQuote";
  }
  protected:
  explicit MDFIQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuotesFieldNumber = 47,
    kHTSCSecurityIDFieldNumber = 1,
    kBuyQuoteIDFieldNumber = 20,
    kBuyQuoterFieldNumber = 22,
    kBuyQuoteCommentFieldNumber = 27,
    kSellQuoteIDFieldNumber = 33,
    kSellQuoterFieldNumber = 35,
    kSellQuoteCommentFieldNumber = 40,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kExchangeDateFieldNumber = 7,
    kExchangeTimeFieldNumber = 8,
    kMessageNumberFieldNumber = 9,
    kAccruedInterestFieldNumber = 11,
    kBrokerDataTypeFieldNumber = 10,
    kBuyQuoteTimeFieldNumber = 21,
    kBuyCleanPriceFieldNumber = 23,
    kBuyVolumeFieldNumber = 24,
    kBuyDirtyPriceFieldNumber = 25,
    kBuyMaturityYieldFieldNumber = 26,
    kBuyQuoteTypeFieldNumber = 28,
    kBuyBargainTypeFieldNumber = 29,
    kBuyRelationTypeFieldNumber = 30,
    kBuyExerciseTypeFieldNumber = 31,
    kBuyYieldTypeFieldNumber = 32,
    kSellQuoteTimeFieldNumber = 34,
    kSellCleanPriceFieldNumber = 36,
    kSellVolumeFieldNumber = 37,
    kSellDirtyPriceFieldNumber = 38,
    kSellMaturityYieldFieldNumber = 39,
    kSellQuoteTypeFieldNumber = 41,
    kSellBargainTypeFieldNumber = 42,
    kSellRelationTypeFieldNumber = 43,
    kSellExerciseTypeFieldNumber = 44,
    kSellYieldTypeFieldNumber = 45,
    kDataMultiplePowerOf10FieldNumber = 46,
  };
  // repeated .com.htsc.mdc.insight.model.ADFIQuote Quotes = 47;
  int quotes_size() const;
  private:
  int _internal_quotes_size() const;
  public:
  void clear_quotes();
  ::com::htsc::mdc::insight::model::ADFIQuote* mutable_quotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFIQuote >*
      mutable_quotes();
  private:
  const ::com::htsc::mdc::insight::model::ADFIQuote& _internal_quotes(int index) const;
  ::com::htsc::mdc::insight::model::ADFIQuote* _internal_add_quotes();
  public:
  const ::com::htsc::mdc::insight::model::ADFIQuote& quotes(int index) const;
  ::com::htsc::mdc::insight::model::ADFIQuote* add_quotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFIQuote >&
      quotes() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string BuyQuoteID = 20;
  void clear_buyquoteid();
  const std::string& buyquoteid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyquoteid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyquoteid();
  PROTOBUF_NODISCARD std::string* release_buyquoteid();
  void set_allocated_buyquoteid(std::string* buyquoteid);
  private:
  const std::string& _internal_buyquoteid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyquoteid(const std::string& value);
  std::string* _internal_mutable_buyquoteid();
  public:

  // string BuyQuoter = 22;
  void clear_buyquoter();
  const std::string& buyquoter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyquoter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyquoter();
  PROTOBUF_NODISCARD std::string* release_buyquoter();
  void set_allocated_buyquoter(std::string* buyquoter);
  private:
  const std::string& _internal_buyquoter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyquoter(const std::string& value);
  std::string* _internal_mutable_buyquoter();
  public:

  // string BuyQuoteComment = 27;
  void clear_buyquotecomment();
  const std::string& buyquotecomment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyquotecomment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyquotecomment();
  PROTOBUF_NODISCARD std::string* release_buyquotecomment();
  void set_allocated_buyquotecomment(std::string* buyquotecomment);
  private:
  const std::string& _internal_buyquotecomment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyquotecomment(const std::string& value);
  std::string* _internal_mutable_buyquotecomment();
  public:

  // string SellQuoteID = 33;
  void clear_sellquoteid();
  const std::string& sellquoteid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sellquoteid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sellquoteid();
  PROTOBUF_NODISCARD std::string* release_sellquoteid();
  void set_allocated_sellquoteid(std::string* sellquoteid);
  private:
  const std::string& _internal_sellquoteid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sellquoteid(const std::string& value);
  std::string* _internal_mutable_sellquoteid();
  public:

  // string SellQuoter = 35;
  void clear_sellquoter();
  const std::string& sellquoter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sellquoter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sellquoter();
  PROTOBUF_NODISCARD std::string* release_sellquoter();
  void set_allocated_sellquoter(std::string* sellquoter);
  private:
  const std::string& _internal_sellquoter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sellquoter(const std::string& value);
  std::string* _internal_mutable_sellquoter();
  public:

  // string SellQuoteComment = 40;
  void clear_sellquotecomment();
  const std::string& sellquotecomment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sellquotecomment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sellquotecomment();
  PROTOBUF_NODISCARD std::string* release_sellquotecomment();
  void set_allocated_sellquotecomment(std::string* sellquotecomment);
  private:
  const std::string& _internal_sellquotecomment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sellquotecomment(const std::string& value);
  std::string* _internal_mutable_sellquotecomment();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 7;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 8;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int64 MessageNumber = 9;
  void clear_messagenumber();
  int64_t messagenumber() const;
  void set_messagenumber(int64_t value);
  private:
  int64_t _internal_messagenumber() const;
  void _internal_set_messagenumber(int64_t value);
  public:

  // int64 AccruedInterest = 11;
  void clear_accruedinterest();
  int64_t accruedinterest() const;
  void set_accruedinterest(int64_t value);
  private:
  int64_t _internal_accruedinterest() const;
  void _internal_set_accruedinterest(int64_t value);
  public:

  // int32 BrokerDataType = 10;
  void clear_brokerdatatype();
  int32_t brokerdatatype() const;
  void set_brokerdatatype(int32_t value);
  private:
  int32_t _internal_brokerdatatype() const;
  void _internal_set_brokerdatatype(int32_t value);
  public:

  // int32 BuyQuoteTime = 21;
  void clear_buyquotetime();
  int32_t buyquotetime() const;
  void set_buyquotetime(int32_t value);
  private:
  int32_t _internal_buyquotetime() const;
  void _internal_set_buyquotetime(int32_t value);
  public:

  // int64 BuyCleanPrice = 23;
  void clear_buycleanprice();
  int64_t buycleanprice() const;
  void set_buycleanprice(int64_t value);
  private:
  int64_t _internal_buycleanprice() const;
  void _internal_set_buycleanprice(int64_t value);
  public:

  // int64 BuyVolume = 24;
  void clear_buyvolume();
  int64_t buyvolume() const;
  void set_buyvolume(int64_t value);
  private:
  int64_t _internal_buyvolume() const;
  void _internal_set_buyvolume(int64_t value);
  public:

  // int64 BuyDirtyPrice = 25;
  void clear_buydirtyprice();
  int64_t buydirtyprice() const;
  void set_buydirtyprice(int64_t value);
  private:
  int64_t _internal_buydirtyprice() const;
  void _internal_set_buydirtyprice(int64_t value);
  public:

  // int64 BuyMaturityYield = 26;
  void clear_buymaturityyield();
  int64_t buymaturityyield() const;
  void set_buymaturityyield(int64_t value);
  private:
  int64_t _internal_buymaturityyield() const;
  void _internal_set_buymaturityyield(int64_t value);
  public:

  // int32 BuyQuoteType = 28;
  void clear_buyquotetype();
  int32_t buyquotetype() const;
  void set_buyquotetype(int32_t value);
  private:
  int32_t _internal_buyquotetype() const;
  void _internal_set_buyquotetype(int32_t value);
  public:

  // int32 BuyBargainType = 29;
  void clear_buybargaintype();
  int32_t buybargaintype() const;
  void set_buybargaintype(int32_t value);
  private:
  int32_t _internal_buybargaintype() const;
  void _internal_set_buybargaintype(int32_t value);
  public:

  // int32 BuyRelationType = 30;
  void clear_buyrelationtype();
  int32_t buyrelationtype() const;
  void set_buyrelationtype(int32_t value);
  private:
  int32_t _internal_buyrelationtype() const;
  void _internal_set_buyrelationtype(int32_t value);
  public:

  // int32 BuyExerciseType = 31;
  void clear_buyexercisetype();
  int32_t buyexercisetype() const;
  void set_buyexercisetype(int32_t value);
  private:
  int32_t _internal_buyexercisetype() const;
  void _internal_set_buyexercisetype(int32_t value);
  public:

  // int32 BuyYieldType = 32;
  void clear_buyyieldtype();
  int32_t buyyieldtype() const;
  void set_buyyieldtype(int32_t value);
  private:
  int32_t _internal_buyyieldtype() const;
  void _internal_set_buyyieldtype(int32_t value);
  public:

  // int32 SellQuoteTime = 34;
  void clear_sellquotetime();
  int32_t sellquotetime() const;
  void set_sellquotetime(int32_t value);
  private:
  int32_t _internal_sellquotetime() const;
  void _internal_set_sellquotetime(int32_t value);
  public:

  // int64 SellCleanPrice = 36;
  void clear_sellcleanprice();
  int64_t sellcleanprice() const;
  void set_sellcleanprice(int64_t value);
  private:
  int64_t _internal_sellcleanprice() const;
  void _internal_set_sellcleanprice(int64_t value);
  public:

  // int64 SellVolume = 37;
  void clear_sellvolume();
  int64_t sellvolume() const;
  void set_sellvolume(int64_t value);
  private:
  int64_t _internal_sellvolume() const;
  void _internal_set_sellvolume(int64_t value);
  public:

  // int64 SellDirtyPrice = 38;
  void clear_selldirtyprice();
  int64_t selldirtyprice() const;
  void set_selldirtyprice(int64_t value);
  private:
  int64_t _internal_selldirtyprice() const;
  void _internal_set_selldirtyprice(int64_t value);
  public:

  // int64 SellMaturityYield = 39;
  void clear_sellmaturityyield();
  int64_t sellmaturityyield() const;
  void set_sellmaturityyield(int64_t value);
  private:
  int64_t _internal_sellmaturityyield() const;
  void _internal_set_sellmaturityyield(int64_t value);
  public:

  // int32 SellQuoteType = 41;
  void clear_sellquotetype();
  int32_t sellquotetype() const;
  void set_sellquotetype(int32_t value);
  private:
  int32_t _internal_sellquotetype() const;
  void _internal_set_sellquotetype(int32_t value);
  public:

  // int32 SellBargainType = 42;
  void clear_sellbargaintype();
  int32_t sellbargaintype() const;
  void set_sellbargaintype(int32_t value);
  private:
  int32_t _internal_sellbargaintype() const;
  void _internal_set_sellbargaintype(int32_t value);
  public:

  // int32 SellRelationType = 43;
  void clear_sellrelationtype();
  int32_t sellrelationtype() const;
  void set_sellrelationtype(int32_t value);
  private:
  int32_t _internal_sellrelationtype() const;
  void _internal_set_sellrelationtype(int32_t value);
  public:

  // int32 SellExerciseType = 44;
  void clear_sellexercisetype();
  int32_t sellexercisetype() const;
  void set_sellexercisetype(int32_t value);
  private:
  int32_t _internal_sellexercisetype() const;
  void _internal_set_sellexercisetype(int32_t value);
  public:

  // int32 SellYieldType = 45;
  void clear_sellyieldtype();
  int32_t sellyieldtype() const;
  void set_sellyieldtype(int32_t value);
  private:
  int32_t _internal_sellyieldtype() const;
  void _internal_set_sellyieldtype(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 46;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDFIQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFIQuote > quotes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyquoteid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyquoter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyquotecomment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellquoteid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellquoter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellquotecomment_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int64_t messagenumber_;
    int64_t accruedinterest_;
    int32_t brokerdatatype_;
    int32_t buyquotetime_;
    int64_t buycleanprice_;
    int64_t buyvolume_;
    int64_t buydirtyprice_;
    int64_t buymaturityyield_;
    int32_t buyquotetype_;
    int32_t buybargaintype_;
    int32_t buyrelationtype_;
    int32_t buyexercisetype_;
    int32_t buyyieldtype_;
    int32_t sellquotetime_;
    int64_t sellcleanprice_;
    int64_t sellvolume_;
    int64_t selldirtyprice_;
    int64_t sellmaturityyield_;
    int32_t sellquotetype_;
    int32_t sellbargaintype_;
    int32_t sellrelationtype_;
    int32_t sellexercisetype_;
    int32_t sellyieldtype_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDFIQuote_2eproto;
};
// -------------------------------------------------------------------

class ADFIQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADFIQuote) */ {
 public:
  inline ADFIQuote() : ADFIQuote(nullptr) {}
  ~ADFIQuote() override;
  explicit PROTOBUF_CONSTEXPR ADFIQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADFIQuote(const ADFIQuote& from);
  ADFIQuote(ADFIQuote&& from) noexcept
    : ADFIQuote() {
    *this = ::std::move(from);
  }

  inline ADFIQuote& operator=(const ADFIQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADFIQuote& operator=(ADFIQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADFIQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADFIQuote* internal_default_instance() {
    return reinterpret_cast<const ADFIQuote*>(
               &_ADFIQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ADFIQuote& a, ADFIQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(ADFIQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADFIQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADFIQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADFIQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADFIQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADFIQuote& from) {
    ADFIQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADFIQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADFIQuote";
  }
  protected:
  explicit ADFIQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteIDFieldNumber = 3,
    kQuoterFieldNumber = 5,
    kQuoteBSFlagFieldNumber = 1,
    kQuoteLevelFieldNumber = 2,
    kCleanPriceFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kDirtyPriceFieldNumber = 8,
    kMaturityYieldFieldNumber = 9,
    kQuoteTimeFieldNumber = 4,
  };
  // string QuoteID = 3;
  void clear_quoteid();
  const std::string& quoteid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quoteid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quoteid();
  PROTOBUF_NODISCARD std::string* release_quoteid();
  void set_allocated_quoteid(std::string* quoteid);
  private:
  const std::string& _internal_quoteid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quoteid(const std::string& value);
  std::string* _internal_mutable_quoteid();
  public:

  // string Quoter = 5;
  void clear_quoter();
  const std::string& quoter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quoter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quoter();
  PROTOBUF_NODISCARD std::string* release_quoter();
  void set_allocated_quoter(std::string* quoter);
  private:
  const std::string& _internal_quoter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quoter(const std::string& value);
  std::string* _internal_mutable_quoter();
  public:

  // int32 QuoteBSFlag = 1;
  void clear_quotebsflag();
  int32_t quotebsflag() const;
  void set_quotebsflag(int32_t value);
  private:
  int32_t _internal_quotebsflag() const;
  void _internal_set_quotebsflag(int32_t value);
  public:

  // int32 QuoteLevel = 2;
  void clear_quotelevel();
  int32_t quotelevel() const;
  void set_quotelevel(int32_t value);
  private:
  int32_t _internal_quotelevel() const;
  void _internal_set_quotelevel(int32_t value);
  public:

  // int64 CleanPrice = 6;
  void clear_cleanprice();
  int64_t cleanprice() const;
  void set_cleanprice(int64_t value);
  private:
  int64_t _internal_cleanprice() const;
  void _internal_set_cleanprice(int64_t value);
  public:

  // int64 Volume = 7;
  void clear_volume();
  int64_t volume() const;
  void set_volume(int64_t value);
  private:
  int64_t _internal_volume() const;
  void _internal_set_volume(int64_t value);
  public:

  // int64 DirtyPrice = 8;
  void clear_dirtyprice();
  int64_t dirtyprice() const;
  void set_dirtyprice(int64_t value);
  private:
  int64_t _internal_dirtyprice() const;
  void _internal_set_dirtyprice(int64_t value);
  public:

  // int64 MaturityYield = 9;
  void clear_maturityyield();
  int64_t maturityyield() const;
  void set_maturityyield(int64_t value);
  private:
  int64_t _internal_maturityyield() const;
  void _internal_set_maturityyield(int64_t value);
  public:

  // int32 QuoteTime = 4;
  void clear_quotetime();
  int32_t quotetime() const;
  void set_quotetime(int32_t value);
  private:
  int32_t _internal_quotetime() const;
  void _internal_set_quotetime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADFIQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoteid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoter_;
    int32_t quotebsflag_;
    int32_t quotelevel_;
    int64_t cleanprice_;
    int64_t volume_;
    int64_t dirtyprice_;
    int64_t maturityyield_;
    int32_t quotetime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDFIQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDFIQuote

// string HTSCSecurityID = 1;
inline void MDFIQuote::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDFIQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDFIQuote::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.HTSCSecurityID)
}
inline std::string* MDFIQuote::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDFIQuote.HTSCSecurityID)
  return _s;
}
inline const std::string& MDFIQuote::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDFIQuote::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDFIQuote::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDFIQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDFIQuote.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDFIQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDFIQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDFIQuote::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDFIQuote::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDFIQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.MDDate)
  return _internal_mddate();
}
inline void MDFIQuote::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDFIQuote::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDFIQuote::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDFIQuote::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDFIQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.MDTime)
  return _internal_mdtime();
}
inline void MDFIQuote::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDFIQuote::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDFIQuote::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDFIQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDFIQuote::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDFIQuote::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDFIQuote::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDFIQuote::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDFIQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.securityIDSource)
  return _internal_securityidsource();
}
inline void MDFIQuote::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDFIQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDFIQuote::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDFIQuote::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDFIQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.securityType)
  return _internal_securitytype();
}
inline void MDFIQuote::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDFIQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.securityType)
}

// int32 ExchangeDate = 7;
inline void MDFIQuote::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDFIQuote::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDFIQuote::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDFIQuote::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDFIQuote::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.ExchangeDate)
}

// int32 ExchangeTime = 8;
inline void MDFIQuote::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDFIQuote::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDFIQuote::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDFIQuote::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDFIQuote::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.ExchangeTime)
}

// int64 MessageNumber = 9;
inline void MDFIQuote::clear_messagenumber() {
  _impl_.messagenumber_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_messagenumber() const {
  return _impl_.messagenumber_;
}
inline int64_t MDFIQuote::messagenumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.MessageNumber)
  return _internal_messagenumber();
}
inline void MDFIQuote::_internal_set_messagenumber(int64_t value) {
  
  _impl_.messagenumber_ = value;
}
inline void MDFIQuote::set_messagenumber(int64_t value) {
  _internal_set_messagenumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.MessageNumber)
}

// int32 BrokerDataType = 10;
inline void MDFIQuote::clear_brokerdatatype() {
  _impl_.brokerdatatype_ = 0;
}
inline int32_t MDFIQuote::_internal_brokerdatatype() const {
  return _impl_.brokerdatatype_;
}
inline int32_t MDFIQuote::brokerdatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BrokerDataType)
  return _internal_brokerdatatype();
}
inline void MDFIQuote::_internal_set_brokerdatatype(int32_t value) {
  
  _impl_.brokerdatatype_ = value;
}
inline void MDFIQuote::set_brokerdatatype(int32_t value) {
  _internal_set_brokerdatatype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BrokerDataType)
}

// int64 AccruedInterest = 11;
inline void MDFIQuote::clear_accruedinterest() {
  _impl_.accruedinterest_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_accruedinterest() const {
  return _impl_.accruedinterest_;
}
inline int64_t MDFIQuote::accruedinterest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.AccruedInterest)
  return _internal_accruedinterest();
}
inline void MDFIQuote::_internal_set_accruedinterest(int64_t value) {
  
  _impl_.accruedinterest_ = value;
}
inline void MDFIQuote::set_accruedinterest(int64_t value) {
  _internal_set_accruedinterest(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.AccruedInterest)
}

// string BuyQuoteID = 20;
inline void MDFIQuote::clear_buyquoteid() {
  _impl_.buyquoteid_.ClearToEmpty();
}
inline const std::string& MDFIQuote::buyquoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteID)
  return _internal_buyquoteid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDFIQuote::set_buyquoteid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buyquoteid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteID)
}
inline std::string* MDFIQuote::mutable_buyquoteid() {
  std::string* _s = _internal_mutable_buyquoteid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteID)
  return _s;
}
inline const std::string& MDFIQuote::_internal_buyquoteid() const {
  return _impl_.buyquoteid_.Get();
}
inline void MDFIQuote::_internal_set_buyquoteid(const std::string& value) {
  
  _impl_.buyquoteid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDFIQuote::_internal_mutable_buyquoteid() {
  
  return _impl_.buyquoteid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDFIQuote::release_buyquoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteID)
  return _impl_.buyquoteid_.Release();
}
inline void MDFIQuote::set_allocated_buyquoteid(std::string* buyquoteid) {
  if (buyquoteid != nullptr) {
    
  } else {
    
  }
  _impl_.buyquoteid_.SetAllocated(buyquoteid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buyquoteid_.IsDefault()) {
    _impl_.buyquoteid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteID)
}

// int32 BuyQuoteTime = 21;
inline void MDFIQuote::clear_buyquotetime() {
  _impl_.buyquotetime_ = 0;
}
inline int32_t MDFIQuote::_internal_buyquotetime() const {
  return _impl_.buyquotetime_;
}
inline int32_t MDFIQuote::buyquotetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteTime)
  return _internal_buyquotetime();
}
inline void MDFIQuote::_internal_set_buyquotetime(int32_t value) {
  
  _impl_.buyquotetime_ = value;
}
inline void MDFIQuote::set_buyquotetime(int32_t value) {
  _internal_set_buyquotetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteTime)
}

// string BuyQuoter = 22;
inline void MDFIQuote::clear_buyquoter() {
  _impl_.buyquoter_.ClearToEmpty();
}
inline const std::string& MDFIQuote::buyquoter() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoter)
  return _internal_buyquoter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDFIQuote::set_buyquoter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buyquoter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoter)
}
inline std::string* MDFIQuote::mutable_buyquoter() {
  std::string* _s = _internal_mutable_buyquoter();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoter)
  return _s;
}
inline const std::string& MDFIQuote::_internal_buyquoter() const {
  return _impl_.buyquoter_.Get();
}
inline void MDFIQuote::_internal_set_buyquoter(const std::string& value) {
  
  _impl_.buyquoter_.Set(value, GetArenaForAllocation());
}
inline std::string* MDFIQuote::_internal_mutable_buyquoter() {
  
  return _impl_.buyquoter_.Mutable(GetArenaForAllocation());
}
inline std::string* MDFIQuote::release_buyquoter() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoter)
  return _impl_.buyquoter_.Release();
}
inline void MDFIQuote::set_allocated_buyquoter(std::string* buyquoter) {
  if (buyquoter != nullptr) {
    
  } else {
    
  }
  _impl_.buyquoter_.SetAllocated(buyquoter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buyquoter_.IsDefault()) {
    _impl_.buyquoter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoter)
}

// int64 BuyCleanPrice = 23;
inline void MDFIQuote::clear_buycleanprice() {
  _impl_.buycleanprice_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_buycleanprice() const {
  return _impl_.buycleanprice_;
}
inline int64_t MDFIQuote::buycleanprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyCleanPrice)
  return _internal_buycleanprice();
}
inline void MDFIQuote::_internal_set_buycleanprice(int64_t value) {
  
  _impl_.buycleanprice_ = value;
}
inline void MDFIQuote::set_buycleanprice(int64_t value) {
  _internal_set_buycleanprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyCleanPrice)
}

// int64 BuyVolume = 24;
inline void MDFIQuote::clear_buyvolume() {
  _impl_.buyvolume_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_buyvolume() const {
  return _impl_.buyvolume_;
}
inline int64_t MDFIQuote::buyvolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyVolume)
  return _internal_buyvolume();
}
inline void MDFIQuote::_internal_set_buyvolume(int64_t value) {
  
  _impl_.buyvolume_ = value;
}
inline void MDFIQuote::set_buyvolume(int64_t value) {
  _internal_set_buyvolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyVolume)
}

// int64 BuyDirtyPrice = 25;
inline void MDFIQuote::clear_buydirtyprice() {
  _impl_.buydirtyprice_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_buydirtyprice() const {
  return _impl_.buydirtyprice_;
}
inline int64_t MDFIQuote::buydirtyprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyDirtyPrice)
  return _internal_buydirtyprice();
}
inline void MDFIQuote::_internal_set_buydirtyprice(int64_t value) {
  
  _impl_.buydirtyprice_ = value;
}
inline void MDFIQuote::set_buydirtyprice(int64_t value) {
  _internal_set_buydirtyprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyDirtyPrice)
}

// int64 BuyMaturityYield = 26;
inline void MDFIQuote::clear_buymaturityyield() {
  _impl_.buymaturityyield_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_buymaturityyield() const {
  return _impl_.buymaturityyield_;
}
inline int64_t MDFIQuote::buymaturityyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyMaturityYield)
  return _internal_buymaturityyield();
}
inline void MDFIQuote::_internal_set_buymaturityyield(int64_t value) {
  
  _impl_.buymaturityyield_ = value;
}
inline void MDFIQuote::set_buymaturityyield(int64_t value) {
  _internal_set_buymaturityyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyMaturityYield)
}

// string BuyQuoteComment = 27;
inline void MDFIQuote::clear_buyquotecomment() {
  _impl_.buyquotecomment_.ClearToEmpty();
}
inline const std::string& MDFIQuote::buyquotecomment() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteComment)
  return _internal_buyquotecomment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDFIQuote::set_buyquotecomment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buyquotecomment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteComment)
}
inline std::string* MDFIQuote::mutable_buyquotecomment() {
  std::string* _s = _internal_mutable_buyquotecomment();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteComment)
  return _s;
}
inline const std::string& MDFIQuote::_internal_buyquotecomment() const {
  return _impl_.buyquotecomment_.Get();
}
inline void MDFIQuote::_internal_set_buyquotecomment(const std::string& value) {
  
  _impl_.buyquotecomment_.Set(value, GetArenaForAllocation());
}
inline std::string* MDFIQuote::_internal_mutable_buyquotecomment() {
  
  return _impl_.buyquotecomment_.Mutable(GetArenaForAllocation());
}
inline std::string* MDFIQuote::release_buyquotecomment() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteComment)
  return _impl_.buyquotecomment_.Release();
}
inline void MDFIQuote::set_allocated_buyquotecomment(std::string* buyquotecomment) {
  if (buyquotecomment != nullptr) {
    
  } else {
    
  }
  _impl_.buyquotecomment_.SetAllocated(buyquotecomment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buyquotecomment_.IsDefault()) {
    _impl_.buyquotecomment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteComment)
}

// int32 BuyQuoteType = 28;
inline void MDFIQuote::clear_buyquotetype() {
  _impl_.buyquotetype_ = 0;
}
inline int32_t MDFIQuote::_internal_buyquotetype() const {
  return _impl_.buyquotetype_;
}
inline int32_t MDFIQuote::buyquotetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteType)
  return _internal_buyquotetype();
}
inline void MDFIQuote::_internal_set_buyquotetype(int32_t value) {
  
  _impl_.buyquotetype_ = value;
}
inline void MDFIQuote::set_buyquotetype(int32_t value) {
  _internal_set_buyquotetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteType)
}

// int32 BuyBargainType = 29;
inline void MDFIQuote::clear_buybargaintype() {
  _impl_.buybargaintype_ = 0;
}
inline int32_t MDFIQuote::_internal_buybargaintype() const {
  return _impl_.buybargaintype_;
}
inline int32_t MDFIQuote::buybargaintype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyBargainType)
  return _internal_buybargaintype();
}
inline void MDFIQuote::_internal_set_buybargaintype(int32_t value) {
  
  _impl_.buybargaintype_ = value;
}
inline void MDFIQuote::set_buybargaintype(int32_t value) {
  _internal_set_buybargaintype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyBargainType)
}

// int32 BuyRelationType = 30;
inline void MDFIQuote::clear_buyrelationtype() {
  _impl_.buyrelationtype_ = 0;
}
inline int32_t MDFIQuote::_internal_buyrelationtype() const {
  return _impl_.buyrelationtype_;
}
inline int32_t MDFIQuote::buyrelationtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyRelationType)
  return _internal_buyrelationtype();
}
inline void MDFIQuote::_internal_set_buyrelationtype(int32_t value) {
  
  _impl_.buyrelationtype_ = value;
}
inline void MDFIQuote::set_buyrelationtype(int32_t value) {
  _internal_set_buyrelationtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyRelationType)
}

// int32 BuyExerciseType = 31;
inline void MDFIQuote::clear_buyexercisetype() {
  _impl_.buyexercisetype_ = 0;
}
inline int32_t MDFIQuote::_internal_buyexercisetype() const {
  return _impl_.buyexercisetype_;
}
inline int32_t MDFIQuote::buyexercisetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyExerciseType)
  return _internal_buyexercisetype();
}
inline void MDFIQuote::_internal_set_buyexercisetype(int32_t value) {
  
  _impl_.buyexercisetype_ = value;
}
inline void MDFIQuote::set_buyexercisetype(int32_t value) {
  _internal_set_buyexercisetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyExerciseType)
}

// int32 BuyYieldType = 32;
inline void MDFIQuote::clear_buyyieldtype() {
  _impl_.buyyieldtype_ = 0;
}
inline int32_t MDFIQuote::_internal_buyyieldtype() const {
  return _impl_.buyyieldtype_;
}
inline int32_t MDFIQuote::buyyieldtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.BuyYieldType)
  return _internal_buyyieldtype();
}
inline void MDFIQuote::_internal_set_buyyieldtype(int32_t value) {
  
  _impl_.buyyieldtype_ = value;
}
inline void MDFIQuote::set_buyyieldtype(int32_t value) {
  _internal_set_buyyieldtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.BuyYieldType)
}

// string SellQuoteID = 33;
inline void MDFIQuote::clear_sellquoteid() {
  _impl_.sellquoteid_.ClearToEmpty();
}
inline const std::string& MDFIQuote::sellquoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteID)
  return _internal_sellquoteid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDFIQuote::set_sellquoteid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sellquoteid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteID)
}
inline std::string* MDFIQuote::mutable_sellquoteid() {
  std::string* _s = _internal_mutable_sellquoteid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteID)
  return _s;
}
inline const std::string& MDFIQuote::_internal_sellquoteid() const {
  return _impl_.sellquoteid_.Get();
}
inline void MDFIQuote::_internal_set_sellquoteid(const std::string& value) {
  
  _impl_.sellquoteid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDFIQuote::_internal_mutable_sellquoteid() {
  
  return _impl_.sellquoteid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDFIQuote::release_sellquoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteID)
  return _impl_.sellquoteid_.Release();
}
inline void MDFIQuote::set_allocated_sellquoteid(std::string* sellquoteid) {
  if (sellquoteid != nullptr) {
    
  } else {
    
  }
  _impl_.sellquoteid_.SetAllocated(sellquoteid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sellquoteid_.IsDefault()) {
    _impl_.sellquoteid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteID)
}

// int32 SellQuoteTime = 34;
inline void MDFIQuote::clear_sellquotetime() {
  _impl_.sellquotetime_ = 0;
}
inline int32_t MDFIQuote::_internal_sellquotetime() const {
  return _impl_.sellquotetime_;
}
inline int32_t MDFIQuote::sellquotetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteTime)
  return _internal_sellquotetime();
}
inline void MDFIQuote::_internal_set_sellquotetime(int32_t value) {
  
  _impl_.sellquotetime_ = value;
}
inline void MDFIQuote::set_sellquotetime(int32_t value) {
  _internal_set_sellquotetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteTime)
}

// string SellQuoter = 35;
inline void MDFIQuote::clear_sellquoter() {
  _impl_.sellquoter_.ClearToEmpty();
}
inline const std::string& MDFIQuote::sellquoter() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellQuoter)
  return _internal_sellquoter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDFIQuote::set_sellquoter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sellquoter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellQuoter)
}
inline std::string* MDFIQuote::mutable_sellquoter() {
  std::string* _s = _internal_mutable_sellquoter();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDFIQuote.SellQuoter)
  return _s;
}
inline const std::string& MDFIQuote::_internal_sellquoter() const {
  return _impl_.sellquoter_.Get();
}
inline void MDFIQuote::_internal_set_sellquoter(const std::string& value) {
  
  _impl_.sellquoter_.Set(value, GetArenaForAllocation());
}
inline std::string* MDFIQuote::_internal_mutable_sellquoter() {
  
  return _impl_.sellquoter_.Mutable(GetArenaForAllocation());
}
inline std::string* MDFIQuote::release_sellquoter() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDFIQuote.SellQuoter)
  return _impl_.sellquoter_.Release();
}
inline void MDFIQuote::set_allocated_sellquoter(std::string* sellquoter) {
  if (sellquoter != nullptr) {
    
  } else {
    
  }
  _impl_.sellquoter_.SetAllocated(sellquoter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sellquoter_.IsDefault()) {
    _impl_.sellquoter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDFIQuote.SellQuoter)
}

// int64 SellCleanPrice = 36;
inline void MDFIQuote::clear_sellcleanprice() {
  _impl_.sellcleanprice_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_sellcleanprice() const {
  return _impl_.sellcleanprice_;
}
inline int64_t MDFIQuote::sellcleanprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellCleanPrice)
  return _internal_sellcleanprice();
}
inline void MDFIQuote::_internal_set_sellcleanprice(int64_t value) {
  
  _impl_.sellcleanprice_ = value;
}
inline void MDFIQuote::set_sellcleanprice(int64_t value) {
  _internal_set_sellcleanprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellCleanPrice)
}

// int64 SellVolume = 37;
inline void MDFIQuote::clear_sellvolume() {
  _impl_.sellvolume_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_sellvolume() const {
  return _impl_.sellvolume_;
}
inline int64_t MDFIQuote::sellvolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellVolume)
  return _internal_sellvolume();
}
inline void MDFIQuote::_internal_set_sellvolume(int64_t value) {
  
  _impl_.sellvolume_ = value;
}
inline void MDFIQuote::set_sellvolume(int64_t value) {
  _internal_set_sellvolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellVolume)
}

// int64 SellDirtyPrice = 38;
inline void MDFIQuote::clear_selldirtyprice() {
  _impl_.selldirtyprice_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_selldirtyprice() const {
  return _impl_.selldirtyprice_;
}
inline int64_t MDFIQuote::selldirtyprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellDirtyPrice)
  return _internal_selldirtyprice();
}
inline void MDFIQuote::_internal_set_selldirtyprice(int64_t value) {
  
  _impl_.selldirtyprice_ = value;
}
inline void MDFIQuote::set_selldirtyprice(int64_t value) {
  _internal_set_selldirtyprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellDirtyPrice)
}

// int64 SellMaturityYield = 39;
inline void MDFIQuote::clear_sellmaturityyield() {
  _impl_.sellmaturityyield_ = int64_t{0};
}
inline int64_t MDFIQuote::_internal_sellmaturityyield() const {
  return _impl_.sellmaturityyield_;
}
inline int64_t MDFIQuote::sellmaturityyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellMaturityYield)
  return _internal_sellmaturityyield();
}
inline void MDFIQuote::_internal_set_sellmaturityyield(int64_t value) {
  
  _impl_.sellmaturityyield_ = value;
}
inline void MDFIQuote::set_sellmaturityyield(int64_t value) {
  _internal_set_sellmaturityyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellMaturityYield)
}

// string SellQuoteComment = 40;
inline void MDFIQuote::clear_sellquotecomment() {
  _impl_.sellquotecomment_.ClearToEmpty();
}
inline const std::string& MDFIQuote::sellquotecomment() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteComment)
  return _internal_sellquotecomment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDFIQuote::set_sellquotecomment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sellquotecomment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteComment)
}
inline std::string* MDFIQuote::mutable_sellquotecomment() {
  std::string* _s = _internal_mutable_sellquotecomment();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteComment)
  return _s;
}
inline const std::string& MDFIQuote::_internal_sellquotecomment() const {
  return _impl_.sellquotecomment_.Get();
}
inline void MDFIQuote::_internal_set_sellquotecomment(const std::string& value) {
  
  _impl_.sellquotecomment_.Set(value, GetArenaForAllocation());
}
inline std::string* MDFIQuote::_internal_mutable_sellquotecomment() {
  
  return _impl_.sellquotecomment_.Mutable(GetArenaForAllocation());
}
inline std::string* MDFIQuote::release_sellquotecomment() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteComment)
  return _impl_.sellquotecomment_.Release();
}
inline void MDFIQuote::set_allocated_sellquotecomment(std::string* sellquotecomment) {
  if (sellquotecomment != nullptr) {
    
  } else {
    
  }
  _impl_.sellquotecomment_.SetAllocated(sellquotecomment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sellquotecomment_.IsDefault()) {
    _impl_.sellquotecomment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteComment)
}

// int32 SellQuoteType = 41;
inline void MDFIQuote::clear_sellquotetype() {
  _impl_.sellquotetype_ = 0;
}
inline int32_t MDFIQuote::_internal_sellquotetype() const {
  return _impl_.sellquotetype_;
}
inline int32_t MDFIQuote::sellquotetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteType)
  return _internal_sellquotetype();
}
inline void MDFIQuote::_internal_set_sellquotetype(int32_t value) {
  
  _impl_.sellquotetype_ = value;
}
inline void MDFIQuote::set_sellquotetype(int32_t value) {
  _internal_set_sellquotetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellQuoteType)
}

// int32 SellBargainType = 42;
inline void MDFIQuote::clear_sellbargaintype() {
  _impl_.sellbargaintype_ = 0;
}
inline int32_t MDFIQuote::_internal_sellbargaintype() const {
  return _impl_.sellbargaintype_;
}
inline int32_t MDFIQuote::sellbargaintype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellBargainType)
  return _internal_sellbargaintype();
}
inline void MDFIQuote::_internal_set_sellbargaintype(int32_t value) {
  
  _impl_.sellbargaintype_ = value;
}
inline void MDFIQuote::set_sellbargaintype(int32_t value) {
  _internal_set_sellbargaintype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellBargainType)
}

// int32 SellRelationType = 43;
inline void MDFIQuote::clear_sellrelationtype() {
  _impl_.sellrelationtype_ = 0;
}
inline int32_t MDFIQuote::_internal_sellrelationtype() const {
  return _impl_.sellrelationtype_;
}
inline int32_t MDFIQuote::sellrelationtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellRelationType)
  return _internal_sellrelationtype();
}
inline void MDFIQuote::_internal_set_sellrelationtype(int32_t value) {
  
  _impl_.sellrelationtype_ = value;
}
inline void MDFIQuote::set_sellrelationtype(int32_t value) {
  _internal_set_sellrelationtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellRelationType)
}

// int32 SellExerciseType = 44;
inline void MDFIQuote::clear_sellexercisetype() {
  _impl_.sellexercisetype_ = 0;
}
inline int32_t MDFIQuote::_internal_sellexercisetype() const {
  return _impl_.sellexercisetype_;
}
inline int32_t MDFIQuote::sellexercisetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellExerciseType)
  return _internal_sellexercisetype();
}
inline void MDFIQuote::_internal_set_sellexercisetype(int32_t value) {
  
  _impl_.sellexercisetype_ = value;
}
inline void MDFIQuote::set_sellexercisetype(int32_t value) {
  _internal_set_sellexercisetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellExerciseType)
}

// int32 SellYieldType = 45;
inline void MDFIQuote::clear_sellyieldtype() {
  _impl_.sellyieldtype_ = 0;
}
inline int32_t MDFIQuote::_internal_sellyieldtype() const {
  return _impl_.sellyieldtype_;
}
inline int32_t MDFIQuote::sellyieldtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.SellYieldType)
  return _internal_sellyieldtype();
}
inline void MDFIQuote::_internal_set_sellyieldtype(int32_t value) {
  
  _impl_.sellyieldtype_ = value;
}
inline void MDFIQuote::set_sellyieldtype(int32_t value) {
  _internal_set_sellyieldtype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.SellYieldType)
}

// int32 DataMultiplePowerOf10 = 46;
inline void MDFIQuote::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDFIQuote::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDFIQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDFIQuote::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDFIQuote::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDFIQuote.DataMultiplePowerOf10)
}

// repeated .com.htsc.mdc.insight.model.ADFIQuote Quotes = 47;
inline int MDFIQuote::_internal_quotes_size() const {
  return _impl_.quotes_.size();
}
inline int MDFIQuote::quotes_size() const {
  return _internal_quotes_size();
}
inline void MDFIQuote::clear_quotes() {
  _impl_.quotes_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADFIQuote* MDFIQuote::mutable_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDFIQuote.Quotes)
  return _impl_.quotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFIQuote >*
MDFIQuote::mutable_quotes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDFIQuote.Quotes)
  return &_impl_.quotes_;
}
inline const ::com::htsc::mdc::insight::model::ADFIQuote& MDFIQuote::_internal_quotes(int index) const {
  return _impl_.quotes_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADFIQuote& MDFIQuote::quotes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDFIQuote.Quotes)
  return _internal_quotes(index);
}
inline ::com::htsc::mdc::insight::model::ADFIQuote* MDFIQuote::_internal_add_quotes() {
  return _impl_.quotes_.Add();
}
inline ::com::htsc::mdc::insight::model::ADFIQuote* MDFIQuote::add_quotes() {
  ::com::htsc::mdc::insight::model::ADFIQuote* _add = _internal_add_quotes();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDFIQuote.Quotes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFIQuote >&
MDFIQuote::quotes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDFIQuote.Quotes)
  return _impl_.quotes_;
}

// -------------------------------------------------------------------

// ADFIQuote

// int32 QuoteBSFlag = 1;
inline void ADFIQuote::clear_quotebsflag() {
  _impl_.quotebsflag_ = 0;
}
inline int32_t ADFIQuote::_internal_quotebsflag() const {
  return _impl_.quotebsflag_;
}
inline int32_t ADFIQuote::quotebsflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.QuoteBSFlag)
  return _internal_quotebsflag();
}
inline void ADFIQuote::_internal_set_quotebsflag(int32_t value) {
  
  _impl_.quotebsflag_ = value;
}
inline void ADFIQuote::set_quotebsflag(int32_t value) {
  _internal_set_quotebsflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.QuoteBSFlag)
}

// int32 QuoteLevel = 2;
inline void ADFIQuote::clear_quotelevel() {
  _impl_.quotelevel_ = 0;
}
inline int32_t ADFIQuote::_internal_quotelevel() const {
  return _impl_.quotelevel_;
}
inline int32_t ADFIQuote::quotelevel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.QuoteLevel)
  return _internal_quotelevel();
}
inline void ADFIQuote::_internal_set_quotelevel(int32_t value) {
  
  _impl_.quotelevel_ = value;
}
inline void ADFIQuote::set_quotelevel(int32_t value) {
  _internal_set_quotelevel(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.QuoteLevel)
}

// string QuoteID = 3;
inline void ADFIQuote::clear_quoteid() {
  _impl_.quoteid_.ClearToEmpty();
}
inline const std::string& ADFIQuote::quoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.QuoteID)
  return _internal_quoteid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADFIQuote::set_quoteid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quoteid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.QuoteID)
}
inline std::string* ADFIQuote::mutable_quoteid() {
  std::string* _s = _internal_mutable_quoteid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFIQuote.QuoteID)
  return _s;
}
inline const std::string& ADFIQuote::_internal_quoteid() const {
  return _impl_.quoteid_.Get();
}
inline void ADFIQuote::_internal_set_quoteid(const std::string& value) {
  
  _impl_.quoteid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADFIQuote::_internal_mutable_quoteid() {
  
  return _impl_.quoteid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADFIQuote::release_quoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFIQuote.QuoteID)
  return _impl_.quoteid_.Release();
}
inline void ADFIQuote::set_allocated_quoteid(std::string* quoteid) {
  if (quoteid != nullptr) {
    
  } else {
    
  }
  _impl_.quoteid_.SetAllocated(quoteid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quoteid_.IsDefault()) {
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFIQuote.QuoteID)
}

// int32 QuoteTime = 4;
inline void ADFIQuote::clear_quotetime() {
  _impl_.quotetime_ = 0;
}
inline int32_t ADFIQuote::_internal_quotetime() const {
  return _impl_.quotetime_;
}
inline int32_t ADFIQuote::quotetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.QuoteTime)
  return _internal_quotetime();
}
inline void ADFIQuote::_internal_set_quotetime(int32_t value) {
  
  _impl_.quotetime_ = value;
}
inline void ADFIQuote::set_quotetime(int32_t value) {
  _internal_set_quotetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.QuoteTime)
}

// string Quoter = 5;
inline void ADFIQuote::clear_quoter() {
  _impl_.quoter_.ClearToEmpty();
}
inline const std::string& ADFIQuote::quoter() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.Quoter)
  return _internal_quoter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADFIQuote::set_quoter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quoter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.Quoter)
}
inline std::string* ADFIQuote::mutable_quoter() {
  std::string* _s = _internal_mutable_quoter();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFIQuote.Quoter)
  return _s;
}
inline const std::string& ADFIQuote::_internal_quoter() const {
  return _impl_.quoter_.Get();
}
inline void ADFIQuote::_internal_set_quoter(const std::string& value) {
  
  _impl_.quoter_.Set(value, GetArenaForAllocation());
}
inline std::string* ADFIQuote::_internal_mutable_quoter() {
  
  return _impl_.quoter_.Mutable(GetArenaForAllocation());
}
inline std::string* ADFIQuote::release_quoter() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFIQuote.Quoter)
  return _impl_.quoter_.Release();
}
inline void ADFIQuote::set_allocated_quoter(std::string* quoter) {
  if (quoter != nullptr) {
    
  } else {
    
  }
  _impl_.quoter_.SetAllocated(quoter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quoter_.IsDefault()) {
    _impl_.quoter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFIQuote.Quoter)
}

// int64 CleanPrice = 6;
inline void ADFIQuote::clear_cleanprice() {
  _impl_.cleanprice_ = int64_t{0};
}
inline int64_t ADFIQuote::_internal_cleanprice() const {
  return _impl_.cleanprice_;
}
inline int64_t ADFIQuote::cleanprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.CleanPrice)
  return _internal_cleanprice();
}
inline void ADFIQuote::_internal_set_cleanprice(int64_t value) {
  
  _impl_.cleanprice_ = value;
}
inline void ADFIQuote::set_cleanprice(int64_t value) {
  _internal_set_cleanprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.CleanPrice)
}

// int64 Volume = 7;
inline void ADFIQuote::clear_volume() {
  _impl_.volume_ = int64_t{0};
}
inline int64_t ADFIQuote::_internal_volume() const {
  return _impl_.volume_;
}
inline int64_t ADFIQuote::volume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.Volume)
  return _internal_volume();
}
inline void ADFIQuote::_internal_set_volume(int64_t value) {
  
  _impl_.volume_ = value;
}
inline void ADFIQuote::set_volume(int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.Volume)
}

// int64 DirtyPrice = 8;
inline void ADFIQuote::clear_dirtyprice() {
  _impl_.dirtyprice_ = int64_t{0};
}
inline int64_t ADFIQuote::_internal_dirtyprice() const {
  return _impl_.dirtyprice_;
}
inline int64_t ADFIQuote::dirtyprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.DirtyPrice)
  return _internal_dirtyprice();
}
inline void ADFIQuote::_internal_set_dirtyprice(int64_t value) {
  
  _impl_.dirtyprice_ = value;
}
inline void ADFIQuote::set_dirtyprice(int64_t value) {
  _internal_set_dirtyprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.DirtyPrice)
}

// int64 MaturityYield = 9;
inline void ADFIQuote::clear_maturityyield() {
  _impl_.maturityyield_ = int64_t{0};
}
inline int64_t ADFIQuote::_internal_maturityyield() const {
  return _impl_.maturityyield_;
}
inline int64_t ADFIQuote::maturityyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFIQuote.MaturityYield)
  return _internal_maturityyield();
}
inline void ADFIQuote::_internal_set_maturityyield(int64_t value) {
  
  _impl_.maturityyield_ = value;
}
inline void ADFIQuote::set_maturityyield(int64_t value) {
  _internal_set_maturityyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFIQuote.MaturityYield)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDFIQuote_2eproto
