// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDFIQuote.proto

#include "MDFIQuote.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDFIQuote::MDFIQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quotes_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buyquoteid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buyquoter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buyquotecomment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sellquoteid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sellquoter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sellquotecomment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.messagenumber_)*/int64_t{0}
  , /*decltype(_impl_.accruedinterest_)*/int64_t{0}
  , /*decltype(_impl_.brokerdatatype_)*/0
  , /*decltype(_impl_.buyquotetime_)*/0
  , /*decltype(_impl_.buycleanprice_)*/int64_t{0}
  , /*decltype(_impl_.buyvolume_)*/int64_t{0}
  , /*decltype(_impl_.buydirtyprice_)*/int64_t{0}
  , /*decltype(_impl_.buymaturityyield_)*/int64_t{0}
  , /*decltype(_impl_.buyquotetype_)*/0
  , /*decltype(_impl_.buybargaintype_)*/0
  , /*decltype(_impl_.buyrelationtype_)*/0
  , /*decltype(_impl_.buyexercisetype_)*/0
  , /*decltype(_impl_.buyyieldtype_)*/0
  , /*decltype(_impl_.sellquotetime_)*/0
  , /*decltype(_impl_.sellcleanprice_)*/int64_t{0}
  , /*decltype(_impl_.sellvolume_)*/int64_t{0}
  , /*decltype(_impl_.selldirtyprice_)*/int64_t{0}
  , /*decltype(_impl_.sellmaturityyield_)*/int64_t{0}
  , /*decltype(_impl_.sellquotetype_)*/0
  , /*decltype(_impl_.sellbargaintype_)*/0
  , /*decltype(_impl_.sellrelationtype_)*/0
  , /*decltype(_impl_.sellexercisetype_)*/0
  , /*decltype(_impl_.sellyieldtype_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDFIQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDFIQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDFIQuoteDefaultTypeInternal() {}
  union {
    MDFIQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDFIQuoteDefaultTypeInternal _MDFIQuote_default_instance_;
PROTOBUF_CONSTEXPR ADFIQuote::ADFIQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quoteid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quoter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quotebsflag_)*/0
  , /*decltype(_impl_.quotelevel_)*/0
  , /*decltype(_impl_.cleanprice_)*/int64_t{0}
  , /*decltype(_impl_.volume_)*/int64_t{0}
  , /*decltype(_impl_.dirtyprice_)*/int64_t{0}
  , /*decltype(_impl_.maturityyield_)*/int64_t{0}
  , /*decltype(_impl_.quotetime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADFIQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADFIQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADFIQuoteDefaultTypeInternal() {}
  union {
    ADFIQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADFIQuoteDefaultTypeInternal _ADFIQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDFIQuote_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDFIQuote_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDFIQuote_2eproto = nullptr;

const uint32_t TableStruct_MDFIQuote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.messagenumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.brokerdatatype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.accruedinterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyquoteid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyquotetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyquoter_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buycleanprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyvolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buydirtyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buymaturityyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyquotecomment_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyquotetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buybargaintype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyrelationtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyexercisetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.buyyieldtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellquoteid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellquotetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellquoter_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellcleanprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellvolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.selldirtyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellmaturityyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellquotecomment_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellquotetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellbargaintype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellrelationtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellexercisetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.sellyieldtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFIQuote, _impl_.quotes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.quotebsflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.quotelevel_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.quoteid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.quotetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.quoter_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.cleanprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.dirtyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADFIQuote, _impl_.maturityyield_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDFIQuote)},
  { 45, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADFIQuote)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDFIQuote_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_ADFIQuote_default_instance_._instance,
};

const char descriptor_table_protodef_MDFIQuote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017MDFIQuote.proto\022\032com.htsc.mdc.insight."
  "model\032\027ESecurityIDSource.proto\032\023ESecurit"
  "yType.proto\"\371\007\n\tMDFIQuote\022\026\n\016HTSCSecurit"
  "yID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001("
  "\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020securityIDSo"
  "urce\030\005 \001(\0162%.com.htsc.mdc.model.ESecurit"
  "yIDSource\0227\n\014securityType\030\006 \001(\0162!.com.ht"
  "sc.mdc.model.ESecurityType\022\024\n\014ExchangeDa"
  "te\030\007 \001(\005\022\024\n\014ExchangeTime\030\010 \001(\005\022\025\n\rMessag"
  "eNumber\030\t \001(\003\022\026\n\016BrokerDataType\030\n \001(\005\022\027\n"
  "\017AccruedInterest\030\013 \001(\003\022\022\n\nBuyQuoteID\030\024 \001"
  "(\t\022\024\n\014BuyQuoteTime\030\025 \001(\005\022\021\n\tBuyQuoter\030\026 "
  "\001(\t\022\025\n\rBuyCleanPrice\030\027 \001(\003\022\021\n\tBuyVolume\030"
  "\030 \001(\003\022\025\n\rBuyDirtyPrice\030\031 \001(\003\022\030\n\020BuyMatur"
  "ityYield\030\032 \001(\003\022\027\n\017BuyQuoteComment\030\033 \001(\t\022"
  "\024\n\014BuyQuoteType\030\034 \001(\005\022\026\n\016BuyBargainType\030"
  "\035 \001(\005\022\027\n\017BuyRelationType\030\036 \001(\005\022\027\n\017BuyExe"
  "rciseType\030\037 \001(\005\022\024\n\014BuyYieldType\030  \001(\005\022\023\n"
  "\013SellQuoteID\030! \001(\t\022\025\n\rSellQuoteTime\030\" \001("
  "\005\022\022\n\nSellQuoter\030# \001(\t\022\026\n\016SellCleanPrice\030"
  "$ \001(\003\022\022\n\nSellVolume\030% \001(\003\022\026\n\016SellDirtyPr"
  "ice\030& \001(\003\022\031\n\021SellMaturityYield\030\' \001(\003\022\030\n\020"
  "SellQuoteComment\030( \001(\t\022\025\n\rSellQuoteType\030"
  ") \001(\005\022\027\n\017SellBargainType\030* \001(\005\022\030\n\020SellRe"
  "lationType\030+ \001(\005\022\030\n\020SellExerciseType\030, \001"
  "(\005\022\025\n\rSellYieldType\030- \001(\005\022\035\n\025DataMultipl"
  "ePowerOf10\030. \001(\005\0225\n\006Quotes\030/ \003(\0132%.com.h"
  "tsc.mdc.insight.model.ADFIQuote\"\267\001\n\tADFI"
  "Quote\022\023\n\013QuoteBSFlag\030\001 \001(\005\022\022\n\nQuoteLevel"
  "\030\002 \001(\005\022\017\n\007QuoteID\030\003 \001(\t\022\021\n\tQuoteTime\030\004 \001"
  "(\005\022\016\n\006Quoter\030\005 \001(\t\022\022\n\nCleanPrice\030\006 \001(\003\022\016"
  "\n\006Volume\030\007 \001(\003\022\022\n\nDirtyPrice\030\010 \001(\003\022\025\n\rMa"
  "turityYield\030\t \001(\003B2\n\032com.htsc.mdc.insigh"
  "t.modelB\017MDFIQuoteProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDFIQuote_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDFIQuote_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDFIQuote_2eproto = {
    false, false, 1357, descriptor_table_protodef_MDFIQuote_2eproto,
    "MDFIQuote.proto",
    &descriptor_table_MDFIQuote_2eproto_once, descriptor_table_MDFIQuote_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_MDFIQuote_2eproto::offsets,
    file_level_metadata_MDFIQuote_2eproto, file_level_enum_descriptors_MDFIQuote_2eproto,
    file_level_service_descriptors_MDFIQuote_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDFIQuote_2eproto_getter() {
  return &descriptor_table_MDFIQuote_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDFIQuote_2eproto(&descriptor_table_MDFIQuote_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDFIQuote::_Internal {
 public:
};

MDFIQuote::MDFIQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDFIQuote)
}
MDFIQuote::MDFIQuote(const MDFIQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDFIQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quotes_){from._impl_.quotes_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.buyquoteid_){}
    , decltype(_impl_.buyquoter_){}
    , decltype(_impl_.buyquotecomment_){}
    , decltype(_impl_.sellquoteid_){}
    , decltype(_impl_.sellquoter_){}
    , decltype(_impl_.sellquotecomment_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.messagenumber_){}
    , decltype(_impl_.accruedinterest_){}
    , decltype(_impl_.brokerdatatype_){}
    , decltype(_impl_.buyquotetime_){}
    , decltype(_impl_.buycleanprice_){}
    , decltype(_impl_.buyvolume_){}
    , decltype(_impl_.buydirtyprice_){}
    , decltype(_impl_.buymaturityyield_){}
    , decltype(_impl_.buyquotetype_){}
    , decltype(_impl_.buybargaintype_){}
    , decltype(_impl_.buyrelationtype_){}
    , decltype(_impl_.buyexercisetype_){}
    , decltype(_impl_.buyyieldtype_){}
    , decltype(_impl_.sellquotetime_){}
    , decltype(_impl_.sellcleanprice_){}
    , decltype(_impl_.sellvolume_){}
    , decltype(_impl_.selldirtyprice_){}
    , decltype(_impl_.sellmaturityyield_){}
    , decltype(_impl_.sellquotetype_){}
    , decltype(_impl_.sellbargaintype_){}
    , decltype(_impl_.sellrelationtype_){}
    , decltype(_impl_.sellexercisetype_){}
    , decltype(_impl_.sellyieldtype_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buyquoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buyquoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buyquoteid().empty()) {
    _this->_impl_.buyquoteid_.Set(from._internal_buyquoteid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buyquoter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buyquoter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buyquoter().empty()) {
    _this->_impl_.buyquoter_.Set(from._internal_buyquoter(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buyquotecomment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buyquotecomment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buyquotecomment().empty()) {
    _this->_impl_.buyquotecomment_.Set(from._internal_buyquotecomment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sellquoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellquoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sellquoteid().empty()) {
    _this->_impl_.sellquoteid_.Set(from._internal_sellquoteid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sellquoter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellquoter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sellquoter().empty()) {
    _this->_impl_.sellquoter_.Set(from._internal_sellquoter(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sellquotecomment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellquotecomment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sellquotecomment().empty()) {
    _this->_impl_.sellquotecomment_.Set(from._internal_sellquotecomment(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDFIQuote)
}

inline void MDFIQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quotes_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.buyquoteid_){}
    , decltype(_impl_.buyquoter_){}
    , decltype(_impl_.buyquotecomment_){}
    , decltype(_impl_.sellquoteid_){}
    , decltype(_impl_.sellquoter_){}
    , decltype(_impl_.sellquotecomment_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.messagenumber_){int64_t{0}}
    , decltype(_impl_.accruedinterest_){int64_t{0}}
    , decltype(_impl_.brokerdatatype_){0}
    , decltype(_impl_.buyquotetime_){0}
    , decltype(_impl_.buycleanprice_){int64_t{0}}
    , decltype(_impl_.buyvolume_){int64_t{0}}
    , decltype(_impl_.buydirtyprice_){int64_t{0}}
    , decltype(_impl_.buymaturityyield_){int64_t{0}}
    , decltype(_impl_.buyquotetype_){0}
    , decltype(_impl_.buybargaintype_){0}
    , decltype(_impl_.buyrelationtype_){0}
    , decltype(_impl_.buyexercisetype_){0}
    , decltype(_impl_.buyyieldtype_){0}
    , decltype(_impl_.sellquotetime_){0}
    , decltype(_impl_.sellcleanprice_){int64_t{0}}
    , decltype(_impl_.sellvolume_){int64_t{0}}
    , decltype(_impl_.selldirtyprice_){int64_t{0}}
    , decltype(_impl_.sellmaturityyield_){int64_t{0}}
    , decltype(_impl_.sellquotetype_){0}
    , decltype(_impl_.sellbargaintype_){0}
    , decltype(_impl_.sellrelationtype_){0}
    , decltype(_impl_.sellexercisetype_){0}
    , decltype(_impl_.sellyieldtype_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buyquoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buyquoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buyquoter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buyquoter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buyquotecomment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buyquotecomment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sellquoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellquoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sellquoter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellquoter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sellquotecomment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellquotecomment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDFIQuote::~MDFIQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDFIQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDFIQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quotes_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.buyquoteid_.Destroy();
  _impl_.buyquoter_.Destroy();
  _impl_.buyquotecomment_.Destroy();
  _impl_.sellquoteid_.Destroy();
  _impl_.sellquoter_.Destroy();
  _impl_.sellquotecomment_.Destroy();
}

void MDFIQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDFIQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDFIQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quotes_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.buyquoteid_.ClearToEmpty();
  _impl_.buyquoter_.ClearToEmpty();
  _impl_.buyquotecomment_.ClearToEmpty();
  _impl_.sellquoteid_.ClearToEmpty();
  _impl_.sellquoter_.ClearToEmpty();
  _impl_.sellquotecomment_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDFIQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFIQuote.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MessageNumber = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.messagenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BrokerDataType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.brokerdatatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AccruedInterest = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.accruedinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BuyQuoteID = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_buyquoteid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteID"));
        } else
          goto handle_unusual;
        continue;
      // int32 BuyQuoteTime = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.buyquotetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BuyQuoter = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_buyquoter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFIQuote.BuyQuoter"));
        } else
          goto handle_unusual;
        continue;
      // int64 BuyCleanPrice = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.buycleanprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BuyVolume = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.buyvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BuyDirtyPrice = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.buydirtyprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BuyMaturityYield = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.buymaturityyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BuyQuoteComment = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_buyquotecomment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteComment"));
        } else
          goto handle_unusual;
        continue;
      // int32 BuyQuoteType = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.buyquotetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BuyBargainType = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.buybargaintype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BuyRelationType = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.buyrelationtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BuyExerciseType = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.buyexercisetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BuyYieldType = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.buyyieldtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SellQuoteID = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sellquoteid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFIQuote.SellQuoteID"));
        } else
          goto handle_unusual;
        continue;
      // int32 SellQuoteTime = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sellquotetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SellQuoter = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sellquoter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFIQuote.SellQuoter"));
        } else
          goto handle_unusual;
        continue;
      // int64 SellCleanPrice = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sellcleanprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellVolume = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sellvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellDirtyPrice = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.selldirtyprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellMaturityYield = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.sellmaturityyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SellQuoteComment = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sellquotecomment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFIQuote.SellQuoteComment"));
        } else
          goto handle_unusual;
        continue;
      // int32 SellQuoteType = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.sellquotetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SellBargainType = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.sellbargaintype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SellRelationType = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.sellrelationtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SellExerciseType = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.sellexercisetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SellYieldType = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.sellyieldtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.ADFIQuote Quotes = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_quotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<378>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDFIQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDFIQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFIQuote.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // int32 ExchangeDate = 7;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 8;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_exchangetime(), target);
  }

  // int64 MessageNumber = 9;
  if (this->_internal_messagenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_messagenumber(), target);
  }

  // int32 BrokerDataType = 10;
  if (this->_internal_brokerdatatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_brokerdatatype(), target);
  }

  // int64 AccruedInterest = 11;
  if (this->_internal_accruedinterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_accruedinterest(), target);
  }

  // string BuyQuoteID = 20;
  if (!this->_internal_buyquoteid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buyquoteid().data(), static_cast<int>(this->_internal_buyquoteid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteID");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_buyquoteid(), target);
  }

  // int32 BuyQuoteTime = 21;
  if (this->_internal_buyquotetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_buyquotetime(), target);
  }

  // string BuyQuoter = 22;
  if (!this->_internal_buyquoter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buyquoter().data(), static_cast<int>(this->_internal_buyquoter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFIQuote.BuyQuoter");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_buyquoter(), target);
  }

  // int64 BuyCleanPrice = 23;
  if (this->_internal_buycleanprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_buycleanprice(), target);
  }

  // int64 BuyVolume = 24;
  if (this->_internal_buyvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_buyvolume(), target);
  }

  // int64 BuyDirtyPrice = 25;
  if (this->_internal_buydirtyprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_buydirtyprice(), target);
  }

  // int64 BuyMaturityYield = 26;
  if (this->_internal_buymaturityyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_buymaturityyield(), target);
  }

  // string BuyQuoteComment = 27;
  if (!this->_internal_buyquotecomment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buyquotecomment().data(), static_cast<int>(this->_internal_buyquotecomment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFIQuote.BuyQuoteComment");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_buyquotecomment(), target);
  }

  // int32 BuyQuoteType = 28;
  if (this->_internal_buyquotetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_buyquotetype(), target);
  }

  // int32 BuyBargainType = 29;
  if (this->_internal_buybargaintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_buybargaintype(), target);
  }

  // int32 BuyRelationType = 30;
  if (this->_internal_buyrelationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_buyrelationtype(), target);
  }

  // int32 BuyExerciseType = 31;
  if (this->_internal_buyexercisetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_buyexercisetype(), target);
  }

  // int32 BuyYieldType = 32;
  if (this->_internal_buyyieldtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_buyyieldtype(), target);
  }

  // string SellQuoteID = 33;
  if (!this->_internal_sellquoteid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sellquoteid().data(), static_cast<int>(this->_internal_sellquoteid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFIQuote.SellQuoteID");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_sellquoteid(), target);
  }

  // int32 SellQuoteTime = 34;
  if (this->_internal_sellquotetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_sellquotetime(), target);
  }

  // string SellQuoter = 35;
  if (!this->_internal_sellquoter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sellquoter().data(), static_cast<int>(this->_internal_sellquoter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFIQuote.SellQuoter");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_sellquoter(), target);
  }

  // int64 SellCleanPrice = 36;
  if (this->_internal_sellcleanprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(36, this->_internal_sellcleanprice(), target);
  }

  // int64 SellVolume = 37;
  if (this->_internal_sellvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(37, this->_internal_sellvolume(), target);
  }

  // int64 SellDirtyPrice = 38;
  if (this->_internal_selldirtyprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(38, this->_internal_selldirtyprice(), target);
  }

  // int64 SellMaturityYield = 39;
  if (this->_internal_sellmaturityyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(39, this->_internal_sellmaturityyield(), target);
  }

  // string SellQuoteComment = 40;
  if (!this->_internal_sellquotecomment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sellquotecomment().data(), static_cast<int>(this->_internal_sellquotecomment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFIQuote.SellQuoteComment");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_sellquotecomment(), target);
  }

  // int32 SellQuoteType = 41;
  if (this->_internal_sellquotetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_sellquotetype(), target);
  }

  // int32 SellBargainType = 42;
  if (this->_internal_sellbargaintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(42, this->_internal_sellbargaintype(), target);
  }

  // int32 SellRelationType = 43;
  if (this->_internal_sellrelationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(43, this->_internal_sellrelationtype(), target);
  }

  // int32 SellExerciseType = 44;
  if (this->_internal_sellexercisetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(44, this->_internal_sellexercisetype(), target);
  }

  // int32 SellYieldType = 45;
  if (this->_internal_sellyieldtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(45, this->_internal_sellyieldtype(), target);
  }

  // int32 DataMultiplePowerOf10 = 46;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_datamultiplepowerof10(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADFIQuote Quotes = 47;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quotes_size()); i < n; i++) {
    const auto& repfield = this->_internal_quotes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(47, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDFIQuote)
  return target;
}

size_t MDFIQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDFIQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.ADFIQuote Quotes = 47;
  total_size += 2UL * this->_internal_quotes_size();
  for (const auto& msg : this->_impl_.quotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string BuyQuoteID = 20;
  if (!this->_internal_buyquoteid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyquoteid());
  }

  // string BuyQuoter = 22;
  if (!this->_internal_buyquoter().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyquoter());
  }

  // string BuyQuoteComment = 27;
  if (!this->_internal_buyquotecomment().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyquotecomment());
  }

  // string SellQuoteID = 33;
  if (!this->_internal_sellquoteid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellquoteid());
  }

  // string SellQuoter = 35;
  if (!this->_internal_sellquoter().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellquoter());
  }

  // string SellQuoteComment = 40;
  if (!this->_internal_sellquotecomment().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellquotecomment());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ExchangeDate = 7;
  if (this->_internal_exchangedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 8;
  if (this->_internal_exchangetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangetime());
  }

  // int64 MessageNumber = 9;
  if (this->_internal_messagenumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagenumber());
  }

  // int64 AccruedInterest = 11;
  if (this->_internal_accruedinterest() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accruedinterest());
  }

  // int32 BrokerDataType = 10;
  if (this->_internal_brokerdatatype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_brokerdatatype());
  }

  // int32 BuyQuoteTime = 21;
  if (this->_internal_buyquotetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_buyquotetime());
  }

  // int64 BuyCleanPrice = 23;
  if (this->_internal_buycleanprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_buycleanprice());
  }

  // int64 BuyVolume = 24;
  if (this->_internal_buyvolume() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_buyvolume());
  }

  // int64 BuyDirtyPrice = 25;
  if (this->_internal_buydirtyprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_buydirtyprice());
  }

  // int64 BuyMaturityYield = 26;
  if (this->_internal_buymaturityyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_buymaturityyield());
  }

  // int32 BuyQuoteType = 28;
  if (this->_internal_buyquotetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_buyquotetype());
  }

  // int32 BuyBargainType = 29;
  if (this->_internal_buybargaintype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_buybargaintype());
  }

  // int32 BuyRelationType = 30;
  if (this->_internal_buyrelationtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_buyrelationtype());
  }

  // int32 BuyExerciseType = 31;
  if (this->_internal_buyexercisetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_buyexercisetype());
  }

  // int32 BuyYieldType = 32;
  if (this->_internal_buyyieldtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_buyyieldtype());
  }

  // int32 SellQuoteTime = 34;
  if (this->_internal_sellquotetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sellquotetime());
  }

  // int64 SellCleanPrice = 36;
  if (this->_internal_sellcleanprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sellcleanprice());
  }

  // int64 SellVolume = 37;
  if (this->_internal_sellvolume() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sellvolume());
  }

  // int64 SellDirtyPrice = 38;
  if (this->_internal_selldirtyprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_selldirtyprice());
  }

  // int64 SellMaturityYield = 39;
  if (this->_internal_sellmaturityyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sellmaturityyield());
  }

  // int32 SellQuoteType = 41;
  if (this->_internal_sellquotetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sellquotetype());
  }

  // int32 SellBargainType = 42;
  if (this->_internal_sellbargaintype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sellbargaintype());
  }

  // int32 SellRelationType = 43;
  if (this->_internal_sellrelationtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sellrelationtype());
  }

  // int32 SellExerciseType = 44;
  if (this->_internal_sellexercisetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sellexercisetype());
  }

  // int32 SellYieldType = 45;
  if (this->_internal_sellyieldtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sellyieldtype());
  }

  // int32 DataMultiplePowerOf10 = 46;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDFIQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDFIQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDFIQuote::GetClassData() const { return &_class_data_; }


void MDFIQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDFIQuote*>(&to_msg);
  auto& from = static_cast<const MDFIQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDFIQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.quotes_.MergeFrom(from._impl_.quotes_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_buyquoteid().empty()) {
    _this->_internal_set_buyquoteid(from._internal_buyquoteid());
  }
  if (!from._internal_buyquoter().empty()) {
    _this->_internal_set_buyquoter(from._internal_buyquoter());
  }
  if (!from._internal_buyquotecomment().empty()) {
    _this->_internal_set_buyquotecomment(from._internal_buyquotecomment());
  }
  if (!from._internal_sellquoteid().empty()) {
    _this->_internal_set_sellquoteid(from._internal_sellquoteid());
  }
  if (!from._internal_sellquoter().empty()) {
    _this->_internal_set_sellquoter(from._internal_sellquoter());
  }
  if (!from._internal_sellquotecomment().empty()) {
    _this->_internal_set_sellquotecomment(from._internal_sellquotecomment());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_messagenumber() != 0) {
    _this->_internal_set_messagenumber(from._internal_messagenumber());
  }
  if (from._internal_accruedinterest() != 0) {
    _this->_internal_set_accruedinterest(from._internal_accruedinterest());
  }
  if (from._internal_brokerdatatype() != 0) {
    _this->_internal_set_brokerdatatype(from._internal_brokerdatatype());
  }
  if (from._internal_buyquotetime() != 0) {
    _this->_internal_set_buyquotetime(from._internal_buyquotetime());
  }
  if (from._internal_buycleanprice() != 0) {
    _this->_internal_set_buycleanprice(from._internal_buycleanprice());
  }
  if (from._internal_buyvolume() != 0) {
    _this->_internal_set_buyvolume(from._internal_buyvolume());
  }
  if (from._internal_buydirtyprice() != 0) {
    _this->_internal_set_buydirtyprice(from._internal_buydirtyprice());
  }
  if (from._internal_buymaturityyield() != 0) {
    _this->_internal_set_buymaturityyield(from._internal_buymaturityyield());
  }
  if (from._internal_buyquotetype() != 0) {
    _this->_internal_set_buyquotetype(from._internal_buyquotetype());
  }
  if (from._internal_buybargaintype() != 0) {
    _this->_internal_set_buybargaintype(from._internal_buybargaintype());
  }
  if (from._internal_buyrelationtype() != 0) {
    _this->_internal_set_buyrelationtype(from._internal_buyrelationtype());
  }
  if (from._internal_buyexercisetype() != 0) {
    _this->_internal_set_buyexercisetype(from._internal_buyexercisetype());
  }
  if (from._internal_buyyieldtype() != 0) {
    _this->_internal_set_buyyieldtype(from._internal_buyyieldtype());
  }
  if (from._internal_sellquotetime() != 0) {
    _this->_internal_set_sellquotetime(from._internal_sellquotetime());
  }
  if (from._internal_sellcleanprice() != 0) {
    _this->_internal_set_sellcleanprice(from._internal_sellcleanprice());
  }
  if (from._internal_sellvolume() != 0) {
    _this->_internal_set_sellvolume(from._internal_sellvolume());
  }
  if (from._internal_selldirtyprice() != 0) {
    _this->_internal_set_selldirtyprice(from._internal_selldirtyprice());
  }
  if (from._internal_sellmaturityyield() != 0) {
    _this->_internal_set_sellmaturityyield(from._internal_sellmaturityyield());
  }
  if (from._internal_sellquotetype() != 0) {
    _this->_internal_set_sellquotetype(from._internal_sellquotetype());
  }
  if (from._internal_sellbargaintype() != 0) {
    _this->_internal_set_sellbargaintype(from._internal_sellbargaintype());
  }
  if (from._internal_sellrelationtype() != 0) {
    _this->_internal_set_sellrelationtype(from._internal_sellrelationtype());
  }
  if (from._internal_sellexercisetype() != 0) {
    _this->_internal_set_sellexercisetype(from._internal_sellexercisetype());
  }
  if (from._internal_sellyieldtype() != 0) {
    _this->_internal_set_sellyieldtype(from._internal_sellyieldtype());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDFIQuote::CopyFrom(const MDFIQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDFIQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDFIQuote::IsInitialized() const {
  return true;
}

void MDFIQuote::InternalSwap(MDFIQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.quotes_.InternalSwap(&other->_impl_.quotes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buyquoteid_, lhs_arena,
      &other->_impl_.buyquoteid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buyquoter_, lhs_arena,
      &other->_impl_.buyquoter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buyquotecomment_, lhs_arena,
      &other->_impl_.buyquotecomment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sellquoteid_, lhs_arena,
      &other->_impl_.sellquoteid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sellquoter_, lhs_arena,
      &other->_impl_.sellquoter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sellquotecomment_, lhs_arena,
      &other->_impl_.sellquotecomment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDFIQuote, _impl_.datamultiplepowerof10_)
      + sizeof(MDFIQuote::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDFIQuote, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDFIQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDFIQuote_2eproto_getter, &descriptor_table_MDFIQuote_2eproto_once,
      file_level_metadata_MDFIQuote_2eproto[0]);
}

// ===================================================================

class ADFIQuote::_Internal {
 public:
};

ADFIQuote::ADFIQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADFIQuote)
}
ADFIQuote::ADFIQuote(const ADFIQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADFIQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quoteid_){}
    , decltype(_impl_.quoter_){}
    , decltype(_impl_.quotebsflag_){}
    , decltype(_impl_.quotelevel_){}
    , decltype(_impl_.cleanprice_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.dirtyprice_){}
    , decltype(_impl_.maturityyield_){}
    , decltype(_impl_.quotetime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quoteid().empty()) {
    _this->_impl_.quoteid_.Set(from._internal_quoteid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.quoter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quoter().empty()) {
    _this->_impl_.quoter_.Set(from._internal_quoter(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.quotebsflag_, &from._impl_.quotebsflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quotetime_) -
    reinterpret_cast<char*>(&_impl_.quotebsflag_)) + sizeof(_impl_.quotetime_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADFIQuote)
}

inline void ADFIQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quoteid_){}
    , decltype(_impl_.quoter_){}
    , decltype(_impl_.quotebsflag_){0}
    , decltype(_impl_.quotelevel_){0}
    , decltype(_impl_.cleanprice_){int64_t{0}}
    , decltype(_impl_.volume_){int64_t{0}}
    , decltype(_impl_.dirtyprice_){int64_t{0}}
    , decltype(_impl_.maturityyield_){int64_t{0}}
    , decltype(_impl_.quotetime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quoter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADFIQuote::~ADFIQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADFIQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADFIQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quoteid_.Destroy();
  _impl_.quoter_.Destroy();
}

void ADFIQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADFIQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADFIQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quoteid_.ClearToEmpty();
  _impl_.quoter_.ClearToEmpty();
  ::memset(&_impl_.quotebsflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quotetime_) -
      reinterpret_cast<char*>(&_impl_.quotebsflag_)) + sizeof(_impl_.quotetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADFIQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 QuoteBSFlag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.quotebsflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quotelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string QuoteID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quoteid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADFIQuote.QuoteID"));
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.quotetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Quoter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_quoter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADFIQuote.Quoter"));
        } else
          goto handle_unusual;
        continue;
      // int64 CleanPrice = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cleanprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DirtyPrice = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.dirtyprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MaturityYield = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.maturityyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADFIQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADFIQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 QuoteBSFlag = 1;
  if (this->_internal_quotebsflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_quotebsflag(), target);
  }

  // int32 QuoteLevel = 2;
  if (this->_internal_quotelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_quotelevel(), target);
  }

  // string QuoteID = 3;
  if (!this->_internal_quoteid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quoteid().data(), static_cast<int>(this->_internal_quoteid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADFIQuote.QuoteID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_quoteid(), target);
  }

  // int32 QuoteTime = 4;
  if (this->_internal_quotetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_quotetime(), target);
  }

  // string Quoter = 5;
  if (!this->_internal_quoter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quoter().data(), static_cast<int>(this->_internal_quoter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADFIQuote.Quoter");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_quoter(), target);
  }

  // int64 CleanPrice = 6;
  if (this->_internal_cleanprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_cleanprice(), target);
  }

  // int64 Volume = 7;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_volume(), target);
  }

  // int64 DirtyPrice = 8;
  if (this->_internal_dirtyprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_dirtyprice(), target);
  }

  // int64 MaturityYield = 9;
  if (this->_internal_maturityyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_maturityyield(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADFIQuote)
  return target;
}

size_t ADFIQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADFIQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string QuoteID = 3;
  if (!this->_internal_quoteid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quoteid());
  }

  // string Quoter = 5;
  if (!this->_internal_quoter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quoter());
  }

  // int32 QuoteBSFlag = 1;
  if (this->_internal_quotebsflag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotebsflag());
  }

  // int32 QuoteLevel = 2;
  if (this->_internal_quotelevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotelevel());
  }

  // int64 CleanPrice = 6;
  if (this->_internal_cleanprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cleanprice());
  }

  // int64 Volume = 7;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_volume());
  }

  // int64 DirtyPrice = 8;
  if (this->_internal_dirtyprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dirtyprice());
  }

  // int64 MaturityYield = 9;
  if (this->_internal_maturityyield() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maturityyield());
  }

  // int32 QuoteTime = 4;
  if (this->_internal_quotetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADFIQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADFIQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADFIQuote::GetClassData() const { return &_class_data_; }


void ADFIQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADFIQuote*>(&to_msg);
  auto& from = static_cast<const ADFIQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADFIQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quoteid().empty()) {
    _this->_internal_set_quoteid(from._internal_quoteid());
  }
  if (!from._internal_quoter().empty()) {
    _this->_internal_set_quoter(from._internal_quoter());
  }
  if (from._internal_quotebsflag() != 0) {
    _this->_internal_set_quotebsflag(from._internal_quotebsflag());
  }
  if (from._internal_quotelevel() != 0) {
    _this->_internal_set_quotelevel(from._internal_quotelevel());
  }
  if (from._internal_cleanprice() != 0) {
    _this->_internal_set_cleanprice(from._internal_cleanprice());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_dirtyprice() != 0) {
    _this->_internal_set_dirtyprice(from._internal_dirtyprice());
  }
  if (from._internal_maturityyield() != 0) {
    _this->_internal_set_maturityyield(from._internal_maturityyield());
  }
  if (from._internal_quotetime() != 0) {
    _this->_internal_set_quotetime(from._internal_quotetime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADFIQuote::CopyFrom(const ADFIQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADFIQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADFIQuote::IsInitialized() const {
  return true;
}

void ADFIQuote::InternalSwap(ADFIQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quoteid_, lhs_arena,
      &other->_impl_.quoteid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quoter_, lhs_arena,
      &other->_impl_.quoter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADFIQuote, _impl_.quotetime_)
      + sizeof(ADFIQuote::_impl_.quotetime_)
      - PROTOBUF_FIELD_OFFSET(ADFIQuote, _impl_.quotebsflag_)>(
          reinterpret_cast<char*>(&_impl_.quotebsflag_),
          reinterpret_cast<char*>(&other->_impl_.quotebsflag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADFIQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDFIQuote_2eproto_getter, &descriptor_table_MDFIQuote_2eproto_once,
      file_level_metadata_MDFIQuote_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDFIQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDFIQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDFIQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADFIQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADFIQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADFIQuote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
