// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQuote.proto

#include "MDQuote.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDQuote::MDQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mdcashbondquotes_)*/{}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.marketindicator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.maxpx_)*/int64_t{0}
  , /*decltype(_impl_.minpx_)*/int64_t{0}
  , /*decltype(_impl_.applseqnum_)*/int64_t{0}
  , /*decltype(_impl_.channelno_)*/0
  , /*decltype(_impl_.mdbooktype_)*/0
  , /*decltype(_impl_.marketdepth_)*/0
  , /*decltype(_impl_.mdsubbooktype_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDQuoteDefaultTypeInternal() {}
  union {
    MDQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDQuoteDefaultTypeInternal _MDQuote_default_instance_;
PROTOBUF_CONSTEXPR MDCashBondQuote::MDCashBondQuote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quoteid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.settltype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.settlcurrency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradercode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.traderaccountid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quotetype_)*/0
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_.pricelevel_)*/0
  , /*decltype(_impl_.quotedate_)*/0
  , /*decltype(_impl_.cleanprice_)*/int64_t{0}
  , /*decltype(_impl_.dirtyprice_)*/int64_t{0}
  , /*decltype(_impl_.quotetime_)*/0
  , /*decltype(_impl_.clearingmethod_)*/0
  , /*decltype(_impl_.totalfacevalue_)*/int64_t{0}
  , /*decltype(_impl_.settldate_)*/0
  , /*decltype(_impl_.partyrole_)*/0
  , /*decltype(_impl_.settlcurrfxrate_)*/int64_t{0}
  , /*decltype(_impl_.maturityyield_)*/int64_t{0}
  , /*decltype(_impl_.deliverytype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDCashBondQuoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDCashBondQuoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDCashBondQuoteDefaultTypeInternal() {}
  union {
    MDCashBondQuote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDCashBondQuoteDefaultTypeInternal _MDCashBondQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDQuote_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDQuote_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDQuote_2eproto = nullptr;

const uint32_t TableStruct_MDQuote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.maxpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.minpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.channelno_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.applseqnum_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.mdbooktype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.marketindicator_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.marketdepth_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.mdsubbooktype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.mdcashbondquotes_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDQuote, _impl_.datamultiplepowerof10_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.quotetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.side_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.pricelevel_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.quoteid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.quotedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.quotetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.cleanprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.dirtyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.totalfacevalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.clearingmethod_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.settltype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.settldate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.settlcurrency_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.settlcurrfxrate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.partyrole_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.tradercode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.maturityyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.deliverytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDCashBondQuote, _impl_.traderaccountid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDQuote)},
  { 25, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDCashBondQuote)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDQuote_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_MDCashBondQuote_default_instance_._instance,
};

const char descriptor_table_protodef_MDQuote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rMDQuote.proto\022\032com.htsc.mdc.insight.mo"
  "del\032\027ESecurityIDSource.proto\032\023ESecurityT"
  "ype.proto\"\234\004\n\007MDQuote\022\026\n\016HTSCSecurityID\030"
  "\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n"
  "\rDataTimestamp\030\004 \001(\003\022\030\n\020TradingPhaseCode"
  "\030\005 \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%.com.h"
  "tsc.mdc.model.ESecurityIDSource\0227\n\014secur"
  "ityType\030\007 \001(\0162!.com.htsc.mdc.model.ESecu"
  "rityType\022\024\n\014ExchangeDate\030\010 \001(\005\022\024\n\014Exchan"
  "geTime\030\t \001(\005\022\r\n\005MaxPx\030\n \001(\003\022\r\n\005MinPx\030\013 \001"
  "(\003\022\021\n\tChannelNo\030\014 \001(\005\022\022\n\nApplSeqNum\030\r \001("
  "\003\022\022\n\nMDBookType\030\016 \001(\005\022\027\n\017MarketIndicator"
  "\030\017 \001(\t\022\023\n\013MarketDepth\030\020 \001(\005\022\025\n\rMDSubBook"
  "Type\030\021 \001(\005\022E\n\020MDCashBondQuotes\030\022 \003(\0132+.c"
  "om.htsc.mdc.insight.model.MDCashBondQuot"
  "e\022\035\n\025DataMultiplePowerOf10\030\023 \001(\005\"\230\003\n\017MDC"
  "ashBondQuote\022\021\n\tQuoteType\030\001 \001(\005\022\014\n\004Side\030"
  "\002 \001(\005\022\022\n\nPriceLevel\030\003 \001(\005\022\017\n\007QuoteID\030\004 \001"
  "(\t\022\021\n\tQuoteDate\030\005 \001(\005\022\021\n\tQuoteTime\030\006 \001(\005"
  "\022\022\n\nCleanPrice\030\007 \001(\003\022\022\n\nDirtyPrice\030\010 \001(\003"
  "\022\026\n\016TotalFaceValue\030\t \001(\003\022\026\n\016ClearingMeth"
  "od\030\n \001(\005\022\021\n\tSettlType\030\013 \001(\t\022\021\n\tSettlDate"
  "\030\014 \001(\005\022\025\n\rSettlCurrency\030\r \001(\t\022\027\n\017SettlCu"
  "rrFxRate\030\016 \001(\003\022\021\n\tPartyRole\030\017 \001(\005\022\022\n\nTra"
  "derCode\030\020 \001(\t\022\025\n\rMaturityYield\030\021 \001(\003\022\024\n\014"
  "DeliveryType\030\022 \001(\005\022\027\n\017TraderAccountID\030\023 "
  "\001(\tB0\n\032com.htsc.mdc.insight.modelB\rMDQuo"
  "teProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDQuote_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDQuote_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDQuote_2eproto = {
    false, false, 1101, descriptor_table_protodef_MDQuote_2eproto,
    "MDQuote.proto",
    &descriptor_table_MDQuote_2eproto_once, descriptor_table_MDQuote_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_MDQuote_2eproto::offsets,
    file_level_metadata_MDQuote_2eproto, file_level_enum_descriptors_MDQuote_2eproto,
    file_level_service_descriptors_MDQuote_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDQuote_2eproto_getter() {
  return &descriptor_table_MDQuote_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDQuote_2eproto(&descriptor_table_MDQuote_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQuote::_Internal {
 public:
};

MDQuote::MDQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDQuote)
}
MDQuote::MDQuote(const MDQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mdcashbondquotes_){from._impl_.mdcashbondquotes_}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.marketindicator_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.maxpx_){}
    , decltype(_impl_.minpx_){}
    , decltype(_impl_.applseqnum_){}
    , decltype(_impl_.channelno_){}
    , decltype(_impl_.mdbooktype_){}
    , decltype(_impl_.marketdepth_){}
    , decltype(_impl_.mdsubbooktype_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.marketindicator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.marketindicator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_marketindicator().empty()) {
    _this->_impl_.marketindicator_.Set(from._internal_marketindicator(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDQuote)
}

inline void MDQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mdcashbondquotes_){arena}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.marketindicator_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.maxpx_){int64_t{0}}
    , decltype(_impl_.minpx_){int64_t{0}}
    , decltype(_impl_.applseqnum_){int64_t{0}}
    , decltype(_impl_.channelno_){0}
    , decltype(_impl_.mdbooktype_){0}
    , decltype(_impl_.marketdepth_){0}
    , decltype(_impl_.mdsubbooktype_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marketindicator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.marketindicator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDQuote::~MDQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mdcashbondquotes_.~RepeatedPtrField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
  _impl_.marketindicator_.Destroy();
}

void MDQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mdcashbondquotes_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  _impl_.marketindicator_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MaxPx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.maxpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MinPx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.minpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChannelNo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.channelno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ApplSeqNum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.applseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDBookType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.mdbooktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MarketIndicator = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_marketindicator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDQuote.MarketIndicator"));
        } else
          goto handle_unusual;
        continue;
      // int32 MarketDepth = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.marketdepth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDSubBookType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.mdsubbooktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mdcashbondquotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int32 ExchangeDate = 8;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 9;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_exchangetime(), target);
  }

  // int64 MaxPx = 10;
  if (this->_internal_maxpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_maxpx(), target);
  }

  // int64 MinPx = 11;
  if (this->_internal_minpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_minpx(), target);
  }

  // int32 ChannelNo = 12;
  if (this->_internal_channelno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_channelno(), target);
  }

  // int64 ApplSeqNum = 13;
  if (this->_internal_applseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_applseqnum(), target);
  }

  // int32 MDBookType = 14;
  if (this->_internal_mdbooktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_mdbooktype(), target);
  }

  // string MarketIndicator = 15;
  if (!this->_internal_marketindicator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketindicator().data(), static_cast<int>(this->_internal_marketindicator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.MarketIndicator");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_marketindicator(), target);
  }

  // int32 MarketDepth = 16;
  if (this->_internal_marketdepth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_marketdepth(), target);
  }

  // int32 MDSubBookType = 17;
  if (this->_internal_mdsubbooktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_mdsubbooktype(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mdcashbondquotes_size()); i < n; i++) {
    const auto& repfield = this->_internal_mdcashbondquotes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 DataMultiplePowerOf10 = 19;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDQuote)
  return target;
}

size_t MDQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
  total_size += 2UL * this->_internal_mdcashbondquotes_size();
  for (const auto& msg : this->_impl_.mdcashbondquotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // string MarketIndicator = 15;
  if (!this->_internal_marketindicator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketindicator());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int32 ExchangeDate = 8;
  if (this->_internal_exchangedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 9;
  if (this->_internal_exchangetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exchangetime());
  }

  // int64 MaxPx = 10;
  if (this->_internal_maxpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maxpx());
  }

  // int64 MinPx = 11;
  if (this->_internal_minpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_minpx());
  }

  // int64 ApplSeqNum = 13;
  if (this->_internal_applseqnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_applseqnum());
  }

  // int32 ChannelNo = 12;
  if (this->_internal_channelno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelno());
  }

  // int32 MDBookType = 14;
  if (this->_internal_mdbooktype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdbooktype());
  }

  // int32 MarketDepth = 16;
  if (this->_internal_marketdepth() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_marketdepth());
  }

  // int32 MDSubBookType = 17;
  if (this->_internal_mdsubbooktype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mdsubbooktype());
  }

  // int32 DataMultiplePowerOf10 = 19;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDQuote::GetClassData() const { return &_class_data_; }


void MDQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDQuote*>(&to_msg);
  auto& from = static_cast<const MDQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mdcashbondquotes_.MergeFrom(from._impl_.mdcashbondquotes_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (!from._internal_marketindicator().empty()) {
    _this->_internal_set_marketindicator(from._internal_marketindicator());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_maxpx() != 0) {
    _this->_internal_set_maxpx(from._internal_maxpx());
  }
  if (from._internal_minpx() != 0) {
    _this->_internal_set_minpx(from._internal_minpx());
  }
  if (from._internal_applseqnum() != 0) {
    _this->_internal_set_applseqnum(from._internal_applseqnum());
  }
  if (from._internal_channelno() != 0) {
    _this->_internal_set_channelno(from._internal_channelno());
  }
  if (from._internal_mdbooktype() != 0) {
    _this->_internal_set_mdbooktype(from._internal_mdbooktype());
  }
  if (from._internal_marketdepth() != 0) {
    _this->_internal_set_marketdepth(from._internal_marketdepth());
  }
  if (from._internal_mdsubbooktype() != 0) {
    _this->_internal_set_mdsubbooktype(from._internal_mdsubbooktype());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDQuote::CopyFrom(const MDQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDQuote::IsInitialized() const {
  return true;
}

void MDQuote::InternalSwap(MDQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mdcashbondquotes_.InternalSwap(&other->_impl_.mdcashbondquotes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.marketindicator_, lhs_arena,
      &other->_impl_.marketindicator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDQuote, _impl_.datamultiplepowerof10_)
      + sizeof(MDQuote::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(MDQuote, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDQuote_2eproto_getter, &descriptor_table_MDQuote_2eproto_once,
      file_level_metadata_MDQuote_2eproto[0]);
}

// ===================================================================

class MDCashBondQuote::_Internal {
 public:
};

MDCashBondQuote::MDCashBondQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDCashBondQuote)
}
MDCashBondQuote::MDCashBondQuote(const MDCashBondQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDCashBondQuote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quoteid_){}
    , decltype(_impl_.settltype_){}
    , decltype(_impl_.settlcurrency_){}
    , decltype(_impl_.tradercode_){}
    , decltype(_impl_.traderaccountid_){}
    , decltype(_impl_.quotetype_){}
    , decltype(_impl_.side_){}
    , decltype(_impl_.pricelevel_){}
    , decltype(_impl_.quotedate_){}
    , decltype(_impl_.cleanprice_){}
    , decltype(_impl_.dirtyprice_){}
    , decltype(_impl_.quotetime_){}
    , decltype(_impl_.clearingmethod_){}
    , decltype(_impl_.totalfacevalue_){}
    , decltype(_impl_.settldate_){}
    , decltype(_impl_.partyrole_){}
    , decltype(_impl_.settlcurrfxrate_){}
    , decltype(_impl_.maturityyield_){}
    , decltype(_impl_.deliverytype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quoteid().empty()) {
    _this->_impl_.quoteid_.Set(from._internal_quoteid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.settltype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.settltype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settltype().empty()) {
    _this->_impl_.settltype_.Set(from._internal_settltype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.settlcurrency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.settlcurrency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlcurrency().empty()) {
    _this->_impl_.settlcurrency_.Set(from._internal_settlcurrency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradercode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradercode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradercode().empty()) {
    _this->_impl_.tradercode_.Set(from._internal_tradercode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.traderaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.traderaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_traderaccountid().empty()) {
    _this->_impl_.traderaccountid_.Set(from._internal_traderaccountid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.quotetype_, &from._impl_.quotetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deliverytype_) -
    reinterpret_cast<char*>(&_impl_.quotetype_)) + sizeof(_impl_.deliverytype_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCashBondQuote)
}

inline void MDCashBondQuote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quoteid_){}
    , decltype(_impl_.settltype_){}
    , decltype(_impl_.settlcurrency_){}
    , decltype(_impl_.tradercode_){}
    , decltype(_impl_.traderaccountid_){}
    , decltype(_impl_.quotetype_){0}
    , decltype(_impl_.side_){0}
    , decltype(_impl_.pricelevel_){0}
    , decltype(_impl_.quotedate_){0}
    , decltype(_impl_.cleanprice_){int64_t{0}}
    , decltype(_impl_.dirtyprice_){int64_t{0}}
    , decltype(_impl_.quotetime_){0}
    , decltype(_impl_.clearingmethod_){0}
    , decltype(_impl_.totalfacevalue_){int64_t{0}}
    , decltype(_impl_.settldate_){0}
    , decltype(_impl_.partyrole_){0}
    , decltype(_impl_.settlcurrfxrate_){int64_t{0}}
    , decltype(_impl_.maturityyield_){int64_t{0}}
    , decltype(_impl_.deliverytype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quoteid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.settltype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.settltype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.settlcurrency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.settlcurrency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradercode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradercode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.traderaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.traderaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDCashBondQuote::~MDCashBondQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCashBondQuote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDCashBondQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quoteid_.Destroy();
  _impl_.settltype_.Destroy();
  _impl_.settlcurrency_.Destroy();
  _impl_.tradercode_.Destroy();
  _impl_.traderaccountid_.Destroy();
}

void MDCashBondQuote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDCashBondQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quoteid_.ClearToEmpty();
  _impl_.settltype_.ClearToEmpty();
  _impl_.settlcurrency_.ClearToEmpty();
  _impl_.tradercode_.ClearToEmpty();
  _impl_.traderaccountid_.ClearToEmpty();
  ::memset(&_impl_.quotetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.deliverytype_) -
      reinterpret_cast<char*>(&_impl_.quotetype_)) + sizeof(_impl_.deliverytype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDCashBondQuote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 QuoteType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.quotetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PriceLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pricelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string QuoteID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quoteid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID"));
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quotedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuoteTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.quotetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CleanPrice = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cleanprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DirtyPrice = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.dirtyprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalFaceValue = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.totalfacevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ClearingMethod = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.clearingmethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SettlType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_settltype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCashBondQuote.SettlType"));
        } else
          goto handle_unusual;
        continue;
      // int32 SettlDate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.settldate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SettlCurrency = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_settlcurrency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency"));
        } else
          goto handle_unusual;
        continue;
      // int64 SettlCurrFxRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.settlcurrfxrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PartyRole = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.partyrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TraderCode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_tradercode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode"));
        } else
          goto handle_unusual;
        continue;
      // int64 MaturityYield = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.maturityyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DeliveryType = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.deliverytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TraderAccountID = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_traderaccountid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDCashBondQuote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 QuoteType = 1;
  if (this->_internal_quotetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_quotetype(), target);
  }

  // int32 Side = 2;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_side(), target);
  }

  // int32 PriceLevel = 3;
  if (this->_internal_pricelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pricelevel(), target);
  }

  // string QuoteID = 4;
  if (!this->_internal_quoteid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quoteid().data(), static_cast<int>(this->_internal_quoteid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_quoteid(), target);
  }

  // int32 QuoteDate = 5;
  if (this->_internal_quotedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quotedate(), target);
  }

  // int32 QuoteTime = 6;
  if (this->_internal_quotetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_quotetime(), target);
  }

  // int64 CleanPrice = 7;
  if (this->_internal_cleanprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_cleanprice(), target);
  }

  // int64 DirtyPrice = 8;
  if (this->_internal_dirtyprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_dirtyprice(), target);
  }

  // int64 TotalFaceValue = 9;
  if (this->_internal_totalfacevalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_totalfacevalue(), target);
  }

  // int32 ClearingMethod = 10;
  if (this->_internal_clearingmethod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_clearingmethod(), target);
  }

  // string SettlType = 11;
  if (!this->_internal_settltype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settltype().data(), static_cast<int>(this->_internal_settltype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.SettlType");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_settltype(), target);
  }

  // int32 SettlDate = 12;
  if (this->_internal_settldate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_settldate(), target);
  }

  // string SettlCurrency = 13;
  if (!this->_internal_settlcurrency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settlcurrency().data(), static_cast<int>(this->_internal_settlcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_settlcurrency(), target);
  }

  // int64 SettlCurrFxRate = 14;
  if (this->_internal_settlcurrfxrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_settlcurrfxrate(), target);
  }

  // int32 PartyRole = 15;
  if (this->_internal_partyrole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_partyrole(), target);
  }

  // string TraderCode = 16;
  if (!this->_internal_tradercode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradercode().data(), static_cast<int>(this->_internal_tradercode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_tradercode(), target);
  }

  // int64 MaturityYield = 17;
  if (this->_internal_maturityyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_maturityyield(), target);
  }

  // int32 DeliveryType = 18;
  if (this->_internal_deliverytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_deliverytype(), target);
  }

  // string TraderAccountID = 19;
  if (!this->_internal_traderaccountid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traderaccountid().data(), static_cast<int>(this->_internal_traderaccountid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_traderaccountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCashBondQuote)
  return target;
}

size_t MDCashBondQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string QuoteID = 4;
  if (!this->_internal_quoteid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quoteid());
  }

  // string SettlType = 11;
  if (!this->_internal_settltype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settltype());
  }

  // string SettlCurrency = 13;
  if (!this->_internal_settlcurrency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settlcurrency());
  }

  // string TraderCode = 16;
  if (!this->_internal_tradercode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradercode());
  }

  // string TraderAccountID = 19;
  if (!this->_internal_traderaccountid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traderaccountid());
  }

  // int32 QuoteType = 1;
  if (this->_internal_quotetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotetype());
  }

  // int32 Side = 2;
  if (this->_internal_side() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_side());
  }

  // int32 PriceLevel = 3;
  if (this->_internal_pricelevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pricelevel());
  }

  // int32 QuoteDate = 5;
  if (this->_internal_quotedate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotedate());
  }

  // int64 CleanPrice = 7;
  if (this->_internal_cleanprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cleanprice());
  }

  // int64 DirtyPrice = 8;
  if (this->_internal_dirtyprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dirtyprice());
  }

  // int32 QuoteTime = 6;
  if (this->_internal_quotetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quotetime());
  }

  // int32 ClearingMethod = 10;
  if (this->_internal_clearingmethod() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clearingmethod());
  }

  // int64 TotalFaceValue = 9;
  if (this->_internal_totalfacevalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalfacevalue());
  }

  // int32 SettlDate = 12;
  if (this->_internal_settldate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_settldate());
  }

  // int32 PartyRole = 15;
  if (this->_internal_partyrole() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partyrole());
  }

  // int64 SettlCurrFxRate = 14;
  if (this->_internal_settlcurrfxrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_settlcurrfxrate());
  }

  // int64 MaturityYield = 17;
  if (this->_internal_maturityyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_maturityyield());
  }

  // int32 DeliveryType = 18;
  if (this->_internal_deliverytype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_deliverytype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDCashBondQuote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDCashBondQuote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDCashBondQuote::GetClassData() const { return &_class_data_; }


void MDCashBondQuote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDCashBondQuote*>(&to_msg);
  auto& from = static_cast<const MDCashBondQuote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quoteid().empty()) {
    _this->_internal_set_quoteid(from._internal_quoteid());
  }
  if (!from._internal_settltype().empty()) {
    _this->_internal_set_settltype(from._internal_settltype());
  }
  if (!from._internal_settlcurrency().empty()) {
    _this->_internal_set_settlcurrency(from._internal_settlcurrency());
  }
  if (!from._internal_tradercode().empty()) {
    _this->_internal_set_tradercode(from._internal_tradercode());
  }
  if (!from._internal_traderaccountid().empty()) {
    _this->_internal_set_traderaccountid(from._internal_traderaccountid());
  }
  if (from._internal_quotetype() != 0) {
    _this->_internal_set_quotetype(from._internal_quotetype());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  if (from._internal_pricelevel() != 0) {
    _this->_internal_set_pricelevel(from._internal_pricelevel());
  }
  if (from._internal_quotedate() != 0) {
    _this->_internal_set_quotedate(from._internal_quotedate());
  }
  if (from._internal_cleanprice() != 0) {
    _this->_internal_set_cleanprice(from._internal_cleanprice());
  }
  if (from._internal_dirtyprice() != 0) {
    _this->_internal_set_dirtyprice(from._internal_dirtyprice());
  }
  if (from._internal_quotetime() != 0) {
    _this->_internal_set_quotetime(from._internal_quotetime());
  }
  if (from._internal_clearingmethod() != 0) {
    _this->_internal_set_clearingmethod(from._internal_clearingmethod());
  }
  if (from._internal_totalfacevalue() != 0) {
    _this->_internal_set_totalfacevalue(from._internal_totalfacevalue());
  }
  if (from._internal_settldate() != 0) {
    _this->_internal_set_settldate(from._internal_settldate());
  }
  if (from._internal_partyrole() != 0) {
    _this->_internal_set_partyrole(from._internal_partyrole());
  }
  if (from._internal_settlcurrfxrate() != 0) {
    _this->_internal_set_settlcurrfxrate(from._internal_settlcurrfxrate());
  }
  if (from._internal_maturityyield() != 0) {
    _this->_internal_set_maturityyield(from._internal_maturityyield());
  }
  if (from._internal_deliverytype() != 0) {
    _this->_internal_set_deliverytype(from._internal_deliverytype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDCashBondQuote::CopyFrom(const MDCashBondQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDCashBondQuote::IsInitialized() const {
  return true;
}

void MDCashBondQuote::InternalSwap(MDCashBondQuote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quoteid_, lhs_arena,
      &other->_impl_.quoteid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.settltype_, lhs_arena,
      &other->_impl_.settltype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.settlcurrency_, lhs_arena,
      &other->_impl_.settlcurrency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradercode_, lhs_arena,
      &other->_impl_.tradercode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.traderaccountid_, lhs_arena,
      &other->_impl_.traderaccountid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDCashBondQuote, _impl_.deliverytype_)
      + sizeof(MDCashBondQuote::_impl_.deliverytype_)
      - PROTOBUF_FIELD_OFFSET(MDCashBondQuote, _impl_.quotetype_)>(
          reinterpret_cast<char*>(&_impl_.quotetype_),
          reinterpret_cast<char*>(&other->_impl_.quotetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDCashBondQuote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDQuote_2eproto_getter, &descriptor_table_MDQuote_2eproto_once,
      file_level_metadata_MDQuote_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDCashBondQuote*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDCashBondQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDCashBondQuote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
