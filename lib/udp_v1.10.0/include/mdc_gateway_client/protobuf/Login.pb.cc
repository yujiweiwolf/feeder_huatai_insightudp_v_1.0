// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connectserverip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uwp_)*/nullptr
  , /*decltype(_impl_.uwt_)*/nullptr
  , /*decltype(_impl_.deviceinfo_)*/nullptr
  , /*decltype(_impl_.apptype_)*/0
  , /*decltype(_impl_.logintype_)*/0
  , /*decltype(_impl_.issupportcompressed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse::LoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lastloginip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reservedinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datasource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.site_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorcontext_)*/nullptr
  , /*decltype(_impl_.servicediscoveryresponse_)*/nullptr
  , /*decltype(_impl_.accountinfo_)*/nullptr
  , /*decltype(_impl_.lastlogintime_)*/int64_t{0}
  , /*decltype(_impl_.issuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseDefaultTypeInternal() {}
  union {
    LoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
PROTOBUF_CONSTEXPR UserWithPassword::UserWithPassword(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.otp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.captcha_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sms_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserWithPasswordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserWithPasswordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserWithPasswordDefaultTypeInternal() {}
  union {
    UserWithPassword _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserWithPasswordDefaultTypeInternal _UserWithPassword_default_instance_;
PROTOBUF_CONSTEXPR UserWithToken::UserWithToken(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserWithTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserWithTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserWithTokenDefaultTypeInternal() {}
  union {
    UserWithToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserWithTokenDefaultTypeInternal _UserWithToken_default_instance_;
PROTOBUF_CONSTEXPR DeviceInfo::DeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicemac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceharddisk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicecpu_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cellphonenumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cellphoneimei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR AccountInfo::AccountInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.startdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stopdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.customername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contactperson_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contactaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contacttel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contactemail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountInfoDefaultTypeInternal() {}
  union {
    AccountInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_Login_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Login_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Login_2eproto = nullptr;

const uint32_t TableStruct_Login_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _impl_.apptype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _impl_.appversion_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _impl_.logintype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _impl_.uwp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _impl_.uwt_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _impl_.deviceinfo_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _impl_.issupportcompressed_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginRequest, _impl_.connectserverip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.issuccess_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.errorcontext_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.lastlogintime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.lastloginip_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.reservedinfo_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.datasource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.site_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.servicediscoveryresponse_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::LoginResponse, _impl_.accountinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithPassword, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithPassword, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithPassword, _impl_.otp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithPassword, _impl_.captcha_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithPassword, _impl_.sms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithToken, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::UserWithToken, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::DeviceInfo, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::DeviceInfo, _impl_.devicemac_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::DeviceInfo, _impl_.deviceharddisk_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::DeviceInfo, _impl_.devicecpu_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::DeviceInfo, _impl_.cellphonenumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::DeviceInfo, _impl_.cellphoneimei_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _impl_.startdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _impl_.stopdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _impl_.customername_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _impl_.contactperson_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _impl_.contactaddress_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _impl_.contacttel_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::AccountInfo, _impl_.contactemail_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::LoginRequest)},
  { 14, -1, -1, sizeof(::com::htsc::mdc::insight::model::LoginResponse)},
  { 30, -1, -1, sizeof(::com::htsc::mdc::insight::model::UserWithPassword)},
  { 41, -1, -1, sizeof(::com::htsc::mdc::insight::model::UserWithToken)},
  { 49, -1, -1, sizeof(::com::htsc::mdc::insight::model::DeviceInfo)},
  { 61, -1, -1, sizeof(::com::htsc::mdc::insight::model::AccountInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_LoginRequest_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_LoginResponse_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_UserWithPassword_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_UserWithToken_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_DeviceInfo_default_instance_._instance,
  &::com::htsc::mdc::insight::model::_AccountInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Login_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Login.proto\022\032com.htsc.mdc.insight.mode"
  "l\032\026ServiceDiscovery.proto\032\031InsightErrorC"
  "ontext.proto\"\323\002\n\014LoginRequest\022\017\n\007appType"
  "\030\001 \001(\005\022\022\n\nappVersion\030\002 \001(\t\0229\n\tloginType\030"
  "\003 \001(\0162&.com.htsc.mdc.insight.model.ELogi"
  "nType\0229\n\003uwp\030\004 \001(\0132,.com.htsc.mdc.insigh"
  "t.model.UserWithPassword\0226\n\003uwt\030\005 \001(\0132)."
  "com.htsc.mdc.insight.model.UserWithToken"
  "\022:\n\ndeviceInfo\030\006 \001(\0132&.com.htsc.mdc.insi"
  "ght.model.DeviceInfo\022\033\n\023isSupportCompres"
  "sed\030\007 \001(\010\022\027\n\017connectServerIP\030\010 \001(\t\"\362\002\n\rL"
  "oginResponse\022\021\n\tisSuccess\030\001 \001(\010\022E\n\014error"
  "Context\030\002 \001(\0132/.com.htsc.mdc.insight.mod"
  "el.InsightErrorContext\022\r\n\005token\030\003 \001(\t\022\025\n"
  "\rlastLoginTime\030\004 \001(\003\022\023\n\013lastLoginIp\030\005 \001("
  "\t\022\024\n\014reservedInfo\030\006 \001(\t\022\022\n\ndataSource\030\007 "
  "\001(\t\022\014\n\004site\030\010 \001(\t\022V\n\030serviceDiscoveryRes"
  "ponse\030\t \001(\01324.com.htsc.mdc.insight.model"
  ".ServiceDiscoveryResponse\022<\n\013accountInfo"
  "\030\n \001(\0132\'.com.htsc.mdc.insight.model.Acco"
  "untInfo\"a\n\020UserWithPassword\022\020\n\010userName\030"
  "\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\013\n\003otp\030\003 \001(\t\022\017\n\007"
  "captcha\030\004 \001(\t\022\013\n\003sms\030\005 \001(\t\"0\n\rUserWithTo"
  "ken\022\020\n\010userName\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\"\214\001\n"
  "\nDeviceInfo\022\020\n\010deviceId\030\001 \001(\t\022\021\n\tdeviceM"
  "ac\030\002 \001(\t\022\026\n\016deviceHarddisk\030\003 \001(\t\022\021\n\tdevi"
  "ceCPU\030\004 \001(\t\022\027\n\017cellphoneNumber\030\005 \001(\t\022\025\n\r"
  "cellphoneImei\030\006 \001(\t\"\263\001\n\013AccountInfo\022\020\n\010u"
  "serName\030\001 \001(\t\022\021\n\tstartDate\030\002 \001(\t\022\020\n\010stop"
  "Date\030\003 \001(\t\022\024\n\014customerName\030\004 \001(\t\022\025\n\rcont"
  "actPerson\030\005 \001(\t\022\026\n\016contactAddress\030\006 \001(\t\022"
  "\022\n\ncontactTel\030\007 \001(\t\022\024\n\014contactEmail\030\010 \001("
  "\t*\201\001\n\nELoginType\022\026\n\022DEFAULT_LOGIN_TYPE\020\000"
  "\022\037\n\033INSIGHT_LOGIN_FOR_DISCOVERY\020\001\022#\n\037THR"
  "ID_PARTY_LOGIN_FOR_DISCOVERY\020\002\022\025\n\021LOGIN_"
  "FOR_SERVICE\020\003B-\n\032com.htsc.mdc.insight.mo"
  "delB\nLoginProtoH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Login_2eproto_deps[2] = {
  &::descriptor_table_InsightErrorContext_2eproto,
  &::descriptor_table_ServiceDiscovery_2eproto,
};
static ::_pbi::once_flag descriptor_table_Login_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Login_2eproto = {
    false, false, 1468, descriptor_table_protodef_Login_2eproto,
    "Login.proto",
    &descriptor_table_Login_2eproto_once, descriptor_table_Login_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_Login_2eproto::offsets,
    file_level_metadata_Login_2eproto, file_level_enum_descriptors_Login_2eproto,
    file_level_service_descriptors_Login_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Login_2eproto_getter() {
  return &descriptor_table_Login_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Login_2eproto(&descriptor_table_Login_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELoginType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Login_2eproto);
  return file_level_enum_descriptors_Login_2eproto[0];
}
bool ELoginType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LoginRequest::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::UserWithPassword& uwp(const LoginRequest* msg);
  static const ::com::htsc::mdc::insight::model::UserWithToken& uwt(const LoginRequest* msg);
  static const ::com::htsc::mdc::insight::model::DeviceInfo& deviceinfo(const LoginRequest* msg);
};

const ::com::htsc::mdc::insight::model::UserWithPassword&
LoginRequest::_Internal::uwp(const LoginRequest* msg) {
  return *msg->_impl_.uwp_;
}
const ::com::htsc::mdc::insight::model::UserWithToken&
LoginRequest::_Internal::uwt(const LoginRequest* msg) {
  return *msg->_impl_.uwt_;
}
const ::com::htsc::mdc::insight::model::DeviceInfo&
LoginRequest::_Internal::deviceinfo(const LoginRequest* msg) {
  return *msg->_impl_.deviceinfo_;
}
LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appversion_){}
    , decltype(_impl_.connectserverip_){}
    , decltype(_impl_.uwp_){nullptr}
    , decltype(_impl_.uwt_){nullptr}
    , decltype(_impl_.deviceinfo_){nullptr}
    , decltype(_impl_.apptype_){}
    , decltype(_impl_.logintype_){}
    , decltype(_impl_.issupportcompressed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appversion().empty()) {
    _this->_impl_.appversion_.Set(from._internal_appversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.connectserverip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectserverip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectserverip().empty()) {
    _this->_impl_.connectserverip_.Set(from._internal_connectserverip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_uwp()) {
    _this->_impl_.uwp_ = new ::com::htsc::mdc::insight::model::UserWithPassword(*from._impl_.uwp_);
  }
  if (from._internal_has_uwt()) {
    _this->_impl_.uwt_ = new ::com::htsc::mdc::insight::model::UserWithToken(*from._impl_.uwt_);
  }
  if (from._internal_has_deviceinfo()) {
    _this->_impl_.deviceinfo_ = new ::com::htsc::mdc::insight::model::DeviceInfo(*from._impl_.deviceinfo_);
  }
  ::memcpy(&_impl_.apptype_, &from._impl_.apptype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.issupportcompressed_) -
    reinterpret_cast<char*>(&_impl_.apptype_)) + sizeof(_impl_.issupportcompressed_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.LoginRequest)
}

inline void LoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appversion_){}
    , decltype(_impl_.connectserverip_){}
    , decltype(_impl_.uwp_){nullptr}
    , decltype(_impl_.uwt_){nullptr}
    , decltype(_impl_.deviceinfo_){nullptr}
    , decltype(_impl_.apptype_){0}
    , decltype(_impl_.logintype_){0}
    , decltype(_impl_.issupportcompressed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connectserverip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectserverip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appversion_.Destroy();
  _impl_.connectserverip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.uwp_;
  if (this != internal_default_instance()) delete _impl_.uwt_;
  if (this != internal_default_instance()) delete _impl_.deviceinfo_;
}

void LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appversion_.ClearToEmpty();
  _impl_.connectserverip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.uwp_ != nullptr) {
    delete _impl_.uwp_;
  }
  _impl_.uwp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.uwt_ != nullptr) {
    delete _impl_.uwt_;
  }
  _impl_.uwt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.deviceinfo_ != nullptr) {
    delete _impl_.deviceinfo_;
  }
  _impl_.deviceinfo_ = nullptr;
  ::memset(&_impl_.apptype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.issupportcompressed_) -
      reinterpret_cast<char*>(&_impl_.apptype_)) + sizeof(_impl_.issupportcompressed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 appType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.apptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string appVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_appversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.LoginRequest.appVersion"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ELoginType loginType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_logintype(static_cast<::com::htsc::mdc::insight::model::ELoginType>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_uwp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uwt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportCompressed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.issupportcompressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string connectServerIP = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_connectserverip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.LoginRequest.connectServerIP"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 appType = 1;
  if (this->_internal_apptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_apptype(), target);
  }

  // string appVersion = 2;
  if (!this->_internal_appversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appversion().data(), static_cast<int>(this->_internal_appversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginRequest.appVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appversion(), target);
  }

  // .com.htsc.mdc.insight.model.ELoginType loginType = 3;
  if (this->_internal_logintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_logintype(), target);
  }

  // .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
  if (this->_internal_has_uwp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::uwp(this),
        _Internal::uwp(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
  if (this->_internal_has_uwt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::uwt(this),
        _Internal::uwt(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
  if (this->_internal_has_deviceinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::deviceinfo(this),
        _Internal::deviceinfo(this).GetCachedSize(), target, stream);
  }

  // bool isSupportCompressed = 7;
  if (this->_internal_issupportcompressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_issupportcompressed(), target);
  }

  // string connectServerIP = 8;
  if (!this->_internal_connectserverip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectserverip().data(), static_cast<int>(this->_internal_connectserverip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginRequest.connectServerIP");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_connectserverip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.LoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appVersion = 2;
  if (!this->_internal_appversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appversion());
  }

  // string connectServerIP = 8;
  if (!this->_internal_connectserverip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectserverip());
  }

  // .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
  if (this->_internal_has_uwp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uwp_);
  }

  // .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
  if (this->_internal_has_uwt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uwt_);
  }

  // .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
  if (this->_internal_has_deviceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deviceinfo_);
  }

  // int32 appType = 1;
  if (this->_internal_apptype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apptype());
  }

  // .com.htsc.mdc.insight.model.ELoginType loginType = 3;
  if (this->_internal_logintype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_logintype());
  }

  // bool isSupportCompressed = 7;
  if (this->_internal_issupportcompressed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }


void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.LoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_appversion().empty()) {
    _this->_internal_set_appversion(from._internal_appversion());
  }
  if (!from._internal_connectserverip().empty()) {
    _this->_internal_set_connectserverip(from._internal_connectserverip());
  }
  if (from._internal_has_uwp()) {
    _this->_internal_mutable_uwp()->::com::htsc::mdc::insight::model::UserWithPassword::MergeFrom(
        from._internal_uwp());
  }
  if (from._internal_has_uwt()) {
    _this->_internal_mutable_uwt()->::com::htsc::mdc::insight::model::UserWithToken::MergeFrom(
        from._internal_uwt());
  }
  if (from._internal_has_deviceinfo()) {
    _this->_internal_mutable_deviceinfo()->::com::htsc::mdc::insight::model::DeviceInfo::MergeFrom(
        from._internal_deviceinfo());
  }
  if (from._internal_apptype() != 0) {
    _this->_internal_set_apptype(from._internal_apptype());
  }
  if (from._internal_logintype() != 0) {
    _this->_internal_set_logintype(from._internal_logintype());
  }
  if (from._internal_issupportcompressed() != 0) {
    _this->_internal_set_issupportcompressed(from._internal_issupportcompressed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appversion_, lhs_arena,
      &other->_impl_.appversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectserverip_, lhs_arena,
      &other->_impl_.connectserverip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.issupportcompressed_)
      + sizeof(LoginRequest::_impl_.issupportcompressed_)
      - PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.uwp_)>(
          reinterpret_cast<char*>(&_impl_.uwp_),
          reinterpret_cast<char*>(&other->_impl_.uwp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[0]);
}

// ===================================================================

class LoginResponse::_Internal {
 public:
  static const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext(const LoginResponse* msg);
  static const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& servicediscoveryresponse(const LoginResponse* msg);
  static const ::com::htsc::mdc::insight::model::AccountInfo& accountinfo(const LoginResponse* msg);
};

const ::com::htsc::mdc::insight::model::InsightErrorContext&
LoginResponse::_Internal::errorcontext(const LoginResponse* msg) {
  return *msg->_impl_.errorcontext_;
}
const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse&
LoginResponse::_Internal::servicediscoveryresponse(const LoginResponse* msg) {
  return *msg->_impl_.servicediscoveryresponse_;
}
const ::com::htsc::mdc::insight::model::AccountInfo&
LoginResponse::_Internal::accountinfo(const LoginResponse* msg) {
  return *msg->_impl_.accountinfo_;
}
void LoginResponse::clear_errorcontext() {
  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
}
void LoginResponse::clear_servicediscoveryresponse() {
  if (GetArenaForAllocation() == nullptr && _impl_.servicediscoveryresponse_ != nullptr) {
    delete _impl_.servicediscoveryresponse_;
  }
  _impl_.servicediscoveryresponse_ = nullptr;
}
LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.lastloginip_){}
    , decltype(_impl_.reservedinfo_){}
    , decltype(_impl_.datasource_){}
    , decltype(_impl_.site_){}
    , decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.servicediscoveryresponse_){nullptr}
    , decltype(_impl_.accountinfo_){nullptr}
    , decltype(_impl_.lastlogintime_){}
    , decltype(_impl_.issuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lastloginip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lastloginip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lastloginip().empty()) {
    _this->_impl_.lastloginip_.Set(from._internal_lastloginip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reservedinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reservedinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reservedinfo().empty()) {
    _this->_impl_.reservedinfo_.Set(from._internal_reservedinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.datasource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datasource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_datasource().empty()) {
    _this->_impl_.datasource_.Set(from._internal_datasource(), 
      _this->GetArenaForAllocation());
  }
  _impl_.site_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site().empty()) {
    _this->_impl_.site_.Set(from._internal_site(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_errorcontext()) {
    _this->_impl_.errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext(*from._impl_.errorcontext_);
  }
  if (from._internal_has_servicediscoveryresponse()) {
    _this->_impl_.servicediscoveryresponse_ = new ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse(*from._impl_.servicediscoveryresponse_);
  }
  if (from._internal_has_accountinfo()) {
    _this->_impl_.accountinfo_ = new ::com::htsc::mdc::insight::model::AccountInfo(*from._impl_.accountinfo_);
  }
  ::memcpy(&_impl_.lastlogintime_, &from._impl_.lastlogintime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.issuccess_) -
    reinterpret_cast<char*>(&_impl_.lastlogintime_)) + sizeof(_impl_.issuccess_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.LoginResponse)
}

inline void LoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.lastloginip_){}
    , decltype(_impl_.reservedinfo_){}
    , decltype(_impl_.datasource_){}
    , decltype(_impl_.site_){}
    , decltype(_impl_.errorcontext_){nullptr}
    , decltype(_impl_.servicediscoveryresponse_){nullptr}
    , decltype(_impl_.accountinfo_){nullptr}
    , decltype(_impl_.lastlogintime_){int64_t{0}}
    , decltype(_impl_.issuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lastloginip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lastloginip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reservedinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reservedinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.datasource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datasource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.site_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.LoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.lastloginip_.Destroy();
  _impl_.reservedinfo_.Destroy();
  _impl_.datasource_.Destroy();
  _impl_.site_.Destroy();
  if (this != internal_default_instance()) delete _impl_.errorcontext_;
  if (this != internal_default_instance()) delete _impl_.servicediscoveryresponse_;
  if (this != internal_default_instance()) delete _impl_.accountinfo_;
}

void LoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.LoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.lastloginip_.ClearToEmpty();
  _impl_.reservedinfo_.ClearToEmpty();
  _impl_.datasource_.ClearToEmpty();
  _impl_.site_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.errorcontext_ != nullptr) {
    delete _impl_.errorcontext_;
  }
  _impl_.errorcontext_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.servicediscoveryresponse_ != nullptr) {
    delete _impl_.servicediscoveryresponse_;
  }
  _impl_.servicediscoveryresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accountinfo_ != nullptr) {
    delete _impl_.accountinfo_;
  }
  _impl_.accountinfo_ = nullptr;
  ::memset(&_impl_.lastlogintime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.issuccess_) -
      reinterpret_cast<char*>(&_impl_.lastlogintime_)) + sizeof(_impl_.issuccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorcontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.LoginResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // int64 lastLoginTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lastlogintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lastLoginIp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_lastloginip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.LoginResponse.lastLoginIp"));
        } else
          goto handle_unusual;
        continue;
      // string reservedInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_reservedinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.LoginResponse.reservedInfo"));
        } else
          goto handle_unusual;
        continue;
      // string dataSource = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_datasource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.LoginResponse.dataSource"));
        } else
          goto handle_unusual;
        continue;
      // string site = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_site();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.LoginResponse.site"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_servicediscoveryresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.LoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_issuccess(), target);
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->_internal_has_errorcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::errorcontext(this),
        _Internal::errorcontext(this).GetCachedSize(), target, stream);
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // int64 lastLoginTime = 4;
  if (this->_internal_lastlogintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_lastlogintime(), target);
  }

  // string lastLoginIp = 5;
  if (!this->_internal_lastloginip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastloginip().data(), static_cast<int>(this->_internal_lastloginip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.lastLoginIp");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lastloginip(), target);
  }

  // string reservedInfo = 6;
  if (!this->_internal_reservedinfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reservedinfo().data(), static_cast<int>(this->_internal_reservedinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.reservedInfo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reservedinfo(), target);
  }

  // string dataSource = 7;
  if (!this->_internal_datasource().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datasource().data(), static_cast<int>(this->_internal_datasource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.dataSource");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_datasource(), target);
  }

  // string site = 8;
  if (!this->_internal_site().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site().data(), static_cast<int>(this->_internal_site().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.site");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_site(), target);
  }

  // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
  if (this->_internal_has_servicediscoveryresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::servicediscoveryresponse(this),
        _Internal::servicediscoveryresponse(this).GetCachedSize(), target, stream);
  }

  // .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
  if (this->_internal_has_accountinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::accountinfo(this),
        _Internal::accountinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.LoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string lastLoginIp = 5;
  if (!this->_internal_lastloginip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastloginip());
  }

  // string reservedInfo = 6;
  if (!this->_internal_reservedinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reservedinfo());
  }

  // string dataSource = 7;
  if (!this->_internal_datasource().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datasource());
  }

  // string site = 8;
  if (!this->_internal_site().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site());
  }

  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->_internal_has_errorcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.errorcontext_);
  }

  // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
  if (this->_internal_has_servicediscoveryresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.servicediscoveryresponse_);
  }

  // .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
  if (this->_internal_has_accountinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountinfo_);
  }

  // int64 lastLoginTime = 4;
  if (this->_internal_lastlogintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastlogintime());
  }

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse::GetClassData() const { return &_class_data_; }


void LoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse*>(&to_msg);
  auto& from = static_cast<const LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.LoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_lastloginip().empty()) {
    _this->_internal_set_lastloginip(from._internal_lastloginip());
  }
  if (!from._internal_reservedinfo().empty()) {
    _this->_internal_set_reservedinfo(from._internal_reservedinfo());
  }
  if (!from._internal_datasource().empty()) {
    _this->_internal_set_datasource(from._internal_datasource());
  }
  if (!from._internal_site().empty()) {
    _this->_internal_set_site(from._internal_site());
  }
  if (from._internal_has_errorcontext()) {
    _this->_internal_mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(
        from._internal_errorcontext());
  }
  if (from._internal_has_servicediscoveryresponse()) {
    _this->_internal_mutable_servicediscoveryresponse()->::com::htsc::mdc::insight::model::ServiceDiscoveryResponse::MergeFrom(
        from._internal_servicediscoveryresponse());
  }
  if (from._internal_has_accountinfo()) {
    _this->_internal_mutable_accountinfo()->::com::htsc::mdc::insight::model::AccountInfo::MergeFrom(
        from._internal_accountinfo());
  }
  if (from._internal_lastlogintime() != 0) {
    _this->_internal_set_lastlogintime(from._internal_lastlogintime());
  }
  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lastloginip_, lhs_arena,
      &other->_impl_.lastloginip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reservedinfo_, lhs_arena,
      &other->_impl_.reservedinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.datasource_, lhs_arena,
      &other->_impl_.datasource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_, lhs_arena,
      &other->_impl_.site_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.issuccess_)
      + sizeof(LoginResponse::_impl_.issuccess_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.errorcontext_)>(
          reinterpret_cast<char*>(&_impl_.errorcontext_),
          reinterpret_cast<char*>(&other->_impl_.errorcontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[1]);
}

// ===================================================================

class UserWithPassword::_Internal {
 public:
};

UserWithPassword::UserWithPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.UserWithPassword)
}
UserWithPassword::UserWithPassword(const UserWithPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserWithPassword* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.otp_){}
    , decltype(_impl_.captcha_){}
    , decltype(_impl_.sms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.otp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.otp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_otp().empty()) {
    _this->_impl_.otp_.Set(from._internal_otp(), 
      _this->GetArenaForAllocation());
  }
  _impl_.captcha_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captcha_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_captcha().empty()) {
    _this->_impl_.captcha_.Set(from._internal_captcha(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sms_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sms_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sms().empty()) {
    _this->_impl_.sms_.Set(from._internal_sms(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.UserWithPassword)
}

inline void UserWithPassword::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.otp_){}
    , decltype(_impl_.captcha_){}
    , decltype(_impl_.sms_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.otp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.otp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.captcha_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captcha_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sms_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sms_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserWithPassword::~UserWithPassword() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.UserWithPassword)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserWithPassword::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  _impl_.otp_.Destroy();
  _impl_.captcha_.Destroy();
  _impl_.sms_.Destroy();
}

void UserWithPassword::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserWithPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.UserWithPassword)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.otp_.ClearToEmpty();
  _impl_.captcha_.ClearToEmpty();
  _impl_.sms_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserWithPassword::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.UserWithPassword.userName"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.UserWithPassword.password"));
        } else
          goto handle_unusual;
        continue;
      // string otp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_otp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.UserWithPassword.otp"));
        } else
          goto handle_unusual;
        continue;
      // string captcha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_captcha();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.UserWithPassword.captcha"));
        } else
          goto handle_unusual;
        continue;
      // string sms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sms();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.UserWithPassword.sms"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserWithPassword::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.UserWithPassword)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.userName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string otp = 3;
  if (!this->_internal_otp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_otp().data(), static_cast<int>(this->_internal_otp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.otp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_otp(), target);
  }

  // string captcha = 4;
  if (!this->_internal_captcha().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captcha().data(), static_cast<int>(this->_internal_captcha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.captcha");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_captcha(), target);
  }

  // string sms = 5;
  if (!this->_internal_sms().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sms().data(), static_cast<int>(this->_internal_sms().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.sms");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.UserWithPassword)
  return target;
}

size_t UserWithPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.UserWithPassword)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string otp = 3;
  if (!this->_internal_otp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_otp());
  }

  // string captcha = 4;
  if (!this->_internal_captcha().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captcha());
  }

  // string sms = 5;
  if (!this->_internal_sms().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserWithPassword::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserWithPassword::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserWithPassword::GetClassData() const { return &_class_data_; }


void UserWithPassword::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserWithPassword*>(&to_msg);
  auto& from = static_cast<const UserWithPassword&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.UserWithPassword)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_otp().empty()) {
    _this->_internal_set_otp(from._internal_otp());
  }
  if (!from._internal_captcha().empty()) {
    _this->_internal_set_captcha(from._internal_captcha());
  }
  if (!from._internal_sms().empty()) {
    _this->_internal_set_sms(from._internal_sms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserWithPassword::CopyFrom(const UserWithPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.UserWithPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWithPassword::IsInitialized() const {
  return true;
}

void UserWithPassword::InternalSwap(UserWithPassword* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.otp_, lhs_arena,
      &other->_impl_.otp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.captcha_, lhs_arena,
      &other->_impl_.captcha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sms_, lhs_arena,
      &other->_impl_.sms_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserWithPassword::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[2]);
}

// ===================================================================

class UserWithToken::_Internal {
 public:
};

UserWithToken::UserWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.UserWithToken)
}
UserWithToken::UserWithToken(const UserWithToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserWithToken* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.UserWithToken)
}

inline void UserWithToken::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserWithToken::~UserWithToken() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.UserWithToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserWithToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.token_.Destroy();
}

void UserWithToken::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserWithToken::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.UserWithToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserWithToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.UserWithToken.userName"));
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.UserWithToken.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserWithToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.UserWithToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithToken.userName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithToken.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.UserWithToken)
  return target;
}

size_t UserWithToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.UserWithToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserWithToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserWithToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserWithToken::GetClassData() const { return &_class_data_; }


void UserWithToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserWithToken*>(&to_msg);
  auto& from = static_cast<const UserWithToken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.UserWithToken)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserWithToken::CopyFrom(const UserWithToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.UserWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWithToken::IsInitialized() const {
  return true;
}

void UserWithToken::InternalSwap(UserWithToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserWithToken::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[3]);
}

// ===================================================================

class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_){}
    , decltype(_impl_.devicemac_){}
    , decltype(_impl_.deviceharddisk_){}
    , decltype(_impl_.devicecpu_){}
    , decltype(_impl_.cellphonenumber_){}
    , decltype(_impl_.cellphoneimei_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicemac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicemac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicemac().empty()) {
    _this->_impl_.devicemac_.Set(from._internal_devicemac(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceharddisk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceharddisk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceharddisk().empty()) {
    _this->_impl_.deviceharddisk_.Set(from._internal_deviceharddisk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicecpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicecpu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicecpu().empty()) {
    _this->_impl_.devicecpu_.Set(from._internal_devicecpu(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cellphonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cellphonenumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cellphonenumber().empty()) {
    _this->_impl_.cellphonenumber_.Set(from._internal_cellphonenumber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cellphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cellphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cellphoneimei().empty()) {
    _this->_impl_.cellphoneimei_.Set(from._internal_cellphoneimei(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.DeviceInfo)
}

inline void DeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_){}
    , decltype(_impl_.devicemac_){}
    , decltype(_impl_.deviceharddisk_){}
    , decltype(_impl_.devicecpu_){}
    , decltype(_impl_.cellphonenumber_){}
    , decltype(_impl_.cellphoneimei_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicemac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicemac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceharddisk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceharddisk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicecpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicecpu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cellphonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cellphonenumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cellphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cellphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.DeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.devicemac_.Destroy();
  _impl_.deviceharddisk_.Destroy();
  _impl_.devicecpu_.Destroy();
  _impl_.cellphonenumber_.Destroy();
  _impl_.cellphoneimei_.Destroy();
}

void DeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.DeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceid_.ClearToEmpty();
  _impl_.devicemac_.ClearToEmpty();
  _impl_.deviceharddisk_.ClearToEmpty();
  _impl_.devicecpu_.ClearToEmpty();
  _impl_.cellphonenumber_.ClearToEmpty();
  _impl_.cellphoneimei_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.DeviceInfo.deviceId"));
        } else
          goto handle_unusual;
        continue;
      // string deviceMac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicemac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.DeviceInfo.deviceMac"));
        } else
          goto handle_unusual;
        continue;
      // string deviceHarddisk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_deviceharddisk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk"));
        } else
          goto handle_unusual;
        continue;
      // string deviceCPU = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_devicecpu();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.DeviceInfo.deviceCPU"));
        } else
          goto handle_unusual;
        continue;
      // string cellphoneNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cellphonenumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber"));
        } else
          goto handle_unusual;
        continue;
      // string cellphoneImei = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cellphoneimei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.DeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceId = 1;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // string deviceMac = 2;
  if (!this->_internal_devicemac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicemac().data(), static_cast<int>(this->_internal_devicemac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceMac");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicemac(), target);
  }

  // string deviceHarddisk = 3;
  if (!this->_internal_deviceharddisk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceharddisk().data(), static_cast<int>(this->_internal_deviceharddisk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deviceharddisk(), target);
  }

  // string deviceCPU = 4;
  if (!this->_internal_devicecpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicecpu().data(), static_cast<int>(this->_internal_devicecpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceCPU");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_devicecpu(), target);
  }

  // string cellphoneNumber = 5;
  if (!this->_internal_cellphonenumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cellphonenumber().data(), static_cast<int>(this->_internal_cellphonenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cellphonenumber(), target);
  }

  // string cellphoneImei = 6;
  if (!this->_internal_cellphoneimei().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cellphoneimei().data(), static_cast<int>(this->_internal_cellphoneimei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cellphoneimei(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.DeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceId = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string deviceMac = 2;
  if (!this->_internal_devicemac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicemac());
  }

  // string deviceHarddisk = 3;
  if (!this->_internal_deviceharddisk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceharddisk());
  }

  // string deviceCPU = 4;
  if (!this->_internal_devicecpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicecpu());
  }

  // string cellphoneNumber = 5;
  if (!this->_internal_cellphonenumber().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cellphonenumber());
  }

  // string cellphoneImei = 6;
  if (!this->_internal_cellphoneimei().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cellphoneimei());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }


void DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceInfo*>(&to_msg);
  auto& from = static_cast<const DeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_devicemac().empty()) {
    _this->_internal_set_devicemac(from._internal_devicemac());
  }
  if (!from._internal_deviceharddisk().empty()) {
    _this->_internal_set_deviceharddisk(from._internal_deviceharddisk());
  }
  if (!from._internal_devicecpu().empty()) {
    _this->_internal_set_devicecpu(from._internal_devicecpu());
  }
  if (!from._internal_cellphonenumber().empty()) {
    _this->_internal_set_cellphonenumber(from._internal_cellphonenumber());
  }
  if (!from._internal_cellphoneimei().empty()) {
    _this->_internal_set_cellphoneimei(from._internal_cellphoneimei());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicemac_, lhs_arena,
      &other->_impl_.devicemac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceharddisk_, lhs_arena,
      &other->_impl_.deviceharddisk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicecpu_, lhs_arena,
      &other->_impl_.devicecpu_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cellphonenumber_, lhs_arena,
      &other->_impl_.cellphonenumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cellphoneimei_, lhs_arena,
      &other->_impl_.cellphoneimei_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[4]);
}

// ===================================================================

class AccountInfo::_Internal {
 public:
};

AccountInfo::AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.AccountInfo)
}
AccountInfo::AccountInfo(const AccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.startdate_){}
    , decltype(_impl_.stopdate_){}
    , decltype(_impl_.customername_){}
    , decltype(_impl_.contactperson_){}
    , decltype(_impl_.contactaddress_){}
    , decltype(_impl_.contacttel_){}
    , decltype(_impl_.contactemail_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.startdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.startdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_startdate().empty()) {
    _this->_impl_.startdate_.Set(from._internal_startdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stopdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stopdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stopdate().empty()) {
    _this->_impl_.stopdate_.Set(from._internal_stopdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.customername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customername().empty()) {
    _this->_impl_.customername_.Set(from._internal_customername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contactperson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contactperson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contactperson().empty()) {
    _this->_impl_.contactperson_.Set(from._internal_contactperson(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contactaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contactaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contactaddress().empty()) {
    _this->_impl_.contactaddress_.Set(from._internal_contactaddress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contacttel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contacttel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contacttel().empty()) {
    _this->_impl_.contacttel_.Set(from._internal_contacttel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contactemail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contactemail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contactemail().empty()) {
    _this->_impl_.contactemail_.Set(from._internal_contactemail(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.AccountInfo)
}

inline void AccountInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.startdate_){}
    , decltype(_impl_.stopdate_){}
    , decltype(_impl_.customername_){}
    , decltype(_impl_.contactperson_){}
    , decltype(_impl_.contactaddress_){}
    , decltype(_impl_.contacttel_){}
    , decltype(_impl_.contactemail_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.startdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.startdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stopdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stopdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contactperson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contactperson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contactaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contactaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contacttel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contacttel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contactemail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contactemail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.AccountInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.startdate_.Destroy();
  _impl_.stopdate_.Destroy();
  _impl_.customername_.Destroy();
  _impl_.contactperson_.Destroy();
  _impl_.contactaddress_.Destroy();
  _impl_.contacttel_.Destroy();
  _impl_.contactemail_.Destroy();
}

void AccountInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.AccountInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.startdate_.ClearToEmpty();
  _impl_.stopdate_.ClearToEmpty();
  _impl_.customername_.ClearToEmpty();
  _impl_.contactperson_.ClearToEmpty();
  _impl_.contactaddress_.ClearToEmpty();
  _impl_.contacttel_.ClearToEmpty();
  _impl_.contactemail_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.AccountInfo.userName"));
        } else
          goto handle_unusual;
        continue;
      // string startDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_startdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.AccountInfo.startDate"));
        } else
          goto handle_unusual;
        continue;
      // string stopDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stopdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.AccountInfo.stopDate"));
        } else
          goto handle_unusual;
        continue;
      // string customerName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_customername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.AccountInfo.customerName"));
        } else
          goto handle_unusual;
        continue;
      // string contactPerson = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_contactperson();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.AccountInfo.contactPerson"));
        } else
          goto handle_unusual;
        continue;
      // string contactAddress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_contactaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.AccountInfo.contactAddress"));
        } else
          goto handle_unusual;
        continue;
      // string contactTel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_contacttel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.AccountInfo.contactTel"));
        } else
          goto handle_unusual;
        continue;
      // string contactEmail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_contactemail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.AccountInfo.contactEmail"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.AccountInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.userName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string startDate = 2;
  if (!this->_internal_startdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_startdate().data(), static_cast<int>(this->_internal_startdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.startDate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_startdate(), target);
  }

  // string stopDate = 3;
  if (!this->_internal_stopdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stopdate().data(), static_cast<int>(this->_internal_stopdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.stopDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stopdate(), target);
  }

  // string customerName = 4;
  if (!this->_internal_customername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customername().data(), static_cast<int>(this->_internal_customername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.customerName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_customername(), target);
  }

  // string contactPerson = 5;
  if (!this->_internal_contactperson().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contactperson().data(), static_cast<int>(this->_internal_contactperson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactPerson");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_contactperson(), target);
  }

  // string contactAddress = 6;
  if (!this->_internal_contactaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contactaddress().data(), static_cast<int>(this->_internal_contactaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactAddress");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_contactaddress(), target);
  }

  // string contactTel = 7;
  if (!this->_internal_contacttel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contacttel().data(), static_cast<int>(this->_internal_contacttel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactTel");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_contacttel(), target);
  }

  // string contactEmail = 8;
  if (!this->_internal_contactemail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contactemail().data(), static_cast<int>(this->_internal_contactemail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactEmail");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_contactemail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.AccountInfo)
  return target;
}

size_t AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.AccountInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string startDate = 2;
  if (!this->_internal_startdate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_startdate());
  }

  // string stopDate = 3;
  if (!this->_internal_stopdate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stopdate());
  }

  // string customerName = 4;
  if (!this->_internal_customername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customername());
  }

  // string contactPerson = 5;
  if (!this->_internal_contactperson().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contactperson());
  }

  // string contactAddress = 6;
  if (!this->_internal_contactaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contactaddress());
  }

  // string contactTel = 7;
  if (!this->_internal_contacttel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contacttel());
  }

  // string contactEmail = 8;
  if (!this->_internal_contactemail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contactemail());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountInfo::GetClassData() const { return &_class_data_; }


void AccountInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountInfo*>(&to_msg);
  auto& from = static_cast<const AccountInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.AccountInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_startdate().empty()) {
    _this->_internal_set_startdate(from._internal_startdate());
  }
  if (!from._internal_stopdate().empty()) {
    _this->_internal_set_stopdate(from._internal_stopdate());
  }
  if (!from._internal_customername().empty()) {
    _this->_internal_set_customername(from._internal_customername());
  }
  if (!from._internal_contactperson().empty()) {
    _this->_internal_set_contactperson(from._internal_contactperson());
  }
  if (!from._internal_contactaddress().empty()) {
    _this->_internal_set_contactaddress(from._internal_contactaddress());
  }
  if (!from._internal_contacttel().empty()) {
    _this->_internal_set_contacttel(from._internal_contacttel());
  }
  if (!from._internal_contactemail().empty()) {
    _this->_internal_set_contactemail(from._internal_contactemail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  return true;
}

void AccountInfo::InternalSwap(AccountInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.startdate_, lhs_arena,
      &other->_impl_.startdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stopdate_, lhs_arena,
      &other->_impl_.stopdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customername_, lhs_arena,
      &other->_impl_.customername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contactperson_, lhs_arena,
      &other->_impl_.contactperson_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contactaddress_, lhs_arena,
      &other->_impl_.contactaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contacttel_, lhs_arena,
      &other->_impl_.contacttel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contactemail_, lhs_arena,
      &other->_impl_.contactemail_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::LoginRequest*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::LoginResponse*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::UserWithPassword*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::UserWithPassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::UserWithPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::UserWithToken*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::UserWithToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::UserWithToken >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::DeviceInfo*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::AccountInfo*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::AccountInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::AccountInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
