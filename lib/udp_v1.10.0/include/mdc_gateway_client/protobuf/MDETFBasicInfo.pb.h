// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDETFBasicInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDETFBasicInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDETFBasicInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDETFBasicInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDETFBasicInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDETFBasicInfo_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDETFBasicInfo;
struct MDETFBasicInfoDefaultTypeInternal;
extern MDETFBasicInfoDefaultTypeInternal _MDETFBasicInfo_default_instance_;
class MDETFComponentDetail;
struct MDETFComponentDetailDefaultTypeInternal;
extern MDETFComponentDetailDefaultTypeInternal _MDETFComponentDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDETFBasicInfo* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDETFBasicInfo>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDETFComponentDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDETFComponentDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

enum MDETFSubstituteFlag : int {
  DEFAULT_SUBSTITUTE_FLAG = 0,
  DISALLOW_SUBSTITUTE = 1,
  ALLOW_SUBSTITUTE = 2,
  MUST_SUBSTITUTE = 3,
  MDETFSubstituteFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MDETFSubstituteFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MDETFSubstituteFlag_IsValid(int value);
constexpr MDETFSubstituteFlag MDETFSubstituteFlag_MIN = DEFAULT_SUBSTITUTE_FLAG;
constexpr MDETFSubstituteFlag MDETFSubstituteFlag_MAX = MUST_SUBSTITUTE;
constexpr int MDETFSubstituteFlag_ARRAYSIZE = MDETFSubstituteFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MDETFSubstituteFlag_descriptor();
template<typename T>
inline const std::string& MDETFSubstituteFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MDETFSubstituteFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MDETFSubstituteFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MDETFSubstituteFlag_descriptor(), enum_t_value);
}
inline bool MDETFSubstituteFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MDETFSubstituteFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MDETFSubstituteFlag>(
    MDETFSubstituteFlag_descriptor(), name, value);
}
// ===================================================================

class MDETFBasicInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDETFBasicInfo) */ {
 public:
  inline MDETFBasicInfo() : MDETFBasicInfo(nullptr) {}
  ~MDETFBasicInfo() override;
  explicit PROTOBUF_CONSTEXPR MDETFBasicInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDETFBasicInfo(const MDETFBasicInfo& from);
  MDETFBasicInfo(MDETFBasicInfo&& from) noexcept
    : MDETFBasicInfo() {
    *this = ::std::move(from);
  }

  inline MDETFBasicInfo& operator=(const MDETFBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDETFBasicInfo& operator=(MDETFBasicInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDETFBasicInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDETFBasicInfo* internal_default_instance() {
    return reinterpret_cast<const MDETFBasicInfo*>(
               &_MDETFBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDETFBasicInfo& a, MDETFBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MDETFBasicInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDETFBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDETFBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDETFBasicInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDETFBasicInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDETFBasicInfo& from) {
    MDETFBasicInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDETFBasicInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDETFBasicInfo";
  }
  protected:
  explicit MDETFBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kETFComponentsFieldNumber = 43,
    kHTSCSecurityIDFieldNumber = 1,
    kSecurityIDFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kCreationIDFieldNumber = 11,
    kCreationSymbolFieldNumber = 12,
    kRedemptionIDFieldNumber = 13,
    kRedemptionSymbolFieldNumber = 14,
    kCreationRedemptionCapitalIDFieldNumber = 15,
    kCreationRedemptionCapitalSymbolFieldNumber = 16,
    kCrossSourceCapitalIDFieldNumber = 17,
    kCrossSourceCapitalSymbolFieldNumber = 18,
    kFundManagementCompanyFieldNumber = 19,
    kUnderlyingSecurityIDFieldNumber = 20,
    kTradingDayFieldNumber = 29,
    kPreTradingDayFieldNumber = 30,
    kFormerSymbolFieldNumber = 44,
    kMDDateFieldNumber = 4,
    kMDTimeFieldNumber = 5,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kCreationRedemptionUnitFieldNumber = 22,
    kEstimateCashComponentFieldNumber = 23,
    kMaxCashRatioFieldNumber = 24,
    kRecordNumFieldNumber = 28,
    kUnderlyingSecurityIDSourceFieldNumber = 21,
    kIsPublishFieldNumber = 25,
    kIsAllowCreationFieldNumber = 26,
    kIsAllowRedemptionFieldNumber = 27,
    kCrossMarketFieldNumber = 45,
    kCashComponentFieldNumber = 31,
    kNAVperCUFieldNumber = 32,
    kNAVFieldNumber = 33,
    kDividendPerCUFieldNumber = 34,
    kCreationLimitFieldNumber = 35,
    kRedemptionLimitFieldNumber = 36,
    kCreationLimitPerUserFieldNumber = 37,
    kRedemptionLimitPerUserFieldNumber = 38,
    kNetCreationLimitFieldNumber = 39,
    kNetRedemptionLimitFieldNumber = 40,
    kNetCreationLimitPerUserFieldNumber = 41,
    kNetRedemptionLimitPerUserFieldNumber = 42,
    kDataMultiplePowerOf10FieldNumber = 46,
  };
  // repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
  int etfcomponents_size() const;
  private:
  int _internal_etfcomponents_size() const;
  public:
  void clear_etfcomponents();
  ::com::htsc::mdc::insight::model::MDETFComponentDetail* mutable_etfcomponents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDETFComponentDetail >*
      mutable_etfcomponents();
  private:
  const ::com::htsc::mdc::insight::model::MDETFComponentDetail& _internal_etfcomponents(int index) const;
  ::com::htsc::mdc::insight::model::MDETFComponentDetail* _internal_add_etfcomponents();
  public:
  const ::com::htsc::mdc::insight::model::MDETFComponentDetail& etfcomponents(int index) const;
  ::com::htsc::mdc::insight::model::MDETFComponentDetail* add_etfcomponents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDETFComponentDetail >&
      etfcomponents() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string SecurityID = 2;
  void clear_securityid();
  const std::string& securityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securityid();
  PROTOBUF_NODISCARD std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // string Symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string CreationID = 11;
  void clear_creationid();
  const std::string& creationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationid();
  PROTOBUF_NODISCARD std::string* release_creationid();
  void set_allocated_creationid(std::string* creationid);
  private:
  const std::string& _internal_creationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationid(const std::string& value);
  std::string* _internal_mutable_creationid();
  public:

  // string CreationSymbol = 12;
  void clear_creationsymbol();
  const std::string& creationsymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationsymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationsymbol();
  PROTOBUF_NODISCARD std::string* release_creationsymbol();
  void set_allocated_creationsymbol(std::string* creationsymbol);
  private:
  const std::string& _internal_creationsymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationsymbol(const std::string& value);
  std::string* _internal_mutable_creationsymbol();
  public:

  // string RedemptionID = 13;
  void clear_redemptionid();
  const std::string& redemptionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redemptionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redemptionid();
  PROTOBUF_NODISCARD std::string* release_redemptionid();
  void set_allocated_redemptionid(std::string* redemptionid);
  private:
  const std::string& _internal_redemptionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redemptionid(const std::string& value);
  std::string* _internal_mutable_redemptionid();
  public:

  // string RedemptionSymbol = 14;
  void clear_redemptionsymbol();
  const std::string& redemptionsymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redemptionsymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redemptionsymbol();
  PROTOBUF_NODISCARD std::string* release_redemptionsymbol();
  void set_allocated_redemptionsymbol(std::string* redemptionsymbol);
  private:
  const std::string& _internal_redemptionsymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redemptionsymbol(const std::string& value);
  std::string* _internal_mutable_redemptionsymbol();
  public:

  // string CreationRedemptionCapitalID = 15;
  void clear_creationredemptioncapitalid();
  const std::string& creationredemptioncapitalid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationredemptioncapitalid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationredemptioncapitalid();
  PROTOBUF_NODISCARD std::string* release_creationredemptioncapitalid();
  void set_allocated_creationredemptioncapitalid(std::string* creationredemptioncapitalid);
  private:
  const std::string& _internal_creationredemptioncapitalid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationredemptioncapitalid(const std::string& value);
  std::string* _internal_mutable_creationredemptioncapitalid();
  public:

  // string CreationRedemptionCapitalSymbol = 16;
  void clear_creationredemptioncapitalsymbol();
  const std::string& creationredemptioncapitalsymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationredemptioncapitalsymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationredemptioncapitalsymbol();
  PROTOBUF_NODISCARD std::string* release_creationredemptioncapitalsymbol();
  void set_allocated_creationredemptioncapitalsymbol(std::string* creationredemptioncapitalsymbol);
  private:
  const std::string& _internal_creationredemptioncapitalsymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationredemptioncapitalsymbol(const std::string& value);
  std::string* _internal_mutable_creationredemptioncapitalsymbol();
  public:

  // string CrossSourceCapitalID = 17;
  void clear_crosssourcecapitalid();
  const std::string& crosssourcecapitalid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crosssourcecapitalid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crosssourcecapitalid();
  PROTOBUF_NODISCARD std::string* release_crosssourcecapitalid();
  void set_allocated_crosssourcecapitalid(std::string* crosssourcecapitalid);
  private:
  const std::string& _internal_crosssourcecapitalid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crosssourcecapitalid(const std::string& value);
  std::string* _internal_mutable_crosssourcecapitalid();
  public:

  // string CrossSourceCapitalSymbol = 18;
  void clear_crosssourcecapitalsymbol();
  const std::string& crosssourcecapitalsymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crosssourcecapitalsymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crosssourcecapitalsymbol();
  PROTOBUF_NODISCARD std::string* release_crosssourcecapitalsymbol();
  void set_allocated_crosssourcecapitalsymbol(std::string* crosssourcecapitalsymbol);
  private:
  const std::string& _internal_crosssourcecapitalsymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crosssourcecapitalsymbol(const std::string& value);
  std::string* _internal_mutable_crosssourcecapitalsymbol();
  public:

  // string FundManagementCompany = 19;
  void clear_fundmanagementcompany();
  const std::string& fundmanagementcompany() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fundmanagementcompany(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fundmanagementcompany();
  PROTOBUF_NODISCARD std::string* release_fundmanagementcompany();
  void set_allocated_fundmanagementcompany(std::string* fundmanagementcompany);
  private:
  const std::string& _internal_fundmanagementcompany() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fundmanagementcompany(const std::string& value);
  std::string* _internal_mutable_fundmanagementcompany();
  public:

  // string UnderlyingSecurityID = 20;
  void clear_underlyingsecurityid();
  const std::string& underlyingsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underlyingsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underlyingsecurityid();
  PROTOBUF_NODISCARD std::string* release_underlyingsecurityid();
  void set_allocated_underlyingsecurityid(std::string* underlyingsecurityid);
  private:
  const std::string& _internal_underlyingsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlyingsecurityid(const std::string& value);
  std::string* _internal_mutable_underlyingsecurityid();
  public:

  // string TradingDay = 29;
  void clear_tradingday();
  const std::string& tradingday() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingday(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingday();
  PROTOBUF_NODISCARD std::string* release_tradingday();
  void set_allocated_tradingday(std::string* tradingday);
  private:
  const std::string& _internal_tradingday() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingday(const std::string& value);
  std::string* _internal_mutable_tradingday();
  public:

  // string PreTradingDay = 30;
  void clear_pretradingday();
  const std::string& pretradingday() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pretradingday(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pretradingday();
  PROTOBUF_NODISCARD std::string* release_pretradingday();
  void set_allocated_pretradingday(std::string* pretradingday);
  private:
  const std::string& _internal_pretradingday() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pretradingday(const std::string& value);
  std::string* _internal_mutable_pretradingday();
  public:

  // string FormerSymbol = 44;
  void clear_formersymbol();
  const std::string& formersymbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_formersymbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_formersymbol();
  PROTOBUF_NODISCARD std::string* release_formersymbol();
  void set_allocated_formersymbol(std::string* formersymbol);
  private:
  const std::string& _internal_formersymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_formersymbol(const std::string& value);
  std::string* _internal_mutable_formersymbol();
  public:

  // int32 MDDate = 4;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 5;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // double CreationRedemptionUnit = 22;
  void clear_creationredemptionunit();
  double creationredemptionunit() const;
  void set_creationredemptionunit(double value);
  private:
  double _internal_creationredemptionunit() const;
  void _internal_set_creationredemptionunit(double value);
  public:

  // double EstimateCashComponent = 23;
  void clear_estimatecashcomponent();
  double estimatecashcomponent() const;
  void set_estimatecashcomponent(double value);
  private:
  double _internal_estimatecashcomponent() const;
  void _internal_set_estimatecashcomponent(double value);
  public:

  // double MaxCashRatio = 24;
  void clear_maxcashratio();
  double maxcashratio() const;
  void set_maxcashratio(double value);
  private:
  double _internal_maxcashratio() const;
  void _internal_set_maxcashratio(double value);
  public:

  // int64 RecordNum = 28;
  void clear_recordnum();
  int64_t recordnum() const;
  void set_recordnum(int64_t value);
  private:
  int64_t _internal_recordnum() const;
  void _internal_set_recordnum(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
  void clear_underlyingsecurityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource underlyingsecurityidsource() const;
  void set_underlyingsecurityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_underlyingsecurityidsource() const;
  void _internal_set_underlyingsecurityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // bool IsPublish = 25;
  void clear_ispublish();
  bool ispublish() const;
  void set_ispublish(bool value);
  private:
  bool _internal_ispublish() const;
  void _internal_set_ispublish(bool value);
  public:

  // bool IsAllowCreation = 26;
  void clear_isallowcreation();
  bool isallowcreation() const;
  void set_isallowcreation(bool value);
  private:
  bool _internal_isallowcreation() const;
  void _internal_set_isallowcreation(bool value);
  public:

  // bool IsAllowRedemption = 27;
  void clear_isallowredemption();
  bool isallowredemption() const;
  void set_isallowredemption(bool value);
  private:
  bool _internal_isallowredemption() const;
  void _internal_set_isallowredemption(bool value);
  public:

  // bool CrossMarket = 45;
  void clear_crossmarket();
  bool crossmarket() const;
  void set_crossmarket(bool value);
  private:
  bool _internal_crossmarket() const;
  void _internal_set_crossmarket(bool value);
  public:

  // double CashComponent = 31;
  void clear_cashcomponent();
  double cashcomponent() const;
  void set_cashcomponent(double value);
  private:
  double _internal_cashcomponent() const;
  void _internal_set_cashcomponent(double value);
  public:

  // double NAVperCU = 32;
  void clear_navpercu();
  double navpercu() const;
  void set_navpercu(double value);
  private:
  double _internal_navpercu() const;
  void _internal_set_navpercu(double value);
  public:

  // double NAV = 33;
  void clear_nav();
  double nav() const;
  void set_nav(double value);
  private:
  double _internal_nav() const;
  void _internal_set_nav(double value);
  public:

  // double DividendPerCU = 34;
  void clear_dividendpercu();
  double dividendpercu() const;
  void set_dividendpercu(double value);
  private:
  double _internal_dividendpercu() const;
  void _internal_set_dividendpercu(double value);
  public:

  // double CreationLimit = 35;
  void clear_creationlimit();
  double creationlimit() const;
  void set_creationlimit(double value);
  private:
  double _internal_creationlimit() const;
  void _internal_set_creationlimit(double value);
  public:

  // double RedemptionLimit = 36;
  void clear_redemptionlimit();
  double redemptionlimit() const;
  void set_redemptionlimit(double value);
  private:
  double _internal_redemptionlimit() const;
  void _internal_set_redemptionlimit(double value);
  public:

  // double CreationLimitPerUser = 37;
  void clear_creationlimitperuser();
  double creationlimitperuser() const;
  void set_creationlimitperuser(double value);
  private:
  double _internal_creationlimitperuser() const;
  void _internal_set_creationlimitperuser(double value);
  public:

  // double RedemptionLimitPerUser = 38;
  void clear_redemptionlimitperuser();
  double redemptionlimitperuser() const;
  void set_redemptionlimitperuser(double value);
  private:
  double _internal_redemptionlimitperuser() const;
  void _internal_set_redemptionlimitperuser(double value);
  public:

  // double NetCreationLimit = 39;
  void clear_netcreationlimit();
  double netcreationlimit() const;
  void set_netcreationlimit(double value);
  private:
  double _internal_netcreationlimit() const;
  void _internal_set_netcreationlimit(double value);
  public:

  // double NetRedemptionLimit = 40;
  void clear_netredemptionlimit();
  double netredemptionlimit() const;
  void set_netredemptionlimit(double value);
  private:
  double _internal_netredemptionlimit() const;
  void _internal_set_netredemptionlimit(double value);
  public:

  // double NetCreationLimitPerUser = 41;
  void clear_netcreationlimitperuser();
  double netcreationlimitperuser() const;
  void set_netcreationlimitperuser(double value);
  private:
  double _internal_netcreationlimitperuser() const;
  void _internal_set_netcreationlimitperuser(double value);
  public:

  // double NetRedemptionLimitPerUser = 42;
  void clear_netredemptionlimitperuser();
  double netredemptionlimitperuser() const;
  void set_netredemptionlimitperuser(double value);
  private:
  double _internal_netredemptionlimitperuser() const;
  void _internal_set_netredemptionlimitperuser(double value);
  public:

  // int32 DataMultiplePowerOf10 = 46;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDETFBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDETFComponentDetail > etfcomponents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationsymbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redemptionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redemptionsymbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationredemptioncapitalid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationredemptioncapitalsymbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crosssourcecapitalid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crosssourcecapitalsymbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundmanagementcompany_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlyingsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingday_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pretradingday_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formersymbol_;
    int32_t mddate_;
    int32_t mdtime_;
    int securityidsource_;
    int securitytype_;
    double creationredemptionunit_;
    double estimatecashcomponent_;
    double maxcashratio_;
    int64_t recordnum_;
    int underlyingsecurityidsource_;
    bool ispublish_;
    bool isallowcreation_;
    bool isallowredemption_;
    bool crossmarket_;
    double cashcomponent_;
    double navpercu_;
    double nav_;
    double dividendpercu_;
    double creationlimit_;
    double redemptionlimit_;
    double creationlimitperuser_;
    double redemptionlimitperuser_;
    double netcreationlimit_;
    double netredemptionlimit_;
    double netcreationlimitperuser_;
    double netredemptionlimitperuser_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDETFBasicInfo_2eproto;
};
// -------------------------------------------------------------------

class MDETFComponentDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDETFComponentDetail) */ {
 public:
  inline MDETFComponentDetail() : MDETFComponentDetail(nullptr) {}
  ~MDETFComponentDetail() override;
  explicit PROTOBUF_CONSTEXPR MDETFComponentDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDETFComponentDetail(const MDETFComponentDetail& from);
  MDETFComponentDetail(MDETFComponentDetail&& from) noexcept
    : MDETFComponentDetail() {
    *this = ::std::move(from);
  }

  inline MDETFComponentDetail& operator=(const MDETFComponentDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDETFComponentDetail& operator=(MDETFComponentDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDETFComponentDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDETFComponentDetail* internal_default_instance() {
    return reinterpret_cast<const MDETFComponentDetail*>(
               &_MDETFComponentDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MDETFComponentDetail& a, MDETFComponentDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(MDETFComponentDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDETFComponentDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDETFComponentDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDETFComponentDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDETFComponentDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDETFComponentDetail& from) {
    MDETFComponentDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDETFComponentDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDETFComponentDetail";
  }
  protected:
  explicit MDETFComponentDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kSecurityIDFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kComponentShareFieldNumber = 5,
    kSecurityIDSourceFieldNumber = 4,
    kSubstituteFlagFieldNumber = 6,
    kPremiumRatioFieldNumber = 7,
    kCreationCashSubstituteFieldNumber = 8,
    kRedemptionCashSubstituteFieldNumber = 9,
    kTotalCashSubstituteFieldNumber = 10,
    kDiscountRatioFieldNumber = 11,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string SecurityID = 2;
  void clear_securityid();
  const std::string& securityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securityid();
  PROTOBUF_NODISCARD std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // string Symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // double ComponentShare = 5;
  void clear_componentshare();
  double componentshare() const;
  void set_componentshare(double value);
  private:
  double _internal_componentshare() const;
  void _internal_set_componentshare(double value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
  void clear_substituteflag();
  ::com::htsc::mdc::insight::model::MDETFSubstituteFlag substituteflag() const;
  void set_substituteflag(::com::htsc::mdc::insight::model::MDETFSubstituteFlag value);
  private:
  ::com::htsc::mdc::insight::model::MDETFSubstituteFlag _internal_substituteflag() const;
  void _internal_set_substituteflag(::com::htsc::mdc::insight::model::MDETFSubstituteFlag value);
  public:

  // double PremiumRatio = 7;
  void clear_premiumratio();
  double premiumratio() const;
  void set_premiumratio(double value);
  private:
  double _internal_premiumratio() const;
  void _internal_set_premiumratio(double value);
  public:

  // double CreationCashSubstitute = 8;
  void clear_creationcashsubstitute();
  double creationcashsubstitute() const;
  void set_creationcashsubstitute(double value);
  private:
  double _internal_creationcashsubstitute() const;
  void _internal_set_creationcashsubstitute(double value);
  public:

  // double RedemptionCashSubstitute = 9;
  void clear_redemptioncashsubstitute();
  double redemptioncashsubstitute() const;
  void set_redemptioncashsubstitute(double value);
  private:
  double _internal_redemptioncashsubstitute() const;
  void _internal_set_redemptioncashsubstitute(double value);
  public:

  // double TotalCashSubstitute = 10;
  void clear_totalcashsubstitute();
  double totalcashsubstitute() const;
  void set_totalcashsubstitute(double value);
  private:
  double _internal_totalcashsubstitute() const;
  void _internal_set_totalcashsubstitute(double value);
  public:

  // double DiscountRatio = 11;
  void clear_discountratio();
  double discountratio() const;
  void set_discountratio(double value);
  private:
  double _internal_discountratio() const;
  void _internal_set_discountratio(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDETFComponentDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    double componentshare_;
    int securityidsource_;
    int substituteflag_;
    double premiumratio_;
    double creationcashsubstitute_;
    double redemptioncashsubstitute_;
    double totalcashsubstitute_;
    double discountratio_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDETFBasicInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDETFBasicInfo

// string HTSCSecurityID = 1;
inline void MDETFBasicInfo::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID)
}
inline std::string* MDETFBasicInfo::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDETFBasicInfo::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDETFBasicInfo::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.HTSCSecurityID)
}

// string SecurityID = 2;
inline void MDETFBasicInfo::clear_securityid() {
  _impl_.securityid_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::securityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID)
  return _internal_securityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_securityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.securityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID)
}
inline std::string* MDETFBasicInfo::mutable_securityid() {
  std::string* _s = _internal_mutable_securityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_securityid() const {
  return _impl_.securityid_.Get();
}
inline void MDETFBasicInfo::_internal_set_securityid(const std::string& value) {
  
  _impl_.securityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_securityid() {
  
  return _impl_.securityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_securityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID)
  return _impl_.securityid_.Release();
}
inline void MDETFBasicInfo::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    
  } else {
    
  }
  _impl_.securityid_.SetAllocated(securityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securityid_.IsDefault()) {
    _impl_.securityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.SecurityID)
}

// string Symbol = 3;
inline void MDETFBasicInfo::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::symbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol)
}
inline std::string* MDETFBasicInfo::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void MDETFBasicInfo::_internal_set_symbol(const std::string& value) {
  
  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_symbol() {
  
  return _impl_.symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_symbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol)
  return _impl_.symbol_.Release();
}
inline void MDETFBasicInfo::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  _impl_.symbol_.SetAllocated(symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.Symbol)
}

// int32 MDDate = 4;
inline void MDETFBasicInfo::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDETFBasicInfo::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDETFBasicInfo::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.MDDate)
  return _internal_mddate();
}
inline void MDETFBasicInfo::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDETFBasicInfo::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.MDDate)
}

// int32 MDTime = 5;
inline void MDETFBasicInfo::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDETFBasicInfo::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDETFBasicInfo::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.MDTime)
  return _internal_mdtime();
}
inline void MDETFBasicInfo::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDETFBasicInfo::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.MDTime)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDETFBasicInfo::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDETFBasicInfo::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDETFBasicInfo::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.securityIDSource)
  return _internal_securityidsource();
}
inline void MDETFBasicInfo::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDETFBasicInfo::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDETFBasicInfo::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDETFBasicInfo::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDETFBasicInfo::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.securityType)
  return _internal_securitytype();
}
inline void MDETFBasicInfo::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDETFBasicInfo::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.securityType)
}

// string CreationID = 11;
inline void MDETFBasicInfo::clear_creationid() {
  _impl_.creationid_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::creationid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID)
  return _internal_creationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_creationid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creationid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID)
}
inline std::string* MDETFBasicInfo::mutable_creationid() {
  std::string* _s = _internal_mutable_creationid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_creationid() const {
  return _impl_.creationid_.Get();
}
inline void MDETFBasicInfo::_internal_set_creationid(const std::string& value) {
  
  _impl_.creationid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_creationid() {
  
  return _impl_.creationid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_creationid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID)
  return _impl_.creationid_.Release();
}
inline void MDETFBasicInfo::set_allocated_creationid(std::string* creationid) {
  if (creationid != nullptr) {
    
  } else {
    
  }
  _impl_.creationid_.SetAllocated(creationid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creationid_.IsDefault()) {
    _impl_.creationid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationID)
}

// string CreationSymbol = 12;
inline void MDETFBasicInfo::clear_creationsymbol() {
  _impl_.creationsymbol_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::creationsymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol)
  return _internal_creationsymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_creationsymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creationsymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol)
}
inline std::string* MDETFBasicInfo::mutable_creationsymbol() {
  std::string* _s = _internal_mutable_creationsymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_creationsymbol() const {
  return _impl_.creationsymbol_.Get();
}
inline void MDETFBasicInfo::_internal_set_creationsymbol(const std::string& value) {
  
  _impl_.creationsymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_creationsymbol() {
  
  return _impl_.creationsymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_creationsymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol)
  return _impl_.creationsymbol_.Release();
}
inline void MDETFBasicInfo::set_allocated_creationsymbol(std::string* creationsymbol) {
  if (creationsymbol != nullptr) {
    
  } else {
    
  }
  _impl_.creationsymbol_.SetAllocated(creationsymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creationsymbol_.IsDefault()) {
    _impl_.creationsymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationSymbol)
}

// string RedemptionID = 13;
inline void MDETFBasicInfo::clear_redemptionid() {
  _impl_.redemptionid_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::redemptionid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID)
  return _internal_redemptionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_redemptionid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.redemptionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID)
}
inline std::string* MDETFBasicInfo::mutable_redemptionid() {
  std::string* _s = _internal_mutable_redemptionid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_redemptionid() const {
  return _impl_.redemptionid_.Get();
}
inline void MDETFBasicInfo::_internal_set_redemptionid(const std::string& value) {
  
  _impl_.redemptionid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_redemptionid() {
  
  return _impl_.redemptionid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_redemptionid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID)
  return _impl_.redemptionid_.Release();
}
inline void MDETFBasicInfo::set_allocated_redemptionid(std::string* redemptionid) {
  if (redemptionid != nullptr) {
    
  } else {
    
  }
  _impl_.redemptionid_.SetAllocated(redemptionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redemptionid_.IsDefault()) {
    _impl_.redemptionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionID)
}

// string RedemptionSymbol = 14;
inline void MDETFBasicInfo::clear_redemptionsymbol() {
  _impl_.redemptionsymbol_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::redemptionsymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol)
  return _internal_redemptionsymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_redemptionsymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.redemptionsymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol)
}
inline std::string* MDETFBasicInfo::mutable_redemptionsymbol() {
  std::string* _s = _internal_mutable_redemptionsymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_redemptionsymbol() const {
  return _impl_.redemptionsymbol_.Get();
}
inline void MDETFBasicInfo::_internal_set_redemptionsymbol(const std::string& value) {
  
  _impl_.redemptionsymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_redemptionsymbol() {
  
  return _impl_.redemptionsymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_redemptionsymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol)
  return _impl_.redemptionsymbol_.Release();
}
inline void MDETFBasicInfo::set_allocated_redemptionsymbol(std::string* redemptionsymbol) {
  if (redemptionsymbol != nullptr) {
    
  } else {
    
  }
  _impl_.redemptionsymbol_.SetAllocated(redemptionsymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redemptionsymbol_.IsDefault()) {
    _impl_.redemptionsymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionSymbol)
}

// string CreationRedemptionCapitalID = 15;
inline void MDETFBasicInfo::clear_creationredemptioncapitalid() {
  _impl_.creationredemptioncapitalid_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::creationredemptioncapitalid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID)
  return _internal_creationredemptioncapitalid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_creationredemptioncapitalid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creationredemptioncapitalid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID)
}
inline std::string* MDETFBasicInfo::mutable_creationredemptioncapitalid() {
  std::string* _s = _internal_mutable_creationredemptioncapitalid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_creationredemptioncapitalid() const {
  return _impl_.creationredemptioncapitalid_.Get();
}
inline void MDETFBasicInfo::_internal_set_creationredemptioncapitalid(const std::string& value) {
  
  _impl_.creationredemptioncapitalid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_creationredemptioncapitalid() {
  
  return _impl_.creationredemptioncapitalid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_creationredemptioncapitalid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID)
  return _impl_.creationredemptioncapitalid_.Release();
}
inline void MDETFBasicInfo::set_allocated_creationredemptioncapitalid(std::string* creationredemptioncapitalid) {
  if (creationredemptioncapitalid != nullptr) {
    
  } else {
    
  }
  _impl_.creationredemptioncapitalid_.SetAllocated(creationredemptioncapitalid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creationredemptioncapitalid_.IsDefault()) {
    _impl_.creationredemptioncapitalid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalID)
}

// string CreationRedemptionCapitalSymbol = 16;
inline void MDETFBasicInfo::clear_creationredemptioncapitalsymbol() {
  _impl_.creationredemptioncapitalsymbol_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::creationredemptioncapitalsymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol)
  return _internal_creationredemptioncapitalsymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_creationredemptioncapitalsymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creationredemptioncapitalsymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol)
}
inline std::string* MDETFBasicInfo::mutable_creationredemptioncapitalsymbol() {
  std::string* _s = _internal_mutable_creationredemptioncapitalsymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_creationredemptioncapitalsymbol() const {
  return _impl_.creationredemptioncapitalsymbol_.Get();
}
inline void MDETFBasicInfo::_internal_set_creationredemptioncapitalsymbol(const std::string& value) {
  
  _impl_.creationredemptioncapitalsymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_creationredemptioncapitalsymbol() {
  
  return _impl_.creationredemptioncapitalsymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_creationredemptioncapitalsymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol)
  return _impl_.creationredemptioncapitalsymbol_.Release();
}
inline void MDETFBasicInfo::set_allocated_creationredemptioncapitalsymbol(std::string* creationredemptioncapitalsymbol) {
  if (creationredemptioncapitalsymbol != nullptr) {
    
  } else {
    
  }
  _impl_.creationredemptioncapitalsymbol_.SetAllocated(creationredemptioncapitalsymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creationredemptioncapitalsymbol_.IsDefault()) {
    _impl_.creationredemptioncapitalsymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionCapitalSymbol)
}

// string CrossSourceCapitalID = 17;
inline void MDETFBasicInfo::clear_crosssourcecapitalid() {
  _impl_.crosssourcecapitalid_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::crosssourcecapitalid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID)
  return _internal_crosssourcecapitalid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_crosssourcecapitalid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.crosssourcecapitalid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID)
}
inline std::string* MDETFBasicInfo::mutable_crosssourcecapitalid() {
  std::string* _s = _internal_mutable_crosssourcecapitalid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_crosssourcecapitalid() const {
  return _impl_.crosssourcecapitalid_.Get();
}
inline void MDETFBasicInfo::_internal_set_crosssourcecapitalid(const std::string& value) {
  
  _impl_.crosssourcecapitalid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_crosssourcecapitalid() {
  
  return _impl_.crosssourcecapitalid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_crosssourcecapitalid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID)
  return _impl_.crosssourcecapitalid_.Release();
}
inline void MDETFBasicInfo::set_allocated_crosssourcecapitalid(std::string* crosssourcecapitalid) {
  if (crosssourcecapitalid != nullptr) {
    
  } else {
    
  }
  _impl_.crosssourcecapitalid_.SetAllocated(crosssourcecapitalid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.crosssourcecapitalid_.IsDefault()) {
    _impl_.crosssourcecapitalid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalID)
}

// string CrossSourceCapitalSymbol = 18;
inline void MDETFBasicInfo::clear_crosssourcecapitalsymbol() {
  _impl_.crosssourcecapitalsymbol_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::crosssourcecapitalsymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol)
  return _internal_crosssourcecapitalsymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_crosssourcecapitalsymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.crosssourcecapitalsymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol)
}
inline std::string* MDETFBasicInfo::mutable_crosssourcecapitalsymbol() {
  std::string* _s = _internal_mutable_crosssourcecapitalsymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_crosssourcecapitalsymbol() const {
  return _impl_.crosssourcecapitalsymbol_.Get();
}
inline void MDETFBasicInfo::_internal_set_crosssourcecapitalsymbol(const std::string& value) {
  
  _impl_.crosssourcecapitalsymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_crosssourcecapitalsymbol() {
  
  return _impl_.crosssourcecapitalsymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_crosssourcecapitalsymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol)
  return _impl_.crosssourcecapitalsymbol_.Release();
}
inline void MDETFBasicInfo::set_allocated_crosssourcecapitalsymbol(std::string* crosssourcecapitalsymbol) {
  if (crosssourcecapitalsymbol != nullptr) {
    
  } else {
    
  }
  _impl_.crosssourcecapitalsymbol_.SetAllocated(crosssourcecapitalsymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.crosssourcecapitalsymbol_.IsDefault()) {
    _impl_.crosssourcecapitalsymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossSourceCapitalSymbol)
}

// string FundManagementCompany = 19;
inline void MDETFBasicInfo::clear_fundmanagementcompany() {
  _impl_.fundmanagementcompany_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::fundmanagementcompany() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany)
  return _internal_fundmanagementcompany();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_fundmanagementcompany(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fundmanagementcompany_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany)
}
inline std::string* MDETFBasicInfo::mutable_fundmanagementcompany() {
  std::string* _s = _internal_mutable_fundmanagementcompany();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_fundmanagementcompany() const {
  return _impl_.fundmanagementcompany_.Get();
}
inline void MDETFBasicInfo::_internal_set_fundmanagementcompany(const std::string& value) {
  
  _impl_.fundmanagementcompany_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_fundmanagementcompany() {
  
  return _impl_.fundmanagementcompany_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_fundmanagementcompany() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany)
  return _impl_.fundmanagementcompany_.Release();
}
inline void MDETFBasicInfo::set_allocated_fundmanagementcompany(std::string* fundmanagementcompany) {
  if (fundmanagementcompany != nullptr) {
    
  } else {
    
  }
  _impl_.fundmanagementcompany_.SetAllocated(fundmanagementcompany, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fundmanagementcompany_.IsDefault()) {
    _impl_.fundmanagementcompany_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.FundManagementCompany)
}

// string UnderlyingSecurityID = 20;
inline void MDETFBasicInfo::clear_underlyingsecurityid() {
  _impl_.underlyingsecurityid_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::underlyingsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID)
  return _internal_underlyingsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_underlyingsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.underlyingsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID)
}
inline std::string* MDETFBasicInfo::mutable_underlyingsecurityid() {
  std::string* _s = _internal_mutable_underlyingsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_underlyingsecurityid() const {
  return _impl_.underlyingsecurityid_.Get();
}
inline void MDETFBasicInfo::_internal_set_underlyingsecurityid(const std::string& value) {
  
  _impl_.underlyingsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_underlyingsecurityid() {
  
  return _impl_.underlyingsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_underlyingsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID)
  return _impl_.underlyingsecurityid_.Release();
}
inline void MDETFBasicInfo::set_allocated_underlyingsecurityid(std::string* underlyingsecurityid) {
  if (underlyingsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.underlyingsecurityid_.SetAllocated(underlyingsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.underlyingsecurityid_.IsDefault()) {
    _impl_.underlyingsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityID)
}

// .com.htsc.mdc.model.ESecurityIDSource UnderlyingSecurityIDSource = 21;
inline void MDETFBasicInfo::clear_underlyingsecurityidsource() {
  _impl_.underlyingsecurityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDETFBasicInfo::_internal_underlyingsecurityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.underlyingsecurityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDETFBasicInfo::underlyingsecurityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityIDSource)
  return _internal_underlyingsecurityidsource();
}
inline void MDETFBasicInfo::_internal_set_underlyingsecurityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.underlyingsecurityidsource_ = value;
}
inline void MDETFBasicInfo::set_underlyingsecurityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_underlyingsecurityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.UnderlyingSecurityIDSource)
}

// double CreationRedemptionUnit = 22;
inline void MDETFBasicInfo::clear_creationredemptionunit() {
  _impl_.creationredemptionunit_ = 0;
}
inline double MDETFBasicInfo::_internal_creationredemptionunit() const {
  return _impl_.creationredemptionunit_;
}
inline double MDETFBasicInfo::creationredemptionunit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionUnit)
  return _internal_creationredemptionunit();
}
inline void MDETFBasicInfo::_internal_set_creationredemptionunit(double value) {
  
  _impl_.creationredemptionunit_ = value;
}
inline void MDETFBasicInfo::set_creationredemptionunit(double value) {
  _internal_set_creationredemptionunit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationRedemptionUnit)
}

// double EstimateCashComponent = 23;
inline void MDETFBasicInfo::clear_estimatecashcomponent() {
  _impl_.estimatecashcomponent_ = 0;
}
inline double MDETFBasicInfo::_internal_estimatecashcomponent() const {
  return _impl_.estimatecashcomponent_;
}
inline double MDETFBasicInfo::estimatecashcomponent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.EstimateCashComponent)
  return _internal_estimatecashcomponent();
}
inline void MDETFBasicInfo::_internal_set_estimatecashcomponent(double value) {
  
  _impl_.estimatecashcomponent_ = value;
}
inline void MDETFBasicInfo::set_estimatecashcomponent(double value) {
  _internal_set_estimatecashcomponent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.EstimateCashComponent)
}

// double MaxCashRatio = 24;
inline void MDETFBasicInfo::clear_maxcashratio() {
  _impl_.maxcashratio_ = 0;
}
inline double MDETFBasicInfo::_internal_maxcashratio() const {
  return _impl_.maxcashratio_;
}
inline double MDETFBasicInfo::maxcashratio() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.MaxCashRatio)
  return _internal_maxcashratio();
}
inline void MDETFBasicInfo::_internal_set_maxcashratio(double value) {
  
  _impl_.maxcashratio_ = value;
}
inline void MDETFBasicInfo::set_maxcashratio(double value) {
  _internal_set_maxcashratio(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.MaxCashRatio)
}

// bool IsPublish = 25;
inline void MDETFBasicInfo::clear_ispublish() {
  _impl_.ispublish_ = false;
}
inline bool MDETFBasicInfo::_internal_ispublish() const {
  return _impl_.ispublish_;
}
inline bool MDETFBasicInfo::ispublish() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.IsPublish)
  return _internal_ispublish();
}
inline void MDETFBasicInfo::_internal_set_ispublish(bool value) {
  
  _impl_.ispublish_ = value;
}
inline void MDETFBasicInfo::set_ispublish(bool value) {
  _internal_set_ispublish(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.IsPublish)
}

// bool IsAllowCreation = 26;
inline void MDETFBasicInfo::clear_isallowcreation() {
  _impl_.isallowcreation_ = false;
}
inline bool MDETFBasicInfo::_internal_isallowcreation() const {
  return _impl_.isallowcreation_;
}
inline bool MDETFBasicInfo::isallowcreation() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.IsAllowCreation)
  return _internal_isallowcreation();
}
inline void MDETFBasicInfo::_internal_set_isallowcreation(bool value) {
  
  _impl_.isallowcreation_ = value;
}
inline void MDETFBasicInfo::set_isallowcreation(bool value) {
  _internal_set_isallowcreation(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.IsAllowCreation)
}

// bool IsAllowRedemption = 27;
inline void MDETFBasicInfo::clear_isallowredemption() {
  _impl_.isallowredemption_ = false;
}
inline bool MDETFBasicInfo::_internal_isallowredemption() const {
  return _impl_.isallowredemption_;
}
inline bool MDETFBasicInfo::isallowredemption() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.IsAllowRedemption)
  return _internal_isallowredemption();
}
inline void MDETFBasicInfo::_internal_set_isallowredemption(bool value) {
  
  _impl_.isallowredemption_ = value;
}
inline void MDETFBasicInfo::set_isallowredemption(bool value) {
  _internal_set_isallowredemption(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.IsAllowRedemption)
}

// int64 RecordNum = 28;
inline void MDETFBasicInfo::clear_recordnum() {
  _impl_.recordnum_ = int64_t{0};
}
inline int64_t MDETFBasicInfo::_internal_recordnum() const {
  return _impl_.recordnum_;
}
inline int64_t MDETFBasicInfo::recordnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.RecordNum)
  return _internal_recordnum();
}
inline void MDETFBasicInfo::_internal_set_recordnum(int64_t value) {
  
  _impl_.recordnum_ = value;
}
inline void MDETFBasicInfo::set_recordnum(int64_t value) {
  _internal_set_recordnum(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.RecordNum)
}

// string TradingDay = 29;
inline void MDETFBasicInfo::clear_tradingday() {
  _impl_.tradingday_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::tradingday() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay)
  return _internal_tradingday();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_tradingday(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingday_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay)
}
inline std::string* MDETFBasicInfo::mutable_tradingday() {
  std::string* _s = _internal_mutable_tradingday();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_tradingday() const {
  return _impl_.tradingday_.Get();
}
inline void MDETFBasicInfo::_internal_set_tradingday(const std::string& value) {
  
  _impl_.tradingday_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_tradingday() {
  
  return _impl_.tradingday_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_tradingday() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay)
  return _impl_.tradingday_.Release();
}
inline void MDETFBasicInfo::set_allocated_tradingday(std::string* tradingday) {
  if (tradingday != nullptr) {
    
  } else {
    
  }
  _impl_.tradingday_.SetAllocated(tradingday, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingday_.IsDefault()) {
    _impl_.tradingday_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.TradingDay)
}

// string PreTradingDay = 30;
inline void MDETFBasicInfo::clear_pretradingday() {
  _impl_.pretradingday_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::pretradingday() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay)
  return _internal_pretradingday();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_pretradingday(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pretradingday_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay)
}
inline std::string* MDETFBasicInfo::mutable_pretradingday() {
  std::string* _s = _internal_mutable_pretradingday();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_pretradingday() const {
  return _impl_.pretradingday_.Get();
}
inline void MDETFBasicInfo::_internal_set_pretradingday(const std::string& value) {
  
  _impl_.pretradingday_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_pretradingday() {
  
  return _impl_.pretradingday_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_pretradingday() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay)
  return _impl_.pretradingday_.Release();
}
inline void MDETFBasicInfo::set_allocated_pretradingday(std::string* pretradingday) {
  if (pretradingday != nullptr) {
    
  } else {
    
  }
  _impl_.pretradingday_.SetAllocated(pretradingday, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pretradingday_.IsDefault()) {
    _impl_.pretradingday_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.PreTradingDay)
}

// double CashComponent = 31;
inline void MDETFBasicInfo::clear_cashcomponent() {
  _impl_.cashcomponent_ = 0;
}
inline double MDETFBasicInfo::_internal_cashcomponent() const {
  return _impl_.cashcomponent_;
}
inline double MDETFBasicInfo::cashcomponent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CashComponent)
  return _internal_cashcomponent();
}
inline void MDETFBasicInfo::_internal_set_cashcomponent(double value) {
  
  _impl_.cashcomponent_ = value;
}
inline void MDETFBasicInfo::set_cashcomponent(double value) {
  _internal_set_cashcomponent(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CashComponent)
}

// double NAVperCU = 32;
inline void MDETFBasicInfo::clear_navpercu() {
  _impl_.navpercu_ = 0;
}
inline double MDETFBasicInfo::_internal_navpercu() const {
  return _impl_.navpercu_;
}
inline double MDETFBasicInfo::navpercu() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.NAVperCU)
  return _internal_navpercu();
}
inline void MDETFBasicInfo::_internal_set_navpercu(double value) {
  
  _impl_.navpercu_ = value;
}
inline void MDETFBasicInfo::set_navpercu(double value) {
  _internal_set_navpercu(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.NAVperCU)
}

// double NAV = 33;
inline void MDETFBasicInfo::clear_nav() {
  _impl_.nav_ = 0;
}
inline double MDETFBasicInfo::_internal_nav() const {
  return _impl_.nav_;
}
inline double MDETFBasicInfo::nav() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.NAV)
  return _internal_nav();
}
inline void MDETFBasicInfo::_internal_set_nav(double value) {
  
  _impl_.nav_ = value;
}
inline void MDETFBasicInfo::set_nav(double value) {
  _internal_set_nav(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.NAV)
}

// double DividendPerCU = 34;
inline void MDETFBasicInfo::clear_dividendpercu() {
  _impl_.dividendpercu_ = 0;
}
inline double MDETFBasicInfo::_internal_dividendpercu() const {
  return _impl_.dividendpercu_;
}
inline double MDETFBasicInfo::dividendpercu() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.DividendPerCU)
  return _internal_dividendpercu();
}
inline void MDETFBasicInfo::_internal_set_dividendpercu(double value) {
  
  _impl_.dividendpercu_ = value;
}
inline void MDETFBasicInfo::set_dividendpercu(double value) {
  _internal_set_dividendpercu(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.DividendPerCU)
}

// double CreationLimit = 35;
inline void MDETFBasicInfo::clear_creationlimit() {
  _impl_.creationlimit_ = 0;
}
inline double MDETFBasicInfo::_internal_creationlimit() const {
  return _impl_.creationlimit_;
}
inline double MDETFBasicInfo::creationlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationLimit)
  return _internal_creationlimit();
}
inline void MDETFBasicInfo::_internal_set_creationlimit(double value) {
  
  _impl_.creationlimit_ = value;
}
inline void MDETFBasicInfo::set_creationlimit(double value) {
  _internal_set_creationlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationLimit)
}

// double RedemptionLimit = 36;
inline void MDETFBasicInfo::clear_redemptionlimit() {
  _impl_.redemptionlimit_ = 0;
}
inline double MDETFBasicInfo::_internal_redemptionlimit() const {
  return _impl_.redemptionlimit_;
}
inline double MDETFBasicInfo::redemptionlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionLimit)
  return _internal_redemptionlimit();
}
inline void MDETFBasicInfo::_internal_set_redemptionlimit(double value) {
  
  _impl_.redemptionlimit_ = value;
}
inline void MDETFBasicInfo::set_redemptionlimit(double value) {
  _internal_set_redemptionlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionLimit)
}

// double CreationLimitPerUser = 37;
inline void MDETFBasicInfo::clear_creationlimitperuser() {
  _impl_.creationlimitperuser_ = 0;
}
inline double MDETFBasicInfo::_internal_creationlimitperuser() const {
  return _impl_.creationlimitperuser_;
}
inline double MDETFBasicInfo::creationlimitperuser() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationLimitPerUser)
  return _internal_creationlimitperuser();
}
inline void MDETFBasicInfo::_internal_set_creationlimitperuser(double value) {
  
  _impl_.creationlimitperuser_ = value;
}
inline void MDETFBasicInfo::set_creationlimitperuser(double value) {
  _internal_set_creationlimitperuser(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CreationLimitPerUser)
}

// double RedemptionLimitPerUser = 38;
inline void MDETFBasicInfo::clear_redemptionlimitperuser() {
  _impl_.redemptionlimitperuser_ = 0;
}
inline double MDETFBasicInfo::_internal_redemptionlimitperuser() const {
  return _impl_.redemptionlimitperuser_;
}
inline double MDETFBasicInfo::redemptionlimitperuser() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionLimitPerUser)
  return _internal_redemptionlimitperuser();
}
inline void MDETFBasicInfo::_internal_set_redemptionlimitperuser(double value) {
  
  _impl_.redemptionlimitperuser_ = value;
}
inline void MDETFBasicInfo::set_redemptionlimitperuser(double value) {
  _internal_set_redemptionlimitperuser(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.RedemptionLimitPerUser)
}

// double NetCreationLimit = 39;
inline void MDETFBasicInfo::clear_netcreationlimit() {
  _impl_.netcreationlimit_ = 0;
}
inline double MDETFBasicInfo::_internal_netcreationlimit() const {
  return _impl_.netcreationlimit_;
}
inline double MDETFBasicInfo::netcreationlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.NetCreationLimit)
  return _internal_netcreationlimit();
}
inline void MDETFBasicInfo::_internal_set_netcreationlimit(double value) {
  
  _impl_.netcreationlimit_ = value;
}
inline void MDETFBasicInfo::set_netcreationlimit(double value) {
  _internal_set_netcreationlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.NetCreationLimit)
}

// double NetRedemptionLimit = 40;
inline void MDETFBasicInfo::clear_netredemptionlimit() {
  _impl_.netredemptionlimit_ = 0;
}
inline double MDETFBasicInfo::_internal_netredemptionlimit() const {
  return _impl_.netredemptionlimit_;
}
inline double MDETFBasicInfo::netredemptionlimit() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.NetRedemptionLimit)
  return _internal_netredemptionlimit();
}
inline void MDETFBasicInfo::_internal_set_netredemptionlimit(double value) {
  
  _impl_.netredemptionlimit_ = value;
}
inline void MDETFBasicInfo::set_netredemptionlimit(double value) {
  _internal_set_netredemptionlimit(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.NetRedemptionLimit)
}

// double NetCreationLimitPerUser = 41;
inline void MDETFBasicInfo::clear_netcreationlimitperuser() {
  _impl_.netcreationlimitperuser_ = 0;
}
inline double MDETFBasicInfo::_internal_netcreationlimitperuser() const {
  return _impl_.netcreationlimitperuser_;
}
inline double MDETFBasicInfo::netcreationlimitperuser() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.NetCreationLimitPerUser)
  return _internal_netcreationlimitperuser();
}
inline void MDETFBasicInfo::_internal_set_netcreationlimitperuser(double value) {
  
  _impl_.netcreationlimitperuser_ = value;
}
inline void MDETFBasicInfo::set_netcreationlimitperuser(double value) {
  _internal_set_netcreationlimitperuser(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.NetCreationLimitPerUser)
}

// double NetRedemptionLimitPerUser = 42;
inline void MDETFBasicInfo::clear_netredemptionlimitperuser() {
  _impl_.netredemptionlimitperuser_ = 0;
}
inline double MDETFBasicInfo::_internal_netredemptionlimitperuser() const {
  return _impl_.netredemptionlimitperuser_;
}
inline double MDETFBasicInfo::netredemptionlimitperuser() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.NetRedemptionLimitPerUser)
  return _internal_netredemptionlimitperuser();
}
inline void MDETFBasicInfo::_internal_set_netredemptionlimitperuser(double value) {
  
  _impl_.netredemptionlimitperuser_ = value;
}
inline void MDETFBasicInfo::set_netredemptionlimitperuser(double value) {
  _internal_set_netredemptionlimitperuser(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.NetRedemptionLimitPerUser)
}

// repeated .com.htsc.mdc.insight.model.MDETFComponentDetail ETFComponents = 43;
inline int MDETFBasicInfo::_internal_etfcomponents_size() const {
  return _impl_.etfcomponents_.size();
}
inline int MDETFBasicInfo::etfcomponents_size() const {
  return _internal_etfcomponents_size();
}
inline void MDETFBasicInfo::clear_etfcomponents() {
  _impl_.etfcomponents_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDETFComponentDetail* MDETFBasicInfo::mutable_etfcomponents(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.ETFComponents)
  return _impl_.etfcomponents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDETFComponentDetail >*
MDETFBasicInfo::mutable_etfcomponents() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDETFBasicInfo.ETFComponents)
  return &_impl_.etfcomponents_;
}
inline const ::com::htsc::mdc::insight::model::MDETFComponentDetail& MDETFBasicInfo::_internal_etfcomponents(int index) const {
  return _impl_.etfcomponents_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::MDETFComponentDetail& MDETFBasicInfo::etfcomponents(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.ETFComponents)
  return _internal_etfcomponents(index);
}
inline ::com::htsc::mdc::insight::model::MDETFComponentDetail* MDETFBasicInfo::_internal_add_etfcomponents() {
  return _impl_.etfcomponents_.Add();
}
inline ::com::htsc::mdc::insight::model::MDETFComponentDetail* MDETFBasicInfo::add_etfcomponents() {
  ::com::htsc::mdc::insight::model::MDETFComponentDetail* _add = _internal_add_etfcomponents();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDETFBasicInfo.ETFComponents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDETFComponentDetail >&
MDETFBasicInfo::etfcomponents() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDETFBasicInfo.ETFComponents)
  return _impl_.etfcomponents_;
}

// string FormerSymbol = 44;
inline void MDETFBasicInfo::clear_formersymbol() {
  _impl_.formersymbol_.ClearToEmpty();
}
inline const std::string& MDETFBasicInfo::formersymbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol)
  return _internal_formersymbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFBasicInfo::set_formersymbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.formersymbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol)
}
inline std::string* MDETFBasicInfo::mutable_formersymbol() {
  std::string* _s = _internal_mutable_formersymbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol)
  return _s;
}
inline const std::string& MDETFBasicInfo::_internal_formersymbol() const {
  return _impl_.formersymbol_.Get();
}
inline void MDETFBasicInfo::_internal_set_formersymbol(const std::string& value) {
  
  _impl_.formersymbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::_internal_mutable_formersymbol() {
  
  return _impl_.formersymbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFBasicInfo::release_formersymbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol)
  return _impl_.formersymbol_.Release();
}
inline void MDETFBasicInfo::set_allocated_formersymbol(std::string* formersymbol) {
  if (formersymbol != nullptr) {
    
  } else {
    
  }
  _impl_.formersymbol_.SetAllocated(formersymbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.formersymbol_.IsDefault()) {
    _impl_.formersymbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFBasicInfo.FormerSymbol)
}

// bool CrossMarket = 45;
inline void MDETFBasicInfo::clear_crossmarket() {
  _impl_.crossmarket_ = false;
}
inline bool MDETFBasicInfo::_internal_crossmarket() const {
  return _impl_.crossmarket_;
}
inline bool MDETFBasicInfo::crossmarket() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossMarket)
  return _internal_crossmarket();
}
inline void MDETFBasicInfo::_internal_set_crossmarket(bool value) {
  
  _impl_.crossmarket_ = value;
}
inline void MDETFBasicInfo::set_crossmarket(bool value) {
  _internal_set_crossmarket(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.CrossMarket)
}

// int32 DataMultiplePowerOf10 = 46;
inline void MDETFBasicInfo::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDETFBasicInfo::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDETFBasicInfo::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFBasicInfo.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDETFBasicInfo::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDETFBasicInfo::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFBasicInfo.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// MDETFComponentDetail

// string HTSCSecurityID = 1;
inline void MDETFComponentDetail::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDETFComponentDetail::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFComponentDetail::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID)
}
inline std::string* MDETFComponentDetail::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID)
  return _s;
}
inline const std::string& MDETFComponentDetail::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDETFComponentDetail::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFComponentDetail::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFComponentDetail::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDETFComponentDetail::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFComponentDetail.HTSCSecurityID)
}

// string SecurityID = 2;
inline void MDETFComponentDetail::clear_securityid() {
  _impl_.securityid_.ClearToEmpty();
}
inline const std::string& MDETFComponentDetail::securityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID)
  return _internal_securityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFComponentDetail::set_securityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.securityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID)
}
inline std::string* MDETFComponentDetail::mutable_securityid() {
  std::string* _s = _internal_mutable_securityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID)
  return _s;
}
inline const std::string& MDETFComponentDetail::_internal_securityid() const {
  return _impl_.securityid_.Get();
}
inline void MDETFComponentDetail::_internal_set_securityid(const std::string& value) {
  
  _impl_.securityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFComponentDetail::_internal_mutable_securityid() {
  
  return _impl_.securityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFComponentDetail::release_securityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID)
  return _impl_.securityid_.Release();
}
inline void MDETFComponentDetail::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    
  } else {
    
  }
  _impl_.securityid_.SetAllocated(securityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securityid_.IsDefault()) {
    _impl_.securityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFComponentDetail.SecurityID)
}

// string Symbol = 3;
inline void MDETFComponentDetail::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& MDETFComponentDetail::symbol() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDETFComponentDetail::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol)
}
inline std::string* MDETFComponentDetail::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol)
  return _s;
}
inline const std::string& MDETFComponentDetail::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void MDETFComponentDetail::_internal_set_symbol(const std::string& value) {
  
  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MDETFComponentDetail::_internal_mutable_symbol() {
  
  return _impl_.symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* MDETFComponentDetail::release_symbol() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol)
  return _impl_.symbol_.Release();
}
inline void MDETFComponentDetail::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  _impl_.symbol_.SetAllocated(symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDETFComponentDetail.Symbol)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 4;
inline void MDETFComponentDetail::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDETFComponentDetail::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDETFComponentDetail::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.securityIDSource)
  return _internal_securityidsource();
}
inline void MDETFComponentDetail::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDETFComponentDetail::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.securityIDSource)
}

// double ComponentShare = 5;
inline void MDETFComponentDetail::clear_componentshare() {
  _impl_.componentshare_ = 0;
}
inline double MDETFComponentDetail::_internal_componentshare() const {
  return _impl_.componentshare_;
}
inline double MDETFComponentDetail::componentshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.ComponentShare)
  return _internal_componentshare();
}
inline void MDETFComponentDetail::_internal_set_componentshare(double value) {
  
  _impl_.componentshare_ = value;
}
inline void MDETFComponentDetail::set_componentshare(double value) {
  _internal_set_componentshare(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.ComponentShare)
}

// .com.htsc.mdc.insight.model.MDETFSubstituteFlag SubstituteFlag = 6;
inline void MDETFComponentDetail::clear_substituteflag() {
  _impl_.substituteflag_ = 0;
}
inline ::com::htsc::mdc::insight::model::MDETFSubstituteFlag MDETFComponentDetail::_internal_substituteflag() const {
  return static_cast< ::com::htsc::mdc::insight::model::MDETFSubstituteFlag >(_impl_.substituteflag_);
}
inline ::com::htsc::mdc::insight::model::MDETFSubstituteFlag MDETFComponentDetail::substituteflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.SubstituteFlag)
  return _internal_substituteflag();
}
inline void MDETFComponentDetail::_internal_set_substituteflag(::com::htsc::mdc::insight::model::MDETFSubstituteFlag value) {
  
  _impl_.substituteflag_ = value;
}
inline void MDETFComponentDetail::set_substituteflag(::com::htsc::mdc::insight::model::MDETFSubstituteFlag value) {
  _internal_set_substituteflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.SubstituteFlag)
}

// double PremiumRatio = 7;
inline void MDETFComponentDetail::clear_premiumratio() {
  _impl_.premiumratio_ = 0;
}
inline double MDETFComponentDetail::_internal_premiumratio() const {
  return _impl_.premiumratio_;
}
inline double MDETFComponentDetail::premiumratio() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.PremiumRatio)
  return _internal_premiumratio();
}
inline void MDETFComponentDetail::_internal_set_premiumratio(double value) {
  
  _impl_.premiumratio_ = value;
}
inline void MDETFComponentDetail::set_premiumratio(double value) {
  _internal_set_premiumratio(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.PremiumRatio)
}

// double CreationCashSubstitute = 8;
inline void MDETFComponentDetail::clear_creationcashsubstitute() {
  _impl_.creationcashsubstitute_ = 0;
}
inline double MDETFComponentDetail::_internal_creationcashsubstitute() const {
  return _impl_.creationcashsubstitute_;
}
inline double MDETFComponentDetail::creationcashsubstitute() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.CreationCashSubstitute)
  return _internal_creationcashsubstitute();
}
inline void MDETFComponentDetail::_internal_set_creationcashsubstitute(double value) {
  
  _impl_.creationcashsubstitute_ = value;
}
inline void MDETFComponentDetail::set_creationcashsubstitute(double value) {
  _internal_set_creationcashsubstitute(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.CreationCashSubstitute)
}

// double RedemptionCashSubstitute = 9;
inline void MDETFComponentDetail::clear_redemptioncashsubstitute() {
  _impl_.redemptioncashsubstitute_ = 0;
}
inline double MDETFComponentDetail::_internal_redemptioncashsubstitute() const {
  return _impl_.redemptioncashsubstitute_;
}
inline double MDETFComponentDetail::redemptioncashsubstitute() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.RedemptionCashSubstitute)
  return _internal_redemptioncashsubstitute();
}
inline void MDETFComponentDetail::_internal_set_redemptioncashsubstitute(double value) {
  
  _impl_.redemptioncashsubstitute_ = value;
}
inline void MDETFComponentDetail::set_redemptioncashsubstitute(double value) {
  _internal_set_redemptioncashsubstitute(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.RedemptionCashSubstitute)
}

// double TotalCashSubstitute = 10;
inline void MDETFComponentDetail::clear_totalcashsubstitute() {
  _impl_.totalcashsubstitute_ = 0;
}
inline double MDETFComponentDetail::_internal_totalcashsubstitute() const {
  return _impl_.totalcashsubstitute_;
}
inline double MDETFComponentDetail::totalcashsubstitute() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.TotalCashSubstitute)
  return _internal_totalcashsubstitute();
}
inline void MDETFComponentDetail::_internal_set_totalcashsubstitute(double value) {
  
  _impl_.totalcashsubstitute_ = value;
}
inline void MDETFComponentDetail::set_totalcashsubstitute(double value) {
  _internal_set_totalcashsubstitute(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.TotalCashSubstitute)
}

// double DiscountRatio = 11;
inline void MDETFComponentDetail::clear_discountratio() {
  _impl_.discountratio_ = 0;
}
inline double MDETFComponentDetail::_internal_discountratio() const {
  return _impl_.discountratio_;
}
inline double MDETFComponentDetail::discountratio() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDETFComponentDetail.DiscountRatio)
  return _internal_discountratio();
}
inline void MDETFComponentDetail::_internal_set_discountratio(double value) {
  
  _impl_.discountratio_ = value;
}
inline void MDETFComponentDetail::set_discountratio(double value) {
  _internal_set_discountratio(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDETFComponentDetail.DiscountRatio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::MDETFSubstituteFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::MDETFSubstituteFlag>() {
  return ::com::htsc::mdc::insight::model::MDETFSubstituteFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDETFBasicInfo_2eproto
