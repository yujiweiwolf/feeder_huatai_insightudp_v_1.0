// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBody.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageBody_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageBody_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "EMessageType.pb.h"
#include "Login.pb.h"
#include "ServiceDiscovery.pb.h"
#include "MDSubscribe.pb.h"
#include "HtscMarketData.pb.h"
#include "InsightErrorContext.pb.h"
#include "MDQuery.pb.h"
#include "MDPlayback.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageBody_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageBody_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageBody_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MessageBody;
struct MessageBodyDefaultTypeInternal;
extern MessageBodyDefaultTypeInternal _MessageBody_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MessageBody* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MessageBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MessageBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MessageBody) */ {
 public:
  inline MessageBody() : MessageBody(nullptr) {}
  ~MessageBody() override;
  explicit PROTOBUF_CONSTEXPR MessageBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageBody(const MessageBody& from);
  MessageBody(MessageBody&& from) noexcept
    : MessageBody() {
    *this = ::std::move(from);
  }

  inline MessageBody& operator=(const MessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBody& operator=(MessageBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageBody* internal_default_instance() {
    return reinterpret_cast<const MessageBody*>(
               &_MessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageBody& a, MessageBody& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageBody& from) {
    MessageBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MessageBody";
  }
  protected:
  explicit MessageBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneralErrorMessageFieldNumber = 10,
    kLoginRequestFieldNumber = 11,
    kLoginResponseFieldNumber = 12,
    kServiceDiscoveryRequestFieldNumber = 13,
    kServiceDiscoveryResponseFieldNumber = 14,
    kMdSubscribeRequestFieldNumber = 15,
    kMdSubscribeResponseFieldNumber = 16,
    kPushMarketDataFieldNumber = 20,
    kPushMarketDataStreamFieldNumber = 21,
    kMdQueryRequestFieldNumber = 30,
    kMdQueryResponseFieldNumber = 31,
    kPlaybackRequestFieldNumber = 32,
    kPlaybackResponseFieldNumber = 33,
    kPlaybackControlRequestFieldNumber = 34,
    kPlaybackControlResponseFieldNumber = 35,
    kPlaybackStatusRequestFieldNumber = 36,
    kPlaybackStatusFieldNumber = 37,
    kPlaybackPayloadFieldNumber = 38,
    kInteractionIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .com.htsc.mdc.insight.model.InsightErrorContext generalErrorMessage = 10;
  bool has_generalerrormessage() const;
  private:
  bool _internal_has_generalerrormessage() const;
  public:
  void clear_generalerrormessage();
  const ::com::htsc::mdc::insight::model::InsightErrorContext& generalerrormessage() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::InsightErrorContext* release_generalerrormessage();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_generalerrormessage();
  void set_allocated_generalerrormessage(::com::htsc::mdc::insight::model::InsightErrorContext* generalerrormessage);
  private:
  const ::com::htsc::mdc::insight::model::InsightErrorContext& _internal_generalerrormessage() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* _internal_mutable_generalerrormessage();
  public:
  void unsafe_arena_set_allocated_generalerrormessage(
      ::com::htsc::mdc::insight::model::InsightErrorContext* generalerrormessage);
  ::com::htsc::mdc::insight::model::InsightErrorContext* unsafe_arena_release_generalerrormessage();

  // .com.htsc.mdc.insight.model.LoginRequest loginRequest = 11;
  bool has_loginrequest() const;
  private:
  bool _internal_has_loginrequest() const;
  public:
  void clear_loginrequest();
  const ::com::htsc::mdc::insight::model::LoginRequest& loginrequest() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::LoginRequest* release_loginrequest();
  ::com::htsc::mdc::insight::model::LoginRequest* mutable_loginrequest();
  void set_allocated_loginrequest(::com::htsc::mdc::insight::model::LoginRequest* loginrequest);
  private:
  const ::com::htsc::mdc::insight::model::LoginRequest& _internal_loginrequest() const;
  ::com::htsc::mdc::insight::model::LoginRequest* _internal_mutable_loginrequest();
  public:
  void unsafe_arena_set_allocated_loginrequest(
      ::com::htsc::mdc::insight::model::LoginRequest* loginrequest);
  ::com::htsc::mdc::insight::model::LoginRequest* unsafe_arena_release_loginrequest();

  // .com.htsc.mdc.insight.model.LoginResponse loginResponse = 12;
  bool has_loginresponse() const;
  private:
  bool _internal_has_loginresponse() const;
  public:
  void clear_loginresponse();
  const ::com::htsc::mdc::insight::model::LoginResponse& loginresponse() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::LoginResponse* release_loginresponse();
  ::com::htsc::mdc::insight::model::LoginResponse* mutable_loginresponse();
  void set_allocated_loginresponse(::com::htsc::mdc::insight::model::LoginResponse* loginresponse);
  private:
  const ::com::htsc::mdc::insight::model::LoginResponse& _internal_loginresponse() const;
  ::com::htsc::mdc::insight::model::LoginResponse* _internal_mutable_loginresponse();
  public:
  void unsafe_arena_set_allocated_loginresponse(
      ::com::htsc::mdc::insight::model::LoginResponse* loginresponse);
  ::com::htsc::mdc::insight::model::LoginResponse* unsafe_arena_release_loginresponse();

  // .com.htsc.mdc.insight.model.ServiceDiscoveryRequest serviceDiscoveryRequest = 13;
  bool has_servicediscoveryrequest() const;
  private:
  bool _internal_has_servicediscoveryrequest() const;
  public:
  void clear_servicediscoveryrequest();
  const ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest& servicediscoveryrequest() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* release_servicediscoveryrequest();
  ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* mutable_servicediscoveryrequest();
  void set_allocated_servicediscoveryrequest(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* servicediscoveryrequest);
  private:
  const ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest& _internal_servicediscoveryrequest() const;
  ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* _internal_mutable_servicediscoveryrequest();
  public:
  void unsafe_arena_set_allocated_servicediscoveryrequest(
      ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* servicediscoveryrequest);
  ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* unsafe_arena_release_servicediscoveryrequest();

  // .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 14;
  bool has_servicediscoveryresponse() const;
  private:
  bool _internal_has_servicediscoveryresponse() const;
  public:
  void clear_servicediscoveryresponse();
  const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& servicediscoveryresponse() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* release_servicediscoveryresponse();
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* mutable_servicediscoveryresponse();
  void set_allocated_servicediscoveryresponse(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse);
  private:
  const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& _internal_servicediscoveryresponse() const;
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* _internal_mutable_servicediscoveryresponse();
  public:
  void unsafe_arena_set_allocated_servicediscoveryresponse(
      ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse);
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* unsafe_arena_release_servicediscoveryresponse();

  // .com.htsc.mdc.insight.model.MDSubscribeRequest mdSubscribeRequest = 15;
  bool has_mdsubscriberequest() const;
  private:
  bool _internal_has_mdsubscriberequest() const;
  public:
  void clear_mdsubscriberequest();
  const ::com::htsc::mdc::insight::model::MDSubscribeRequest& mdsubscriberequest() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MDSubscribeRequest* release_mdsubscriberequest();
  ::com::htsc::mdc::insight::model::MDSubscribeRequest* mutable_mdsubscriberequest();
  void set_allocated_mdsubscriberequest(::com::htsc::mdc::insight::model::MDSubscribeRequest* mdsubscriberequest);
  private:
  const ::com::htsc::mdc::insight::model::MDSubscribeRequest& _internal_mdsubscriberequest() const;
  ::com::htsc::mdc::insight::model::MDSubscribeRequest* _internal_mutable_mdsubscriberequest();
  public:
  void unsafe_arena_set_allocated_mdsubscriberequest(
      ::com::htsc::mdc::insight::model::MDSubscribeRequest* mdsubscriberequest);
  ::com::htsc::mdc::insight::model::MDSubscribeRequest* unsafe_arena_release_mdsubscriberequest();

  // .com.htsc.mdc.insight.model.MDSubscribeResponse mdSubscribeResponse = 16;
  bool has_mdsubscriberesponse() const;
  private:
  bool _internal_has_mdsubscriberesponse() const;
  public:
  void clear_mdsubscriberesponse();
  const ::com::htsc::mdc::insight::model::MDSubscribeResponse& mdsubscriberesponse() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MDSubscribeResponse* release_mdsubscriberesponse();
  ::com::htsc::mdc::insight::model::MDSubscribeResponse* mutable_mdsubscriberesponse();
  void set_allocated_mdsubscriberesponse(::com::htsc::mdc::insight::model::MDSubscribeResponse* mdsubscriberesponse);
  private:
  const ::com::htsc::mdc::insight::model::MDSubscribeResponse& _internal_mdsubscriberesponse() const;
  ::com::htsc::mdc::insight::model::MDSubscribeResponse* _internal_mutable_mdsubscriberesponse();
  public:
  void unsafe_arena_set_allocated_mdsubscriberesponse(
      ::com::htsc::mdc::insight::model::MDSubscribeResponse* mdsubscriberesponse);
  ::com::htsc::mdc::insight::model::MDSubscribeResponse* unsafe_arena_release_mdsubscriberesponse();

  // .com.htsc.mdc.insight.model.HtscMarketData pushMarketData = 20;
  bool has_pushmarketdata() const;
  private:
  bool _internal_has_pushmarketdata() const;
  public:
  void clear_pushmarketdata();
  const ::com::htsc::mdc::insight::model::HtscMarketData& pushmarketdata() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::HtscMarketData* release_pushmarketdata();
  ::com::htsc::mdc::insight::model::HtscMarketData* mutable_pushmarketdata();
  void set_allocated_pushmarketdata(::com::htsc::mdc::insight::model::HtscMarketData* pushmarketdata);
  private:
  const ::com::htsc::mdc::insight::model::HtscMarketData& _internal_pushmarketdata() const;
  ::com::htsc::mdc::insight::model::HtscMarketData* _internal_mutable_pushmarketdata();
  public:
  void unsafe_arena_set_allocated_pushmarketdata(
      ::com::htsc::mdc::insight::model::HtscMarketData* pushmarketdata);
  ::com::htsc::mdc::insight::model::HtscMarketData* unsafe_arena_release_pushmarketdata();

  // .com.htsc.mdc.insight.model.MarketDataStream pushMarketDataStream = 21;
  bool has_pushmarketdatastream() const;
  private:
  bool _internal_has_pushmarketdatastream() const;
  public:
  void clear_pushmarketdatastream();
  const ::com::htsc::mdc::insight::model::MarketDataStream& pushmarketdatastream() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MarketDataStream* release_pushmarketdatastream();
  ::com::htsc::mdc::insight::model::MarketDataStream* mutable_pushmarketdatastream();
  void set_allocated_pushmarketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* pushmarketdatastream);
  private:
  const ::com::htsc::mdc::insight::model::MarketDataStream& _internal_pushmarketdatastream() const;
  ::com::htsc::mdc::insight::model::MarketDataStream* _internal_mutable_pushmarketdatastream();
  public:
  void unsafe_arena_set_allocated_pushmarketdatastream(
      ::com::htsc::mdc::insight::model::MarketDataStream* pushmarketdatastream);
  ::com::htsc::mdc::insight::model::MarketDataStream* unsafe_arena_release_pushmarketdatastream();

  // .com.htsc.mdc.insight.model.MDQueryRequest mdQueryRequest = 30;
  bool has_mdqueryrequest() const;
  private:
  bool _internal_has_mdqueryrequest() const;
  public:
  void clear_mdqueryrequest();
  const ::com::htsc::mdc::insight::model::MDQueryRequest& mdqueryrequest() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MDQueryRequest* release_mdqueryrequest();
  ::com::htsc::mdc::insight::model::MDQueryRequest* mutable_mdqueryrequest();
  void set_allocated_mdqueryrequest(::com::htsc::mdc::insight::model::MDQueryRequest* mdqueryrequest);
  private:
  const ::com::htsc::mdc::insight::model::MDQueryRequest& _internal_mdqueryrequest() const;
  ::com::htsc::mdc::insight::model::MDQueryRequest* _internal_mutable_mdqueryrequest();
  public:
  void unsafe_arena_set_allocated_mdqueryrequest(
      ::com::htsc::mdc::insight::model::MDQueryRequest* mdqueryrequest);
  ::com::htsc::mdc::insight::model::MDQueryRequest* unsafe_arena_release_mdqueryrequest();

  // .com.htsc.mdc.insight.model.MDQueryResponse mdQueryResponse = 31;
  bool has_mdqueryresponse() const;
  private:
  bool _internal_has_mdqueryresponse() const;
  public:
  void clear_mdqueryresponse();
  const ::com::htsc::mdc::insight::model::MDQueryResponse& mdqueryresponse() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MDQueryResponse* release_mdqueryresponse();
  ::com::htsc::mdc::insight::model::MDQueryResponse* mutable_mdqueryresponse();
  void set_allocated_mdqueryresponse(::com::htsc::mdc::insight::model::MDQueryResponse* mdqueryresponse);
  private:
  const ::com::htsc::mdc::insight::model::MDQueryResponse& _internal_mdqueryresponse() const;
  ::com::htsc::mdc::insight::model::MDQueryResponse* _internal_mutable_mdqueryresponse();
  public:
  void unsafe_arena_set_allocated_mdqueryresponse(
      ::com::htsc::mdc::insight::model::MDQueryResponse* mdqueryresponse);
  ::com::htsc::mdc::insight::model::MDQueryResponse* unsafe_arena_release_mdqueryresponse();

  // .com.htsc.mdc.insight.model.PlaybackRequest playbackRequest = 32;
  bool has_playbackrequest() const;
  private:
  bool _internal_has_playbackrequest() const;
  public:
  void clear_playbackrequest();
  const ::com::htsc::mdc::insight::model::PlaybackRequest& playbackrequest() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::PlaybackRequest* release_playbackrequest();
  ::com::htsc::mdc::insight::model::PlaybackRequest* mutable_playbackrequest();
  void set_allocated_playbackrequest(::com::htsc::mdc::insight::model::PlaybackRequest* playbackrequest);
  private:
  const ::com::htsc::mdc::insight::model::PlaybackRequest& _internal_playbackrequest() const;
  ::com::htsc::mdc::insight::model::PlaybackRequest* _internal_mutable_playbackrequest();
  public:
  void unsafe_arena_set_allocated_playbackrequest(
      ::com::htsc::mdc::insight::model::PlaybackRequest* playbackrequest);
  ::com::htsc::mdc::insight::model::PlaybackRequest* unsafe_arena_release_playbackrequest();

  // .com.htsc.mdc.insight.model.PlaybackResponse playbackResponse = 33;
  bool has_playbackresponse() const;
  private:
  bool _internal_has_playbackresponse() const;
  public:
  void clear_playbackresponse();
  const ::com::htsc::mdc::insight::model::PlaybackResponse& playbackresponse() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::PlaybackResponse* release_playbackresponse();
  ::com::htsc::mdc::insight::model::PlaybackResponse* mutable_playbackresponse();
  void set_allocated_playbackresponse(::com::htsc::mdc::insight::model::PlaybackResponse* playbackresponse);
  private:
  const ::com::htsc::mdc::insight::model::PlaybackResponse& _internal_playbackresponse() const;
  ::com::htsc::mdc::insight::model::PlaybackResponse* _internal_mutable_playbackresponse();
  public:
  void unsafe_arena_set_allocated_playbackresponse(
      ::com::htsc::mdc::insight::model::PlaybackResponse* playbackresponse);
  ::com::htsc::mdc::insight::model::PlaybackResponse* unsafe_arena_release_playbackresponse();

  // .com.htsc.mdc.insight.model.PlaybackControlRequest playbackControlRequest = 34;
  bool has_playbackcontrolrequest() const;
  private:
  bool _internal_has_playbackcontrolrequest() const;
  public:
  void clear_playbackcontrolrequest();
  const ::com::htsc::mdc::insight::model::PlaybackControlRequest& playbackcontrolrequest() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::PlaybackControlRequest* release_playbackcontrolrequest();
  ::com::htsc::mdc::insight::model::PlaybackControlRequest* mutable_playbackcontrolrequest();
  void set_allocated_playbackcontrolrequest(::com::htsc::mdc::insight::model::PlaybackControlRequest* playbackcontrolrequest);
  private:
  const ::com::htsc::mdc::insight::model::PlaybackControlRequest& _internal_playbackcontrolrequest() const;
  ::com::htsc::mdc::insight::model::PlaybackControlRequest* _internal_mutable_playbackcontrolrequest();
  public:
  void unsafe_arena_set_allocated_playbackcontrolrequest(
      ::com::htsc::mdc::insight::model::PlaybackControlRequest* playbackcontrolrequest);
  ::com::htsc::mdc::insight::model::PlaybackControlRequest* unsafe_arena_release_playbackcontrolrequest();

  // .com.htsc.mdc.insight.model.PlaybackControlResponse playbackControlResponse = 35;
  bool has_playbackcontrolresponse() const;
  private:
  bool _internal_has_playbackcontrolresponse() const;
  public:
  void clear_playbackcontrolresponse();
  const ::com::htsc::mdc::insight::model::PlaybackControlResponse& playbackcontrolresponse() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::PlaybackControlResponse* release_playbackcontrolresponse();
  ::com::htsc::mdc::insight::model::PlaybackControlResponse* mutable_playbackcontrolresponse();
  void set_allocated_playbackcontrolresponse(::com::htsc::mdc::insight::model::PlaybackControlResponse* playbackcontrolresponse);
  private:
  const ::com::htsc::mdc::insight::model::PlaybackControlResponse& _internal_playbackcontrolresponse() const;
  ::com::htsc::mdc::insight::model::PlaybackControlResponse* _internal_mutable_playbackcontrolresponse();
  public:
  void unsafe_arena_set_allocated_playbackcontrolresponse(
      ::com::htsc::mdc::insight::model::PlaybackControlResponse* playbackcontrolresponse);
  ::com::htsc::mdc::insight::model::PlaybackControlResponse* unsafe_arena_release_playbackcontrolresponse();

  // .com.htsc.mdc.insight.model.PlaybackStatusRequest playbackStatusRequest = 36;
  bool has_playbackstatusrequest() const;
  private:
  bool _internal_has_playbackstatusrequest() const;
  public:
  void clear_playbackstatusrequest();
  const ::com::htsc::mdc::insight::model::PlaybackStatusRequest& playbackstatusrequest() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::PlaybackStatusRequest* release_playbackstatusrequest();
  ::com::htsc::mdc::insight::model::PlaybackStatusRequest* mutable_playbackstatusrequest();
  void set_allocated_playbackstatusrequest(::com::htsc::mdc::insight::model::PlaybackStatusRequest* playbackstatusrequest);
  private:
  const ::com::htsc::mdc::insight::model::PlaybackStatusRequest& _internal_playbackstatusrequest() const;
  ::com::htsc::mdc::insight::model::PlaybackStatusRequest* _internal_mutable_playbackstatusrequest();
  public:
  void unsafe_arena_set_allocated_playbackstatusrequest(
      ::com::htsc::mdc::insight::model::PlaybackStatusRequest* playbackstatusrequest);
  ::com::htsc::mdc::insight::model::PlaybackStatusRequest* unsafe_arena_release_playbackstatusrequest();

  // .com.htsc.mdc.insight.model.PlaybackStatus playbackStatus = 37;
  bool has_playbackstatus() const;
  private:
  bool _internal_has_playbackstatus() const;
  public:
  void clear_playbackstatus();
  const ::com::htsc::mdc::insight::model::PlaybackStatus& playbackstatus() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::PlaybackStatus* release_playbackstatus();
  ::com::htsc::mdc::insight::model::PlaybackStatus* mutable_playbackstatus();
  void set_allocated_playbackstatus(::com::htsc::mdc::insight::model::PlaybackStatus* playbackstatus);
  private:
  const ::com::htsc::mdc::insight::model::PlaybackStatus& _internal_playbackstatus() const;
  ::com::htsc::mdc::insight::model::PlaybackStatus* _internal_mutable_playbackstatus();
  public:
  void unsafe_arena_set_allocated_playbackstatus(
      ::com::htsc::mdc::insight::model::PlaybackStatus* playbackstatus);
  ::com::htsc::mdc::insight::model::PlaybackStatus* unsafe_arena_release_playbackstatus();

  // .com.htsc.mdc.insight.model.PlaybackPayload playbackPayload = 38;
  bool has_playbackpayload() const;
  private:
  bool _internal_has_playbackpayload() const;
  public:
  void clear_playbackpayload();
  const ::com::htsc::mdc::insight::model::PlaybackPayload& playbackpayload() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::PlaybackPayload* release_playbackpayload();
  ::com::htsc::mdc::insight::model::PlaybackPayload* mutable_playbackpayload();
  void set_allocated_playbackpayload(::com::htsc::mdc::insight::model::PlaybackPayload* playbackpayload);
  private:
  const ::com::htsc::mdc::insight::model::PlaybackPayload& _internal_playbackpayload() const;
  ::com::htsc::mdc::insight::model::PlaybackPayload* _internal_mutable_playbackpayload();
  public:
  void unsafe_arena_set_allocated_playbackpayload(
      ::com::htsc::mdc::insight::model::PlaybackPayload* playbackpayload);
  ::com::htsc::mdc::insight::model::PlaybackPayload* unsafe_arena_release_playbackpayload();

  // int64 interactionId = 2;
  void clear_interactionid();
  int64_t interactionid() const;
  void set_interactionid(int64_t value);
  private:
  int64_t _internal_interactionid() const;
  void _internal_set_interactionid(int64_t value);
  public:

  // .com.htsc.mdc.insight.model.EMessageType type = 1;
  void clear_type();
  ::com::htsc::mdc::insight::model::EMessageType type() const;
  void set_type(::com::htsc::mdc::insight::model::EMessageType value);
  private:
  ::com::htsc::mdc::insight::model::EMessageType _internal_type() const;
  void _internal_set_type(::com::htsc::mdc::insight::model::EMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MessageBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::htsc::mdc::insight::model::InsightErrorContext* generalerrormessage_;
    ::com::htsc::mdc::insight::model::LoginRequest* loginrequest_;
    ::com::htsc::mdc::insight::model::LoginResponse* loginresponse_;
    ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* servicediscoveryrequest_;
    ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse_;
    ::com::htsc::mdc::insight::model::MDSubscribeRequest* mdsubscriberequest_;
    ::com::htsc::mdc::insight::model::MDSubscribeResponse* mdsubscriberesponse_;
    ::com::htsc::mdc::insight::model::HtscMarketData* pushmarketdata_;
    ::com::htsc::mdc::insight::model::MarketDataStream* pushmarketdatastream_;
    ::com::htsc::mdc::insight::model::MDQueryRequest* mdqueryrequest_;
    ::com::htsc::mdc::insight::model::MDQueryResponse* mdqueryresponse_;
    ::com::htsc::mdc::insight::model::PlaybackRequest* playbackrequest_;
    ::com::htsc::mdc::insight::model::PlaybackResponse* playbackresponse_;
    ::com::htsc::mdc::insight::model::PlaybackControlRequest* playbackcontrolrequest_;
    ::com::htsc::mdc::insight::model::PlaybackControlResponse* playbackcontrolresponse_;
    ::com::htsc::mdc::insight::model::PlaybackStatusRequest* playbackstatusrequest_;
    ::com::htsc::mdc::insight::model::PlaybackStatus* playbackstatus_;
    ::com::htsc::mdc::insight::model::PlaybackPayload* playbackpayload_;
    int64_t interactionid_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageBody_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageBody

// .com.htsc.mdc.insight.model.EMessageType type = 1;
inline void MessageBody::clear_type() {
  _impl_.type_ = 0;
}
inline ::com::htsc::mdc::insight::model::EMessageType MessageBody::_internal_type() const {
  return static_cast< ::com::htsc::mdc::insight::model::EMessageType >(_impl_.type_);
}
inline ::com::htsc::mdc::insight::model::EMessageType MessageBody::type() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.type)
  return _internal_type();
}
inline void MessageBody::_internal_set_type(::com::htsc::mdc::insight::model::EMessageType value) {
  
  _impl_.type_ = value;
}
inline void MessageBody::set_type(::com::htsc::mdc::insight::model::EMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageBody.type)
}

// int64 interactionId = 2;
inline void MessageBody::clear_interactionid() {
  _impl_.interactionid_ = int64_t{0};
}
inline int64_t MessageBody::_internal_interactionid() const {
  return _impl_.interactionid_;
}
inline int64_t MessageBody::interactionid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.interactionId)
  return _internal_interactionid();
}
inline void MessageBody::_internal_set_interactionid(int64_t value) {
  
  _impl_.interactionid_ = value;
}
inline void MessageBody::set_interactionid(int64_t value) {
  _internal_set_interactionid(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MessageBody.interactionId)
}

// .com.htsc.mdc.insight.model.InsightErrorContext generalErrorMessage = 10;
inline bool MessageBody::_internal_has_generalerrormessage() const {
  return this != internal_default_instance() && _impl_.generalerrormessage_ != nullptr;
}
inline bool MessageBody::has_generalerrormessage() const {
  return _internal_has_generalerrormessage();
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& MessageBody::_internal_generalerrormessage() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = _impl_.generalerrormessage_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext&>(
      ::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& MessageBody::generalerrormessage() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.generalErrorMessage)
  return _internal_generalerrormessage();
}
inline void MessageBody::unsafe_arena_set_allocated_generalerrormessage(
    ::com::htsc::mdc::insight::model::InsightErrorContext* generalerrormessage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generalerrormessage_);
  }
  _impl_.generalerrormessage_ = generalerrormessage;
  if (generalerrormessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.generalErrorMessage)
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MessageBody::release_generalerrormessage() {
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.generalerrormessage_;
  _impl_.generalerrormessage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MessageBody::unsafe_arena_release_generalerrormessage() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.generalErrorMessage)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.generalerrormessage_;
  _impl_.generalerrormessage_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MessageBody::_internal_mutable_generalerrormessage() {
  
  if (_impl_.generalerrormessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaForAllocation());
    _impl_.generalerrormessage_ = p;
  }
  return _impl_.generalerrormessage_;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MessageBody::mutable_generalerrormessage() {
  ::com::htsc::mdc::insight::model::InsightErrorContext* _msg = _internal_mutable_generalerrormessage();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.generalErrorMessage)
  return _msg;
}
inline void MessageBody::set_allocated_generalerrormessage(::com::htsc::mdc::insight::model::InsightErrorContext* generalerrormessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generalerrormessage_);
  }
  if (generalerrormessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generalerrormessage));
    if (message_arena != submessage_arena) {
      generalerrormessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalerrormessage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.generalerrormessage_ = generalerrormessage;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.generalErrorMessage)
}

// .com.htsc.mdc.insight.model.LoginRequest loginRequest = 11;
inline bool MessageBody::_internal_has_loginrequest() const {
  return this != internal_default_instance() && _impl_.loginrequest_ != nullptr;
}
inline bool MessageBody::has_loginrequest() const {
  return _internal_has_loginrequest();
}
inline const ::com::htsc::mdc::insight::model::LoginRequest& MessageBody::_internal_loginrequest() const {
  const ::com::htsc::mdc::insight::model::LoginRequest* p = _impl_.loginrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::LoginRequest&>(
      ::com::htsc::mdc::insight::model::_LoginRequest_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::LoginRequest& MessageBody::loginrequest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.loginRequest)
  return _internal_loginrequest();
}
inline void MessageBody::unsafe_arena_set_allocated_loginrequest(
    ::com::htsc::mdc::insight::model::LoginRequest* loginrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loginrequest_);
  }
  _impl_.loginrequest_ = loginrequest;
  if (loginrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.loginRequest)
}
inline ::com::htsc::mdc::insight::model::LoginRequest* MessageBody::release_loginrequest() {
  
  ::com::htsc::mdc::insight::model::LoginRequest* temp = _impl_.loginrequest_;
  _impl_.loginrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::LoginRequest* MessageBody::unsafe_arena_release_loginrequest() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.loginRequest)
  
  ::com::htsc::mdc::insight::model::LoginRequest* temp = _impl_.loginrequest_;
  _impl_.loginrequest_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::LoginRequest* MessageBody::_internal_mutable_loginrequest() {
  
  if (_impl_.loginrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::LoginRequest>(GetArenaForAllocation());
    _impl_.loginrequest_ = p;
  }
  return _impl_.loginrequest_;
}
inline ::com::htsc::mdc::insight::model::LoginRequest* MessageBody::mutable_loginrequest() {
  ::com::htsc::mdc::insight::model::LoginRequest* _msg = _internal_mutable_loginrequest();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.loginRequest)
  return _msg;
}
inline void MessageBody::set_allocated_loginrequest(::com::htsc::mdc::insight::model::LoginRequest* loginrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loginrequest_);
  }
  if (loginrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginrequest));
    if (message_arena != submessage_arena) {
      loginrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginrequest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.loginrequest_ = loginrequest;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.loginRequest)
}

// .com.htsc.mdc.insight.model.LoginResponse loginResponse = 12;
inline bool MessageBody::_internal_has_loginresponse() const {
  return this != internal_default_instance() && _impl_.loginresponse_ != nullptr;
}
inline bool MessageBody::has_loginresponse() const {
  return _internal_has_loginresponse();
}
inline const ::com::htsc::mdc::insight::model::LoginResponse& MessageBody::_internal_loginresponse() const {
  const ::com::htsc::mdc::insight::model::LoginResponse* p = _impl_.loginresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::LoginResponse&>(
      ::com::htsc::mdc::insight::model::_LoginResponse_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::LoginResponse& MessageBody::loginresponse() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.loginResponse)
  return _internal_loginresponse();
}
inline void MessageBody::unsafe_arena_set_allocated_loginresponse(
    ::com::htsc::mdc::insight::model::LoginResponse* loginresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loginresponse_);
  }
  _impl_.loginresponse_ = loginresponse;
  if (loginresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.loginResponse)
}
inline ::com::htsc::mdc::insight::model::LoginResponse* MessageBody::release_loginresponse() {
  
  ::com::htsc::mdc::insight::model::LoginResponse* temp = _impl_.loginresponse_;
  _impl_.loginresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::LoginResponse* MessageBody::unsafe_arena_release_loginresponse() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.loginResponse)
  
  ::com::htsc::mdc::insight::model::LoginResponse* temp = _impl_.loginresponse_;
  _impl_.loginresponse_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::LoginResponse* MessageBody::_internal_mutable_loginresponse() {
  
  if (_impl_.loginresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::LoginResponse>(GetArenaForAllocation());
    _impl_.loginresponse_ = p;
  }
  return _impl_.loginresponse_;
}
inline ::com::htsc::mdc::insight::model::LoginResponse* MessageBody::mutable_loginresponse() {
  ::com::htsc::mdc::insight::model::LoginResponse* _msg = _internal_mutable_loginresponse();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.loginResponse)
  return _msg;
}
inline void MessageBody::set_allocated_loginresponse(::com::htsc::mdc::insight::model::LoginResponse* loginresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loginresponse_);
  }
  if (loginresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginresponse));
    if (message_arena != submessage_arena) {
      loginresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginresponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.loginresponse_ = loginresponse;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.loginResponse)
}

// .com.htsc.mdc.insight.model.ServiceDiscoveryRequest serviceDiscoveryRequest = 13;
inline bool MessageBody::_internal_has_servicediscoveryrequest() const {
  return this != internal_default_instance() && _impl_.servicediscoveryrequest_ != nullptr;
}
inline bool MessageBody::has_servicediscoveryrequest() const {
  return _internal_has_servicediscoveryrequest();
}
inline const ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest& MessageBody::_internal_servicediscoveryrequest() const {
  const ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* p = _impl_.servicediscoveryrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest&>(
      ::com::htsc::mdc::insight::model::_ServiceDiscoveryRequest_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest& MessageBody::servicediscoveryrequest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryRequest)
  return _internal_servicediscoveryrequest();
}
inline void MessageBody::unsafe_arena_set_allocated_servicediscoveryrequest(
    ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* servicediscoveryrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.servicediscoveryrequest_);
  }
  _impl_.servicediscoveryrequest_ = servicediscoveryrequest;
  if (servicediscoveryrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryRequest)
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* MessageBody::release_servicediscoveryrequest() {
  
  ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* temp = _impl_.servicediscoveryrequest_;
  _impl_.servicediscoveryrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* MessageBody::unsafe_arena_release_servicediscoveryrequest() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryRequest)
  
  ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* temp = _impl_.servicediscoveryrequest_;
  _impl_.servicediscoveryrequest_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* MessageBody::_internal_mutable_servicediscoveryrequest() {
  
  if (_impl_.servicediscoveryrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ServiceDiscoveryRequest>(GetArenaForAllocation());
    _impl_.servicediscoveryrequest_ = p;
  }
  return _impl_.servicediscoveryrequest_;
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* MessageBody::mutable_servicediscoveryrequest() {
  ::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* _msg = _internal_mutable_servicediscoveryrequest();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryRequest)
  return _msg;
}
inline void MessageBody::set_allocated_servicediscoveryrequest(::com::htsc::mdc::insight::model::ServiceDiscoveryRequest* servicediscoveryrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.servicediscoveryrequest_);
  }
  if (servicediscoveryrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(servicediscoveryrequest));
    if (message_arena != submessage_arena) {
      servicediscoveryrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servicediscoveryrequest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.servicediscoveryrequest_ = servicediscoveryrequest;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryRequest)
}

// .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 14;
inline bool MessageBody::_internal_has_servicediscoveryresponse() const {
  return this != internal_default_instance() && _impl_.servicediscoveryresponse_ != nullptr;
}
inline bool MessageBody::has_servicediscoveryresponse() const {
  return _internal_has_servicediscoveryresponse();
}
inline const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& MessageBody::_internal_servicediscoveryresponse() const {
  const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* p = _impl_.servicediscoveryresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse&>(
      ::com::htsc::mdc::insight::model::_ServiceDiscoveryResponse_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& MessageBody::servicediscoveryresponse() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryResponse)
  return _internal_servicediscoveryresponse();
}
inline void MessageBody::unsafe_arena_set_allocated_servicediscoveryresponse(
    ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.servicediscoveryresponse_);
  }
  _impl_.servicediscoveryresponse_ = servicediscoveryresponse;
  if (servicediscoveryresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryResponse)
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* MessageBody::release_servicediscoveryresponse() {
  
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* temp = _impl_.servicediscoveryresponse_;
  _impl_.servicediscoveryresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* MessageBody::unsafe_arena_release_servicediscoveryresponse() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryResponse)
  
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* temp = _impl_.servicediscoveryresponse_;
  _impl_.servicediscoveryresponse_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* MessageBody::_internal_mutable_servicediscoveryresponse() {
  
  if (_impl_.servicediscoveryresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::ServiceDiscoveryResponse>(GetArenaForAllocation());
    _impl_.servicediscoveryresponse_ = p;
  }
  return _impl_.servicediscoveryresponse_;
}
inline ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* MessageBody::mutable_servicediscoveryresponse() {
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* _msg = _internal_mutable_servicediscoveryresponse();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryResponse)
  return _msg;
}
inline void MessageBody::set_allocated_servicediscoveryresponse(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.servicediscoveryresponse_);
  }
  if (servicediscoveryresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(servicediscoveryresponse));
    if (message_arena != submessage_arena) {
      servicediscoveryresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servicediscoveryresponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.servicediscoveryresponse_ = servicediscoveryresponse;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.serviceDiscoveryResponse)
}

// .com.htsc.mdc.insight.model.MDSubscribeRequest mdSubscribeRequest = 15;
inline bool MessageBody::_internal_has_mdsubscriberequest() const {
  return this != internal_default_instance() && _impl_.mdsubscriberequest_ != nullptr;
}
inline bool MessageBody::has_mdsubscriberequest() const {
  return _internal_has_mdsubscriberequest();
}
inline const ::com::htsc::mdc::insight::model::MDSubscribeRequest& MessageBody::_internal_mdsubscriberequest() const {
  const ::com::htsc::mdc::insight::model::MDSubscribeRequest* p = _impl_.mdsubscriberequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSubscribeRequest&>(
      ::com::htsc::mdc::insight::model::_MDSubscribeRequest_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MDSubscribeRequest& MessageBody::mdsubscriberequest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.mdSubscribeRequest)
  return _internal_mdsubscriberequest();
}
inline void MessageBody::unsafe_arena_set_allocated_mdsubscriberequest(
    ::com::htsc::mdc::insight::model::MDSubscribeRequest* mdsubscriberequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mdsubscriberequest_);
  }
  _impl_.mdsubscriberequest_ = mdsubscriberequest;
  if (mdsubscriberequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.mdSubscribeRequest)
}
inline ::com::htsc::mdc::insight::model::MDSubscribeRequest* MessageBody::release_mdsubscriberequest() {
  
  ::com::htsc::mdc::insight::model::MDSubscribeRequest* temp = _impl_.mdsubscriberequest_;
  _impl_.mdsubscriberequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSubscribeRequest* MessageBody::unsafe_arena_release_mdsubscriberequest() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.mdSubscribeRequest)
  
  ::com::htsc::mdc::insight::model::MDSubscribeRequest* temp = _impl_.mdsubscriberequest_;
  _impl_.mdsubscriberequest_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSubscribeRequest* MessageBody::_internal_mutable_mdsubscriberequest() {
  
  if (_impl_.mdsubscriberequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSubscribeRequest>(GetArenaForAllocation());
    _impl_.mdsubscriberequest_ = p;
  }
  return _impl_.mdsubscriberequest_;
}
inline ::com::htsc::mdc::insight::model::MDSubscribeRequest* MessageBody::mutable_mdsubscriberequest() {
  ::com::htsc::mdc::insight::model::MDSubscribeRequest* _msg = _internal_mutable_mdsubscriberequest();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.mdSubscribeRequest)
  return _msg;
}
inline void MessageBody::set_allocated_mdsubscriberequest(::com::htsc::mdc::insight::model::MDSubscribeRequest* mdsubscriberequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mdsubscriberequest_);
  }
  if (mdsubscriberequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdsubscriberequest));
    if (message_arena != submessage_arena) {
      mdsubscriberequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdsubscriberequest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mdsubscriberequest_ = mdsubscriberequest;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.mdSubscribeRequest)
}

// .com.htsc.mdc.insight.model.MDSubscribeResponse mdSubscribeResponse = 16;
inline bool MessageBody::_internal_has_mdsubscriberesponse() const {
  return this != internal_default_instance() && _impl_.mdsubscriberesponse_ != nullptr;
}
inline bool MessageBody::has_mdsubscriberesponse() const {
  return _internal_has_mdsubscriberesponse();
}
inline const ::com::htsc::mdc::insight::model::MDSubscribeResponse& MessageBody::_internal_mdsubscriberesponse() const {
  const ::com::htsc::mdc::insight::model::MDSubscribeResponse* p = _impl_.mdsubscriberesponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MDSubscribeResponse&>(
      ::com::htsc::mdc::insight::model::_MDSubscribeResponse_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MDSubscribeResponse& MessageBody::mdsubscriberesponse() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.mdSubscribeResponse)
  return _internal_mdsubscriberesponse();
}
inline void MessageBody::unsafe_arena_set_allocated_mdsubscriberesponse(
    ::com::htsc::mdc::insight::model::MDSubscribeResponse* mdsubscriberesponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mdsubscriberesponse_);
  }
  _impl_.mdsubscriberesponse_ = mdsubscriberesponse;
  if (mdsubscriberesponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.mdSubscribeResponse)
}
inline ::com::htsc::mdc::insight::model::MDSubscribeResponse* MessageBody::release_mdsubscriberesponse() {
  
  ::com::htsc::mdc::insight::model::MDSubscribeResponse* temp = _impl_.mdsubscriberesponse_;
  _impl_.mdsubscriberesponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSubscribeResponse* MessageBody::unsafe_arena_release_mdsubscriberesponse() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.mdSubscribeResponse)
  
  ::com::htsc::mdc::insight::model::MDSubscribeResponse* temp = _impl_.mdsubscriberesponse_;
  _impl_.mdsubscriberesponse_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDSubscribeResponse* MessageBody::_internal_mutable_mdsubscriberesponse() {
  
  if (_impl_.mdsubscriberesponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDSubscribeResponse>(GetArenaForAllocation());
    _impl_.mdsubscriberesponse_ = p;
  }
  return _impl_.mdsubscriberesponse_;
}
inline ::com::htsc::mdc::insight::model::MDSubscribeResponse* MessageBody::mutable_mdsubscriberesponse() {
  ::com::htsc::mdc::insight::model::MDSubscribeResponse* _msg = _internal_mutable_mdsubscriberesponse();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.mdSubscribeResponse)
  return _msg;
}
inline void MessageBody::set_allocated_mdsubscriberesponse(::com::htsc::mdc::insight::model::MDSubscribeResponse* mdsubscriberesponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mdsubscriberesponse_);
  }
  if (mdsubscriberesponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdsubscriberesponse));
    if (message_arena != submessage_arena) {
      mdsubscriberesponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdsubscriberesponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mdsubscriberesponse_ = mdsubscriberesponse;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.mdSubscribeResponse)
}

// .com.htsc.mdc.insight.model.HtscMarketData pushMarketData = 20;
inline bool MessageBody::_internal_has_pushmarketdata() const {
  return this != internal_default_instance() && _impl_.pushmarketdata_ != nullptr;
}
inline bool MessageBody::has_pushmarketdata() const {
  return _internal_has_pushmarketdata();
}
inline const ::com::htsc::mdc::insight::model::HtscMarketData& MessageBody::_internal_pushmarketdata() const {
  const ::com::htsc::mdc::insight::model::HtscMarketData* p = _impl_.pushmarketdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::HtscMarketData&>(
      ::com::htsc::mdc::insight::model::_HtscMarketData_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::HtscMarketData& MessageBody::pushmarketdata() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.pushMarketData)
  return _internal_pushmarketdata();
}
inline void MessageBody::unsafe_arena_set_allocated_pushmarketdata(
    ::com::htsc::mdc::insight::model::HtscMarketData* pushmarketdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pushmarketdata_);
  }
  _impl_.pushmarketdata_ = pushmarketdata;
  if (pushmarketdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.pushMarketData)
}
inline ::com::htsc::mdc::insight::model::HtscMarketData* MessageBody::release_pushmarketdata() {
  
  ::com::htsc::mdc::insight::model::HtscMarketData* temp = _impl_.pushmarketdata_;
  _impl_.pushmarketdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::HtscMarketData* MessageBody::unsafe_arena_release_pushmarketdata() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.pushMarketData)
  
  ::com::htsc::mdc::insight::model::HtscMarketData* temp = _impl_.pushmarketdata_;
  _impl_.pushmarketdata_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::HtscMarketData* MessageBody::_internal_mutable_pushmarketdata() {
  
  if (_impl_.pushmarketdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::HtscMarketData>(GetArenaForAllocation());
    _impl_.pushmarketdata_ = p;
  }
  return _impl_.pushmarketdata_;
}
inline ::com::htsc::mdc::insight::model::HtscMarketData* MessageBody::mutable_pushmarketdata() {
  ::com::htsc::mdc::insight::model::HtscMarketData* _msg = _internal_mutable_pushmarketdata();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.pushMarketData)
  return _msg;
}
inline void MessageBody::set_allocated_pushmarketdata(::com::htsc::mdc::insight::model::HtscMarketData* pushmarketdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pushmarketdata_);
  }
  if (pushmarketdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushmarketdata));
    if (message_arena != submessage_arena) {
      pushmarketdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushmarketdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pushmarketdata_ = pushmarketdata;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.pushMarketData)
}

// .com.htsc.mdc.insight.model.MarketDataStream pushMarketDataStream = 21;
inline bool MessageBody::_internal_has_pushmarketdatastream() const {
  return this != internal_default_instance() && _impl_.pushmarketdatastream_ != nullptr;
}
inline bool MessageBody::has_pushmarketdatastream() const {
  return _internal_has_pushmarketdatastream();
}
inline const ::com::htsc::mdc::insight::model::MarketDataStream& MessageBody::_internal_pushmarketdatastream() const {
  const ::com::htsc::mdc::insight::model::MarketDataStream* p = _impl_.pushmarketdatastream_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MarketDataStream&>(
      ::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MarketDataStream& MessageBody::pushmarketdatastream() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.pushMarketDataStream)
  return _internal_pushmarketdatastream();
}
inline void MessageBody::unsafe_arena_set_allocated_pushmarketdatastream(
    ::com::htsc::mdc::insight::model::MarketDataStream* pushmarketdatastream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pushmarketdatastream_);
  }
  _impl_.pushmarketdatastream_ = pushmarketdatastream;
  if (pushmarketdatastream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.pushMarketDataStream)
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MessageBody::release_pushmarketdatastream() {
  
  ::com::htsc::mdc::insight::model::MarketDataStream* temp = _impl_.pushmarketdatastream_;
  _impl_.pushmarketdatastream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MessageBody::unsafe_arena_release_pushmarketdatastream() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.pushMarketDataStream)
  
  ::com::htsc::mdc::insight::model::MarketDataStream* temp = _impl_.pushmarketdatastream_;
  _impl_.pushmarketdatastream_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MessageBody::_internal_mutable_pushmarketdatastream() {
  
  if (_impl_.pushmarketdatastream_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketDataStream>(GetArenaForAllocation());
    _impl_.pushmarketdatastream_ = p;
  }
  return _impl_.pushmarketdatastream_;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MessageBody::mutable_pushmarketdatastream() {
  ::com::htsc::mdc::insight::model::MarketDataStream* _msg = _internal_mutable_pushmarketdatastream();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.pushMarketDataStream)
  return _msg;
}
inline void MessageBody::set_allocated_pushmarketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* pushmarketdatastream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pushmarketdatastream_);
  }
  if (pushmarketdatastream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushmarketdatastream));
    if (message_arena != submessage_arena) {
      pushmarketdatastream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushmarketdatastream, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pushmarketdatastream_ = pushmarketdatastream;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.pushMarketDataStream)
}

// .com.htsc.mdc.insight.model.MDQueryRequest mdQueryRequest = 30;
inline bool MessageBody::_internal_has_mdqueryrequest() const {
  return this != internal_default_instance() && _impl_.mdqueryrequest_ != nullptr;
}
inline bool MessageBody::has_mdqueryrequest() const {
  return _internal_has_mdqueryrequest();
}
inline const ::com::htsc::mdc::insight::model::MDQueryRequest& MessageBody::_internal_mdqueryrequest() const {
  const ::com::htsc::mdc::insight::model::MDQueryRequest* p = _impl_.mdqueryrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MDQueryRequest&>(
      ::com::htsc::mdc::insight::model::_MDQueryRequest_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MDQueryRequest& MessageBody::mdqueryrequest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.mdQueryRequest)
  return _internal_mdqueryrequest();
}
inline void MessageBody::unsafe_arena_set_allocated_mdqueryrequest(
    ::com::htsc::mdc::insight::model::MDQueryRequest* mdqueryrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mdqueryrequest_);
  }
  _impl_.mdqueryrequest_ = mdqueryrequest;
  if (mdqueryrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.mdQueryRequest)
}
inline ::com::htsc::mdc::insight::model::MDQueryRequest* MessageBody::release_mdqueryrequest() {
  
  ::com::htsc::mdc::insight::model::MDQueryRequest* temp = _impl_.mdqueryrequest_;
  _impl_.mdqueryrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDQueryRequest* MessageBody::unsafe_arena_release_mdqueryrequest() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.mdQueryRequest)
  
  ::com::htsc::mdc::insight::model::MDQueryRequest* temp = _impl_.mdqueryrequest_;
  _impl_.mdqueryrequest_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDQueryRequest* MessageBody::_internal_mutable_mdqueryrequest() {
  
  if (_impl_.mdqueryrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQueryRequest>(GetArenaForAllocation());
    _impl_.mdqueryrequest_ = p;
  }
  return _impl_.mdqueryrequest_;
}
inline ::com::htsc::mdc::insight::model::MDQueryRequest* MessageBody::mutable_mdqueryrequest() {
  ::com::htsc::mdc::insight::model::MDQueryRequest* _msg = _internal_mutable_mdqueryrequest();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.mdQueryRequest)
  return _msg;
}
inline void MessageBody::set_allocated_mdqueryrequest(::com::htsc::mdc::insight::model::MDQueryRequest* mdqueryrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mdqueryrequest_);
  }
  if (mdqueryrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdqueryrequest));
    if (message_arena != submessage_arena) {
      mdqueryrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdqueryrequest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mdqueryrequest_ = mdqueryrequest;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.mdQueryRequest)
}

// .com.htsc.mdc.insight.model.MDQueryResponse mdQueryResponse = 31;
inline bool MessageBody::_internal_has_mdqueryresponse() const {
  return this != internal_default_instance() && _impl_.mdqueryresponse_ != nullptr;
}
inline bool MessageBody::has_mdqueryresponse() const {
  return _internal_has_mdqueryresponse();
}
inline const ::com::htsc::mdc::insight::model::MDQueryResponse& MessageBody::_internal_mdqueryresponse() const {
  const ::com::htsc::mdc::insight::model::MDQueryResponse* p = _impl_.mdqueryresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MDQueryResponse&>(
      ::com::htsc::mdc::insight::model::_MDQueryResponse_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MDQueryResponse& MessageBody::mdqueryresponse() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.mdQueryResponse)
  return _internal_mdqueryresponse();
}
inline void MessageBody::unsafe_arena_set_allocated_mdqueryresponse(
    ::com::htsc::mdc::insight::model::MDQueryResponse* mdqueryresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mdqueryresponse_);
  }
  _impl_.mdqueryresponse_ = mdqueryresponse;
  if (mdqueryresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.mdQueryResponse)
}
inline ::com::htsc::mdc::insight::model::MDQueryResponse* MessageBody::release_mdqueryresponse() {
  
  ::com::htsc::mdc::insight::model::MDQueryResponse* temp = _impl_.mdqueryresponse_;
  _impl_.mdqueryresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDQueryResponse* MessageBody::unsafe_arena_release_mdqueryresponse() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.mdQueryResponse)
  
  ::com::htsc::mdc::insight::model::MDQueryResponse* temp = _impl_.mdqueryresponse_;
  _impl_.mdqueryresponse_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MDQueryResponse* MessageBody::_internal_mutable_mdqueryresponse() {
  
  if (_impl_.mdqueryresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQueryResponse>(GetArenaForAllocation());
    _impl_.mdqueryresponse_ = p;
  }
  return _impl_.mdqueryresponse_;
}
inline ::com::htsc::mdc::insight::model::MDQueryResponse* MessageBody::mutable_mdqueryresponse() {
  ::com::htsc::mdc::insight::model::MDQueryResponse* _msg = _internal_mutable_mdqueryresponse();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.mdQueryResponse)
  return _msg;
}
inline void MessageBody::set_allocated_mdqueryresponse(::com::htsc::mdc::insight::model::MDQueryResponse* mdqueryresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mdqueryresponse_);
  }
  if (mdqueryresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdqueryresponse));
    if (message_arena != submessage_arena) {
      mdqueryresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdqueryresponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mdqueryresponse_ = mdqueryresponse;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.mdQueryResponse)
}

// .com.htsc.mdc.insight.model.PlaybackRequest playbackRequest = 32;
inline bool MessageBody::_internal_has_playbackrequest() const {
  return this != internal_default_instance() && _impl_.playbackrequest_ != nullptr;
}
inline bool MessageBody::has_playbackrequest() const {
  return _internal_has_playbackrequest();
}
inline const ::com::htsc::mdc::insight::model::PlaybackRequest& MessageBody::_internal_playbackrequest() const {
  const ::com::htsc::mdc::insight::model::PlaybackRequest* p = _impl_.playbackrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::PlaybackRequest&>(
      ::com::htsc::mdc::insight::model::_PlaybackRequest_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::PlaybackRequest& MessageBody::playbackrequest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.playbackRequest)
  return _internal_playbackrequest();
}
inline void MessageBody::unsafe_arena_set_allocated_playbackrequest(
    ::com::htsc::mdc::insight::model::PlaybackRequest* playbackrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackrequest_);
  }
  _impl_.playbackrequest_ = playbackrequest;
  if (playbackrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackRequest)
}
inline ::com::htsc::mdc::insight::model::PlaybackRequest* MessageBody::release_playbackrequest() {
  
  ::com::htsc::mdc::insight::model::PlaybackRequest* temp = _impl_.playbackrequest_;
  _impl_.playbackrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackRequest* MessageBody::unsafe_arena_release_playbackrequest() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.playbackRequest)
  
  ::com::htsc::mdc::insight::model::PlaybackRequest* temp = _impl_.playbackrequest_;
  _impl_.playbackrequest_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackRequest* MessageBody::_internal_mutable_playbackrequest() {
  
  if (_impl_.playbackrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackRequest>(GetArenaForAllocation());
    _impl_.playbackrequest_ = p;
  }
  return _impl_.playbackrequest_;
}
inline ::com::htsc::mdc::insight::model::PlaybackRequest* MessageBody::mutable_playbackrequest() {
  ::com::htsc::mdc::insight::model::PlaybackRequest* _msg = _internal_mutable_playbackrequest();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.playbackRequest)
  return _msg;
}
inline void MessageBody::set_allocated_playbackrequest(::com::htsc::mdc::insight::model::PlaybackRequest* playbackrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackrequest_);
  }
  if (playbackrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playbackrequest));
    if (message_arena != submessage_arena) {
      playbackrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playbackrequest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playbackrequest_ = playbackrequest;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackRequest)
}

// .com.htsc.mdc.insight.model.PlaybackResponse playbackResponse = 33;
inline bool MessageBody::_internal_has_playbackresponse() const {
  return this != internal_default_instance() && _impl_.playbackresponse_ != nullptr;
}
inline bool MessageBody::has_playbackresponse() const {
  return _internal_has_playbackresponse();
}
inline const ::com::htsc::mdc::insight::model::PlaybackResponse& MessageBody::_internal_playbackresponse() const {
  const ::com::htsc::mdc::insight::model::PlaybackResponse* p = _impl_.playbackresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::PlaybackResponse&>(
      ::com::htsc::mdc::insight::model::_PlaybackResponse_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::PlaybackResponse& MessageBody::playbackresponse() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.playbackResponse)
  return _internal_playbackresponse();
}
inline void MessageBody::unsafe_arena_set_allocated_playbackresponse(
    ::com::htsc::mdc::insight::model::PlaybackResponse* playbackresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackresponse_);
  }
  _impl_.playbackresponse_ = playbackresponse;
  if (playbackresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackResponse)
}
inline ::com::htsc::mdc::insight::model::PlaybackResponse* MessageBody::release_playbackresponse() {
  
  ::com::htsc::mdc::insight::model::PlaybackResponse* temp = _impl_.playbackresponse_;
  _impl_.playbackresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackResponse* MessageBody::unsafe_arena_release_playbackresponse() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.playbackResponse)
  
  ::com::htsc::mdc::insight::model::PlaybackResponse* temp = _impl_.playbackresponse_;
  _impl_.playbackresponse_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackResponse* MessageBody::_internal_mutable_playbackresponse() {
  
  if (_impl_.playbackresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackResponse>(GetArenaForAllocation());
    _impl_.playbackresponse_ = p;
  }
  return _impl_.playbackresponse_;
}
inline ::com::htsc::mdc::insight::model::PlaybackResponse* MessageBody::mutable_playbackresponse() {
  ::com::htsc::mdc::insight::model::PlaybackResponse* _msg = _internal_mutable_playbackresponse();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.playbackResponse)
  return _msg;
}
inline void MessageBody::set_allocated_playbackresponse(::com::htsc::mdc::insight::model::PlaybackResponse* playbackresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackresponse_);
  }
  if (playbackresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playbackresponse));
    if (message_arena != submessage_arena) {
      playbackresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playbackresponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playbackresponse_ = playbackresponse;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackResponse)
}

// .com.htsc.mdc.insight.model.PlaybackControlRequest playbackControlRequest = 34;
inline bool MessageBody::_internal_has_playbackcontrolrequest() const {
  return this != internal_default_instance() && _impl_.playbackcontrolrequest_ != nullptr;
}
inline bool MessageBody::has_playbackcontrolrequest() const {
  return _internal_has_playbackcontrolrequest();
}
inline const ::com::htsc::mdc::insight::model::PlaybackControlRequest& MessageBody::_internal_playbackcontrolrequest() const {
  const ::com::htsc::mdc::insight::model::PlaybackControlRequest* p = _impl_.playbackcontrolrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::PlaybackControlRequest&>(
      ::com::htsc::mdc::insight::model::_PlaybackControlRequest_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::PlaybackControlRequest& MessageBody::playbackcontrolrequest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.playbackControlRequest)
  return _internal_playbackcontrolrequest();
}
inline void MessageBody::unsafe_arena_set_allocated_playbackcontrolrequest(
    ::com::htsc::mdc::insight::model::PlaybackControlRequest* playbackcontrolrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackcontrolrequest_);
  }
  _impl_.playbackcontrolrequest_ = playbackcontrolrequest;
  if (playbackcontrolrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackControlRequest)
}
inline ::com::htsc::mdc::insight::model::PlaybackControlRequest* MessageBody::release_playbackcontrolrequest() {
  
  ::com::htsc::mdc::insight::model::PlaybackControlRequest* temp = _impl_.playbackcontrolrequest_;
  _impl_.playbackcontrolrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackControlRequest* MessageBody::unsafe_arena_release_playbackcontrolrequest() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.playbackControlRequest)
  
  ::com::htsc::mdc::insight::model::PlaybackControlRequest* temp = _impl_.playbackcontrolrequest_;
  _impl_.playbackcontrolrequest_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackControlRequest* MessageBody::_internal_mutable_playbackcontrolrequest() {
  
  if (_impl_.playbackcontrolrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackControlRequest>(GetArenaForAllocation());
    _impl_.playbackcontrolrequest_ = p;
  }
  return _impl_.playbackcontrolrequest_;
}
inline ::com::htsc::mdc::insight::model::PlaybackControlRequest* MessageBody::mutable_playbackcontrolrequest() {
  ::com::htsc::mdc::insight::model::PlaybackControlRequest* _msg = _internal_mutable_playbackcontrolrequest();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.playbackControlRequest)
  return _msg;
}
inline void MessageBody::set_allocated_playbackcontrolrequest(::com::htsc::mdc::insight::model::PlaybackControlRequest* playbackcontrolrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackcontrolrequest_);
  }
  if (playbackcontrolrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playbackcontrolrequest));
    if (message_arena != submessage_arena) {
      playbackcontrolrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playbackcontrolrequest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playbackcontrolrequest_ = playbackcontrolrequest;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackControlRequest)
}

// .com.htsc.mdc.insight.model.PlaybackControlResponse playbackControlResponse = 35;
inline bool MessageBody::_internal_has_playbackcontrolresponse() const {
  return this != internal_default_instance() && _impl_.playbackcontrolresponse_ != nullptr;
}
inline bool MessageBody::has_playbackcontrolresponse() const {
  return _internal_has_playbackcontrolresponse();
}
inline const ::com::htsc::mdc::insight::model::PlaybackControlResponse& MessageBody::_internal_playbackcontrolresponse() const {
  const ::com::htsc::mdc::insight::model::PlaybackControlResponse* p = _impl_.playbackcontrolresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::PlaybackControlResponse&>(
      ::com::htsc::mdc::insight::model::_PlaybackControlResponse_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::PlaybackControlResponse& MessageBody::playbackcontrolresponse() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.playbackControlResponse)
  return _internal_playbackcontrolresponse();
}
inline void MessageBody::unsafe_arena_set_allocated_playbackcontrolresponse(
    ::com::htsc::mdc::insight::model::PlaybackControlResponse* playbackcontrolresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackcontrolresponse_);
  }
  _impl_.playbackcontrolresponse_ = playbackcontrolresponse;
  if (playbackcontrolresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackControlResponse)
}
inline ::com::htsc::mdc::insight::model::PlaybackControlResponse* MessageBody::release_playbackcontrolresponse() {
  
  ::com::htsc::mdc::insight::model::PlaybackControlResponse* temp = _impl_.playbackcontrolresponse_;
  _impl_.playbackcontrolresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackControlResponse* MessageBody::unsafe_arena_release_playbackcontrolresponse() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.playbackControlResponse)
  
  ::com::htsc::mdc::insight::model::PlaybackControlResponse* temp = _impl_.playbackcontrolresponse_;
  _impl_.playbackcontrolresponse_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackControlResponse* MessageBody::_internal_mutable_playbackcontrolresponse() {
  
  if (_impl_.playbackcontrolresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackControlResponse>(GetArenaForAllocation());
    _impl_.playbackcontrolresponse_ = p;
  }
  return _impl_.playbackcontrolresponse_;
}
inline ::com::htsc::mdc::insight::model::PlaybackControlResponse* MessageBody::mutable_playbackcontrolresponse() {
  ::com::htsc::mdc::insight::model::PlaybackControlResponse* _msg = _internal_mutable_playbackcontrolresponse();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.playbackControlResponse)
  return _msg;
}
inline void MessageBody::set_allocated_playbackcontrolresponse(::com::htsc::mdc::insight::model::PlaybackControlResponse* playbackcontrolresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackcontrolresponse_);
  }
  if (playbackcontrolresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playbackcontrolresponse));
    if (message_arena != submessage_arena) {
      playbackcontrolresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playbackcontrolresponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playbackcontrolresponse_ = playbackcontrolresponse;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackControlResponse)
}

// .com.htsc.mdc.insight.model.PlaybackStatusRequest playbackStatusRequest = 36;
inline bool MessageBody::_internal_has_playbackstatusrequest() const {
  return this != internal_default_instance() && _impl_.playbackstatusrequest_ != nullptr;
}
inline bool MessageBody::has_playbackstatusrequest() const {
  return _internal_has_playbackstatusrequest();
}
inline const ::com::htsc::mdc::insight::model::PlaybackStatusRequest& MessageBody::_internal_playbackstatusrequest() const {
  const ::com::htsc::mdc::insight::model::PlaybackStatusRequest* p = _impl_.playbackstatusrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::PlaybackStatusRequest&>(
      ::com::htsc::mdc::insight::model::_PlaybackStatusRequest_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::PlaybackStatusRequest& MessageBody::playbackstatusrequest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.playbackStatusRequest)
  return _internal_playbackstatusrequest();
}
inline void MessageBody::unsafe_arena_set_allocated_playbackstatusrequest(
    ::com::htsc::mdc::insight::model::PlaybackStatusRequest* playbackstatusrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackstatusrequest_);
  }
  _impl_.playbackstatusrequest_ = playbackstatusrequest;
  if (playbackstatusrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackStatusRequest)
}
inline ::com::htsc::mdc::insight::model::PlaybackStatusRequest* MessageBody::release_playbackstatusrequest() {
  
  ::com::htsc::mdc::insight::model::PlaybackStatusRequest* temp = _impl_.playbackstatusrequest_;
  _impl_.playbackstatusrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackStatusRequest* MessageBody::unsafe_arena_release_playbackstatusrequest() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.playbackStatusRequest)
  
  ::com::htsc::mdc::insight::model::PlaybackStatusRequest* temp = _impl_.playbackstatusrequest_;
  _impl_.playbackstatusrequest_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackStatusRequest* MessageBody::_internal_mutable_playbackstatusrequest() {
  
  if (_impl_.playbackstatusrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackStatusRequest>(GetArenaForAllocation());
    _impl_.playbackstatusrequest_ = p;
  }
  return _impl_.playbackstatusrequest_;
}
inline ::com::htsc::mdc::insight::model::PlaybackStatusRequest* MessageBody::mutable_playbackstatusrequest() {
  ::com::htsc::mdc::insight::model::PlaybackStatusRequest* _msg = _internal_mutable_playbackstatusrequest();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.playbackStatusRequest)
  return _msg;
}
inline void MessageBody::set_allocated_playbackstatusrequest(::com::htsc::mdc::insight::model::PlaybackStatusRequest* playbackstatusrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackstatusrequest_);
  }
  if (playbackstatusrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playbackstatusrequest));
    if (message_arena != submessage_arena) {
      playbackstatusrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playbackstatusrequest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playbackstatusrequest_ = playbackstatusrequest;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackStatusRequest)
}

// .com.htsc.mdc.insight.model.PlaybackStatus playbackStatus = 37;
inline bool MessageBody::_internal_has_playbackstatus() const {
  return this != internal_default_instance() && _impl_.playbackstatus_ != nullptr;
}
inline bool MessageBody::has_playbackstatus() const {
  return _internal_has_playbackstatus();
}
inline const ::com::htsc::mdc::insight::model::PlaybackStatus& MessageBody::_internal_playbackstatus() const {
  const ::com::htsc::mdc::insight::model::PlaybackStatus* p = _impl_.playbackstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::PlaybackStatus&>(
      ::com::htsc::mdc::insight::model::_PlaybackStatus_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::PlaybackStatus& MessageBody::playbackstatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.playbackStatus)
  return _internal_playbackstatus();
}
inline void MessageBody::unsafe_arena_set_allocated_playbackstatus(
    ::com::htsc::mdc::insight::model::PlaybackStatus* playbackstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackstatus_);
  }
  _impl_.playbackstatus_ = playbackstatus;
  if (playbackstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackStatus)
}
inline ::com::htsc::mdc::insight::model::PlaybackStatus* MessageBody::release_playbackstatus() {
  
  ::com::htsc::mdc::insight::model::PlaybackStatus* temp = _impl_.playbackstatus_;
  _impl_.playbackstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackStatus* MessageBody::unsafe_arena_release_playbackstatus() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.playbackStatus)
  
  ::com::htsc::mdc::insight::model::PlaybackStatus* temp = _impl_.playbackstatus_;
  _impl_.playbackstatus_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackStatus* MessageBody::_internal_mutable_playbackstatus() {
  
  if (_impl_.playbackstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackStatus>(GetArenaForAllocation());
    _impl_.playbackstatus_ = p;
  }
  return _impl_.playbackstatus_;
}
inline ::com::htsc::mdc::insight::model::PlaybackStatus* MessageBody::mutable_playbackstatus() {
  ::com::htsc::mdc::insight::model::PlaybackStatus* _msg = _internal_mutable_playbackstatus();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.playbackStatus)
  return _msg;
}
inline void MessageBody::set_allocated_playbackstatus(::com::htsc::mdc::insight::model::PlaybackStatus* playbackstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackstatus_);
  }
  if (playbackstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playbackstatus));
    if (message_arena != submessage_arena) {
      playbackstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playbackstatus, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playbackstatus_ = playbackstatus;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackStatus)
}

// .com.htsc.mdc.insight.model.PlaybackPayload playbackPayload = 38;
inline bool MessageBody::_internal_has_playbackpayload() const {
  return this != internal_default_instance() && _impl_.playbackpayload_ != nullptr;
}
inline bool MessageBody::has_playbackpayload() const {
  return _internal_has_playbackpayload();
}
inline const ::com::htsc::mdc::insight::model::PlaybackPayload& MessageBody::_internal_playbackpayload() const {
  const ::com::htsc::mdc::insight::model::PlaybackPayload* p = _impl_.playbackpayload_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::PlaybackPayload&>(
      ::com::htsc::mdc::insight::model::_PlaybackPayload_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::PlaybackPayload& MessageBody::playbackpayload() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MessageBody.playbackPayload)
  return _internal_playbackpayload();
}
inline void MessageBody::unsafe_arena_set_allocated_playbackpayload(
    ::com::htsc::mdc::insight::model::PlaybackPayload* playbackpayload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackpayload_);
  }
  _impl_.playbackpayload_ = playbackpayload;
  if (playbackpayload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackPayload)
}
inline ::com::htsc::mdc::insight::model::PlaybackPayload* MessageBody::release_playbackpayload() {
  
  ::com::htsc::mdc::insight::model::PlaybackPayload* temp = _impl_.playbackpayload_;
  _impl_.playbackpayload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackPayload* MessageBody::unsafe_arena_release_playbackpayload() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MessageBody.playbackPayload)
  
  ::com::htsc::mdc::insight::model::PlaybackPayload* temp = _impl_.playbackpayload_;
  _impl_.playbackpayload_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::PlaybackPayload* MessageBody::_internal_mutable_playbackpayload() {
  
  if (_impl_.playbackpayload_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::PlaybackPayload>(GetArenaForAllocation());
    _impl_.playbackpayload_ = p;
  }
  return _impl_.playbackpayload_;
}
inline ::com::htsc::mdc::insight::model::PlaybackPayload* MessageBody::mutable_playbackpayload() {
  ::com::htsc::mdc::insight::model::PlaybackPayload* _msg = _internal_mutable_playbackpayload();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MessageBody.playbackPayload)
  return _msg;
}
inline void MessageBody::set_allocated_playbackpayload(::com::htsc::mdc::insight::model::PlaybackPayload* playbackpayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackpayload_);
  }
  if (playbackpayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playbackpayload));
    if (message_arena != submessage_arena) {
      playbackpayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playbackpayload, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playbackpayload_ = playbackpayload;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MessageBody.playbackPayload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageBody_2eproto
