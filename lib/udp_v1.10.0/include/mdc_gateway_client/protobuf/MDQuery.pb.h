// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQuery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDQuery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDQuery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SecuritySourceType.pb.h"
#include "InsightErrorContext.pb.h"
#include "HtscMarketData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDQuery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDQuery_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDQuery_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDQueryRequest;
struct MDQueryRequestDefaultTypeInternal;
extern MDQueryRequestDefaultTypeInternal _MDQueryRequest_default_instance_;
class MDQueryResponse;
struct MDQueryResponseDefaultTypeInternal;
extern MDQueryResponseDefaultTypeInternal _MDQueryResponse_default_instance_;
class QueryParam;
struct QueryParamDefaultTypeInternal;
extern QueryParamDefaultTypeInternal _QueryParam_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDQueryRequest* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQueryRequest>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDQueryResponse* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQueryResponse>(Arena*);
template<> ::com::htsc::mdc::insight::model::QueryParam* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::QueryParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDQueryRequest) */ {
 public:
  inline MDQueryRequest() : MDQueryRequest(nullptr) {}
  ~MDQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR MDQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDQueryRequest(const MDQueryRequest& from);
  MDQueryRequest(MDQueryRequest&& from) noexcept
    : MDQueryRequest() {
    *this = ::std::move(from);
  }

  inline MDQueryRequest& operator=(const MDQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDQueryRequest& operator=(MDQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDQueryRequest* internal_default_instance() {
    return reinterpret_cast<const MDQueryRequest*>(
               &_MDQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDQueryRequest& a, MDQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MDQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDQueryRequest& from) {
    MDQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDQueryRequest";
  }
  protected:
  explicit MDQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuritySourceTypeFieldNumber = 2,
    kHtscSecurityIDsFieldNumber = 3,
    kQueryParamsFieldNumber = 4,
    kQueryTypeFieldNumber = 1,
  };
  // repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
  int securitysourcetype_size() const;
  private:
  int _internal_securitysourcetype_size() const;
  public:
  void clear_securitysourcetype();
  ::com::htsc::mdc::insight::model::SecuritySourceType* mutable_securitysourcetype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >*
      mutable_securitysourcetype();
  private:
  const ::com::htsc::mdc::insight::model::SecuritySourceType& _internal_securitysourcetype(int index) const;
  ::com::htsc::mdc::insight::model::SecuritySourceType* _internal_add_securitysourcetype();
  public:
  const ::com::htsc::mdc::insight::model::SecuritySourceType& securitysourcetype(int index) const;
  ::com::htsc::mdc::insight::model::SecuritySourceType* add_securitysourcetype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >&
      securitysourcetype() const;

  // repeated string htscSecurityIDs = 3;
  int htscsecurityids_size() const;
  private:
  int _internal_htscsecurityids_size() const;
  public:
  void clear_htscsecurityids();
  const std::string& htscsecurityids(int index) const;
  std::string* mutable_htscsecurityids(int index);
  void set_htscsecurityids(int index, const std::string& value);
  void set_htscsecurityids(int index, std::string&& value);
  void set_htscsecurityids(int index, const char* value);
  void set_htscsecurityids(int index, const char* value, size_t size);
  std::string* add_htscsecurityids();
  void add_htscsecurityids(const std::string& value);
  void add_htscsecurityids(std::string&& value);
  void add_htscsecurityids(const char* value);
  void add_htscsecurityids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& htscsecurityids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_htscsecurityids();
  private:
  const std::string& _internal_htscsecurityids(int index) const;
  std::string* _internal_add_htscsecurityids();
  public:

  // repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
  int queryparams_size() const;
  private:
  int _internal_queryparams_size() const;
  public:
  void clear_queryparams();
  ::com::htsc::mdc::insight::model::QueryParam* mutable_queryparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam >*
      mutable_queryparams();
  private:
  const ::com::htsc::mdc::insight::model::QueryParam& _internal_queryparams(int index) const;
  ::com::htsc::mdc::insight::model::QueryParam* _internal_add_queryparams();
  public:
  const ::com::htsc::mdc::insight::model::QueryParam& queryparams(int index) const;
  ::com::htsc::mdc::insight::model::QueryParam* add_queryparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam >&
      queryparams() const;

  // int32 queryType = 1;
  void clear_querytype();
  int32_t querytype() const;
  void set_querytype(int32_t value);
  private:
  int32_t _internal_querytype() const;
  void _internal_set_querytype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType > securitysourcetype_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> htscsecurityids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam > queryparams_;
    int32_t querytype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDQuery_2eproto;
};
// -------------------------------------------------------------------

class QueryParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.QueryParam) */ {
 public:
  inline QueryParam() : QueryParam(nullptr) {}
  ~QueryParam() override;
  explicit PROTOBUF_CONSTEXPR QueryParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParam(const QueryParam& from);
  QueryParam(QueryParam&& from) noexcept
    : QueryParam() {
    *this = ::std::move(from);
  }

  inline QueryParam& operator=(const QueryParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParam& operator=(QueryParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParam* internal_default_instance() {
    return reinterpret_cast<const QueryParam*>(
               &_QueryParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryParam& a, QueryParam& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParam& from) {
    QueryParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.QueryParam";
  }
  protected:
  explicit QueryParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamTypeFieldNumber = 1,
    kParamValueFieldNumber = 2,
  };
  // string paramType = 1;
  void clear_paramtype();
  const std::string& paramtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paramtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paramtype();
  PROTOBUF_NODISCARD std::string* release_paramtype();
  void set_allocated_paramtype(std::string* paramtype);
  private:
  const std::string& _internal_paramtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paramtype(const std::string& value);
  std::string* _internal_mutable_paramtype();
  public:

  // string paramValue = 2;
  void clear_paramvalue();
  const std::string& paramvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paramvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paramvalue();
  PROTOBUF_NODISCARD std::string* release_paramvalue();
  void set_allocated_paramvalue(std::string* paramvalue);
  private:
  const std::string& _internal_paramvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paramvalue(const std::string& value);
  std::string* _internal_mutable_paramvalue();
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.QueryParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDQuery_2eproto;
};
// -------------------------------------------------------------------

class MDQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDQueryResponse) */ {
 public:
  inline MDQueryResponse() : MDQueryResponse(nullptr) {}
  ~MDQueryResponse() override;
  explicit PROTOBUF_CONSTEXPR MDQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDQueryResponse(const MDQueryResponse& from);
  MDQueryResponse(MDQueryResponse&& from) noexcept
    : MDQueryResponse() {
    *this = ::std::move(from);
  }

  inline MDQueryResponse& operator=(const MDQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDQueryResponse& operator=(MDQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDQueryResponse* internal_default_instance() {
    return reinterpret_cast<const MDQueryResponse*>(
               &_MDQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MDQueryResponse& a, MDQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MDQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDQueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDQueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDQueryResponse& from) {
    MDQueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDQueryResponse";
  }
  protected:
  explicit MDQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorContextFieldNumber = 3,
    kMarketDataStreamFieldNumber = 4,
    kQueryTypeFieldNumber = 1,
    kIsSuccessFieldNumber = 2,
  };
  // .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
  bool has_errorcontext() const;
  private:
  bool _internal_has_errorcontext() const;
  public:
  void clear_errorcontext();
  const ::com::htsc::mdc::insight::model::InsightErrorContext& errorcontext() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::InsightErrorContext* release_errorcontext();
  ::com::htsc::mdc::insight::model::InsightErrorContext* mutable_errorcontext();
  void set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);
  private:
  const ::com::htsc::mdc::insight::model::InsightErrorContext& _internal_errorcontext() const;
  ::com::htsc::mdc::insight::model::InsightErrorContext* _internal_mutable_errorcontext();
  public:
  void unsafe_arena_set_allocated_errorcontext(
      ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext);
  ::com::htsc::mdc::insight::model::InsightErrorContext* unsafe_arena_release_errorcontext();

  // .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
  bool has_marketdatastream() const;
  private:
  bool _internal_has_marketdatastream() const;
  public:
  void clear_marketdatastream();
  const ::com::htsc::mdc::insight::model::MarketDataStream& marketdatastream() const;
  PROTOBUF_NODISCARD ::com::htsc::mdc::insight::model::MarketDataStream* release_marketdatastream();
  ::com::htsc::mdc::insight::model::MarketDataStream* mutable_marketdatastream();
  void set_allocated_marketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream);
  private:
  const ::com::htsc::mdc::insight::model::MarketDataStream& _internal_marketdatastream() const;
  ::com::htsc::mdc::insight::model::MarketDataStream* _internal_mutable_marketdatastream();
  public:
  void unsafe_arena_set_allocated_marketdatastream(
      ::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream);
  ::com::htsc::mdc::insight::model::MarketDataStream* unsafe_arena_release_marketdatastream();

  // int32 queryType = 1;
  void clear_querytype();
  int32_t querytype() const;
  void set_querytype(int32_t value);
  private:
  int32_t _internal_querytype() const;
  void _internal_set_querytype(int32_t value);
  public:

  // bool isSuccess = 2;
  void clear_issuccess();
  bool issuccess() const;
  void set_issuccess(bool value);
  private:
  bool _internal_issuccess() const;
  void _internal_set_issuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext_;
    ::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream_;
    int32_t querytype_;
    bool issuccess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDQuery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDQueryRequest

// int32 queryType = 1;
inline void MDQueryRequest::clear_querytype() {
  _impl_.querytype_ = 0;
}
inline int32_t MDQueryRequest::_internal_querytype() const {
  return _impl_.querytype_;
}
inline int32_t MDQueryRequest::querytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryRequest.queryType)
  return _internal_querytype();
}
inline void MDQueryRequest::_internal_set_querytype(int32_t value) {
  
  _impl_.querytype_ = value;
}
inline void MDQueryRequest::set_querytype(int32_t value) {
  _internal_set_querytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryRequest.queryType)
}

// repeated .com.htsc.mdc.insight.model.SecuritySourceType securitySourceType = 2;
inline int MDQueryRequest::_internal_securitysourcetype_size() const {
  return _impl_.securitysourcetype_.size();
}
inline int MDQueryRequest::securitysourcetype_size() const {
  return _internal_securitysourcetype_size();
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* MDQueryRequest::mutable_securitysourcetype(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return _impl_.securitysourcetype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >*
MDQueryRequest::mutable_securitysourcetype() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return &_impl_.securitysourcetype_;
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& MDQueryRequest::_internal_securitysourcetype(int index) const {
  return _impl_.securitysourcetype_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::SecuritySourceType& MDQueryRequest::securitysourcetype(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return _internal_securitysourcetype(index);
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* MDQueryRequest::_internal_add_securitysourcetype() {
  return _impl_.securitysourcetype_.Add();
}
inline ::com::htsc::mdc::insight::model::SecuritySourceType* MDQueryRequest::add_securitysourcetype() {
  ::com::htsc::mdc::insight::model::SecuritySourceType* _add = _internal_add_securitysourcetype();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::SecuritySourceType >&
MDQueryRequest::securitysourcetype() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQueryRequest.securitySourceType)
  return _impl_.securitysourcetype_;
}

// repeated string htscSecurityIDs = 3;
inline int MDQueryRequest::_internal_htscsecurityids_size() const {
  return _impl_.htscsecurityids_.size();
}
inline int MDQueryRequest::htscsecurityids_size() const {
  return _internal_htscsecurityids_size();
}
inline void MDQueryRequest::clear_htscsecurityids() {
  _impl_.htscsecurityids_.Clear();
}
inline std::string* MDQueryRequest::add_htscsecurityids() {
  std::string* _s = _internal_add_htscsecurityids();
  // @@protoc_insertion_point(field_add_mutable:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return _s;
}
inline const std::string& MDQueryRequest::_internal_htscsecurityids(int index) const {
  return _impl_.htscsecurityids_.Get(index);
}
inline const std::string& MDQueryRequest::htscsecurityids(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return _internal_htscsecurityids(index);
}
inline std::string* MDQueryRequest::mutable_htscsecurityids(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return _impl_.htscsecurityids_.Mutable(index);
}
inline void MDQueryRequest::set_htscsecurityids(int index, const std::string& value) {
  _impl_.htscsecurityids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::set_htscsecurityids(int index, std::string&& value) {
  _impl_.htscsecurityids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::set_htscsecurityids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.htscsecurityids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::set_htscsecurityids(int index, const char* value, size_t size) {
  _impl_.htscsecurityids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline std::string* MDQueryRequest::_internal_add_htscsecurityids() {
  return _impl_.htscsecurityids_.Add();
}
inline void MDQueryRequest::add_htscsecurityids(const std::string& value) {
  _impl_.htscsecurityids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::add_htscsecurityids(std::string&& value) {
  _impl_.htscsecurityids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::add_htscsecurityids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.htscsecurityids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline void MDQueryRequest::add_htscsecurityids(const char* value, size_t size) {
  _impl_.htscsecurityids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MDQueryRequest::htscsecurityids() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return _impl_.htscsecurityids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MDQueryRequest::mutable_htscsecurityids() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQueryRequest.htscSecurityIDs)
  return &_impl_.htscsecurityids_;
}

// repeated .com.htsc.mdc.insight.model.QueryParam queryParams = 4;
inline int MDQueryRequest::_internal_queryparams_size() const {
  return _impl_.queryparams_.size();
}
inline int MDQueryRequest::queryparams_size() const {
  return _internal_queryparams_size();
}
inline void MDQueryRequest::clear_queryparams() {
  _impl_.queryparams_.Clear();
}
inline ::com::htsc::mdc::insight::model::QueryParam* MDQueryRequest::mutable_queryparams(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return _impl_.queryparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam >*
MDQueryRequest::mutable_queryparams() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return &_impl_.queryparams_;
}
inline const ::com::htsc::mdc::insight::model::QueryParam& MDQueryRequest::_internal_queryparams(int index) const {
  return _impl_.queryparams_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::QueryParam& MDQueryRequest::queryparams(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return _internal_queryparams(index);
}
inline ::com::htsc::mdc::insight::model::QueryParam* MDQueryRequest::_internal_add_queryparams() {
  return _impl_.queryparams_.Add();
}
inline ::com::htsc::mdc::insight::model::QueryParam* MDQueryRequest::add_queryparams() {
  ::com::htsc::mdc::insight::model::QueryParam* _add = _internal_add_queryparams();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::QueryParam >&
MDQueryRequest::queryparams() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQueryRequest.queryParams)
  return _impl_.queryparams_;
}

// -------------------------------------------------------------------

// QueryParam

// string paramType = 1;
inline void QueryParam::clear_paramtype() {
  _impl_.paramtype_.ClearToEmpty();
}
inline const std::string& QueryParam::paramtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.QueryParam.paramType)
  return _internal_paramtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryParam::set_paramtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.paramtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.QueryParam.paramType)
}
inline std::string* QueryParam::mutable_paramtype() {
  std::string* _s = _internal_mutable_paramtype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.QueryParam.paramType)
  return _s;
}
inline const std::string& QueryParam::_internal_paramtype() const {
  return _impl_.paramtype_.Get();
}
inline void QueryParam::_internal_set_paramtype(const std::string& value) {
  
  _impl_.paramtype_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryParam::_internal_mutable_paramtype() {
  
  return _impl_.paramtype_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryParam::release_paramtype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.QueryParam.paramType)
  return _impl_.paramtype_.Release();
}
inline void QueryParam::set_allocated_paramtype(std::string* paramtype) {
  if (paramtype != nullptr) {
    
  } else {
    
  }
  _impl_.paramtype_.SetAllocated(paramtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paramtype_.IsDefault()) {
    _impl_.paramtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.QueryParam.paramType)
}

// string paramValue = 2;
inline void QueryParam::clear_paramvalue() {
  _impl_.paramvalue_.ClearToEmpty();
}
inline const std::string& QueryParam::paramvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.QueryParam.paramValue)
  return _internal_paramvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryParam::set_paramvalue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.paramvalue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.QueryParam.paramValue)
}
inline std::string* QueryParam::mutable_paramvalue() {
  std::string* _s = _internal_mutable_paramvalue();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.QueryParam.paramValue)
  return _s;
}
inline const std::string& QueryParam::_internal_paramvalue() const {
  return _impl_.paramvalue_.Get();
}
inline void QueryParam::_internal_set_paramvalue(const std::string& value) {
  
  _impl_.paramvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryParam::_internal_mutable_paramvalue() {
  
  return _impl_.paramvalue_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryParam::release_paramvalue() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.QueryParam.paramValue)
  return _impl_.paramvalue_.Release();
}
inline void QueryParam::set_allocated_paramvalue(std::string* paramvalue) {
  if (paramvalue != nullptr) {
    
  } else {
    
  }
  _impl_.paramvalue_.SetAllocated(paramvalue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paramvalue_.IsDefault()) {
    _impl_.paramvalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.QueryParam.paramValue)
}

// -------------------------------------------------------------------

// MDQueryResponse

// int32 queryType = 1;
inline void MDQueryResponse::clear_querytype() {
  _impl_.querytype_ = 0;
}
inline int32_t MDQueryResponse::_internal_querytype() const {
  return _impl_.querytype_;
}
inline int32_t MDQueryResponse::querytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryResponse.queryType)
  return _internal_querytype();
}
inline void MDQueryResponse::_internal_set_querytype(int32_t value) {
  
  _impl_.querytype_ = value;
}
inline void MDQueryResponse::set_querytype(int32_t value) {
  _internal_set_querytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryResponse.queryType)
}

// bool isSuccess = 2;
inline void MDQueryResponse::clear_issuccess() {
  _impl_.issuccess_ = false;
}
inline bool MDQueryResponse::_internal_issuccess() const {
  return _impl_.issuccess_;
}
inline bool MDQueryResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryResponse.isSuccess)
  return _internal_issuccess();
}
inline void MDQueryResponse::_internal_set_issuccess(bool value) {
  
  _impl_.issuccess_ = value;
}
inline void MDQueryResponse::set_issuccess(bool value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQueryResponse.isSuccess)
}

// .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 3;
inline bool MDQueryResponse::_internal_has_errorcontext() const {
  return this != internal_default_instance() && _impl_.errorcontext_ != nullptr;
}
inline bool MDQueryResponse::has_errorcontext() const {
  return _internal_has_errorcontext();
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& MDQueryResponse::_internal_errorcontext() const {
  const ::com::htsc::mdc::insight::model::InsightErrorContext* p = _impl_.errorcontext_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::InsightErrorContext&>(
      ::com::htsc::mdc::insight::model::_InsightErrorContext_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::InsightErrorContext& MDQueryResponse::errorcontext() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
  return _internal_errorcontext();
}
inline void MDQueryResponse::unsafe_arena_set_allocated_errorcontext(
    ::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.errorcontext_);
  }
  _impl_.errorcontext_ = errorcontext;
  if (errorcontext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDQueryResponse::release_errorcontext() {
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.errorcontext_;
  _impl_.errorcontext_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDQueryResponse::unsafe_arena_release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = _impl_.errorcontext_;
  _impl_.errorcontext_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDQueryResponse::_internal_mutable_errorcontext() {
  
  if (_impl_.errorcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::InsightErrorContext>(GetArenaForAllocation());
    _impl_.errorcontext_ = p;
  }
  return _impl_.errorcontext_;
}
inline ::com::htsc::mdc::insight::model::InsightErrorContext* MDQueryResponse::mutable_errorcontext() {
  ::com::htsc::mdc::insight::model::InsightErrorContext* _msg = _internal_mutable_errorcontext();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
  return _msg;
}
inline void MDQueryResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.errorcontext_);
  }
  if (errorcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorcontext));
    if (message_arena != submessage_arena) {
      errorcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorcontext, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.errorcontext_ = errorcontext;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQueryResponse.errorContext)
}

// .com.htsc.mdc.insight.model.MarketDataStream marketDataStream = 4;
inline bool MDQueryResponse::_internal_has_marketdatastream() const {
  return this != internal_default_instance() && _impl_.marketdatastream_ != nullptr;
}
inline bool MDQueryResponse::has_marketdatastream() const {
  return _internal_has_marketdatastream();
}
inline const ::com::htsc::mdc::insight::model::MarketDataStream& MDQueryResponse::_internal_marketdatastream() const {
  const ::com::htsc::mdc::insight::model::MarketDataStream* p = _impl_.marketdatastream_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::htsc::mdc::insight::model::MarketDataStream&>(
      ::com::htsc::mdc::insight::model::_MarketDataStream_default_instance_);
}
inline const ::com::htsc::mdc::insight::model::MarketDataStream& MDQueryResponse::marketdatastream() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
  return _internal_marketdatastream();
}
inline void MDQueryResponse::unsafe_arena_set_allocated_marketdatastream(
    ::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.marketdatastream_);
  }
  _impl_.marketdatastream_ = marketdatastream;
  if (marketdatastream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MDQueryResponse::release_marketdatastream() {
  
  ::com::htsc::mdc::insight::model::MarketDataStream* temp = _impl_.marketdatastream_;
  _impl_.marketdatastream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MDQueryResponse::unsafe_arena_release_marketdatastream() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
  
  ::com::htsc::mdc::insight::model::MarketDataStream* temp = _impl_.marketdatastream_;
  _impl_.marketdatastream_ = nullptr;
  return temp;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MDQueryResponse::_internal_mutable_marketdatastream() {
  
  if (_impl_.marketdatastream_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::htsc::mdc::insight::model::MarketDataStream>(GetArenaForAllocation());
    _impl_.marketdatastream_ = p;
  }
  return _impl_.marketdatastream_;
}
inline ::com::htsc::mdc::insight::model::MarketDataStream* MDQueryResponse::mutable_marketdatastream() {
  ::com::htsc::mdc::insight::model::MarketDataStream* _msg = _internal_mutable_marketdatastream();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
  return _msg;
}
inline void MDQueryResponse::set_allocated_marketdatastream(::com::htsc::mdc::insight::model::MarketDataStream* marketdatastream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.marketdatastream_);
  }
  if (marketdatastream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdatastream));
    if (message_arena != submessage_arena) {
      marketdatastream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketdatastream, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.marketdatastream_ = marketdatastream;
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQueryResponse.marketDataStream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDQuery_2eproto
