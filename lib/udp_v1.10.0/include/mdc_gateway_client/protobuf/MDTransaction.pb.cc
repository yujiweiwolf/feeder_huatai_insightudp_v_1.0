// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDTransaction.proto

#include "MDTransaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDTransaction::MDTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fitradingmethod_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secondaryorderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dealdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dealtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dealnumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bondcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bondname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.tradeindex_)*/int64_t{0}
  , /*decltype(_impl_.tradebuyno_)*/int64_t{0}
  , /*decltype(_impl_.tradesellno_)*/int64_t{0}
  , /*decltype(_impl_.tradetype_)*/0
  , /*decltype(_impl_.tradebsflag_)*/0
  , /*decltype(_impl_.tradeprice_)*/int64_t{0}
  , /*decltype(_impl_.tradeqty_)*/int64_t{0}
  , /*decltype(_impl_.trademoney_)*/int64_t{0}
  , /*decltype(_impl_.applseqnum_)*/int64_t{0}
  , /*decltype(_impl_.channelno_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.tradecleanprice_)*/int64_t{0}
  , /*decltype(_impl_.accruedinterestamt_)*/int64_t{0}
  , /*decltype(_impl_.tradedirtyprice_)*/int64_t{0}
  , /*decltype(_impl_.maturityyield_)*/int64_t{0}
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.settlperiod_)*/0
  , /*decltype(_impl_.accruedinterestotd_)*/int64_t{0}
  , /*decltype(_impl_.duration_)*/int64_t{0}
  , /*decltype(_impl_.modifiedduration_)*/int64_t{0}
  , /*decltype(_impl_.convexity_)*/int64_t{0}
  , /*decltype(_impl_.settltype_)*/0
  , /*decltype(_impl_.hktradetype_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_.bidexecinsttype_)*/0
  , /*decltype(_impl_.marginprice_)*/int64_t{0}
  , /*decltype(_impl_.marketindicator_)*/0
  , /*decltype(_impl_.repoterm_)*/0
  , /*decltype(_impl_.legsettlementamount1st_)*/int64_t{0}
  , /*decltype(_impl_.legsettlementamount2nd_)*/int64_t{0}
  , /*decltype(_impl_.totalfacevalue_)*/int64_t{0}
  , /*decltype(_impl_.legcleanprice1st_)*/int64_t{0}
  , /*decltype(_impl_.legcleanprice2nd_)*/int64_t{0}
  , /*decltype(_impl_.legyield1st_)*/int64_t{0}
  , /*decltype(_impl_.legyield2nd_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDTransactionDefaultTypeInternal() {}
  union {
    MDTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDTransactionDefaultTypeInternal _MDTransaction_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDTransaction_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDTransaction_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDTransaction_2eproto = nullptr;

const uint32_t TableStruct_MDTransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradeindex_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradebuyno_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradesellno_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradebsflag_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradeprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradeqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.trademoney_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.applseqnum_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.channelno_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradecleanprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.accruedinterestamt_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.tradedirtyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.maturityyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.fitradingmethod_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.accruedinterestotd_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.modifiedduration_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.convexity_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.settlperiod_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.settltype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.hktradetype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.secondaryorderid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.bidexecinsttype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.marginprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.dealdate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.dealtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.dealnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.marketindicator_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.repoterm_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.legsettlementamount1st_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.legsettlementamount2nd_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.bondcode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.bondname_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.totalfacevalue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.legcleanprice1st_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.legcleanprice2nd_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.legyield1st_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDTransaction, _impl_.legyield2nd_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDTransaction)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDTransaction_default_instance_._instance,
};

const char descriptor_table_protodef_MDTransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MDTransaction.proto\022\032com.htsc.mdc.insi"
  "ght.model\032\027ESecurityIDSource.proto\032\023ESec"
  "urityType.proto\"\204\t\n\rMDTransaction\022\026\n\016HTS"
  "CSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDT"
  "ime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020secu"
  "rityIDSource\030\005 \001(\0162%.com.htsc.mdc.model."
  "ESecurityIDSource\0227\n\014securityType\030\006 \001(\0162"
  "!.com.htsc.mdc.model.ESecurityType\022\022\n\nTr"
  "adeIndex\030\007 \001(\003\022\022\n\nTradeBuyNo\030\010 \001(\003\022\023\n\013Tr"
  "adeSellNo\030\t \001(\003\022\021\n\tTradeType\030\n \001(\005\022\023\n\013Tr"
  "adeBSFlag\030\013 \001(\005\022\022\n\nTradePrice\030\014 \001(\003\022\020\n\010T"
  "radeQty\030\r \001(\003\022\022\n\nTradeMoney\030\016 \001(\003\022\022\n\nApp"
  "lSeqNum\030\017 \001(\003\022\021\n\tChannelNo\030\020 \001(\005\022\024\n\014Exch"
  "angeDate\030\021 \001(\005\022\024\n\014ExchangeTime\030\022 \001(\005\022\027\n\017"
  "TradeCleanPrice\030\023 \001(\003\022\032\n\022AccruedInterest"
  "Amt\030\024 \001(\003\022\027\n\017TradeDirtyPrice\030\025 \001(\003\022\025\n\rMa"
  "turityYield\030\026 \001(\003\022\027\n\017FITradingMethod\030\027 \001"
  "(\t\022\032\n\022AccruedInterestOtd\030\030 \001(\003\022\020\n\010Durati"
  "on\030\031 \001(\003\022\030\n\020ModifiedDuration\030\032 \001(\003\022\021\n\tCo"
  "nvexity\030\033 \001(\003\022\023\n\013SettlPeriod\030\034 \001(\005\022\021\n\tSe"
  "ttlType\030\035 \001(\005\022\023\n\013HKTradeType\030\036 \001(\005\022\035\n\025Da"
  "taMultiplePowerOf10\030\037 \001(\005\022\030\n\020SecondaryOr"
  "derID\030  \001(\t\022\027\n\017BidExecInstType\030! \001(\005\022\023\n\013"
  "MarginPrice\030\" \001(\003\022\020\n\010DealDate\030# \001(\t\022\020\n\010D"
  "ealTime\030$ \001(\t\022\022\n\nDealNumber\030% \001(\t\022\027\n\017Mar"
  "ketIndicator\030& \001(\005\022\020\n\010RepoTerm\030\' \001(\005\022\036\n\026"
  "LegSettlementAmount1st\030( \001(\003\022\036\n\026LegSettl"
  "ementAmount2nd\030) \001(\003\022\020\n\010BondCode\030* \001(\t\022\020"
  "\n\010BondName\030+ \001(\t\022\026\n\016TotalFacevalue\030, \001(\003"
  "\022\030\n\020LegCleanPrice1st\030- \001(\003\022\030\n\020LegCleanPr"
  "ice2nd\030. \001(\003\022\023\n\013LegYield1st\030/ \001(\003\022\023\n\013Leg"
  "Yield2nd\0300 \001(\003B6\n\032com.htsc.mdc.insight.m"
  "odelB\023MDTransactionProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDTransaction_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDTransaction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDTransaction_2eproto = {
    false, false, 1318, descriptor_table_protodef_MDTransaction_2eproto,
    "MDTransaction.proto",
    &descriptor_table_MDTransaction_2eproto_once, descriptor_table_MDTransaction_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_MDTransaction_2eproto::offsets,
    file_level_metadata_MDTransaction_2eproto, file_level_enum_descriptors_MDTransaction_2eproto,
    file_level_service_descriptors_MDTransaction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDTransaction_2eproto_getter() {
  return &descriptor_table_MDTransaction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDTransaction_2eproto(&descriptor_table_MDTransaction_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDTransaction::_Internal {
 public:
};

MDTransaction::MDTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDTransaction)
}
MDTransaction::MDTransaction(const MDTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.fitradingmethod_){}
    , decltype(_impl_.secondaryorderid_){}
    , decltype(_impl_.dealdate_){}
    , decltype(_impl_.dealtime_){}
    , decltype(_impl_.dealnumber_){}
    , decltype(_impl_.bondcode_){}
    , decltype(_impl_.bondname_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.tradeindex_){}
    , decltype(_impl_.tradebuyno_){}
    , decltype(_impl_.tradesellno_){}
    , decltype(_impl_.tradetype_){}
    , decltype(_impl_.tradebsflag_){}
    , decltype(_impl_.tradeprice_){}
    , decltype(_impl_.tradeqty_){}
    , decltype(_impl_.trademoney_){}
    , decltype(_impl_.applseqnum_){}
    , decltype(_impl_.channelno_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.tradecleanprice_){}
    , decltype(_impl_.accruedinterestamt_){}
    , decltype(_impl_.tradedirtyprice_){}
    , decltype(_impl_.maturityyield_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.settlperiod_){}
    , decltype(_impl_.accruedinterestotd_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.modifiedduration_){}
    , decltype(_impl_.convexity_){}
    , decltype(_impl_.settltype_){}
    , decltype(_impl_.hktradetype_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , decltype(_impl_.bidexecinsttype_){}
    , decltype(_impl_.marginprice_){}
    , decltype(_impl_.marketindicator_){}
    , decltype(_impl_.repoterm_){}
    , decltype(_impl_.legsettlementamount1st_){}
    , decltype(_impl_.legsettlementamount2nd_){}
    , decltype(_impl_.totalfacevalue_){}
    , decltype(_impl_.legcleanprice1st_){}
    , decltype(_impl_.legcleanprice2nd_){}
    , decltype(_impl_.legyield1st_){}
    , decltype(_impl_.legyield2nd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fitradingmethod_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fitradingmethod_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fitradingmethod().empty()) {
    _this->_impl_.fitradingmethod_.Set(from._internal_fitradingmethod(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secondaryorderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secondaryorderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secondaryorderid().empty()) {
    _this->_impl_.secondaryorderid_.Set(from._internal_secondaryorderid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dealdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dealdate().empty()) {
    _this->_impl_.dealdate_.Set(from._internal_dealdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dealtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dealtime().empty()) {
    _this->_impl_.dealtime_.Set(from._internal_dealtime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dealnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dealnumber().empty()) {
    _this->_impl_.dealnumber_.Set(from._internal_dealnumber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bondcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bondcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bondcode().empty()) {
    _this->_impl_.bondcode_.Set(from._internal_bondcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bondname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bondname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bondname().empty()) {
    _this->_impl_.bondname_.Set(from._internal_bondname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.legyield2nd_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.legyield2nd_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDTransaction)
}

inline void MDTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.fitradingmethod_){}
    , decltype(_impl_.secondaryorderid_){}
    , decltype(_impl_.dealdate_){}
    , decltype(_impl_.dealtime_){}
    , decltype(_impl_.dealnumber_){}
    , decltype(_impl_.bondcode_){}
    , decltype(_impl_.bondname_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.tradeindex_){int64_t{0}}
    , decltype(_impl_.tradebuyno_){int64_t{0}}
    , decltype(_impl_.tradesellno_){int64_t{0}}
    , decltype(_impl_.tradetype_){0}
    , decltype(_impl_.tradebsflag_){0}
    , decltype(_impl_.tradeprice_){int64_t{0}}
    , decltype(_impl_.tradeqty_){int64_t{0}}
    , decltype(_impl_.trademoney_){int64_t{0}}
    , decltype(_impl_.applseqnum_){int64_t{0}}
    , decltype(_impl_.channelno_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.tradecleanprice_){int64_t{0}}
    , decltype(_impl_.accruedinterestamt_){int64_t{0}}
    , decltype(_impl_.tradedirtyprice_){int64_t{0}}
    , decltype(_impl_.maturityyield_){int64_t{0}}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.settlperiod_){0}
    , decltype(_impl_.accruedinterestotd_){int64_t{0}}
    , decltype(_impl_.duration_){int64_t{0}}
    , decltype(_impl_.modifiedduration_){int64_t{0}}
    , decltype(_impl_.convexity_){int64_t{0}}
    , decltype(_impl_.settltype_){0}
    , decltype(_impl_.hktradetype_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , decltype(_impl_.bidexecinsttype_){0}
    , decltype(_impl_.marginprice_){int64_t{0}}
    , decltype(_impl_.marketindicator_){0}
    , decltype(_impl_.repoterm_){0}
    , decltype(_impl_.legsettlementamount1st_){int64_t{0}}
    , decltype(_impl_.legsettlementamount2nd_){int64_t{0}}
    , decltype(_impl_.totalfacevalue_){int64_t{0}}
    , decltype(_impl_.legcleanprice1st_){int64_t{0}}
    , decltype(_impl_.legcleanprice2nd_){int64_t{0}}
    , decltype(_impl_.legyield1st_){int64_t{0}}
    , decltype(_impl_.legyield2nd_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fitradingmethod_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fitradingmethod_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secondaryorderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secondaryorderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dealdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dealtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dealnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dealnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bondcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bondcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bondname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bondname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDTransaction::~MDTransaction() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
  _impl_.fitradingmethod_.Destroy();
  _impl_.secondaryorderid_.Destroy();
  _impl_.dealdate_.Destroy();
  _impl_.dealtime_.Destroy();
  _impl_.dealnumber_.Destroy();
  _impl_.bondcode_.Destroy();
  _impl_.bondname_.Destroy();
}

void MDTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.fitradingmethod_.ClearToEmpty();
  _impl_.secondaryorderid_.ClearToEmpty();
  _impl_.dealdate_.ClearToEmpty();
  _impl_.dealtime_.ClearToEmpty();
  _impl_.dealnumber_.ClearToEmpty();
  _impl_.bondcode_.ClearToEmpty();
  _impl_.bondname_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.legyield2nd_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.legyield2nd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 TradeIndex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.tradeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradeBuyNo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tradebuyno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradeSellNo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.tradesellno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TradeType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.tradetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TradeBSFlag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.tradebsflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradePrice = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.tradeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradeQty = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.tradeqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradeMoney = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.trademoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ApplSeqNum = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.applseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChannelNo = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.channelno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradeCleanPrice = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.tradecleanprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AccruedInterestAmt = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.accruedinterestamt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TradeDirtyPrice = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.tradedirtyprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MaturityYield = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.maturityyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string FITradingMethod = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_fitradingmethod();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDTransaction.FITradingMethod"));
        } else
          goto handle_unusual;
        continue;
      // int64 AccruedInterestOtd = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.accruedinterestotd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Duration = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ModifiedDuration = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.modifiedduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Convexity = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.convexity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SettlPeriod = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.settlperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SettlType = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.settltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HKTradeType = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.hktradetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SecondaryOrderID = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_secondaryorderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDTransaction.SecondaryOrderID"));
        } else
          goto handle_unusual;
        continue;
      // int32 BidExecInstType = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bidexecinsttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MarginPrice = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.marginprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string DealDate = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dealdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDTransaction.DealDate"));
        } else
          goto handle_unusual;
        continue;
      // string DealTime = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_dealtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDTransaction.DealTime"));
        } else
          goto handle_unusual;
        continue;
      // string DealNumber = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dealnumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDTransaction.DealNumber"));
        } else
          goto handle_unusual;
        continue;
      // int32 MarketIndicator = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.marketindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RepoTerm = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.repoterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LegSettlementAmount1st = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.legsettlementamount1st_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LegSettlementAmount2nd = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.legsettlementamount2nd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BondCode = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_bondcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDTransaction.BondCode"));
        } else
          goto handle_unusual;
        continue;
      // string BondName = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_bondname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDTransaction.BondName"));
        } else
          goto handle_unusual;
        continue;
      // int64 TotalFacevalue = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.totalfacevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LegCleanPrice1st = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.legcleanprice1st_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LegCleanPrice2nd = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.legcleanprice2nd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LegYield1st = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.legyield1st_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LegYield2nd = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.legyield2nd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // int64 TradeIndex = 7;
  if (this->_internal_tradeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_tradeindex(), target);
  }

  // int64 TradeBuyNo = 8;
  if (this->_internal_tradebuyno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_tradebuyno(), target);
  }

  // int64 TradeSellNo = 9;
  if (this->_internal_tradesellno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_tradesellno(), target);
  }

  // int32 TradeType = 10;
  if (this->_internal_tradetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_tradetype(), target);
  }

  // int32 TradeBSFlag = 11;
  if (this->_internal_tradebsflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_tradebsflag(), target);
  }

  // int64 TradePrice = 12;
  if (this->_internal_tradeprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_tradeprice(), target);
  }

  // int64 TradeQty = 13;
  if (this->_internal_tradeqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_tradeqty(), target);
  }

  // int64 TradeMoney = 14;
  if (this->_internal_trademoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_trademoney(), target);
  }

  // int64 ApplSeqNum = 15;
  if (this->_internal_applseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_applseqnum(), target);
  }

  // int32 ChannelNo = 16;
  if (this->_internal_channelno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_channelno(), target);
  }

  // int32 ExchangeDate = 17;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 18;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_exchangetime(), target);
  }

  // int64 TradeCleanPrice = 19;
  if (this->_internal_tradecleanprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_tradecleanprice(), target);
  }

  // int64 AccruedInterestAmt = 20;
  if (this->_internal_accruedinterestamt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(20, this->_internal_accruedinterestamt(), target);
  }

  // int64 TradeDirtyPrice = 21;
  if (this->_internal_tradedirtyprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_tradedirtyprice(), target);
  }

  // int64 MaturityYield = 22;
  if (this->_internal_maturityyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_maturityyield(), target);
  }

  // string FITradingMethod = 23;
  if (!this->_internal_fitradingmethod().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fitradingmethod().data(), static_cast<int>(this->_internal_fitradingmethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.FITradingMethod");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_fitradingmethod(), target);
  }

  // int64 AccruedInterestOtd = 24;
  if (this->_internal_accruedinterestotd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_accruedinterestotd(), target);
  }

  // int64 Duration = 25;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_duration(), target);
  }

  // int64 ModifiedDuration = 26;
  if (this->_internal_modifiedduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_modifiedduration(), target);
  }

  // int64 Convexity = 27;
  if (this->_internal_convexity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_convexity(), target);
  }

  // int32 SettlPeriod = 28;
  if (this->_internal_settlperiod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_settlperiod(), target);
  }

  // int32 SettlType = 29;
  if (this->_internal_settltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_settltype(), target);
  }

  // int32 HKTradeType = 30;
  if (this->_internal_hktradetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_hktradetype(), target);
  }

  // int32 DataMultiplePowerOf10 = 31;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_datamultiplepowerof10(), target);
  }

  // string SecondaryOrderID = 32;
  if (!this->_internal_secondaryorderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondaryorderid().data(), static_cast<int>(this->_internal_secondaryorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.SecondaryOrderID");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_secondaryorderid(), target);
  }

  // int32 BidExecInstType = 33;
  if (this->_internal_bidexecinsttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_bidexecinsttype(), target);
  }

  // int64 MarginPrice = 34;
  if (this->_internal_marginprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(34, this->_internal_marginprice(), target);
  }

  // string DealDate = 35;
  if (!this->_internal_dealdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dealdate().data(), static_cast<int>(this->_internal_dealdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.DealDate");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_dealdate(), target);
  }

  // string DealTime = 36;
  if (!this->_internal_dealtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dealtime().data(), static_cast<int>(this->_internal_dealtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.DealTime");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_dealtime(), target);
  }

  // string DealNumber = 37;
  if (!this->_internal_dealnumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dealnumber().data(), static_cast<int>(this->_internal_dealnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.DealNumber");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_dealnumber(), target);
  }

  // int32 MarketIndicator = 38;
  if (this->_internal_marketindicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_marketindicator(), target);
  }

  // int32 RepoTerm = 39;
  if (this->_internal_repoterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_repoterm(), target);
  }

  // int64 LegSettlementAmount1st = 40;
  if (this->_internal_legsettlementamount1st() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(40, this->_internal_legsettlementamount1st(), target);
  }

  // int64 LegSettlementAmount2nd = 41;
  if (this->_internal_legsettlementamount2nd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(41, this->_internal_legsettlementamount2nd(), target);
  }

  // string BondCode = 42;
  if (!this->_internal_bondcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bondcode().data(), static_cast<int>(this->_internal_bondcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.BondCode");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_bondcode(), target);
  }

  // string BondName = 43;
  if (!this->_internal_bondname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bondname().data(), static_cast<int>(this->_internal_bondname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.BondName");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_bondname(), target);
  }

  // int64 TotalFacevalue = 44;
  if (this->_internal_totalfacevalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(44, this->_internal_totalfacevalue(), target);
  }

  // int64 LegCleanPrice1st = 45;
  if (this->_internal_legcleanprice1st() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(45, this->_internal_legcleanprice1st(), target);
  }

  // int64 LegCleanPrice2nd = 46;
  if (this->_internal_legcleanprice2nd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(46, this->_internal_legcleanprice2nd(), target);
  }

  // int64 LegYield1st = 47;
  if (this->_internal_legyield1st() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(47, this->_internal_legyield1st(), target);
  }

  // int64 LegYield2nd = 48;
  if (this->_internal_legyield2nd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(48, this->_internal_legyield2nd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDTransaction)
  return target;
}

size_t MDTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDTransaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string FITradingMethod = 23;
  if (!this->_internal_fitradingmethod().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fitradingmethod());
  }

  // string SecondaryOrderID = 32;
  if (!this->_internal_secondaryorderid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondaryorderid());
  }

  // string DealDate = 35;
  if (!this->_internal_dealdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dealdate());
  }

  // string DealTime = 36;
  if (!this->_internal_dealtime().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dealtime());
  }

  // string DealNumber = 37;
  if (!this->_internal_dealnumber().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dealnumber());
  }

  // string BondCode = 42;
  if (!this->_internal_bondcode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bondcode());
  }

  // string BondName = 43;
  if (!this->_internal_bondname().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bondname());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 TradeIndex = 7;
  if (this->_internal_tradeindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradeindex());
  }

  // int64 TradeBuyNo = 8;
  if (this->_internal_tradebuyno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradebuyno());
  }

  // int64 TradeSellNo = 9;
  if (this->_internal_tradesellno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradesellno());
  }

  // int32 TradeType = 10;
  if (this->_internal_tradetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tradetype());
  }

  // int32 TradeBSFlag = 11;
  if (this->_internal_tradebsflag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tradebsflag());
  }

  // int64 TradePrice = 12;
  if (this->_internal_tradeprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradeprice());
  }

  // int64 TradeQty = 13;
  if (this->_internal_tradeqty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tradeqty());
  }

  // int64 TradeMoney = 14;
  if (this->_internal_trademoney() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_trademoney());
  }

  // int64 ApplSeqNum = 15;
  if (this->_internal_applseqnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_applseqnum());
  }

  // int32 ChannelNo = 16;
  if (this->_internal_channelno() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_channelno());
  }

  // int32 ExchangeDate = 17;
  if (this->_internal_exchangedate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangedate());
  }

  // int64 TradeCleanPrice = 19;
  if (this->_internal_tradecleanprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradecleanprice());
  }

  // int64 AccruedInterestAmt = 20;
  if (this->_internal_accruedinterestamt() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_accruedinterestamt());
  }

  // int64 TradeDirtyPrice = 21;
  if (this->_internal_tradedirtyprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_tradedirtyprice());
  }

  // int64 MaturityYield = 22;
  if (this->_internal_maturityyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_maturityyield());
  }

  // int32 ExchangeTime = 18;
  if (this->_internal_exchangetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangetime());
  }

  // int32 SettlPeriod = 28;
  if (this->_internal_settlperiod() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_settlperiod());
  }

  // int64 AccruedInterestOtd = 24;
  if (this->_internal_accruedinterestotd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_accruedinterestotd());
  }

  // int64 Duration = 25;
  if (this->_internal_duration() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  // int64 ModifiedDuration = 26;
  if (this->_internal_modifiedduration() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_modifiedduration());
  }

  // int64 Convexity = 27;
  if (this->_internal_convexity() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_convexity());
  }

  // int32 SettlType = 29;
  if (this->_internal_settltype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_settltype());
  }

  // int32 HKTradeType = 30;
  if (this->_internal_hktradetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hktradetype());
  }

  // int32 DataMultiplePowerOf10 = 31;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  // int32 BidExecInstType = 33;
  if (this->_internal_bidexecinsttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bidexecinsttype());
  }

  // int64 MarginPrice = 34;
  if (this->_internal_marginprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_marginprice());
  }

  // int32 MarketIndicator = 38;
  if (this->_internal_marketindicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_marketindicator());
  }

  // int32 RepoTerm = 39;
  if (this->_internal_repoterm() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_repoterm());
  }

  // int64 LegSettlementAmount1st = 40;
  if (this->_internal_legsettlementamount1st() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_legsettlementamount1st());
  }

  // int64 LegSettlementAmount2nd = 41;
  if (this->_internal_legsettlementamount2nd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_legsettlementamount2nd());
  }

  // int64 TotalFacevalue = 44;
  if (this->_internal_totalfacevalue() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalfacevalue());
  }

  // int64 LegCleanPrice1st = 45;
  if (this->_internal_legcleanprice1st() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_legcleanprice1st());
  }

  // int64 LegCleanPrice2nd = 46;
  if (this->_internal_legcleanprice2nd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_legcleanprice2nd());
  }

  // int64 LegYield1st = 47;
  if (this->_internal_legyield1st() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_legyield1st());
  }

  // int64 LegYield2nd = 48;
  if (this->_internal_legyield2nd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_legyield2nd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDTransaction::GetClassData() const { return &_class_data_; }


void MDTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDTransaction*>(&to_msg);
  auto& from = static_cast<const MDTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_fitradingmethod().empty()) {
    _this->_internal_set_fitradingmethod(from._internal_fitradingmethod());
  }
  if (!from._internal_secondaryorderid().empty()) {
    _this->_internal_set_secondaryorderid(from._internal_secondaryorderid());
  }
  if (!from._internal_dealdate().empty()) {
    _this->_internal_set_dealdate(from._internal_dealdate());
  }
  if (!from._internal_dealtime().empty()) {
    _this->_internal_set_dealtime(from._internal_dealtime());
  }
  if (!from._internal_dealnumber().empty()) {
    _this->_internal_set_dealnumber(from._internal_dealnumber());
  }
  if (!from._internal_bondcode().empty()) {
    _this->_internal_set_bondcode(from._internal_bondcode());
  }
  if (!from._internal_bondname().empty()) {
    _this->_internal_set_bondname(from._internal_bondname());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_tradeindex() != 0) {
    _this->_internal_set_tradeindex(from._internal_tradeindex());
  }
  if (from._internal_tradebuyno() != 0) {
    _this->_internal_set_tradebuyno(from._internal_tradebuyno());
  }
  if (from._internal_tradesellno() != 0) {
    _this->_internal_set_tradesellno(from._internal_tradesellno());
  }
  if (from._internal_tradetype() != 0) {
    _this->_internal_set_tradetype(from._internal_tradetype());
  }
  if (from._internal_tradebsflag() != 0) {
    _this->_internal_set_tradebsflag(from._internal_tradebsflag());
  }
  if (from._internal_tradeprice() != 0) {
    _this->_internal_set_tradeprice(from._internal_tradeprice());
  }
  if (from._internal_tradeqty() != 0) {
    _this->_internal_set_tradeqty(from._internal_tradeqty());
  }
  if (from._internal_trademoney() != 0) {
    _this->_internal_set_trademoney(from._internal_trademoney());
  }
  if (from._internal_applseqnum() != 0) {
    _this->_internal_set_applseqnum(from._internal_applseqnum());
  }
  if (from._internal_channelno() != 0) {
    _this->_internal_set_channelno(from._internal_channelno());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_tradecleanprice() != 0) {
    _this->_internal_set_tradecleanprice(from._internal_tradecleanprice());
  }
  if (from._internal_accruedinterestamt() != 0) {
    _this->_internal_set_accruedinterestamt(from._internal_accruedinterestamt());
  }
  if (from._internal_tradedirtyprice() != 0) {
    _this->_internal_set_tradedirtyprice(from._internal_tradedirtyprice());
  }
  if (from._internal_maturityyield() != 0) {
    _this->_internal_set_maturityyield(from._internal_maturityyield());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_settlperiod() != 0) {
    _this->_internal_set_settlperiod(from._internal_settlperiod());
  }
  if (from._internal_accruedinterestotd() != 0) {
    _this->_internal_set_accruedinterestotd(from._internal_accruedinterestotd());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_modifiedduration() != 0) {
    _this->_internal_set_modifiedduration(from._internal_modifiedduration());
  }
  if (from._internal_convexity() != 0) {
    _this->_internal_set_convexity(from._internal_convexity());
  }
  if (from._internal_settltype() != 0) {
    _this->_internal_set_settltype(from._internal_settltype());
  }
  if (from._internal_hktradetype() != 0) {
    _this->_internal_set_hktradetype(from._internal_hktradetype());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  if (from._internal_bidexecinsttype() != 0) {
    _this->_internal_set_bidexecinsttype(from._internal_bidexecinsttype());
  }
  if (from._internal_marginprice() != 0) {
    _this->_internal_set_marginprice(from._internal_marginprice());
  }
  if (from._internal_marketindicator() != 0) {
    _this->_internal_set_marketindicator(from._internal_marketindicator());
  }
  if (from._internal_repoterm() != 0) {
    _this->_internal_set_repoterm(from._internal_repoterm());
  }
  if (from._internal_legsettlementamount1st() != 0) {
    _this->_internal_set_legsettlementamount1st(from._internal_legsettlementamount1st());
  }
  if (from._internal_legsettlementamount2nd() != 0) {
    _this->_internal_set_legsettlementamount2nd(from._internal_legsettlementamount2nd());
  }
  if (from._internal_totalfacevalue() != 0) {
    _this->_internal_set_totalfacevalue(from._internal_totalfacevalue());
  }
  if (from._internal_legcleanprice1st() != 0) {
    _this->_internal_set_legcleanprice1st(from._internal_legcleanprice1st());
  }
  if (from._internal_legcleanprice2nd() != 0) {
    _this->_internal_set_legcleanprice2nd(from._internal_legcleanprice2nd());
  }
  if (from._internal_legyield1st() != 0) {
    _this->_internal_set_legyield1st(from._internal_legyield1st());
  }
  if (from._internal_legyield2nd() != 0) {
    _this->_internal_set_legyield2nd(from._internal_legyield2nd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDTransaction::CopyFrom(const MDTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDTransaction::IsInitialized() const {
  return true;
}

void MDTransaction::InternalSwap(MDTransaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fitradingmethod_, lhs_arena,
      &other->_impl_.fitradingmethod_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secondaryorderid_, lhs_arena,
      &other->_impl_.secondaryorderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dealdate_, lhs_arena,
      &other->_impl_.dealdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dealtime_, lhs_arena,
      &other->_impl_.dealtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dealnumber_, lhs_arena,
      &other->_impl_.dealnumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bondcode_, lhs_arena,
      &other->_impl_.bondcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bondname_, lhs_arena,
      &other->_impl_.bondname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDTransaction, _impl_.legyield2nd_)
      + sizeof(MDTransaction::_impl_.legyield2nd_)
      - PROTOBUF_FIELD_OFFSET(MDTransaction, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDTransaction_2eproto_getter, &descriptor_table_MDTransaction_2eproto_once,
      file_level_metadata_MDTransaction_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDTransaction*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDTransaction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
