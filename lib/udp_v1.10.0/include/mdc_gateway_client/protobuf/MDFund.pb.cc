// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDFund.proto

#include "MDFund.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR MDFund::MDFund(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buypricequeue_)*/{}
  , /*decltype(_impl_._buypricequeue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.buyorderqtyqueue_)*/{}
  , /*decltype(_impl_._buyorderqtyqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellpricequeue_)*/{}
  , /*decltype(_impl_._sellpricequeue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellorderqtyqueue_)*/{}
  , /*decltype(_impl_._sellorderqtyqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.buyorderqueue_)*/{}
  , /*decltype(_impl_._buyorderqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellorderqueue_)*/{}
  , /*decltype(_impl_._sellorderqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.buynumordersqueue_)*/{}
  , /*decltype(_impl_._buynumordersqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellnumordersqueue_)*/{}
  , /*decltype(_impl_._sellnumordersqueue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradingphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.marketphasecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradinghaltreason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.maxpx_)*/int64_t{0}
  , /*decltype(_impl_.minpx_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.numtrades_)*/int64_t{0}
  , /*decltype(_impl_.totalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.lastpx_)*/int64_t{0}
  , /*decltype(_impl_.openpx_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.highpx_)*/int64_t{0}
  , /*decltype(_impl_.lowpx_)*/int64_t{0}
  , /*decltype(_impl_.diffpx1_)*/int64_t{0}
  , /*decltype(_impl_.diffpx2_)*/int64_t{0}
  , /*decltype(_impl_.totalbuyqty_)*/int64_t{0}
  , /*decltype(_impl_.totalsellqty_)*/int64_t{0}
  , /*decltype(_impl_.weightedavgbuypx_)*/int64_t{0}
  , /*decltype(_impl_.weightedavgsellpx_)*/int64_t{0}
  , /*decltype(_impl_.withdrawbuynumber_)*/int64_t{0}
  , /*decltype(_impl_.withdrawbuyamount_)*/int64_t{0}
  , /*decltype(_impl_.withdrawbuymoney_)*/int64_t{0}
  , /*decltype(_impl_.withdrawsellnumber_)*/int64_t{0}
  , /*decltype(_impl_.withdrawsellamount_)*/int64_t{0}
  , /*decltype(_impl_.withdrawsellmoney_)*/int64_t{0}
  , /*decltype(_impl_.totalbuynumber_)*/int64_t{0}
  , /*decltype(_impl_.totalsellnumber_)*/int64_t{0}
  , /*decltype(_impl_.buytrademaxduration_)*/int64_t{0}
  , /*decltype(_impl_.selltrademaxduration_)*/int64_t{0}
  , /*decltype(_impl_.numbuyorders_)*/0
  , /*decltype(_impl_.numsellorders_)*/0
  , /*decltype(_impl_.iopv_)*/int64_t{0}
  , /*decltype(_impl_.preiopv_)*/int64_t{0}
  , /*decltype(_impl_.purchasenumber_)*/int64_t{0}
  , /*decltype(_impl_.purchaseamount_)*/int64_t{0}
  , /*decltype(_impl_.purchasemoney_)*/int64_t{0}
  , /*decltype(_impl_.redemptionnumber_)*/int64_t{0}
  , /*decltype(_impl_.redemptionamount_)*/int64_t{0}
  , /*decltype(_impl_.redemptionmoney_)*/int64_t{0}
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.norminalpx_)*/int64_t{0}
  , /*decltype(_impl_.shortsellsharestraded_)*/int64_t{0}
  , /*decltype(_impl_.shortsellturnover_)*/int64_t{0}
  , /*decltype(_impl_.premarketlastpx_)*/int64_t{0}
  , /*decltype(_impl_.premarkettotalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.premarkettotalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.channelno_)*/0
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_.premarkethighpx_)*/int64_t{0}
  , /*decltype(_impl_.premarketlowpx_)*/int64_t{0}
  , /*decltype(_impl_.afterhourslastpx_)*/int64_t{0}
  , /*decltype(_impl_.afterhourstotalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.afterhourstotalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.afterhourshighpx_)*/int64_t{0}
  , /*decltype(_impl_.afterhourslowpx_)*/int64_t{0}
  , /*decltype(_impl_.usconsolidatevolume_)*/int64_t{0}
  , /*decltype(_impl_.uscompositeclosepx_)*/int64_t{0}
  , /*decltype(_impl_.otctotalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.otctotalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.otcnumtrades_)*/int64_t{0}
  , /*decltype(_impl_.weightedavgpx_)*/int64_t{0}
  , /*decltype(_impl_.precloseweightedavgpx_)*/int64_t{0}
  , /*decltype(_impl_.bestbuyprice_)*/int64_t{0}
  , /*decltype(_impl_.qtyatbestbuyprice_)*/int64_t{0}
  , /*decltype(_impl_.bestsellprice_)*/int64_t{0}
  , /*decltype(_impl_.qtyatbestsellprice_)*/int64_t{0}
  , /*decltype(_impl_.highaccuracyiopv_)*/int64_t{0}
  , /*decltype(_impl_.highaccuracypreiopv_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MDFundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MDFundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MDFundDefaultTypeInternal() {}
  union {
    MDFund _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MDFundDefaultTypeInternal _MDFund_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_MDFund_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MDFund_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MDFund_2eproto = nullptr;

const uint32_t TableStruct_MDFund_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.tradingphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.maxpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.minpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.lastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.diffpx1_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.diffpx2_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.totalbuyqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.totalsellqty_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.weightedavgbuypx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.weightedavgsellpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.withdrawbuynumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.withdrawbuyamount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.withdrawbuymoney_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.withdrawsellnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.withdrawsellamount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.withdrawsellmoney_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.totalbuynumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.totalsellnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.buytrademaxduration_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.selltrademaxduration_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.numbuyorders_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.numsellorders_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.iopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.preiopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.purchasenumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.purchaseamount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.purchasemoney_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.redemptionnumber_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.redemptionamount_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.redemptionmoney_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.channelno_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.buypricequeue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.buyorderqtyqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.sellpricequeue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.sellorderqtyqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.buyorderqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.sellorderqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.buynumordersqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.sellnumordersqueue_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.norminalpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.shortsellsharestraded_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.shortsellturnover_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.premarketlastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.premarkettotalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.premarkettotalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.premarkethighpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.premarketlowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.afterhourslastpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.afterhourstotalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.afterhourstotalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.afterhourshighpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.afterhourslowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.marketphasecode_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.usconsolidatevolume_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.uscompositeclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.tradinghaltreason_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.otctotalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.otctotalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.otcnumtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.datamultiplepowerof10_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.weightedavgpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.precloseweightedavgpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.bestbuyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.qtyatbestbuyprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.bestsellprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.qtyatbestsellprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.highaccuracyiopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::MDFund, _impl_.highaccuracypreiopv_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::MDFund)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_MDFund_default_instance_._instance,
};

const char descriptor_table_protodef_MDFund_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014MDFund.proto\022\032com.htsc.mdc.insight.mod"
  "el\032\027ESecurityIDSource.proto\032\023ESecurityTy"
  "pe.proto\"\352\020\n\006MDFund\022\026\n\016HTSCSecurityID\030\001 "
  "\001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rD"
  "ataTimestamp\030\004 \001(\003\022\030\n\020TradingPhaseCode\030\005"
  " \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%.com.hts"
  "c.mdc.model.ESecurityIDSource\0227\n\014securit"
  "yType\030\007 \001(\0162!.com.htsc.mdc.model.ESecuri"
  "tyType\022\r\n\005MaxPx\030\010 \001(\003\022\r\n\005MinPx\030\t \001(\003\022\022\n\n"
  "PreClosePx\030\n \001(\003\022\021\n\tNumTrades\030\013 \001(\003\022\030\n\020T"
  "otalVolumeTrade\030\014 \001(\003\022\027\n\017TotalValueTrade"
  "\030\r \001(\003\022\016\n\006LastPx\030\016 \001(\003\022\016\n\006OpenPx\030\017 \001(\003\022\017"
  "\n\007ClosePx\030\020 \001(\003\022\016\n\006HighPx\030\021 \001(\003\022\r\n\005LowPx"
  "\030\022 \001(\003\022\017\n\007DiffPx1\030\023 \001(\003\022\017\n\007DiffPx2\030\024 \001(\003"
  "\022\023\n\013TotalBuyQty\030\025 \001(\003\022\024\n\014TotalSellQty\030\026 "
  "\001(\003\022\030\n\020WeightedAvgBuyPx\030\027 \001(\003\022\031\n\021Weighte"
  "dAvgSellPx\030\030 \001(\003\022\031\n\021WithdrawBuyNumber\030\031 "
  "\001(\003\022\031\n\021WithdrawBuyAmount\030\032 \001(\003\022\030\n\020Withdr"
  "awBuyMoney\030\033 \001(\003\022\032\n\022WithdrawSellNumber\030\034"
  " \001(\003\022\032\n\022WithdrawSellAmount\030\035 \001(\003\022\031\n\021With"
  "drawSellMoney\030\036 \001(\003\022\026\n\016TotalBuyNumber\030\037 "
  "\001(\003\022\027\n\017TotalSellNumber\030  \001(\003\022\033\n\023BuyTrade"
  "MaxDuration\030! \001(\003\022\034\n\024SellTradeMaxDuratio"
  "n\030\" \001(\003\022\024\n\014NumBuyOrders\030# \001(\005\022\025\n\rNumSell"
  "Orders\030$ \001(\005\022\014\n\004IOPV\030% \001(\003\022\017\n\007PreIOPV\030& "
  "\001(\003\022\026\n\016PurchaseNumber\030\' \001(\003\022\026\n\016PurchaseA"
  "mount\030( \001(\003\022\025\n\rPurchaseMoney\030) \001(\003\022\030\n\020Re"
  "demptionNumber\030* \001(\003\022\030\n\020RedemptionAmount"
  "\030+ \001(\003\022\027\n\017RedemptionMoney\030, \001(\003\022\024\n\014Excha"
  "ngeDate\030- \001(\005\022\024\n\014ExchangeTime\030. \001(\005\022\021\n\tC"
  "hannelNo\0302 \001(\005\022\031\n\rBuyPriceQueue\0303 \003(\003B\002\020"
  "\001\022\034\n\020BuyOrderQtyQueue\0304 \003(\003B\002\020\001\022\032\n\016SellP"
  "riceQueue\0305 \003(\003B\002\020\001\022\035\n\021SellOrderQtyQueue"
  "\0306 \003(\003B\002\020\001\022\031\n\rBuyOrderQueue\0307 \003(\003B\002\020\001\022\032\n"
  "\016SellOrderQueue\0308 \003(\003B\002\020\001\022\035\n\021BuyNumOrder"
  "sQueue\0309 \003(\003B\002\020\001\022\036\n\022SellNumOrdersQueue\030:"
  " \003(\003B\002\020\001\022\022\n\nNorminalPx\030; \001(\003\022\035\n\025ShortSel"
  "lSharesTraded\030< \001(\003\022\031\n\021ShortSellTurnover"
  "\030= \001(\003\022\027\n\017PreMarketLastPx\030> \001(\003\022!\n\031PreMa"
  "rketTotalVolumeTrade\030\? \001(\003\022 \n\030PreMarketT"
  "otalValueTrade\030@ \001(\003\022\027\n\017PreMarketHighPx\030"
  "A \001(\003\022\026\n\016PreMarketLowPx\030B \001(\003\022\030\n\020AfterHo"
  "ursLastPx\030C \001(\003\022\"\n\032AfterHoursTotalVolume"
  "Trade\030D \001(\003\022!\n\031AfterHoursTotalValueTrade"
  "\030E \001(\003\022\030\n\020AfterHoursHighPx\030F \001(\003\022\027\n\017Afte"
  "rHoursLowPx\030G \001(\003\022\027\n\017MarketPhaseCode\030H \001"
  "(\t\022\033\n\023USConsolidateVolume\030I \001(\003\022\032\n\022USCom"
  "positeClosePx\030J \001(\003\022\031\n\021TradingHaltReason"
  "\030K \001(\t\022\033\n\023OtcTotalVolumeTrade\030L \001(\003\022\032\n\022O"
  "tcTotalValueTrade\030M \001(\003\022\024\n\014OtcNumTrades\030"
  "N \001(\003\022\035\n\025DataMultiplePowerOf10\030O \001(\005\022\025\n\r"
  "WeightedAvgPx\030P \001(\003\022\035\n\025PreCloseWeightedA"
  "vgPx\030Q \001(\003\022\024\n\014BestBuyPrice\030R \001(\003\022\031\n\021QtyA"
  "tBestBuyPrice\030S \001(\003\022\025\n\rBestSellPrice\030T \001"
  "(\003\022\032\n\022QtyAtBestSellPrice\030U \001(\003\022\030\n\020HighAc"
  "curacyIOPV\030V \001(\003\022\033\n\023HighAccuracyPreIOPV\030"
  "W \001(\003B/\n\032com.htsc.mdc.insight.modelB\014MDF"
  "undProtosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MDFund_2eproto_deps[2] = {
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_MDFund_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MDFund_2eproto = {
    false, false, 2302, descriptor_table_protodef_MDFund_2eproto,
    "MDFund.proto",
    &descriptor_table_MDFund_2eproto_once, descriptor_table_MDFund_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_MDFund_2eproto::offsets,
    file_level_metadata_MDFund_2eproto, file_level_enum_descriptors_MDFund_2eproto,
    file_level_service_descriptors_MDFund_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MDFund_2eproto_getter() {
  return &descriptor_table_MDFund_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MDFund_2eproto(&descriptor_table_MDFund_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDFund::_Internal {
 public:
};

MDFund::MDFund(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.MDFund)
}
MDFund::MDFund(const MDFund& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MDFund* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buypricequeue_){from._impl_.buypricequeue_}
    , /*decltype(_impl_._buypricequeue_cached_byte_size_)*/{0}
    , decltype(_impl_.buyorderqtyqueue_){from._impl_.buyorderqtyqueue_}
    , /*decltype(_impl_._buyorderqtyqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellpricequeue_){from._impl_.sellpricequeue_}
    , /*decltype(_impl_._sellpricequeue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellorderqtyqueue_){from._impl_.sellorderqtyqueue_}
    , /*decltype(_impl_._sellorderqtyqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.buyorderqueue_){from._impl_.buyorderqueue_}
    , /*decltype(_impl_._buyorderqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellorderqueue_){from._impl_.sellorderqueue_}
    , /*decltype(_impl_._sellorderqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.buynumordersqueue_){from._impl_.buynumordersqueue_}
    , /*decltype(_impl_._buynumordersqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellnumordersqueue_){from._impl_.sellnumordersqueue_}
    , /*decltype(_impl_._sellnumordersqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.marketphasecode_){}
    , decltype(_impl_.tradinghaltreason_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.maxpx_){}
    , decltype(_impl_.minpx_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.numtrades_){}
    , decltype(_impl_.totalvolumetrade_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.lastpx_){}
    , decltype(_impl_.openpx_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.highpx_){}
    , decltype(_impl_.lowpx_){}
    , decltype(_impl_.diffpx1_){}
    , decltype(_impl_.diffpx2_){}
    , decltype(_impl_.totalbuyqty_){}
    , decltype(_impl_.totalsellqty_){}
    , decltype(_impl_.weightedavgbuypx_){}
    , decltype(_impl_.weightedavgsellpx_){}
    , decltype(_impl_.withdrawbuynumber_){}
    , decltype(_impl_.withdrawbuyamount_){}
    , decltype(_impl_.withdrawbuymoney_){}
    , decltype(_impl_.withdrawsellnumber_){}
    , decltype(_impl_.withdrawsellamount_){}
    , decltype(_impl_.withdrawsellmoney_){}
    , decltype(_impl_.totalbuynumber_){}
    , decltype(_impl_.totalsellnumber_){}
    , decltype(_impl_.buytrademaxduration_){}
    , decltype(_impl_.selltrademaxduration_){}
    , decltype(_impl_.numbuyorders_){}
    , decltype(_impl_.numsellorders_){}
    , decltype(_impl_.iopv_){}
    , decltype(_impl_.preiopv_){}
    , decltype(_impl_.purchasenumber_){}
    , decltype(_impl_.purchaseamount_){}
    , decltype(_impl_.purchasemoney_){}
    , decltype(_impl_.redemptionnumber_){}
    , decltype(_impl_.redemptionamount_){}
    , decltype(_impl_.redemptionmoney_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.norminalpx_){}
    , decltype(_impl_.shortsellsharestraded_){}
    , decltype(_impl_.shortsellturnover_){}
    , decltype(_impl_.premarketlastpx_){}
    , decltype(_impl_.premarkettotalvolumetrade_){}
    , decltype(_impl_.premarkettotalvaluetrade_){}
    , decltype(_impl_.channelno_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , decltype(_impl_.premarkethighpx_){}
    , decltype(_impl_.premarketlowpx_){}
    , decltype(_impl_.afterhourslastpx_){}
    , decltype(_impl_.afterhourstotalvolumetrade_){}
    , decltype(_impl_.afterhourstotalvaluetrade_){}
    , decltype(_impl_.afterhourshighpx_){}
    , decltype(_impl_.afterhourslowpx_){}
    , decltype(_impl_.usconsolidatevolume_){}
    , decltype(_impl_.uscompositeclosepx_){}
    , decltype(_impl_.otctotalvolumetrade_){}
    , decltype(_impl_.otctotalvaluetrade_){}
    , decltype(_impl_.otcnumtrades_){}
    , decltype(_impl_.weightedavgpx_){}
    , decltype(_impl_.precloseweightedavgpx_){}
    , decltype(_impl_.bestbuyprice_){}
    , decltype(_impl_.qtyatbestbuyprice_){}
    , decltype(_impl_.bestsellprice_){}
    , decltype(_impl_.qtyatbestsellprice_){}
    , decltype(_impl_.highaccuracyiopv_){}
    , decltype(_impl_.highaccuracypreiopv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradingphasecode().empty()) {
    _this->_impl_.tradingphasecode_.Set(from._internal_tradingphasecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.marketphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.marketphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_marketphasecode().empty()) {
    _this->_impl_.marketphasecode_.Set(from._internal_marketphasecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradinghaltreason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradinghaltreason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradinghaltreason().empty()) {
    _this->_impl_.tradinghaltreason_.Set(from._internal_tradinghaltreason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.highaccuracypreiopv_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.highaccuracypreiopv_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDFund)
}

inline void MDFund::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buypricequeue_){arena}
    , /*decltype(_impl_._buypricequeue_cached_byte_size_)*/{0}
    , decltype(_impl_.buyorderqtyqueue_){arena}
    , /*decltype(_impl_._buyorderqtyqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellpricequeue_){arena}
    , /*decltype(_impl_._sellpricequeue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellorderqtyqueue_){arena}
    , /*decltype(_impl_._sellorderqtyqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.buyorderqueue_){arena}
    , /*decltype(_impl_._buyorderqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellorderqueue_){arena}
    , /*decltype(_impl_._sellorderqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.buynumordersqueue_){arena}
    , /*decltype(_impl_._buynumordersqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.sellnumordersqueue_){arena}
    , /*decltype(_impl_._sellnumordersqueue_cached_byte_size_)*/{0}
    , decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.tradingphasecode_){}
    , decltype(_impl_.marketphasecode_){}
    , decltype(_impl_.tradinghaltreason_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.maxpx_){int64_t{0}}
    , decltype(_impl_.minpx_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.numtrades_){int64_t{0}}
    , decltype(_impl_.totalvolumetrade_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.lastpx_){int64_t{0}}
    , decltype(_impl_.openpx_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.highpx_){int64_t{0}}
    , decltype(_impl_.lowpx_){int64_t{0}}
    , decltype(_impl_.diffpx1_){int64_t{0}}
    , decltype(_impl_.diffpx2_){int64_t{0}}
    , decltype(_impl_.totalbuyqty_){int64_t{0}}
    , decltype(_impl_.totalsellqty_){int64_t{0}}
    , decltype(_impl_.weightedavgbuypx_){int64_t{0}}
    , decltype(_impl_.weightedavgsellpx_){int64_t{0}}
    , decltype(_impl_.withdrawbuynumber_){int64_t{0}}
    , decltype(_impl_.withdrawbuyamount_){int64_t{0}}
    , decltype(_impl_.withdrawbuymoney_){int64_t{0}}
    , decltype(_impl_.withdrawsellnumber_){int64_t{0}}
    , decltype(_impl_.withdrawsellamount_){int64_t{0}}
    , decltype(_impl_.withdrawsellmoney_){int64_t{0}}
    , decltype(_impl_.totalbuynumber_){int64_t{0}}
    , decltype(_impl_.totalsellnumber_){int64_t{0}}
    , decltype(_impl_.buytrademaxduration_){int64_t{0}}
    , decltype(_impl_.selltrademaxduration_){int64_t{0}}
    , decltype(_impl_.numbuyorders_){0}
    , decltype(_impl_.numsellorders_){0}
    , decltype(_impl_.iopv_){int64_t{0}}
    , decltype(_impl_.preiopv_){int64_t{0}}
    , decltype(_impl_.purchasenumber_){int64_t{0}}
    , decltype(_impl_.purchaseamount_){int64_t{0}}
    , decltype(_impl_.purchasemoney_){int64_t{0}}
    , decltype(_impl_.redemptionnumber_){int64_t{0}}
    , decltype(_impl_.redemptionamount_){int64_t{0}}
    , decltype(_impl_.redemptionmoney_){int64_t{0}}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.norminalpx_){int64_t{0}}
    , decltype(_impl_.shortsellsharestraded_){int64_t{0}}
    , decltype(_impl_.shortsellturnover_){int64_t{0}}
    , decltype(_impl_.premarketlastpx_){int64_t{0}}
    , decltype(_impl_.premarkettotalvolumetrade_){int64_t{0}}
    , decltype(_impl_.premarkettotalvaluetrade_){int64_t{0}}
    , decltype(_impl_.channelno_){0}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , decltype(_impl_.premarkethighpx_){int64_t{0}}
    , decltype(_impl_.premarketlowpx_){int64_t{0}}
    , decltype(_impl_.afterhourslastpx_){int64_t{0}}
    , decltype(_impl_.afterhourstotalvolumetrade_){int64_t{0}}
    , decltype(_impl_.afterhourstotalvaluetrade_){int64_t{0}}
    , decltype(_impl_.afterhourshighpx_){int64_t{0}}
    , decltype(_impl_.afterhourslowpx_){int64_t{0}}
    , decltype(_impl_.usconsolidatevolume_){int64_t{0}}
    , decltype(_impl_.uscompositeclosepx_){int64_t{0}}
    , decltype(_impl_.otctotalvolumetrade_){int64_t{0}}
    , decltype(_impl_.otctotalvaluetrade_){int64_t{0}}
    , decltype(_impl_.otcnumtrades_){int64_t{0}}
    , decltype(_impl_.weightedavgpx_){int64_t{0}}
    , decltype(_impl_.precloseweightedavgpx_){int64_t{0}}
    , decltype(_impl_.bestbuyprice_){int64_t{0}}
    , decltype(_impl_.qtyatbestbuyprice_){int64_t{0}}
    , decltype(_impl_.bestsellprice_){int64_t{0}}
    , decltype(_impl_.qtyatbestsellprice_){int64_t{0}}
    , decltype(_impl_.highaccuracyiopv_){int64_t{0}}
    , decltype(_impl_.highaccuracypreiopv_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradingphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marketphasecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.marketphasecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradinghaltreason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradinghaltreason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MDFund::~MDFund() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDFund)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MDFund::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buypricequeue_.~RepeatedField();
  _impl_.buyorderqtyqueue_.~RepeatedField();
  _impl_.sellpricequeue_.~RepeatedField();
  _impl_.sellorderqtyqueue_.~RepeatedField();
  _impl_.buyorderqueue_.~RepeatedField();
  _impl_.sellorderqueue_.~RepeatedField();
  _impl_.buynumordersqueue_.~RepeatedField();
  _impl_.sellnumordersqueue_.~RepeatedField();
  _impl_.htscsecurityid_.Destroy();
  _impl_.tradingphasecode_.Destroy();
  _impl_.marketphasecode_.Destroy();
  _impl_.tradinghaltreason_.Destroy();
}

void MDFund::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MDFund::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDFund)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buypricequeue_.Clear();
  _impl_.buyorderqtyqueue_.Clear();
  _impl_.sellpricequeue_.Clear();
  _impl_.sellorderqtyqueue_.Clear();
  _impl_.buyorderqueue_.Clear();
  _impl_.sellorderqueue_.Clear();
  _impl_.buynumordersqueue_.Clear();
  _impl_.sellnumordersqueue_.Clear();
  _impl_.htscsecurityid_.ClearToEmpty();
  _impl_.tradingphasecode_.ClearToEmpty();
  _impl_.marketphasecode_.ClearToEmpty();
  _impl_.tradinghaltreason_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.highaccuracypreiopv_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.highaccuracypreiopv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MDFund::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFund.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingPhaseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tradingphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFund.TradingPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 MaxPx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.maxpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MinPx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.minpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NumTrades = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastPx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenPx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighPx = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowPx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DiffPx1 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.diffpx1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DiffPx2 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.diffpx2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalBuyQty = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.totalbuyqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalSellQty = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.totalsellqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedAvgBuyPx = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.weightedavgbuypx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedAvgSellPx = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.weightedavgsellpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WithdrawBuyNumber = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.withdrawbuynumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WithdrawBuyAmount = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.withdrawbuyamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WithdrawBuyMoney = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.withdrawbuymoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WithdrawSellNumber = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.withdrawsellnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WithdrawSellAmount = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.withdrawsellamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WithdrawSellMoney = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.withdrawsellmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalBuyNumber = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.totalbuynumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalSellNumber = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.totalsellnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BuyTradeMaxDuration = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.buytrademaxduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellTradeMaxDuration = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.selltrademaxduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NumBuyOrders = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.numbuyorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NumSellOrders = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.numsellorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IOPV = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.iopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreIOPV = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.preiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PurchaseNumber = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.purchasenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PurchaseAmount = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.purchaseamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PurchaseMoney = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.purchasemoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RedemptionNumber = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.redemptionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RedemptionAmount = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.redemptionamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RedemptionMoney = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.redemptionmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChannelNo = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.channelno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyPriceQueue = 51 [packed = true];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buypricequeue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          _internal_add_buypricequeue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyOrderQtyQueue = 52 [packed = true];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buyorderqtyqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 160) {
          _internal_add_buyorderqtyqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellPriceQueue = 53 [packed = true];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellpricequeue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 168) {
          _internal_add_sellpricequeue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellOrderQtyQueue = 54 [packed = true];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellorderqtyqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_sellorderqtyqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyOrderQueue = 55 [packed = true];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buyorderqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 184) {
          _internal_add_buyorderqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellOrderQueue = 56 [packed = true];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellorderqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 192) {
          _internal_add_sellorderqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 BuyNumOrdersQueue = 57 [packed = true];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buynumordersqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 200) {
          _internal_add_buynumordersqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 SellNumOrdersQueue = 58 [packed = true];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sellnumordersqueue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 208) {
          _internal_add_sellnumordersqueue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NorminalPx = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.norminalpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ShortSellSharesTraded = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.shortsellsharestraded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ShortSellTurnover = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.shortsellturnover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreMarketLastPx = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.premarketlastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreMarketTotalVolumeTrade = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.premarkettotalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreMarketTotalValueTrade = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.premarkettotalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreMarketHighPx = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.premarkethighpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreMarketLowPx = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.premarketlowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AfterHoursLastPx = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.afterhourslastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AfterHoursTotalVolumeTrade = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.afterhourstotalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AfterHoursTotalValueTrade = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.afterhourstotalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AfterHoursHighPx = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.afterhourshighpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AfterHoursLowPx = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.afterhourslowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MarketPhaseCode = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_marketphasecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFund.MarketPhaseCode"));
        } else
          goto handle_unusual;
        continue;
      // int64 USConsolidateVolume = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.usconsolidatevolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 USCompositeClosePx = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.uscompositeclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TradingHaltReason = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_tradinghaltreason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.MDFund.TradingHaltReason"));
        } else
          goto handle_unusual;
        continue;
      // int64 OtcTotalVolumeTrade = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.otctotalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OtcTotalValueTrade = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.otctotalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OtcNumTrades = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.otcnumtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeightedAvgPx = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.weightedavgpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreCloseWeightedAvgPx = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.precloseweightedavgpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BestBuyPrice = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.bestbuyprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 QtyAtBestBuyPrice = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.qtyatbestbuyprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BestSellPrice = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.bestsellprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 QtyAtBestSellPrice = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.qtyatbestsellprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighAccuracyIOPV = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.highaccuracyiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighAccuracyPreIOPV = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.highaccuracypreiopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MDFund::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDFund)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFund.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingphasecode().data(), static_cast<int>(this->_internal_tradingphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFund.TradingPhaseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tradingphasecode(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_securitytype(), target);
  }

  // int64 MaxPx = 8;
  if (this->_internal_maxpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_maxpx(), target);
  }

  // int64 MinPx = 9;
  if (this->_internal_minpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_minpx(), target);
  }

  // int64 PreClosePx = 10;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_preclosepx(), target);
  }

  // int64 NumTrades = 11;
  if (this->_internal_numtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_numtrades(), target);
  }

  // int64 TotalVolumeTrade = 12;
  if (this->_internal_totalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 13;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_totalvaluetrade(), target);
  }

  // int64 LastPx = 14;
  if (this->_internal_lastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_lastpx(), target);
  }

  // int64 OpenPx = 15;
  if (this->_internal_openpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_openpx(), target);
  }

  // int64 ClosePx = 16;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_closepx(), target);
  }

  // int64 HighPx = 17;
  if (this->_internal_highpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_highpx(), target);
  }

  // int64 LowPx = 18;
  if (this->_internal_lowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_lowpx(), target);
  }

  // int64 DiffPx1 = 19;
  if (this->_internal_diffpx1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_diffpx1(), target);
  }

  // int64 DiffPx2 = 20;
  if (this->_internal_diffpx2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(20, this->_internal_diffpx2(), target);
  }

  // int64 TotalBuyQty = 21;
  if (this->_internal_totalbuyqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_totalbuyqty(), target);
  }

  // int64 TotalSellQty = 22;
  if (this->_internal_totalsellqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_totalsellqty(), target);
  }

  // int64 WeightedAvgBuyPx = 23;
  if (this->_internal_weightedavgbuypx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_weightedavgbuypx(), target);
  }

  // int64 WeightedAvgSellPx = 24;
  if (this->_internal_weightedavgsellpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_weightedavgsellpx(), target);
  }

  // int64 WithdrawBuyNumber = 25;
  if (this->_internal_withdrawbuynumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_withdrawbuynumber(), target);
  }

  // int64 WithdrawBuyAmount = 26;
  if (this->_internal_withdrawbuyamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_withdrawbuyamount(), target);
  }

  // int64 WithdrawBuyMoney = 27;
  if (this->_internal_withdrawbuymoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_withdrawbuymoney(), target);
  }

  // int64 WithdrawSellNumber = 28;
  if (this->_internal_withdrawsellnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_withdrawsellnumber(), target);
  }

  // int64 WithdrawSellAmount = 29;
  if (this->_internal_withdrawsellamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_withdrawsellamount(), target);
  }

  // int64 WithdrawSellMoney = 30;
  if (this->_internal_withdrawsellmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(30, this->_internal_withdrawsellmoney(), target);
  }

  // int64 TotalBuyNumber = 31;
  if (this->_internal_totalbuynumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_totalbuynumber(), target);
  }

  // int64 TotalSellNumber = 32;
  if (this->_internal_totalsellnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_totalsellnumber(), target);
  }

  // int64 BuyTradeMaxDuration = 33;
  if (this->_internal_buytrademaxduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(33, this->_internal_buytrademaxduration(), target);
  }

  // int64 SellTradeMaxDuration = 34;
  if (this->_internal_selltrademaxduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(34, this->_internal_selltrademaxduration(), target);
  }

  // int32 NumBuyOrders = 35;
  if (this->_internal_numbuyorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_numbuyorders(), target);
  }

  // int32 NumSellOrders = 36;
  if (this->_internal_numsellorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_numsellorders(), target);
  }

  // int64 IOPV = 37;
  if (this->_internal_iopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(37, this->_internal_iopv(), target);
  }

  // int64 PreIOPV = 38;
  if (this->_internal_preiopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(38, this->_internal_preiopv(), target);
  }

  // int64 PurchaseNumber = 39;
  if (this->_internal_purchasenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(39, this->_internal_purchasenumber(), target);
  }

  // int64 PurchaseAmount = 40;
  if (this->_internal_purchaseamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(40, this->_internal_purchaseamount(), target);
  }

  // int64 PurchaseMoney = 41;
  if (this->_internal_purchasemoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(41, this->_internal_purchasemoney(), target);
  }

  // int64 RedemptionNumber = 42;
  if (this->_internal_redemptionnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(42, this->_internal_redemptionnumber(), target);
  }

  // int64 RedemptionAmount = 43;
  if (this->_internal_redemptionamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(43, this->_internal_redemptionamount(), target);
  }

  // int64 RedemptionMoney = 44;
  if (this->_internal_redemptionmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(44, this->_internal_redemptionmoney(), target);
  }

  // int32 ExchangeDate = 45;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(45, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 46;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_exchangetime(), target);
  }

  // int32 ChannelNo = 50;
  if (this->_internal_channelno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_channelno(), target);
  }

  // repeated int64 BuyPriceQueue = 51 [packed = true];
  {
    int byte_size = _impl_._buypricequeue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          51, _internal_buypricequeue(), byte_size, target);
    }
  }

  // repeated int64 BuyOrderQtyQueue = 52 [packed = true];
  {
    int byte_size = _impl_._buyorderqtyqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          52, _internal_buyorderqtyqueue(), byte_size, target);
    }
  }

  // repeated int64 SellPriceQueue = 53 [packed = true];
  {
    int byte_size = _impl_._sellpricequeue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          53, _internal_sellpricequeue(), byte_size, target);
    }
  }

  // repeated int64 SellOrderQtyQueue = 54 [packed = true];
  {
    int byte_size = _impl_._sellorderqtyqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          54, _internal_sellorderqtyqueue(), byte_size, target);
    }
  }

  // repeated int64 BuyOrderQueue = 55 [packed = true];
  {
    int byte_size = _impl_._buyorderqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          55, _internal_buyorderqueue(), byte_size, target);
    }
  }

  // repeated int64 SellOrderQueue = 56 [packed = true];
  {
    int byte_size = _impl_._sellorderqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          56, _internal_sellorderqueue(), byte_size, target);
    }
  }

  // repeated int64 BuyNumOrdersQueue = 57 [packed = true];
  {
    int byte_size = _impl_._buynumordersqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          57, _internal_buynumordersqueue(), byte_size, target);
    }
  }

  // repeated int64 SellNumOrdersQueue = 58 [packed = true];
  {
    int byte_size = _impl_._sellnumordersqueue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          58, _internal_sellnumordersqueue(), byte_size, target);
    }
  }

  // int64 NorminalPx = 59;
  if (this->_internal_norminalpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(59, this->_internal_norminalpx(), target);
  }

  // int64 ShortSellSharesTraded = 60;
  if (this->_internal_shortsellsharestraded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(60, this->_internal_shortsellsharestraded(), target);
  }

  // int64 ShortSellTurnover = 61;
  if (this->_internal_shortsellturnover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(61, this->_internal_shortsellturnover(), target);
  }

  // int64 PreMarketLastPx = 62;
  if (this->_internal_premarketlastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(62, this->_internal_premarketlastpx(), target);
  }

  // int64 PreMarketTotalVolumeTrade = 63;
  if (this->_internal_premarkettotalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(63, this->_internal_premarkettotalvolumetrade(), target);
  }

  // int64 PreMarketTotalValueTrade = 64;
  if (this->_internal_premarkettotalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(64, this->_internal_premarkettotalvaluetrade(), target);
  }

  // int64 PreMarketHighPx = 65;
  if (this->_internal_premarkethighpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(65, this->_internal_premarkethighpx(), target);
  }

  // int64 PreMarketLowPx = 66;
  if (this->_internal_premarketlowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(66, this->_internal_premarketlowpx(), target);
  }

  // int64 AfterHoursLastPx = 67;
  if (this->_internal_afterhourslastpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(67, this->_internal_afterhourslastpx(), target);
  }

  // int64 AfterHoursTotalVolumeTrade = 68;
  if (this->_internal_afterhourstotalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(68, this->_internal_afterhourstotalvolumetrade(), target);
  }

  // int64 AfterHoursTotalValueTrade = 69;
  if (this->_internal_afterhourstotalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(69, this->_internal_afterhourstotalvaluetrade(), target);
  }

  // int64 AfterHoursHighPx = 70;
  if (this->_internal_afterhourshighpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(70, this->_internal_afterhourshighpx(), target);
  }

  // int64 AfterHoursLowPx = 71;
  if (this->_internal_afterhourslowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(71, this->_internal_afterhourslowpx(), target);
  }

  // string MarketPhaseCode = 72;
  if (!this->_internal_marketphasecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketphasecode().data(), static_cast<int>(this->_internal_marketphasecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFund.MarketPhaseCode");
    target = stream->WriteStringMaybeAliased(
        72, this->_internal_marketphasecode(), target);
  }

  // int64 USConsolidateVolume = 73;
  if (this->_internal_usconsolidatevolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(73, this->_internal_usconsolidatevolume(), target);
  }

  // int64 USCompositeClosePx = 74;
  if (this->_internal_uscompositeclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(74, this->_internal_uscompositeclosepx(), target);
  }

  // string TradingHaltReason = 75;
  if (!this->_internal_tradinghaltreason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradinghaltreason().data(), static_cast<int>(this->_internal_tradinghaltreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDFund.TradingHaltReason");
    target = stream->WriteStringMaybeAliased(
        75, this->_internal_tradinghaltreason(), target);
  }

  // int64 OtcTotalVolumeTrade = 76;
  if (this->_internal_otctotalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(76, this->_internal_otctotalvolumetrade(), target);
  }

  // int64 OtcTotalValueTrade = 77;
  if (this->_internal_otctotalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(77, this->_internal_otctotalvaluetrade(), target);
  }

  // int64 OtcNumTrades = 78;
  if (this->_internal_otcnumtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(78, this->_internal_otcnumtrades(), target);
  }

  // int32 DataMultiplePowerOf10 = 79;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(79, this->_internal_datamultiplepowerof10(), target);
  }

  // int64 WeightedAvgPx = 80;
  if (this->_internal_weightedavgpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(80, this->_internal_weightedavgpx(), target);
  }

  // int64 PreCloseWeightedAvgPx = 81;
  if (this->_internal_precloseweightedavgpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(81, this->_internal_precloseweightedavgpx(), target);
  }

  // int64 BestBuyPrice = 82;
  if (this->_internal_bestbuyprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(82, this->_internal_bestbuyprice(), target);
  }

  // int64 QtyAtBestBuyPrice = 83;
  if (this->_internal_qtyatbestbuyprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(83, this->_internal_qtyatbestbuyprice(), target);
  }

  // int64 BestSellPrice = 84;
  if (this->_internal_bestsellprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(84, this->_internal_bestsellprice(), target);
  }

  // int64 QtyAtBestSellPrice = 85;
  if (this->_internal_qtyatbestsellprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(85, this->_internal_qtyatbestsellprice(), target);
  }

  // int64 HighAccuracyIOPV = 86;
  if (this->_internal_highaccuracyiopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(86, this->_internal_highaccuracyiopv(), target);
  }

  // int64 HighAccuracyPreIOPV = 87;
  if (this->_internal_highaccuracypreiopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(87, this->_internal_highaccuracypreiopv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDFund)
  return target;
}

size_t MDFund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDFund)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 BuyPriceQueue = 51 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buypricequeue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buypricequeue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 BuyOrderQtyQueue = 52 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buyorderqtyqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buyorderqtyqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellPriceQueue = 53 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellpricequeue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellpricequeue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellOrderQtyQueue = 54 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellorderqtyqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellorderqtyqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 BuyOrderQueue = 55 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buyorderqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buyorderqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellOrderQueue = 56 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellorderqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellorderqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 BuyNumOrdersQueue = 57 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buynumordersqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buynumordersqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 SellNumOrdersQueue = 58 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sellnumordersqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellnumordersqueue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // string TradingPhaseCode = 5;
  if (!this->_internal_tradingphasecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingphasecode());
  }

  // string MarketPhaseCode = 72;
  if (!this->_internal_marketphasecode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketphasecode());
  }

  // string TradingHaltReason = 75;
  if (!this->_internal_tradinghaltreason().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradinghaltreason());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 MaxPx = 8;
  if (this->_internal_maxpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maxpx());
  }

  // int64 MinPx = 9;
  if (this->_internal_minpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_minpx());
  }

  // int64 PreClosePx = 10;
  if (this->_internal_preclosepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_preclosepx());
  }

  // int64 NumTrades = 11;
  if (this->_internal_numtrades() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numtrades());
  }

  // int64 TotalVolumeTrade = 12;
  if (this->_internal_totalvolumetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvolumetrade());
  }

  // int64 TotalValueTrade = 13;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 LastPx = 14;
  if (this->_internal_lastpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpx());
  }

  // int64 OpenPx = 15;
  if (this->_internal_openpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openpx());
  }

  // int64 ClosePx = 16;
  if (this->_internal_closepx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closepx());
  }

  // int64 HighPx = 17;
  if (this->_internal_highpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_highpx());
  }

  // int64 LowPx = 18;
  if (this->_internal_lowpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lowpx());
  }

  // int64 DiffPx1 = 19;
  if (this->_internal_diffpx1() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_diffpx1());
  }

  // int64 DiffPx2 = 20;
  if (this->_internal_diffpx2() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_diffpx2());
  }

  // int64 TotalBuyQty = 21;
  if (this->_internal_totalbuyqty() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalbuyqty());
  }

  // int64 TotalSellQty = 22;
  if (this->_internal_totalsellqty() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalsellqty());
  }

  // int64 WeightedAvgBuyPx = 23;
  if (this->_internal_weightedavgbuypx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_weightedavgbuypx());
  }

  // int64 WeightedAvgSellPx = 24;
  if (this->_internal_weightedavgsellpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_weightedavgsellpx());
  }

  // int64 WithdrawBuyNumber = 25;
  if (this->_internal_withdrawbuynumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_withdrawbuynumber());
  }

  // int64 WithdrawBuyAmount = 26;
  if (this->_internal_withdrawbuyamount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_withdrawbuyamount());
  }

  // int64 WithdrawBuyMoney = 27;
  if (this->_internal_withdrawbuymoney() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_withdrawbuymoney());
  }

  // int64 WithdrawSellNumber = 28;
  if (this->_internal_withdrawsellnumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_withdrawsellnumber());
  }

  // int64 WithdrawSellAmount = 29;
  if (this->_internal_withdrawsellamount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_withdrawsellamount());
  }

  // int64 WithdrawSellMoney = 30;
  if (this->_internal_withdrawsellmoney() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_withdrawsellmoney());
  }

  // int64 TotalBuyNumber = 31;
  if (this->_internal_totalbuynumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalbuynumber());
  }

  // int64 TotalSellNumber = 32;
  if (this->_internal_totalsellnumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalsellnumber());
  }

  // int64 BuyTradeMaxDuration = 33;
  if (this->_internal_buytrademaxduration() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_buytrademaxduration());
  }

  // int64 SellTradeMaxDuration = 34;
  if (this->_internal_selltrademaxduration() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_selltrademaxduration());
  }

  // int32 NumBuyOrders = 35;
  if (this->_internal_numbuyorders() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_numbuyorders());
  }

  // int32 NumSellOrders = 36;
  if (this->_internal_numsellorders() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_numsellorders());
  }

  // int64 IOPV = 37;
  if (this->_internal_iopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_iopv());
  }

  // int64 PreIOPV = 38;
  if (this->_internal_preiopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preiopv());
  }

  // int64 PurchaseNumber = 39;
  if (this->_internal_purchasenumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_purchasenumber());
  }

  // int64 PurchaseAmount = 40;
  if (this->_internal_purchaseamount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_purchaseamount());
  }

  // int64 PurchaseMoney = 41;
  if (this->_internal_purchasemoney() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_purchasemoney());
  }

  // int64 RedemptionNumber = 42;
  if (this->_internal_redemptionnumber() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_redemptionnumber());
  }

  // int64 RedemptionAmount = 43;
  if (this->_internal_redemptionamount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_redemptionamount());
  }

  // int64 RedemptionMoney = 44;
  if (this->_internal_redemptionmoney() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_redemptionmoney());
  }

  // int32 ExchangeDate = 45;
  if (this->_internal_exchangedate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangedate());
  }

  // int32 ExchangeTime = 46;
  if (this->_internal_exchangetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangetime());
  }

  // int64 NorminalPx = 59;
  if (this->_internal_norminalpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_norminalpx());
  }

  // int64 ShortSellSharesTraded = 60;
  if (this->_internal_shortsellsharestraded() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_shortsellsharestraded());
  }

  // int64 ShortSellTurnover = 61;
  if (this->_internal_shortsellturnover() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_shortsellturnover());
  }

  // int64 PreMarketLastPx = 62;
  if (this->_internal_premarketlastpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_premarketlastpx());
  }

  // int64 PreMarketTotalVolumeTrade = 63;
  if (this->_internal_premarkettotalvolumetrade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_premarkettotalvolumetrade());
  }

  // int64 PreMarketTotalValueTrade = 64;
  if (this->_internal_premarkettotalvaluetrade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_premarkettotalvaluetrade());
  }

  // int32 ChannelNo = 50;
  if (this->_internal_channelno() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_channelno());
  }

  // int32 DataMultiplePowerOf10 = 79;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  // int64 PreMarketHighPx = 65;
  if (this->_internal_premarkethighpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_premarkethighpx());
  }

  // int64 PreMarketLowPx = 66;
  if (this->_internal_premarketlowpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_premarketlowpx());
  }

  // int64 AfterHoursLastPx = 67;
  if (this->_internal_afterhourslastpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_afterhourslastpx());
  }

  // int64 AfterHoursTotalVolumeTrade = 68;
  if (this->_internal_afterhourstotalvolumetrade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_afterhourstotalvolumetrade());
  }

  // int64 AfterHoursTotalValueTrade = 69;
  if (this->_internal_afterhourstotalvaluetrade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_afterhourstotalvaluetrade());
  }

  // int64 AfterHoursHighPx = 70;
  if (this->_internal_afterhourshighpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_afterhourshighpx());
  }

  // int64 AfterHoursLowPx = 71;
  if (this->_internal_afterhourslowpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_afterhourslowpx());
  }

  // int64 USConsolidateVolume = 73;
  if (this->_internal_usconsolidatevolume() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_usconsolidatevolume());
  }

  // int64 USCompositeClosePx = 74;
  if (this->_internal_uscompositeclosepx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_uscompositeclosepx());
  }

  // int64 OtcTotalVolumeTrade = 76;
  if (this->_internal_otctotalvolumetrade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_otctotalvolumetrade());
  }

  // int64 OtcTotalValueTrade = 77;
  if (this->_internal_otctotalvaluetrade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_otctotalvaluetrade());
  }

  // int64 OtcNumTrades = 78;
  if (this->_internal_otcnumtrades() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_otcnumtrades());
  }

  // int64 WeightedAvgPx = 80;
  if (this->_internal_weightedavgpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_weightedavgpx());
  }

  // int64 PreCloseWeightedAvgPx = 81;
  if (this->_internal_precloseweightedavgpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_precloseweightedavgpx());
  }

  // int64 BestBuyPrice = 82;
  if (this->_internal_bestbuyprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_bestbuyprice());
  }

  // int64 QtyAtBestBuyPrice = 83;
  if (this->_internal_qtyatbestbuyprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_qtyatbestbuyprice());
  }

  // int64 BestSellPrice = 84;
  if (this->_internal_bestsellprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_bestsellprice());
  }

  // int64 QtyAtBestSellPrice = 85;
  if (this->_internal_qtyatbestsellprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_qtyatbestsellprice());
  }

  // int64 HighAccuracyIOPV = 86;
  if (this->_internal_highaccuracyiopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_highaccuracyiopv());
  }

  // int64 HighAccuracyPreIOPV = 87;
  if (this->_internal_highaccuracypreiopv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_highaccuracypreiopv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MDFund::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MDFund::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MDFund::GetClassData() const { return &_class_data_; }


void MDFund::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MDFund*>(&to_msg);
  auto& from = static_cast<const MDFund&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDFund)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buypricequeue_.MergeFrom(from._impl_.buypricequeue_);
  _this->_impl_.buyorderqtyqueue_.MergeFrom(from._impl_.buyorderqtyqueue_);
  _this->_impl_.sellpricequeue_.MergeFrom(from._impl_.sellpricequeue_);
  _this->_impl_.sellorderqtyqueue_.MergeFrom(from._impl_.sellorderqtyqueue_);
  _this->_impl_.buyorderqueue_.MergeFrom(from._impl_.buyorderqueue_);
  _this->_impl_.sellorderqueue_.MergeFrom(from._impl_.sellorderqueue_);
  _this->_impl_.buynumordersqueue_.MergeFrom(from._impl_.buynumordersqueue_);
  _this->_impl_.sellnumordersqueue_.MergeFrom(from._impl_.sellnumordersqueue_);
  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (!from._internal_tradingphasecode().empty()) {
    _this->_internal_set_tradingphasecode(from._internal_tradingphasecode());
  }
  if (!from._internal_marketphasecode().empty()) {
    _this->_internal_set_marketphasecode(from._internal_marketphasecode());
  }
  if (!from._internal_tradinghaltreason().empty()) {
    _this->_internal_set_tradinghaltreason(from._internal_tradinghaltreason());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_maxpx() != 0) {
    _this->_internal_set_maxpx(from._internal_maxpx());
  }
  if (from._internal_minpx() != 0) {
    _this->_internal_set_minpx(from._internal_minpx());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_numtrades() != 0) {
    _this->_internal_set_numtrades(from._internal_numtrades());
  }
  if (from._internal_totalvolumetrade() != 0) {
    _this->_internal_set_totalvolumetrade(from._internal_totalvolumetrade());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_lastpx() != 0) {
    _this->_internal_set_lastpx(from._internal_lastpx());
  }
  if (from._internal_openpx() != 0) {
    _this->_internal_set_openpx(from._internal_openpx());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_highpx() != 0) {
    _this->_internal_set_highpx(from._internal_highpx());
  }
  if (from._internal_lowpx() != 0) {
    _this->_internal_set_lowpx(from._internal_lowpx());
  }
  if (from._internal_diffpx1() != 0) {
    _this->_internal_set_diffpx1(from._internal_diffpx1());
  }
  if (from._internal_diffpx2() != 0) {
    _this->_internal_set_diffpx2(from._internal_diffpx2());
  }
  if (from._internal_totalbuyqty() != 0) {
    _this->_internal_set_totalbuyqty(from._internal_totalbuyqty());
  }
  if (from._internal_totalsellqty() != 0) {
    _this->_internal_set_totalsellqty(from._internal_totalsellqty());
  }
  if (from._internal_weightedavgbuypx() != 0) {
    _this->_internal_set_weightedavgbuypx(from._internal_weightedavgbuypx());
  }
  if (from._internal_weightedavgsellpx() != 0) {
    _this->_internal_set_weightedavgsellpx(from._internal_weightedavgsellpx());
  }
  if (from._internal_withdrawbuynumber() != 0) {
    _this->_internal_set_withdrawbuynumber(from._internal_withdrawbuynumber());
  }
  if (from._internal_withdrawbuyamount() != 0) {
    _this->_internal_set_withdrawbuyamount(from._internal_withdrawbuyamount());
  }
  if (from._internal_withdrawbuymoney() != 0) {
    _this->_internal_set_withdrawbuymoney(from._internal_withdrawbuymoney());
  }
  if (from._internal_withdrawsellnumber() != 0) {
    _this->_internal_set_withdrawsellnumber(from._internal_withdrawsellnumber());
  }
  if (from._internal_withdrawsellamount() != 0) {
    _this->_internal_set_withdrawsellamount(from._internal_withdrawsellamount());
  }
  if (from._internal_withdrawsellmoney() != 0) {
    _this->_internal_set_withdrawsellmoney(from._internal_withdrawsellmoney());
  }
  if (from._internal_totalbuynumber() != 0) {
    _this->_internal_set_totalbuynumber(from._internal_totalbuynumber());
  }
  if (from._internal_totalsellnumber() != 0) {
    _this->_internal_set_totalsellnumber(from._internal_totalsellnumber());
  }
  if (from._internal_buytrademaxduration() != 0) {
    _this->_internal_set_buytrademaxduration(from._internal_buytrademaxduration());
  }
  if (from._internal_selltrademaxduration() != 0) {
    _this->_internal_set_selltrademaxduration(from._internal_selltrademaxduration());
  }
  if (from._internal_numbuyorders() != 0) {
    _this->_internal_set_numbuyorders(from._internal_numbuyorders());
  }
  if (from._internal_numsellorders() != 0) {
    _this->_internal_set_numsellorders(from._internal_numsellorders());
  }
  if (from._internal_iopv() != 0) {
    _this->_internal_set_iopv(from._internal_iopv());
  }
  if (from._internal_preiopv() != 0) {
    _this->_internal_set_preiopv(from._internal_preiopv());
  }
  if (from._internal_purchasenumber() != 0) {
    _this->_internal_set_purchasenumber(from._internal_purchasenumber());
  }
  if (from._internal_purchaseamount() != 0) {
    _this->_internal_set_purchaseamount(from._internal_purchaseamount());
  }
  if (from._internal_purchasemoney() != 0) {
    _this->_internal_set_purchasemoney(from._internal_purchasemoney());
  }
  if (from._internal_redemptionnumber() != 0) {
    _this->_internal_set_redemptionnumber(from._internal_redemptionnumber());
  }
  if (from._internal_redemptionamount() != 0) {
    _this->_internal_set_redemptionamount(from._internal_redemptionamount());
  }
  if (from._internal_redemptionmoney() != 0) {
    _this->_internal_set_redemptionmoney(from._internal_redemptionmoney());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_norminalpx() != 0) {
    _this->_internal_set_norminalpx(from._internal_norminalpx());
  }
  if (from._internal_shortsellsharestraded() != 0) {
    _this->_internal_set_shortsellsharestraded(from._internal_shortsellsharestraded());
  }
  if (from._internal_shortsellturnover() != 0) {
    _this->_internal_set_shortsellturnover(from._internal_shortsellturnover());
  }
  if (from._internal_premarketlastpx() != 0) {
    _this->_internal_set_premarketlastpx(from._internal_premarketlastpx());
  }
  if (from._internal_premarkettotalvolumetrade() != 0) {
    _this->_internal_set_premarkettotalvolumetrade(from._internal_premarkettotalvolumetrade());
  }
  if (from._internal_premarkettotalvaluetrade() != 0) {
    _this->_internal_set_premarkettotalvaluetrade(from._internal_premarkettotalvaluetrade());
  }
  if (from._internal_channelno() != 0) {
    _this->_internal_set_channelno(from._internal_channelno());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  if (from._internal_premarkethighpx() != 0) {
    _this->_internal_set_premarkethighpx(from._internal_premarkethighpx());
  }
  if (from._internal_premarketlowpx() != 0) {
    _this->_internal_set_premarketlowpx(from._internal_premarketlowpx());
  }
  if (from._internal_afterhourslastpx() != 0) {
    _this->_internal_set_afterhourslastpx(from._internal_afterhourslastpx());
  }
  if (from._internal_afterhourstotalvolumetrade() != 0) {
    _this->_internal_set_afterhourstotalvolumetrade(from._internal_afterhourstotalvolumetrade());
  }
  if (from._internal_afterhourstotalvaluetrade() != 0) {
    _this->_internal_set_afterhourstotalvaluetrade(from._internal_afterhourstotalvaluetrade());
  }
  if (from._internal_afterhourshighpx() != 0) {
    _this->_internal_set_afterhourshighpx(from._internal_afterhourshighpx());
  }
  if (from._internal_afterhourslowpx() != 0) {
    _this->_internal_set_afterhourslowpx(from._internal_afterhourslowpx());
  }
  if (from._internal_usconsolidatevolume() != 0) {
    _this->_internal_set_usconsolidatevolume(from._internal_usconsolidatevolume());
  }
  if (from._internal_uscompositeclosepx() != 0) {
    _this->_internal_set_uscompositeclosepx(from._internal_uscompositeclosepx());
  }
  if (from._internal_otctotalvolumetrade() != 0) {
    _this->_internal_set_otctotalvolumetrade(from._internal_otctotalvolumetrade());
  }
  if (from._internal_otctotalvaluetrade() != 0) {
    _this->_internal_set_otctotalvaluetrade(from._internal_otctotalvaluetrade());
  }
  if (from._internal_otcnumtrades() != 0) {
    _this->_internal_set_otcnumtrades(from._internal_otcnumtrades());
  }
  if (from._internal_weightedavgpx() != 0) {
    _this->_internal_set_weightedavgpx(from._internal_weightedavgpx());
  }
  if (from._internal_precloseweightedavgpx() != 0) {
    _this->_internal_set_precloseweightedavgpx(from._internal_precloseweightedavgpx());
  }
  if (from._internal_bestbuyprice() != 0) {
    _this->_internal_set_bestbuyprice(from._internal_bestbuyprice());
  }
  if (from._internal_qtyatbestbuyprice() != 0) {
    _this->_internal_set_qtyatbestbuyprice(from._internal_qtyatbestbuyprice());
  }
  if (from._internal_bestsellprice() != 0) {
    _this->_internal_set_bestsellprice(from._internal_bestsellprice());
  }
  if (from._internal_qtyatbestsellprice() != 0) {
    _this->_internal_set_qtyatbestsellprice(from._internal_qtyatbestsellprice());
  }
  if (from._internal_highaccuracyiopv() != 0) {
    _this->_internal_set_highaccuracyiopv(from._internal_highaccuracyiopv());
  }
  if (from._internal_highaccuracypreiopv() != 0) {
    _this->_internal_set_highaccuracypreiopv(from._internal_highaccuracypreiopv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MDFund::CopyFrom(const MDFund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDFund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MDFund::IsInitialized() const {
  return true;
}

void MDFund::InternalSwap(MDFund* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buypricequeue_.InternalSwap(&other->_impl_.buypricequeue_);
  _impl_.buyorderqtyqueue_.InternalSwap(&other->_impl_.buyorderqtyqueue_);
  _impl_.sellpricequeue_.InternalSwap(&other->_impl_.sellpricequeue_);
  _impl_.sellorderqtyqueue_.InternalSwap(&other->_impl_.sellorderqtyqueue_);
  _impl_.buyorderqueue_.InternalSwap(&other->_impl_.buyorderqueue_);
  _impl_.sellorderqueue_.InternalSwap(&other->_impl_.sellorderqueue_);
  _impl_.buynumordersqueue_.InternalSwap(&other->_impl_.buynumordersqueue_);
  _impl_.sellnumordersqueue_.InternalSwap(&other->_impl_.sellnumordersqueue_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradingphasecode_, lhs_arena,
      &other->_impl_.tradingphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.marketphasecode_, lhs_arena,
      &other->_impl_.marketphasecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradinghaltreason_, lhs_arena,
      &other->_impl_.tradinghaltreason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MDFund, _impl_.highaccuracypreiopv_)
      + sizeof(MDFund::_impl_.highaccuracypreiopv_)
      - PROTOBUF_FIELD_OFFSET(MDFund, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MDFund::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MDFund_2eproto_getter, &descriptor_table_MDFund_2eproto_once,
      file_level_metadata_MDFund_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::MDFund*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::MDFund >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::MDFund >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
