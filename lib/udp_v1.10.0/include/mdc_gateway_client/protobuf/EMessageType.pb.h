// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EMessageType.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EMessageType_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EMessageType_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EMessageType_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EMessageType_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EMessageType_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

enum EMessageType : int {
  UNKNOWN_MESSAGE_TYPE = 0,
  HEARTBEAT_REQUEST = 1,
  HEARTBEAT_RESPONSE = 2,
  GENERAL_ERROR_MESSAGE = 10,
  LOGIN_REQUEST = 11,
  LOGIN_RESPONSE = 12,
  SERVICE_DISCOVERY_REQUEST = 13,
  SERVICE_DISCOVERY_RESPONSE = 14,
  MD_SUBSCRIBE_REQUEST = 15,
  MD_SUBSCRIBE_RESPONSE = 16,
  PUSH_MARKET_DATA = 17,
  MD_QUERY_REQUEST = 18,
  MD_QUERY_RESPONSE = 19,
  PLAYBACK_REQUEST = 20,
  PLAYBACK_RESPONSE = 21,
  PLAYBACK_CONTROL_REQUEST = 22,
  PLAYBACK_CONTROL_RESPONSE = 23,
  PLAYBACK_STATUS_REQUEST = 24,
  PLAYBACK_STATUS = 25,
  PLAYBACK_PAYLOAD = 26,
  PUSH_MARKET_DATA_STREAM = 27,
  EMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EMessageType_IsValid(int value);
constexpr EMessageType EMessageType_MIN = UNKNOWN_MESSAGE_TYPE;
constexpr EMessageType EMessageType_MAX = PUSH_MARKET_DATA_STREAM;
constexpr int EMessageType_ARRAYSIZE = EMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMessageType_descriptor();
template<typename T>
inline const std::string& EMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMessageType_descriptor(), enum_t_value);
}
inline bool EMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMessageType>(
    EMessageType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::htsc::mdc::insight::model::EMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::insight::model::EMessageType>() {
  return ::com::htsc::mdc::insight::model::EMessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EMessageType_2eproto
