// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDUSATransaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDUSATransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDUSATransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDUSATransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDUSATransaction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDUSATransaction_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDUSATransaction;
struct MDUSATransactionDefaultTypeInternal;
extern MDUSATransactionDefaultTypeInternal _MDUSATransaction_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDUSATransaction* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDUSATransaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDUSATransaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDUSATransaction) */ {
 public:
  inline MDUSATransaction() : MDUSATransaction(nullptr) {}
  ~MDUSATransaction() override;
  explicit PROTOBUF_CONSTEXPR MDUSATransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDUSATransaction(const MDUSATransaction& from);
  MDUSATransaction(MDUSATransaction&& from) noexcept
    : MDUSATransaction() {
    *this = ::std::move(from);
  }

  inline MDUSATransaction& operator=(const MDUSATransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDUSATransaction& operator=(MDUSATransaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDUSATransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDUSATransaction* internal_default_instance() {
    return reinterpret_cast<const MDUSATransaction*>(
               &_MDUSATransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDUSATransaction& a, MDUSATransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(MDUSATransaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDUSATransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDUSATransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDUSATransaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDUSATransaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDUSATransaction& from) {
    MDUSATransaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDUSATransaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDUSATransaction";
  }
  protected:
  explicit MDUSATransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kTradeNumFieldNumber = 11,
    kOriginalTradeNumFieldNumber = 12,
    kSaleConditionLV1FieldNumber = 22,
    kSaleConditionLV2FieldNumber = 23,
    kSaleConditionLV3FieldNumber = 24,
    kSaleConditionLV4FieldNumber = 25,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kExchangeDateFieldNumber = 7,
    kExchangeTimeFieldNumber = 8,
    kNanosecondFieldNumber = 9,
    kChannelNoFieldNumber = 10,
    kTradeBuyNoFieldNumber = 13,
    kTradeSellNoFieldNumber = 14,
    kTradeTypeFieldNumber = 15,
    kTradeBSFlagFieldNumber = 16,
    kTradePriceFieldNumber = 17,
    kTradeQtyFieldNumber = 18,
    kTradeMoneyFieldNumber = 19,
    kNAVOffsetAmountFieldNumber = 20,
    kTotalConsolidateVolumeFieldNumber = 21,
    kTrackingNumFieldNumber = 26,
    kDataMultiplePowerOf10FieldNumber = 27,
    kDataIndexFieldNumber = 29,
    kTimeIndexFieldNumber = 28,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradeNum = 11;
  void clear_tradenum();
  const std::string& tradenum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradenum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradenum();
  PROTOBUF_NODISCARD std::string* release_tradenum();
  void set_allocated_tradenum(std::string* tradenum);
  private:
  const std::string& _internal_tradenum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradenum(const std::string& value);
  std::string* _internal_mutable_tradenum();
  public:

  // string OriginalTradeNum = 12;
  void clear_originaltradenum();
  const std::string& originaltradenum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originaltradenum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originaltradenum();
  PROTOBUF_NODISCARD std::string* release_originaltradenum();
  void set_allocated_originaltradenum(std::string* originaltradenum);
  private:
  const std::string& _internal_originaltradenum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originaltradenum(const std::string& value);
  std::string* _internal_mutable_originaltradenum();
  public:

  // string SaleConditionLV1 = 22;
  void clear_saleconditionlv1();
  const std::string& saleconditionlv1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_saleconditionlv1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_saleconditionlv1();
  PROTOBUF_NODISCARD std::string* release_saleconditionlv1();
  void set_allocated_saleconditionlv1(std::string* saleconditionlv1);
  private:
  const std::string& _internal_saleconditionlv1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_saleconditionlv1(const std::string& value);
  std::string* _internal_mutable_saleconditionlv1();
  public:

  // string SaleConditionLV2 = 23;
  void clear_saleconditionlv2();
  const std::string& saleconditionlv2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_saleconditionlv2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_saleconditionlv2();
  PROTOBUF_NODISCARD std::string* release_saleconditionlv2();
  void set_allocated_saleconditionlv2(std::string* saleconditionlv2);
  private:
  const std::string& _internal_saleconditionlv2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_saleconditionlv2(const std::string& value);
  std::string* _internal_mutable_saleconditionlv2();
  public:

  // string SaleConditionLV3 = 24;
  void clear_saleconditionlv3();
  const std::string& saleconditionlv3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_saleconditionlv3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_saleconditionlv3();
  PROTOBUF_NODISCARD std::string* release_saleconditionlv3();
  void set_allocated_saleconditionlv3(std::string* saleconditionlv3);
  private:
  const std::string& _internal_saleconditionlv3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_saleconditionlv3(const std::string& value);
  std::string* _internal_mutable_saleconditionlv3();
  public:

  // string SaleConditionLV4 = 25;
  void clear_saleconditionlv4();
  const std::string& saleconditionlv4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_saleconditionlv4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_saleconditionlv4();
  PROTOBUF_NODISCARD std::string* release_saleconditionlv4();
  void set_allocated_saleconditionlv4(std::string* saleconditionlv4);
  private:
  const std::string& _internal_saleconditionlv4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_saleconditionlv4(const std::string& value);
  std::string* _internal_mutable_saleconditionlv4();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 7;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 8;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int32 Nanosecond = 9;
  void clear_nanosecond();
  int32_t nanosecond() const;
  void set_nanosecond(int32_t value);
  private:
  int32_t _internal_nanosecond() const;
  void _internal_set_nanosecond(int32_t value);
  public:

  // int32 ChannelNo = 10;
  void clear_channelno();
  int32_t channelno() const;
  void set_channelno(int32_t value);
  private:
  int32_t _internal_channelno() const;
  void _internal_set_channelno(int32_t value);
  public:

  // int64 TradeBuyNo = 13;
  void clear_tradebuyno();
  int64_t tradebuyno() const;
  void set_tradebuyno(int64_t value);
  private:
  int64_t _internal_tradebuyno() const;
  void _internal_set_tradebuyno(int64_t value);
  public:

  // int64 TradeSellNo = 14;
  void clear_tradesellno();
  int64_t tradesellno() const;
  void set_tradesellno(int64_t value);
  private:
  int64_t _internal_tradesellno() const;
  void _internal_set_tradesellno(int64_t value);
  public:

  // int32 TradeType = 15;
  void clear_tradetype();
  int32_t tradetype() const;
  void set_tradetype(int32_t value);
  private:
  int32_t _internal_tradetype() const;
  void _internal_set_tradetype(int32_t value);
  public:

  // int32 TradeBSFlag = 16;
  void clear_tradebsflag();
  int32_t tradebsflag() const;
  void set_tradebsflag(int32_t value);
  private:
  int32_t _internal_tradebsflag() const;
  void _internal_set_tradebsflag(int32_t value);
  public:

  // int64 TradePrice = 17;
  void clear_tradeprice();
  int64_t tradeprice() const;
  void set_tradeprice(int64_t value);
  private:
  int64_t _internal_tradeprice() const;
  void _internal_set_tradeprice(int64_t value);
  public:

  // int64 TradeQty = 18;
  void clear_tradeqty();
  int64_t tradeqty() const;
  void set_tradeqty(int64_t value);
  private:
  int64_t _internal_tradeqty() const;
  void _internal_set_tradeqty(int64_t value);
  public:

  // int64 TradeMoney = 19;
  void clear_trademoney();
  int64_t trademoney() const;
  void set_trademoney(int64_t value);
  private:
  int64_t _internal_trademoney() const;
  void _internal_set_trademoney(int64_t value);
  public:

  // int64 NAVOffsetAmount = 20;
  void clear_navoffsetamount();
  int64_t navoffsetamount() const;
  void set_navoffsetamount(int64_t value);
  private:
  int64_t _internal_navoffsetamount() const;
  void _internal_set_navoffsetamount(int64_t value);
  public:

  // int64 TotalConsolidateVolume = 21;
  void clear_totalconsolidatevolume();
  int64_t totalconsolidatevolume() const;
  void set_totalconsolidatevolume(int64_t value);
  private:
  int64_t _internal_totalconsolidatevolume() const;
  void _internal_set_totalconsolidatevolume(int64_t value);
  public:

  // int32 TrackingNum = 26;
  void clear_trackingnum();
  int32_t trackingnum() const;
  void set_trackingnum(int32_t value);
  private:
  int32_t _internal_trackingnum() const;
  void _internal_set_trackingnum(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 27;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // int64 DataIndex = 29;
  void clear_dataindex();
  int64_t dataindex() const;
  void set_dataindex(int64_t value);
  private:
  int64_t _internal_dataindex() const;
  void _internal_set_dataindex(int64_t value);
  public:

  // int32 TimeIndex = 28;
  void clear_timeindex();
  int32_t timeindex() const;
  void set_timeindex(int32_t value);
  private:
  int32_t _internal_timeindex() const;
  void _internal_set_timeindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDUSATransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradenum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originaltradenum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saleconditionlv1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saleconditionlv2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saleconditionlv3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saleconditionlv4_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int32_t nanosecond_;
    int32_t channelno_;
    int64_t tradebuyno_;
    int64_t tradesellno_;
    int32_t tradetype_;
    int32_t tradebsflag_;
    int64_t tradeprice_;
    int64_t tradeqty_;
    int64_t trademoney_;
    int64_t navoffsetamount_;
    int64_t totalconsolidatevolume_;
    int32_t trackingnum_;
    int32_t datamultiplepowerof10_;
    int64_t dataindex_;
    int32_t timeindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDUSATransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDUSATransaction

// string HTSCSecurityID = 1;
inline void MDUSATransaction::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDUSATransaction::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDUSATransaction::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.HTSCSecurityID)
}
inline std::string* MDUSATransaction::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDUSATransaction.HTSCSecurityID)
  return _s;
}
inline const std::string& MDUSATransaction::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDUSATransaction::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDUSATransaction::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDUSATransaction::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDUSATransaction.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDUSATransaction::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDUSATransaction.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDUSATransaction::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDUSATransaction::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDUSATransaction::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.MDDate)
  return _internal_mddate();
}
inline void MDUSATransaction::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDUSATransaction::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.MDDate)
}

// int32 MDTime = 3;
inline void MDUSATransaction::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDUSATransaction::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDUSATransaction::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.MDTime)
  return _internal_mdtime();
}
inline void MDUSATransaction::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDUSATransaction::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDUSATransaction::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDUSATransaction::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDUSATransaction::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDUSATransaction::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDUSATransaction::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDUSATransaction::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDUSATransaction::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.securityIDSource)
  return _internal_securityidsource();
}
inline void MDUSATransaction::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDUSATransaction::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDUSATransaction::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDUSATransaction::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDUSATransaction::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.securityType)
  return _internal_securitytype();
}
inline void MDUSATransaction::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDUSATransaction::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.securityType)
}

// int32 ExchangeDate = 7;
inline void MDUSATransaction::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDUSATransaction::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDUSATransaction::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDUSATransaction::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDUSATransaction::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.ExchangeDate)
}

// int32 ExchangeTime = 8;
inline void MDUSATransaction::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDUSATransaction::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDUSATransaction::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDUSATransaction::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDUSATransaction::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.ExchangeTime)
}

// int32 Nanosecond = 9;
inline void MDUSATransaction::clear_nanosecond() {
  _impl_.nanosecond_ = 0;
}
inline int32_t MDUSATransaction::_internal_nanosecond() const {
  return _impl_.nanosecond_;
}
inline int32_t MDUSATransaction::nanosecond() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.Nanosecond)
  return _internal_nanosecond();
}
inline void MDUSATransaction::_internal_set_nanosecond(int32_t value) {
  
  _impl_.nanosecond_ = value;
}
inline void MDUSATransaction::set_nanosecond(int32_t value) {
  _internal_set_nanosecond(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.Nanosecond)
}

// int32 ChannelNo = 10;
inline void MDUSATransaction::clear_channelno() {
  _impl_.channelno_ = 0;
}
inline int32_t MDUSATransaction::_internal_channelno() const {
  return _impl_.channelno_;
}
inline int32_t MDUSATransaction::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.ChannelNo)
  return _internal_channelno();
}
inline void MDUSATransaction::_internal_set_channelno(int32_t value) {
  
  _impl_.channelno_ = value;
}
inline void MDUSATransaction::set_channelno(int32_t value) {
  _internal_set_channelno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.ChannelNo)
}

// string TradeNum = 11;
inline void MDUSATransaction::clear_tradenum() {
  _impl_.tradenum_.ClearToEmpty();
}
inline const std::string& MDUSATransaction::tradenum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TradeNum)
  return _internal_tradenum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDUSATransaction::set_tradenum(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradenum_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TradeNum)
}
inline std::string* MDUSATransaction::mutable_tradenum() {
  std::string* _s = _internal_mutable_tradenum();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDUSATransaction.TradeNum)
  return _s;
}
inline const std::string& MDUSATransaction::_internal_tradenum() const {
  return _impl_.tradenum_.Get();
}
inline void MDUSATransaction::_internal_set_tradenum(const std::string& value) {
  
  _impl_.tradenum_.Set(value, GetArenaForAllocation());
}
inline std::string* MDUSATransaction::_internal_mutable_tradenum() {
  
  return _impl_.tradenum_.Mutable(GetArenaForAllocation());
}
inline std::string* MDUSATransaction::release_tradenum() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDUSATransaction.TradeNum)
  return _impl_.tradenum_.Release();
}
inline void MDUSATransaction::set_allocated_tradenum(std::string* tradenum) {
  if (tradenum != nullptr) {
    
  } else {
    
  }
  _impl_.tradenum_.SetAllocated(tradenum, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradenum_.IsDefault()) {
    _impl_.tradenum_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDUSATransaction.TradeNum)
}

// string OriginalTradeNum = 12;
inline void MDUSATransaction::clear_originaltradenum() {
  _impl_.originaltradenum_.ClearToEmpty();
}
inline const std::string& MDUSATransaction::originaltradenum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.OriginalTradeNum)
  return _internal_originaltradenum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDUSATransaction::set_originaltradenum(ArgT0&& arg0, ArgT... args) {
 
 _impl_.originaltradenum_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.OriginalTradeNum)
}
inline std::string* MDUSATransaction::mutable_originaltradenum() {
  std::string* _s = _internal_mutable_originaltradenum();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDUSATransaction.OriginalTradeNum)
  return _s;
}
inline const std::string& MDUSATransaction::_internal_originaltradenum() const {
  return _impl_.originaltradenum_.Get();
}
inline void MDUSATransaction::_internal_set_originaltradenum(const std::string& value) {
  
  _impl_.originaltradenum_.Set(value, GetArenaForAllocation());
}
inline std::string* MDUSATransaction::_internal_mutable_originaltradenum() {
  
  return _impl_.originaltradenum_.Mutable(GetArenaForAllocation());
}
inline std::string* MDUSATransaction::release_originaltradenum() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDUSATransaction.OriginalTradeNum)
  return _impl_.originaltradenum_.Release();
}
inline void MDUSATransaction::set_allocated_originaltradenum(std::string* originaltradenum) {
  if (originaltradenum != nullptr) {
    
  } else {
    
  }
  _impl_.originaltradenum_.SetAllocated(originaltradenum, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.originaltradenum_.IsDefault()) {
    _impl_.originaltradenum_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDUSATransaction.OriginalTradeNum)
}

// int64 TradeBuyNo = 13;
inline void MDUSATransaction::clear_tradebuyno() {
  _impl_.tradebuyno_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_tradebuyno() const {
  return _impl_.tradebuyno_;
}
inline int64_t MDUSATransaction::tradebuyno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TradeBuyNo)
  return _internal_tradebuyno();
}
inline void MDUSATransaction::_internal_set_tradebuyno(int64_t value) {
  
  _impl_.tradebuyno_ = value;
}
inline void MDUSATransaction::set_tradebuyno(int64_t value) {
  _internal_set_tradebuyno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TradeBuyNo)
}

// int64 TradeSellNo = 14;
inline void MDUSATransaction::clear_tradesellno() {
  _impl_.tradesellno_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_tradesellno() const {
  return _impl_.tradesellno_;
}
inline int64_t MDUSATransaction::tradesellno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TradeSellNo)
  return _internal_tradesellno();
}
inline void MDUSATransaction::_internal_set_tradesellno(int64_t value) {
  
  _impl_.tradesellno_ = value;
}
inline void MDUSATransaction::set_tradesellno(int64_t value) {
  _internal_set_tradesellno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TradeSellNo)
}

// int32 TradeType = 15;
inline void MDUSATransaction::clear_tradetype() {
  _impl_.tradetype_ = 0;
}
inline int32_t MDUSATransaction::_internal_tradetype() const {
  return _impl_.tradetype_;
}
inline int32_t MDUSATransaction::tradetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TradeType)
  return _internal_tradetype();
}
inline void MDUSATransaction::_internal_set_tradetype(int32_t value) {
  
  _impl_.tradetype_ = value;
}
inline void MDUSATransaction::set_tradetype(int32_t value) {
  _internal_set_tradetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TradeType)
}

// int32 TradeBSFlag = 16;
inline void MDUSATransaction::clear_tradebsflag() {
  _impl_.tradebsflag_ = 0;
}
inline int32_t MDUSATransaction::_internal_tradebsflag() const {
  return _impl_.tradebsflag_;
}
inline int32_t MDUSATransaction::tradebsflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TradeBSFlag)
  return _internal_tradebsflag();
}
inline void MDUSATransaction::_internal_set_tradebsflag(int32_t value) {
  
  _impl_.tradebsflag_ = value;
}
inline void MDUSATransaction::set_tradebsflag(int32_t value) {
  _internal_set_tradebsflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TradeBSFlag)
}

// int64 TradePrice = 17;
inline void MDUSATransaction::clear_tradeprice() {
  _impl_.tradeprice_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_tradeprice() const {
  return _impl_.tradeprice_;
}
inline int64_t MDUSATransaction::tradeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TradePrice)
  return _internal_tradeprice();
}
inline void MDUSATransaction::_internal_set_tradeprice(int64_t value) {
  
  _impl_.tradeprice_ = value;
}
inline void MDUSATransaction::set_tradeprice(int64_t value) {
  _internal_set_tradeprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TradePrice)
}

// int64 TradeQty = 18;
inline void MDUSATransaction::clear_tradeqty() {
  _impl_.tradeqty_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_tradeqty() const {
  return _impl_.tradeqty_;
}
inline int64_t MDUSATransaction::tradeqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TradeQty)
  return _internal_tradeqty();
}
inline void MDUSATransaction::_internal_set_tradeqty(int64_t value) {
  
  _impl_.tradeqty_ = value;
}
inline void MDUSATransaction::set_tradeqty(int64_t value) {
  _internal_set_tradeqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TradeQty)
}

// int64 TradeMoney = 19;
inline void MDUSATransaction::clear_trademoney() {
  _impl_.trademoney_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_trademoney() const {
  return _impl_.trademoney_;
}
inline int64_t MDUSATransaction::trademoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TradeMoney)
  return _internal_trademoney();
}
inline void MDUSATransaction::_internal_set_trademoney(int64_t value) {
  
  _impl_.trademoney_ = value;
}
inline void MDUSATransaction::set_trademoney(int64_t value) {
  _internal_set_trademoney(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TradeMoney)
}

// int64 NAVOffsetAmount = 20;
inline void MDUSATransaction::clear_navoffsetamount() {
  _impl_.navoffsetamount_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_navoffsetamount() const {
  return _impl_.navoffsetamount_;
}
inline int64_t MDUSATransaction::navoffsetamount() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.NAVOffsetAmount)
  return _internal_navoffsetamount();
}
inline void MDUSATransaction::_internal_set_navoffsetamount(int64_t value) {
  
  _impl_.navoffsetamount_ = value;
}
inline void MDUSATransaction::set_navoffsetamount(int64_t value) {
  _internal_set_navoffsetamount(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.NAVOffsetAmount)
}

// int64 TotalConsolidateVolume = 21;
inline void MDUSATransaction::clear_totalconsolidatevolume() {
  _impl_.totalconsolidatevolume_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_totalconsolidatevolume() const {
  return _impl_.totalconsolidatevolume_;
}
inline int64_t MDUSATransaction::totalconsolidatevolume() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TotalConsolidateVolume)
  return _internal_totalconsolidatevolume();
}
inline void MDUSATransaction::_internal_set_totalconsolidatevolume(int64_t value) {
  
  _impl_.totalconsolidatevolume_ = value;
}
inline void MDUSATransaction::set_totalconsolidatevolume(int64_t value) {
  _internal_set_totalconsolidatevolume(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TotalConsolidateVolume)
}

// string SaleConditionLV1 = 22;
inline void MDUSATransaction::clear_saleconditionlv1() {
  _impl_.saleconditionlv1_.ClearToEmpty();
}
inline const std::string& MDUSATransaction::saleconditionlv1() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV1)
  return _internal_saleconditionlv1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDUSATransaction::set_saleconditionlv1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.saleconditionlv1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV1)
}
inline std::string* MDUSATransaction::mutable_saleconditionlv1() {
  std::string* _s = _internal_mutable_saleconditionlv1();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV1)
  return _s;
}
inline const std::string& MDUSATransaction::_internal_saleconditionlv1() const {
  return _impl_.saleconditionlv1_.Get();
}
inline void MDUSATransaction::_internal_set_saleconditionlv1(const std::string& value) {
  
  _impl_.saleconditionlv1_.Set(value, GetArenaForAllocation());
}
inline std::string* MDUSATransaction::_internal_mutable_saleconditionlv1() {
  
  return _impl_.saleconditionlv1_.Mutable(GetArenaForAllocation());
}
inline std::string* MDUSATransaction::release_saleconditionlv1() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV1)
  return _impl_.saleconditionlv1_.Release();
}
inline void MDUSATransaction::set_allocated_saleconditionlv1(std::string* saleconditionlv1) {
  if (saleconditionlv1 != nullptr) {
    
  } else {
    
  }
  _impl_.saleconditionlv1_.SetAllocated(saleconditionlv1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.saleconditionlv1_.IsDefault()) {
    _impl_.saleconditionlv1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV1)
}

// string SaleConditionLV2 = 23;
inline void MDUSATransaction::clear_saleconditionlv2() {
  _impl_.saleconditionlv2_.ClearToEmpty();
}
inline const std::string& MDUSATransaction::saleconditionlv2() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV2)
  return _internal_saleconditionlv2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDUSATransaction::set_saleconditionlv2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.saleconditionlv2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV2)
}
inline std::string* MDUSATransaction::mutable_saleconditionlv2() {
  std::string* _s = _internal_mutable_saleconditionlv2();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV2)
  return _s;
}
inline const std::string& MDUSATransaction::_internal_saleconditionlv2() const {
  return _impl_.saleconditionlv2_.Get();
}
inline void MDUSATransaction::_internal_set_saleconditionlv2(const std::string& value) {
  
  _impl_.saleconditionlv2_.Set(value, GetArenaForAllocation());
}
inline std::string* MDUSATransaction::_internal_mutable_saleconditionlv2() {
  
  return _impl_.saleconditionlv2_.Mutable(GetArenaForAllocation());
}
inline std::string* MDUSATransaction::release_saleconditionlv2() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV2)
  return _impl_.saleconditionlv2_.Release();
}
inline void MDUSATransaction::set_allocated_saleconditionlv2(std::string* saleconditionlv2) {
  if (saleconditionlv2 != nullptr) {
    
  } else {
    
  }
  _impl_.saleconditionlv2_.SetAllocated(saleconditionlv2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.saleconditionlv2_.IsDefault()) {
    _impl_.saleconditionlv2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV2)
}

// string SaleConditionLV3 = 24;
inline void MDUSATransaction::clear_saleconditionlv3() {
  _impl_.saleconditionlv3_.ClearToEmpty();
}
inline const std::string& MDUSATransaction::saleconditionlv3() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV3)
  return _internal_saleconditionlv3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDUSATransaction::set_saleconditionlv3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.saleconditionlv3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV3)
}
inline std::string* MDUSATransaction::mutable_saleconditionlv3() {
  std::string* _s = _internal_mutable_saleconditionlv3();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV3)
  return _s;
}
inline const std::string& MDUSATransaction::_internal_saleconditionlv3() const {
  return _impl_.saleconditionlv3_.Get();
}
inline void MDUSATransaction::_internal_set_saleconditionlv3(const std::string& value) {
  
  _impl_.saleconditionlv3_.Set(value, GetArenaForAllocation());
}
inline std::string* MDUSATransaction::_internal_mutable_saleconditionlv3() {
  
  return _impl_.saleconditionlv3_.Mutable(GetArenaForAllocation());
}
inline std::string* MDUSATransaction::release_saleconditionlv3() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV3)
  return _impl_.saleconditionlv3_.Release();
}
inline void MDUSATransaction::set_allocated_saleconditionlv3(std::string* saleconditionlv3) {
  if (saleconditionlv3 != nullptr) {
    
  } else {
    
  }
  _impl_.saleconditionlv3_.SetAllocated(saleconditionlv3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.saleconditionlv3_.IsDefault()) {
    _impl_.saleconditionlv3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV3)
}

// string SaleConditionLV4 = 25;
inline void MDUSATransaction::clear_saleconditionlv4() {
  _impl_.saleconditionlv4_.ClearToEmpty();
}
inline const std::string& MDUSATransaction::saleconditionlv4() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV4)
  return _internal_saleconditionlv4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDUSATransaction::set_saleconditionlv4(ArgT0&& arg0, ArgT... args) {
 
 _impl_.saleconditionlv4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV4)
}
inline std::string* MDUSATransaction::mutable_saleconditionlv4() {
  std::string* _s = _internal_mutable_saleconditionlv4();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV4)
  return _s;
}
inline const std::string& MDUSATransaction::_internal_saleconditionlv4() const {
  return _impl_.saleconditionlv4_.Get();
}
inline void MDUSATransaction::_internal_set_saleconditionlv4(const std::string& value) {
  
  _impl_.saleconditionlv4_.Set(value, GetArenaForAllocation());
}
inline std::string* MDUSATransaction::_internal_mutable_saleconditionlv4() {
  
  return _impl_.saleconditionlv4_.Mutable(GetArenaForAllocation());
}
inline std::string* MDUSATransaction::release_saleconditionlv4() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV4)
  return _impl_.saleconditionlv4_.Release();
}
inline void MDUSATransaction::set_allocated_saleconditionlv4(std::string* saleconditionlv4) {
  if (saleconditionlv4 != nullptr) {
    
  } else {
    
  }
  _impl_.saleconditionlv4_.SetAllocated(saleconditionlv4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.saleconditionlv4_.IsDefault()) {
    _impl_.saleconditionlv4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDUSATransaction.SaleConditionLV4)
}

// int32 TrackingNum = 26;
inline void MDUSATransaction::clear_trackingnum() {
  _impl_.trackingnum_ = 0;
}
inline int32_t MDUSATransaction::_internal_trackingnum() const {
  return _impl_.trackingnum_;
}
inline int32_t MDUSATransaction::trackingnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TrackingNum)
  return _internal_trackingnum();
}
inline void MDUSATransaction::_internal_set_trackingnum(int32_t value) {
  
  _impl_.trackingnum_ = value;
}
inline void MDUSATransaction::set_trackingnum(int32_t value) {
  _internal_set_trackingnum(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TrackingNum)
}

// int32 DataMultiplePowerOf10 = 27;
inline void MDUSATransaction::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDUSATransaction::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDUSATransaction::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDUSATransaction::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDUSATransaction::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.DataMultiplePowerOf10)
}

// int32 TimeIndex = 28;
inline void MDUSATransaction::clear_timeindex() {
  _impl_.timeindex_ = 0;
}
inline int32_t MDUSATransaction::_internal_timeindex() const {
  return _impl_.timeindex_;
}
inline int32_t MDUSATransaction::timeindex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.TimeIndex)
  return _internal_timeindex();
}
inline void MDUSATransaction::_internal_set_timeindex(int32_t value) {
  
  _impl_.timeindex_ = value;
}
inline void MDUSATransaction::set_timeindex(int32_t value) {
  _internal_set_timeindex(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.TimeIndex)
}

// int64 DataIndex = 29;
inline void MDUSATransaction::clear_dataindex() {
  _impl_.dataindex_ = int64_t{0};
}
inline int64_t MDUSATransaction::_internal_dataindex() const {
  return _impl_.dataindex_;
}
inline int64_t MDUSATransaction::dataindex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDUSATransaction.DataIndex)
  return _internal_dataindex();
}
inline void MDUSATransaction::_internal_set_dataindex(int64_t value) {
  
  _impl_.dataindex_ = value;
}
inline void MDUSATransaction::set_dataindex(int64_t value) {
  _internal_set_dataindex(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDUSATransaction.DataIndex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDUSATransaction_2eproto
