// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADKLine.proto

#include "ADKLine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
PROTOBUF_CONSTEXPR ADKLine::ADKLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.htscsecurityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mddate_)*/0
  , /*decltype(_impl_.mdtime_)*/0
  , /*decltype(_impl_.datatimestamp_)*/int64_t{0}
  , /*decltype(_impl_.securityidsource_)*/0
  , /*decltype(_impl_.securitytype_)*/0
  , /*decltype(_impl_.openpx_)*/int64_t{0}
  , /*decltype(_impl_.closepx_)*/int64_t{0}
  , /*decltype(_impl_.highpx_)*/int64_t{0}
  , /*decltype(_impl_.lowpx_)*/int64_t{0}
  , /*decltype(_impl_.numtrades_)*/int64_t{0}
  , /*decltype(_impl_.periodtype_)*/0
  , /*decltype(_impl_.exchangedate_)*/0
  , /*decltype(_impl_.totalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.totalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.iopv_)*/int64_t{0}
  , /*decltype(_impl_.openinterest_)*/int64_t{0}
  , /*decltype(_impl_.settleprice_)*/int64_t{0}
  , /*decltype(_impl_.exchangetime_)*/0
  , /*decltype(_impl_.klinecategory_)*/0
  , /*decltype(_impl_.afterhoursnumtrades_)*/int64_t{0}
  , /*decltype(_impl_.afterhourstotalvolumetrade_)*/int64_t{0}
  , /*decltype(_impl_.afterhourstotalvaluetrade_)*/int64_t{0}
  , /*decltype(_impl_.preclosepx_)*/int64_t{0}
  , /*decltype(_impl_.precloseyield_)*/int64_t{0}
  , /*decltype(_impl_.preweightedavgpx_)*/int64_t{0}
  , /*decltype(_impl_.preweightedavgyield_)*/int64_t{0}
  , /*decltype(_impl_.closeweightedavgpx_)*/int64_t{0}
  , /*decltype(_impl_.closeweightedavgyield_)*/int64_t{0}
  , /*decltype(_impl_.openyield_)*/int64_t{0}
  , /*decltype(_impl_.highyield_)*/int64_t{0}
  , /*decltype(_impl_.lowyield_)*/int64_t{0}
  , /*decltype(_impl_.closeyield_)*/int64_t{0}
  , /*decltype(_impl_.datamultiplepowerof10_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADKLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADKLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADKLineDefaultTypeInternal() {}
  union {
    ADKLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADKLineDefaultTypeInternal _ADKLine_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
static ::_pb::Metadata file_level_metadata_ADKLine_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ADKLine_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ADKLine_2eproto = nullptr;

const uint32_t TableStruct_ADKLine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.htscsecurityid_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.mddate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.mdtime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.datatimestamp_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.securityidsource_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.securitytype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.periodtype_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.openpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.closepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.highpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.lowpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.numtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.totalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.totalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.iopv_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.openinterest_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.settleprice_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.exchangedate_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.exchangetime_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.klinecategory_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.afterhoursnumtrades_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.afterhourstotalvolumetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.afterhourstotalvaluetrade_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.preclosepx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.precloseyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.preweightedavgpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.preweightedavgyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.closeweightedavgpx_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.closeweightedavgyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.openyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.highyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.lowyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.closeyield_),
  PROTOBUF_FIELD_OFFSET(::com::htsc::mdc::insight::model::ADKLine, _impl_.datamultiplepowerof10_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::htsc::mdc::insight::model::ADKLine)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::htsc::mdc::insight::model::_ADKLine_default_instance_._instance,
};

const char descriptor_table_protodef_ADKLine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rADKLine.proto\022\032com.htsc.mdc.insight.mo"
  "del\032\023EMDPeriodType.proto\032\023ESecurityType."
  "proto\032\027ESecurityIDSource.proto\"\367\006\n\007ADKLi"
  "ne\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001"
  "(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001("
  "\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc.m"
  "dc.model.ESecurityIDSource\0227\n\014securityTy"
  "pe\030\006 \001(\0162!.com.htsc.mdc.model.ESecurityT"
  "ype\0225\n\nPeriodType\030\007 \001(\0162!.com.htsc.mdc.m"
  "odel.EMDPeriodType\022\016\n\006OpenPx\030\010 \001(\003\022\017\n\007Cl"
  "osePx\030\t \001(\003\022\016\n\006HighPx\030\n \001(\003\022\r\n\005LowPx\030\013 \001"
  "(\003\022\021\n\tNumTrades\030\014 \001(\003\022\030\n\020TotalVolumeTrad"
  "e\030\r \001(\003\022\027\n\017TotalValueTrade\030\016 \001(\003\022\014\n\004IOPV"
  "\030\017 \001(\003\022\024\n\014OpenInterest\030\020 \001(\003\022\023\n\013SettlePr"
  "ice\030\021 \001(\003\022\024\n\014ExchangeDate\030\022 \001(\005\022\024\n\014Excha"
  "ngeTime\030\023 \001(\005\022\025\n\rKLineCategory\030\024 \001(\005\022\033\n\023"
  "AfterHoursNumTrades\030\025 \001(\003\022\"\n\032AfterHoursT"
  "otalVolumeTrade\030\026 \001(\003\022!\n\031AfterHoursTotal"
  "ValueTrade\030\027 \001(\003\022\022\n\nPreClosePx\030\030 \001(\003\022\025\n\r"
  "PreCloseYield\030\031 \001(\003\022\030\n\020PreWeightedAvgPx\030"
  "\032 \001(\003\022\033\n\023PreWeightedAvgYield\030\033 \001(\003\022\032\n\022Cl"
  "oseWeightedAvgPx\030\034 \001(\003\022\035\n\025CloseWeightedA"
  "vgYield\030\035 \001(\003\022\021\n\tOpenYield\030\036 \001(\003\022\021\n\tHigh"
  "Yield\030\037 \001(\003\022\020\n\010LowYield\030  \001(\003\022\022\n\nCloseYi"
  "eld\030! \001(\003\022\035\n\025DataMultiplePowerOf10\030\" \001(\005"
  "B0\n\032com.htsc.mdc.insight.modelB\rADKLineP"
  "rotosH\001\240\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ADKLine_2eproto_deps[3] = {
  &::descriptor_table_EMDPeriodType_2eproto,
  &::descriptor_table_ESecurityIDSource_2eproto,
  &::descriptor_table_ESecurityType_2eproto,
};
static ::_pbi::once_flag descriptor_table_ADKLine_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ADKLine_2eproto = {
    false, false, 1058, descriptor_table_protodef_ADKLine_2eproto,
    "ADKLine.proto",
    &descriptor_table_ADKLine_2eproto_once, descriptor_table_ADKLine_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_ADKLine_2eproto::offsets,
    file_level_metadata_ADKLine_2eproto, file_level_enum_descriptors_ADKLine_2eproto,
    file_level_service_descriptors_ADKLine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ADKLine_2eproto_getter() {
  return &descriptor_table_ADKLine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ADKLine_2eproto(&descriptor_table_ADKLine_2eproto);
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADKLine::_Internal {
 public:
};

ADKLine::ADKLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.htsc.mdc.insight.model.ADKLine)
}
ADKLine::ADKLine(const ADKLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADKLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.mddate_){}
    , decltype(_impl_.mdtime_){}
    , decltype(_impl_.datatimestamp_){}
    , decltype(_impl_.securityidsource_){}
    , decltype(_impl_.securitytype_){}
    , decltype(_impl_.openpx_){}
    , decltype(_impl_.closepx_){}
    , decltype(_impl_.highpx_){}
    , decltype(_impl_.lowpx_){}
    , decltype(_impl_.numtrades_){}
    , decltype(_impl_.periodtype_){}
    , decltype(_impl_.exchangedate_){}
    , decltype(_impl_.totalvolumetrade_){}
    , decltype(_impl_.totalvaluetrade_){}
    , decltype(_impl_.iopv_){}
    , decltype(_impl_.openinterest_){}
    , decltype(_impl_.settleprice_){}
    , decltype(_impl_.exchangetime_){}
    , decltype(_impl_.klinecategory_){}
    , decltype(_impl_.afterhoursnumtrades_){}
    , decltype(_impl_.afterhourstotalvolumetrade_){}
    , decltype(_impl_.afterhourstotalvaluetrade_){}
    , decltype(_impl_.preclosepx_){}
    , decltype(_impl_.precloseyield_){}
    , decltype(_impl_.preweightedavgpx_){}
    , decltype(_impl_.preweightedavgyield_){}
    , decltype(_impl_.closeweightedavgpx_){}
    , decltype(_impl_.closeweightedavgyield_){}
    , decltype(_impl_.openyield_){}
    , decltype(_impl_.highyield_){}
    , decltype(_impl_.lowyield_){}
    , decltype(_impl_.closeyield_){}
    , decltype(_impl_.datamultiplepowerof10_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_htscsecurityid().empty()) {
    _this->_impl_.htscsecurityid_.Set(from._internal_htscsecurityid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mddate_, &from._impl_.mddate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
    reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADKLine)
}

inline void ADKLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.htscsecurityid_){}
    , decltype(_impl_.mddate_){0}
    , decltype(_impl_.mdtime_){0}
    , decltype(_impl_.datatimestamp_){int64_t{0}}
    , decltype(_impl_.securityidsource_){0}
    , decltype(_impl_.securitytype_){0}
    , decltype(_impl_.openpx_){int64_t{0}}
    , decltype(_impl_.closepx_){int64_t{0}}
    , decltype(_impl_.highpx_){int64_t{0}}
    , decltype(_impl_.lowpx_){int64_t{0}}
    , decltype(_impl_.numtrades_){int64_t{0}}
    , decltype(_impl_.periodtype_){0}
    , decltype(_impl_.exchangedate_){0}
    , decltype(_impl_.totalvolumetrade_){int64_t{0}}
    , decltype(_impl_.totalvaluetrade_){int64_t{0}}
    , decltype(_impl_.iopv_){int64_t{0}}
    , decltype(_impl_.openinterest_){int64_t{0}}
    , decltype(_impl_.settleprice_){int64_t{0}}
    , decltype(_impl_.exchangetime_){0}
    , decltype(_impl_.klinecategory_){0}
    , decltype(_impl_.afterhoursnumtrades_){int64_t{0}}
    , decltype(_impl_.afterhourstotalvolumetrade_){int64_t{0}}
    , decltype(_impl_.afterhourstotalvaluetrade_){int64_t{0}}
    , decltype(_impl_.preclosepx_){int64_t{0}}
    , decltype(_impl_.precloseyield_){int64_t{0}}
    , decltype(_impl_.preweightedavgpx_){int64_t{0}}
    , decltype(_impl_.preweightedavgyield_){int64_t{0}}
    , decltype(_impl_.closeweightedavgpx_){int64_t{0}}
    , decltype(_impl_.closeweightedavgyield_){int64_t{0}}
    , decltype(_impl_.openyield_){int64_t{0}}
    , decltype(_impl_.highyield_){int64_t{0}}
    , decltype(_impl_.lowyield_){int64_t{0}}
    , decltype(_impl_.closeyield_){int64_t{0}}
    , decltype(_impl_.datamultiplepowerof10_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.htscsecurityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADKLine::~ADKLine() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADKLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADKLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.htscsecurityid_.Destroy();
}

void ADKLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADKLine::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADKLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.htscsecurityid_.ClearToEmpty();
  ::memset(&_impl_.mddate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datamultiplepowerof10_) -
      reinterpret_cast<char*>(&_impl_.mddate_)) + sizeof(_impl_.datamultiplepowerof10_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADKLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string HTSCSecurityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_htscsecurityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID"));
        } else
          goto handle_unusual;
        continue;
      // int32 MDDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MDTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DataTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.datatimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securityidsource(static_cast<::com::htsc::mdc::model::ESecurityIDSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::com::htsc::mdc::model::ESecurityType>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_periodtype(static_cast<::com::htsc::mdc::model::EMDPeriodType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 OpenPx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.openpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ClosePx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.closepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighPx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.highpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowPx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.lowpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NumTrades = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.numtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalVolumeTrade = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.totalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalValueTrade = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.totalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IOPV = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.iopv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenInterest = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SettlePrice = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.settleprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeDate = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.exchangedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExchangeTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.exchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 KLineCategory = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.klinecategory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AfterHoursNumTrades = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.afterhoursnumtrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AfterHoursTotalVolumeTrade = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.afterhourstotalvolumetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 AfterHoursTotalValueTrade = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.afterhourstotalvaluetrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreClosePx = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.preclosepx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreCloseYield = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.precloseyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreWeightedAvgPx = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.preweightedavgpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PreWeightedAvgYield = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.preweightedavgyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseWeightedAvgPx = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.closeweightedavgpx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseWeightedAvgYield = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.closeweightedavgyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OpenYield = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.openyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 HighYield = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.highyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LowYield = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.lowyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CloseYield = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.closeyield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DataMultiplePowerOf10 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.datamultiplepowerof10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADKLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADKLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_htscsecurityid().data(), static_cast<int>(this->_internal_htscsecurityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_htscsecurityid(), target);
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mddate(), target);
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdtime(), target);
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_datatimestamp(), target);
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_securityidsource(), target);
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_securitytype(), target);
  }

  // .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
  if (this->_internal_periodtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_periodtype(), target);
  }

  // int64 OpenPx = 8;
  if (this->_internal_openpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_openpx(), target);
  }

  // int64 ClosePx = 9;
  if (this->_internal_closepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_closepx(), target);
  }

  // int64 HighPx = 10;
  if (this->_internal_highpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_highpx(), target);
  }

  // int64 LowPx = 11;
  if (this->_internal_lowpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_lowpx(), target);
  }

  // int64 NumTrades = 12;
  if (this->_internal_numtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_numtrades(), target);
  }

  // int64 TotalVolumeTrade = 13;
  if (this->_internal_totalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_totalvolumetrade(), target);
  }

  // int64 TotalValueTrade = 14;
  if (this->_internal_totalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_totalvaluetrade(), target);
  }

  // int64 IOPV = 15;
  if (this->_internal_iopv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_iopv(), target);
  }

  // int64 OpenInterest = 16;
  if (this->_internal_openinterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_openinterest(), target);
  }

  // int64 SettlePrice = 17;
  if (this->_internal_settleprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_settleprice(), target);
  }

  // int32 ExchangeDate = 18;
  if (this->_internal_exchangedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_exchangedate(), target);
  }

  // int32 ExchangeTime = 19;
  if (this->_internal_exchangetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_exchangetime(), target);
  }

  // int32 KLineCategory = 20;
  if (this->_internal_klinecategory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_klinecategory(), target);
  }

  // int64 AfterHoursNumTrades = 21;
  if (this->_internal_afterhoursnumtrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_afterhoursnumtrades(), target);
  }

  // int64 AfterHoursTotalVolumeTrade = 22;
  if (this->_internal_afterhourstotalvolumetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_afterhourstotalvolumetrade(), target);
  }

  // int64 AfterHoursTotalValueTrade = 23;
  if (this->_internal_afterhourstotalvaluetrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_afterhourstotalvaluetrade(), target);
  }

  // int64 PreClosePx = 24;
  if (this->_internal_preclosepx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_preclosepx(), target);
  }

  // int64 PreCloseYield = 25;
  if (this->_internal_precloseyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_precloseyield(), target);
  }

  // int64 PreWeightedAvgPx = 26;
  if (this->_internal_preweightedavgpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_preweightedavgpx(), target);
  }

  // int64 PreWeightedAvgYield = 27;
  if (this->_internal_preweightedavgyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_preweightedavgyield(), target);
  }

  // int64 CloseWeightedAvgPx = 28;
  if (this->_internal_closeweightedavgpx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_closeweightedavgpx(), target);
  }

  // int64 CloseWeightedAvgYield = 29;
  if (this->_internal_closeweightedavgyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_closeweightedavgyield(), target);
  }

  // int64 OpenYield = 30;
  if (this->_internal_openyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(30, this->_internal_openyield(), target);
  }

  // int64 HighYield = 31;
  if (this->_internal_highyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_highyield(), target);
  }

  // int64 LowYield = 32;
  if (this->_internal_lowyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_lowyield(), target);
  }

  // int64 CloseYield = 33;
  if (this->_internal_closeyield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(33, this->_internal_closeyield(), target);
  }

  // int32 DataMultiplePowerOf10 = 34;
  if (this->_internal_datamultiplepowerof10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_datamultiplepowerof10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADKLine)
  return target;
}

size_t ADKLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADKLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HTSCSecurityID = 1;
  if (!this->_internal_htscsecurityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_htscsecurityid());
  }

  // int32 MDDate = 2;
  if (this->_internal_mddate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mddate());
  }

  // int32 MDTime = 3;
  if (this->_internal_mdtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mdtime());
  }

  // int64 DataTimestamp = 4;
  if (this->_internal_datatimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatimestamp());
  }

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->_internal_securityidsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securityidsource());
  }

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->_internal_securitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  // int64 OpenPx = 8;
  if (this->_internal_openpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_openpx());
  }

  // int64 ClosePx = 9;
  if (this->_internal_closepx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_closepx());
  }

  // int64 HighPx = 10;
  if (this->_internal_highpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_highpx());
  }

  // int64 LowPx = 11;
  if (this->_internal_lowpx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lowpx());
  }

  // int64 NumTrades = 12;
  if (this->_internal_numtrades() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numtrades());
  }

  // .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
  if (this->_internal_periodtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_periodtype());
  }

  // int32 ExchangeDate = 18;
  if (this->_internal_exchangedate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangedate());
  }

  // int64 TotalVolumeTrade = 13;
  if (this->_internal_totalvolumetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvolumetrade());
  }

  // int64 TotalValueTrade = 14;
  if (this->_internal_totalvaluetrade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalvaluetrade());
  }

  // int64 IOPV = 15;
  if (this->_internal_iopv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_iopv());
  }

  // int64 OpenInterest = 16;
  if (this->_internal_openinterest() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_openinterest());
  }

  // int64 SettlePrice = 17;
  if (this->_internal_settleprice() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_settleprice());
  }

  // int32 ExchangeTime = 19;
  if (this->_internal_exchangetime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exchangetime());
  }

  // int32 KLineCategory = 20;
  if (this->_internal_klinecategory() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_klinecategory());
  }

  // int64 AfterHoursNumTrades = 21;
  if (this->_internal_afterhoursnumtrades() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_afterhoursnumtrades());
  }

  // int64 AfterHoursTotalVolumeTrade = 22;
  if (this->_internal_afterhourstotalvolumetrade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_afterhourstotalvolumetrade());
  }

  // int64 AfterHoursTotalValueTrade = 23;
  if (this->_internal_afterhourstotalvaluetrade() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_afterhourstotalvaluetrade());
  }

  // int64 PreClosePx = 24;
  if (this->_internal_preclosepx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preclosepx());
  }

  // int64 PreCloseYield = 25;
  if (this->_internal_precloseyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_precloseyield());
  }

  // int64 PreWeightedAvgPx = 26;
  if (this->_internal_preweightedavgpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preweightedavgpx());
  }

  // int64 PreWeightedAvgYield = 27;
  if (this->_internal_preweightedavgyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_preweightedavgyield());
  }

  // int64 CloseWeightedAvgPx = 28;
  if (this->_internal_closeweightedavgpx() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closeweightedavgpx());
  }

  // int64 CloseWeightedAvgYield = 29;
  if (this->_internal_closeweightedavgyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closeweightedavgyield());
  }

  // int64 OpenYield = 30;
  if (this->_internal_openyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_openyield());
  }

  // int64 HighYield = 31;
  if (this->_internal_highyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_highyield());
  }

  // int64 LowYield = 32;
  if (this->_internal_lowyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lowyield());
  }

  // int64 CloseYield = 33;
  if (this->_internal_closeyield() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_closeyield());
  }

  // int32 DataMultiplePowerOf10 = 34;
  if (this->_internal_datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_datamultiplepowerof10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADKLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADKLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADKLine::GetClassData() const { return &_class_data_; }


void ADKLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADKLine*>(&to_msg);
  auto& from = static_cast<const ADKLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADKLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_htscsecurityid().empty()) {
    _this->_internal_set_htscsecurityid(from._internal_htscsecurityid());
  }
  if (from._internal_mddate() != 0) {
    _this->_internal_set_mddate(from._internal_mddate());
  }
  if (from._internal_mdtime() != 0) {
    _this->_internal_set_mdtime(from._internal_mdtime());
  }
  if (from._internal_datatimestamp() != 0) {
    _this->_internal_set_datatimestamp(from._internal_datatimestamp());
  }
  if (from._internal_securityidsource() != 0) {
    _this->_internal_set_securityidsource(from._internal_securityidsource());
  }
  if (from._internal_securitytype() != 0) {
    _this->_internal_set_securitytype(from._internal_securitytype());
  }
  if (from._internal_openpx() != 0) {
    _this->_internal_set_openpx(from._internal_openpx());
  }
  if (from._internal_closepx() != 0) {
    _this->_internal_set_closepx(from._internal_closepx());
  }
  if (from._internal_highpx() != 0) {
    _this->_internal_set_highpx(from._internal_highpx());
  }
  if (from._internal_lowpx() != 0) {
    _this->_internal_set_lowpx(from._internal_lowpx());
  }
  if (from._internal_numtrades() != 0) {
    _this->_internal_set_numtrades(from._internal_numtrades());
  }
  if (from._internal_periodtype() != 0) {
    _this->_internal_set_periodtype(from._internal_periodtype());
  }
  if (from._internal_exchangedate() != 0) {
    _this->_internal_set_exchangedate(from._internal_exchangedate());
  }
  if (from._internal_totalvolumetrade() != 0) {
    _this->_internal_set_totalvolumetrade(from._internal_totalvolumetrade());
  }
  if (from._internal_totalvaluetrade() != 0) {
    _this->_internal_set_totalvaluetrade(from._internal_totalvaluetrade());
  }
  if (from._internal_iopv() != 0) {
    _this->_internal_set_iopv(from._internal_iopv());
  }
  if (from._internal_openinterest() != 0) {
    _this->_internal_set_openinterest(from._internal_openinterest());
  }
  if (from._internal_settleprice() != 0) {
    _this->_internal_set_settleprice(from._internal_settleprice());
  }
  if (from._internal_exchangetime() != 0) {
    _this->_internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from._internal_klinecategory() != 0) {
    _this->_internal_set_klinecategory(from._internal_klinecategory());
  }
  if (from._internal_afterhoursnumtrades() != 0) {
    _this->_internal_set_afterhoursnumtrades(from._internal_afterhoursnumtrades());
  }
  if (from._internal_afterhourstotalvolumetrade() != 0) {
    _this->_internal_set_afterhourstotalvolumetrade(from._internal_afterhourstotalvolumetrade());
  }
  if (from._internal_afterhourstotalvaluetrade() != 0) {
    _this->_internal_set_afterhourstotalvaluetrade(from._internal_afterhourstotalvaluetrade());
  }
  if (from._internal_preclosepx() != 0) {
    _this->_internal_set_preclosepx(from._internal_preclosepx());
  }
  if (from._internal_precloseyield() != 0) {
    _this->_internal_set_precloseyield(from._internal_precloseyield());
  }
  if (from._internal_preweightedavgpx() != 0) {
    _this->_internal_set_preweightedavgpx(from._internal_preweightedavgpx());
  }
  if (from._internal_preweightedavgyield() != 0) {
    _this->_internal_set_preweightedavgyield(from._internal_preweightedavgyield());
  }
  if (from._internal_closeweightedavgpx() != 0) {
    _this->_internal_set_closeweightedavgpx(from._internal_closeweightedavgpx());
  }
  if (from._internal_closeweightedavgyield() != 0) {
    _this->_internal_set_closeweightedavgyield(from._internal_closeweightedavgyield());
  }
  if (from._internal_openyield() != 0) {
    _this->_internal_set_openyield(from._internal_openyield());
  }
  if (from._internal_highyield() != 0) {
    _this->_internal_set_highyield(from._internal_highyield());
  }
  if (from._internal_lowyield() != 0) {
    _this->_internal_set_lowyield(from._internal_lowyield());
  }
  if (from._internal_closeyield() != 0) {
    _this->_internal_set_closeyield(from._internal_closeyield());
  }
  if (from._internal_datamultiplepowerof10() != 0) {
    _this->_internal_set_datamultiplepowerof10(from._internal_datamultiplepowerof10());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADKLine::CopyFrom(const ADKLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADKLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADKLine::IsInitialized() const {
  return true;
}

void ADKLine::InternalSwap(ADKLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.htscsecurityid_, lhs_arena,
      &other->_impl_.htscsecurityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADKLine, _impl_.datamultiplepowerof10_)
      + sizeof(ADKLine::_impl_.datamultiplepowerof10_)
      - PROTOBUF_FIELD_OFFSET(ADKLine, _impl_.mddate_)>(
          reinterpret_cast<char*>(&_impl_.mddate_),
          reinterpret_cast<char*>(&other->_impl_.mddate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADKLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ADKLine_2eproto_getter, &descriptor_table_ADKLine_2eproto_once,
      file_level_metadata_ADKLine_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::htsc::mdc::insight::model::ADKLine*
Arena::CreateMaybeMessage< ::com::htsc::mdc::insight::model::ADKLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::htsc::mdc::insight::model::ADKLine >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
