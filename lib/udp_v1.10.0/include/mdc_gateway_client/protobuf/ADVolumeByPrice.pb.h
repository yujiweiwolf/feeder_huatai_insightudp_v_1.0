// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADVolumeByPrice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ADVolumeByPrice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ADVolumeByPrice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ADVolumeByPrice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ADVolumeByPrice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ADVolumeByPrice_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class ADVolumeByPrice;
struct ADVolumeByPriceDefaultTypeInternal;
extern ADVolumeByPriceDefaultTypeInternal _ADVolumeByPrice_default_instance_;
class ADVolumeByPriceDetail;
struct ADVolumeByPriceDetailDefaultTypeInternal;
extern ADVolumeByPriceDetailDefaultTypeInternal _ADVolumeByPriceDetail_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::ADVolumeByPrice* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADVolumeByPrice>(Arena*);
template<> ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::ADVolumeByPriceDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class ADVolumeByPrice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADVolumeByPrice) */ {
 public:
  inline ADVolumeByPrice() : ADVolumeByPrice(nullptr) {}
  ~ADVolumeByPrice() override;
  explicit PROTOBUF_CONSTEXPR ADVolumeByPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADVolumeByPrice(const ADVolumeByPrice& from);
  ADVolumeByPrice(ADVolumeByPrice&& from) noexcept
    : ADVolumeByPrice() {
    *this = ::std::move(from);
  }

  inline ADVolumeByPrice& operator=(const ADVolumeByPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADVolumeByPrice& operator=(ADVolumeByPrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADVolumeByPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADVolumeByPrice* internal_default_instance() {
    return reinterpret_cast<const ADVolumeByPrice*>(
               &_ADVolumeByPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADVolumeByPrice& a, ADVolumeByPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(ADVolumeByPrice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADVolumeByPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADVolumeByPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADVolumeByPrice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADVolumeByPrice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADVolumeByPrice& from) {
    ADVolumeByPrice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADVolumeByPrice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADVolumeByPrice";
  }
  protected:
  explicit ADVolumeByPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 8,
    kHTSCSecurityIDFieldNumber = 1,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kTotalVolumeTradeFieldNumber = 7,
    kExchangeDateFieldNumber = 9,
    kExchangeTimeFieldNumber = 10,
    kDataMultiplePowerOf10FieldNumber = 11,
  };
  // repeated .com.htsc.mdc.insight.model.ADVolumeByPriceDetail Details = 8;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail >*
      mutable_details();
  private:
  const ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail& _internal_details(int index) const;
  ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail* _internal_add_details();
  public:
  const ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail& details(int index) const;
  ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail >&
      details() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 TotalVolumeTrade = 7;
  void clear_totalvolumetrade();
  int64_t totalvolumetrade() const;
  void set_totalvolumetrade(int64_t value);
  private:
  int64_t _internal_totalvolumetrade() const;
  void _internal_set_totalvolumetrade(int64_t value);
  public:

  // int32 ExchangeDate = 9;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 10;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 11;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADVolumeByPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail > details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t totalvolumetrade_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADVolumeByPrice_2eproto;
};
// -------------------------------------------------------------------

class ADVolumeByPriceDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADVolumeByPriceDetail) */ {
 public:
  inline ADVolumeByPriceDetail() : ADVolumeByPriceDetail(nullptr) {}
  ~ADVolumeByPriceDetail() override;
  explicit PROTOBUF_CONSTEXPR ADVolumeByPriceDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADVolumeByPriceDetail(const ADVolumeByPriceDetail& from);
  ADVolumeByPriceDetail(ADVolumeByPriceDetail&& from) noexcept
    : ADVolumeByPriceDetail() {
    *this = ::std::move(from);
  }

  inline ADVolumeByPriceDetail& operator=(const ADVolumeByPriceDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADVolumeByPriceDetail& operator=(ADVolumeByPriceDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADVolumeByPriceDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADVolumeByPriceDetail* internal_default_instance() {
    return reinterpret_cast<const ADVolumeByPriceDetail*>(
               &_ADVolumeByPriceDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ADVolumeByPriceDetail& a, ADVolumeByPriceDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ADVolumeByPriceDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADVolumeByPriceDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADVolumeByPriceDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADVolumeByPriceDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADVolumeByPriceDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ADVolumeByPriceDetail& from) {
    ADVolumeByPriceDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADVolumeByPriceDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.ADVolumeByPriceDetail";
  }
  protected:
  explicit ADVolumeByPriceDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradePriceFieldNumber = 1,
    kTotalQtyFieldNumber = 2,
    kBuyQtyFieldNumber = 3,
    kSellQtyFieldNumber = 4,
    kTotalNumbersFieldNumber = 5,
    kBuyNumbersFieldNumber = 6,
    kSellNumbersFieldNumber = 7,
    kVolumePerNumberFieldNumber = 8,
  };
  // int64 TradePrice = 1;
  void clear_tradeprice();
  int64_t tradeprice() const;
  void set_tradeprice(int64_t value);
  private:
  int64_t _internal_tradeprice() const;
  void _internal_set_tradeprice(int64_t value);
  public:

  // int64 TotalQty = 2;
  void clear_totalqty();
  int64_t totalqty() const;
  void set_totalqty(int64_t value);
  private:
  int64_t _internal_totalqty() const;
  void _internal_set_totalqty(int64_t value);
  public:

  // int64 BuyQty = 3;
  void clear_buyqty();
  int64_t buyqty() const;
  void set_buyqty(int64_t value);
  private:
  int64_t _internal_buyqty() const;
  void _internal_set_buyqty(int64_t value);
  public:

  // int64 SellQty = 4;
  void clear_sellqty();
  int64_t sellqty() const;
  void set_sellqty(int64_t value);
  private:
  int64_t _internal_sellqty() const;
  void _internal_set_sellqty(int64_t value);
  public:

  // int64 TotalNumbers = 5;
  void clear_totalnumbers();
  int64_t totalnumbers() const;
  void set_totalnumbers(int64_t value);
  private:
  int64_t _internal_totalnumbers() const;
  void _internal_set_totalnumbers(int64_t value);
  public:

  // int64 BuyNumbers = 6;
  void clear_buynumbers();
  int64_t buynumbers() const;
  void set_buynumbers(int64_t value);
  private:
  int64_t _internal_buynumbers() const;
  void _internal_set_buynumbers(int64_t value);
  public:

  // int64 SellNumbers = 7;
  void clear_sellnumbers();
  int64_t sellnumbers() const;
  void set_sellnumbers(int64_t value);
  private:
  int64_t _internal_sellnumbers() const;
  void _internal_set_sellnumbers(int64_t value);
  public:

  // int64 VolumePerNumber = 8;
  void clear_volumepernumber();
  int64_t volumepernumber() const;
  void set_volumepernumber(int64_t value);
  private:
  int64_t _internal_volumepernumber() const;
  void _internal_set_volumepernumber(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADVolumeByPriceDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t tradeprice_;
    int64_t totalqty_;
    int64_t buyqty_;
    int64_t sellqty_;
    int64_t totalnumbers_;
    int64_t buynumbers_;
    int64_t sellnumbers_;
    int64_t volumepernumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ADVolumeByPrice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADVolumeByPrice

// string HTSCSecurityID = 1;
inline void ADVolumeByPrice::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& ADVolumeByPrice::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADVolumeByPrice::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.HTSCSecurityID)
}
inline std::string* ADVolumeByPrice::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADVolumeByPrice.HTSCSecurityID)
  return _s;
}
inline const std::string& ADVolumeByPrice::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void ADVolumeByPrice::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* ADVolumeByPrice::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* ADVolumeByPrice::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADVolumeByPrice.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void ADVolumeByPrice::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADVolumeByPrice.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void ADVolumeByPrice::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t ADVolumeByPrice::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t ADVolumeByPrice::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.MDDate)
  return _internal_mddate();
}
inline void ADVolumeByPrice::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void ADVolumeByPrice::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.MDDate)
}

// int32 MDTime = 3;
inline void ADVolumeByPrice::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t ADVolumeByPrice::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t ADVolumeByPrice::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.MDTime)
  return _internal_mdtime();
}
inline void ADVolumeByPrice::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void ADVolumeByPrice::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.MDTime)
}

// int64 DataTimestamp = 4;
inline void ADVolumeByPrice::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t ADVolumeByPrice::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t ADVolumeByPrice::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.DataTimestamp)
  return _internal_datatimestamp();
}
inline void ADVolumeByPrice::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void ADVolumeByPrice::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADVolumeByPrice::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADVolumeByPrice::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADVolumeByPrice::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.securityIDSource)
  return _internal_securityidsource();
}
inline void ADVolumeByPrice::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void ADVolumeByPrice::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADVolumeByPrice::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADVolumeByPrice::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType ADVolumeByPrice::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.securityType)
  return _internal_securitytype();
}
inline void ADVolumeByPrice::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void ADVolumeByPrice::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.securityType)
}

// int64 TotalVolumeTrade = 7;
inline void ADVolumeByPrice::clear_totalvolumetrade() {
  _impl_.totalvolumetrade_ = int64_t{0};
}
inline int64_t ADVolumeByPrice::_internal_totalvolumetrade() const {
  return _impl_.totalvolumetrade_;
}
inline int64_t ADVolumeByPrice::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.TotalVolumeTrade)
  return _internal_totalvolumetrade();
}
inline void ADVolumeByPrice::_internal_set_totalvolumetrade(int64_t value) {
  
  _impl_.totalvolumetrade_ = value;
}
inline void ADVolumeByPrice::set_totalvolumetrade(int64_t value) {
  _internal_set_totalvolumetrade(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.TotalVolumeTrade)
}

// repeated .com.htsc.mdc.insight.model.ADVolumeByPriceDetail Details = 8;
inline int ADVolumeByPrice::_internal_details_size() const {
  return _impl_.details_.size();
}
inline int ADVolumeByPrice::details_size() const {
  return _internal_details_size();
}
inline void ADVolumeByPrice::clear_details() {
  _impl_.details_.Clear();
}
inline ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail* ADVolumeByPrice::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADVolumeByPrice.Details)
  return _impl_.details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail >*
ADVolumeByPrice::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADVolumeByPrice.Details)
  return &_impl_.details_;
}
inline const ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail& ADVolumeByPrice::_internal_details(int index) const {
  return _impl_.details_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail& ADVolumeByPrice::details(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.Details)
  return _internal_details(index);
}
inline ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail* ADVolumeByPrice::_internal_add_details() {
  return _impl_.details_.Add();
}
inline ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail* ADVolumeByPrice::add_details() {
  ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail* _add = _internal_add_details();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADVolumeByPrice.Details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADVolumeByPriceDetail >&
ADVolumeByPrice::details() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADVolumeByPrice.Details)
  return _impl_.details_;
}

// int32 ExchangeDate = 9;
inline void ADVolumeByPrice::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t ADVolumeByPrice::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t ADVolumeByPrice::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.ExchangeDate)
  return _internal_exchangedate();
}
inline void ADVolumeByPrice::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void ADVolumeByPrice::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.ExchangeDate)
}

// int32 ExchangeTime = 10;
inline void ADVolumeByPrice::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t ADVolumeByPrice::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t ADVolumeByPrice::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.ExchangeTime)
  return _internal_exchangetime();
}
inline void ADVolumeByPrice::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void ADVolumeByPrice::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.ExchangeTime)
}

// int32 DataMultiplePowerOf10 = 11;
inline void ADVolumeByPrice::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t ADVolumeByPrice::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t ADVolumeByPrice::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPrice.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void ADVolumeByPrice::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void ADVolumeByPrice::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPrice.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// ADVolumeByPriceDetail

// int64 TradePrice = 1;
inline void ADVolumeByPriceDetail::clear_tradeprice() {
  _impl_.tradeprice_ = int64_t{0};
}
inline int64_t ADVolumeByPriceDetail::_internal_tradeprice() const {
  return _impl_.tradeprice_;
}
inline int64_t ADVolumeByPriceDetail::tradeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.TradePrice)
  return _internal_tradeprice();
}
inline void ADVolumeByPriceDetail::_internal_set_tradeprice(int64_t value) {
  
  _impl_.tradeprice_ = value;
}
inline void ADVolumeByPriceDetail::set_tradeprice(int64_t value) {
  _internal_set_tradeprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.TradePrice)
}

// int64 TotalQty = 2;
inline void ADVolumeByPriceDetail::clear_totalqty() {
  _impl_.totalqty_ = int64_t{0};
}
inline int64_t ADVolumeByPriceDetail::_internal_totalqty() const {
  return _impl_.totalqty_;
}
inline int64_t ADVolumeByPriceDetail::totalqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.TotalQty)
  return _internal_totalqty();
}
inline void ADVolumeByPriceDetail::_internal_set_totalqty(int64_t value) {
  
  _impl_.totalqty_ = value;
}
inline void ADVolumeByPriceDetail::set_totalqty(int64_t value) {
  _internal_set_totalqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.TotalQty)
}

// int64 BuyQty = 3;
inline void ADVolumeByPriceDetail::clear_buyqty() {
  _impl_.buyqty_ = int64_t{0};
}
inline int64_t ADVolumeByPriceDetail::_internal_buyqty() const {
  return _impl_.buyqty_;
}
inline int64_t ADVolumeByPriceDetail::buyqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.BuyQty)
  return _internal_buyqty();
}
inline void ADVolumeByPriceDetail::_internal_set_buyqty(int64_t value) {
  
  _impl_.buyqty_ = value;
}
inline void ADVolumeByPriceDetail::set_buyqty(int64_t value) {
  _internal_set_buyqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.BuyQty)
}

// int64 SellQty = 4;
inline void ADVolumeByPriceDetail::clear_sellqty() {
  _impl_.sellqty_ = int64_t{0};
}
inline int64_t ADVolumeByPriceDetail::_internal_sellqty() const {
  return _impl_.sellqty_;
}
inline int64_t ADVolumeByPriceDetail::sellqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.SellQty)
  return _internal_sellqty();
}
inline void ADVolumeByPriceDetail::_internal_set_sellqty(int64_t value) {
  
  _impl_.sellqty_ = value;
}
inline void ADVolumeByPriceDetail::set_sellqty(int64_t value) {
  _internal_set_sellqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.SellQty)
}

// int64 TotalNumbers = 5;
inline void ADVolumeByPriceDetail::clear_totalnumbers() {
  _impl_.totalnumbers_ = int64_t{0};
}
inline int64_t ADVolumeByPriceDetail::_internal_totalnumbers() const {
  return _impl_.totalnumbers_;
}
inline int64_t ADVolumeByPriceDetail::totalnumbers() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.TotalNumbers)
  return _internal_totalnumbers();
}
inline void ADVolumeByPriceDetail::_internal_set_totalnumbers(int64_t value) {
  
  _impl_.totalnumbers_ = value;
}
inline void ADVolumeByPriceDetail::set_totalnumbers(int64_t value) {
  _internal_set_totalnumbers(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.TotalNumbers)
}

// int64 BuyNumbers = 6;
inline void ADVolumeByPriceDetail::clear_buynumbers() {
  _impl_.buynumbers_ = int64_t{0};
}
inline int64_t ADVolumeByPriceDetail::_internal_buynumbers() const {
  return _impl_.buynumbers_;
}
inline int64_t ADVolumeByPriceDetail::buynumbers() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.BuyNumbers)
  return _internal_buynumbers();
}
inline void ADVolumeByPriceDetail::_internal_set_buynumbers(int64_t value) {
  
  _impl_.buynumbers_ = value;
}
inline void ADVolumeByPriceDetail::set_buynumbers(int64_t value) {
  _internal_set_buynumbers(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.BuyNumbers)
}

// int64 SellNumbers = 7;
inline void ADVolumeByPriceDetail::clear_sellnumbers() {
  _impl_.sellnumbers_ = int64_t{0};
}
inline int64_t ADVolumeByPriceDetail::_internal_sellnumbers() const {
  return _impl_.sellnumbers_;
}
inline int64_t ADVolumeByPriceDetail::sellnumbers() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.SellNumbers)
  return _internal_sellnumbers();
}
inline void ADVolumeByPriceDetail::_internal_set_sellnumbers(int64_t value) {
  
  _impl_.sellnumbers_ = value;
}
inline void ADVolumeByPriceDetail::set_sellnumbers(int64_t value) {
  _internal_set_sellnumbers(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.SellNumbers)
}

// int64 VolumePerNumber = 8;
inline void ADVolumeByPriceDetail::clear_volumepernumber() {
  _impl_.volumepernumber_ = int64_t{0};
}
inline int64_t ADVolumeByPriceDetail::_internal_volumepernumber() const {
  return _impl_.volumepernumber_;
}
inline int64_t ADVolumeByPriceDetail::volumepernumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.VolumePerNumber)
  return _internal_volumepernumber();
}
inline void ADVolumeByPriceDetail::_internal_set_volumepernumber(int64_t value) {
  
  _impl_.volumepernumber_ = value;
}
inline void ADVolumeByPriceDetail::set_volumepernumber(int64_t value) {
  _internal_set_volumepernumber(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADVolumeByPriceDetail.VolumePerNumber)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ADVolumeByPrice_2eproto
