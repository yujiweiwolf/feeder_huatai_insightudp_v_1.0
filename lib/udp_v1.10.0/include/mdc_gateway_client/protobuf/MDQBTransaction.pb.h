// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQBTransaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDQBTransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDQBTransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDQBTransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDQBTransaction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDQBTransaction_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDQBTransaction;
struct MDQBTransactionDefaultTypeInternal;
extern MDQBTransactionDefaultTypeInternal _MDQBTransaction_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDQBTransaction* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQBTransaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQBTransaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDQBTransaction) */ {
 public:
  inline MDQBTransaction() : MDQBTransaction(nullptr) {}
  ~MDQBTransaction() override;
  explicit PROTOBUF_CONSTEXPR MDQBTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDQBTransaction(const MDQBTransaction& from);
  MDQBTransaction(MDQBTransaction&& from) noexcept
    : MDQBTransaction() {
    *this = ::std::move(from);
  }

  inline MDQBTransaction& operator=(const MDQBTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDQBTransaction& operator=(MDQBTransaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDQBTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDQBTransaction* internal_default_instance() {
    return reinterpret_cast<const MDQBTransaction*>(
               &_MDQBTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDQBTransaction& a, MDQBTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(MDQBTransaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDQBTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDQBTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDQBTransaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDQBTransaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDQBTransaction& from) {
    MDQBTransaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDQBTransaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDQBTransaction";
  }
  protected:
  explicit MDQBTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kTradeIDFieldNumber = 12,
    kTradeReqIDFieldNumber = 27,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kExchangeDateFieldNumber = 8,
    kExchangeTimeFieldNumber = 9,
    kApplSeqNumFieldNumber = 11,
    kChannelNoFieldNumber = 10,
    kSideFieldNumber = 13,
    kTradeQtyFieldNumber = 14,
    kStrikePriceFieldNumber = 16,
    kYieldFieldNumber = 17,
    kSettlDateFieldNumber = 15,
    kInstrmtAssignmentMethodFieldNumber = 20,
    kOriginalPriceFieldNumber = 18,
    kFullPriceFieldNumber = 19,
    kTradeStatusFieldNumber = 21,
    kTradeTypeFieldNumber = 22,
    kPriceTypeFieldNumber = 23,
    kClearSpeedFieldNumber = 24,
    kBrokerDataTypeFieldNumber = 25,
    kSSDetectFieldNumber = 26,
    kTransactTimeFieldNumber = 28,
    kDataMultiplePowerOf10FieldNumber = 29,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // string TradeID = 12;
  void clear_tradeid();
  const std::string& tradeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradeid();
  PROTOBUF_NODISCARD std::string* release_tradeid();
  void set_allocated_tradeid(std::string* tradeid);
  private:
  const std::string& _internal_tradeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradeid(const std::string& value);
  std::string* _internal_mutable_tradeid();
  public:

  // string TradeReqID = 27;
  void clear_tradereqid();
  const std::string& tradereqid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradereqid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradereqid();
  PROTOBUF_NODISCARD std::string* release_tradereqid();
  void set_allocated_tradereqid(std::string* tradereqid);
  private:
  const std::string& _internal_tradereqid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradereqid(const std::string& value);
  std::string* _internal_mutable_tradereqid();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 8;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 9;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int64 ApplSeqNum = 11;
  void clear_applseqnum();
  int64_t applseqnum() const;
  void set_applseqnum(int64_t value);
  private:
  int64_t _internal_applseqnum() const;
  void _internal_set_applseqnum(int64_t value);
  public:

  // int32 ChannelNo = 10;
  void clear_channelno();
  int32_t channelno() const;
  void set_channelno(int32_t value);
  private:
  int32_t _internal_channelno() const;
  void _internal_set_channelno(int32_t value);
  public:

  // int32 Side = 13;
  void clear_side();
  int32_t side() const;
  void set_side(int32_t value);
  private:
  int32_t _internal_side() const;
  void _internal_set_side(int32_t value);
  public:

  // int64 TradeQty = 14;
  void clear_tradeqty();
  int64_t tradeqty() const;
  void set_tradeqty(int64_t value);
  private:
  int64_t _internal_tradeqty() const;
  void _internal_set_tradeqty(int64_t value);
  public:

  // int64 StrikePrice = 16;
  void clear_strikeprice();
  int64_t strikeprice() const;
  void set_strikeprice(int64_t value);
  private:
  int64_t _internal_strikeprice() const;
  void _internal_set_strikeprice(int64_t value);
  public:

  // int64 Yield = 17;
  void clear_yield();
  int64_t yield() const;
  void set_yield(int64_t value);
  private:
  int64_t _internal_yield() const;
  void _internal_set_yield(int64_t value);
  public:

  // int32 SettlDate = 15;
  void clear_settldate();
  int32_t settldate() const;
  void set_settldate(int32_t value);
  private:
  int32_t _internal_settldate() const;
  void _internal_set_settldate(int32_t value);
  public:

  // int32 InstrmtAssignmentMethod = 20;
  void clear_instrmtassignmentmethod();
  int32_t instrmtassignmentmethod() const;
  void set_instrmtassignmentmethod(int32_t value);
  private:
  int32_t _internal_instrmtassignmentmethod() const;
  void _internal_set_instrmtassignmentmethod(int32_t value);
  public:

  // int64 OriginalPrice = 18;
  void clear_originalprice();
  int64_t originalprice() const;
  void set_originalprice(int64_t value);
  private:
  int64_t _internal_originalprice() const;
  void _internal_set_originalprice(int64_t value);
  public:

  // int64 FullPrice = 19;
  void clear_fullprice();
  int64_t fullprice() const;
  void set_fullprice(int64_t value);
  private:
  int64_t _internal_fullprice() const;
  void _internal_set_fullprice(int64_t value);
  public:

  // int32 TradeStatus = 21;
  void clear_tradestatus();
  int32_t tradestatus() const;
  void set_tradestatus(int32_t value);
  private:
  int32_t _internal_tradestatus() const;
  void _internal_set_tradestatus(int32_t value);
  public:

  // int32 TradeType = 22;
  void clear_tradetype();
  int32_t tradetype() const;
  void set_tradetype(int32_t value);
  private:
  int32_t _internal_tradetype() const;
  void _internal_set_tradetype(int32_t value);
  public:

  // int32 PriceType = 23;
  void clear_pricetype();
  int32_t pricetype() const;
  void set_pricetype(int32_t value);
  private:
  int32_t _internal_pricetype() const;
  void _internal_set_pricetype(int32_t value);
  public:

  // int32 ClearSpeed = 24;
  void clear_clearspeed();
  int32_t clearspeed() const;
  void set_clearspeed(int32_t value);
  private:
  int32_t _internal_clearspeed() const;
  void _internal_set_clearspeed(int32_t value);
  public:

  // int32 BrokerDataType = 25;
  void clear_brokerdatatype();
  int32_t brokerdatatype() const;
  void set_brokerdatatype(int32_t value);
  private:
  int32_t _internal_brokerdatatype() const;
  void _internal_set_brokerdatatype(int32_t value);
  public:

  // int32 SSDetect = 26;
  void clear_ssdetect();
  int32_t ssdetect() const;
  void set_ssdetect(int32_t value);
  private:
  int32_t _internal_ssdetect() const;
  void _internal_set_ssdetect(int32_t value);
  public:

  // int64 TransactTime = 28;
  void clear_transacttime();
  int64_t transacttime() const;
  void set_transacttime(int64_t value);
  private:
  int64_t _internal_transacttime() const;
  void _internal_set_transacttime(int64_t value);
  public:

  // int32 DataMultiplePowerOf10 = 29;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDQBTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradereqid_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int64_t applseqnum_;
    int32_t channelno_;
    int32_t side_;
    int64_t tradeqty_;
    int64_t strikeprice_;
    int64_t yield_;
    int32_t settldate_;
    int32_t instrmtassignmentmethod_;
    int64_t originalprice_;
    int64_t fullprice_;
    int32_t tradestatus_;
    int32_t tradetype_;
    int32_t pricetype_;
    int32_t clearspeed_;
    int32_t brokerdatatype_;
    int32_t ssdetect_;
    int64_t transacttime_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDQBTransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDQBTransaction

// string HTSCSecurityID = 1;
inline void MDQBTransaction::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDQBTransaction::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBTransaction::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.HTSCSecurityID)
}
inline std::string* MDQBTransaction::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBTransaction.HTSCSecurityID)
  return _s;
}
inline const std::string& MDQBTransaction::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDQBTransaction::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBTransaction::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBTransaction::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBTransaction.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDQBTransaction::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBTransaction.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDQBTransaction::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDQBTransaction::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDQBTransaction::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.MDDate)
  return _internal_mddate();
}
inline void MDQBTransaction::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDQBTransaction::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.MDDate)
}

// int32 MDTime = 3;
inline void MDQBTransaction::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDQBTransaction::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDQBTransaction::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.MDTime)
  return _internal_mdtime();
}
inline void MDQBTransaction::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDQBTransaction::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDQBTransaction::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDQBTransaction::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDQBTransaction::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDQBTransaction::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDQBTransaction::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDQBTransaction::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDQBTransaction::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBTransaction::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.TradingPhaseCode)
}
inline std::string* MDQBTransaction::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBTransaction.TradingPhaseCode)
  return _s;
}
inline const std::string& MDQBTransaction::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDQBTransaction::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBTransaction::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBTransaction::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBTransaction.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDQBTransaction::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBTransaction.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDQBTransaction::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDQBTransaction::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDQBTransaction::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.securityIDSource)
  return _internal_securityidsource();
}
inline void MDQBTransaction::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDQBTransaction::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDQBTransaction::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDQBTransaction::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDQBTransaction::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.securityType)
  return _internal_securitytype();
}
inline void MDQBTransaction::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDQBTransaction::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.securityType)
}

// int32 ExchangeDate = 8;
inline void MDQBTransaction::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDQBTransaction::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDQBTransaction::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDQBTransaction::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDQBTransaction::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.ExchangeDate)
}

// int32 ExchangeTime = 9;
inline void MDQBTransaction::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDQBTransaction::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDQBTransaction::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDQBTransaction::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDQBTransaction::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.ExchangeTime)
}

// int32 ChannelNo = 10;
inline void MDQBTransaction::clear_channelno() {
  _impl_.channelno_ = 0;
}
inline int32_t MDQBTransaction::_internal_channelno() const {
  return _impl_.channelno_;
}
inline int32_t MDQBTransaction::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.ChannelNo)
  return _internal_channelno();
}
inline void MDQBTransaction::_internal_set_channelno(int32_t value) {
  
  _impl_.channelno_ = value;
}
inline void MDQBTransaction::set_channelno(int32_t value) {
  _internal_set_channelno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.ChannelNo)
}

// int64 ApplSeqNum = 11;
inline void MDQBTransaction::clear_applseqnum() {
  _impl_.applseqnum_ = int64_t{0};
}
inline int64_t MDQBTransaction::_internal_applseqnum() const {
  return _impl_.applseqnum_;
}
inline int64_t MDQBTransaction::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.ApplSeqNum)
  return _internal_applseqnum();
}
inline void MDQBTransaction::_internal_set_applseqnum(int64_t value) {
  
  _impl_.applseqnum_ = value;
}
inline void MDQBTransaction::set_applseqnum(int64_t value) {
  _internal_set_applseqnum(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.ApplSeqNum)
}

// string TradeID = 12;
inline void MDQBTransaction::clear_tradeid() {
  _impl_.tradeid_.ClearToEmpty();
}
inline const std::string& MDQBTransaction::tradeid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.TradeID)
  return _internal_tradeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBTransaction::set_tradeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.TradeID)
}
inline std::string* MDQBTransaction::mutable_tradeid() {
  std::string* _s = _internal_mutable_tradeid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBTransaction.TradeID)
  return _s;
}
inline const std::string& MDQBTransaction::_internal_tradeid() const {
  return _impl_.tradeid_.Get();
}
inline void MDQBTransaction::_internal_set_tradeid(const std::string& value) {
  
  _impl_.tradeid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBTransaction::_internal_mutable_tradeid() {
  
  return _impl_.tradeid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBTransaction::release_tradeid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBTransaction.TradeID)
  return _impl_.tradeid_.Release();
}
inline void MDQBTransaction::set_allocated_tradeid(std::string* tradeid) {
  if (tradeid != nullptr) {
    
  } else {
    
  }
  _impl_.tradeid_.SetAllocated(tradeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradeid_.IsDefault()) {
    _impl_.tradeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBTransaction.TradeID)
}

// int32 Side = 13;
inline void MDQBTransaction::clear_side() {
  _impl_.side_ = 0;
}
inline int32_t MDQBTransaction::_internal_side() const {
  return _impl_.side_;
}
inline int32_t MDQBTransaction::side() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.Side)
  return _internal_side();
}
inline void MDQBTransaction::_internal_set_side(int32_t value) {
  
  _impl_.side_ = value;
}
inline void MDQBTransaction::set_side(int32_t value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.Side)
}

// int64 TradeQty = 14;
inline void MDQBTransaction::clear_tradeqty() {
  _impl_.tradeqty_ = int64_t{0};
}
inline int64_t MDQBTransaction::_internal_tradeqty() const {
  return _impl_.tradeqty_;
}
inline int64_t MDQBTransaction::tradeqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.TradeQty)
  return _internal_tradeqty();
}
inline void MDQBTransaction::_internal_set_tradeqty(int64_t value) {
  
  _impl_.tradeqty_ = value;
}
inline void MDQBTransaction::set_tradeqty(int64_t value) {
  _internal_set_tradeqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.TradeQty)
}

// int32 SettlDate = 15;
inline void MDQBTransaction::clear_settldate() {
  _impl_.settldate_ = 0;
}
inline int32_t MDQBTransaction::_internal_settldate() const {
  return _impl_.settldate_;
}
inline int32_t MDQBTransaction::settldate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.SettlDate)
  return _internal_settldate();
}
inline void MDQBTransaction::_internal_set_settldate(int32_t value) {
  
  _impl_.settldate_ = value;
}
inline void MDQBTransaction::set_settldate(int32_t value) {
  _internal_set_settldate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.SettlDate)
}

// int64 StrikePrice = 16;
inline void MDQBTransaction::clear_strikeprice() {
  _impl_.strikeprice_ = int64_t{0};
}
inline int64_t MDQBTransaction::_internal_strikeprice() const {
  return _impl_.strikeprice_;
}
inline int64_t MDQBTransaction::strikeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.StrikePrice)
  return _internal_strikeprice();
}
inline void MDQBTransaction::_internal_set_strikeprice(int64_t value) {
  
  _impl_.strikeprice_ = value;
}
inline void MDQBTransaction::set_strikeprice(int64_t value) {
  _internal_set_strikeprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.StrikePrice)
}

// int64 Yield = 17;
inline void MDQBTransaction::clear_yield() {
  _impl_.yield_ = int64_t{0};
}
inline int64_t MDQBTransaction::_internal_yield() const {
  return _impl_.yield_;
}
inline int64_t MDQBTransaction::yield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.Yield)
  return _internal_yield();
}
inline void MDQBTransaction::_internal_set_yield(int64_t value) {
  
  _impl_.yield_ = value;
}
inline void MDQBTransaction::set_yield(int64_t value) {
  _internal_set_yield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.Yield)
}

// int64 OriginalPrice = 18;
inline void MDQBTransaction::clear_originalprice() {
  _impl_.originalprice_ = int64_t{0};
}
inline int64_t MDQBTransaction::_internal_originalprice() const {
  return _impl_.originalprice_;
}
inline int64_t MDQBTransaction::originalprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.OriginalPrice)
  return _internal_originalprice();
}
inline void MDQBTransaction::_internal_set_originalprice(int64_t value) {
  
  _impl_.originalprice_ = value;
}
inline void MDQBTransaction::set_originalprice(int64_t value) {
  _internal_set_originalprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.OriginalPrice)
}

// int64 FullPrice = 19;
inline void MDQBTransaction::clear_fullprice() {
  _impl_.fullprice_ = int64_t{0};
}
inline int64_t MDQBTransaction::_internal_fullprice() const {
  return _impl_.fullprice_;
}
inline int64_t MDQBTransaction::fullprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.FullPrice)
  return _internal_fullprice();
}
inline void MDQBTransaction::_internal_set_fullprice(int64_t value) {
  
  _impl_.fullprice_ = value;
}
inline void MDQBTransaction::set_fullprice(int64_t value) {
  _internal_set_fullprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.FullPrice)
}

// int32 InstrmtAssignmentMethod = 20;
inline void MDQBTransaction::clear_instrmtassignmentmethod() {
  _impl_.instrmtassignmentmethod_ = 0;
}
inline int32_t MDQBTransaction::_internal_instrmtassignmentmethod() const {
  return _impl_.instrmtassignmentmethod_;
}
inline int32_t MDQBTransaction::instrmtassignmentmethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.InstrmtAssignmentMethod)
  return _internal_instrmtassignmentmethod();
}
inline void MDQBTransaction::_internal_set_instrmtassignmentmethod(int32_t value) {
  
  _impl_.instrmtassignmentmethod_ = value;
}
inline void MDQBTransaction::set_instrmtassignmentmethod(int32_t value) {
  _internal_set_instrmtassignmentmethod(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.InstrmtAssignmentMethod)
}

// int32 TradeStatus = 21;
inline void MDQBTransaction::clear_tradestatus() {
  _impl_.tradestatus_ = 0;
}
inline int32_t MDQBTransaction::_internal_tradestatus() const {
  return _impl_.tradestatus_;
}
inline int32_t MDQBTransaction::tradestatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.TradeStatus)
  return _internal_tradestatus();
}
inline void MDQBTransaction::_internal_set_tradestatus(int32_t value) {
  
  _impl_.tradestatus_ = value;
}
inline void MDQBTransaction::set_tradestatus(int32_t value) {
  _internal_set_tradestatus(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.TradeStatus)
}

// int32 TradeType = 22;
inline void MDQBTransaction::clear_tradetype() {
  _impl_.tradetype_ = 0;
}
inline int32_t MDQBTransaction::_internal_tradetype() const {
  return _impl_.tradetype_;
}
inline int32_t MDQBTransaction::tradetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.TradeType)
  return _internal_tradetype();
}
inline void MDQBTransaction::_internal_set_tradetype(int32_t value) {
  
  _impl_.tradetype_ = value;
}
inline void MDQBTransaction::set_tradetype(int32_t value) {
  _internal_set_tradetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.TradeType)
}

// int32 PriceType = 23;
inline void MDQBTransaction::clear_pricetype() {
  _impl_.pricetype_ = 0;
}
inline int32_t MDQBTransaction::_internal_pricetype() const {
  return _impl_.pricetype_;
}
inline int32_t MDQBTransaction::pricetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.PriceType)
  return _internal_pricetype();
}
inline void MDQBTransaction::_internal_set_pricetype(int32_t value) {
  
  _impl_.pricetype_ = value;
}
inline void MDQBTransaction::set_pricetype(int32_t value) {
  _internal_set_pricetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.PriceType)
}

// int32 ClearSpeed = 24;
inline void MDQBTransaction::clear_clearspeed() {
  _impl_.clearspeed_ = 0;
}
inline int32_t MDQBTransaction::_internal_clearspeed() const {
  return _impl_.clearspeed_;
}
inline int32_t MDQBTransaction::clearspeed() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.ClearSpeed)
  return _internal_clearspeed();
}
inline void MDQBTransaction::_internal_set_clearspeed(int32_t value) {
  
  _impl_.clearspeed_ = value;
}
inline void MDQBTransaction::set_clearspeed(int32_t value) {
  _internal_set_clearspeed(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.ClearSpeed)
}

// int32 BrokerDataType = 25;
inline void MDQBTransaction::clear_brokerdatatype() {
  _impl_.brokerdatatype_ = 0;
}
inline int32_t MDQBTransaction::_internal_brokerdatatype() const {
  return _impl_.brokerdatatype_;
}
inline int32_t MDQBTransaction::brokerdatatype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.BrokerDataType)
  return _internal_brokerdatatype();
}
inline void MDQBTransaction::_internal_set_brokerdatatype(int32_t value) {
  
  _impl_.brokerdatatype_ = value;
}
inline void MDQBTransaction::set_brokerdatatype(int32_t value) {
  _internal_set_brokerdatatype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.BrokerDataType)
}

// int32 SSDetect = 26;
inline void MDQBTransaction::clear_ssdetect() {
  _impl_.ssdetect_ = 0;
}
inline int32_t MDQBTransaction::_internal_ssdetect() const {
  return _impl_.ssdetect_;
}
inline int32_t MDQBTransaction::ssdetect() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.SSDetect)
  return _internal_ssdetect();
}
inline void MDQBTransaction::_internal_set_ssdetect(int32_t value) {
  
  _impl_.ssdetect_ = value;
}
inline void MDQBTransaction::set_ssdetect(int32_t value) {
  _internal_set_ssdetect(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.SSDetect)
}

// string TradeReqID = 27;
inline void MDQBTransaction::clear_tradereqid() {
  _impl_.tradereqid_.ClearToEmpty();
}
inline const std::string& MDQBTransaction::tradereqid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.TradeReqID)
  return _internal_tradereqid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQBTransaction::set_tradereqid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradereqid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.TradeReqID)
}
inline std::string* MDQBTransaction::mutable_tradereqid() {
  std::string* _s = _internal_mutable_tradereqid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQBTransaction.TradeReqID)
  return _s;
}
inline const std::string& MDQBTransaction::_internal_tradereqid() const {
  return _impl_.tradereqid_.Get();
}
inline void MDQBTransaction::_internal_set_tradereqid(const std::string& value) {
  
  _impl_.tradereqid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQBTransaction::_internal_mutable_tradereqid() {
  
  return _impl_.tradereqid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQBTransaction::release_tradereqid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQBTransaction.TradeReqID)
  return _impl_.tradereqid_.Release();
}
inline void MDQBTransaction::set_allocated_tradereqid(std::string* tradereqid) {
  if (tradereqid != nullptr) {
    
  } else {
    
  }
  _impl_.tradereqid_.SetAllocated(tradereqid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradereqid_.IsDefault()) {
    _impl_.tradereqid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQBTransaction.TradeReqID)
}

// int64 TransactTime = 28;
inline void MDQBTransaction::clear_transacttime() {
  _impl_.transacttime_ = int64_t{0};
}
inline int64_t MDQBTransaction::_internal_transacttime() const {
  return _impl_.transacttime_;
}
inline int64_t MDQBTransaction::transacttime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.TransactTime)
  return _internal_transacttime();
}
inline void MDQBTransaction::_internal_set_transacttime(int64_t value) {
  
  _impl_.transacttime_ = value;
}
inline void MDQBTransaction::set_transacttime(int64_t value) {
  _internal_set_transacttime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.TransactTime)
}

// int32 DataMultiplePowerOf10 = 29;
inline void MDQBTransaction::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDQBTransaction::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDQBTransaction::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQBTransaction.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDQBTransaction::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDQBTransaction::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQBTransaction.DataMultiplePowerOf10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDQBTransaction_2eproto
