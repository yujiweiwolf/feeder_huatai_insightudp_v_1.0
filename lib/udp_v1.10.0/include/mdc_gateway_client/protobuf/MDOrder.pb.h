// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDOrder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDOrder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDOrder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDOrder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDOrder_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDOrder_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDOrder;
struct MDOrderDefaultTypeInternal;
extern MDOrderDefaultTypeInternal _MDOrder_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDOrder* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDOrder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDOrder) */ {
 public:
  inline MDOrder() : MDOrder(nullptr) {}
  ~MDOrder() override;
  explicit PROTOBUF_CONSTEXPR MDOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDOrder(const MDOrder& from);
  MDOrder(MDOrder&& from) noexcept
    : MDOrder() {
    *this = ::std::move(from);
  }

  inline MDOrder& operator=(const MDOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDOrder& operator=(MDOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDOrder* internal_default_instance() {
    return reinterpret_cast<const MDOrder*>(
               &_MDOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDOrder& a, MDOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(MDOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDOrder& from) {
    MDOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDOrder";
  }
  protected:
  explicit MDOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHTSCSecurityIDFieldNumber = 1,
    kSecurityStatusFieldNumber = 17,
    kQuoteIDFieldNumber = 18,
    kMemberIDFieldNumber = 19,
    kInvestorTypeFieldNumber = 20,
    kInvestorIDFieldNumber = 21,
    kInvestorNameFieldNumber = 22,
    kTraderCodeFieldNumber = 23,
    kMemoFieldNumber = 26,
    kSecondaryOrderIDFieldNumber = 28,
    kTradeDateFieldNumber = 34,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kOrderIndexFieldNumber = 7,
    kOrderPriceFieldNumber = 9,
    kOrderTypeFieldNumber = 8,
    kOrderBSFlagFieldNumber = 11,
    kOrderQtyFieldNumber = 10,
    kChannelNoFieldNumber = 12,
    kExchangeDateFieldNumber = 13,
    kOrderNOFieldNumber = 15,
    kApplSeqNumFieldNumber = 16,
    kExchangeTimeFieldNumber = 14,
    kSettlPeriodFieldNumber = 24,
    kSettlTypeFieldNumber = 25,
    kDataMultiplePowerOf10FieldNumber = 27,
    kBidTransTypeFieldNumber = 29,
    kBidExecInstTypeFieldNumber = 30,
    kLowLimitPriceFieldNumber = 31,
    kHighLimitPriceFieldNumber = 32,
    kMinQtyFieldNumber = 33,
  };
  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string SecurityStatus = 17;
  void clear_securitystatus();
  const std::string& securitystatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitystatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitystatus();
  PROTOBUF_NODISCARD std::string* release_securitystatus();
  void set_allocated_securitystatus(std::string* securitystatus);
  private:
  const std::string& _internal_securitystatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitystatus(const std::string& value);
  std::string* _internal_mutable_securitystatus();
  public:

  // string QuoteID = 18;
  void clear_quoteid();
  const std::string& quoteid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quoteid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quoteid();
  PROTOBUF_NODISCARD std::string* release_quoteid();
  void set_allocated_quoteid(std::string* quoteid);
  private:
  const std::string& _internal_quoteid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quoteid(const std::string& value);
  std::string* _internal_mutable_quoteid();
  public:

  // string MemberID = 19;
  void clear_memberid();
  const std::string& memberid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memberid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memberid();
  PROTOBUF_NODISCARD std::string* release_memberid();
  void set_allocated_memberid(std::string* memberid);
  private:
  const std::string& _internal_memberid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memberid(const std::string& value);
  std::string* _internal_mutable_memberid();
  public:

  // string InvestorType = 20;
  void clear_investortype();
  const std::string& investortype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investortype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investortype();
  PROTOBUF_NODISCARD std::string* release_investortype();
  void set_allocated_investortype(std::string* investortype);
  private:
  const std::string& _internal_investortype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investortype(const std::string& value);
  std::string* _internal_mutable_investortype();
  public:

  // string InvestorID = 21;
  void clear_investorid();
  const std::string& investorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investorid();
  PROTOBUF_NODISCARD std::string* release_investorid();
  void set_allocated_investorid(std::string* investorid);
  private:
  const std::string& _internal_investorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investorid(const std::string& value);
  std::string* _internal_mutable_investorid();
  public:

  // string InvestorName = 22;
  void clear_investorname();
  const std::string& investorname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investorname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investorname();
  PROTOBUF_NODISCARD std::string* release_investorname();
  void set_allocated_investorname(std::string* investorname);
  private:
  const std::string& _internal_investorname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investorname(const std::string& value);
  std::string* _internal_mutable_investorname();
  public:

  // string TraderCode = 23;
  void clear_tradercode();
  const std::string& tradercode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradercode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradercode();
  PROTOBUF_NODISCARD std::string* release_tradercode();
  void set_allocated_tradercode(std::string* tradercode);
  private:
  const std::string& _internal_tradercode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradercode(const std::string& value);
  std::string* _internal_mutable_tradercode();
  public:

  // string Memo = 26;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // string SecondaryOrderID = 28;
  void clear_secondaryorderid();
  const std::string& secondaryorderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondaryorderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondaryorderid();
  PROTOBUF_NODISCARD std::string* release_secondaryorderid();
  void set_allocated_secondaryorderid(std::string* secondaryorderid);
  private:
  const std::string& _internal_secondaryorderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondaryorderid(const std::string& value);
  std::string* _internal_mutable_secondaryorderid();
  public:

  // string TradeDate = 34;
  void clear_tradedate();
  const std::string& tradedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradedate();
  PROTOBUF_NODISCARD std::string* release_tradedate();
  void set_allocated_tradedate(std::string* tradedate);
  private:
  const std::string& _internal_tradedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradedate(const std::string& value);
  std::string* _internal_mutable_tradedate();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int64 OrderIndex = 7;
  void clear_orderindex();
  int64_t orderindex() const;
  void set_orderindex(int64_t value);
  private:
  int64_t _internal_orderindex() const;
  void _internal_set_orderindex(int64_t value);
  public:

  // int64 OrderPrice = 9;
  void clear_orderprice();
  int64_t orderprice() const;
  void set_orderprice(int64_t value);
  private:
  int64_t _internal_orderprice() const;
  void _internal_set_orderprice(int64_t value);
  public:

  // int32 OrderType = 8;
  void clear_ordertype();
  int32_t ordertype() const;
  void set_ordertype(int32_t value);
  private:
  int32_t _internal_ordertype() const;
  void _internal_set_ordertype(int32_t value);
  public:

  // int32 OrderBSFlag = 11;
  void clear_orderbsflag();
  int32_t orderbsflag() const;
  void set_orderbsflag(int32_t value);
  private:
  int32_t _internal_orderbsflag() const;
  void _internal_set_orderbsflag(int32_t value);
  public:

  // int64 OrderQty = 10;
  void clear_orderqty();
  int64_t orderqty() const;
  void set_orderqty(int64_t value);
  private:
  int64_t _internal_orderqty() const;
  void _internal_set_orderqty(int64_t value);
  public:

  // int32 ChannelNo = 12;
  void clear_channelno();
  int32_t channelno() const;
  void set_channelno(int32_t value);
  private:
  int32_t _internal_channelno() const;
  void _internal_set_channelno(int32_t value);
  public:

  // int32 ExchangeDate = 13;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int64 OrderNO = 15;
  void clear_orderno();
  int64_t orderno() const;
  void set_orderno(int64_t value);
  private:
  int64_t _internal_orderno() const;
  void _internal_set_orderno(int64_t value);
  public:

  // int64 ApplSeqNum = 16;
  void clear_applseqnum();
  int64_t applseqnum() const;
  void set_applseqnum(int64_t value);
  private:
  int64_t _internal_applseqnum() const;
  void _internal_set_applseqnum(int64_t value);
  public:

  // int32 ExchangeTime = 14;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int32 SettlPeriod = 24;
  void clear_settlperiod();
  int32_t settlperiod() const;
  void set_settlperiod(int32_t value);
  private:
  int32_t _internal_settlperiod() const;
  void _internal_set_settlperiod(int32_t value);
  public:

  // int32 SettlType = 25;
  void clear_settltype();
  int32_t settltype() const;
  void set_settltype(int32_t value);
  private:
  int32_t _internal_settltype() const;
  void _internal_set_settltype(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 27;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // int32 BidTransType = 29;
  void clear_bidtranstype();
  int32_t bidtranstype() const;
  void set_bidtranstype(int32_t value);
  private:
  int32_t _internal_bidtranstype() const;
  void _internal_set_bidtranstype(int32_t value);
  public:

  // int32 BidExecInstType = 30;
  void clear_bidexecinsttype();
  int32_t bidexecinsttype() const;
  void set_bidexecinsttype(int32_t value);
  private:
  int32_t _internal_bidexecinsttype() const;
  void _internal_set_bidexecinsttype(int32_t value);
  public:

  // int64 LowLimitPrice = 31;
  void clear_lowlimitprice();
  int64_t lowlimitprice() const;
  void set_lowlimitprice(int64_t value);
  private:
  int64_t _internal_lowlimitprice() const;
  void _internal_set_lowlimitprice(int64_t value);
  public:

  // int64 HighLimitPrice = 32;
  void clear_highlimitprice();
  int64_t highlimitprice() const;
  void set_highlimitprice(int64_t value);
  private:
  int64_t _internal_highlimitprice() const;
  void _internal_set_highlimitprice(int64_t value);
  public:

  // int64 MinQty = 33;
  void clear_minqty();
  int64_t minqty() const;
  void set_minqty(int64_t value);
  private:
  int64_t _internal_minqty() const;
  void _internal_set_minqty(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitystatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoteid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memberid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investortype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investorid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investorname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradercode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondaryorderid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradedate_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int64_t orderindex_;
    int64_t orderprice_;
    int32_t ordertype_;
    int32_t orderbsflag_;
    int64_t orderqty_;
    int32_t channelno_;
    int32_t exchangedate_;
    int64_t orderno_;
    int64_t applseqnum_;
    int32_t exchangetime_;
    int32_t settlperiod_;
    int32_t settltype_;
    int32_t datamultiplepowerof10_;
    int32_t bidtranstype_;
    int32_t bidexecinsttype_;
    int64_t lowlimitprice_;
    int64_t highlimitprice_;
    int64_t minqty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDOrder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDOrder

// string HTSCSecurityID = 1;
inline void MDOrder::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDOrder::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
}
inline std::string* MDOrder::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
  return _s;
}
inline const std::string& MDOrder::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDOrder::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDOrder::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDOrder::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDOrder::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDOrder::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.MDDate)
  return _internal_mddate();
}
inline void MDOrder::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDOrder::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.MDDate)
}

// int32 MDTime = 3;
inline void MDOrder::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDOrder::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDOrder::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.MDTime)
  return _internal_mdtime();
}
inline void MDOrder::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDOrder::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDOrder::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDOrder::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDOrder::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDOrder::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDOrder::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.DataTimestamp)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void MDOrder::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDOrder::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDOrder::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.securityIDSource)
  return _internal_securityidsource();
}
inline void MDOrder::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDOrder::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void MDOrder::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDOrder::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDOrder::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.securityType)
  return _internal_securitytype();
}
inline void MDOrder::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDOrder::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.securityType)
}

// int64 OrderIndex = 7;
inline void MDOrder::clear_orderindex() {
  _impl_.orderindex_ = int64_t{0};
}
inline int64_t MDOrder::_internal_orderindex() const {
  return _impl_.orderindex_;
}
inline int64_t MDOrder::orderindex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderIndex)
  return _internal_orderindex();
}
inline void MDOrder::_internal_set_orderindex(int64_t value) {
  
  _impl_.orderindex_ = value;
}
inline void MDOrder::set_orderindex(int64_t value) {
  _internal_set_orderindex(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderIndex)
}

// int32 OrderType = 8;
inline void MDOrder::clear_ordertype() {
  _impl_.ordertype_ = 0;
}
inline int32_t MDOrder::_internal_ordertype() const {
  return _impl_.ordertype_;
}
inline int32_t MDOrder::ordertype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderType)
  return _internal_ordertype();
}
inline void MDOrder::_internal_set_ordertype(int32_t value) {
  
  _impl_.ordertype_ = value;
}
inline void MDOrder::set_ordertype(int32_t value) {
  _internal_set_ordertype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderType)
}

// int64 OrderPrice = 9;
inline void MDOrder::clear_orderprice() {
  _impl_.orderprice_ = int64_t{0};
}
inline int64_t MDOrder::_internal_orderprice() const {
  return _impl_.orderprice_;
}
inline int64_t MDOrder::orderprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderPrice)
  return _internal_orderprice();
}
inline void MDOrder::_internal_set_orderprice(int64_t value) {
  
  _impl_.orderprice_ = value;
}
inline void MDOrder::set_orderprice(int64_t value) {
  _internal_set_orderprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderPrice)
}

// int64 OrderQty = 10;
inline void MDOrder::clear_orderqty() {
  _impl_.orderqty_ = int64_t{0};
}
inline int64_t MDOrder::_internal_orderqty() const {
  return _impl_.orderqty_;
}
inline int64_t MDOrder::orderqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderQty)
  return _internal_orderqty();
}
inline void MDOrder::_internal_set_orderqty(int64_t value) {
  
  _impl_.orderqty_ = value;
}
inline void MDOrder::set_orderqty(int64_t value) {
  _internal_set_orderqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderQty)
}

// int32 OrderBSFlag = 11;
inline void MDOrder::clear_orderbsflag() {
  _impl_.orderbsflag_ = 0;
}
inline int32_t MDOrder::_internal_orderbsflag() const {
  return _impl_.orderbsflag_;
}
inline int32_t MDOrder::orderbsflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderBSFlag)
  return _internal_orderbsflag();
}
inline void MDOrder::_internal_set_orderbsflag(int32_t value) {
  
  _impl_.orderbsflag_ = value;
}
inline void MDOrder::set_orderbsflag(int32_t value) {
  _internal_set_orderbsflag(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderBSFlag)
}

// int32 ChannelNo = 12;
inline void MDOrder::clear_channelno() {
  _impl_.channelno_ = 0;
}
inline int32_t MDOrder::_internal_channelno() const {
  return _impl_.channelno_;
}
inline int32_t MDOrder::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.ChannelNo)
  return _internal_channelno();
}
inline void MDOrder::_internal_set_channelno(int32_t value) {
  
  _impl_.channelno_ = value;
}
inline void MDOrder::set_channelno(int32_t value) {
  _internal_set_channelno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.ChannelNo)
}

// int32 ExchangeDate = 13;
inline void MDOrder::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDOrder::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDOrder::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDOrder::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDOrder::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.ExchangeDate)
}

// int32 ExchangeTime = 14;
inline void MDOrder::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDOrder::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDOrder::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDOrder::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDOrder::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.ExchangeTime)
}

// int64 OrderNO = 15;
inline void MDOrder::clear_orderno() {
  _impl_.orderno_ = int64_t{0};
}
inline int64_t MDOrder::_internal_orderno() const {
  return _impl_.orderno_;
}
inline int64_t MDOrder::orderno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.OrderNO)
  return _internal_orderno();
}
inline void MDOrder::_internal_set_orderno(int64_t value) {
  
  _impl_.orderno_ = value;
}
inline void MDOrder::set_orderno(int64_t value) {
  _internal_set_orderno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.OrderNO)
}

// int64 ApplSeqNum = 16;
inline void MDOrder::clear_applseqnum() {
  _impl_.applseqnum_ = int64_t{0};
}
inline int64_t MDOrder::_internal_applseqnum() const {
  return _impl_.applseqnum_;
}
inline int64_t MDOrder::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.ApplSeqNum)
  return _internal_applseqnum();
}
inline void MDOrder::_internal_set_applseqnum(int64_t value) {
  
  _impl_.applseqnum_ = value;
}
inline void MDOrder::set_applseqnum(int64_t value) {
  _internal_set_applseqnum(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.ApplSeqNum)
}

// string SecurityStatus = 17;
inline void MDOrder::clear_securitystatus() {
  _impl_.securitystatus_.ClearToEmpty();
}
inline const std::string& MDOrder::securitystatus() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
  return _internal_securitystatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_securitystatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.securitystatus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
}
inline std::string* MDOrder::mutable_securitystatus() {
  std::string* _s = _internal_mutable_securitystatus();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
  return _s;
}
inline const std::string& MDOrder::_internal_securitystatus() const {
  return _impl_.securitystatus_.Get();
}
inline void MDOrder::_internal_set_securitystatus(const std::string& value) {
  
  _impl_.securitystatus_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_securitystatus() {
  
  return _impl_.securitystatus_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_securitystatus() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
  return _impl_.securitystatus_.Release();
}
inline void MDOrder::set_allocated_securitystatus(std::string* securitystatus) {
  if (securitystatus != nullptr) {
    
  } else {
    
  }
  _impl_.securitystatus_.SetAllocated(securitystatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.securitystatus_.IsDefault()) {
    _impl_.securitystatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.SecurityStatus)
}

// string QuoteID = 18;
inline void MDOrder::clear_quoteid() {
  _impl_.quoteid_.ClearToEmpty();
}
inline const std::string& MDOrder::quoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.QuoteID)
  return _internal_quoteid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_quoteid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quoteid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.QuoteID)
}
inline std::string* MDOrder::mutable_quoteid() {
  std::string* _s = _internal_mutable_quoteid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.QuoteID)
  return _s;
}
inline const std::string& MDOrder::_internal_quoteid() const {
  return _impl_.quoteid_.Get();
}
inline void MDOrder::_internal_set_quoteid(const std::string& value) {
  
  _impl_.quoteid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_quoteid() {
  
  return _impl_.quoteid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_quoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.QuoteID)
  return _impl_.quoteid_.Release();
}
inline void MDOrder::set_allocated_quoteid(std::string* quoteid) {
  if (quoteid != nullptr) {
    
  } else {
    
  }
  _impl_.quoteid_.SetAllocated(quoteid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quoteid_.IsDefault()) {
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.QuoteID)
}

// string MemberID = 19;
inline void MDOrder::clear_memberid() {
  _impl_.memberid_.ClearToEmpty();
}
inline const std::string& MDOrder::memberid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.MemberID)
  return _internal_memberid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_memberid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memberid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.MemberID)
}
inline std::string* MDOrder::mutable_memberid() {
  std::string* _s = _internal_mutable_memberid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.MemberID)
  return _s;
}
inline const std::string& MDOrder::_internal_memberid() const {
  return _impl_.memberid_.Get();
}
inline void MDOrder::_internal_set_memberid(const std::string& value) {
  
  _impl_.memberid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_memberid() {
  
  return _impl_.memberid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_memberid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.MemberID)
  return _impl_.memberid_.Release();
}
inline void MDOrder::set_allocated_memberid(std::string* memberid) {
  if (memberid != nullptr) {
    
  } else {
    
  }
  _impl_.memberid_.SetAllocated(memberid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memberid_.IsDefault()) {
    _impl_.memberid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.MemberID)
}

// string InvestorType = 20;
inline void MDOrder::clear_investortype() {
  _impl_.investortype_.ClearToEmpty();
}
inline const std::string& MDOrder::investortype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.InvestorType)
  return _internal_investortype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_investortype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.investortype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.InvestorType)
}
inline std::string* MDOrder::mutable_investortype() {
  std::string* _s = _internal_mutable_investortype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.InvestorType)
  return _s;
}
inline const std::string& MDOrder::_internal_investortype() const {
  return _impl_.investortype_.Get();
}
inline void MDOrder::_internal_set_investortype(const std::string& value) {
  
  _impl_.investortype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_investortype() {
  
  return _impl_.investortype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_investortype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.InvestorType)
  return _impl_.investortype_.Release();
}
inline void MDOrder::set_allocated_investortype(std::string* investortype) {
  if (investortype != nullptr) {
    
  } else {
    
  }
  _impl_.investortype_.SetAllocated(investortype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.investortype_.IsDefault()) {
    _impl_.investortype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.InvestorType)
}

// string InvestorID = 21;
inline void MDOrder::clear_investorid() {
  _impl_.investorid_.ClearToEmpty();
}
inline const std::string& MDOrder::investorid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.InvestorID)
  return _internal_investorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_investorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.investorid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.InvestorID)
}
inline std::string* MDOrder::mutable_investorid() {
  std::string* _s = _internal_mutable_investorid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.InvestorID)
  return _s;
}
inline const std::string& MDOrder::_internal_investorid() const {
  return _impl_.investorid_.Get();
}
inline void MDOrder::_internal_set_investorid(const std::string& value) {
  
  _impl_.investorid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_investorid() {
  
  return _impl_.investorid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_investorid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.InvestorID)
  return _impl_.investorid_.Release();
}
inline void MDOrder::set_allocated_investorid(std::string* investorid) {
  if (investorid != nullptr) {
    
  } else {
    
  }
  _impl_.investorid_.SetAllocated(investorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.investorid_.IsDefault()) {
    _impl_.investorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.InvestorID)
}

// string InvestorName = 22;
inline void MDOrder::clear_investorname() {
  _impl_.investorname_.ClearToEmpty();
}
inline const std::string& MDOrder::investorname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.InvestorName)
  return _internal_investorname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_investorname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.investorname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.InvestorName)
}
inline std::string* MDOrder::mutable_investorname() {
  std::string* _s = _internal_mutable_investorname();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.InvestorName)
  return _s;
}
inline const std::string& MDOrder::_internal_investorname() const {
  return _impl_.investorname_.Get();
}
inline void MDOrder::_internal_set_investorname(const std::string& value) {
  
  _impl_.investorname_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_investorname() {
  
  return _impl_.investorname_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_investorname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.InvestorName)
  return _impl_.investorname_.Release();
}
inline void MDOrder::set_allocated_investorname(std::string* investorname) {
  if (investorname != nullptr) {
    
  } else {
    
  }
  _impl_.investorname_.SetAllocated(investorname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.investorname_.IsDefault()) {
    _impl_.investorname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.InvestorName)
}

// string TraderCode = 23;
inline void MDOrder::clear_tradercode() {
  _impl_.tradercode_.ClearToEmpty();
}
inline const std::string& MDOrder::tradercode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.TraderCode)
  return _internal_tradercode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_tradercode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradercode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.TraderCode)
}
inline std::string* MDOrder::mutable_tradercode() {
  std::string* _s = _internal_mutable_tradercode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.TraderCode)
  return _s;
}
inline const std::string& MDOrder::_internal_tradercode() const {
  return _impl_.tradercode_.Get();
}
inline void MDOrder::_internal_set_tradercode(const std::string& value) {
  
  _impl_.tradercode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_tradercode() {
  
  return _impl_.tradercode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_tradercode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.TraderCode)
  return _impl_.tradercode_.Release();
}
inline void MDOrder::set_allocated_tradercode(std::string* tradercode) {
  if (tradercode != nullptr) {
    
  } else {
    
  }
  _impl_.tradercode_.SetAllocated(tradercode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradercode_.IsDefault()) {
    _impl_.tradercode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.TraderCode)
}

// int32 SettlPeriod = 24;
inline void MDOrder::clear_settlperiod() {
  _impl_.settlperiod_ = 0;
}
inline int32_t MDOrder::_internal_settlperiod() const {
  return _impl_.settlperiod_;
}
inline int32_t MDOrder::settlperiod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.SettlPeriod)
  return _internal_settlperiod();
}
inline void MDOrder::_internal_set_settlperiod(int32_t value) {
  
  _impl_.settlperiod_ = value;
}
inline void MDOrder::set_settlperiod(int32_t value) {
  _internal_set_settlperiod(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.SettlPeriod)
}

// int32 SettlType = 25;
inline void MDOrder::clear_settltype() {
  _impl_.settltype_ = 0;
}
inline int32_t MDOrder::_internal_settltype() const {
  return _impl_.settltype_;
}
inline int32_t MDOrder::settltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.SettlType)
  return _internal_settltype();
}
inline void MDOrder::_internal_set_settltype(int32_t value) {
  
  _impl_.settltype_ = value;
}
inline void MDOrder::set_settltype(int32_t value) {
  _internal_set_settltype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.SettlType)
}

// string Memo = 26;
inline void MDOrder::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& MDOrder::memo() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.Memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.Memo)
}
inline std::string* MDOrder::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.Memo)
  return _s;
}
inline const std::string& MDOrder::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void MDOrder::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_memo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.Memo)
  return _impl_.memo_.Release();
}
inline void MDOrder::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.Memo)
}

// int32 DataMultiplePowerOf10 = 27;
inline void MDOrder::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDOrder::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDOrder::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDOrder::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDOrder::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.DataMultiplePowerOf10)
}

// string SecondaryOrderID = 28;
inline void MDOrder::clear_secondaryorderid() {
  _impl_.secondaryorderid_.ClearToEmpty();
}
inline const std::string& MDOrder::secondaryorderid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
  return _internal_secondaryorderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_secondaryorderid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondaryorderid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
}
inline std::string* MDOrder::mutable_secondaryorderid() {
  std::string* _s = _internal_mutable_secondaryorderid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
  return _s;
}
inline const std::string& MDOrder::_internal_secondaryorderid() const {
  return _impl_.secondaryorderid_.Get();
}
inline void MDOrder::_internal_set_secondaryorderid(const std::string& value) {
  
  _impl_.secondaryorderid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_secondaryorderid() {
  
  return _impl_.secondaryorderid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_secondaryorderid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
  return _impl_.secondaryorderid_.Release();
}
inline void MDOrder::set_allocated_secondaryorderid(std::string* secondaryorderid) {
  if (secondaryorderid != nullptr) {
    
  } else {
    
  }
  _impl_.secondaryorderid_.SetAllocated(secondaryorderid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondaryorderid_.IsDefault()) {
    _impl_.secondaryorderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.SecondaryOrderID)
}

// int32 BidTransType = 29;
inline void MDOrder::clear_bidtranstype() {
  _impl_.bidtranstype_ = 0;
}
inline int32_t MDOrder::_internal_bidtranstype() const {
  return _impl_.bidtranstype_;
}
inline int32_t MDOrder::bidtranstype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.BidTransType)
  return _internal_bidtranstype();
}
inline void MDOrder::_internal_set_bidtranstype(int32_t value) {
  
  _impl_.bidtranstype_ = value;
}
inline void MDOrder::set_bidtranstype(int32_t value) {
  _internal_set_bidtranstype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.BidTransType)
}

// int32 BidExecInstType = 30;
inline void MDOrder::clear_bidexecinsttype() {
  _impl_.bidexecinsttype_ = 0;
}
inline int32_t MDOrder::_internal_bidexecinsttype() const {
  return _impl_.bidexecinsttype_;
}
inline int32_t MDOrder::bidexecinsttype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.BidExecInstType)
  return _internal_bidexecinsttype();
}
inline void MDOrder::_internal_set_bidexecinsttype(int32_t value) {
  
  _impl_.bidexecinsttype_ = value;
}
inline void MDOrder::set_bidexecinsttype(int32_t value) {
  _internal_set_bidexecinsttype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.BidExecInstType)
}

// int64 LowLimitPrice = 31;
inline void MDOrder::clear_lowlimitprice() {
  _impl_.lowlimitprice_ = int64_t{0};
}
inline int64_t MDOrder::_internal_lowlimitprice() const {
  return _impl_.lowlimitprice_;
}
inline int64_t MDOrder::lowlimitprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.LowLimitPrice)
  return _internal_lowlimitprice();
}
inline void MDOrder::_internal_set_lowlimitprice(int64_t value) {
  
  _impl_.lowlimitprice_ = value;
}
inline void MDOrder::set_lowlimitprice(int64_t value) {
  _internal_set_lowlimitprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.LowLimitPrice)
}

// int64 HighLimitPrice = 32;
inline void MDOrder::clear_highlimitprice() {
  _impl_.highlimitprice_ = int64_t{0};
}
inline int64_t MDOrder::_internal_highlimitprice() const {
  return _impl_.highlimitprice_;
}
inline int64_t MDOrder::highlimitprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.HighLimitPrice)
  return _internal_highlimitprice();
}
inline void MDOrder::_internal_set_highlimitprice(int64_t value) {
  
  _impl_.highlimitprice_ = value;
}
inline void MDOrder::set_highlimitprice(int64_t value) {
  _internal_set_highlimitprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.HighLimitPrice)
}

// int64 MinQty = 33;
inline void MDOrder::clear_minqty() {
  _impl_.minqty_ = int64_t{0};
}
inline int64_t MDOrder::_internal_minqty() const {
  return _impl_.minqty_;
}
inline int64_t MDOrder::minqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.MinQty)
  return _internal_minqty();
}
inline void MDOrder::_internal_set_minqty(int64_t value) {
  
  _impl_.minqty_ = value;
}
inline void MDOrder::set_minqty(int64_t value) {
  _internal_set_minqty(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.MinQty)
}

// string TradeDate = 34;
inline void MDOrder::clear_tradedate() {
  _impl_.tradedate_.ClearToEmpty();
}
inline const std::string& MDOrder::tradedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDOrder.TradeDate)
  return _internal_tradedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDOrder::set_tradedate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradedate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDOrder.TradeDate)
}
inline std::string* MDOrder::mutable_tradedate() {
  std::string* _s = _internal_mutable_tradedate();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDOrder.TradeDate)
  return _s;
}
inline const std::string& MDOrder::_internal_tradedate() const {
  return _impl_.tradedate_.Get();
}
inline void MDOrder::_internal_set_tradedate(const std::string& value) {
  
  _impl_.tradedate_.Set(value, GetArenaForAllocation());
}
inline std::string* MDOrder::_internal_mutable_tradedate() {
  
  return _impl_.tradedate_.Mutable(GetArenaForAllocation());
}
inline std::string* MDOrder::release_tradedate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDOrder.TradeDate)
  return _impl_.tradedate_.Release();
}
inline void MDOrder::set_allocated_tradedate(std::string* tradedate) {
  if (tradedate != nullptr) {
    
  } else {
    
  }
  _impl_.tradedate_.SetAllocated(tradedate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradedate_.IsDefault()) {
    _impl_.tradedate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDOrder.TradeDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDOrder_2eproto
