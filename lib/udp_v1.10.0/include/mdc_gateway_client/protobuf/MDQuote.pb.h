// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQuote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MDQuote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MDQuote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityIDSource.pb.h"
#include "ESecurityType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MDQuote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MDQuote_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MDQuote_2eproto;
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {
class MDCashBondQuote;
struct MDCashBondQuoteDefaultTypeInternal;
extern MDCashBondQuoteDefaultTypeInternal _MDCashBondQuote_default_instance_;
class MDQuote;
struct MDQuoteDefaultTypeInternal;
extern MDQuoteDefaultTypeInternal _MDQuote_default_instance_;
}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::htsc::mdc::insight::model::MDCashBondQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDCashBondQuote>(Arena*);
template<> ::com::htsc::mdc::insight::model::MDQuote* Arena::CreateMaybeMessage<::com::htsc::mdc::insight::model::MDQuote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// ===================================================================

class MDQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDQuote) */ {
 public:
  inline MDQuote() : MDQuote(nullptr) {}
  ~MDQuote() override;
  explicit PROTOBUF_CONSTEXPR MDQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDQuote(const MDQuote& from);
  MDQuote(MDQuote&& from) noexcept
    : MDQuote() {
    *this = ::std::move(from);
  }

  inline MDQuote& operator=(const MDQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDQuote& operator=(MDQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDQuote* internal_default_instance() {
    return reinterpret_cast<const MDQuote*>(
               &_MDQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MDQuote& a, MDQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDQuote& from) {
    MDQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDQuote";
  }
  protected:
  explicit MDQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMDCashBondQuotesFieldNumber = 18,
    kHTSCSecurityIDFieldNumber = 1,
    kTradingPhaseCodeFieldNumber = 5,
    kMarketIndicatorFieldNumber = 15,
    kMDDateFieldNumber = 2,
    kMDTimeFieldNumber = 3,
    kDataTimestampFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 6,
    kSecurityTypeFieldNumber = 7,
    kExchangeDateFieldNumber = 8,
    kExchangeTimeFieldNumber = 9,
    kMaxPxFieldNumber = 10,
    kMinPxFieldNumber = 11,
    kApplSeqNumFieldNumber = 13,
    kChannelNoFieldNumber = 12,
    kMDBookTypeFieldNumber = 14,
    kMarketDepthFieldNumber = 16,
    kMDSubBookTypeFieldNumber = 17,
    kDataMultiplePowerOf10FieldNumber = 19,
  };
  // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
  int mdcashbondquotes_size() const;
  private:
  int _internal_mdcashbondquotes_size() const;
  public:
  void clear_mdcashbondquotes();
  ::com::htsc::mdc::insight::model::MDCashBondQuote* mutable_mdcashbondquotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >*
      mutable_mdcashbondquotes();
  private:
  const ::com::htsc::mdc::insight::model::MDCashBondQuote& _internal_mdcashbondquotes(int index) const;
  ::com::htsc::mdc::insight::model::MDCashBondQuote* _internal_add_mdcashbondquotes();
  public:
  const ::com::htsc::mdc::insight::model::MDCashBondQuote& mdcashbondquotes(int index) const;
  ::com::htsc::mdc::insight::model::MDCashBondQuote* add_mdcashbondquotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >&
      mdcashbondquotes() const;

  // string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  const std::string& htscsecurityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_htscsecurityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_htscsecurityid();
  PROTOBUF_NODISCARD std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(std::string* htscsecurityid);
  private:
  const std::string& _internal_htscsecurityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_htscsecurityid(const std::string& value);
  std::string* _internal_mutable_htscsecurityid();
  public:

  // string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  const std::string& tradingphasecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingphasecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingphasecode();
  PROTOBUF_NODISCARD std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(std::string* tradingphasecode);
  private:
  const std::string& _internal_tradingphasecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingphasecode(const std::string& value);
  std::string* _internal_mutable_tradingphasecode();
  public:

  // string MarketIndicator = 15;
  void clear_marketindicator();
  const std::string& marketindicator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_marketindicator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_marketindicator();
  PROTOBUF_NODISCARD std::string* release_marketindicator();
  void set_allocated_marketindicator(std::string* marketindicator);
  private:
  const std::string& _internal_marketindicator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marketindicator(const std::string& value);
  std::string* _internal_mutable_marketindicator();
  public:

  // int32 MDDate = 2;
  void clear_mddate();
  int32_t mddate() const;
  void set_mddate(int32_t value);
  private:
  int32_t _internal_mddate() const;
  void _internal_set_mddate(int32_t value);
  public:

  // int32 MDTime = 3;
  void clear_mdtime();
  int32_t mdtime() const;
  void set_mdtime(int32_t value);
  private:
  int32_t _internal_mdtime() const;
  void _internal_set_mdtime(int32_t value);
  public:

  // int64 DataTimestamp = 4;
  void clear_datatimestamp();
  int64_t datatimestamp() const;
  void set_datatimestamp(int64_t value);
  private:
  int64_t _internal_datatimestamp() const;
  void _internal_set_datatimestamp(int64_t value);
  public:

  // .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  private:
  ::com::htsc::mdc::model::ESecurityIDSource _internal_securityidsource() const;
  void _internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);
  public:

  // .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  private:
  ::com::htsc::mdc::model::ESecurityType _internal_securitytype() const;
  void _internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value);
  public:

  // int32 ExchangeDate = 8;
  void clear_exchangedate();
  int32_t exchangedate() const;
  void set_exchangedate(int32_t value);
  private:
  int32_t _internal_exchangedate() const;
  void _internal_set_exchangedate(int32_t value);
  public:

  // int32 ExchangeTime = 9;
  void clear_exchangetime();
  int32_t exchangetime() const;
  void set_exchangetime(int32_t value);
  private:
  int32_t _internal_exchangetime() const;
  void _internal_set_exchangetime(int32_t value);
  public:

  // int64 MaxPx = 10;
  void clear_maxpx();
  int64_t maxpx() const;
  void set_maxpx(int64_t value);
  private:
  int64_t _internal_maxpx() const;
  void _internal_set_maxpx(int64_t value);
  public:

  // int64 MinPx = 11;
  void clear_minpx();
  int64_t minpx() const;
  void set_minpx(int64_t value);
  private:
  int64_t _internal_minpx() const;
  void _internal_set_minpx(int64_t value);
  public:

  // int64 ApplSeqNum = 13;
  void clear_applseqnum();
  int64_t applseqnum() const;
  void set_applseqnum(int64_t value);
  private:
  int64_t _internal_applseqnum() const;
  void _internal_set_applseqnum(int64_t value);
  public:

  // int32 ChannelNo = 12;
  void clear_channelno();
  int32_t channelno() const;
  void set_channelno(int32_t value);
  private:
  int32_t _internal_channelno() const;
  void _internal_set_channelno(int32_t value);
  public:

  // int32 MDBookType = 14;
  void clear_mdbooktype();
  int32_t mdbooktype() const;
  void set_mdbooktype(int32_t value);
  private:
  int32_t _internal_mdbooktype() const;
  void _internal_set_mdbooktype(int32_t value);
  public:

  // int32 MarketDepth = 16;
  void clear_marketdepth();
  int32_t marketdepth() const;
  void set_marketdepth(int32_t value);
  private:
  int32_t _internal_marketdepth() const;
  void _internal_set_marketdepth(int32_t value);
  public:

  // int32 MDSubBookType = 17;
  void clear_mdsubbooktype();
  int32_t mdsubbooktype() const;
  void set_mdsubbooktype(int32_t value);
  private:
  int32_t _internal_mdsubbooktype() const;
  void _internal_set_mdsubbooktype(int32_t value);
  public:

  // int32 DataMultiplePowerOf10 = 19;
  void clear_datamultiplepowerof10();
  int32_t datamultiplepowerof10() const;
  void set_datamultiplepowerof10(int32_t value);
  private:
  int32_t _internal_datamultiplepowerof10() const;
  void _internal_set_datamultiplepowerof10(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote > mdcashbondquotes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr htscsecurityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingphasecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketindicator_;
    int32_t mddate_;
    int32_t mdtime_;
    int64_t datatimestamp_;
    int securityidsource_;
    int securitytype_;
    int32_t exchangedate_;
    int32_t exchangetime_;
    int64_t maxpx_;
    int64_t minpx_;
    int64_t applseqnum_;
    int32_t channelno_;
    int32_t mdbooktype_;
    int32_t marketdepth_;
    int32_t mdsubbooktype_;
    int32_t datamultiplepowerof10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDQuote_2eproto;
};
// -------------------------------------------------------------------

class MDCashBondQuote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.MDCashBondQuote) */ {
 public:
  inline MDCashBondQuote() : MDCashBondQuote(nullptr) {}
  ~MDCashBondQuote() override;
  explicit PROTOBUF_CONSTEXPR MDCashBondQuote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MDCashBondQuote(const MDCashBondQuote& from);
  MDCashBondQuote(MDCashBondQuote&& from) noexcept
    : MDCashBondQuote() {
    *this = ::std::move(from);
  }

  inline MDCashBondQuote& operator=(const MDCashBondQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MDCashBondQuote& operator=(MDCashBondQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MDCashBondQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MDCashBondQuote* internal_default_instance() {
    return reinterpret_cast<const MDCashBondQuote*>(
               &_MDCashBondQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MDCashBondQuote& a, MDCashBondQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(MDCashBondQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MDCashBondQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MDCashBondQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MDCashBondQuote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MDCashBondQuote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MDCashBondQuote& from) {
    MDCashBondQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MDCashBondQuote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.htsc.mdc.insight.model.MDCashBondQuote";
  }
  protected:
  explicit MDCashBondQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteIDFieldNumber = 4,
    kSettlTypeFieldNumber = 11,
    kSettlCurrencyFieldNumber = 13,
    kTraderCodeFieldNumber = 16,
    kTraderAccountIDFieldNumber = 19,
    kQuoteTypeFieldNumber = 1,
    kSideFieldNumber = 2,
    kPriceLevelFieldNumber = 3,
    kQuoteDateFieldNumber = 5,
    kCleanPriceFieldNumber = 7,
    kDirtyPriceFieldNumber = 8,
    kQuoteTimeFieldNumber = 6,
    kClearingMethodFieldNumber = 10,
    kTotalFaceValueFieldNumber = 9,
    kSettlDateFieldNumber = 12,
    kPartyRoleFieldNumber = 15,
    kSettlCurrFxRateFieldNumber = 14,
    kMaturityYieldFieldNumber = 17,
    kDeliveryTypeFieldNumber = 18,
  };
  // string QuoteID = 4;
  void clear_quoteid();
  const std::string& quoteid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quoteid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quoteid();
  PROTOBUF_NODISCARD std::string* release_quoteid();
  void set_allocated_quoteid(std::string* quoteid);
  private:
  const std::string& _internal_quoteid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quoteid(const std::string& value);
  std::string* _internal_mutable_quoteid();
  public:

  // string SettlType = 11;
  void clear_settltype();
  const std::string& settltype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_settltype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_settltype();
  PROTOBUF_NODISCARD std::string* release_settltype();
  void set_allocated_settltype(std::string* settltype);
  private:
  const std::string& _internal_settltype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settltype(const std::string& value);
  std::string* _internal_mutable_settltype();
  public:

  // string SettlCurrency = 13;
  void clear_settlcurrency();
  const std::string& settlcurrency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_settlcurrency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_settlcurrency();
  PROTOBUF_NODISCARD std::string* release_settlcurrency();
  void set_allocated_settlcurrency(std::string* settlcurrency);
  private:
  const std::string& _internal_settlcurrency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settlcurrency(const std::string& value);
  std::string* _internal_mutable_settlcurrency();
  public:

  // string TraderCode = 16;
  void clear_tradercode();
  const std::string& tradercode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradercode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradercode();
  PROTOBUF_NODISCARD std::string* release_tradercode();
  void set_allocated_tradercode(std::string* tradercode);
  private:
  const std::string& _internal_tradercode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradercode(const std::string& value);
  std::string* _internal_mutable_tradercode();
  public:

  // string TraderAccountID = 19;
  void clear_traderaccountid();
  const std::string& traderaccountid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traderaccountid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traderaccountid();
  PROTOBUF_NODISCARD std::string* release_traderaccountid();
  void set_allocated_traderaccountid(std::string* traderaccountid);
  private:
  const std::string& _internal_traderaccountid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traderaccountid(const std::string& value);
  std::string* _internal_mutable_traderaccountid();
  public:

  // int32 QuoteType = 1;
  void clear_quotetype();
  int32_t quotetype() const;
  void set_quotetype(int32_t value);
  private:
  int32_t _internal_quotetype() const;
  void _internal_set_quotetype(int32_t value);
  public:

  // int32 Side = 2;
  void clear_side();
  int32_t side() const;
  void set_side(int32_t value);
  private:
  int32_t _internal_side() const;
  void _internal_set_side(int32_t value);
  public:

  // int32 PriceLevel = 3;
  void clear_pricelevel();
  int32_t pricelevel() const;
  void set_pricelevel(int32_t value);
  private:
  int32_t _internal_pricelevel() const;
  void _internal_set_pricelevel(int32_t value);
  public:

  // int32 QuoteDate = 5;
  void clear_quotedate();
  int32_t quotedate() const;
  void set_quotedate(int32_t value);
  private:
  int32_t _internal_quotedate() const;
  void _internal_set_quotedate(int32_t value);
  public:

  // int64 CleanPrice = 7;
  void clear_cleanprice();
  int64_t cleanprice() const;
  void set_cleanprice(int64_t value);
  private:
  int64_t _internal_cleanprice() const;
  void _internal_set_cleanprice(int64_t value);
  public:

  // int64 DirtyPrice = 8;
  void clear_dirtyprice();
  int64_t dirtyprice() const;
  void set_dirtyprice(int64_t value);
  private:
  int64_t _internal_dirtyprice() const;
  void _internal_set_dirtyprice(int64_t value);
  public:

  // int32 QuoteTime = 6;
  void clear_quotetime();
  int32_t quotetime() const;
  void set_quotetime(int32_t value);
  private:
  int32_t _internal_quotetime() const;
  void _internal_set_quotetime(int32_t value);
  public:

  // int32 ClearingMethod = 10;
  void clear_clearingmethod();
  int32_t clearingmethod() const;
  void set_clearingmethod(int32_t value);
  private:
  int32_t _internal_clearingmethod() const;
  void _internal_set_clearingmethod(int32_t value);
  public:

  // int64 TotalFaceValue = 9;
  void clear_totalfacevalue();
  int64_t totalfacevalue() const;
  void set_totalfacevalue(int64_t value);
  private:
  int64_t _internal_totalfacevalue() const;
  void _internal_set_totalfacevalue(int64_t value);
  public:

  // int32 SettlDate = 12;
  void clear_settldate();
  int32_t settldate() const;
  void set_settldate(int32_t value);
  private:
  int32_t _internal_settldate() const;
  void _internal_set_settldate(int32_t value);
  public:

  // int32 PartyRole = 15;
  void clear_partyrole();
  int32_t partyrole() const;
  void set_partyrole(int32_t value);
  private:
  int32_t _internal_partyrole() const;
  void _internal_set_partyrole(int32_t value);
  public:

  // int64 SettlCurrFxRate = 14;
  void clear_settlcurrfxrate();
  int64_t settlcurrfxrate() const;
  void set_settlcurrfxrate(int64_t value);
  private:
  int64_t _internal_settlcurrfxrate() const;
  void _internal_set_settlcurrfxrate(int64_t value);
  public:

  // int64 MaturityYield = 17;
  void clear_maturityyield();
  int64_t maturityyield() const;
  void set_maturityyield(int64_t value);
  private:
  int64_t _internal_maturityyield() const;
  void _internal_set_maturityyield(int64_t value);
  public:

  // int32 DeliveryType = 18;
  void clear_deliverytype();
  int32_t deliverytype() const;
  void set_deliverytype(int32_t value);
  private:
  int32_t _internal_deliverytype() const;
  void _internal_set_deliverytype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.MDCashBondQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoteid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settltype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settlcurrency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradercode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traderaccountid_;
    int32_t quotetype_;
    int32_t side_;
    int32_t pricelevel_;
    int32_t quotedate_;
    int64_t cleanprice_;
    int64_t dirtyprice_;
    int32_t quotetime_;
    int32_t clearingmethod_;
    int64_t totalfacevalue_;
    int32_t settldate_;
    int32_t partyrole_;
    int64_t settlcurrfxrate_;
    int64_t maturityyield_;
    int32_t deliverytype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MDQuote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MDQuote

// string HTSCSecurityID = 1;
inline void MDQuote::clear_htscsecurityid() {
  _impl_.htscsecurityid_.ClearToEmpty();
}
inline const std::string& MDQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  return _internal_htscsecurityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQuote::set_htscsecurityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.htscsecurityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}
inline std::string* MDQuote::mutable_htscsecurityid() {
  std::string* _s = _internal_mutable_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  return _s;
}
inline const std::string& MDQuote::_internal_htscsecurityid() const {
  return _impl_.htscsecurityid_.Get();
}
inline void MDQuote::_internal_set_htscsecurityid(const std::string& value) {
  
  _impl_.htscsecurityid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQuote::_internal_mutable_htscsecurityid() {
  
  return _impl_.htscsecurityid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  return _impl_.htscsecurityid_.Release();
}
inline void MDQuote::set_allocated_htscsecurityid(std::string* htscsecurityid) {
  if (htscsecurityid != nullptr) {
    
  } else {
    
  }
  _impl_.htscsecurityid_.SetAllocated(htscsecurityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.htscsecurityid_.IsDefault()) {
    _impl_.htscsecurityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}

// int32 MDDate = 2;
inline void MDQuote::clear_mddate() {
  _impl_.mddate_ = 0;
}
inline int32_t MDQuote::_internal_mddate() const {
  return _impl_.mddate_;
}
inline int32_t MDQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDDate)
  return _internal_mddate();
}
inline void MDQuote::_internal_set_mddate(int32_t value) {
  
  _impl_.mddate_ = value;
}
inline void MDQuote::set_mddate(int32_t value) {
  _internal_set_mddate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDDate)
}

// int32 MDTime = 3;
inline void MDQuote::clear_mdtime() {
  _impl_.mdtime_ = 0;
}
inline int32_t MDQuote::_internal_mdtime() const {
  return _impl_.mdtime_;
}
inline int32_t MDQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDTime)
  return _internal_mdtime();
}
inline void MDQuote::_internal_set_mdtime(int32_t value) {
  
  _impl_.mdtime_ = value;
}
inline void MDQuote::set_mdtime(int32_t value) {
  _internal_set_mdtime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDTime)
}

// int64 DataTimestamp = 4;
inline void MDQuote::clear_datatimestamp() {
  _impl_.datatimestamp_ = int64_t{0};
}
inline int64_t MDQuote::_internal_datatimestamp() const {
  return _impl_.datatimestamp_;
}
inline int64_t MDQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.DataTimestamp)
  return _internal_datatimestamp();
}
inline void MDQuote::_internal_set_datatimestamp(int64_t value) {
  
  _impl_.datatimestamp_ = value;
}
inline void MDQuote::set_datatimestamp(int64_t value) {
  _internal_set_datatimestamp(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.DataTimestamp)
}

// string TradingPhaseCode = 5;
inline void MDQuote::clear_tradingphasecode() {
  _impl_.tradingphasecode_.ClearToEmpty();
}
inline const std::string& MDQuote::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  return _internal_tradingphasecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQuote::set_tradingphasecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradingphasecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}
inline std::string* MDQuote::mutable_tradingphasecode() {
  std::string* _s = _internal_mutable_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  return _s;
}
inline const std::string& MDQuote::_internal_tradingphasecode() const {
  return _impl_.tradingphasecode_.Get();
}
inline void MDQuote::_internal_set_tradingphasecode(const std::string& value) {
  
  _impl_.tradingphasecode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQuote::_internal_mutable_tradingphasecode() {
  
  return _impl_.tradingphasecode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQuote::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  return _impl_.tradingphasecode_.Release();
}
inline void MDQuote::set_allocated_tradingphasecode(std::string* tradingphasecode) {
  if (tradingphasecode != nullptr) {
    
  } else {
    
  }
  _impl_.tradingphasecode_.SetAllocated(tradingphasecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradingphasecode_.IsDefault()) {
    _impl_.tradingphasecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}

// .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void MDQuote::clear_securityidsource() {
  _impl_.securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDQuote::_internal_securityidsource() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(_impl_.securityidsource_);
}
inline ::com::htsc::mdc::model::ESecurityIDSource MDQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.securityIDSource)
  return _internal_securityidsource();
}
inline void MDQuote::_internal_set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  _impl_.securityidsource_ = value;
}
inline void MDQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.securityIDSource)
}

// .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void MDQuote::clear_securitytype() {
  _impl_.securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType MDQuote::_internal_securitytype() const {
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(_impl_.securitytype_);
}
inline ::com::htsc::mdc::model::ESecurityType MDQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.securityType)
  return _internal_securitytype();
}
inline void MDQuote::_internal_set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  _impl_.securitytype_ = value;
}
inline void MDQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  _internal_set_securitytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.securityType)
}

// int32 ExchangeDate = 8;
inline void MDQuote::clear_exchangedate() {
  _impl_.exchangedate_ = 0;
}
inline int32_t MDQuote::_internal_exchangedate() const {
  return _impl_.exchangedate_;
}
inline int32_t MDQuote::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ExchangeDate)
  return _internal_exchangedate();
}
inline void MDQuote::_internal_set_exchangedate(int32_t value) {
  
  _impl_.exchangedate_ = value;
}
inline void MDQuote::set_exchangedate(int32_t value) {
  _internal_set_exchangedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ExchangeDate)
}

// int32 ExchangeTime = 9;
inline void MDQuote::clear_exchangetime() {
  _impl_.exchangetime_ = 0;
}
inline int32_t MDQuote::_internal_exchangetime() const {
  return _impl_.exchangetime_;
}
inline int32_t MDQuote::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ExchangeTime)
  return _internal_exchangetime();
}
inline void MDQuote::_internal_set_exchangetime(int32_t value) {
  
  _impl_.exchangetime_ = value;
}
inline void MDQuote::set_exchangetime(int32_t value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ExchangeTime)
}

// int64 MaxPx = 10;
inline void MDQuote::clear_maxpx() {
  _impl_.maxpx_ = int64_t{0};
}
inline int64_t MDQuote::_internal_maxpx() const {
  return _impl_.maxpx_;
}
inline int64_t MDQuote::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MaxPx)
  return _internal_maxpx();
}
inline void MDQuote::_internal_set_maxpx(int64_t value) {
  
  _impl_.maxpx_ = value;
}
inline void MDQuote::set_maxpx(int64_t value) {
  _internal_set_maxpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MaxPx)
}

// int64 MinPx = 11;
inline void MDQuote::clear_minpx() {
  _impl_.minpx_ = int64_t{0};
}
inline int64_t MDQuote::_internal_minpx() const {
  return _impl_.minpx_;
}
inline int64_t MDQuote::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MinPx)
  return _internal_minpx();
}
inline void MDQuote::_internal_set_minpx(int64_t value) {
  
  _impl_.minpx_ = value;
}
inline void MDQuote::set_minpx(int64_t value) {
  _internal_set_minpx(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MinPx)
}

// int32 ChannelNo = 12;
inline void MDQuote::clear_channelno() {
  _impl_.channelno_ = 0;
}
inline int32_t MDQuote::_internal_channelno() const {
  return _impl_.channelno_;
}
inline int32_t MDQuote::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ChannelNo)
  return _internal_channelno();
}
inline void MDQuote::_internal_set_channelno(int32_t value) {
  
  _impl_.channelno_ = value;
}
inline void MDQuote::set_channelno(int32_t value) {
  _internal_set_channelno(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ChannelNo)
}

// int64 ApplSeqNum = 13;
inline void MDQuote::clear_applseqnum() {
  _impl_.applseqnum_ = int64_t{0};
}
inline int64_t MDQuote::_internal_applseqnum() const {
  return _impl_.applseqnum_;
}
inline int64_t MDQuote::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ApplSeqNum)
  return _internal_applseqnum();
}
inline void MDQuote::_internal_set_applseqnum(int64_t value) {
  
  _impl_.applseqnum_ = value;
}
inline void MDQuote::set_applseqnum(int64_t value) {
  _internal_set_applseqnum(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ApplSeqNum)
}

// int32 MDBookType = 14;
inline void MDQuote::clear_mdbooktype() {
  _impl_.mdbooktype_ = 0;
}
inline int32_t MDQuote::_internal_mdbooktype() const {
  return _impl_.mdbooktype_;
}
inline int32_t MDQuote::mdbooktype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDBookType)
  return _internal_mdbooktype();
}
inline void MDQuote::_internal_set_mdbooktype(int32_t value) {
  
  _impl_.mdbooktype_ = value;
}
inline void MDQuote::set_mdbooktype(int32_t value) {
  _internal_set_mdbooktype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDBookType)
}

// string MarketIndicator = 15;
inline void MDQuote::clear_marketindicator() {
  _impl_.marketindicator_.ClearToEmpty();
}
inline const std::string& MDQuote::marketindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  return _internal_marketindicator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDQuote::set_marketindicator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.marketindicator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}
inline std::string* MDQuote::mutable_marketindicator() {
  std::string* _s = _internal_mutable_marketindicator();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  return _s;
}
inline const std::string& MDQuote::_internal_marketindicator() const {
  return _impl_.marketindicator_.Get();
}
inline void MDQuote::_internal_set_marketindicator(const std::string& value) {
  
  _impl_.marketindicator_.Set(value, GetArenaForAllocation());
}
inline std::string* MDQuote::_internal_mutable_marketindicator() {
  
  return _impl_.marketindicator_.Mutable(GetArenaForAllocation());
}
inline std::string* MDQuote::release_marketindicator() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  return _impl_.marketindicator_.Release();
}
inline void MDQuote::set_allocated_marketindicator(std::string* marketindicator) {
  if (marketindicator != nullptr) {
    
  } else {
    
  }
  _impl_.marketindicator_.SetAllocated(marketindicator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.marketindicator_.IsDefault()) {
    _impl_.marketindicator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}

// int32 MarketDepth = 16;
inline void MDQuote::clear_marketdepth() {
  _impl_.marketdepth_ = 0;
}
inline int32_t MDQuote::_internal_marketdepth() const {
  return _impl_.marketdepth_;
}
inline int32_t MDQuote::marketdepth() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MarketDepth)
  return _internal_marketdepth();
}
inline void MDQuote::_internal_set_marketdepth(int32_t value) {
  
  _impl_.marketdepth_ = value;
}
inline void MDQuote::set_marketdepth(int32_t value) {
  _internal_set_marketdepth(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MarketDepth)
}

// int32 MDSubBookType = 17;
inline void MDQuote::clear_mdsubbooktype() {
  _impl_.mdsubbooktype_ = 0;
}
inline int32_t MDQuote::_internal_mdsubbooktype() const {
  return _impl_.mdsubbooktype_;
}
inline int32_t MDQuote::mdsubbooktype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDSubBookType)
  return _internal_mdsubbooktype();
}
inline void MDQuote::_internal_set_mdsubbooktype(int32_t value) {
  
  _impl_.mdsubbooktype_ = value;
}
inline void MDQuote::set_mdsubbooktype(int32_t value) {
  _internal_set_mdsubbooktype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDSubBookType)
}

// repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
inline int MDQuote::_internal_mdcashbondquotes_size() const {
  return _impl_.mdcashbondquotes_.size();
}
inline int MDQuote::mdcashbondquotes_size() const {
  return _internal_mdcashbondquotes_size();
}
inline void MDQuote::clear_mdcashbondquotes() {
  _impl_.mdcashbondquotes_.Clear();
}
inline ::com::htsc::mdc::insight::model::MDCashBondQuote* MDQuote::mutable_mdcashbondquotes(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return _impl_.mdcashbondquotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >*
MDQuote::mutable_mdcashbondquotes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return &_impl_.mdcashbondquotes_;
}
inline const ::com::htsc::mdc::insight::model::MDCashBondQuote& MDQuote::_internal_mdcashbondquotes(int index) const {
  return _impl_.mdcashbondquotes_.Get(index);
}
inline const ::com::htsc::mdc::insight::model::MDCashBondQuote& MDQuote::mdcashbondquotes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return _internal_mdcashbondquotes(index);
}
inline ::com::htsc::mdc::insight::model::MDCashBondQuote* MDQuote::_internal_add_mdcashbondquotes() {
  return _impl_.mdcashbondquotes_.Add();
}
inline ::com::htsc::mdc::insight::model::MDCashBondQuote* MDQuote::add_mdcashbondquotes() {
  ::com::htsc::mdc::insight::model::MDCashBondQuote* _add = _internal_add_mdcashbondquotes();
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >&
MDQuote::mdcashbondquotes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return _impl_.mdcashbondquotes_;
}

// int32 DataMultiplePowerOf10 = 19;
inline void MDQuote::clear_datamultiplepowerof10() {
  _impl_.datamultiplepowerof10_ = 0;
}
inline int32_t MDQuote::_internal_datamultiplepowerof10() const {
  return _impl_.datamultiplepowerof10_;
}
inline int32_t MDQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.DataMultiplePowerOf10)
  return _internal_datamultiplepowerof10();
}
inline void MDQuote::_internal_set_datamultiplepowerof10(int32_t value) {
  
  _impl_.datamultiplepowerof10_ = value;
}
inline void MDQuote::set_datamultiplepowerof10(int32_t value) {
  _internal_set_datamultiplepowerof10(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.DataMultiplePowerOf10)
}

// -------------------------------------------------------------------

// MDCashBondQuote

// int32 QuoteType = 1;
inline void MDCashBondQuote::clear_quotetype() {
  _impl_.quotetype_ = 0;
}
inline int32_t MDCashBondQuote::_internal_quotetype() const {
  return _impl_.quotetype_;
}
inline int32_t MDCashBondQuote::quotetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteType)
  return _internal_quotetype();
}
inline void MDCashBondQuote::_internal_set_quotetype(int32_t value) {
  
  _impl_.quotetype_ = value;
}
inline void MDCashBondQuote::set_quotetype(int32_t value) {
  _internal_set_quotetype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteType)
}

// int32 Side = 2;
inline void MDCashBondQuote::clear_side() {
  _impl_.side_ = 0;
}
inline int32_t MDCashBondQuote::_internal_side() const {
  return _impl_.side_;
}
inline int32_t MDCashBondQuote::side() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.Side)
  return _internal_side();
}
inline void MDCashBondQuote::_internal_set_side(int32_t value) {
  
  _impl_.side_ = value;
}
inline void MDCashBondQuote::set_side(int32_t value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.Side)
}

// int32 PriceLevel = 3;
inline void MDCashBondQuote::clear_pricelevel() {
  _impl_.pricelevel_ = 0;
}
inline int32_t MDCashBondQuote::_internal_pricelevel() const {
  return _impl_.pricelevel_;
}
inline int32_t MDCashBondQuote::pricelevel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.PriceLevel)
  return _internal_pricelevel();
}
inline void MDCashBondQuote::_internal_set_pricelevel(int32_t value) {
  
  _impl_.pricelevel_ = value;
}
inline void MDCashBondQuote::set_pricelevel(int32_t value) {
  _internal_set_pricelevel(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.PriceLevel)
}

// string QuoteID = 4;
inline void MDCashBondQuote::clear_quoteid() {
  _impl_.quoteid_.ClearToEmpty();
}
inline const std::string& MDCashBondQuote::quoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  return _internal_quoteid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCashBondQuote::set_quoteid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quoteid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}
inline std::string* MDCashBondQuote::mutable_quoteid() {
  std::string* _s = _internal_mutable_quoteid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  return _s;
}
inline const std::string& MDCashBondQuote::_internal_quoteid() const {
  return _impl_.quoteid_.Get();
}
inline void MDCashBondQuote::_internal_set_quoteid(const std::string& value) {
  
  _impl_.quoteid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::_internal_mutable_quoteid() {
  
  return _impl_.quoteid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::release_quoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  return _impl_.quoteid_.Release();
}
inline void MDCashBondQuote::set_allocated_quoteid(std::string* quoteid) {
  if (quoteid != nullptr) {
    
  } else {
    
  }
  _impl_.quoteid_.SetAllocated(quoteid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quoteid_.IsDefault()) {
    _impl_.quoteid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}

// int32 QuoteDate = 5;
inline void MDCashBondQuote::clear_quotedate() {
  _impl_.quotedate_ = 0;
}
inline int32_t MDCashBondQuote::_internal_quotedate() const {
  return _impl_.quotedate_;
}
inline int32_t MDCashBondQuote::quotedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteDate)
  return _internal_quotedate();
}
inline void MDCashBondQuote::_internal_set_quotedate(int32_t value) {
  
  _impl_.quotedate_ = value;
}
inline void MDCashBondQuote::set_quotedate(int32_t value) {
  _internal_set_quotedate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteDate)
}

// int32 QuoteTime = 6;
inline void MDCashBondQuote::clear_quotetime() {
  _impl_.quotetime_ = 0;
}
inline int32_t MDCashBondQuote::_internal_quotetime() const {
  return _impl_.quotetime_;
}
inline int32_t MDCashBondQuote::quotetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteTime)
  return _internal_quotetime();
}
inline void MDCashBondQuote::_internal_set_quotetime(int32_t value) {
  
  _impl_.quotetime_ = value;
}
inline void MDCashBondQuote::set_quotetime(int32_t value) {
  _internal_set_quotetime(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteTime)
}

// int64 CleanPrice = 7;
inline void MDCashBondQuote::clear_cleanprice() {
  _impl_.cleanprice_ = int64_t{0};
}
inline int64_t MDCashBondQuote::_internal_cleanprice() const {
  return _impl_.cleanprice_;
}
inline int64_t MDCashBondQuote::cleanprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.CleanPrice)
  return _internal_cleanprice();
}
inline void MDCashBondQuote::_internal_set_cleanprice(int64_t value) {
  
  _impl_.cleanprice_ = value;
}
inline void MDCashBondQuote::set_cleanprice(int64_t value) {
  _internal_set_cleanprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.CleanPrice)
}

// int64 DirtyPrice = 8;
inline void MDCashBondQuote::clear_dirtyprice() {
  _impl_.dirtyprice_ = int64_t{0};
}
inline int64_t MDCashBondQuote::_internal_dirtyprice() const {
  return _impl_.dirtyprice_;
}
inline int64_t MDCashBondQuote::dirtyprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.DirtyPrice)
  return _internal_dirtyprice();
}
inline void MDCashBondQuote::_internal_set_dirtyprice(int64_t value) {
  
  _impl_.dirtyprice_ = value;
}
inline void MDCashBondQuote::set_dirtyprice(int64_t value) {
  _internal_set_dirtyprice(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.DirtyPrice)
}

// int64 TotalFaceValue = 9;
inline void MDCashBondQuote::clear_totalfacevalue() {
  _impl_.totalfacevalue_ = int64_t{0};
}
inline int64_t MDCashBondQuote::_internal_totalfacevalue() const {
  return _impl_.totalfacevalue_;
}
inline int64_t MDCashBondQuote::totalfacevalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TotalFaceValue)
  return _internal_totalfacevalue();
}
inline void MDCashBondQuote::_internal_set_totalfacevalue(int64_t value) {
  
  _impl_.totalfacevalue_ = value;
}
inline void MDCashBondQuote::set_totalfacevalue(int64_t value) {
  _internal_set_totalfacevalue(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TotalFaceValue)
}

// int32 ClearingMethod = 10;
inline void MDCashBondQuote::clear_clearingmethod() {
  _impl_.clearingmethod_ = 0;
}
inline int32_t MDCashBondQuote::_internal_clearingmethod() const {
  return _impl_.clearingmethod_;
}
inline int32_t MDCashBondQuote::clearingmethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.ClearingMethod)
  return _internal_clearingmethod();
}
inline void MDCashBondQuote::_internal_set_clearingmethod(int32_t value) {
  
  _impl_.clearingmethod_ = value;
}
inline void MDCashBondQuote::set_clearingmethod(int32_t value) {
  _internal_set_clearingmethod(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.ClearingMethod)
}

// string SettlType = 11;
inline void MDCashBondQuote::clear_settltype() {
  _impl_.settltype_.ClearToEmpty();
}
inline const std::string& MDCashBondQuote::settltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  return _internal_settltype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCashBondQuote::set_settltype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.settltype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}
inline std::string* MDCashBondQuote::mutable_settltype() {
  std::string* _s = _internal_mutable_settltype();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  return _s;
}
inline const std::string& MDCashBondQuote::_internal_settltype() const {
  return _impl_.settltype_.Get();
}
inline void MDCashBondQuote::_internal_set_settltype(const std::string& value) {
  
  _impl_.settltype_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::_internal_mutable_settltype() {
  
  return _impl_.settltype_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::release_settltype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  return _impl_.settltype_.Release();
}
inline void MDCashBondQuote::set_allocated_settltype(std::string* settltype) {
  if (settltype != nullptr) {
    
  } else {
    
  }
  _impl_.settltype_.SetAllocated(settltype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.settltype_.IsDefault()) {
    _impl_.settltype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}

// int32 SettlDate = 12;
inline void MDCashBondQuote::clear_settldate() {
  _impl_.settldate_ = 0;
}
inline int32_t MDCashBondQuote::_internal_settldate() const {
  return _impl_.settldate_;
}
inline int32_t MDCashBondQuote::settldate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlDate)
  return _internal_settldate();
}
inline void MDCashBondQuote::_internal_set_settldate(int32_t value) {
  
  _impl_.settldate_ = value;
}
inline void MDCashBondQuote::set_settldate(int32_t value) {
  _internal_set_settldate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlDate)
}

// string SettlCurrency = 13;
inline void MDCashBondQuote::clear_settlcurrency() {
  _impl_.settlcurrency_.ClearToEmpty();
}
inline const std::string& MDCashBondQuote::settlcurrency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  return _internal_settlcurrency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCashBondQuote::set_settlcurrency(ArgT0&& arg0, ArgT... args) {
 
 _impl_.settlcurrency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}
inline std::string* MDCashBondQuote::mutable_settlcurrency() {
  std::string* _s = _internal_mutable_settlcurrency();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  return _s;
}
inline const std::string& MDCashBondQuote::_internal_settlcurrency() const {
  return _impl_.settlcurrency_.Get();
}
inline void MDCashBondQuote::_internal_set_settlcurrency(const std::string& value) {
  
  _impl_.settlcurrency_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::_internal_mutable_settlcurrency() {
  
  return _impl_.settlcurrency_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::release_settlcurrency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  return _impl_.settlcurrency_.Release();
}
inline void MDCashBondQuote::set_allocated_settlcurrency(std::string* settlcurrency) {
  if (settlcurrency != nullptr) {
    
  } else {
    
  }
  _impl_.settlcurrency_.SetAllocated(settlcurrency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.settlcurrency_.IsDefault()) {
    _impl_.settlcurrency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}

// int64 SettlCurrFxRate = 14;
inline void MDCashBondQuote::clear_settlcurrfxrate() {
  _impl_.settlcurrfxrate_ = int64_t{0};
}
inline int64_t MDCashBondQuote::_internal_settlcurrfxrate() const {
  return _impl_.settlcurrfxrate_;
}
inline int64_t MDCashBondQuote::settlcurrfxrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrFxRate)
  return _internal_settlcurrfxrate();
}
inline void MDCashBondQuote::_internal_set_settlcurrfxrate(int64_t value) {
  
  _impl_.settlcurrfxrate_ = value;
}
inline void MDCashBondQuote::set_settlcurrfxrate(int64_t value) {
  _internal_set_settlcurrfxrate(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrFxRate)
}

// int32 PartyRole = 15;
inline void MDCashBondQuote::clear_partyrole() {
  _impl_.partyrole_ = 0;
}
inline int32_t MDCashBondQuote::_internal_partyrole() const {
  return _impl_.partyrole_;
}
inline int32_t MDCashBondQuote::partyrole() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.PartyRole)
  return _internal_partyrole();
}
inline void MDCashBondQuote::_internal_set_partyrole(int32_t value) {
  
  _impl_.partyrole_ = value;
}
inline void MDCashBondQuote::set_partyrole(int32_t value) {
  _internal_set_partyrole(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.PartyRole)
}

// string TraderCode = 16;
inline void MDCashBondQuote::clear_tradercode() {
  _impl_.tradercode_.ClearToEmpty();
}
inline const std::string& MDCashBondQuote::tradercode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  return _internal_tradercode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCashBondQuote::set_tradercode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradercode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}
inline std::string* MDCashBondQuote::mutable_tradercode() {
  std::string* _s = _internal_mutable_tradercode();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  return _s;
}
inline const std::string& MDCashBondQuote::_internal_tradercode() const {
  return _impl_.tradercode_.Get();
}
inline void MDCashBondQuote::_internal_set_tradercode(const std::string& value) {
  
  _impl_.tradercode_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::_internal_mutable_tradercode() {
  
  return _impl_.tradercode_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::release_tradercode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  return _impl_.tradercode_.Release();
}
inline void MDCashBondQuote::set_allocated_tradercode(std::string* tradercode) {
  if (tradercode != nullptr) {
    
  } else {
    
  }
  _impl_.tradercode_.SetAllocated(tradercode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradercode_.IsDefault()) {
    _impl_.tradercode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}

// int64 MaturityYield = 17;
inline void MDCashBondQuote::clear_maturityyield() {
  _impl_.maturityyield_ = int64_t{0};
}
inline int64_t MDCashBondQuote::_internal_maturityyield() const {
  return _impl_.maturityyield_;
}
inline int64_t MDCashBondQuote::maturityyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.MaturityYield)
  return _internal_maturityyield();
}
inline void MDCashBondQuote::_internal_set_maturityyield(int64_t value) {
  
  _impl_.maturityyield_ = value;
}
inline void MDCashBondQuote::set_maturityyield(int64_t value) {
  _internal_set_maturityyield(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.MaturityYield)
}

// int32 DeliveryType = 18;
inline void MDCashBondQuote::clear_deliverytype() {
  _impl_.deliverytype_ = 0;
}
inline int32_t MDCashBondQuote::_internal_deliverytype() const {
  return _impl_.deliverytype_;
}
inline int32_t MDCashBondQuote::deliverytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.DeliveryType)
  return _internal_deliverytype();
}
inline void MDCashBondQuote::_internal_set_deliverytype(int32_t value) {
  
  _impl_.deliverytype_ = value;
}
inline void MDCashBondQuote::set_deliverytype(int32_t value) {
  _internal_set_deliverytype(value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.DeliveryType)
}

// string TraderAccountID = 19;
inline void MDCashBondQuote::clear_traderaccountid() {
  _impl_.traderaccountid_.ClearToEmpty();
}
inline const std::string& MDCashBondQuote::traderaccountid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  return _internal_traderaccountid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MDCashBondQuote::set_traderaccountid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.traderaccountid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}
inline std::string* MDCashBondQuote::mutable_traderaccountid() {
  std::string* _s = _internal_mutable_traderaccountid();
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  return _s;
}
inline const std::string& MDCashBondQuote::_internal_traderaccountid() const {
  return _impl_.traderaccountid_.Get();
}
inline void MDCashBondQuote::_internal_set_traderaccountid(const std::string& value) {
  
  _impl_.traderaccountid_.Set(value, GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::_internal_mutable_traderaccountid() {
  
  return _impl_.traderaccountid_.Mutable(GetArenaForAllocation());
}
inline std::string* MDCashBondQuote::release_traderaccountid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  return _impl_.traderaccountid_.Release();
}
inline void MDCashBondQuote::set_allocated_traderaccountid(std::string* traderaccountid) {
  if (traderaccountid != nullptr) {
    
  } else {
    
  }
  _impl_.traderaccountid_.SetAllocated(traderaccountid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.traderaccountid_.IsDefault()) {
    _impl_.traderaccountid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MDQuote_2eproto
